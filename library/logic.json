{
    "name": "logic",
    "content": [
        {
            "proof": [
                {
                    "id": "A1",
                    "prevs": [],
                    "th": "A ∧ B ⊢ A ∧ B",
                    "rule": "assume",
                    "args": "A ∧ B"
                },
                {
                    "id": "S1",
                    "prevs": [],
                    "th": "A ∧ B ⊢ B ∧ A",
                    "rule": "sorry",
                    "args": ""
                },
                {
                    "id": "S2",
                    "prevs": [
                        "S1"
                    ],
                    "th": "⊢ A ∧ B ⟶ B ∧ A",
                    "rule": "implies_intr",
                    "args": "A ∧ B"
                }
            ],
            "name": "conj_comm",
            "prop": "A & B --> B & A",
            "ty": "thm",
            "instructions": [
                "Select S1 as goal, use Ctrl+B with conjI",
                "Select S1 as goal and A1 as fact, use Ctrl+B with conjD2.",
                "Select S2 as goal and A1 as fact, use Ctrl+B with conjD1."
            ],
            "num_gaps": 1,
            "vars": {
                "B": "bool",
                "A": "bool"
            }
        },
        {
            "proof": [
                {
                    "id": "A1",
                    "prevs": [],
                    "th": "A ∨ B ⊢ A ∨ B",
                    "rule": "assume",
                    "args": "A ∨ B"
                },
                {
                    "id": "S1",
                    "prevs": [],
                    "th": "A ∨ B ⊢ A ⟶ B ∨ A",
                    "rule": "sorry",
                    "args": ""
                },
                {
                    "id": "S2",
                    "prevs": [],
                    "th": "A ∨ B ⊢ B ⟶ B ∨ A",
                    "rule": "sorry",
                    "args": ""
                },
                {
                    "id": "S3",
                    "prevs": [
                        "A1",
                        "S1",
                        "S2"
                    ],
                    "th": "A ∨ B ⊢ B ∨ A",
                    "rule": "apply_theorem_for",
                    "args": "disjE, {A: A, B: B, C: B ∨ A}"
                },
                {
                    "id": "S4",
                    "prevs": [
                        "S3"
                    ],
                    "th": "⊢ A ∨ B ⟶ B ∨ A",
                    "rule": "implies_intr",
                    "args": "A ∨ B"
                }
            ],
            "name": "disj_comm",
            "prop": "A | B --> B | A",
            "ty": "thm",
            "instructions": [
                "Select S1 as goal and A1 as fact, use Ctrl+B with disjE.",
                "Select S1 as goal, use Ctrl+I.",
                "Select S2 as goal and S1 as fact, use Ctrl+B with disjI2.",
                "Select S4 as goal, use Ctrl+I.",
                "Select S5 as goal and S4 as fact, use Ctrl+B with disjI1."
            ],
            "num_gaps": 2,
            "vars": {
                "B": "bool",
                "A": "bool"
            }
        },
        {
            "vars": {
                "A": "bool"
            },
            "ty": "thm",
            "instructions": [
                "Add line 'theorem classical' after A1.",
                "Select S2 as goal and S1 as fact, use Ctrl+B with disjE.",
                "Select S2 as goal, use Ctrl+I.",
                "Select S4 as goal, use Ctrl+I.",
                "Select S5 as goal, use Ctrl+B with falseE.",
                "Select S5 as goal and A1 as fact, use Ctrl+B with negE."
            ],
            "prop": "~~A --> A",
            "name": "double_neg"
        },
        {
            "vars": {
                "x": "'a",
                "B": "'a => bool",
                "A": "'a => bool"
            },
            "ty": "thm",
            "instructions": [
                "Select S1 as goal and A1 as fact, use Ctrl+B with exE.",
                "Select S1 as goal, use Ctrl+I with x as variable name.",
                "Select S2 as goal, use Ctrl+B with conjI.",
                "Add line 'apply_theorem conjD1 from S1' after S1.",
                "Select S3 as goal and S2 as fact, use Ctrl+B with exI.",
                "Add line 'apply_theorem conjD2 from S1' after S3.",
                "Select S5 as goal and S4 as fact, use Ctrl+B with exI."
            ],
            "prop": "(?x::'a. A x & B x) --> (?x::'a. A x) & (?x::'a. B x)",
            "name": "ex_conj_distrib"
        },
        {
            "vars": {
                "x": "'a",
                "B": "'a => bool",
                "A": "'a => bool"
            },
            "ty": "thm",
            "instructions": [
                "Select S1 as goal, use Ctrl+B with conjI.",
                "Select S1 as goal, use Ctrl+I with x as variable name.",
                "Add line 'forall_elim x from A1' after A1.",
                "Select S2 as goal and S1 as fact, use Ctrl+B with conjD1.",
                "Select S4 as goal, use Ctrl+I with x as variable name.",
                "Select S4 as goal and S1 as fact, use Ctrl+B with conjD2."
            ],
            "prop": "(!x::'a. A x & B x) --> (!x::'a. A x) & (!x::'a. B x)",
            "name": "all_conj_distrib"
        },
        {
            "vars": {
                "n": "nat"
            },
            "ty": "thm",
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
                "Select S1 as goal, use Ctrl+R with plus_def_1.",
                "Set sorry on S1 to reflexive 0.",
                "Select S3 as goal, use Ctrl+I with n as variable name.",
                "Select S4 as goal, use Ctrl+R with plus_def_2.",
                "Set sorry on S4 to arg_combination Suc from S3."
            ],
            "prop": "n + 0 = n",
            "name": "nat.add_0_right"
        },
        {
            "proof": [
                {
                    "id": "S1",
                    "prevs": [],
                    "th": "⊢ n * 0 = 0",
                    "rule": "sorry",
                    "args": ""
                }
            ],
            "name": "nat.mult_0_right",
            "prop": "n * 0 = 0",
            "ty": "thm",
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
                "Select S1 as goal, use Ctrl+R with times_def_1.",
                "Set sorry on S1 to reflexive 0.",
                "Select S3 as goal, use Ctrl+I with n as variable name.",
                "Select S4 as goal, use Ctrl+R with times_def_2.",
                "Select S4 as goal, use Ctrl+R with plus_def_1"
            ],
            "num_gaps": 1,
            "vars": {
                "n": "nat"
            }
        },
        {
            "ty": "thm",
            "name": "conj_disj_distribL1",
            "prop": "A & (B | C) --> (A & B) | (A & C)",
            "vars": {
                "C": "bool",
                "B": "bool",
                "A": "bool"
            }
        },
        {
            "ty": "thm",
            "name": "conj_disj_distribL1",
            "prop": "(A & B) | (A & C) --> A & (B | C)",
            "vars": {
                "C": "bool",
                "B": "bool",
                "A": "bool"
            }
        },
        {
            "vars": {
                "x": "'a",
                "xs": "'a list"
            },
            "ty": "thm",
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'list_induct,xs'.",
                "Select S1 as goal, use Ctrl+R with append_def_1.",
                "Set sorry on S1 to reflexive nil.",
                "Select S3 as goal, use Ctrl+I with x,xs as variable name.",
                "Select S4 as goal, use Ctrl+R with append_def_2.",
                "Set sorry on S4 to arg_combination cons x from S3."
            ],
            "prop": "xs @ nil = xs",
            "name": "list.append_right_neutral"
        },
        {
            "vars": {
                "ys": "'a list",
                "x": "'a",
                "zs": "'a list",
                "xs": "'a list"
            },
            "ty": "thm",
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'list_induct,xs'.",
                "Select S1 as goal, use Ctrl+R with append_def_1.",
                "Set sorry on S1 to reflexive ys @ zs.",
                "Select S3 as goal, use Ctrl+I with x,xs as variable name.",
                "Select S4 as goal, use Ctrl+R with append_def_2.",
                "Select S4 as goal, use Ctrl+R with append_def_2.",
                "Set sorry on S4 to arg_combination cons x from S3."
            ],
            "prop": "(xs @ ys) @ zs = xs @ ys @ zs",
            "name": "list.append_assoc"
        }
    ],
    "imports": [
        "logic_base"
    ]
}