{
    "content": [
        {
            "name": "infsum",
            "ty": "def.ax",
            "type": "nat set ⇒ (nat ⇒ 'a) ⇒ 'a"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp",
            "prop": "exp x = infsum (from 0) (λn. x ^ n / of_nat (fact n))",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_add",
            "prop": "exp (x + y) = exp x * exp y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_0",
            "prop": "exp 0 = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_nz",
            "prop": "¬(exp x = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_add_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y + -x = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ x + y + -x = y"
                },
                {
                    "args": "exp (x + y + -x) = exp y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (x + y + -x) = exp y"
                },
                {
                    "args": "real_exp_add, exp (x + y) * exp (-x) = exp y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (x + y) * exp (-x) = exp y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (x + y) * exp (-x) = exp y"
                }
            ],
            "prop": "exp (x + y) * exp (-x) = exp y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal": "x + y + -x = y",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_neg_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_add_rinv, exp (x + -x) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x + -x) = 1"
                },
                {
                    "args": "real_exp_add, exp x * exp (-x) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x * exp (-x) = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x * exp (-x) = 1"
                }
            ],
            "prop": "exp x * exp (-x) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rinv"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_neg_mul, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp x * exp (-x) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = exp x * exp (-x)"
                },
                {
                    "args": "real_exp_nz, {}, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp x = 0)"
                },
                {
                    "args": "real_mul_linv, {}, {x: exp x}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ real_inverse (exp x) * exp x = 1"
                },
                {
                    "args": "real_mult_comm, {}, {x: exp (-x), y: (1::real)}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp (-x) * 1 = 1 * exp (-x)"
                },
                {
                    "args": "real_exp_neg_mul, exp (-x) * (exp x * exp (-x)) = 1 * exp (-x)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-x) * (exp x * exp (-x)) = 1 * exp (-x)"
                },
                {
                    "args": "real_mult_assoc, exp (-x) * exp x * exp (-x) = 1 * exp (-x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (-x) * exp x * exp (-x) = 1 * exp (-x)"
                },
                {
                    "args": "exp (-x) * exp x * exp (-x) = real_inverse (exp x) * exp x * exp (-x)",
                    "id": "7",
                    "prevs": [
                        "3",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (-x) * exp x * exp (-x) = real_inverse (exp x) * exp x * exp (-x)"
                },
                {
                    "args": "real_mult_assoc, exp (-x) * (exp x * exp (-x)) = real_inverse (exp x) * (exp x * exp (-x))",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-x) * (exp x * exp (-x)) = real_inverse (exp x) * (exp x * exp (-x))"
                },
                {
                    "args": "exp (-x) * 1 = real_inverse (exp x) * 1",
                    "id": "9",
                    "prevs": [
                        "1",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (-x) * 1 = real_inverse (exp x) * 1"
                },
                {
                    "args": "real_mult_comm, 1 * exp (-x) = 1 * real_inverse (exp x)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * exp (-x) = 1 * real_inverse (exp x)"
                },
                {
                    "args": "real_mul_lid, exp (-x) = real_inverse (exp x)",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (-x) = real_inverse (exp x)"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (-x) = real_inverse (exp x)"
                }
            ],
            "prop": "exp (-x) = real_inverse (exp x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_neg_mul"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_nz"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "real_mul_linv"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg_mul"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mult_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_n",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_mul_lzero, exp (0 * x) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (0 * x) = 1"
                },
                {
                    "args": "real_zero_def, exp (of_nat 0 * x) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (of_nat 0 * x) = 1"
                },
                {
                    "args": "real_nat_power_def_1, exp (of_nat 0 * x) = exp x ^ (0::nat)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (of_nat 0 * x) = exp x ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. exp (of_nat n * x) = exp x ^ n ⟶ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "exp (of_nat n * x) = exp x ^ n",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat n * x) = exp x ^ n"
                },
                {
                    "args": "exp x * exp (of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp x * exp (of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_exp_add, exp (x + of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.3",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (x + of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_mul_lid, exp (1 * x + of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.4",
                    "prevs": [
                        "4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (1 * x + of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_add_rdistrib, exp ((1 + of_nat n) * x) = exp x * exp x ^ n",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((1 + of_nat n) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_add_comm, exp ((of_nat n + 1) * x) = exp x * exp x ^ n",
                    "id": "4.6",
                    "prevs": [
                        "4.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((of_nat n + 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_one_def, exp ((of_nat n + of_nat 1) * x) = exp x * exp x ^ n",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((of_nat n + of_nat 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_of_nat_add, exp (of_nat (n + 1) * x) = exp x * exp x ^ n",
                    "id": "4.8",
                    "prevs": [
                        "4.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (n + 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "add_1_right, exp (of_nat (Suc n) * x) = exp x * exp x ^ n",
                    "id": "4.9",
                    "prevs": [
                        "4.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (Suc n) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_nat_power_def_2, exp (of_nat (Suc n) * x) = exp x ^ Suc n",
                    "id": "4.10",
                    "prevs": [
                        "4.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "",
                    "id": "4.11",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.10"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. exp (of_nat n * x) = exp x ^ n ⟶ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "nat_induct, {}, {P: λn. exp (of_nat n * x) = exp x ^ n, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp (of_nat n * x) = exp x ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (of_nat n * x) = exp x ^ n"
                }
            ],
            "prop": "exp (of_nat n * x) = exp x ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_of_nat_add"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_comm"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_divide_def, exp x * real_inverse (exp y) = exp x / exp y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x * real_inverse (exp y) = exp x / exp y"
                },
                {
                    "args": "real_exp_neg, exp x * exp (-y) = exp x / exp y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x * exp (-y) = exp x / exp y"
                },
                {
                    "args": "real_exp_add, exp (x + -y) = exp x / exp y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x + -y) = exp x / exp y"
                },
                {
                    "args": "real_minus_def, exp (x - y) = exp x / exp y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x - y) = exp x / exp y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (x - y) = exp x / exp y"
                }
            ],
            "prop": "exp (x - y) = exp x / exp y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x = x / 2 + x / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ x = x / 2 + x / 2"
                },
                {
                    "args": "real_le_square, {}, {x: exp (x / 2)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp (x / 2) * exp (x / 2)"
                },
                {
                    "args": "real_exp_add, 0 ≤ exp (x / 2 + x / 2)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 ≤ exp (x / 2 + x / 2)"
                },
                {
                    "args": "0 ≤ exp x",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ exp x"
                }
            ],
            "prop": "0 ≤ exp x",
            "steps": [
                {
                    "goal": "x = x/2 + x/2",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_square"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_le, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "real_exp_nz, {}, {x: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp x = 0)"
                },
                {
                    "args": "eq_sym_eq, ¬(0 = exp x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(0 = exp x)"
                },
                {
                    "args": "conjI",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ exp x ∧ ¬(0 = exp x)"
                },
                {
                    "args": "real_lt_le, 0 < exp x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < exp x"
                }
            ],
            "prop": "0 < exp x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_lt_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_le_x",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 1 + x < 0 ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "1 + x < 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 + x < 0 ⊢ 1 + x < 0"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 + x < 0 ⊢ 1 + x ≤ 0"
                },
                {
                    "args": "real_exp_pos_le, {}, {x: x}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "real_le_trans",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 + x < 0 ⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x < 0 ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(1 + x < 0) ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "¬(1 + x < 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(1 + x < 0) ⊢ ¬(1 + x < 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "¬(1 + x < 0) ⊢ 1 + x ≤ infsum (from 0) (λn. x ^ n / of_nat (fact n))"
                },
                {
                    "args": "exp_def, 1 + x ≤ exp x",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(1 + x < 0) ⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(1 + x < 0) ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x ≤ exp x"
                }
            ],
            "prop": "1 + x ≤ exp x",
            "steps": [
                {
                    "case": "1 + x < 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "param_y": "(0::real)",
                    "theorem": "real_le_trans"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_lt_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_le_x, {}, {x: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "1 < 1 + x",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ 1 < 1 + x"
                },
                {
                    "args": "real_lte_trans",
                    "id": "3",
                    "prevs": [
                        "2",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 1 < exp x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 1 < exp x"
                }
            ],
            "prop": "0 < x ⟶ 1 < exp x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_le_x"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_y": "1+x",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_mono_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x < y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_sub_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x < y ⊢ 0 < y - x"
                },
                {
                    "args": "real_exp_lt_1, {}, {x: y - x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y ⊢ 1 < exp (y - x)"
                },
                {
                    "args": "real_exp_sub",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x < y ⊢ 1 < exp y / exp x"
                },
                {
                    "args": "∀a. ∀b. 0 < a ⟶ 1 < b / a ⟶ a < b",
                    "id": "4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a. ∀b. 0 < a ⟶ 1 < b / a ⟶ a < b"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: x}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "exp x, exp y",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "x < y ⊢ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                }
            ],
            "prop": "x < y ⟶ exp x < exp y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_sub_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_exp_lt_1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_exp_sub"
                },
                {
                    "goal": "!a::real. !b. 0 < a --> 1 < b / a --> a < b",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀a::real. ∀b. ∀c::real. ∀d. (a < b ⟶ c < d) ⟶ (a = b ⟶ c = d) ⟶ (b < a ⟶ d < c) ⟶ c < d ⟷ a < b",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. ∀c::real. ∀d. (a < b ⟶ c < d) ⟶ (a = b ⟶ c = d) ⟶ (b < a ⟶ d < c) ⟶ c < d ⟷ a < b"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                },
                {
                    "args": "x < y",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_exp_mono_imp",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y ⊢ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = y ⟶ exp x = exp y"
                },
                {
                    "args": "x = y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "exp x = exp y",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ exp x = exp y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = y ⟶ exp x = exp y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ y < x ⟶ exp y < exp x"
                },
                {
                    "args": "y < x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y < x ⊢ y < x"
                },
                {
                    "args": "real_exp_mono_imp",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "y < x ⊢ exp y < exp x"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ y < x ⟶ exp y < exp x"
                },
                {
                    "args": "x, y, exp x, exp y",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ exp x < exp y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x < exp y ⟷ x < y"
                }
            ],
            "prop": "exp x < exp y ⟷ x < y",
            "steps": [
                {
                    "goal": "!a::real. !b. !c::real. !d. (a < b --> c < d) --> (a = b --> c = d) --> (b < a --> d < c) --> (c < d <--> a < b)",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_mono_imp"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_mono_imp"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_mono_lt, ¬(exp y < exp x) ⟷ ¬(y < x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(exp y < exp x) ⟷ ¬(y < x)"
                },
                {
                    "args": "real_not_lt, exp x ≤ exp y ⟷ x ≤ y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x ≤ exp y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x ≤ exp y ⟷ x ≤ y"
                }
            ],
            "prop": "exp x ≤ exp y ⟷ x ≤ y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_mono_le, exp x ≤ exp y ∧ exp y ≤ exp x ⟷ x ≤ y ∧ y ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x ≤ exp y ∧ exp y ≤ exp x ⟷ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "real_le_antisym, exp x = exp y ⟷ x = y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x = exp y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x = exp y ⟷ x = y"
                }
            ],
            "prop": "exp x = exp y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_eq_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_inj, exp x = exp 0 ⟷ x = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x = exp 0 ⟷ x = 0"
                },
                {
                    "args": "real_exp_0, exp x = 1 ⟷ x = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x = 1 ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x = 1 ⟷ x = 0"
                }
            ],
            "prop": "exp x = 1 ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos",
            "prop": [
                "cos x = ",
                "infsum (from 0) ",
                "  (λn. if even n then -1 ^ (n DIV 2) * x ^ n / of_nat (fact n) else 0)"
            ],
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "sin",
            "prop": [
                "sin x = ",
                "infsum (from 0) ",
                "  (λn. if even n then 0 else -1 ^ ((n - 1) DIV 2) * x ^ n / of_nat (fact n))"
            ],
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "log",
            "prop": "log y = (THE x. exp x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "exp_log",
            "prop": "0 < x ⟶ exp (log x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "log_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "exp_log",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log (exp x)) = exp x"
                },
                {
                    "args": "real_exp_inj, log (exp x) = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ log (exp x) = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ log (exp x) = x"
                }
            ],
            "prop": "log (exp x) = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_log",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ exp (log x) = x ⟶ 0 < x"
                },
                {
                    "args": "exp (log x) = x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (log x) = x ⊢ exp (log x) = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "exp (log x) = x ⊢ x = exp (log x)"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: log x}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log x)"
                },
                {
                    "args": "0 < x",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (log x) = x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (log x) = x ⟶ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ exp (log x) = x"
                },
                {
                    "args": "0 < x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ exp (log x) = x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log x) = x ⟷ 0 < x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (log x) = x ⟷ 0 < x"
                }
            ],
            "prop": "exp (log x) = x ⟷ 0 < x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "log_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {}, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "real_lt_mul",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ 0 < x * y"
                },
                {
                    "args": "real_exp_log, exp (log (x * y)) = x * y",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = x * y"
                },
                {
                    "args": "exp (log (x * y)) = x * exp (log y)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x ⊢ exp (log (x * y)) = x * exp (log y)"
                },
                {
                    "args": "exp (log (x * y)) = exp (log x) * exp (log y)",
                    "id": "7",
                    "prevs": [
                        "2",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = exp (log x) * exp (log y)"
                },
                {
                    "args": "real_exp_add, exp (log (x * y)) = exp (log x + log y)",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = exp (log x + log y)"
                },
                {
                    "args": "real_exp_inj, log (x * y) = log x + log y",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y ⊢ log (x * y) = log x + log y"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log (x * y) = log x + log y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log (x * y) = log x + log y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "log_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟶ x = y"
                },
                {
                    "args": "log x = log y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x = log y ⊢ log x = log y"
                },
                {
                    "args": "real_exp_inj",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x = log y ⊢ exp (log x) = exp (log y)"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "2.2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {}, {x: y}",
                    "id": "2.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x = log y ⊢ x = exp (log y)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.3",
                        "2.4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x = log y ⊢ x = y"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟶ x = y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x = y ⟶ log x = log y"
                },
                {
                    "args": "x = y",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "log x = log y",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ log x = log y"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x = y ⟶ log x = log y"
                },
                {
                    "args": "iffI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x = log y ⟷ x = y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x = log y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2.2",
                        "2.1"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2.3",
                        "2.4"
                    ],
                    "goal_id": "2.5",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "log_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(0::real) < 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "exp_log",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log 1) = 1"
                },
                {
                    "args": "real_exp_0, exp (log 1) = exp 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (log 1) = exp 0"
                },
                {
                    "args": "real_exp_inj, log 1 = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ log 1 = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ log 1 = 0"
                }
            ],
            "prop": "log 1 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "pi",
            "prop": "pi = (THE p. 0 < p ∧ sin p = 0 ∧ (∀x. 0 < x ∧ x < p ⟶ ¬(sin x = 0)))",
            "ty": "def",
            "type": "real"
        },
        {
            "name": "tan",
            "prop": "tan x = sin x / cos x",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "atn",
            "prop": "atn y = (THE x. -pi / 2 < x ∧ x < pi / 2 ∧ tan x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "asn",
            "prop": "asn y = (THE x. -pi / 2 ≤ x ∧ x ≤ pi / 2 ∧ sin x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "cos_asn",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ cos (asn x) = sqrt (1 - x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "acs",
            "prop": "acs y = (THE x. 0 ≤ x ∧ x ≤ pi ∧ cos x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "sin_acs",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ sin (acs x) = sqrt (1 - x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "real_sin_0",
            "prop": "sin 0 = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi6",
            "prop": "sin (pi / 6) = 1 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi4",
            "prop": "sin (pi / 4) = sqrt 2 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi3",
            "prop": "sin (pi / 3) = sqrt 3 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi2",
            "prop": "sin (pi / 2) = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_0",
            "prop": "cos 0 = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi6",
            "prop": "cos (pi / 6) = sqrt 3 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi4",
            "prop": "cos (pi / 4) = sqrt 2 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi3",
            "prop": "cos (pi / 3) = 1 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi2",
            "prop": "cos (pi / 2) = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "power",
            "prop": [
                "x ^ y = ",
                "(if 0 < x then ",
                "   exp (y * log x)",
                " else ",
                "   if x = 0 then ",
                "     if y = 0 then 1 else 0",
                "   else ",
                "     if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then ",
                "       -(exp (y * log (-x)))",
                "     else ",
                "       exp (y * log (-x)))"
            ],
            "ty": "def",
            "type": "real ⇒ real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root",
            "prop": "root n x = real_sgn x * exp (log (abs x) / of_nat n)",
            "ty": "def",
            "type": "nat ⇒ real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs 0) / of_nat n) = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs 0) / of_nat n) = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log (abs 0) / of_nat n) = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 0 * exp (log (abs 0) / of_nat n) = 0"
                },
                {
                    "args": "root_def, root n 0 = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 0 = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n 0 = 0"
                }
            ],
            "prop": "root n 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(if (0::real) < 1 then (1::real) else if (1::real) < 0 then -1 else 0) * 1 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (if (0::real) < 1 then (1::real) else if (1::real) < 0 then -1 else 0) * 1 = 1"
                },
                {
                    "args": "real_exp_0, (if (0::real) < 1 then 1 else if (1::real) < 0 then -1 else 0) * exp 0 = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 1 then 1 else if (1::real) < 0 then -1 else 0) * exp 0 = 1"
                },
                {
                    "args": "real_sgn_def, real_sgn 1 * exp 0 = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp 0 = 1"
                },
                {
                    "args": "real_mul_lzero, real_sgn 1 * exp (0 * real_inverse (of_nat n)) = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (0 * real_inverse (of_nat n)) = 1"
                },
                {
                    "args": "real_divide_def, real_sgn 1 * exp (0 / of_nat n) = 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (0 / of_nat n) = 1"
                },
                {
                    "args": "log_1, real_sgn 1 * exp (log 1 / of_nat n) = 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (log 1 / of_nat n) = 1"
                },
                {
                    "args": "real_one_def, real_sgn (of_nat 1) * exp (log (of_nat 1) / of_nat n) = of_nat 1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ real_sgn (of_nat 1) * exp (log (of_nat 1) / of_nat n) = of_nat 1"
                },
                {
                    "args": "real_abs_nat, real_sgn (of_nat 1) * exp (log (abs (of_nat 1)) / of_nat n) = of_nat 1",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (of_nat 1) * exp (log (abs (of_nat 1)) / of_nat n) = of_nat 1"
                },
                {
                    "args": "real_one_def, real_sgn 1 * exp (log (abs 1) / of_nat n) = 1",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (log (abs 1) / of_nat n) = 1"
                },
                {
                    "args": "root_def, root n 1 = 1",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 1 = 1"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n 1 = 1"
                }
            ],
            "prop": "root n 1 = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {}, {x: log (abs x) / of_nat 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat 2)"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (exp (log (abs x) / of_nat 2)) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (exp (log (abs x) / of_nat 2)) = 1"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 = real_sgn x",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * 1 = real_sgn x"
                },
                {
                    "args": "real_sgn x * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ real_sgn x * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "real_sgn_real_sgn, real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "real_sgn_mul, real_sgn (real_sgn x * exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x * exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "root_def, real_sgn (root 2 x) = real_sgn x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (root 2 x) = real_sgn x"
                },
                {
                    "args": "real_abs_pos, {}, {x: x}",
                    "id": "7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ abs x"
                },
                {
                    "args": "real_le_lt",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 < abs x ∨ 0 = abs x"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "0 < abs x",
                    "id": "9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < abs x ⊢ 0 < abs x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (abs x) = 1",
                    "id": "9.1",
                    "prevs": [
                        "9.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ real_sgn (abs x) = 1"
                },
                {
                    "args": "∀x. 2 * (x / 2) = x",
                    "id": "9.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x. 2 * (x / 2) = x"
                },
                {
                    "args": "exp_log",
                    "id": "9.3",
                    "prevs": [
                        "9.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < abs x ⊢ exp (log (abs x)) = abs x"
                },
                {
                    "args": "exp (2 * (log (abs x) / 2)) = abs x",
                    "id": "9.4",
                    "prevs": [
                        "9.2",
                        "9.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < abs x ⊢ exp (2 * (log (abs x) / 2)) = abs x"
                },
                {
                    "args": "real_of_nat_id, exp (of_nat 2 * (log (abs x) / of_nat 2)) = abs x",
                    "id": "9.5",
                    "prevs": [
                        "9.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ exp (of_nat 2 * (log (abs x) / of_nat 2)) = abs x"
                },
                {
                    "args": "real_exp_n, exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.6",
                    "prevs": [
                        "9.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < abs x ⊢ exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_mul_lid, 1 * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.7",
                    "prevs": [
                        "9.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ 1 * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.8",
                    "prevs": [
                        "9.1",
                        "9.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < abs x ⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "9.9",
                    "prevs": [
                        "9.0",
                        "9.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 = abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "0 = abs x",
                    "id": "10.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = abs x ⊢ 0 = abs x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "10.1",
                    "prevs": [
                        "10.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = abs x ⊢ abs x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0",
                    "id": "10.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0",
                    "id": "10.3",
                    "prevs": [
                        "10.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 = abs x ⊢ real_sgn 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0"
                },
                {
                    "args": "real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "10.4",
                    "prevs": [
                        "10.1",
                        "10.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = abs x ⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "10.5",
                    "prevs": [
                        "10.0",
                        "10.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 = abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "disjE",
                    "id": "11",
                    "prevs": [
                        "8",
                        "9",
                        "10"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn_pow_2, real_sgn (x ^ (2::nat)) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (x ^ (2::nat)) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn_pow, real_sgn x ^ (2::nat) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ real_sgn x ^ (2::nat) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_pow_mul, (real_sgn x * exp (log (abs x) / of_nat 2)) ^ (2::nat) = abs x",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat 2)) ^ (2::nat) = abs x"
                },
                {
                    "args": "root_def, root 2 x ^ (2::nat) = abs x",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root 2 x ^ (2::nat) = abs x"
                },
                {
                    "args": "sqrt_unique_gen",
                    "id": "16",
                    "prevs": [
                        "6",
                        "15"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sqrt x = root 2 x"
                },
                {
                    "args": "eq_sym_eq, root 2 x = sqrt x",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root 2 x = sqrt x"
                },
                {
                    "args": "",
                    "id": "18",
                    "prevs": [
                        "17"
                    ],
                    "rule": "intros",
                    "th": "⊢ root 2 x = sqrt x"
                }
            ],
            "prop": "root 2 x = sqrt x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "sqrt_unique_gen"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_real_sgn"
                },
                {
                    "goal": "real_sgn (exp (log (abs x) / of_nat 2)) = 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_mul"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_sgn_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_pow_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_abs_pos"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "9",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn (abs x) = 1",
                    "goal_id": "9.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "9.1"
                    ],
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal": "∀x. 2 * (x / 2) = x",
                    "goal_id": "9.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_id"
                },
                {
                    "fact_ids": [
                        "9.2"
                    ],
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "10",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "10.0"
                    ],
                    "goal_id": "10.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "10.1"
                    ],
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "root_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lneg, -(real_sgn x) * exp (log (abs x) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_sgn x) * exp (log (abs x) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_abs_neg, -(real_sgn x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_sgn x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_sgn_neg, real_sgn (-x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (-x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "root_def, root n (-x) = -(root n x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (-x) = -(root n x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (-x) = -(root n x)"
                }
            ],
            "prop": "root n (-x) = -(root n x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_works_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {}, {x: log (abs x) / of_nat n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (exp (log (abs x) / of_nat n)) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (exp (log (abs x) / of_nat n)) = 1"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 = real_sgn x",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * 1 = real_sgn x"
                },
                {
                    "args": "real_sgn x * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ real_sgn x * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "real_sgn_real_sgn, real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "real_sgn_mul, real_sgn (real_sgn x * exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x * exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "root_def, real_sgn (root n x) = real_sgn x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (root n x) = real_sgn x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_sgn (root n x) = real_sgn x"
                }
            ],
            "prop": "real_sgn (root n x) = real_sgn x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_real_sgn"
                },
                {
                    "goal": "real_sgn (exp (log (abs x) / of_nat n)) = 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_works_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "real_nat_power_def_1, (real_sgn x * exp (log (abs x) / of_nat 0)) ^ (0::nat) = 1",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat 0)) ^ (0::nat) = 1"
                },
                {
                    "args": "(real_sgn x * exp (log (abs x) / of_nat n)) ^ n = 1",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = 1"
                },
                {
                    "args": "if_P, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "∀x. ∀y. ¬(x = 0) ⟶ x * (y / x) = y",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x. ∀y. ¬(x = 0) ⟶ x * (y / x) = y"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ ¬((of_nat::nat ⇒ real) n = of_nat 0)"
                },
                {
                    "args": "real_zero_def",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ ¬(of_nat n = (0::real))"
                },
                {
                    "args": "(of_nat::nat ⇒ real) n",
                    "id": "1.4",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "forall_elim",
                    "th": "⊢ ∀y. ¬(of_nat n = (0::real)) ⟶ of_nat n * (y / of_nat n) = y"
                },
                {
                    "args": "log (abs x)",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "forall_elim",
                    "th": "⊢ ¬(of_nat n = (0::real)) ⟶ of_nat n * (log (abs x) / of_nat n) = log (abs x)"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.5",
                        "1.3"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(n = 0) ⊢ of_nat n * (log (abs x) / of_nat n) = log (abs x)"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ x = 0 ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "x = 0",
                    "id": "1.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs 0)) = 0 * abs 0",
                    "id": "1.7.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs 0)) = 0 * abs 0"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else 0) * exp (log (abs 0)) = (if n = 0 then 1 else 0) * abs 0",
                    "id": "1.7.2",
                    "prevs": [
                        "1.7.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ (if n = 0 then 1 else 0) * exp (log (abs 0)) = (if n = 0 then 1 else 0) * abs 0"
                },
                {
                    "args": "real_pow_zero, 0 ^ n * exp (log (abs 0)) = 0 ^ n * abs 0",
                    "id": "1.7.3",
                    "prevs": [
                        "1.7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ 0 ^ n * exp (log (abs 0)) = 0 ^ n * abs 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 ^ n * exp (log (abs 0)) = real_sgn 0 ^ n * abs 0",
                    "id": "1.7.4",
                    "prevs": [
                        "1.7.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ real_sgn 0 ^ n * exp (log (abs 0)) = real_sgn 0 ^ n * abs 0"
                },
                {
                    "args": "real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x",
                    "id": "1.7.5",
                    "prevs": [
                        "1.7.0",
                        "1.7.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.7.6",
                    "prevs": [
                        "1.7.0",
                        "1.7.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ x = 0 ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < abs x",
                    "id": "1.8.1",
                    "prevs": [
                        "1.8.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "exp_log",
                    "id": "1.8.2",
                    "prevs": [
                        "1.8.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(x = 0) ⊢ exp (log (abs x)) = abs x"
                },
                {
                    "args": "real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x",
                    "id": "1.8.3",
                    "prevs": [
                        "1.8.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), ¬(x = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.8.4",
                    "prevs": [
                        "1.8.0",
                        "1.8.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "classical_cases",
                    "id": "1.9",
                    "prevs": [
                        "1.7",
                        "1.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_sgn x ^ n * exp (of_nat n * (log (abs x) / of_nat n)) = real_sgn x ^ n * abs x",
                    "id": "1.10",
                    "prevs": [
                        "1.6",
                        "1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (of_nat n * (log (abs x) / of_nat n)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_exp_n, real_sgn x ^ n * exp (log (abs x) / of_nat n) ^ n = real_sgn x ^ n * abs x",
                    "id": "1.11",
                    "prevs": [
                        "1.10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x) / of_nat n) ^ n = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_pow_mul, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = real_sgn x ^ n * abs x",
                    "id": "1.12",
                    "prevs": [
                        "1.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = real_sgn x ^ n * abs x"
                },
                {
                    "args": "if_not_P, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "1.13",
                    "prevs": [
                        "1.12",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "1.14",
                    "prevs": [
                        "1.0",
                        "1.13"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "root_def, root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                }
            ],
            "prop": "root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "case": "n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_mul"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal": "!x::real. !y. ~(x =0) --> x *(y/x) = y",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.4",
                    "method_name": "forall_elim",
                    "s": "(of_nat::nat ⇒ real) n"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "forall_elim",
                    "s": "log (abs x)"
                },
                {
                    "fact_ids": [
                        "1.5",
                        "1.3"
                    ],
                    "goal_id": "1.6",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.6"
                    ],
                    "goal_id": "1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.7",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.7.0"
                    ],
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_zero"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1.8",
                    "method_name": "introduction"
                },
                {
                    "goal": "exp (log (abs x)) = abs x",
                    "goal_id": "1.8.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1.8.0"
                    ],
                    "goal_id": "1.8.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.8.2"
                    ],
                    "goal_id": "1.8.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "real_pow_root_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "odd n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "odd_exists",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "odd n ⊢ ∃m. n = Suc (2 * m)"
                },
                {
                    "args": "m, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = Suc (2 * m)",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = Suc (2 * m) ⊢ n = Suc (2 * m)"
                },
                {
                    "args": "nat_zero_Suc_neq, {}, {n: 2 * m}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc (2 * m))"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc (2 * m) = 0)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(Suc (2 * m) = 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), odd n ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd n, n = Suc (2 * m) ⊢ x = 0 ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "x = 0",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, (0::real) * abs 0 = 0",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) * abs 0 = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * real_sgn (abs 0) ^ m * abs 0 = 0",
                    "id": "7.2",
                    "prevs": [
                        "7.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), x = 0 ⊢ 0 * real_sgn (abs 0) ^ m * abs 0 = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * real_sgn (abs 0) ^ m * abs 0 = 0",
                    "id": "7.3",
                    "prevs": [
                        "7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), x = 0 ⊢ real_sgn 0 * real_sgn (abs 0) ^ m * abs 0 = 0"
                },
                {
                    "args": "real_sgn x * real_sgn (abs x) ^ m * abs x = x",
                    "id": "7.4",
                    "prevs": [
                        "7.0",
                        "7.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "7.5",
                    "prevs": [
                        "7.0",
                        "7.4"
                    ],
                    "rule": "intros",
                    "th": "odd n, n = Suc (2 * m) ⊢ x = 0 ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(x = 0) ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < abs x",
                    "id": "8.1",
                    "prevs": [
                        "8.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (abs x) = 1",
                    "id": "8.2",
                    "prevs": [
                        "8.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn (abs x) = 1"
                },
                {
                    "args": "real_sgn_abs, real_sgn x * abs x = x",
                    "id": "8.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * abs x = x"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 * abs x = x",
                    "id": "8.4",
                    "prevs": [
                        "8.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * 1 * abs x = x"
                },
                {
                    "args": "real_pow_one, real_sgn x * 1 ^ m * abs x = x",
                    "id": "8.5",
                    "prevs": [
                        "8.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * 1 ^ m * abs x = x"
                },
                {
                    "args": "real_sgn x * real_sgn (abs x) ^ m * abs x = x",
                    "id": "8.6",
                    "prevs": [
                        "8.2",
                        "8.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "8.7",
                    "prevs": [
                        "8.0",
                        "8.6"
                    ],
                    "rule": "intros",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(x = 0) ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "classical_cases",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "real_sgn_pow_2, real_sgn x * real_sgn (x ^ (2::nat)) ^ m * abs x = x",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (x ^ (2::nat)) ^ m * abs x = x"
                },
                {
                    "args": "real_sgn_pow, real_sgn x * real_sgn x ^ (2::nat) ^ m * abs x = x",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn x ^ (2::nat) ^ m * abs x = x"
                },
                {
                    "args": "real_pow_pow, real_sgn x * real_sgn x ^ (2 * m) * abs x = x",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn x ^ (2 * m) * abs x = x"
                },
                {
                    "args": "real_nat_power_def_2, real_sgn x ^ Suc (2 * m) * abs x = x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x ^ Suc (2 * m) * abs x = x"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "14",
                    "prevs": [
                        "3",
                        "13"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), odd n ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn x ^ n * abs x) = x",
                    "id": "15",
                    "prevs": [
                        "14",
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = Suc (2 * m), odd n ⊢ (if n = 0 then 1 else real_sgn x ^ n * abs x) = x"
                },
                {
                    "args": "root_works_2, root n x ^ n = x",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ root n x ^ n = x"
                },
                {
                    "args": "∃m. n = Suc (2 * m)",
                    "id": "17",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "16"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd n ⟶ root n x ^ n = x"
                }
            ],
            "prop": "odd n ⟶ root n x ^ n = x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_exists"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "goal": "~(n = 0)",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_sgn_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_pow_2"
                },
                {
                    "case": "x = 0",
                    "goal_id": "7",
                    "method_name": "cases"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn (abs x) = 1",
                    "goal_id": "8.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "8.2"
                    ],
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_abs"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "real_pow_root_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = 0 ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "x = 0",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_rzero, (0::real) ^ n * 0 = 0",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) ^ n * 0 = 0"
                },
                {
                    "args": "real_abs_0, (0::real) ^ n * abs 0 = 0",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, x = 0 ⊢ (0::real) ^ n * abs 0 = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 ^ n * abs 0 = 0",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, x = 0 ⊢ real_sgn 0 ^ n * abs 0 = 0"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = 0 ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "3.1",
                    "prevs": [
                        "1",
                        "3.0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ 0 < x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn x = 1",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ real_sgn x = 1"
                },
                {
                    "args": "abs x = x",
                    "id": "3.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x ⊢ abs x = x"
                },
                {
                    "args": "real_mul_lid, 1 * abs x = x",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ 1 * abs x = x"
                },
                {
                    "args": "real_pow_one, 1 ^ n * abs x = x",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ 1 ^ n * abs x = x"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "3.6",
                    "prevs": [
                        "3.2",
                        "3.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "classical_cases",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 ≤ x ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn x ^ n * abs x) = x",
                    "id": "5",
                    "prevs": [
                        "4",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x ⊢ (if n = 0 then 1 else real_sgn x ^ n * abs x) = x"
                },
                {
                    "args": "root_works_2, root n x ^ n = x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x ⊢ root n x ^ n = x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ x ⟶ root n x ^ n = x"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ x ⟶ root n x ^ n = x",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn x = 1",
                    "goal_id": "3.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "1",
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "(0::real) < (if 0 < x then 1 else if x < 0 then -1 else 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ (0::real) < (if 0 < x then 1 else if x < 0 then -1 else 0)"
                },
                {
                    "args": "real_sgn_def, 0 < real_sgn x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < real_sgn x"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: log (abs x) / of_nat n}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "real_lt_mul",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 0 < real_sgn x * exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "root_def, 0 < root n x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                }
            ],
            "prop": "0 < x ⟶ 0 < root n x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_le_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "0 < x",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "root_pos_lt, {}, {n: n, x: x}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "disjI1, {}, {A: 0 < root n x, B: 0 = root n x}",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, 0 < x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "0 = x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "root_0, 0 = root n 0",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = root n 0"
                },
                {
                    "args": "0 = root n x",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, 0 ≤ x ⊢ 0 = root n x"
                },
                {
                    "args": "disjI2, {}, {A: 0 < root n x, B: 0 = root n x}",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, 0 = x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "disjE",
                    "id": "4",
                    "prevs": [
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "real_le_lt, 0 ≤ root n x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ root n x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_lt_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < root n x ⟶ 0 < x"
                },
                {
                    "args": "0 < root n x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < root n x ⊢ 0 < root n x"
                },
                {
                    "args": "real_less_def",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 < root n x ⊢ ¬(root n x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < root n x ⊢ ¬¬(x ≤ 0) ⟶ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "¬¬(x ≤ 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(x ≤ 0) ⊢ ¬¬(x ≤ 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x ≤ 0) ⊢ x ≤ 0"
                },
                {
                    "args": "∀x::real. x ≤ 0 ⟷ 0 ≤ -x",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x ≤ 0 ⟷ 0 ≤ -x"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ -x"
                },
                {
                    "args": "root_pos_le, {}, {n: n, x: -x}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ root n (-x)"
                },
                {
                    "args": "root_neg",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ -(root n x)"
                },
                {
                    "args": "root n x ≤ 0",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.2",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < root n x, ¬¬(x ≤ 0) ⊢ root n x ≤ 0"
                },
                {
                    "args": "double_neg, ¬¬(root n x ≤ 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < root n x, ¬¬(x ≤ 0) ⊢ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 < root n x ⊢ ¬¬(x ≤ 0) ⟶ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < root n x ⊢ ¬(x ≤ 0)"
                },
                {
                    "args": "real_less_def, 0 < x",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < root n x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < root n x ⟶ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                },
                {
                    "args": "0 < x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "root_pos_lt, {}, {n: n, x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < root n x ⟷ 0 < x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < root n x ⟷ 0 < x"
                }
            ],
            "prop": "0 < root n x ⟷ 0 < x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal": "!x::real. x ≤ 0 ⟷ 0 ≤ -x",
                    "goal_id": "0.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.2"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "root_pos_le"
                },
                {
                    "fact_ids": [
                        "0.2.4"
                    ],
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "root_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_le_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ root n x ⟶ 0 ≤ x"
                },
                {
                    "args": "0 ≤ root n x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ root n x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "real_not_lt",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "0 ≤ root n x ⊢ ¬(root n x < 0)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ root n x ⊢ ¬¬(x < 0) ⟶ ¬¬(root n x < 0)"
                },
                {
                    "args": "¬¬(x < 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(x < 0) ⊢ ¬¬(x < 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x < 0) ⊢ x < 0"
                },
                {
                    "args": "∀x::real. x < 0 ⟷ 0 < -x",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x < 0 ⟷ 0 < -x"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬¬(x < 0) ⊢ 0 < -x"
                },
                {
                    "args": "root_pos_lt, {}, {n: n, x: -x}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬¬(x < 0) ⊢ 0 < root n (-x)"
                },
                {
                    "args": "root_neg, 0 < -(root n x)",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ 0 < -(root n x)"
                },
                {
                    "args": "root n x < 0",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.2",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ root n x < 0"
                },
                {
                    "args": "double_neg, ¬¬(root n x < 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ ¬¬(root n x < 0)"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ root n x ⊢ ¬¬(x < 0) ⟶ ¬¬(root n x < 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ root n x ⊢ ¬(x < 0)"
                },
                {
                    "args": "real_not_lt, 0 ≤ x",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ root n x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ root n x ⟶ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "root_pos_le, {}, {n: n, x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ root n x ⟷ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ root n x ⟷ 0 ≤ x"
                }
            ],
            "prop": "0 ≤ root n x ⟷ 0 ≤ x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal": "∀x::real. x < 0 ⟷ 0 < -x",
                    "goal_id": "0.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2.2"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "root_neg"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_eq_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ⟶ x = 0"
                },
                {
                    "args": "real_sgn x = 0",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "real_sgn x = 0 ⊢ real_sgn x = 0"
                },
                {
                    "args": "real_sgn_eq_0",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "real_sgn x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "exp (log (abs x) / of_nat n) = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "exp (log (abs x) / of_nat n) = 0 ⊢ ¬¬(exp (log (abs x) / of_nat n) = 0)"
                },
                {
                    "args": "real_exp_nz, {}, {x: log (abs x) / of_nat n}",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp (log (abs x) / of_nat n) = 0)"
                },
                {
                    "args": "negE_gen, {}, {A: ¬(exp (log (abs x) / of_nat n) = 0), C: x = 0}",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.1",
                        "0.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "exp (log (abs x) / of_nat n) = 0, real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.0",
                        "0.2.3"
                    ],
                    "rule": "intros",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "x = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_sgn_eq_0, real_sgn x = 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ real_sgn x = 0"
                },
                {
                    "args": "disjI1, {}, {A: real_sgn x = 0, B: exp (log (abs x) / of_nat n) = 0}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟷ x = 0"
                },
                {
                    "args": "real_entire, real_sgn x * exp (log (abs x) / of_nat n) = 0 ⟷ x = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * exp (log (abs x) / of_nat n) = 0 ⟷ x = 0"
                },
                {
                    "args": "root_def, root n x = 0 ⟷ x = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x = 0 ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n x = 0 ⟷ x = 0"
                }
            ],
            "prop": "root n x = 0 ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sgn_eq_0"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_root_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 = 0 * root n y",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 * root n y"
                },
                {
                    "args": "root_0, root n 0 = root n 0 * root n y",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ root n 0 = root n 0 * root n y"
                },
                {
                    "args": "real_mul_lzero, root n (0 * y) = root n 0 * root n y",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ root n (0 * y) = root n 0 * root n y"
                },
                {
                    "args": "root n (x * y) = root n x * root n y",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0 ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ y = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "y = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "real_mul_rzero, 0 = root n x * 0",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = root n x * 0"
                },
                {
                    "args": "root_0, root n 0 = root n x * root n 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), y = 0 ⊢ root n 0 = root n x * root n 0"
                },
                {
                    "args": "real_mul_rzero, root n (x * 0) = root n x * root n 0",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), y = 0 ⊢ root n (x * 0) = root n x * root n 0"
                },
                {
                    "args": "root n (x * y) = root n x * root n y",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y = 0, ¬(x = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ y = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(y = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "∀x::real. ¬(x = 0) ⟷ 0 < abs x",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. ¬(x = 0) ⟷ 0 < abs x"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1",
                        "1.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(y = 0) ⊢ 0 < abs y"
                },
                {
                    "args": "log_mul, {}, {x: abs x, y: abs y}",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ log (abs x * abs y) = log (abs x) + log (abs y)"
                },
                {
                    "args": "real_sgn x * real_sgn y * (exp (log (abs x) * real_inverse (of_nat n)) * exp (log (abs y) * real_inverse (of_nat n))) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.5",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ real_sgn x * real_sgn y * (exp (log (abs x) * real_inverse (of_nat n)) * exp (log (abs y) * real_inverse (of_nat n))) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_exp_add, real_sgn x * real_sgn y * exp (log (abs x) * real_inverse (of_nat n) + log (abs y) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs x) * real_inverse (of_nat n) + log (abs y) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_add_rdistrib, real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_divide_def, real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_sgn x * real_sgn y * exp (log (abs x * abs y) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.4",
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs x * abs y) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_abs_mul, real_sgn x * real_sgn y * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_sgn_mul, real_sgn (x * y) * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn (x * y) * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "root_def, root n (x * y) = root n x * root n y",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.2.13",
                    "prevs": [
                        "1.2.0",
                        "1.2.12"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(y = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (x * y) = root n x * root n y"
                }
            ],
            "prop": "root n (x * y) = root n x * root n y",
            "steps": [
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "y = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_mul"
                },
                {
                    "goal": "!x::real. ~(x = 0) <--> 0 < abs x",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1",
                        "1.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1",
                        "1.2.0"
                    ],
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        }
    ],
    "description": "Real transcendentals.",
    "imports": [
        "real",
        "metric"
    ],
    "name": "transcendentals"
}