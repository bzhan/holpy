(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Enat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_llist$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Enat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort Bool_enat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort Enat_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Bool_a_llist_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort Natural_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort Natural_llist_set$ 0)
(declare-sort Enat_enat_prod_set$ 0)
(declare-sort Nat_llist_enat_fun$ 0)
(declare-sort A_a_llist_a_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Bool_llist_enat_fun$ 0)
(declare-sort Enat_llist_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort Bool_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Natural_llist_bool_fun$ 0)
(declare-sort Enat_enat_prod_bool_fun$ 0)
(declare-sort Natural_natural_prod_set$ 0)
(declare-sort A_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_llist_bool_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_bool_fun_fun$ 0)
(declare-sort Natural_natural_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_llist_bool_fun$ 0)
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0)
(declare-sort Natural_natural_prod_bool_fun$ 0)
(declare-sort Enat_bool_fun_enat_bool_fun_fun$ 0)
(declare-sort Enat_bool_fun_enat_enat_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_enat_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_enat_bool_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_enat_enat_fun_fun$ 0)
(declare-sort Enat_bool_fun_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_a_llist_fun_fun$ 0)
(declare-sort Natural_natural_llist_bool_fun_fun$ 0)
(declare-sort Natural_natural_prod_llist_bool_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_llist_a_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_llist_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_fun_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_enat_prod_enat_enat_prod_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_a_llist_a_fun_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_llist_enat_enat_prod_set_fun$ 0)
(declare-sort Enat_enat_prod_llist_enat_enat_prod_llist_fun$ 0)
(declare-sort A_a_llist_a_fun_fun_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_a_llist_a_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$ 0)
(declare-sort Natural_natural_prod_natural_natural_prod_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort Natural_natural_prod_llist_natural_natural_prod_set_fun$ 0)
(declare-sort Natural_natural_prod_llist_natural_natural_prod_llist_fun$ 0)
(declare-sort Enat_enat_prod_enat_enat_prod_llist_enat_enat_prod_llist_fun_fun$ 0)
(declare-sort Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$ 0)
(declare-sort Natural_natural_prod_natural_natural_prod_llist_natural_natural_prod_llist_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_enat_prod$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun fst$ (Enat_enat_prod$) Enat$)
(declare-fun snd$ (Enat_enat_prod$) Enat$)
(declare-fun pair$ (Enat$ Enat$) Enat_enat_prod$)
(declare-sort Enat_enat_prod_llist$ 0)
(declare-fun lNil$a () Enat_enat_prod_llist$)
(declare-fun lhd$a (Enat_enat_prod_llist$) Enat_enat_prod$)
(declare-fun ltl$a (Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun lCons$a (Enat_enat_prod$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-sort Natural$ 0)
(declare-sort Natural_natural_prod$ 0)
(declare-fun nat_of_natural$ (Natural$) Nat$)
(declare-fun natural_of_nat$ (Nat$) Natural$)
(declare-fun fst$a (Natural_natural_prod$) Natural$)
(declare-fun snd$a (Natural_natural_prod$) Natural$)
(declare-fun pair$a (Natural$ Natural$) Natural_natural_prod$)
(declare-sort Natural_natural_prod_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-sort Enat_llist$ 0)
(declare-sort Natural_llist$ 0)
(declare-fun lNil$b () Natural_natural_prod_llist$)
(declare-fun lhd$b (Natural_natural_prod_llist$) Natural_natural_prod$)
(declare-fun ltl$b (Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun lCons$b (Natural_natural_prod$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun lNil$c () A_llist_llist$)
(declare-fun lhd$c (A_llist_llist$) A_llist$)
(declare-fun ltl$c (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$c (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lNil$d () Nat_llist$)
(declare-fun lhd$d (Nat_llist$) Nat$)
(declare-fun ltl$d (Nat_llist$) Nat_llist$)
(declare-fun lCons$d (Nat$ Nat_llist$) Nat_llist$)
(declare-fun lNil$e () Enat_llist$)
(declare-fun lhd$e (Enat_llist$) Enat$)
(declare-fun ltl$e (Enat_llist$) Enat_llist$)
(declare-fun lCons$e (Enat$ Enat_llist$) Enat_llist$)
(declare-fun lNil$f () Natural_llist$)
(declare-fun lhd$f (Natural_llist$) Natural$)
(declare-fun ltl$f (Natural_llist$) Natural_llist$)
(declare-fun lCons$f (Natural$ Natural_llist$) Natural_llist$)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$b (Nat_nat_prod$) Nat$)
(declare-fun snd$b (Nat_nat_prod$) Nat$)
(declare-fun pair$b (Nat$ Nat$) Nat_nat_prod$)
(declare-fun n$ () Enat$)
(declare-fun uu$ () A_a_llist_a_llist_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Natural$) Natural$)
(declare-fun uua$ (A_llist_a_fun$) A_a_llist_a_llist_fun_fun_a_a_llist_a_fun_fun_fun$)
(declare-fun uub$ (A_a_llist_fun$) A_a_llist_a_fun_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uuc$ (A_a_fun$) A_a_llist_a_fun_fun_a_a_llist_a_fun_fun_fun$)
(declare-fun uud$ (A_llist_a_llist_fun$ A_llist_a_llist_llist_a_llist_fun_fun$) A_llist_a_llist_llist_a_llist_fun_fun$)
(declare-fun uue$ (A_llist_a_llist_fun$) A_a_llist_a_llist_fun_fun_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uuf$ (Enat_enat_prod_bool_fun$) Enat_enat_prod_enat_enat_prod_llist_enat_enat_prod_llist_fun_fun$)
(declare-fun uug$ (Natural_natural_prod_bool_fun$) Natural_natural_prod_natural_natural_prod_llist_natural_natural_prod_llist_fun_fun$)
(declare-fun uuh$ (A_bool_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun uui$ (Enat_enat_prod_bool_fun$ Enat_enat_prod_llist$) Enat_enat_prod_enat_enat_prod_llist_enat_enat_prod_llist_fun_fun$)
(declare-fun uuj$ (Natural_natural_prod_bool_fun$ Natural_natural_prod_llist$) Natural_natural_prod_natural_natural_prod_llist_natural_natural_prod_llist_fun_fun$)
(declare-fun uuk$ (A_bool_fun$) A_llist_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun uul$ (Natural_natural_prod_set$) Natural_natural_prod_bool_fun$)
(declare-fun uum$ (Enat_set$) Enat_bool_fun$)
(declare-fun uun$ (Enat_enat_prod_set$) Enat_enat_prod_bool_fun$)
(declare-fun uuo$ () A_a_llist_bool_fun_fun$)
(declare-fun uup$ () Enat_enat_llist_bool_fun_fun$)
(declare-fun uuq$ () Natural_natural_llist_bool_fun_fun$)
(declare-fun uur$ () A_a_llist_bool_fun_fun$)
(declare-fun uus$ () Enat_enat_llist_bool_fun_fun$)
(declare-fun uut$ () Natural_natural_llist_bool_fun_fun$)
(declare-fun uuu$ (Enat_a_llist_fun$) Enat_enat_fun_enat_a_llist_fun_fun$)
(declare-fun uuv$ (Bool_a_llist_fun$) Enat_bool_fun_enat_a_llist_fun_fun$)
(declare-fun uuw$ (A_llist_enat_fun$) Enat_a_llist_fun_enat_enat_fun_fun$)
(declare-fun uux$ (A_llist_bool_fun$) Enat_a_llist_fun_enat_bool_fun_fun$)
(declare-fun uuy$ (A_llist_a_llist_fun$) Enat_a_llist_fun_enat_a_llist_fun_fun$)
(declare-fun uuz$ (Enat_enat_fun$) Enat_enat_fun_enat_enat_fun_fun$)
(declare-fun uva$ (Enat_bool_fun$) Enat_enat_fun_enat_bool_fun_fun$)
(declare-fun uvb$ (Bool_enat_fun$) Enat_bool_fun_enat_enat_fun_fun$)
(declare-fun uvc$ (Bool_bool_fun$) Enat_bool_fun_enat_bool_fun_fun$)
(declare-fun uvd$ () Enat_enat_fun$)
(declare-fun uve$ () Enat_bool_fun$)
(declare-fun uvf$ () Enat_bool_fun$)
(declare-fun uvg$ (Enat$) A_a_llist_a_llist_fun_fun$)
(declare-fun uvh$ (A_llist$) Enat_a_llist_fun$)
(declare-fun uvi$ () A_a_llist_a_llist_fun_fun$)
(declare-fun uvj$ () Nat_nat_fun$)
(declare-fun uvk$ (Natural_natural_prod_set$) Natural_natural_bool_fun_fun$)
(declare-fun uvl$ (Enat_enat_prod_set$) Enat_enat_bool_fun_fun$)
(declare-fun uvm$ (A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun uvn$ () A_a_llist_a_fun_fun$)
(declare-fun uvo$ (A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun uvp$ () A_llist_a_llist_llist_a_llist_fun_fun$)
(declare-fun uvq$ (Bool_bool_fun$) Nat_bool_fun_nat_bool_fun_fun$)
(declare-fun uvr$ (Bool_nat_fun$) Nat_bool_fun_nat_nat_fun_fun$)
(declare-fun uvs$ (Nat_bool_fun$) Nat_nat_fun_nat_bool_fun_fun$)
(declare-fun uvt$ (Nat_nat_fun$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun uvu$ () Nat_bool_fun$)
(declare-fun uvv$ () Nat_bool_fun$)
(declare-fun uvw$ () Nat_nat_fun$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun lnth$ (Bool_llist$) Nat_bool_fun$)
(declare-fun lzip$ (Natural_llist$ Natural_llist$) Natural_natural_prod_llist$)
(declare-fun pred$ (Nat$) Nat$)
(declare-fun size$ (Natural$) Nat$)
(declare-fun suc$a (Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun epred$ (Enat$) Enat$)
(declare-fun lNil$g () Bool_llist$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun llast$ (Bool_llist$) Bool)
(declare-fun lnth$a (Nat_llist$) Nat_nat_fun$)
(declare-fun lnull$ (Enat_enat_prod_llist$) Bool)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun lzip$a (Enat_llist$ Enat_llist$) Enat_enat_prod_llist$)
(declare-fun size$a () Enat_nat_fun$)
(declare-fun zero$a () Enat$)
(declare-fun zero$b () Natural$)
(declare-fun lCons$g (Bool Bool_llist$) Bool_llist$)
(declare-fun llast$a (Nat_llist$) Nat$)
(declare-fun lnull$a (Natural_natural_prod_llist$) Bool)
(declare-fun lnull$b (Enat_llist$) Bool)
(declare-fun lnull$c (Natural_llist$) Bool)
(declare-fun lnull$d (A_llist$) Bool)
(declare-fun lnull$e (Nat_llist$) Bool)
(declare-fun lnull$f (Bool_llist$) Bool)
(declare-fun ltake$a (Enat$) Enat_enat_prod_llist_enat_enat_prod_llist_fun$)
(declare-fun ltake$b (Enat$) Natural_natural_prod_llist_natural_natural_prod_llist_fun$)
(declare-fun ltake$c (Enat$ Enat_llist$) Enat_llist$)
(declare-fun ltake$d (Enat$ Natural_llist$) Natural_llist$)
(declare-fun member$ (Natural_natural_prod$ Natural_natural_prod_set$) Bool)
(declare-fun collect$ (Enat_enat_prod_bool_fun$) Enat_enat_prod_set$)
(declare-fun fun_app$ (Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun le_enat$ () Enat_enat_prod_set$)
(declare-fun lfilter$ (Natural_natural_prod_bool_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun llength$ () Nat_llist_enat_fun$)
(declare-fun llexord$ (Enat_enat_prod_enat_enat_prod_bool_fun_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist_bool_fun$)
(declare-fun lmember$ (Enat_enat_prod$) Enat_enat_prod_llist_bool_fun$)
(declare-fun member$a (Enat_enat_prod$ Enat_enat_prod_set$) Bool)
(declare-fun member$b (Enat$ Enat_set$) Bool)
(declare-fun member$c (A_llist$ A_llist_set$) Bool)
(declare-fun member$d (Enat_llist$ Enat_llist_set$) Bool)
(declare-fun member$e (Natural_llist$ Natural_llist_set$) Bool)
(declare-fun case_nat$ (Bool) Nat_bool_fun_nat_bool_fun_fun$)
(declare-fun collect$a (Enat_bool_fun$) Enat_set$)
(declare-fun collect$b (Natural_natural_prod_bool_fun$) Natural_natural_prod_set$)
(declare-fun enat_set$ () Enat_set$)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$c (A_a_llist_a_llist_fun_fun$ A$) A_llist_a_llist_fun$)
(declare-fun fun_app$d (A_llist_llist_a_llist_fun$ A_llist_llist$) A_llist$)
(declare-fun fun_app$e (A_llist_a_llist_llist_a_llist_fun_fun$ A_llist$) A_llist_llist_a_llist_fun$)
(declare-fun fun_app$f (Natural_natural_prod_bool_fun$ Natural_natural_prod$) Bool)
(declare-fun fun_app$g (Enat_enat_prod_bool_fun$ Enat_enat_prod$) Bool)
(declare-fun fun_app$h (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$i (Natural_natural_prod_llist_natural_natural_prod_llist_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun fun_app$j (Natural_natural_prod_natural_natural_prod_llist_natural_natural_prod_llist_fun_fun$ Natural_natural_prod$) Natural_natural_prod_llist_natural_natural_prod_llist_fun$)
(declare-fun fun_app$k (Enat_enat_prod_llist_enat_enat_prod_llist_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun fun_app$l (Enat_enat_prod_enat_enat_prod_llist_enat_enat_prod_llist_fun_fun$ Enat_enat_prod$) Enat_enat_prod_llist_enat_enat_prod_llist_fun$)
(declare-fun fun_app$m (A_bool_fun$ A$) Bool)
(declare-fun fun_app$n (Natural_bool_fun$ Natural$) Bool)
(declare-fun fun_app$o (Natural_natural_bool_fun_fun$ Natural$) Natural_bool_fun$)
(declare-fun fun_app$p (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$q (Enat_a_llist_fun_enat_a_llist_fun_fun$ Enat_a_llist_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$r (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$s (Enat_a_llist_fun_enat_enat_fun_fun$ Enat_a_llist_fun$) Enat_enat_fun$)
(declare-fun fun_app$t (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$u (Enat_a_llist_fun_enat_bool_fun_fun$ Enat_a_llist_fun$) Enat_bool_fun$)
(declare-fun fun_app$v (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$w (Enat_enat_fun_enat_a_llist_fun_fun$ Enat_enat_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$x (Enat_enat_fun_enat_enat_fun_fun$ Enat_enat_fun$) Enat_enat_fun$)
(declare-fun fun_app$y (Enat_enat_fun_enat_bool_fun_fun$ Enat_enat_fun$) Enat_bool_fun$)
(declare-fun fun_app$z (Enat_bool_fun_enat_a_llist_fun_fun$ Enat_bool_fun$) Enat_a_llist_fun$)
(declare-fun gen_lset$ (Enat_enat_prod_set$) Enat_enat_prod_llist_enat_enat_prod_set_fun$)
(declare-fun infinity$ () Enat$)
(declare-fun le_enatp$ (Enat$) Enat_bool_fun$)
(declare-fun lfilter$a (Enat_enat_prod_bool_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun lfilter$b (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun llength$a () Bool_llist_enat_fun$)
(declare-fun llength$b (Enat_enat_prod_llist$) Enat$)
(declare-fun llength$c (Natural_natural_prod_llist$) Enat$)
(declare-fun llength$d () A_llist_enat_fun$)
(declare-fun llength$e (Enat_llist$) Enat$)
(declare-fun llength$f (Natural_llist$) Enat$)
(declare-fun llexord$a (Natural_natural_prod_natural_natural_prod_bool_fun_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist_bool_fun$)
(declare-fun llexord$b (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$a (Natural_natural_prod$) Natural_natural_prod_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun rec_enat$ (Nat_nat_fun$ Nat$) Enat_nat_fun$)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun case_enat$ (Nat_nat_fun$ Nat$) Enat_nat_fun$)
(declare-fun case_nat$a (Nat$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun enat_setp$ (Enat$) Bool)
(declare-fun fun_app$aa (Bool_a_llist_fun$ Bool) A_llist$)
(declare-fun fun_app$ab (Enat_bool_fun_enat_enat_fun_fun$ Enat_bool_fun$) Enat_enat_fun$)
(declare-fun fun_app$ac (Bool_enat_fun$ Bool) Enat$)
(declare-fun fun_app$ad (Enat_bool_fun_enat_bool_fun_fun$ Enat_bool_fun$) Enat_bool_fun$)
(declare-fun fun_app$ae (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$af (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$ag (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$) Nat_bool_fun$)
(declare-fun fun_app$ah (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$ai (Nat_bool_fun_nat_nat_fun_fun$ Nat_bool_fun$) Nat_nat_fun$)
(declare-fun fun_app$aj (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$ak (Nat_nat_fun_nat_bool_fun_fun$ Nat_nat_fun$) Nat_bool_fun$)
(declare-fun fun_app$al (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun fun_app$am (A_llist_a_a_llist_a_llist_fun_fun_fun$ A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$an (A_a_llist_a_llist_fun_fun_a_a_llist_a_llist_fun_fun_fun$ A_a_llist_a_llist_fun_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$ao (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$ap (A_a_llist_a_fun_fun$ A$) A_llist_a_fun$)
(declare-fun fun_app$aq (A_a_llist_a_llist_fun_fun_a_a_llist_a_fun_fun_fun$ A_a_llist_a_llist_fun_fun$) A_a_llist_a_fun_fun$)
(declare-fun fun_app$ar (A_a_llist_a_fun_fun_a_a_llist_a_llist_fun_fun_fun$ A_a_llist_a_fun_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$as (A_a_llist_fun$ A$) A_llist$)
(declare-fun fun_app$at (A_a_llist_a_fun_fun_a_a_llist_a_fun_fun_fun$ A_a_llist_a_fun_fun$) A_a_llist_a_fun_fun$)
(declare-fun fun_app$au (A_a_fun$ A$) A$)
(declare-fun fun_app$av (Natural_llist_bool_fun$ Natural_llist$) Bool)
(declare-fun fun_app$aw (Natural_natural_llist_bool_fun_fun$ Natural$) Natural_llist_bool_fun$)
(declare-fun fun_app$ax (Enat_llist_bool_fun$ Enat_llist$) Bool)
(declare-fun fun_app$ay (Enat_enat_llist_bool_fun_fun$ Enat$) Enat_llist_bool_fun$)
(declare-fun fun_app$az (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$ba (A_a_llist_a_fun_fun_a_llist_a_fun_fun$ A_a_llist_a_fun_fun$) A_llist_a_fun$)
(declare-fun fun_app$bb (Enat_enat_prod_llist_bool_fun$ Enat_enat_prod_llist$) Bool)
(declare-fun fun_app$bc (Enat_enat_prod_enat_enat_prod_bool_fun_fun$ Enat_enat_prod$) Enat_enat_prod_bool_fun$)
(declare-fun fun_app$bd (Natural_natural_prod_llist_bool_fun$ Natural_natural_prod_llist$) Bool)
(declare-fun fun_app$be (Natural_natural_prod_natural_natural_prod_bool_fun_fun$ Natural_natural_prod$) Natural_natural_prod_bool_fun$)
(declare-fun fun_app$bf (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$bg (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$bh (Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist_bool_fun$)
(declare-fun fun_app$bi (Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist_bool_fun$)
(declare-fun fun_app$bj (Nat_llist_enat_fun$ Nat_llist$) Enat$)
(declare-fun fun_app$bk (Bool_llist_enat_fun$ Bool_llist$) Enat$)
(declare-fun fun_app$bl (Enat_nat_fun$ Enat$) Nat$)
(declare-fun fun_app$bm (Bool_enat_bool_fun_fun$ Bool) Enat_bool_fun$)
(declare-fun fun_app$bn (Enat_enat_prod_llist_enat_enat_prod_set_fun$ Enat_enat_prod_llist$) Enat_enat_prod_set$)
(declare-fun fun_app$bo (Natural_natural_prod_llist_natural_natural_prod_set_fun$ Natural_natural_prod_llist$) Natural_natural_prod_set$)
(declare-fun fun_app$bp (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$bq (A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$br (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun gen_lset$a (Natural_natural_prod_set$) Natural_natural_prod_llist_natural_natural_prod_set_fun$)
(declare-fun gen_lset$b (A_set$) A_llist_a_set_fun$)
(declare-fun size_enat$ () Enat_nat_fun$)
(declare-fun undefined$ () A_llist$)
(declare-fun case_enat$a (Nat_bool_fun$) Bool_enat_bool_fun_fun$)
(declare-fun case_enat$b (A_llist$) Enat_a_llist_fun_enat_a_llist_fun_fun$)
(declare-fun case_enat$c (Enat$) Enat_enat_fun_enat_enat_fun_fun$)
(declare-fun case_enat$d (Bool) Enat_bool_fun_enat_bool_fun_fun$)
(declare-fun case_llist$ (A_llist$) A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun ldropWhile$ (Natural_natural_prod_bool_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (Enat_enat_prod_bool_fun$ Enat_enat_prod_llist$) Bool)
(declare-fun undefined$a () Bool)
(declare-fun undefined$b () Nat$)
(declare-fun case_llist$a (A$) A_a_llist_a_fun_fun_a_llist_a_fun_fun$)
(declare-fun case_llist$b (A_llist$ A_llist_a_llist_llist_a_llist_fun_fun$) A_llist_llist_a_llist_fun$)
(declare-fun case_llist$c (Enat_enat_prod_llist$ Enat_enat_prod_enat_enat_prod_llist_enat_enat_prod_llist_fun_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun case_llist$d (Natural_natural_prod_llist$ Natural_natural_prod_natural_natural_prod_llist_natural_natural_prod_llist_fun_fun$ Natural_natural_prod_llist$) Natural_natural_prod_llist$)
(declare-fun case_llist$e (Bool) A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun case_llist$f (Bool Enat_enat_llist_bool_fun_fun$ Enat_llist$) Bool)
(declare-fun case_llist$g (Bool Natural_natural_llist_bool_fun_fun$ Natural_llist$) Bool)
(declare-fun divides_aux$ (Nat_nat_prod$) Bool)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun ldropWhile$a (Enat_enat_prod_bool_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun ldropWhile$b (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$a (Natural_natural_prod_bool_fun$ Natural_natural_prod_llist$) Bool)
(declare-fun pred_llist$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun gen_llength$a (Nat$) Nat_llist_enat_fun$)
(declare-fun gen_llength$b (Nat$) Bool_llist_enat_fun$)
(declare-fun size_natural$ (Natural$) Nat$)
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (! (= (fun_app$ (uvh$ ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ lNil$) (uvg$ ?v1)) ?v0)) :pattern ((fun_app$ (uvh$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (fun_app$c uu$ ?v0) ?v1) (lCons$ ?v0 (fun_app$a (ltake$ n$) ?v1))) :pattern ((fun_app$a (fun_app$c uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$d (fun_app$e uvp$ ?v0) ?v1) (fun_app$a (lappend$ ?v0) (lconcat$ ?v1))) :pattern ((fun_app$d (fun_app$e uvp$ ?v0) ?v1)))))
(assert (forall ((?v0 Natural_natural_prod_set$) (?v1 Natural_natural_prod$)) (! (= (fun_app$f (uul$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$f (uul$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod$)) (! (= (fun_app$g (uun$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$g (uun$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_set$) (?v1 Enat$)) (! (= (fun_app$h (uum$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$h (uum$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A$)) (! (= (fun_app$c (uvg$ ?v0) ?v1) (ldrop$ ?v0)) :pattern ((fun_app$c (uvg$ ?v0) ?v1)))))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (! (= (fun_app$i (fun_app$j (uug$ ?v0) ?v1) ?v2) (ite (fun_app$f ?v0 ?v1) (lCons$b ?v1 (lfilter$ ?v0 ?v2)) (lfilter$ ?v0 ?v2))) :pattern ((fun_app$i (fun_app$j (uug$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (! (= (fun_app$k (fun_app$l (uuf$ ?v0) ?v1) ?v2) (ite (fun_app$g ?v0 ?v1) (lCons$a ?v1 (lfilter$a ?v0 ?v2)) (lfilter$a ?v0 ?v2))) :pattern ((fun_app$k (fun_app$l (uuf$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$c (uuh$ ?v0) ?v1) ?v2) (ite (fun_app$m ?v0 ?v1) (lCons$ ?v1 (fun_app$a (lfilter$b ?v0) ?v2)) (fun_app$a (lfilter$b ?v0) ?v2))) :pattern ((fun_app$a (fun_app$c (uuh$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Natural_natural_prod_set$) (?v1 Natural$) (?v2 Natural$)) (! (= (fun_app$n (fun_app$o (uvk$ ?v0) ?v1) ?v2) (member$ (pair$a ?v1 ?v2) ?v0)) :pattern ((fun_app$n (fun_app$o (uvk$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$h (fun_app$p (uvl$ ?v0) ?v1) ?v2) (member$a (pair$ ?v1 ?v2) ?v0)) :pattern ((fun_app$h (fun_app$p (uvl$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$c (uvm$ ?v0) ?v1) ?v2) (lCons$ ?v1 (fun_app$a (lappend$ ?v2) ?v0))) :pattern ((fun_app$a (fun_app$c (uvm$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$c (uvo$ ?v0) ?v1) ?v2) (fun_app$a (lappend$ ?v2) ?v0)) :pattern ((fun_app$a (fun_app$c (uvo$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$q (uuy$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$q (uuy$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$r (fun_app$s (uuw$ ?v0) ?v1) ?v2) (fun_app$t ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$r (fun_app$s (uuw$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$h (fun_app$u (uux$ ?v0) ?v1) ?v2) (fun_app$v ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$h (fun_app$u (uux$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$w (uuu$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$r ?v1 ?v2))) :pattern ((fun_app$ (fun_app$w (uuu$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$r (fun_app$x (uuz$ ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$r ?v1 ?v2))) :pattern ((fun_app$r (fun_app$x (uuz$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$h (fun_app$y (uva$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$r ?v1 ?v2))) :pattern ((fun_app$h (fun_app$y (uva$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_a_llist_fun$) (?v1 Enat_bool_fun$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$z (uuv$ ?v0) ?v1) ?v2) (fun_app$aa ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$ (fun_app$z (uuv$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_enat_fun$) (?v1 Enat_bool_fun$) (?v2 Enat$)) (! (= (fun_app$r (fun_app$ab (uvb$ ?v0) ?v1) ?v2) (fun_app$ac ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$r (fun_app$ab (uvb$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Enat_bool_fun$) (?v2 Enat$)) (! (= (fun_app$h (fun_app$ad (uvc$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$ad (uvc$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$af (fun_app$ag (uvq$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (fun_app$af ?v1 ?v2))) :pattern ((fun_app$af (fun_app$ag (uvq$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_nat_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$ah (fun_app$ai (uvr$ ?v0) ?v1) ?v2) (fun_app$aj ?v0 (fun_app$af ?v1 ?v2))) :pattern ((fun_app$ah (fun_app$ai (uvr$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$af (fun_app$ak (uvs$ ?v0) ?v1) ?v2) (fun_app$af ?v0 (fun_app$ah ?v1 ?v2))) :pattern ((fun_app$af (fun_app$ak (uvs$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$ah (fun_app$al (uvt$ ?v0) ?v1) ?v2) (fun_app$ah ?v0 (fun_app$ah ?v1 ?v2))) :pattern ((fun_app$ah (fun_app$al (uvt$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod$) (?v3 Natural_natural_prod_llist$)) (! (= (fun_app$i (fun_app$j (uuj$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$f ?v0 ?v2) (ldropWhile$ ?v0 ?v3) ?v1)) :pattern ((fun_app$i (fun_app$j (uuj$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (! (= (fun_app$k (fun_app$l (uui$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$g ?v0 ?v2) (ldropWhile$a ?v0 ?v3) ?v1)) :pattern ((fun_app$k (fun_app$l (uui$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$c (fun_app$am (uuk$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$m ?v0 ?v2) (fun_app$a (ldropWhile$b ?v0) ?v3) ?v1)) :pattern ((fun_app$a (fun_app$c (fun_app$am (uuk$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$d (fun_app$e (uud$ ?v0 ?v1) ?v2) ?v3) (fun_app$a ?v0 (fun_app$d (fun_app$e ?v1 ?v2) ?v3))) :pattern ((fun_app$d (fun_app$e (uud$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$c (fun_app$an (uue$ ?v0) ?v1) ?v2) ?v3) (fun_app$a ?v0 (fun_app$a (fun_app$c ?v1 ?v2) ?v3))) :pattern ((fun_app$a (fun_app$c (fun_app$an (uue$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ao (fun_app$ap (fun_app$aq (uua$ ?v0) ?v1) ?v2) ?v3) (fun_app$ao ?v0 (fun_app$a (fun_app$c ?v1 ?v2) ?v3))) :pattern ((fun_app$ao (fun_app$ap (fun_app$aq (uua$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$c (fun_app$ar (uub$ ?v0) ?v1) ?v2) ?v3) (fun_app$as ?v0 (fun_app$ao (fun_app$ap ?v1 ?v2) ?v3))) :pattern ((fun_app$a (fun_app$c (fun_app$ar (uub$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ao (fun_app$ap (fun_app$at (uuc$ ?v0) ?v1) ?v2) ?v3) (fun_app$au ?v0 (fun_app$ao (fun_app$ap ?v1 ?v2) ?v3))) :pattern ((fun_app$ao (fun_app$ap (fun_app$at (uuc$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ao (fun_app$ap uvn$ ?v0) ?v1) ?v0) :pattern ((fun_app$ao (fun_app$ap uvn$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (fun_app$c uvi$ ?v0) ?v1) ?v1) :pattern ((fun_app$a (fun_app$c uvi$ ?v0) ?v1)))))
(assert (forall ((?v0 Natural$) (?v1 Natural_llist$)) (! (= (fun_app$av (fun_app$aw uuq$ ?v0) ?v1) false) :pattern ((fun_app$av (fun_app$aw uuq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (fun_app$ax (fun_app$ay uup$ ?v0) ?v1) false) :pattern ((fun_app$ax (fun_app$ay uup$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$v (fun_app$az uuo$ ?v0) ?v1) false) :pattern ((fun_app$v (fun_app$az uuo$ ?v0) ?v1)))))
(assert (forall ((?v0 Natural$) (?v1 Natural_llist$)) (! (= (fun_app$av (fun_app$aw uut$ ?v0) ?v1) true) :pattern ((fun_app$av (fun_app$aw uut$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (fun_app$ax (fun_app$ay uus$ ?v0) ?v1) true) :pattern ((fun_app$ax (fun_app$ay uus$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$v (fun_app$az uur$ ?v0) ?v1) true) :pattern ((fun_app$v (fun_app$az uur$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$r uvd$ ?v0) ?v0) :pattern ((fun_app$r uvd$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ah uvw$ ?v0) ?v0) :pattern ((fun_app$ah uvw$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ah uvj$ ?v0) zero$) :pattern ((fun_app$ah uvj$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$h uve$ ?v0) false) :pattern ((fun_app$h uve$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$af uvv$ ?v0) false) :pattern ((fun_app$af uvv$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$h uvf$ ?v0) true) :pattern ((fun_app$h uvf$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$af uvu$ ?v0) true) :pattern ((fun_app$af uvu$ ?v0)))))
(assert (not (= (fun_app$a (ltake$ (eSuc$ n$)) xs$) (fun_app$a (fun_app$b (case_llist$ lNil$) uu$) xs$))))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod$) (?v3 Natural_natural_prod_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$k (ltake$a ?v0) lNil$a) lNil$a) :pattern ((ltake$a ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$i (ltake$b ?v0) lNil$b) lNil$b) :pattern ((ltake$b ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (= (fun_app$k (ltake$a (eSuc$ ?v0)) (lCons$a ?v1 ?v2)) (lCons$a ?v1 (fun_app$k (ltake$a ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (= (fun_app$i (ltake$b (eSuc$ ?v0)) (lCons$b ?v1 ?v2)) (lCons$b ?v1 (fun_app$i (ltake$b ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$a (ltake$ (eSuc$ ?v0)) (lCons$ ?v1 ?v2)) (lCons$ ?v1 (fun_app$a (ltake$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (= (not (= ?v0 lNil$b)) (exists ((?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (= ?v0 (lCons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ao (fun_app$ba (case_llist$a ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$ao (fun_app$ap ?v1 ?v2) ?v3)) :pattern ((fun_app$ao (fun_app$ba (case_llist$a ?v0) ?v1) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$d (case_llist$b ?v0 ?v1) (lCons$c ?v2 ?v3)) (fun_app$d (fun_app$e ?v1 ?v2) ?v3)) :pattern ((fun_app$d (case_llist$b ?v0 ?v1) (lCons$c ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$a (fun_app$c ?v1 ?v2) ?v3)) :pattern ((fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$ao ?v0 (fun_app$a (fun_app$b (case_llist$ ?v1) ?v2) ?v3)) (fun_app$ao (fun_app$ba (case_llist$a (fun_app$ao ?v0 ?v1)) (fun_app$aq (uua$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$as ?v0 (fun_app$ao (fun_app$ba (case_llist$a ?v1) ?v2) ?v3)) (fun_app$a (fun_app$b (case_llist$ (fun_app$as ?v0 ?v1)) (fun_app$ar (uub$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_a_llist_a_fun_fun$) (?v3 A_llist$)) (= (fun_app$au ?v0 (fun_app$ao (fun_app$ba (case_llist$a ?v1) ?v2) ?v3)) (fun_app$ao (fun_app$ba (case_llist$a (fun_app$au ?v0 ?v1)) (fun_app$at (uuc$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_llist_a_llist_fun_fun$) (?v3 A_llist_llist$)) (= (fun_app$a ?v0 (fun_app$d (case_llist$b ?v1 ?v2) ?v3)) (fun_app$d (case_llist$b (fun_app$a ?v0 ?v1) (uud$ ?v0 ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$a ?v0 (fun_app$a (fun_app$b (case_llist$ ?v1) ?v2) ?v3)) (fun_app$a (fun_app$b (case_llist$ (fun_app$a ?v0 ?v1)) (fun_app$an (uue$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A$) (?v1 A_a_llist_a_fun_fun$)) (! (= (fun_app$ao (fun_app$ba (case_llist$a ?v0) ?v1) lNil$) ?v0) :pattern ((fun_app$ba (case_llist$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_llist_a_llist_fun_fun$)) (! (= (fun_app$d (case_llist$b ?v0 ?v1) lNil$c) ?v0) :pattern ((case_llist$b ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) lNil$) ?v0) :pattern ((fun_app$b (case_llist$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_llist$)) (not (= lNil$b (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod_llist$)) (= (lfilter$a ?v0 ?v1) (case_llist$c lNil$a (uuf$ ?v0) ?v1)) ))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_llist$)) (= (lfilter$ ?v0 ?v1) (case_llist$d lNil$b (uug$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$a (lfilter$b ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ lNil$) (uuh$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod_llist$)) (= (ldropWhile$a ?v0 ?v1) (case_llist$c lNil$a (uui$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_llist$)) (= (ldropWhile$ ?v0 ?v1) (case_llist$d lNil$b (uuj$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$a (ldropWhile$b ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ lNil$) (fun_app$am (uuk$ ?v0) ?v1)) ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (! (= (pred_llist$ ?v0 (lCons$a ?v1 ?v2)) (and (fun_app$g ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (! (= (pred_llist$a ?v0 (lCons$b ?v1 ?v2)) (and (fun_app$f ?v0 ?v1) (pred_llist$a ?v0 ?v2))) :pattern ((pred_llist$a ?v0 (lCons$b ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$v (pred_llist$b ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$m ?v0 ?v1) (fun_app$v (pred_llist$b ?v0) ?v2))) :pattern ((fun_app$v (pred_llist$b ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$)) (= (fun_app$bb (llexord$ ?v0 ?v1) ?v2) (or (exists ((?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod$)) (and (= ?v1 (lCons$a ?v5 ?v3)) (and (= ?v2 (lCons$a ?v5 ?v4)) (fun_app$bb (llexord$ ?v0 ?v3) ?v4))) ) (or (exists ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod$) (?v5 Enat_enat_prod_llist$) (?v6 Enat_enat_prod_llist$)) (and (= ?v1 (lCons$a ?v3 ?v5)) (and (= ?v2 (lCons$a ?v4 ?v6)) (fun_app$g (fun_app$bc ?v0 ?v3) ?v4))) ) (exists ((?v3 Enat_enat_prod_llist$)) (and (= ?v1 lNil$a) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod_llist$)) (= (fun_app$bd (llexord$a ?v0 ?v1) ?v2) (or (exists ((?v3 Natural_natural_prod_llist$) (?v4 Natural_natural_prod_llist$) (?v5 Natural_natural_prod$)) (and (= ?v1 (lCons$b ?v5 ?v3)) (and (= ?v2 (lCons$b ?v5 ?v4)) (fun_app$bd (llexord$a ?v0 ?v3) ?v4))) ) (or (exists ((?v3 Natural_natural_prod$) (?v4 Natural_natural_prod$) (?v5 Natural_natural_prod_llist$) (?v6 Natural_natural_prod_llist$)) (and (= ?v1 (lCons$b ?v3 ?v5)) (and (= ?v2 (lCons$b ?v4 ?v6)) (fun_app$f (fun_app$be ?v0 ?v3) ?v4))) ) (exists ((?v3 Natural_natural_prod_llist$)) (and (= ?v1 lNil$b) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$v (fun_app$bf (llexord$b ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$v (fun_app$bf (llexord$b ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$m (fun_app$bg ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$)) (=> (and (fun_app$bb (llexord$ ?v0 ?v1) ?v2) (and (forall ((?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod$)) (=> (and (= ?v1 (lCons$a ?v5 ?v3)) (and (= ?v2 (lCons$a ?v5 ?v4)) (fun_app$bb (llexord$ ?v0 ?v3) ?v4))) false) ) (and (forall ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod$) (?v5 Enat_enat_prod_llist$) (?v6 Enat_enat_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v5)) (and (= ?v2 (lCons$a ?v4 ?v6)) (fun_app$g (fun_app$bc ?v0 ?v3) ?v4))) false) ) (forall ((?v3 Enat_enat_prod_llist$)) (=> (and (= ?v1 lNil$a) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod_llist$)) (=> (and (fun_app$bd (llexord$a ?v0 ?v1) ?v2) (and (forall ((?v3 Natural_natural_prod_llist$) (?v4 Natural_natural_prod_llist$) (?v5 Natural_natural_prod$)) (=> (and (= ?v1 (lCons$b ?v5 ?v3)) (and (= ?v2 (lCons$b ?v5 ?v4)) (fun_app$bd (llexord$a ?v0 ?v3) ?v4))) false) ) (and (forall ((?v3 Natural_natural_prod$) (?v4 Natural_natural_prod$) (?v5 Natural_natural_prod_llist$) (?v6 Natural_natural_prod_llist$)) (=> (and (= ?v1 (lCons$b ?v3 ?v5)) (and (= ?v2 (lCons$b ?v4 ?v6)) (fun_app$f (fun_app$be ?v0 ?v3) ?v4))) false) ) (forall ((?v3 Natural_natural_prod_llist$)) (=> (and (= ?v1 lNil$b) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$v (fun_app$bf (llexord$b ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$v (fun_app$bf (llexord$b ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$m (fun_app$bg ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$) (?v3 Enat_enat_prod_enat_enat_prod_bool_fun_fun$)) (=> (and (fun_app$bb (fun_app$bh ?v0 ?v1) ?v2) (forall ((?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod_llist$)) (=> (fun_app$bb (fun_app$bh ?v0 ?v4) ?v5) (or (exists ((?v6 Enat_enat_prod_llist$) (?v7 Enat_enat_prod_llist$) (?v8 Enat_enat_prod$)) (and (= ?v4 (lCons$a ?v8 ?v6)) (and (= ?v5 (lCons$a ?v8 ?v7)) (or (fun_app$bb (fun_app$bh ?v0 ?v6) ?v7) (fun_app$bb (llexord$ ?v3 ?v6) ?v7)))) ) (or (exists ((?v6 Enat_enat_prod$) (?v7 Enat_enat_prod$) (?v8 Enat_enat_prod_llist$) (?v9 Enat_enat_prod_llist$)) (and (= ?v4 (lCons$a ?v6 ?v8)) (and (= ?v5 (lCons$a ?v7 ?v9)) (fun_app$g (fun_app$bc ?v3 ?v6) ?v7))) ) (exists ((?v6 Enat_enat_prod_llist$)) (and (= ?v4 lNil$a) (= ?v5 ?v6)) )))) )) (fun_app$bb (llexord$ ?v3 ?v1) ?v2)) ))
(assert (forall ((?v0 Natural_natural_prod_llist_natural_natural_prod_llist_bool_fun_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod_llist$) (?v3 Natural_natural_prod_natural_natural_prod_bool_fun_fun$)) (=> (and (fun_app$bd (fun_app$bi ?v0 ?v1) ?v2) (forall ((?v4 Natural_natural_prod_llist$) (?v5 Natural_natural_prod_llist$)) (=> (fun_app$bd (fun_app$bi ?v0 ?v4) ?v5) (or (exists ((?v6 Natural_natural_prod_llist$) (?v7 Natural_natural_prod_llist$) (?v8 Natural_natural_prod$)) (and (= ?v4 (lCons$b ?v8 ?v6)) (and (= ?v5 (lCons$b ?v8 ?v7)) (or (fun_app$bd (fun_app$bi ?v0 ?v6) ?v7) (fun_app$bd (llexord$a ?v3 ?v6) ?v7)))) ) (or (exists ((?v6 Natural_natural_prod$) (?v7 Natural_natural_prod$) (?v8 Natural_natural_prod_llist$) (?v9 Natural_natural_prod_llist$)) (and (= ?v4 (lCons$b ?v6 ?v8)) (and (= ?v5 (lCons$b ?v7 ?v9)) (fun_app$f (fun_app$be ?v3 ?v6) ?v7))) ) (exists ((?v6 Natural_natural_prod_llist$)) (and (= ?v4 lNil$b) (= ?v5 ?v6)) )))) )) (fun_app$bd (llexord$a ?v3 ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$v (fun_app$bf ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$v (fun_app$bf ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$v (fun_app$bf ?v0 ?v6) ?v7) (fun_app$v (fun_app$bf (llexord$b ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$m (fun_app$bg ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$v (fun_app$bf (llexord$b ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_llist$)) (! (= (fun_app$bj llength$ (lCons$d ?v0 ?v1)) (eSuc$ (fun_app$bj llength$ ?v1))) :pattern ((lCons$d ?v0 ?v1)))))
(assert (forall ((?v0 Bool) (?v1 Bool_llist$)) (! (= (fun_app$bk llength$a (lCons$g ?v0 ?v1)) (eSuc$ (fun_app$bk llength$a ?v1))) :pattern ((lCons$g ?v0 ?v1)))))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (! (= (llength$b (lCons$a ?v0 ?v1)) (eSuc$ (llength$b ?v1))) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_llist$)) (! (= (llength$c (lCons$b ?v0 ?v1)) (eSuc$ (llength$c ?v1))) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$t llength$d (lCons$ ?v0 ?v1)) (eSuc$ (fun_app$t llength$d ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat_enat_prod$)) (! (= (fun_app$bb (lmember$ ?v0) lNil$a) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 Natural_natural_prod$)) (! (= (fun_app$bd (lmember$a ?v0) lNil$b) false) :pattern ((lmember$a ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$v (lmember$b ?v0) lNil$) false) :pattern ((lmember$b ?v0)))))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (! (= (fun_app$bb (lmember$ ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$bb (lmember$ ?v0) ?v2))) :pattern ((fun_app$bb (lmember$ ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (! (= (fun_app$bd (lmember$a ?v0) (lCons$b ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$bd (lmember$a ?v0) ?v2))) :pattern ((fun_app$bd (lmember$a ?v0) (lCons$b ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$v (lmember$b ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$v (lmember$b ?v0) ?v2))) :pattern ((fun_app$v (lmember$b ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (fun_app$k (ltake$a zero$a) ?v0) lNil$a) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (= (fun_app$i (ltake$b zero$a) ?v0) lNil$b) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$a (ltake$ zero$a) ?v0) lNil$) ))
(assert (= (fun_app$bj llength$ lNil$d) zero$a))
(assert (= (fun_app$bk llength$a lNil$g) zero$a))
(assert (= (llength$b lNil$a) zero$a))
(assert (= (llength$c lNil$b) zero$a))
(assert (= (fun_app$t llength$d lNil$) zero$a))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (not (= ?v0 zero$a)) false)) false) ))
(assert (forall ((?v0 Enat$)) (not (= zero$a (eSuc$ ?v0))) ))
(assert (forall ((?v0 Enat$)) (not (= zero$a (eSuc$ ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) (not (= ?v0 zero$a))) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$a) false) (forall ((?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$a) false) (forall ((?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Enat$)) (= (not (= ?v0 zero$a)) (exists ((?v1 Enat$)) (= ?v0 (eSuc$ ?v1)) )) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod_llist$)) (=> (fun_app$g (fun_app$bc ?v0 ?v1) ?v2) (fun_app$bb (llexord$ ?v0 (lCons$a ?v1 ?v3)) (lCons$a ?v2 ?v4))) ))
(assert (forall ((?v0 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v1 Natural_natural_prod$) (?v2 Natural_natural_prod$) (?v3 Natural_natural_prod_llist$) (?v4 Natural_natural_prod_llist$)) (=> (fun_app$f (fun_app$be ?v0 ?v1) ?v2) (fun_app$bd (llexord$a ?v0 (lCons$b ?v1 ?v3)) (lCons$b ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$m (fun_app$bg ?v0 ?v1) ?v2) (fun_app$v (fun_app$bf (llexord$b ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$) (?v3 Enat_enat_prod$)) (=> (fun_app$bb (llexord$ ?v0 ?v1) ?v2) (fun_app$bb (llexord$ ?v0 (lCons$a ?v3 ?v1)) (lCons$a ?v3 ?v2))) ))
(assert (forall ((?v0 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v1 Natural_natural_prod_llist$) (?v2 Natural_natural_prod_llist$) (?v3 Natural_natural_prod$)) (=> (fun_app$bd (llexord$a ?v0 ?v1) ?v2) (fun_app$bd (llexord$a ?v0 (lCons$b ?v3 ?v1)) (lCons$b ?v3 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$v (fun_app$bf (llexord$b ?v0) ?v1) ?v2) (fun_app$v (fun_app$bf (llexord$b ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2))) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$)) (fun_app$bb (llexord$ ?v0 lNil$a) ?v1) ))
(assert (forall ((?v0 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v1 Natural_natural_prod_llist$)) (fun_app$bd (llexord$a ?v0 lNil$b) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$v (fun_app$bf (llexord$b ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$)) (pred_llist$ ?v0 lNil$a) ))
(assert (forall ((?v0 Natural_natural_prod_bool_fun$)) (pred_llist$a ?v0 lNil$b) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$v (pred_llist$b ?v0) lNil$) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (and (fun_app$h ?v0 ?v1) (forall ((?v2 Enat$)) (=> (fun_app$h ?v0 ?v2) (or (= ?v2 zero$a) (exists ((?v3 Enat$)) (and (= ?v2 (eSuc$ ?v3)) (or (fun_app$h ?v0 ?v3) (member$b ?v3 enat_set$))) ))) )) (member$b ?v1 enat_set$)) ))
(assert (forall ((?v0 Enat$)) (=> (and (member$b ?v0 enat_set$) (and (=> (= ?v0 zero$a) false) (forall ((?v1 Enat$)) (=> (and (= ?v0 (eSuc$ ?v1)) (member$b ?v1 enat_set$)) false) ))) false) ))
(assert (forall ((?v0 Enat$)) (= (member$b ?v0 enat_set$) (or (= ?v0 zero$a) (exists ((?v1 Enat$)) (and (= ?v0 (eSuc$ ?v1)) (member$b ?v1 enat_set$)) ))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (and (fun_app$h ?v0 ?v1) (forall ((?v2 Enat$)) (=> (fun_app$h ?v0 ?v2) (or (= ?v2 zero$a) (exists ((?v3 Enat$)) (and (= ?v2 (eSuc$ ?v3)) (or (fun_app$h ?v0 ?v3) (enat_setp$ ?v3))) ))) )) (enat_setp$ ?v1)) ))
(assert (forall ((?v0 Enat$)) (=> (and (enat_setp$ ?v0) (and (=> (= ?v0 zero$a) false) (forall ((?v1 Enat$)) (=> (and (= ?v0 (eSuc$ ?v1)) (enat_setp$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 Enat$)) (= (enat_setp$ ?v0) (or (= ?v0 zero$a) (exists ((?v1 Enat$)) (and (= ?v0 (eSuc$ ?v1)) (enat_setp$ ?v1)) ))) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod_bool_fun$)) (=> (forall ((?v2 Enat_enat_prod$)) (= (fun_app$g ?v0 ?v2) (fun_app$g ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$)) (=> (forall ((?v2 Enat$)) (= (fun_app$h ?v0 ?v2) (fun_app$h ?v1 ?v2)) ) (= (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 Natural_natural_prod_set$)) (= (collect$b (uul$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat_set$)) (= (collect$a (uum$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat_enat_prod_set$)) (= (collect$ (uun$ ?v0)) ?v0) ))
(assert (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_bool_fun$)) (= (member$ ?v0 (collect$b ?v1)) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_bool_fun$)) (= (member$b ?v0 (collect$a ?v1)) (fun_app$h ?v1 ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$g ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$)) (! (= (enat_setp$ ?v0) (member$b ?v0 enat_set$)) :pattern ((enat_setp$ ?v0)))))
(assert (enat_setp$ zero$a))
(assert (forall ((?v0 Enat$)) (=> (enat_setp$ ?v0) (enat_setp$ (eSuc$ ?v0))) ))
(assert (member$b zero$a enat_set$))
(assert (forall ((?v0 Enat$)) (=> (member$b ?v0 enat_set$) (member$b (eSuc$ ?v0) enat_set$)) ))
(assert (forall ((?v0 Enat$)) (= (= zero$a ?v0) (= ?v0 zero$a)) ))
(assert (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 Natural$)) (= (= zero$b ?v0) (= ?v0 zero$b)) ))
(assert (= (the_enat$ zero$a) zero$))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (fun_app$bl (case_enat$ ?v0 ?v1) zero$a) (fun_app$ah ?v0 zero$)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Bool)) (= (fun_app$h (fun_app$bm (case_enat$a ?v0) ?v1) zero$a) (fun_app$af ?v0 zero$)) ))
(assert (= llength$d (gen_llength$ zero$)))
(assert (= llength$ (gen_llength$a zero$)))
(assert (= llength$a (gen_llength$b zero$)))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (! (=> (or (= ?v0 zero$a) (lnull$ ?v1)) (= (fun_app$k (ltake$a ?v0) ?v1) lNil$a)) :pattern ((fun_app$k (ltake$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Natural_natural_prod_llist$)) (! (=> (or (= ?v0 zero$a) (lnull$a ?v1)) (= (fun_app$i (ltake$b ?v0) ?v1) lNil$b)) :pattern ((fun_app$i (ltake$b ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (=> (or (= ?v0 zero$a) (lnull$b ?v1)) (= (ltake$c ?v0 ?v1) lNil$e)) :pattern ((ltake$c ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (! (=> (or (= ?v0 zero$a) (lnull$c ?v1)) (= (ltake$d ?v0 ?v1) lNil$f)) :pattern ((ltake$d ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (! (=> (or (= ?v0 zero$a) (lnull$d ?v1)) (= (fun_app$a (ltake$ ?v0) ?v1) lNil$)) :pattern ((fun_app$a (ltake$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$v ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$a) (fun_app$v ?v0 ?v1)) (forall ((?v4 Enat$)) (=> (= ?v3 (eSuc$ ?v4)) (fun_app$v ?v0 (fun_app$ ?v2 ?v4))) ))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$h ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$a) (fun_app$h ?v0 ?v1)) (forall ((?v4 Enat$)) (=> (= ?v3 (eSuc$ ?v4)) (fun_app$h ?v0 (fun_app$r ?v2 ?v4))) ))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$ae ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$a) (fun_app$ae ?v0 ?v1)) (forall ((?v4 Enat$)) (=> (= ?v3 (eSuc$ ?v4)) (fun_app$ae ?v0 (fun_app$h ?v2 ?v4))) ))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$v ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$a) (not (fun_app$v ?v0 ?v1))) (exists ((?v4 Enat$)) (and (= ?v3 (eSuc$ ?v4)) (not (fun_app$v ?v0 (fun_app$ ?v2 ?v4)))) )))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$h ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$a) (not (fun_app$h ?v0 ?v1))) (exists ((?v4 Enat$)) (and (= ?v3 (eSuc$ ?v4)) (not (fun_app$h ?v0 (fun_app$r ?v2 ?v4)))) )))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$ae ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$a) (not (fun_app$ae ?v0 ?v1))) (exists ((?v4 Enat$)) (and (= ?v3 (eSuc$ ?v4)) (not (fun_app$ae ?v0 (fun_app$h ?v2 ?v4)))) )))) ))
(assert (forall ((?v0 Enat_enat_prod_set$)) (! (= (fun_app$bn (gen_lset$ ?v0) lNil$a) ?v0) :pattern ((gen_lset$ ?v0)))))
(assert (forall ((?v0 Natural_natural_prod_set$)) (! (= (fun_app$bo (gen_lset$a ?v0) lNil$b) ?v0) :pattern ((gen_lset$a ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$bp (gen_lset$b ?v0) lNil$) ?v0) :pattern ((gen_lset$b ?v0)))))
(assert (forall ((?v0 Enat$)) (=> (not (= ?v0 zero$a)) (= (eSuc$ (epred$ ?v0)) ?v0)) ))
(assert (forall ((?v0 Enat$)) (=> (not (= ?v0 zero$a)) (= (eSuc$ (epred$ ?v0)) ?v0)) ))
(assert (forall ((?v0 Nat_llist$)) (= (= (fun_app$bj llength$ ?v0) zero$a) (lnull$e ?v0)) ))
(assert (forall ((?v0 Bool_llist$)) (= (= (fun_app$bk llength$a ?v0) zero$a) (lnull$f ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (= (fun_app$t llength$d ?v0) zero$a) (lnull$d ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (= (= (llength$e ?v0) zero$a) (lnull$b ?v0)) ))
(assert (forall ((?v0 Natural_llist$)) (= (= (llength$f ?v0) zero$a) (lnull$c ?v0)) ))
(assert (forall ((?v0 Nat_llist$)) (! (=> (lnull$e ?v0) (= (fun_app$bj llength$ ?v0) zero$a)) :pattern ((fun_app$bj llength$ ?v0)))))
(assert (forall ((?v0 Bool_llist$)) (! (=> (lnull$f ?v0) (= (fun_app$bk llength$a ?v0) zero$a)) :pattern ((fun_app$bk llength$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (=> (lnull$d ?v0) (= (fun_app$t llength$d ?v0) zero$a)) :pattern ((fun_app$t llength$d ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (=> (lnull$b ?v0) (= (llength$e ?v0) zero$a)) :pattern ((llength$e ?v0)))))
(assert (forall ((?v0 Natural_llist$)) (! (=> (lnull$c ?v0) (= (llength$f ?v0) zero$a)) :pattern ((llength$f ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (lnull$b (ltake$c ?v0 ?v1)) (or (= ?v0 zero$a) (lnull$b ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (= (lnull$c (ltake$d ?v0 ?v1)) (or (= ?v0 zero$a) (lnull$c ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lnull$d (fun_app$a (ltake$ ?v0) ?v1)) (or (= ?v0 zero$a) (lnull$d ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (not (lnull$b (ltake$c ?v0 ?v1))) (and (not (= ?v0 zero$a)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (= (not (lnull$c (ltake$d ?v0 ?v1))) (and (not (= ?v0 zero$a)) (not (lnull$c ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (not (lnull$d (fun_app$a (ltake$ ?v0) ?v1))) (and (not (= ?v0 zero$a)) (not (lnull$d ?v1)))) ))
(assert (forall ((?v0 A_llist$)) (! (= (lnull$d ?v0) (fun_app$v (fun_app$bq (case_llist$e true) uuo$) ?v0)) :pattern ((lnull$d ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (= (lnull$b ?v0) (case_llist$f true uup$ ?v0)) :pattern ((lnull$b ?v0)))))
(assert (forall ((?v0 Natural_llist$)) (! (= (lnull$c ?v0) (case_llist$g true uuq$ ?v0)) :pattern ((lnull$c ?v0)))))
(assert (forall ((?v0 A_llist$)) (= (not (lnull$d ?v0)) (fun_app$v (fun_app$bq (case_llist$e false) uur$) ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (= (not (lnull$b ?v0)) (case_llist$f false uus$ ?v0)) ))
(assert (forall ((?v0 Natural_llist$)) (= (not (lnull$c ?v0)) (case_llist$g false uut$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat_a_llist_fun$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$q (case_enat$b ?v0) ?v1) ?v2) (ite (= ?v2 zero$a) ?v0 (fun_app$ ?v1 (epred$ ?v2)))) :pattern ((fun_app$ (fun_app$q (case_enat$b ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) ?v2) (ite (= ?v2 zero$a) ?v0 (fun_app$r ?v1 (epred$ ?v2)))) :pattern ((fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool) (?v1 Enat_bool_fun$) (?v2 Enat$)) (! (= (fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) ?v2) (ite (= ?v2 zero$a) ?v0 (fun_app$h ?v1 (epred$ ?v2)))) :pattern ((fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Natural_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Natural_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Enat_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$c ?v1 ?v0) (lnull$d ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$c ?v1 ?v0) (lnull$d ?v1)) )) false)) false) ))
(assert (forall ((?v0 Enat_llist_set$)) (=> (and (=> (forall ((?v1 Enat_llist$)) (=> (member$d ?v1 ?v0) (lnull$b ?v1)) ) false) (=> (not (forall ((?v1 Enat_llist$)) (=> (member$d ?v1 ?v0) (lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 Natural_llist_set$)) (=> (and (=> (forall ((?v1 Natural_llist$)) (=> (member$e ?v1 ?v0) (lnull$c ?v1)) ) false) (=> (not (forall ((?v1 Natural_llist$)) (=> (member$e ?v1 ?v0) (lnull$c ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$d ?v0) (lnull$d ?v1)) false) (=> (or (not (lnull$d ?v0)) (not (lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (lnull$d ?v0) false) (=> (not (lnull$d ?v0)) false)) false) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 Natural_llist$)) (=> (and (=> (lnull$c ?v0) false) (=> (not (lnull$c ?v0)) false)) false) ))
(assert (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$ ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (fun_app$ (fun_app$q (case_enat$b (fun_app$ ?v0 ?v1)) (fun_app$w (uuu$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_a_llist_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$aa ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (fun_app$ (fun_app$q (case_enat$b (fun_app$aa ?v0 ?v1)) (fun_app$z (uuv$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$t ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (fun_app$r (fun_app$x (case_enat$c (fun_app$t ?v0 ?v1)) (fun_app$s (uuw$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$v ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (fun_app$h (fun_app$ad (case_enat$d (fun_app$v ?v0 ?v1)) (fun_app$u (uux$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$a ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (fun_app$ (fun_app$q (case_enat$b (fun_app$a ?v0 ?v1)) (fun_app$q (uuy$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$r ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (fun_app$r (fun_app$x (case_enat$c (fun_app$r ?v0 ?v1)) (fun_app$x (uuz$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$h ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (fun_app$h (fun_app$ad (case_enat$d (fun_app$h ?v0 ?v1)) (fun_app$y (uva$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_enat_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$ac ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (fun_app$r (fun_app$x (case_enat$c (fun_app$ac ?v0 ?v1)) (fun_app$ab (uvb$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$ae ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (fun_app$h (fun_app$ad (case_enat$d (fun_app$ae ?v0 ?v1)) (fun_app$ad (uvc$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Enat$)) (= (epred$ ?v0) (fun_app$r (fun_app$x (case_enat$c zero$a) uvd$) ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (not (lnull$ (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_llist$)) (not (lnull$a (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (not (lnull$b (lCons$e ?v0 ?v1))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural_llist$)) (not (lnull$c (lCons$f ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (lnull$d (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (not (lnull$ ?v0))) ))
(assert (forall ((?v0 Natural_natural_prod_llist$) (?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) (not (lnull$a ?v0))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$) (?v2 Enat_llist$)) (=> (= ?v0 (lCons$e ?v1 ?v2)) (not (lnull$b ?v0))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural$) (?v2 Natural_llist$)) (=> (= ?v0 (lCons$f ?v1 ?v2)) (not (lnull$c ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (lnull$d ?v0))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (= (not (lnull$a ?v0)) (exists ((?v1 Natural_natural_prod$) (?v2 Natural_natural_prod_llist$)) (= ?v0 (lCons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_llist$)) (= (not (lnull$b ?v0)) (exists ((?v1 Enat$) (?v2 Enat_llist$)) (= ?v0 (lCons$e ?v1 ?v2)) )) ))
(assert (forall ((?v0 Natural_llist$)) (= (not (lnull$c ?v0)) (exists ((?v1 Natural$) (?v2 Natural_llist$)) (= ?v0 (lCons$f ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (lnull$d ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$a) (lnull$d ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (lnull$d ?v1))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (=> (or (= ?v0 zero$a) (lnull$b ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Natural_llist$)) (=> (and (=> (or (= ?v0 zero$a) (lnull$c ?v1)) false) (=> (and (not (= ?v0 zero$a)) (not (lnull$c ?v1))) false)) false) ))
(assert (lnull$ lNil$a))
(assert (lnull$a lNil$b))
(assert (lnull$b lNil$e))
(assert (lnull$c lNil$f))
(assert (lnull$d lNil$))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$a)) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$b)) ))
(assert (forall ((?v0 Enat_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$e)) ))
(assert (forall ((?v0 Natural_llist$)) (=> (lnull$c ?v0) (= ?v0 lNil$f)) ))
(assert (forall ((?v0 A_llist$)) (=> (lnull$d ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (= ?v0 lNil$a) (lnull$ ?v0)) ))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (=> (= ?v0 lNil$b) (lnull$a ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (=> (= ?v0 lNil$e) (lnull$b ?v0)) ))
(assert (forall ((?v0 Natural_llist$)) (=> (= ?v0 lNil$f) (lnull$c ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (lnull$d ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$a)) :pattern ((lnull$ ?v0)))))
(assert (forall ((?v0 Natural_natural_prod_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$b)) :pattern ((lnull$a ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (= (lnull$b ?v0) (= ?v0 lNil$e)) :pattern ((lnull$b ?v0)))))
(assert (forall ((?v0 Natural_llist$)) (! (= (lnull$c ?v0) (= ?v0 lNil$f)) :pattern ((lnull$c ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (lnull$d ?v0) (= ?v0 lNil$)) :pattern ((lnull$d ?v0)))))
(assert (= (epred$ zero$a) zero$a))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (= (= ?v0 zero$a) (= ?v1 zero$a)) (=> (and (not (= ?v0 zero$a)) (not (= ?v1 zero$a))) (= (epred$ ?v0) (epred$ ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 zero$a)) (not (= ?v1 zero$a))) (= (= (epred$ ?v0) (epred$ ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$h (fun_app$p ?v0 ?v1) ?v2) (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$h (fun_app$p ?v0 ?v3) ?v4) (= (= ?v3 zero$a) (= ?v4 zero$a))) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (and (fun_app$h (fun_app$p ?v0 ?v3) ?v4) (and (not (= ?v3 zero$a)) (not (= ?v4 zero$a)))) (or (fun_app$h (fun_app$p ?v0 (epred$ ?v3)) (epred$ ?v4)) (= (epred$ ?v3) (epred$ ?v4)))) ))) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$h (fun_app$p ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$h (fun_app$p ?v0 ?v3) ?v4) (and (= (= ?v3 zero$a) (= ?v4 zero$a)) (=> (and (not (= ?v3 zero$a)) (not (= ?v4 zero$a))) (or (fun_app$h (fun_app$p ?v0 (epred$ ?v3)) (epred$ ?v4)) (= (epred$ ?v3) (epred$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$v ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$a) (not (fun_app$v ?v0 ?v1))) (and (= ?v3 (eSuc$ (epred$ ?v3))) (not (fun_app$v ?v0 (fun_app$ ?v2 (epred$ ?v3)))))))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$h ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$a) (not (fun_app$h ?v0 ?v1))) (and (= ?v3 (eSuc$ (epred$ ?v3))) (not (fun_app$h ?v0 (fun_app$r ?v2 (epred$ ?v3)))))))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$ae ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$a) (not (fun_app$ae ?v0 ?v1))) (and (= ?v3 (eSuc$ (epred$ ?v3))) (not (fun_app$ae ?v0 (fun_app$h ?v2 (epred$ ?v3)))))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 Enat_a_llist_fun$) (?v3 Enat$)) (= (fun_app$v ?v0 (fun_app$ (fun_app$q (case_enat$b ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$a) (fun_app$v ?v0 ?v1)) (=> (= ?v3 (eSuc$ (epred$ ?v3))) (fun_app$v ?v0 (fun_app$ ?v2 (epred$ ?v3)))))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (= (fun_app$h ?v0 (fun_app$r (fun_app$x (case_enat$c ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$a) (fun_app$h ?v0 ?v1)) (=> (= ?v3 (eSuc$ (epred$ ?v3))) (fun_app$h ?v0 (fun_app$r ?v2 (epred$ ?v3)))))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Enat_bool_fun$) (?v3 Enat$)) (= (fun_app$ae ?v0 (fun_app$h (fun_app$ad (case_enat$d ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$a) (fun_app$ae ?v0 ?v1)) (=> (= ?v3 (eSuc$ (epred$ ?v3))) (fun_app$ae ?v0 (fun_app$h ?v2 (epred$ ?v3)))))) ))
(assert (forall ((?v0 Enat$)) (= (epred$ (eSuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (epred$ (eSuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat_a_llist_fun$)) (= (fun_app$ (fun_app$q (case_enat$b ?v0) ?v1) zero$a) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$)) (= (fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) zero$a) ?v0) ))
(assert (forall ((?v0 Bool) (?v1 Enat_bool_fun$)) (= (fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) zero$a) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat_a_llist_fun$)) (= (fun_app$ (fun_app$q (case_enat$b ?v0) ?v1) zero$a) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$)) (= (fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) zero$a) ?v0) ))
(assert (forall ((?v0 Bool) (?v1 Enat_bool_fun$)) (= (fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) zero$a) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (= (fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) (eSuc$ ?v2)) (fun_app$r ?v1 ?v2)) ))
(assert (forall ((?v0 Bool) (?v1 Enat_bool_fun$) (?v2 Enat$)) (= (fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) (eSuc$ ?v2)) (fun_app$h ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (= (fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) (eSuc$ ?v2)) (fun_app$r ?v1 ?v2)) ))
(assert (forall ((?v0 Bool) (?v1 Enat_bool_fun$) (?v2 Enat$)) (= (fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) (eSuc$ ?v2)) (fun_app$h ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$)) (= (= ?v0 zero$a) (fun_app$h (fun_app$ad (case_enat$d true) uve$) ?v0)) ))
(assert (forall ((?v0 Enat$)) (= (not (= ?v0 zero$a)) (fun_app$h (fun_app$ad (case_enat$d false) uvf$) ?v0)) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (= ?v0 (eSuc$ (epred$ ?v0))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$a)) (not (lnull$d ?v1))) (not (lnull$d (fun_app$a (ltake$ ?v0) ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (or (= ?v0 zero$a) (lnull$d ?v1)) (lnull$d (fun_app$a (ltake$ ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$a (ldrop$ ?v0) ?v1) (fun_app$ (fun_app$q (case_enat$b ?v1) (uvh$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (! (= (case_enat$ ?v0 ?v1) (rec_enat$ ?v0 ?v1)) :pattern ((case_enat$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$a)) (not (lnull$d ?v1))) (= (ltl$ (fun_app$a (ltake$ ?v0) ?v1)) (fun_app$a (ltake$ (epred$ ?v0)) (ltl$ ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$a)) (not (lnull$d ?v1))) (= (lhd$ (fun_app$a (ltake$ ?v0) ?v1)) (lhd$ ?v1))) ))
(assert (= zero$ zero$))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (not (lnull$d ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) ?v2) (ite (lnull$d ?v2) ?v0 (fun_app$a (fun_app$c ?v1 (lhd$ ?v2)) (ltl$ ?v2)))) :pattern ((fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (= (ltl$ lNil$) lNil$))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$v ?v0 (fun_app$a (fun_app$b (case_llist$ ?v1) ?v2) ?v3)) (not (or (and (= ?v3 lNil$) (not (fun_app$v ?v0 ?v1))) (and (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (not (fun_app$v ?v0 (fun_app$a (fun_app$c ?v2 (lhd$ ?v3)) (ltl$ ?v3)))))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_llist_a_llist_fun_fun$) (?v3 A_llist$)) (= (fun_app$v ?v0 (fun_app$a (fun_app$b (case_llist$ ?v1) ?v2) ?v3)) (and (=> (= ?v3 lNil$) (fun_app$v ?v0 ?v1)) (=> (= ?v3 (lCons$ (lhd$ ?v3) (ltl$ ?v3))) (fun_app$v ?v0 (fun_app$a (fun_app$c ?v2 (lhd$ ?v3)) (ltl$ ?v3)))))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$a)) (not (lnull$d ?v1))) (= (fun_app$a (ltake$ ?v0) ?v1) (lCons$ (lhd$ ?v1) (fun_app$a (ltake$ (epred$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$)) (= (ltl$ ?v0) (fun_app$a (fun_app$b (case_llist$ lNil$) uvi$) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$a (ltake$ ?v0) ?v1) (ite (or (= ?v0 zero$a) (lnull$d ?v1)) lNil$ (lCons$ (lhd$ ?v1) (fun_app$a (ltake$ (epred$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$a (ltakeWhile$ ?v0) ?v1) (ite (or (lnull$d ?v1) (not (fun_app$m ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$a (ltakeWhile$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (lnull$d ?v0)) (fun_app$m ?v1 (lhd$ ?v0))) (= (fun_app$a (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$a (ltakeWhile$ ?v1) (ltl$ ?v0))))) ))
(assert (= (size_natural$ zero$b) zero$))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (or (lnull$d ?v0) (not (fun_app$m ?v1 (lhd$ ?v0)))) (= (fun_app$a (ltakeWhile$ ?v1) ?v0) lNil$)) :pattern ((fun_app$a (ltakeWhile$ ?v1) ?v0)))))
(assert (= (size$ zero$b) zero$))
(assert (= size_enat$ (rec_enat$ uvj$ zero$)))
(assert (= size$a (rec_enat$ uvj$ zero$)))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural$)) (=> (and (=> (= ?v0 zero$b) false) (forall ((?v1 Natural$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Natural$)) (not (= zero$b (suc$ ?v0))) ))
(assert (forall ((?v0 Natural$)) (not (= (suc$ ?v0) zero$b)) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (lnull$c ?v0) (lnull$c ?v1)) lNil$b (lCons$b (pair$a (lhd$f ?v0) (lhd$f ?v1)) (lzip$ (ltl$f ?v0) (ltl$f ?v1))))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (= (lzip$a ?v0 ?v1) (ite (or (lnull$b ?v0) (lnull$b ?v1)) lNil$a (lCons$a (pair$ (lhd$e ?v0) (lhd$e ?v1)) (lzip$a (ltl$e ?v0) (ltl$e ?v1))))) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (lzip$ ?v0 ?v1) (lCons$b (pair$a (lhd$f ?v0) (lhd$f ?v1)) (lzip$ (ltl$f ?v0) (ltl$f ?v1))))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) (= (lzip$a ?v0 ?v1) (lCons$a (pair$ (lhd$e ?v0) (lhd$e ?v1)) (lzip$a (ltl$e ?v0) (ltl$e ?v1))))) ))
(assert (forall ((?v0 Natural_natural_prod$)) (=> (and (forall ((?v1 Natural$)) (=> (= ?v0 (pair$a zero$b ?v1)) false) ) (forall ((?v1 Natural$) (?v2 Natural$)) (=> (= ?v0 (pair$a (suc$ ?v1) ?v2)) false) )) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_prod_set$)) (=> (and (member$a (pair$ ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (member$a (pair$ ?v3 ?v4) ?v2) (or (and (= ?v3 zero$a) (= ?v4 zero$a)) (exists ((?v5 Enat$) (?v6 Enat$)) (and (= ?v3 (eSuc$ ?v5)) (and (= ?v4 (eSuc$ ?v6)) (or (member$a (pair$ ?v5 ?v6) ?v2) (= ?v5 ?v6)))) ))) )) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural_llist$) (?v1 Natural_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (= (lhd$b (lzip$ ?v0 ?v1)) (pair$a (lhd$f ?v0) (lhd$f ?v1)))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) (= (lhd$a (lzip$a ?v0 ?v1)) (pair$ (lhd$e ?v0) (lhd$e ?v1)))) ))
(assert (forall ((?v0 Natural_natural_prod_set$) (?v1 Natural_natural_prod_set$)) (= (= (uvk$ ?v0) (uvk$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod_set$)) (= (= (uvl$ ?v0) (uvl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (divides_aux$ (pair$b ?v0 ?v1)) (= ?v1 zero$)) :pattern ((pair$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$a (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$a (lappend$ ?v1) ?v2))) :pattern ((fun_app$a (lappend$ (lCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$a (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$a (lappend$ lNil$) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$a (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))))
(assert (= (fun_app$a (lappend$ lNil$) lNil$) lNil$))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$a (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$a (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (lnull$d ?v0) (lnull$d ?v1)) (= (fun_app$a (lappend$ ?v0) ?v1) lNil$)) :pattern ((fun_app$a (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$a (lappend$ (fun_app$a (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$a (lappend$ ?v0) (lCons$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$a (lappend$ ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ ?v1) (uvm$ ?v1)) ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (lnull$d ?v0)) (not (lnull$d ?v1))) (= (fun_app$a (lappend$ ?v0) ?v1) (lCons$ (fun_app$ao (fun_app$ba (case_llist$a (lhd$ ?v1)) uvn$) ?v0) (fun_app$a (fun_app$b (case_llist$ (fun_app$a (fun_app$b (case_llist$ undefined$) uvi$) ?v1)) (uvo$ ?v1)) ?v0)))) ))
(assert (forall ((?v0 A_llist_llist$)) (= (lconcat$ ?v0) (fun_app$d (case_llist$b lNil$ uvp$) ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (lnull$d ?v0)) (not (lnull$d ?v1))) (= (ltl$ (fun_app$a (lappend$ ?v0) ?v1)) (fun_app$a (fun_app$b (case_llist$ (fun_app$a (fun_app$b (case_llist$ undefined$) uvi$) ?v1)) (uvo$ ?v1)) ?v0))) ))
(assert (forall ((?v0 Enat$)) (member$a (pair$ zero$a ?v0) le_enat$) ))
(assert (= (fun_app$bl size_enat$ infinity$) zero$))
(assert (= (eSuc$ infinity$) infinity$))
(assert (= (epred$ infinity$) infinity$))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (! (= (fun_app$bl (rec_enat$ ?v0 ?v1) infinity$) ?v1) :pattern ((rec_enat$ ?v0 ?v1)))))
(assert (= (fun_app$bl size$a infinity$) zero$))
(assert (forall ((?v0 Enat$)) (= (= (eSuc$ ?v0) infinity$) (= ?v0 infinity$)) ))
(assert (forall ((?v0 Enat$)) (= (= infinity$ (eSuc$ ?v0)) (= ?v0 infinity$)) ))
(assert (not (= infinity$ zero$a)))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$)) (! (= (fun_app$r (fun_app$x (case_enat$c ?v0) ?v1) infinity$) (fun_app$r ?v1 infinity$)) :pattern ((fun_app$x (case_enat$c ?v0) ?v1)))))
(assert (forall ((?v0 Bool) (?v1 Enat_bool_fun$)) (! (= (fun_app$h (fun_app$ad (case_enat$d ?v0) ?v1) infinity$) (fun_app$h ?v1 infinity$)) :pattern ((fun_app$ad (case_enat$d ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$h (le_enatp$ ?v0) ?v1) (member$a (pair$ ?v0 ?v1) le_enat$)) :pattern ((fun_app$h (le_enatp$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$)) (fun_app$h (le_enatp$ zero$a) ?v0) ))
(assert (forall ((?v0 Bool_llist$)) (! (= (llast$ ?v0) (fun_app$h (fun_app$bm (case_enat$a (fun_app$ag (case_nat$ undefined$a) (lnth$ ?v0))) undefined$a) (fun_app$bk llength$a ?v0))) :pattern ((llast$ ?v0)))))
(assert (forall ((?v0 Nat_llist$)) (! (= (llast$a ?v0) (fun_app$bl (case_enat$ (fun_app$al (case_nat$a undefined$b) (lnth$a ?v0)) undefined$b) (fun_app$bj llength$ ?v0))) :pattern ((llast$a ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$a ?v0) (suc$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$a ?v0) (suc$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 Nat_bool_fun$)) (! (= (fun_app$af (fun_app$ag (case_nat$ ?v0) ?v1) zero$) ?v0) :pattern ((fun_app$ag (case_nat$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$)) (! (= (fun_app$ah (fun_app$al (case_nat$a ?v0) ?v1) zero$) ?v0) :pattern ((fun_app$al (case_nat$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$)) (not (= ?v0 (suc$a ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$a ?v0) (suc$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$af (fun_app$ag (case_nat$ ?v0) ?v1) (suc$a ?v2)) (fun_app$af ?v1 ?v2)) :pattern ((fun_app$af (fun_app$ag (case_nat$ ?v0) ?v1) (suc$a ?v2))))))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$ah (fun_app$al (case_nat$a ?v0) ?v1) (suc$a ?v2)) (fun_app$ah ?v1 ?v2)) :pattern ((fun_app$ah (fun_app$al (case_nat$a ?v0) ?v1) (suc$a ?v2))))))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$a ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= (suc$a ?v0) zero$)) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$a ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$a ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$af ?v0 zero$) (forall ((?v2 Nat$)) (=> (fun_app$af ?v0 ?v2) (fun_app$af ?v0 (suc$a ?v2))) )) (fun_app$af ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$af ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$af ?v0 (suc$a ?v2)) (fun_app$af ?v0 ?v2)) )) (fun_app$af ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (suc$a ?v1)) )) ))
(assert (forall ((?v0 Nat$)) (=> (= zero$ (suc$a ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (suc$a ?v1)) (not (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (= (suc$a ?v0) zero$) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$af (fun_app$br ?v0 ?v3) zero$) ) (and (forall ((?v3 Nat$)) (fun_app$af (fun_app$br ?v0 zero$) (suc$a ?v3)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$af (fun_app$br ?v0 ?v3) ?v4) (fun_app$af (fun_app$br ?v0 (suc$a ?v3)) (suc$a ?v4))) ))) (fun_app$af (fun_app$br ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$a ?v1)) false) )) false) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$ae ?v0 (fun_app$af (fun_app$ag (case_nat$ ?v1) ?v2) ?v3)) (fun_app$af (fun_app$ag (case_nat$ (fun_app$ae ?v0 ?v1)) (fun_app$ag (uvq$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Bool_nat_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$aj ?v0 (fun_app$af (fun_app$ag (case_nat$ ?v1) ?v2) ?v3)) (fun_app$ah (fun_app$al (case_nat$a (fun_app$aj ?v0 ?v1)) (fun_app$ai (uvr$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$af ?v0 (fun_app$ah (fun_app$al (case_nat$a ?v1) ?v2) ?v3)) (fun_app$af (fun_app$ag (case_nat$ (fun_app$af ?v0 ?v1)) (fun_app$ak (uvs$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$ah ?v0 (fun_app$ah (fun_app$al (case_nat$a ?v1) ?v2) ?v3)) (fun_app$ah (fun_app$al (case_nat$a (fun_app$ah ?v0 ?v1)) (fun_app$al (uvt$ ?v0) ?v2)) ?v3)) ))
(assert (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$af (fun_app$ag (case_nat$ false) uvu$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (= (= ?v0 zero$) (fun_app$af (fun_app$ag (case_nat$ true) uvv$) ?v0)) ))
(assert (forall ((?v0 Enat$)) (=> (not (= ?v0 infinity$)) (= (the_enat$ (eSuc$ ?v0)) (suc$a (the_enat$ ?v0)))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$ae ?v0 (fun_app$af (fun_app$ag (case_nat$ ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$ae ?v0 ?v1)) (=> (= ?v3 (suc$a (pred$ ?v3))) (fun_app$ae ?v0 (fun_app$af ?v2 (pred$ ?v3)))))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$af ?v0 (fun_app$ah (fun_app$al (case_nat$a ?v1) ?v2) ?v3)) (and (=> (= ?v3 zero$) (fun_app$af ?v0 ?v1)) (=> (= ?v3 (suc$a (pred$ ?v3))) (fun_app$af ?v0 (fun_app$ah ?v2 (pred$ ?v3)))))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool) (?v2 Nat_bool_fun$) (?v3 Nat$)) (= (fun_app$ae ?v0 (fun_app$af (fun_app$ag (case_nat$ ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$ae ?v0 ?v1))) (and (= ?v3 (suc$a (pred$ ?v3))) (not (fun_app$ae ?v0 (fun_app$af ?v2 (pred$ ?v3)))))))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$af ?v0 (fun_app$ah (fun_app$al (case_nat$a ?v1) ?v2) ?v3)) (not (or (and (= ?v3 zero$) (not (fun_app$af ?v0 ?v1))) (and (= ?v3 (suc$a (pred$ ?v3))) (not (fun_app$af ?v0 (fun_app$ah ?v2 (pred$ ?v3)))))))) ))
(assert (forall ((?v0 Nat$)) (= (pred$ ?v0) (fun_app$ah (fun_app$al (case_nat$a zero$) uvw$) ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$)) (=> (and (not (fun_app$af ?v0 zero$)) (exists ((?v1 Nat$)) (fun_app$af ?v0 ?v1) )) (exists ((?v1 Nat$)) (and (not (fun_app$af ?v0 ?v1)) (fun_app$af ?v0 (suc$a ?v1))) )) ))
(check-sat)
(exit)

