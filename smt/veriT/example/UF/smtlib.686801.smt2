(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |Benchmarks from the paper: "Extending Sledgehammer with SMT Solvers" by Jasmin Blanchette, Sascha Bohme, and Lawrence C. Paulson, CADE 2011.  Translated to SMT2 by Andrew Reynolds and Morgan Deters.|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-sort S3 0)
(declare-sort S4 0)
(declare-sort S5 0)
(declare-sort S6 0)
(declare-sort S7 0)
(declare-sort S8 0)
(declare-sort S9 0)
(declare-fun f1 () S1)
(declare-fun f2 () S1)
(declare-fun f3 (S3 S2) S1)
(declare-fun f4 () S3)
(declare-fun f5 (S5) S3)
(declare-fun f6 (S6 S4) S5)
(declare-fun f7 (S7 S4) S6)
(declare-fun f8 () S7)
(declare-fun f9 (S4 S8) S1)
(declare-fun f10 () S8)
(declare-fun f11 () S4)
(declare-fun f12 () S4)
(declare-fun f13 (S2 S3) S1)
(declare-fun f14 () S3)
(declare-fun f15 (S9) S2)
(declare-fun f16 () S9)
(declare-fun f17 (S8 S4) S1)
(declare-fun f18 (S2 S5) S1)
(declare-fun f19 (S3) S3)
(declare-fun f20 () S4)
(declare-fun f21 () S4)
(assert (not (= f1 f2)))
(assert (forall ((?v0 S2)) (= (= (f3 f4 ?v0) f1) (and (forall ((?v1 S4) (?v2 S4) (?v3 S4)) (let ((?v_0 (f7 f8 ?v1))) (=> (= (f3 (f5 (f6 ?v_0 ?v2)) ?v0) f1) (=> (= (f3 (f5 (f6 (f7 f8 ?v2) ?v3)) ?v0) f1) (= (f3 (f5 (f6 ?v_0 ?v3)) ?v0) f1))))) (and (forall ((?v1 S4)) (not (= (f3 (f5 (f6 (f7 f8 ?v1) ?v1)) ?v0) f1))) (forall ((?v1 S4)) (=> (= (f9 ?v1 f10) f1) (forall ((?v2 S4)) (=> (= (f9 ?v2 f10) f1) (=> (not (= ?v1 ?v2)) (or (= (f3 (f5 (f6 (f7 f8 ?v1) ?v2)) ?v0) f1) (= (f3 (f5 (f6 (f7 f8 ?v2) ?v1)) ?v0) f1))))))))))))
(assert (forall ((?v0 S4) (?v1 S4) (?v2 S4) (?v3 S4)) (= (= (f6 (f7 f8 ?v0) ?v1) (f6 (f7 f8 ?v2) ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))))
(assert (not (= f11 f12)))
(assert (forall ((?v0 S2) (?v1 S4) (?v2 S4)) (=> (= (f13 ?v0 f14) f1) (=> (not (= ?v1 ?v2)) (= (not (= (f3 (f5 (f6 (f7 f8 ?v1) ?v2)) ?v0) f1)) (= (f3 (f5 (f6 (f7 f8 ?v2) ?v1)) ?v0) f1))))))
(assert (= (f13 (f15 f16) f14) f1))
(assert (forall ((?v0 S2) (?v1 S4) (?v2 S4)) (=> (= (f13 ?v0 f14) f1) (=> (= (f3 (f5 (f6 (f7 f8 ?v1) ?v2)) ?v0) f1) (=> (= (f3 (f5 (f6 (f7 f8 ?v2) ?v1)) ?v0) f1) false)))))
(assert (forall ((?v0 S4) (?v1 S8)) (= (= (f9 ?v0 ?v1) f1) (= (f17 ?v1 ?v0) f1))))
(assert (forall ((?v0 S5) (?v1 S2)) (= (= (f3 (f5 ?v0) ?v1) f1) (= (f18 ?v1 ?v0) f1))))
(assert (forall ((?v0 S2) (?v1 S3)) (= (= (f13 ?v0 ?v1) f1) (= (f3 ?v1 ?v0) f1))))
(assert (forall ((?v0 S3)) (= (f19 ?v0) ?v0)))
(assert (let ((?v_0 (f15 f16)) (?v_1 (f7 f8 f11))) (not (=> (= (f3 (f5 (f6 (f7 f8 f20) f21)) ?v_0) f1) (=> (=> (not (= f20 f11)) (= (f3 (f5 (f6 ?v_1 f20)) ?v_0) f1)) (=> (=> (not (= f21 f12)) (= (f3 (f5 (f6 (f7 f8 f21) f12)) ?v_0) f1)) (=> (= (f13 ?v_0 (f19 f4)) f1) (= (f3 (f5 (f6 ?v_1 f12)) ?v_0) f1))))))))
(check-sat)
(exit)
