(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_set_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_set_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$) A$)
(declare-fun snd$ (A_a_prod$) A$)
(declare-fun pair$ (A$ A$) A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$a () A_a_prod_llist$)
(declare-fun lhd$a (A_a_prod_llist$) A_a_prod$)
(declare-fun ltl$a (A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lCons$a (A_a_prod$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lNil$b () A_llist_llist$)
(declare-fun lhd$b (A_llist_llist$) A_llist$)
(declare-fun ltl$b (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$b (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$a (A_a_a_prod_prod$) A$)
(declare-fun snd$a (A_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$a (A$ A_a_prod$) A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$c () A_a_a_prod_prod_llist$)
(declare-fun lhd$c (A_a_a_prod_prod_llist$) A_a_a_prod_prod$)
(declare-fun ltl$c (A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lCons$c (A_a_a_prod_prod$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$b (A_a_prod_a_prod$) A_a_prod$)
(declare-fun snd$b (A_a_prod_a_prod$) A$)
(declare-fun pair$b (A_a_prod$ A$) A_a_prod_a_prod$)
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$d () A_a_prod_a_prod_llist$)
(declare-fun lhd$d (A_a_prod_a_prod_llist$) A_a_prod_a_prod$)
(declare-fun ltl$d (A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun lCons$d (A_a_prod_a_prod$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-fun fst$c (A_a_prod_a_a_prod_prod$) A_a_prod$)
(declare-fun snd$c (A_a_prod_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$c (A_a_prod$ A_a_prod$) A_a_prod_a_a_prod_prod$)
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$e () A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$e (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod$)
(declare-fun ltl$e (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$e (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-sort A_a_llist_prod$ 0)
(declare-fun fst$d (A_a_llist_prod$) A$)
(declare-fun snd$d (A_a_llist_prod$) A_llist$)
(declare-fun pair$d (A$ A_llist$) A_a_llist_prod$)
(declare-sort A_a_llist_prod_llist$ 0)
(declare-fun lNil$f () A_a_llist_prod_llist$)
(declare-fun lhd$f (A_a_llist_prod_llist$) A_a_llist_prod$)
(declare-fun ltl$f (A_a_llist_prod_llist$) A_a_llist_prod_llist$)
(declare-fun lCons$f (A_a_llist_prod$ A_a_llist_prod_llist$) A_a_llist_prod_llist$)
(declare-sort A_a_prod_a_llist_prod$ 0)
(declare-fun fst$e (A_a_prod_a_llist_prod$) A_a_prod$)
(declare-fun snd$e (A_a_prod_a_llist_prod$) A_llist$)
(declare-fun pair$e (A_a_prod$ A_llist$) A_a_prod_a_llist_prod$)
(declare-sort A_a_prod_a_llist_prod_llist$ 0)
(declare-fun lNil$g () A_a_prod_a_llist_prod_llist$)
(declare-fun lhd$g (A_a_prod_a_llist_prod_llist$) A_a_prod_a_llist_prod$)
(declare-fun ltl$g (A_a_prod_a_llist_prod_llist$) A_a_prod_a_llist_prod_llist$)
(declare-fun lCons$g (A_a_prod_a_llist_prod$ A_a_prod_a_llist_prod_llist$) A_a_prod_a_llist_prod_llist$)
(declare-sort A_llist_a_prod$ 0)
(declare-fun fst$f (A_llist_a_prod$) A_llist$)
(declare-fun snd$f (A_llist_a_prod$) A$)
(declare-fun pair$f (A_llist$ A$) A_llist_a_prod$)
(declare-sort A_llist_a_prod_llist$ 0)
(declare-fun lNil$h () A_llist_a_prod_llist$)
(declare-fun lhd$h (A_llist_a_prod_llist$) A_llist_a_prod$)
(declare-fun ltl$h (A_llist_a_prod_llist$) A_llist_a_prod_llist$)
(declare-fun lCons$h (A_llist_a_prod$ A_llist_a_prod_llist$) A_llist_a_prod_llist$)
(declare-sort A_llist_a_a_prod_prod$ 0)
(declare-fun fst$g (A_llist_a_a_prod_prod$) A_llist$)
(declare-fun snd$g (A_llist_a_a_prod_prod$) A_a_prod$)
(declare-fun pair$g (A_llist$ A_a_prod$) A_llist_a_a_prod_prod$)
(declare-sort A_llist_a_a_prod_prod_llist$ 0)
(declare-fun lNil$i () A_llist_a_a_prod_prod_llist$)
(declare-fun lhd$i (A_llist_a_a_prod_prod_llist$) A_llist_a_a_prod_prod$)
(declare-fun ltl$i (A_llist_a_a_prod_prod_llist$) A_llist_a_a_prod_prod_llist$)
(declare-fun lCons$i (A_llist_a_a_prod_prod$ A_llist_a_a_prod_prod_llist$) A_llist_a_a_prod_prod_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$h (A_llist_a_llist_prod$) A_llist$)
(declare-fun snd$h (A_llist_a_llist_prod$) A_llist$)
(declare-fun pair$h (A_llist$ A_llist$) A_llist_a_llist_prod$)
(declare-sort A_llist_a_llist_prod_llist$ 0)
(declare-fun lNil$j () A_llist_a_llist_prod_llist$)
(declare-fun lhd$j (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod$)
(declare-fun ltl$j (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lCons$j (A_llist_a_llist_prod$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun uu$ (A_llist_set$) A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun acc$ () A_llist$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun uua$ (A_set$) A_bool_fun$)
(declare-fun uub$ (A$) A_llist_a_llist_fun$)
(declare-fun uuc$ () A_llist_a_fun$)
(declare-fun uud$ () A_llist_a_llist_fun$)
(declare-fun xsa$ () A_llist$)
(declare-fun acca$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lzip$ (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun lzip$a (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$c (A_llist$) A_llist_a_a_prod_llist_fun$)
(declare-fun lzip$d (A_llist$ A_llist_llist$) A_a_llist_prod_llist$)
(declare-fun lzip$e (A_a_prod_llist$ A_llist_llist$) A_a_prod_a_llist_prod_llist$)
(declare-fun lzip$f (A_llist_llist$ A_llist$) A_llist_a_prod_llist$)
(declare-fun lzip$g (A_llist_llist$ A_a_prod_llist$) A_llist_a_a_prod_prod_llist$)
(declare-fun lzip$h (A_llist_llist$ A_llist_llist$) A_llist_a_llist_prod_llist$)
(declare-fun ldropn$ (Nat$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lnull$a (A_a_prod_llist$) Bool)
(declare-fun lnull$b (A_llist_llist$) Bool)
(declare-fun lnull$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$d (A_a_llist_prod_llist$) Bool)
(declare-fun lnull$e (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$f (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$g (A_a_prod_a_llist_prod_llist$) Bool)
(declare-fun lnull$h (A_llist_a_prod_llist$) Bool)
(declare-fun lnull$i (A_llist_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$j (A_llist_a_llist_prod_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_a_prod_llist$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun ldropn$a (Nat$) A_llist_a_llist_fun$)
(declare-fun ldropn$b (Nat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$ (A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun lmirror$ () A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun member$c (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$e (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun fun_app$f (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$g (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$h (A_llist_a_a_prod_llist_fun$ A_llist$) A_a_prod_llist$)
(declare-fun fun_app$i (A_a_prod_llist_a_a_prod_set_fun$ A_a_prod_llist$) A_a_prod_set$)
(declare-fun fun_app$j (A_llist_llist_a_llist_set_fun$ A_llist_llist$) A_llist_set$)
(declare-fun fun_app$k (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$l (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$m (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$n (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$o (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$p (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun gen_lset$ (A_a_prod_set$) A_a_prod_llist_a_a_prod_set_fun$)
(declare-fun lappend$a (A_llist_llist$) A_llist_llist_a_llist_llist_fun$)
(declare-fun lappend$b (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$a (A_a_prod_llist$) Bool)
(declare-fun lfinite$b (A_llist_llist$) Bool)
(declare-fun lfinite$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$d (A_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun lmirror$a () A_llist_llist_a_llist_llist_fun$)
(declare-fun lmirror$b () A_llist_a_llist_fun$)
(declare-fun gen_lset$a (A_llist_set$) A_llist_llist_a_llist_set_fun$)
(declare-fun gen_lset$b (A_set$) A_llist_a_set_fun$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun undefined$ () A$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun lmirror_aux$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lmirror_aux$a (A_a_prod_llist$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lmirror_aux$b (A_llist_llist$) A_llist_llist_a_llist_llist_fun$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun finite_lprefix$ (A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun finite_lprefix$a (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun finite_lprefix$b (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$b (A_llist_llist$) A_llist_llist_bool_fun$)
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ uud$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uud$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$a uuc$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uuc$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$c (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uua$ ?v0) ?v1)))))
(assert (not (and (lfinite$ xsa$) (lfinite$ acca$))))
(assert (fun_app$b lnull$ xsa$))
(assert (lfinite$ (fun_app$ (lmirror_aux$ acc$) xs$)))
(assert (lfinite$ (fun_app$ (lmirror_aux$ acca$) xsa$)))
(assert (=> (= (ltl$ (fun_app$ (lmirror_aux$ acca$) xsa$)) (fun_app$ (lmirror_aux$ (ltl$ acca$)) lNil$)) (and (lfinite$ lNil$) (lfinite$ (ltl$ acca$)))))
(assert (not (fun_app$b lnull$ (fun_app$ (lmirror_aux$ acca$) xsa$))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (= (ltl$ (fun_app$ (lmirror_aux$ acca$) xsa$)) (fun_app$ (lmirror_aux$ ?v0) ?v1)) (and (lfinite$ ?v1) (lfinite$ ?v0))) ))
(assert (= (lfinite$a lNil$a) true))
(assert (= (lfinite$b lNil$b) true))
(assert (= (lfinite$ lNil$) true))
(assert (forall ((?v0 A_a_prod_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (= (lfinite$b (ltl$b ?v0)) (lfinite$b ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0)) ))
(assert (lfinite$a lNil$a))
(assert (lfinite$b lNil$b))
(assert (lfinite$ lNil$))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (lnull$b ?v0) (lfinite$b ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$d (lmirror_aux$a ?v0) lNil$a) ?v0) :pattern ((lmirror_aux$a ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$e (lmirror_aux$b ?v0) lNil$b) ?v0) :pattern ((lmirror_aux$b ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) lNil$) ?v0) :pattern ((lmirror_aux$ ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (fun_app$d (lmirror_aux$a ?v0) ?v1))) (or (not (lnull$a ?v1)) (not (lnull$a ?v0)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (not (lnull$b (fun_app$e (lmirror_aux$b ?v0) ?v1))) (or (not (lnull$b ?v1)) (not (lnull$b ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1))) (or (not (fun_app$b lnull$ ?v1)) (not (fun_app$b lnull$ ?v0)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (fun_app$d (lmirror_aux$a ?v0) ?v1)) (and (lnull$a ?v1) (lnull$a ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lnull$b (fun_app$e (lmirror_aux$b ?v0) ?v1)) (and (lnull$b ?v1) (lnull$b ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1)) (and (fun_app$b lnull$ ?v1) (fun_app$b lnull$ ?v0))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist_bool_fun$)) (=> (and (lfinite$a ?v0) (and (forall ((?v2 A_a_prod_llist$)) (=> (lnull$a ?v2) (fun_app$f ?v1 ?v2)) ) (forall ((?v2 A_a_prod_llist$)) (=> (and (lfinite$a ?v2) (and (not (lnull$a ?v2)) (fun_app$f ?v1 (ltl$a ?v2)))) (fun_app$f ?v1 ?v2)) ))) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (=> (and (lfinite$b ?v0) (and (forall ((?v2 A_llist_llist$)) (=> (lnull$b ?v2) (fun_app$g ?v1 ?v2)) ) (forall ((?v2 A_llist_llist$)) (=> (and (lfinite$b ?v2) (and (not (lnull$b ?v2)) (fun_app$g ?v1 (ltl$b ?v2)))) (fun_app$g ?v1 ?v2)) ))) (fun_app$g ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (forall ((?v2 A_llist$)) (=> (fun_app$b lnull$ ?v2) (fun_app$b ?v1 ?v2)) ) (forall ((?v2 A_llist$)) (=> (and (lfinite$ ?v2) (and (not (fun_app$b lnull$ ?v2)) (fun_app$b ?v1 (ltl$ ?v2)))) (fun_app$b ?v1 ?v2)) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (fun_app$f (lstrict_prefix$ ?v0) ?v1) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (lstrict_prefix$a ?v0) ?v1) (lfinite$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (lfinite$a (fun_app$d (ldropn$ ?v0) ?v1)) (lfinite$a ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (ldropn$a ?v0) ?v1)) (lfinite$ ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$c (lzip$ ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$a ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lfinite$d (lzip$a ?v0 ?v1)) (or (lfinite$a ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$e (lzip$b ?v0 ?v1)) (or (lfinite$a ?v0) (lfinite$a ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$a (fun_app$h (lzip$c ?v0) ?v1)) (or (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$c (lzip$ ?v0 ?v1))) (and (not (fun_app$b lnull$ ?v0)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (not (lnull$d (lzip$d ?v0 ?v1))) (and (not (fun_app$b lnull$ ?v0)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$e (lzip$a ?v0 ?v1))) (and (not (lnull$a ?v0)) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$f (lzip$b ?v0 ?v1))) (and (not (lnull$a ?v0)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (= (not (lnull$g (lzip$e ?v0 ?v1))) (and (not (lnull$a ?v0)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (= (not (lnull$h (lzip$f ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$i (lzip$g ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (not (lnull$j (lzip$h ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$a (fun_app$h (lzip$c ?v0) ?v1))) (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lnull$c (lzip$ ?v0 ?v1)) (or (fun_app$b lnull$ ?v0) (lnull$a ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (lnull$d (lzip$d ?v0 ?v1)) (or (fun_app$b lnull$ ?v0) (lnull$b ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lnull$e (lzip$a ?v0 ?v1)) (or (lnull$a ?v0) (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$f (lzip$b ?v0 ?v1)) (or (lnull$a ?v0) (lnull$a ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (= (lnull$g (lzip$e ?v0 ?v1)) (or (lnull$a ?v0) (lnull$b ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (= (lnull$h (lzip$f ?v0 ?v1)) (or (lnull$b ?v0) (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (= (lnull$i (lzip$g ?v0 ?v1)) (or (lnull$b ?v0) (lnull$a ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lnull$j (lzip$h ?v0 ?v1)) (or (lnull$b ?v0) (lnull$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$a (fun_app$h (lzip$c ?v0) ?v1)) (or (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$h (lzip$c ?v0) lNil$) lNil$a) :pattern ((lzip$c ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$h (lzip$c lNil$) ?v0) lNil$a) :pattern ((fun_app$h (lzip$c lNil$) ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (ldropn$ ?v0) lNil$a) lNil$a) :pattern ((ldropn$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$e (ldropn$b ?v0) lNil$b) lNil$b) :pattern ((ldropn$b ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$a ?v0) lNil$) lNil$) :pattern ((ldropn$a ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$d (ldropn$ ?v0) (fun_app$h (lzip$c ?v1) ?v2)) (fun_app$h (lzip$c (fun_app$ (ldropn$a ?v0) ?v1)) (fun_app$ (ldropn$a ?v0) ?v2))) ))
(assert (= (fun_app$f (lstrict_prefix$ lNil$a) lNil$a) false))
(assert (= (fun_app$g (lstrict_prefix$b lNil$b) lNil$b) false))
(assert (= (fun_app$b (lstrict_prefix$a lNil$) lNil$) false))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (= (lzip$ ?v0 ?v1) lNil$c) (or (= ?v0 lNil$) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (= (lzip$d ?v0 ?v1) lNil$f) (or (= ?v0 lNil$) (= ?v1 lNil$b))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (= (lzip$a ?v0 ?v1) lNil$d) (or (= ?v0 lNil$a) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= (lzip$b ?v0 ?v1) lNil$e) (or (= ?v0 lNil$a) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (= (= (lzip$e ?v0 ?v1) lNil$g) (or (= ?v0 lNil$a) (= ?v1 lNil$b))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (= (= (lzip$f ?v0 ?v1) lNil$h) (or (= ?v0 lNil$b) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (= (= (lzip$g ?v0 ?v1) lNil$i) (or (= ?v0 lNil$b) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (= (lzip$h ?v0 ?v1) lNil$j) (or (= ?v0 lNil$b) (= ?v1 lNil$b))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$h (lzip$c ?v0) ?v1) lNil$a) (or (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (ltl$a (fun_app$d (ldropn$ ?v0) ?v1)) (fun_app$d (ldropn$ ?v0) (ltl$a ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist_llist$)) (= (ltl$b (fun_app$e (ldropn$b ?v0) ?v1)) (fun_app$e (ldropn$b ?v0) (ltl$b ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (ldropn$a ?v0) ?v1)) (fun_app$ (ldropn$a ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$a)) :pattern ((lnull$a ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (lnull$b ?v0) (= ?v0 lNil$b)) :pattern ((lnull$b ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b lnull$ ?v0) (= ?v0 lNil$)) :pattern ((fun_app$b lnull$ ?v0)))))
(assert (= (ltl$a lNil$a) lNil$a))
(assert (= (ltl$b lNil$b) lNil$b))
(assert (= (ltl$ lNil$) lNil$))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$b lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (fun_app$b lnull$ ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (fun_app$b lnull$ ?v0) (lnull$b ?v1)) false) (=> (and (not (fun_app$b lnull$ ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (fun_app$b lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (fun_app$b lnull$ ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$a ?v1)) ) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$a ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$c ?v1 ?v0) (lnull$b ?v1)) ) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$c ?v1 ?v0) (lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$b lnull$ ?v0) false) (=> (not (fun_app$b lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$b (lstrict_prefix$a ?v3) ?v2) (fun_app$b ?v0 ?v3)) ) (fun_app$b ?v0 ?v2)) ) (fun_app$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$a) (lnull$a ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (= ?v0 lNil$b) (lnull$b ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$b lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (! (=> (or (fun_app$b lnull$ ?v0) (lnull$a ?v1)) (= (lzip$ ?v0 ?v1) lNil$c)) :pattern ((lzip$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (=> (or (fun_app$b lnull$ ?v0) (lnull$b ?v1)) (= (lzip$d ?v0 ?v1) lNil$f)) :pattern ((lzip$d ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (! (=> (or (lnull$a ?v0) (fun_app$b lnull$ ?v1)) (= (lzip$a ?v0 ?v1) lNil$d)) :pattern ((lzip$a ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (or (lnull$a ?v0) (lnull$a ?v1)) (= (lzip$b ?v0 ?v1) lNil$e)) :pattern ((lzip$b ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (! (=> (or (lnull$a ?v0) (lnull$b ?v1)) (= (lzip$e ?v0 ?v1) lNil$g)) :pattern ((lzip$e ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (! (=> (or (lnull$b ?v0) (fun_app$b lnull$ ?v1)) (= (lzip$f ?v0 ?v1) lNil$h)) :pattern ((lzip$f ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (! (=> (or (lnull$b ?v0) (lnull$a ?v1)) (= (lzip$g ?v0 ?v1) lNil$i)) :pattern ((lzip$g ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (or (lnull$b ?v0) (lnull$b ?v1)) (= (lzip$h ?v0 ?v1) lNil$j)) :pattern ((lzip$h ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (or (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (= (fun_app$h (lzip$c ?v0) ?v1) lNil$a)) :pattern ((fun_app$h (lzip$c ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (or (fun_app$b lnull$ ?v0) (lnull$a ?v1)) (lnull$c (lzip$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (or (fun_app$b lnull$ ?v0) (lnull$b ?v1)) (lnull$d (lzip$d ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (or (lnull$a ?v0) (fun_app$b lnull$ ?v1)) (lnull$e (lzip$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (or (lnull$a ?v0) (lnull$a ?v1)) (lnull$f (lzip$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (=> (or (lnull$a ?v0) (lnull$b ?v1)) (lnull$g (lzip$e ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (or (lnull$b ?v0) (fun_app$b lnull$ ?v1)) (lnull$h (lzip$f ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (=> (or (lnull$b ?v0) (lnull$a ?v1)) (lnull$i (lzip$g ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (lnull$b ?v0) (lnull$b ?v1)) (lnull$j (lzip$h ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (lnull$a (fun_app$h (lzip$c ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (lnull$a ?v1))) (= (ltl$c (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (lnull$b ?v1))) (= (ltl$f (lzip$d ?v0 ?v1)) (lzip$d (ltl$ ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (not (lnull$a ?v0)) (not (fun_app$b lnull$ ?v1))) (= (ltl$d (lzip$a ?v0 ?v1)) (lzip$a (ltl$a ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (ltl$e (lzip$b ?v0 ?v1)) (lzip$b (ltl$a ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$b ?v1))) (= (ltl$g (lzip$e ?v0 ?v1)) (lzip$e (ltl$a ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (lnull$b ?v0)) (not (fun_app$b lnull$ ?v1))) (= (ltl$h (lzip$f ?v0 ?v1)) (lzip$f (ltl$b ?v0) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$a ?v1))) (= (ltl$i (lzip$g ?v0 ?v1)) (lzip$g (ltl$b ?v0) (ltl$a ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) (= (ltl$j (lzip$h ?v0 ?v1)) (lzip$h (ltl$b ?v0) (ltl$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (= (ltl$a (fun_app$h (lzip$c ?v0) ?v1)) (fun_app$h (lzip$c (ltl$ ?v0)) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (lnull$a ?v1))) (not (lnull$c (lzip$ ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (lnull$b ?v1))) (not (lnull$d (lzip$d ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (not (lnull$a ?v0)) (not (fun_app$b lnull$ ?v1))) (not (lnull$e (lzip$a ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$f (lzip$b ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$b ?v1))) (not (lnull$g (lzip$e ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (lnull$b ?v0)) (not (fun_app$b lnull$ ?v1))) (not (lnull$h (lzip$f ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$a ?v1))) (not (lnull$i (lzip$g ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) (not (lnull$j (lzip$h ?v0 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (not (lnull$a (fun_app$h (lzip$c ?v0) ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (and (lnull$a ?v0) (lnull$a ?v1)) (= (fun_app$d (lmirror_aux$a ?v1) ?v0) lNil$a)) :pattern ((fun_app$d (lmirror_aux$a ?v1) ?v0)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (and (lnull$b ?v0) (lnull$b ?v1)) (= (fun_app$e (lmirror_aux$b ?v1) ?v0) lNil$b)) :pattern ((fun_app$e (lmirror_aux$b ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (= (fun_app$ (lmirror_aux$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (lmirror_aux$ ?v1) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 Nat$)) (! (=> (lnull$a ?v0) (= (fun_app$d (ldropn$ ?v1) ?v0) lNil$a)) :pattern ((fun_app$d (ldropn$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (=> (lnull$b ?v0) (= (fun_app$e (ldropn$b ?v1) ?v0) lNil$b)) :pattern ((fun_app$e (ldropn$b ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 Nat$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (ldropn$a ?v1) ?v0) lNil$)) :pattern ((fun_app$ (ldropn$a ?v1) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$a)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$b)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 A_a_prod_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0))) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (lnull$b ?v0) (lnull$b (ltl$b ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b lnull$ (ltl$ ?v0))) ))
(assert (lnull$a lNil$a))
(assert (lnull$b lNil$b))
(assert (fun_app$b lnull$ lNil$))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (fun_app$d (lmirror_aux$a ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (lnull$b ?v0) (lnull$b ?v1)) (lnull$b (fun_app$e (lmirror_aux$b ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$a ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (fun_app$d (lmirror_aux$a ?v1) ?v0)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) (not (lnull$b (fun_app$e (lmirror_aux$b ?v1) ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (not (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v1) ?v0)))) ))
(assert (= lmirror$ (lmirror_aux$a lNil$a)))
(assert (= lmirror$a (lmirror_aux$b lNil$b)))
(assert (= lmirror$b (lmirror_aux$ lNil$)))
(assert (forall ((?v0 A_a_prod$)) (! (= (fun_app$f (lmember$ ?v0) lNil$a) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$g (lmember$a ?v0) lNil$b) false) :pattern ((lmember$a ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$b (lmember$b ?v0) lNil$) false) :pattern ((lmember$b ?v0)))))
(assert (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (=> (and (fun_app$g ?v0 lNil$b) (and (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (lfinite$b ?v3) (fun_app$g ?v0 ?v3)) (fun_app$g ?v0 (lCons$b ?v2 ?v3))) ) (=> (forall ((?v2 A_llist_llist$)) (=> (fun_app$g (lstrict_prefix$b ?v2) ?v1) (fun_app$g ?v0 ?v2)) ) (fun_app$g ?v0 ?v1)))) (fun_app$g ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod_llist_bool_fun$) (?v1 A_a_prod_llist$)) (=> (and (fun_app$f ?v0 lNil$a) (and (forall ((?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (=> (and (lfinite$a ?v3) (fun_app$f ?v0 ?v3)) (fun_app$f ?v0 (lCons$a ?v2 ?v3))) ) (=> (forall ((?v2 A_a_prod_llist$)) (=> (fun_app$f (lstrict_prefix$ ?v2) ?v1) (fun_app$f ?v0 ?v2)) ) (fun_app$f ?v0 ?v1)))) (fun_app$f ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 lNil$) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$ ?v3) (fun_app$b ?v0 ?v3)) (fun_app$b ?v0 (lCons$ ?v2 ?v3))) ) (=> (forall ((?v2 A_llist$)) (=> (fun_app$b (lstrict_prefix$a ?v2) ?v1) (fun_app$b ?v0 ?v2)) ) (fun_app$b ?v0 ?v1)))) (fun_app$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (fun_app$f (lstrict_prefix$ ?v0) (fun_app$d (lappend$ ?v0) ?v1)) (and (lfinite$a ?v0) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (fun_app$g (lstrict_prefix$b ?v0) (fun_app$e (lappend$a ?v0) ?v1)) (and (lfinite$b ?v0) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b (lstrict_prefix$a ?v0) (fun_app$ (lappend$b ?v0) ?v1)) (and (lfinite$ ?v0) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_set$)) (! (= (fun_app$i (gen_lset$ ?v0) lNil$a) ?v0) :pattern ((gen_lset$ ?v0)))))
(assert (forall ((?v0 A_llist_set$)) (! (= (fun_app$j (gen_lset$a ?v0) lNil$b) ?v0) :pattern ((gen_lset$a ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$k (gen_lset$b ?v0) lNil$) ?v0) :pattern ((gen_lset$b ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$g (lstrict_prefix$b lNil$b) (lCons$b ?v0 ?v1)) true) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (fun_app$f (lstrict_prefix$ lNil$a) (lCons$a ?v0 ?v1)) true) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$a lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$g (lstrict_prefix$b (lCons$b ?v0 ?v1)) lNil$b) false) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (fun_app$f (lstrict_prefix$ (lCons$a ?v0 ?v1)) lNil$a) false) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$a (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (ltl$ (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (ite (fun_app$b ?v0 ?v3) lNil$ (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$f (finite_lprefix$ ?v0) lNil$a) (= ?v0 lNil$a)) :pattern ((finite_lprefix$ ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$g (finite_lprefix$a ?v0) lNil$b) (= ?v0 lNil$b)) :pattern ((finite_lprefix$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$b ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$b ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$f (finite_lprefix$ lNil$a) ?v0) true) :pattern ((fun_app$f (finite_lprefix$ lNil$a) ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$g (finite_lprefix$a lNil$b) ?v0) true) :pattern ((fun_app$g (finite_lprefix$a lNil$b) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$b lNil$) ?v0) true) :pattern ((fun_app$b (finite_lprefix$b lNil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$b (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$b ?v1) ?v2))) :pattern ((fun_app$ (lappend$b (lCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (! (= (fun_app$d (lappend$ (lCons$a ?v0 ?v1)) ?v2) (lCons$a ?v0 (fun_app$d (lappend$ ?v1) ?v2))) :pattern ((fun_app$d (lappend$ (lCons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (fun_app$d (lappend$ ?v0) ?v1)) (and (lnull$a ?v0) (lnull$a ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lnull$b (fun_app$e (lappend$a ?v0) ?v1)) (and (lnull$b ?v0) (lnull$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1)) (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (fun_app$d (lappend$ ?v0) ?v1))) (or (not (lnull$a ?v0)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (not (lnull$b (fun_app$e (lappend$a ?v0) ?v1))) (or (not (lnull$b ?v0)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1))) (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$d (lappend$ lNil$a) ?v0) ?v0) :pattern ((fun_app$d (lappend$ lNil$a) ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$e (lappend$a lNil$b) ?v0) ?v0) :pattern ((fun_app$e (lappend$a lNil$b) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$b lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$b lNil$) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$d (lappend$ ?v0) lNil$a) ?v0) :pattern ((lappend$ ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$e (lappend$a ?v0) lNil$b) ?v0) :pattern ((lappend$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$b ?v0) lNil$) ?v0) :pattern ((lappend$b ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$a (fun_app$d (lappend$ ?v0) ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$b ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (! (= (fun_app$d (lmirror_aux$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v1 (fun_app$d (lmirror_aux$a (lCons$a ?v1 ?v0)) ?v2))) :pattern ((fun_app$d (lmirror_aux$a ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v1 (fun_app$ (lmirror_aux$ (lCons$ ?v1 ?v0)) ?v2))) :pattern ((fun_app$ (lmirror_aux$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$) (?v4 A$) (?v5 A_llist$)) (= (= (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) ?v3) (lCons$ ?v4 ?v5)) (and (not (fun_app$b ?v0 ?v3)) (and (= ?v4 (fun_app$a ?v1 ?v3)) (= ?v5 (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3)))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (fun_app$b ?v0 ?v3)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) ?v3))) (not (fun_app$b ?v0 ?v3))) ))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (! (= (fun_app$f (lstrict_prefix$ (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$f (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$f (lstrict_prefix$ (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (lstrict_prefix$a (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (lstrict_prefix$a ?v1) ?v3))) :pattern ((fun_app$b (lstrict_prefix$a (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (ltl$a (fun_app$d (lappend$ ?v0) ?v1)) (ite (lnull$a ?v0) (ltl$a ?v1) (fun_app$d (lappend$ (ltl$a ?v0)) ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (ltl$b (fun_app$e (lappend$a ?v0) ?v1)) (ite (lnull$b ?v0) (ltl$b ?v1) (fun_app$e (lappend$a (ltl$b ?v0)) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lappend$b ?v0) ?v1)) (ite (fun_app$b lnull$ ?v0) (ltl$ ?v1) (fun_app$ (lappend$b (ltl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$b (fun_app$ (lappend$b ?v0) ?v1)) ?v2) (fun_app$ (lappend$b ?v0) (fun_app$ (lappend$b ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (= (fun_app$e (lappend$a (fun_app$e (lappend$a ?v0) (lCons$b ?v1 lNil$b))) ?v2) (fun_app$e (lappend$a ?v0) (lCons$b ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (fun_app$d (lappend$ (fun_app$d (lappend$ ?v0) (lCons$a ?v1 lNil$a))) ?v2) (fun_app$d (lappend$ ?v0) (lCons$a ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lappend$b (fun_app$ (lappend$b ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$ (lappend$b ?v0) (lCons$ ?v1 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (lmember$b ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$b (lmember$b ?v0) ?v2))) :pattern ((fun_app$b (lmember$b ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (! (= (fun_app$f (lmember$ ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$f (lmember$ ?v0) ?v2))) :pattern ((fun_app$f (lmember$ ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$b ?v0 ?v1)) (= (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v2) ?v3) ?v1) (lCons$ (fun_app$a ?v2 ?v1) (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v2) ?v3) (fun_app$ ?v3 ?v1))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$b ?v0 ?v3) lNil$ (lCons$ (fun_app$a ?v1 ?v3) (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3))))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (= (fun_app$g (finite_lprefix$a ?v0) (lCons$b ?v1 ?v2)) (or (= ?v0 lNil$b) (exists ((?v3 A_llist_llist$)) (and (= ?v0 (lCons$b ?v1 ?v3)) (fun_app$g (finite_lprefix$a ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (fun_app$f (finite_lprefix$ ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 lNil$a) (exists ((?v3 A_a_prod_llist$)) (and (= ?v0 (lCons$a ?v1 ?v3)) (fun_app$f (finite_lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (finite_lprefix$b ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$b (finite_lprefix$b ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (=> (and (lfinite$b ?v0) (and (fun_app$g ?v1 lNil$b) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (lfinite$b ?v3) (fun_app$g ?v1 ?v3)) (fun_app$g ?v1 (fun_app$e (lappend$a ?v3) (lCons$b ?v2 lNil$b)))) ))) (fun_app$g ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist_bool_fun$)) (=> (and (lfinite$a ?v0) (and (fun_app$f ?v1 lNil$a) (forall ((?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (=> (and (lfinite$a ?v3) (fun_app$f ?v1 ?v3)) (fun_app$f ?v1 (fun_app$d (lappend$ ?v3) (lCons$a ?v2 lNil$a)))) ))) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (fun_app$b ?v1 lNil$) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$ ?v3) (fun_app$b ?v1 ?v3)) (fun_app$b ?v1 (fun_app$ (lappend$b ?v3) (lCons$ ?v2 lNil$)))) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (lnull$a ?v0) (= (fun_app$d (lappend$ ?v0) ?v1) ?v1)) :pattern ((fun_app$d (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (lnull$b ?v0) (= (fun_app$e (lappend$a ?v0) ?v1) ?v1)) :pattern ((fun_app$e (lappend$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (lappend$b ?v0) ?v1) ?v1)) :pattern ((fun_app$ (lappend$b ?v0) ?v1)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (lnull$a ?v0) (= (fun_app$d (lappend$ ?v1) ?v0) ?v1)) :pattern ((fun_app$d (lappend$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (lnull$b ?v0) (= (fun_app$e (lappend$a ?v1) ?v0) ?v1)) :pattern ((fun_app$e (lappend$a ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (lappend$b ?v1) ?v0) ?v1)) :pattern ((fun_app$ (lappend$b ?v1) ?v0)))))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (fun_app$d (lappend$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (lnull$b ?v0) (lnull$b ?v1)) (lnull$b (fun_app$e (lappend$a ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (fun_app$d (lappend$ ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) (not (lnull$b (fun_app$e (lappend$a ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (not (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1)))) ))
(assert (= (fun_app$d (lappend$ lNil$a) lNil$a) lNil$a))
(assert (= (fun_app$e (lappend$a lNil$b) lNil$b) lNil$b))
(assert (= (fun_app$ (lappend$b lNil$) lNil$) lNil$))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= (fun_app$d (lappend$ ?v0) ?v1) lNil$a) (and (= ?v0 lNil$a) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (= (fun_app$e (lappend$a ?v0) ?v1) lNil$b) (and (= ?v0 lNil$b) (= ?v1 lNil$b))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$b ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= lNil$a (fun_app$d (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$a) (= ?v1 lNil$a))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (= lNil$b (fun_app$e (lappend$a ?v0) ?v1)) (and (= ?v0 lNil$b) (= ?v1 lNil$b))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$b ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (lappend$b ?v0) ?v1) ?v0)) :pattern ((fun_app$ (lappend$b ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$b lnull$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$b lnull$ ?v0))) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$b lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (= (fun_app$ (lappend$b ?v0) ?v1) lNil$)) :pattern ((fun_app$ (lappend$b ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (= (fun_app$ (lappend$b (ltl$ ?v0)) ?v1) (ltl$ (fun_app$ (lappend$b ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) ))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (lfinite$ ?v0) (= (llast$ (fun_app$ (lappend$b ?v0) (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lmirror_aux$ ?v0) ?v1)) (ite (fun_app$b lnull$ ?v1) (ltl$ ?v0) (fun_app$ (lmirror_aux$ (lCons$ (lhd$ ?v1) ?v0)) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A$)) (! (= (llast$ (lCons$ ?v0 lNil$)) ?v0) :pattern ((uub$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$a ?v0 (lset$ ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v1 (fun_app$ (lappend$b ?v2) (lCons$ ?v0 ?v3))) (and (lfinite$ ?v2) (not (member$a ?v0 (lset$ ?v2))))) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$a ?v0 (lset$ ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v1 (fun_app$ (lappend$b ?v2) (lCons$ ?v0 ?v3))) (lfinite$ ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$ (fun_app$l (fun_app$m (unfold_llist$ lnull$) uuc$) uud$) ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$ (lappend$b ?v0) ?v1)) (ite (fun_app$b lnull$ ?v0) (lhd$ ?v1) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (member$a (lhd$ ?v0) (lset$ ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (=> (not (fun_app$b lnull$ ?v3)) (fun_app$b (fun_app$n ?v2 (lhd$ ?v3)) ?v3)) ) (forall ((?v3 A_llist$) (?v4 A$)) (=> (and (not (fun_app$b lnull$ ?v3)) (and (member$a ?v4 (lset$ (ltl$ ?v3))) (fun_app$b (fun_app$n ?v2 ?v4) (ltl$ ?v3)))) (fun_app$b (fun_app$n ?v2 ?v4) ?v3)) ))) (fun_app$b (fun_app$n ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$b lnull$ ?v0) (not (fun_app$c ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$c ?v1 (lhd$ ?v0))) false)) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$a ?v0 (lset$ (ltl$ ?v1))) (member$a ?v0 (lset$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$o ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$o ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$o ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$o ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$o ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$b (fun_app$o ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (fun_app$b lnull$ ?v0)) (member$a ?v1 (lset$ (ltl$ ?v0)))) (member$a ?v1 (lset$ ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (member$a ?v0 (lset$ (fun_app$ (lappend$b ?v1) ?v2))) (or (member$a ?v0 (lset$ ?v1)) (and (lfinite$ ?v1) (member$a ?v0 (lset$ ?v2))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$ (lmirror_aux$ ?v0) ?v1)) (ite (fun_app$b lnull$ ?v1) (lhd$ ?v0) (lhd$ ?v1))) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$b (pred_llist$ ?v0) lNil$) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (llast$ (lCons$ ?v0 ?v1)) (ite (fun_app$b lnull$ ?v1) ?v0 (llast$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$h (lzip$c ?v0) ?v1) (ite (or (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) lNil$a (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (fun_app$h (lzip$c (ltl$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$o (llexord$ ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (and (lfinite$ ?v3) (and (= ?v1 (fun_app$ (lappend$b ?v3) ?v4)) (and (= ?v2 (fun_app$ (lappend$b ?v3) (lCons$ ?v5 ?v6))) (or (= ?v4 lNil$) (fun_app$c (fun_app$p ?v0 (lhd$ ?v4)) ?v5))))) ))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (ltakeWhile$ ?v0) ?v1) (ite (or (fun_app$b lnull$ ?v1) (not (fun_app$c ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$ (ltakeWhile$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ltakeWhile$ ?v0) lNil$) lNil$) :pattern ((ltakeWhile$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$b (fun_app$o (llexord$ ?v1) ?v2) ?v0) (fun_app$b lnull$ ?v2))) :pattern ((fun_app$b (fun_app$o (llexord$ ?v1) ?v2) ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$o (llexord$ ?v0) lNil$) ?v1) true) :pattern ((fun_app$b (fun_app$o (llexord$ ?v0) lNil$) ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (ltakeWhile$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$c ?v0 ?v1) (lCons$ ?v1 (fun_app$ (ltakeWhile$ ?v0) ?v2)) lNil$)) :pattern ((fun_app$ (ltakeWhile$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1))) (and (not (fun_app$b lnull$ ?v1)) (fun_app$c ?v0 (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (fun_app$b lnull$ ?v1) (not (fun_app$c ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (=> (not (fun_app$b lnull$ ?v1)) (not (fun_app$c ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b (fun_app$o (llexord$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$b (fun_app$o (llexord$ ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$c ?v1 (lhd$ ?v0))) (not (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v1) ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$c ?v1 (lhd$ ?v0))) (= (lhd$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$b lnull$ ?v0) (not (fun_app$c ?v1 (lhd$ ?v0)))) (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ (ltakeWhile$ ?v0) ?v1) lNil$) (=> (not (= ?v1 lNil$)) (not (fun_app$c ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (lfinite$ ?v1) (exists ((?v2 A$)) (and (member$a ?v2 (lset$ ?v1)) (not (fun_app$c ?v0 ?v2))) ))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$o ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$o ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$b (fun_app$o ?v0 ?v6) ?v7) (fun_app$b (fun_app$o (llexord$ ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$c (fun_app$p ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$b (fun_app$o (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$o (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$b (fun_app$o (llexord$ ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$c (fun_app$p ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$o (llexord$ ?v0) (lCons$ ?v1 ?v2)) lNil$) false) :pattern ((fun_app$o (llexord$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$o (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$b (fun_app$o (llexord$ ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$c (fun_app$p ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (or (fun_app$b lnull$ ?v0) (not (fun_app$c ?v1 (lhd$ ?v0)))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (ltakeWhile$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$c ?v1 (lhd$ ?v0))) (= (ltl$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (ite (fun_app$c ?v0 (lhd$ ?v1)) (fun_app$ (ltakeWhile$ ?v0) (ltl$ ?v1)) lNil$)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (= (lhd$a (fun_app$h (lzip$c ?v0) ?v1)) (pair$ (lhd$ ?v0) (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$o ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (and (fun_app$b (fun_app$o ?v0 ?v4) ?v5) (not (fun_app$b lnull$ ?v4))) (and (not (fun_app$b lnull$ ?v5)) (=> (not (fun_app$b lnull$ ?v5)) (or (fun_app$c (fun_app$p ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (and (= (lhd$ ?v4) (lhd$ ?v5)) (or (fun_app$b (fun_app$o ?v0 (ltl$ ?v4)) (ltl$ ?v5)) (fun_app$b (fun_app$o (llexord$ ?v3) (ltl$ ?v4)) (ltl$ ?v5)))))))) )) (fun_app$b (fun_app$o (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$b (fun_app$o (llexord$ ?v0) (fun_app$ (lappend$b ?v1) ?v2)) (fun_app$ (lappend$b ?v1) ?v3)) (and (lfinite$ ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 (lset$ ?v1)) (not (fun_app$c (fun_app$p ?v0 ?v4) ?v4))) ))) (fun_app$b (fun_app$o (llexord$ ?v0) ?v2) ?v3)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (lfinite$ ?v0) (forall ((?v4 A$)) (=> (member$a ?v4 (lset$ ?v0)) (not (fun_app$c (fun_app$p ?v1 ?v4) ?v4))) )) (= (fun_app$b (fun_app$o (llexord$ ?v1) (fun_app$ (lappend$b ?v0) ?v2)) (fun_app$ (lappend$b ?v0) ?v3)) (fun_app$b (fun_app$o (llexord$ ?v1) ?v2) ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$c ?v1 (lhd$ ?v0))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (= (fun_app$h (lzip$c ?v0) ?v1) (lCons$a (pair$ (lhd$ ?v0) (lhd$ ?v1)) (fun_app$h (lzip$c (ltl$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (ldistinct$ ?v0) (not (fun_app$b lnull$ ?v0))) (not (member$a (lhd$ ?v0) (lset$ (ltl$ ?v0))))) ))
(assert (= (ldistinct$ lNil$) true))
(assert (ldistinct$ lNil$))
(assert (forall ((?v0 A_llist$)) (=> (ldistinct$ ?v0) (ldistinct$ (ltl$ ?v0))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (fun_app$b ?v0 ?v2) (or (= ?v2 lNil$) (exists ((?v3 A$) (?v4 A_llist$)) (and (= ?v2 (lCons$ ?v3 ?v4)) (and (not (member$a ?v3 (lset$ ?v4))) (or (fun_app$b ?v0 ?v4) (ldistinct$ ?v4)))) ))) )) (ldistinct$ ?v1)) ))
(assert (forall ((?v0 A_llist$)) (=> (and (ldistinct$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (member$a ?v1 (lset$ ?v2))) (ldistinct$ ?v2))) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (= (ldistinct$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A$) (?v2 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (member$a ?v1 (lset$ ?v2))) (ldistinct$ ?v2))) ))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (and (fun_app$b ?v0 ?v2) (not (fun_app$b lnull$ ?v2))) (and (not (member$a (lhd$ ?v2) (lset$ (ltl$ ?v2)))) (or (fun_app$b ?v0 (ltl$ ?v2)) (ldistinct$ (ltl$ ?v2))))) )) (ldistinct$ ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llast$ (fun_app$ (lappend$b ?v0) ?v1)) (ite (fun_app$b lnull$ ?v1) (llast$ ?v0) (ite (lfinite$ ?v0) (llast$ ?v1) undefined$))) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (not (lnull$b ?v0)) (not (fun_app$b lnull$ (lhd$b ?v0)))) (= (ltl$ (lconcat$ ?v0)) (fun_app$ (lappend$b (ltl$ (lhd$b ?v0))) (lconcat$ (ltl$b ?v0))))) ))
(assert (= (lconcat$ lNil$b) lNil$))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (not (lnull$b ?v0)) (not (fun_app$b lnull$ (lhd$b ?v0)))) (= (lhd$ (lconcat$ ?v0)) (lhd$ (lhd$b ?v0)))) ))
(assert (forall ((?v0 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (llast$ ?v0) undefined$)) :pattern ((llast$ ?v0)))))
(assert (= (llast$ lNil$) undefined$))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (fun_app$ (lfilter$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A_llist$) (?v5 A_llist$)) (and (= ?v1 (fun_app$ (lappend$b ?v4) (lCons$ ?v2 ?v5))) (and (lfinite$ ?v4) (and (forall ((?v6 A$)) (=> (member$a ?v6 (lset$ ?v4)) (not (fun_app$c ?v0 ?v6))) ) (and (fun_app$c ?v0 ?v2) (= ?v3 (fun_app$ (lfilter$ ?v0) ?v5)))))) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lfinite$ ?v0) (= (lset$ (fun_app$ (lappend$b ?v0) ?v1)) (sup$ (lset$ ?v0) (lset$ ?v1)))) ))
(assert (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lfilter$ ?v0) ?v1)) (forall ((?v2 A$)) (=> (member$a ?v2 (lset$ ?v1)) (not (fun_app$c ?v0 ?v2))) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$a ?v2 (lset$ ?v0)) (not (fun_app$c ?v1 ?v2))) ) (= (fun_app$ (lfilter$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (lfilter$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (lfinite$ ?v0) (= (fun_app$ (lfilter$ ?v1) (fun_app$ (lappend$b ?v0) ?v2)) (fun_app$ (lappend$b (fun_app$ (lfilter$ ?v1) ?v0)) (fun_app$ (lfilter$ ?v1) ?v2)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ (lfilter$ ?v0) ?v1) lNil$) (forall ((?v2 A$)) (=> (member$a ?v2 (lset$ ?v1)) (not (fun_app$c ?v0 ?v2))) )) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (= (fun_app$ (lfilter$ ?v0) ?v1) (fun_app$ (lappend$b ?v2) ?v3)) (lfinite$ ?v2)) (exists ((?v4 A_llist$) (?v5 A_llist$)) (and (= ?v1 (fun_app$ (lappend$b ?v4) ?v5)) (and (lfinite$ ?v4) (and (= ?v2 (fun_app$ (lfilter$ ?v0) ?v4)) (= ?v3 (fun_app$ (lfilter$ ?v0) ?v5))))) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (lfinite$ ?v0) (lfinite$ (fun_app$ (lfilter$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lset$ (fun_app$ (lappend$b ?v0) ?v1)) (ite (lfinite$ ?v0) (sup$ (lset$ ?v0) (lset$ ?v1)) (lset$ ?v0))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (and (fun_app$b ?v0 ?v3) (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ (ltl$ ?v3))))) (and (fun_app$c (fun_app$p ?v2 (lhd$ ?v3)) (lhd$ (ltl$ ?v3))) (or (fun_app$b ?v0 (ltl$ ?v3)) (fun_app$b (lsorted$ ?v2) (ltl$ ?v3))))) )) (fun_app$b (lsorted$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (and (fun_app$b (lsorted$ ?v0) ?v1) (and (not (fun_app$b lnull$ ?v1)) (not (fun_app$b lnull$ (ltl$ ?v1))))) (fun_app$c (fun_app$p ?v0 (lhd$ ?v1)) (lhd$ (ltl$ ?v1)))) ))
(check-sat)
(exit)

