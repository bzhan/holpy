{
    "content": [
        {
            "depth": 0,
            "name": "Programs",
            "ty": "header"
        },
        {
            "args": [
                "a"
            ],
            "constrs": [
                {
                    "args": [
                        "f"
                    ],
                    "name": "Basic",
                    "type": "('a => 'a) => 'a com"
                },
                {
                    "args": [
                        "c1",
                        "c2"
                    ],
                    "name": "Seq",
                    "type": "'a com => 'a com => 'a com"
                },
                {
                    "args": [
                        "b",
                        "c1",
                        "c2"
                    ],
                    "name": "Cond",
                    "type": "('a => bool) => 'a com => 'a com => 'a com"
                },
                {
                    "args": [
                        "b",
                        "I",
                        "c"
                    ],
                    "name": "While",
                    "type": "('a => bool) => ('a => bool) => 'a com => 'a com"
                }
            ],
            "name": "com",
            "ty": "type.ind"
        },
        {
            "name": "Sem",
            "rules": [
                {
                    "name": "Sem_basic",
                    "prop": "Sem (Basic f) s (f s)",
                    "vars": {
                        "f": "'a => 'a",
                        "s": "'a"
                    }
                },
                {
                    "name": "Sem_seq",
                    "prop": "Sem c1 s s3 --> Sem c2 s3 s2 --> Sem (Seq c1 c2) s s2",
                    "vars": {
                        "c1": "'a com",
                        "c2": "'a com",
                        "s": "'a",
                        "s2": "'a",
                        "s3": "'a"
                    }
                },
                {
                    "name": "Sem_if1",
                    "prop": "b s --> Sem c1 s s2 --> Sem (Cond b c1 c2) s s2",
                    "vars": {
                        "b": "'a => bool",
                        "c1": "'a com",
                        "c2": "'a com",
                        "s": "'a",
                        "s2": "'a"
                    }
                },
                {
                    "name": "Sem_if2",
                    "prop": "~ b s --> Sem c2 s s2 --> Sem (Cond b c1 c2) s s2",
                    "vars": {
                        "b": "'a => bool",
                        "c1": "'a com",
                        "c2": "'a com",
                        "s": "'a",
                        "s2": "'a"
                    }
                },
                {
                    "name": "Sem_while_skip",
                    "prop": "~ b s --> Sem (While b I c) s s",
                    "vars": {
                        "I": "'a => bool",
                        "b": "'a => bool",
                        "c": "'a com",
                        "s": "'a"
                    }
                },
                {
                    "name": "Sem_while_loop",
                    "prop": "b s --> Sem c s s3 --> Sem (While b I c) s3 s2 --> Sem (While b I c) s s2",
                    "vars": {
                        "I": "'a => bool",
                        "b": "'a => bool",
                        "c": "'a com",
                        "s": "'a",
                        "s2": "'a",
                        "s3": "'a"
                    }
                }
            ],
            "ty": "def.pred",
            "type": "'a com => 'a => 'a => bool"
        },
        {
            "name": "Skip",
            "prop": "Skip = Basic (%f::'a. f)",
            "ty": "def",
            "type": "'a com",
            "vars": {}
        },
        {
            "name": "Sem_Skip",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem_basic, {a: 'a}, {f: λf::'a. f, s: s}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Sem (Basic (λf. f)) s s"
                },
                {
                    "args": "Skip_def, Sem Skip s s",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem Skip s s"
                }
            ],
            "prop": "Sem Skip s s",
            "ty": "thm",
            "vars": {
                "s": "'a"
            }
        },
        {
            "name": "Assign",
            "prop": "Assign a b = Basic (λf. (f)(a := b f))",
            "ty": "def",
            "type": "'a => (('a => 'b) => 'b) => ('a => 'b) com",
            "vars": {
                "a": "'a",
                "b": "('a => 'b) => 'b"
            }
        },
        {
            "name": "Sem_Assign",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem_basic, {a: 'a ⇒ 'b}, {f: λf. (f)(a := b f), s: s}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Sem (Basic (λf. (f)(a := b f))) s ((s)(a := b s))"
                },
                {
                    "args": "Assign_def, Sem (Assign a b) s ((s)(a := b s))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem (Assign a b) s ((s)(a := b s))"
                }
            ],
            "prop": "Sem (Assign a b) s (fun_upd s a (b s))",
            "ty": "thm",
            "vars": {
                "a": "'a",
                "b": "('a => 'b) => 'b",
                "s": "'a => 'b"
            }
        },
        {
            "name": "eval_Sem",
            "ty": "macro"
        },
        {
            "name": "P1",
            "prop": "P1 = Seq (Assign 0 (%s. 1)) (Assign 1 (%s. 2))",
            "ty": "def",
            "type": "(nat => nat) com",
            "vars": {}
        },
        {
            "name": "P1_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (Seq (Assign 0 (λs. 1)) (Assign 1 (λs. 2))) (λx. 0) ((λx. 0)(0 := 1, 1 := 2))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "⊢ Sem (Seq (Assign 0 (λs. 1)) (Assign 1 (λs. 2))) (λx. 0) ((λx. 0)(0 := 1, 1 := 2))"
                },
                {
                    "args": "P1_def, Sem P1 (λx. 0) ((λx. 0)(0 := 1, 1 := 2))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem P1 (λx. 0) ((λx. 0)(0 := 1, 1 := 2))"
                }
            ],
            "prop": "Sem P1 (%x. 0) (fun_upd (fun_upd (%x. 0) 0 1) 1 2)",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "P2",
            "prop": "P2 = Seq (Assign 0 (%s. s 0 + 1)) (Assign 0 (%s. s 0 + 1))",
            "ty": "def",
            "type": "(nat => nat) com",
            "vars": {}
        },
        {
            "name": "P2_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (Seq (Assign 0 (λs. s 0 + 1)) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 2))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "⊢ Sem (Seq (Assign 0 (λs. s 0 + 1)) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 2))"
                },
                {
                    "args": "P2_def, Sem P2 (λx. 0) ((λx. 0)(0 := 2))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem P2 (λx. 0) ((λx. 0)(0 := 2))"
                }
            ],
            "prop": "Sem P2 (%x. 0) ((%x. 0)(0 := 2))",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "P3",
            "prop": "P3 = While (%s. ~(s 0 = 3)) (%s. true) (Assign 0 (%s. s 0 + 1))",
            "ty": "def",
            "type": "(nat => nat) com",
            "vars": {}
        },
        {
            "name": "P3_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (While (λs. ¬s 0 = 3) (λs. true) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 3))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "⊢ Sem (While (λs. ¬s 0 = 3) (λs. true) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 3))"
                },
                {
                    "args": "P3_def, Sem P3 (λx. 0) ((λx. 0)(0 := 3))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem P3 (λx. 0) ((λx. 0)(0 := 3))"
                }
            ],
            "prop": "Sem P3 (%x. 0) ((%x. 0)(0 := 3))",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "Entail",
            "prop": "Entail P Q = (!s. P s --> Q s)",
            "ty": "def",
            "type": "('a => bool) => ('a => bool) => bool",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool"
            }
        },
        {
            "name": "Valid",
            "prop": "Valid P c Q = (!s. !s2. P s --> Sem c s s2 --> Q s2)",
            "ty": "def",
            "type": "('a => bool) => 'a com => ('a => bool) => bool",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool",
                "c": "'a com"
            }
        },
        {
            "name": "pre_rule",
            "prop": "Entail P Q --> Valid Q c R --> Valid P c R",
            "ty": "thm",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool",
                "R": "'a => bool",
                "c": "'a com"
            }
        },
        {
            "name": "assign_rule",
            "prop": "Valid (%s. P ((s)(a := b s))) (Assign a b) P",
            "ty": "thm",
            "vars": {
                "P": "('a => 'b) => bool",
                "a": "'a",
                "b": "('a => 'b) => 'b"
            }
        },
        {
            "name": "seq_rule",
            "prop": "Valid P c1 Q --> Valid Q c2 R --> Valid P (Seq c1 c2) R",
            "ty": "thm",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool",
                "R": "'a => bool",
                "c1": "'a com",
                "c2": "'a com"
            }
        },
        {
            "name": "while_rule",
            "prop": "Entail (%s. I s & ~b s) Q --> Valid (%s. I s & b s) c I --> Valid I (While b I c) Q",
            "ty": "thm",
            "vars": {
                "I": "'a => bool",
                "Q": "'a => bool",
                "b": "'a => bool",
                "c": "'a com"
            }
        },
        {
            "name": "z3",
            "ty": "macro"
        },
        {
            "name": "vcg",
            "ty": "macro"
        }
    ],
    "description": "Hoare logic",
    "imports": [
        "function"
    ],
    "name": "hoare"
}