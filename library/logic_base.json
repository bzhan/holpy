{
    "content": [
        {
            "ascii_op": "&",
            "name": "conj",
            "ty": "def.ax",
            "type": "bool ⇒ bool ⇒ bool",
            "unicode_op": "∧"
        },
        {
            "ascii_op": "|",
            "name": "disj",
            "ty": "def.ax",
            "type": "bool => bool => bool",
            "unicode_op": "∨"
        },
        {
            "ascii_op": "~",
            "name": "neg",
            "ty": "def.ax",
            "type": "bool => bool",
            "unicode_op": "¬"
        },
        {
            "name": "true",
            "ty": "def.ax",
            "type": "bool"
        },
        {
            "name": "false",
            "ty": "def.ax",
            "type": "bool"
        },
        {
            "name": "exists",
            "ty": "def.ax",
            "type": "('a => bool) => bool"
        },
        {
            "name": "IF",
            "ty": "def.ax",
            "type": "bool => 'a => 'a => 'a"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "conjI",
            "prop": "A ⟶ B ⟶ A ∧ B",
            "ty": "thm.ax",
            "vars": {
                "A": "bool",
                "B": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "conjD1",
            "prop": "A ∧ B ⟶ A",
            "ty": "thm.ax",
            "vars": {
                "A": "bool",
                "B": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "conjD2",
            "prop": "A & B --> B",
            "ty": "thm.ax",
            "vars": {
                "A": "bool",
                "B": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "disjI1",
            "prop": "A --> A | B",
            "ty": "thm.ax",
            "vars": {
                "A": "bool",
                "B": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "disjI2",
            "prop": "B --> A | B",
            "ty": "thm.ax",
            "vars": {
                "A": "bool",
                "B": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "disjE",
            "prop": "A | B --> (A --> C) --> (B --> C) --> C",
            "ty": "thm.ax",
            "vars": {
                "A": "bool",
                "B": "bool",
                "C": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "negI",
            "prop": "(A --> false) --> ~A",
            "ty": "thm.ax",
            "vars": {
                "A": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "negE",
            "prop": "~A --> A --> false",
            "ty": "thm.ax",
            "vars": {
                "A": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "trueI",
            "prop": "true",
            "ty": "thm.ax",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "falseE",
            "prop": "false --> A",
            "ty": "thm.ax",
            "vars": {
                "A": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "exI",
            "prop": "P a --> ?a. P a",
            "ty": "thm.ax",
            "vars": {
                "P": "'a => bool",
                "a": "'a"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "exE",
            "prop": "(?a. P a) --> (!a. P a --> C) --> C",
            "ty": "thm.ax",
            "vars": {
                "C": "bool",
                "P": "'a => bool",
                "a": "'a"
            }
        },
        {
            "name": "classical",
            "prop": "A | ~A",
            "ty": "thm.ax",
            "vars": {
                "A": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "extension",
            "prop": "(!x. f x = g x) --> f = g",
            "ty": "thm.ax",
            "vars": {
                "f": "'a => 'b",
                "g": "'a => 'b"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "if_P",
            "prop": "P --> (if P then x else y) = x",
            "ty": "thm.ax",
            "vars": {
                "P": "bool",
                "x": "'a",
                "y": "'a"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "if_not_P",
            "prop": "~P --> (if P then x else y) = y",
            "ty": "thm.ax",
            "vars": {
                "P": "bool",
                "x": "'a",
                "y": "'a"
            }
        },
        {
            "name": "beta_norm",
            "ty": "macro"
        },
        {
            "name": "intros",
            "ty": "macro"
        },
        {
            "name": "apply_theorem",
            "ty": "macro"
        },
        {
            "name": "apply_theorem_for",
            "ty": "macro"
        },
        {
            "name": "apply_fact",
            "ty": "macro"
        },
        {
            "name": "rewrite_goal",
            "ty": "macro"
        },
        {
            "name": "rewrite_back_goal",
            "ty": "macro"
        },
        {
            "name": "rewrite_goal_with_prev",
            "ty": "macro"
        },
        {
            "name": "rewrite_back_goal_with_prev",
            "ty": "macro"
        },
        {
            "name": "rewrite_fact",
            "ty": "macro"
        },
        {
            "name": "rewrite_fact_with_prev",
            "ty": "macro"
        },
        {
            "name": "trivial",
            "ty": "macro"
        },
        {
            "name": "cases",
            "ty": "method"
        },
        {
            "name": "apply_prev",
            "ty": "method"
        },
        {
            "name": "rewrite_goal_with_prev",
            "ty": "method"
        },
        {
            "name": "rewrite_goal",
            "ty": "method"
        },
        {
            "name": "rewrite_fact",
            "ty": "method"
        },
        {
            "name": "rewrite_fact_with_prev",
            "ty": "method"
        },
        {
            "name": "apply_forward_step",
            "ty": "method"
        },
        {
            "name": "apply_backward_step",
            "ty": "method"
        },
        {
            "name": "apply_fact",
            "ty": "method"
        },
        {
            "name": "introduction",
            "ty": "method"
        },
        {
            "name": "forall_elim",
            "ty": "method"
        },
        {
            "name": "inst_exists_goal",
            "ty": "method"
        },
        {
            "name": "induction",
            "ty": "method"
        },
        {
            "name": "new_var",
            "ty": "method"
        },
        {
            "name": "classical_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "A ⟶ C",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "A ⟶ C ⊢ A ⟶ C"
                },
                {
                    "args": "¬A ⟶ C",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬A ⟶ C ⊢ ¬A ⟶ C"
                },
                {
                    "args": "classical",
                    "id": "2",
                    "prevs": [],
                    "rule": "theorem",
                    "th": "⊢ A ∨ ¬A"
                },
                {
                    "args": "disjE",
                    "id": "3",
                    "prevs": [
                        "2",
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "A ⟶ C, ¬A ⟶ C ⊢ C"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (A ⟶ C) ⟶ (¬A ⟶ C) ⟶ C"
                }
            ],
            "prop": "(A --> C) --> (~A --> C) --> C",
            "ty": "thm",
            "vars": {
                "A": "bool",
                "C": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "negE_gen",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬A",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬A ⊢ ¬A"
                },
                {
                    "args": "A",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "A ⊢ A"
                },
                {
                    "args": "negE",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬A, A ⊢ false"
                },
                {
                    "args": "falseE, {}, {A: C}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬A, A ⊢ C"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬A ⟶ A ⟶ C"
                }
            ],
            "prop": "~A --> A --> C",
            "ty": "thm",
            "vars": {
                "A": "bool",
                "C": "bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "iffI",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "A ⟶ B",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "A ⟶ B ⊢ A ⟶ B"
                },
                {
                    "args": "B ⟶ A",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "B ⟶ A ⊢ B ⟶ A"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "equal_intr",
                    "th": "A ⟶ B, B ⟶ A ⊢ A = B"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (A ⟶ B) ⟶ (B ⟶ A) ⟶ A = B"
                }
            ],
            "prop": "(A --> B) --> (B --> A) --> (A = B)",
            "ty": "thm",
            "vars": {
                "A": "bool",
                "B": "bool"
            }
        }
    ],
    "description": "Foundation of higher-order logic",
    "imports": [],
    "name": "logic_base"
}