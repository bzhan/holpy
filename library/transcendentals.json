{
    "content": [
        {
            "name": "infsum",
            "ty": "def.ax",
            "type": "nat set ⇒ (nat ⇒ 'a) ⇒ 'a"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp",
            "prop": "exp x = infsum (from 0) (λn. x ^ n / of_nat (fact n))",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_add",
            "prop": "exp (x + y) = exp x * exp y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_0",
            "prop": "exp 0 = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_nz",
            "prop": "¬(exp x = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_add_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y + -x = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ x + y + -x = y"
                },
                {
                    "args": "exp (x + y + -x) = exp y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (x + y + -x) = exp y"
                },
                {
                    "args": "real_exp_add, exp (x + y) * exp (-x) = exp y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (x + y) * exp (-x) = exp y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (x + y) * exp (-x) = exp y"
                }
            ],
            "prop": "exp (x + y) * exp (-x) = exp y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal": "x + y + -x = y",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_neg_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_add_rinv, exp (x + -x) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x + -x) = 1"
                },
                {
                    "args": "real_exp_add, exp x * exp (-x) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x * exp (-x) = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x * exp (-x) = 1"
                }
            ],
            "prop": "exp x * exp (-x) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rinv"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_neg_mul, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp x * exp (-x) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = exp x * exp (-x)"
                },
                {
                    "args": "real_exp_nz, {}, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp x = 0)"
                },
                {
                    "args": "real_mul_linv, {}, {x: exp x}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ real_inverse (exp x) * exp x = 1"
                },
                {
                    "args": "real_mult_comm, {}, {x: exp (-x), y: (1::real)}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp (-x) * 1 = 1 * exp (-x)"
                },
                {
                    "args": "real_exp_neg_mul, exp (-x) * (exp x * exp (-x)) = 1 * exp (-x)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-x) * (exp x * exp (-x)) = 1 * exp (-x)"
                },
                {
                    "args": "real_mult_assoc, exp (-x) * exp x * exp (-x) = 1 * exp (-x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (-x) * exp x * exp (-x) = 1 * exp (-x)"
                },
                {
                    "args": "exp (-x) * exp x * exp (-x) = real_inverse (exp x) * exp x * exp (-x)",
                    "id": "7",
                    "prevs": [
                        "3",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (-x) * exp x * exp (-x) = real_inverse (exp x) * exp x * exp (-x)"
                },
                {
                    "args": "real_mult_assoc, exp (-x) * (exp x * exp (-x)) = real_inverse (exp x) * (exp x * exp (-x))",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-x) * (exp x * exp (-x)) = real_inverse (exp x) * (exp x * exp (-x))"
                },
                {
                    "args": "exp (-x) * 1 = real_inverse (exp x) * 1",
                    "id": "9",
                    "prevs": [
                        "1",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (-x) * 1 = real_inverse (exp x) * 1"
                },
                {
                    "args": "real_mult_comm, 1 * exp (-x) = 1 * real_inverse (exp x)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * exp (-x) = 1 * real_inverse (exp x)"
                },
                {
                    "args": "real_mul_lid, exp (-x) = real_inverse (exp x)",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (-x) = real_inverse (exp x)"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (-x) = real_inverse (exp x)"
                }
            ],
            "prop": "exp (-x) = real_inverse (exp x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_neg_mul"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_nz"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "real_mul_linv"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg_mul"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mult_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_n",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_mul_lzero, exp (0 * x) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (0 * x) = 1"
                },
                {
                    "args": "real_zero_def, exp (of_nat 0 * x) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (of_nat 0 * x) = 1"
                },
                {
                    "args": "real_nat_power_def_1, exp (of_nat 0 * x) = exp x ^ (0::nat)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (of_nat 0 * x) = exp x ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. exp (of_nat n * x) = exp x ^ n ⟶ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "exp (of_nat n * x) = exp x ^ n",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat n * x) = exp x ^ n"
                },
                {
                    "args": "exp x * exp (of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp x * exp (of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_exp_add, exp (x + of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.3",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (x + of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_mul_lid, exp (1 * x + of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.4",
                    "prevs": [
                        "4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (1 * x + of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_add_rdistrib, exp ((1 + of_nat n) * x) = exp x * exp x ^ n",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((1 + of_nat n) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_add_comm, exp ((of_nat n + 1) * x) = exp x * exp x ^ n",
                    "id": "4.6",
                    "prevs": [
                        "4.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((of_nat n + 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_one_def, exp ((of_nat n + of_nat 1) * x) = exp x * exp x ^ n",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((of_nat n + of_nat 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_of_nat_add, exp (of_nat (n + 1) * x) = exp x * exp x ^ n",
                    "id": "4.8",
                    "prevs": [
                        "4.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (n + 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "add_1_right, exp (of_nat (Suc n) * x) = exp x * exp x ^ n",
                    "id": "4.9",
                    "prevs": [
                        "4.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (Suc n) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_nat_power_def_2, exp (of_nat (Suc n) * x) = exp x ^ Suc n",
                    "id": "4.10",
                    "prevs": [
                        "4.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "",
                    "id": "4.11",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.10"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. exp (of_nat n * x) = exp x ^ n ⟶ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "nat_induct, {}, {P: λn. exp (of_nat n * x) = exp x ^ n, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp (of_nat n * x) = exp x ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (of_nat n * x) = exp x ^ n"
                }
            ],
            "prop": "exp (of_nat n * x) = exp x ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_of_nat_add"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_comm"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "name": "real_exp_n_sym",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_n, exp x ^ n = exp (of_nat n * x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x ^ n = exp (of_nat n * x)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x ^ n = exp (of_nat n * x)"
                }
            ],
            "prop": "exp x ^ n = exp (of_nat n * x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_divide_def, exp x * real_inverse (exp y) = exp x / exp y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x * real_inverse (exp y) = exp x / exp y"
                },
                {
                    "args": "real_exp_neg, exp x * exp (-y) = exp x / exp y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x * exp (-y) = exp x / exp y"
                },
                {
                    "args": "real_exp_add, exp (x + -y) = exp x / exp y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x + -y) = exp x / exp y"
                },
                {
                    "args": "real_minus_def, exp (x - y) = exp x / exp y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x - y) = exp x / exp y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (x - y) = exp x / exp y"
                }
            ],
            "prop": "exp (x - y) = exp x / exp y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x = x / 2 + x / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ x = x / 2 + x / 2"
                },
                {
                    "args": "real_le_square, {}, {x: exp (x / 2)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp (x / 2) * exp (x / 2)"
                },
                {
                    "args": "real_exp_add, 0 ≤ exp (x / 2 + x / 2)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 ≤ exp (x / 2 + x / 2)"
                },
                {
                    "args": "0 ≤ exp x",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ exp x"
                }
            ],
            "prop": "0 ≤ exp x",
            "steps": [
                {
                    "goal": "x = x/2 + x/2",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_square"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_le, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "real_exp_nz, {}, {x: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp x = 0)"
                },
                {
                    "args": "eq_sym_eq, ¬(0 = exp x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(0 = exp x)"
                },
                {
                    "args": "conjI",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ exp x ∧ ¬(0 = exp x)"
                },
                {
                    "args": "real_lt_le, 0 < exp x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < exp x"
                }
            ],
            "prop": "0 < exp x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_lt_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_le_x",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 1 + x < 0 ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "1 + x < 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 + x < 0 ⊢ 1 + x < 0"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 + x < 0 ⊢ 1 + x ≤ 0"
                },
                {
                    "args": "real_exp_pos_le, {}, {x: x}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "real_le_trans",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 + x < 0 ⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x < 0 ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(1 + x < 0) ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "¬(1 + x < 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(1 + x < 0) ⊢ ¬(1 + x < 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "¬(1 + x < 0) ⊢ 1 + x ≤ infsum (from 0) (λn. x ^ n / of_nat (fact n))"
                },
                {
                    "args": "exp_def, 1 + x ≤ exp x",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(1 + x < 0) ⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(1 + x < 0) ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x ≤ exp x"
                }
            ],
            "prop": "1 + x ≤ exp x",
            "steps": [
                {
                    "case": "1 + x < 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "param_y": "(0::real)",
                    "theorem": "real_le_trans"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_lt_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_le_x, {}, {x: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "1 < 1 + x",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ 1 < 1 + x"
                },
                {
                    "args": "real_lte_trans",
                    "id": "3",
                    "prevs": [
                        "2",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 1 < exp x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 1 < exp x"
                }
            ],
            "prop": "0 < x ⟶ 1 < exp x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_le_x"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_y": "1+x",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_mono_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x < y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_sub_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x < y ⊢ 0 < y - x"
                },
                {
                    "args": "real_exp_lt_1, {}, {x: y - x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y ⊢ 1 < exp (y - x)"
                },
                {
                    "args": "real_exp_sub",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x < y ⊢ 1 < exp y / exp x"
                },
                {
                    "args": "∀a. ∀b. 0 < a ⟶ 1 < b / a ⟶ a < b",
                    "id": "4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a. ∀b. 0 < a ⟶ 1 < b / a ⟶ a < b"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: x}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "exp x, exp y",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "x < y ⊢ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                }
            ],
            "prop": "x < y ⟶ exp x < exp y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_sub_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_exp_lt_1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_exp_sub"
                },
                {
                    "goal": "!a::real. !b. 0 < a --> 1 < b / a --> a < b",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀a::real. ∀b. ∀c::real. ∀d. (a < b ⟶ c < d) ⟶ (a = b ⟶ c = d) ⟶ (b < a ⟶ d < c) ⟶ c < d ⟷ a < b",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. ∀c::real. ∀d. (a < b ⟶ c < d) ⟶ (a = b ⟶ c = d) ⟶ (b < a ⟶ d < c) ⟶ c < d ⟷ a < b"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                },
                {
                    "args": "x < y",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_exp_mono_imp",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y ⊢ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = y ⟶ exp x = exp y"
                },
                {
                    "args": "x = y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "exp x = exp y",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ exp x = exp y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = y ⟶ exp x = exp y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ y < x ⟶ exp y < exp x"
                },
                {
                    "args": "y < x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y < x ⊢ y < x"
                },
                {
                    "args": "real_exp_mono_imp",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "y < x ⊢ exp y < exp x"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ y < x ⟶ exp y < exp x"
                },
                {
                    "args": "x, y, exp x, exp y",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ exp x < exp y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x < exp y ⟷ x < y"
                }
            ],
            "prop": "exp x < exp y ⟷ x < y",
            "steps": [
                {
                    "goal": "!a::real. !b. !c::real. !d. (a < b --> c < d) --> (a = b --> c = d) --> (b < a --> d < c) --> (c < d <--> a < b)",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_mono_imp"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_mono_imp"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_mono_lt, ¬(exp y < exp x) ⟷ ¬(y < x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(exp y < exp x) ⟷ ¬(y < x)"
                },
                {
                    "args": "real_not_lt, exp x ≤ exp y ⟷ x ≤ y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x ≤ exp y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x ≤ exp y ⟷ x ≤ y"
                }
            ],
            "prop": "exp x ≤ exp y ⟷ x ≤ y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_mono_le, exp x ≤ exp y ∧ exp y ≤ exp x ⟷ x ≤ y ∧ y ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x ≤ exp y ∧ exp y ≤ exp x ⟷ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "real_le_antisym, exp x = exp y ⟷ x = y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x = exp y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x = exp y ⟷ x = y"
                }
            ],
            "prop": "exp x = exp y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_eq_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_inj, exp x = exp 0 ⟷ x = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x = exp 0 ⟷ x = 0"
                },
                {
                    "args": "real_exp_0, exp x = 1 ⟷ x = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x = 1 ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x = 1 ⟷ x = 0"
                }
            ],
            "prop": "exp x = 1 ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_abs_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_le, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "if_P, (if 0 ≤ exp x then exp x else -(exp x)) = exp x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 0 ≤ exp x then exp x else -(exp x)) = exp x"
                },
                {
                    "args": "abs_def, abs (exp x) = exp x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (exp x) = exp x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs (exp x) = exp x"
                }
            ],
            "prop": "abs (exp x) = exp x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "goal": "0 ≤ exp x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_sum",
            "num_gaps": 2,
            "proof": [
                {
                    "args": "finite s",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s ⊢ finite s"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "finite s ⊢ exp 0 = product ∅ (λx. exp (f x))"
                },
                {
                    "args": "sum_empty, exp (sum ∅ f) = product ∅ (λx. exp (f x))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s ⊢ exp (sum ∅ f) = product ∅ (λx. exp (f x))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "finite s ⊢ ∀x. ∀s1. exp (sum s1 f) = product s1 (λx1. exp (f x1)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ exp (sum (insert x s1) f) = product (insert x s1) (λx1. exp (f x1))"
                },
                {
                    "args": "finite_induct_strong",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s ⊢ exp (sum s f) = product s (λx. exp (f x))"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ finite s ⟶ exp (sum s f) = product s (λx. exp (f x))"
                }
            ],
            "prop": "finite s ⟶ exp (sum s f) = product s (λx. exp (f x))",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_induct_strong"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sum_empty"
                }
            ],
            "ty": "thm",
            "vars": {
                "f": "'a ⇒ real",
                "s": "'a set"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_exp_bound_lemma",
            "prop": "0 ≤ x ⟶ x ≤ real_inverse 2 ⟶ exp x ≤ 1 + 2 * x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos",
            "prop": [
                "cos x = ",
                "infsum (from 0) ",
                "  (λn. if even n then -1 ^ (n DIV 2) * x ^ n / of_nat (fact n) else 0)"
            ],
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "sin",
            "prop": [
                "sin x = ",
                "infsum (from 0) ",
                "  (λn. if even n then 0 else -1 ^ ((n - 1) DIV 2) * x ^ n / of_nat (fact n))"
            ],
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_circle",
            "prop": "sin x ^ (2::nat) + cos x ^ (2::nat) = 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_circle2",
            "prop": "sin x ^ (2::nat) = 1 - cos x ^ (2::nat)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_circle3",
            "prop": "cos x ^ (2::nat) = 1 - sin x ^ (2::nat)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_add",
            "prop": "sin (x + y) = sin x * cos y + cos x * sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_add",
            "prop": "cos (x + y) = cos x * cos y - sin x * sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_neg",
            "prop": "sin (-x) = -(sin x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_neg_alt",
            "prop": "sin (-c * x) = -(sin (c * x))",
            "ty": "thm",
            "vars": {
                "c": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_neg",
            "prop": "cos (-x) = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_neg_alt",
            "prop": "cos (-c * x) = cos (c * x)",
            "ty": "thm",
            "vars": {
                "c": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_double",
            "prop": "sin (2 * x) = 2 * sin x * cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_double",
            "prop": "cos (2 * x) = cos x ^ (2::nat) - sin x ^ (2::nat)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_double_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - (sin x ^ (2::nat) + cos x ^ (2::nat))",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - (sin x ^ (2::nat) + cos x ^ (2::nat))"
                },
                {
                    "args": "cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - 1",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - 1"
                },
                {
                    "args": "cos_double, cos (2 * x) = 2 * cos x ^ (2::nat) - 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * x) = 2 * cos x ^ (2::nat) - 1"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (2 * x) = 2 * cos x ^ (2::nat) - 1"
                }
            ],
            "prop": "cos (2 * x) = 2 * cos x ^ (2::nat) - 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_lower_degree",
            "prop": "cos x ^ (2::nat) = 1 / 2 * cos (2 * x) + 1 / 2",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_lower_degree",
            "prop": "sin x ^ (2::nat) = 1 / 2 - 1 / 2 * cos (2 * x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_bound",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "real_abs_nat, {}, {n: (1::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs ((of_nat::nat ⇒ real) 1) = of_nat 1"
                },
                {
                    "args": "real_one_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "⊢ abs (1::real) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ (1::real) = abs 1"
                },
                {
                    "args": "sin_circle, {}, {x: x}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "real_le_square, {}, {x: cos x}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ cos x * cos x"
                },
                {
                    "args": "real_pow_2",
                    "id": "5",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin x * sin x + cos x * cos x = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x * sin x + cos x * cos x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ sin x * sin x ≤ sin x * sin x + cos x * cos x"
                },
                {
                    "args": "sin x * sin x ≤ 1",
                    "id": "8",
                    "prevs": [
                        "6",
                        "7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x * sin x ≤ 1"
                },
                {
                    "args": "real_mul_lid, sin x * sin x ≤ 1 * 1",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * sin x ≤ 1 * 1"
                },
                {
                    "args": "real_pow_2, sin x ^ (2::nat) ≤ 1 ^ (2::nat)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x ^ (2::nat) ≤ 1 ^ (2::nat)"
                },
                {
                    "args": "real_le_square_abs, abs (sin x) ≤ abs 1",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (sin x) ≤ abs 1"
                },
                {
                    "args": "abs (sin x) ≤ 1",
                    "id": "12",
                    "prevs": [
                        "2",
                        "11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ abs (sin x) ≤ 1"
                },
                {
                    "args": "",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs (sin x) ≤ 1"
                }
            ],
            "prop": "abs (sin x) ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_n": "(1::nat)",
                    "theorem": "real_abs_nat"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_square_abs"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "param_x": "cos x",
                    "theorem": "real_le_square"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_bound",
            "prop": "abs (cos x) ≤ 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_lbound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_bound, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (sin x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ sin x ∧ sin x ≤ 1"
                },
                {
                    "args": "conjD1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ -1 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ -1 ≤ sin x"
                }
            ],
            "prop": "-1 ≤ sin x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_ubound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_bound, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (sin x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ sin x ∧ sin x ≤ 1"
                },
                {
                    "args": "conjD2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sin x ≤ 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x ≤ 1"
                }
            ],
            "prop": "sin x ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_lbound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_bound, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (cos x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ cos x ∧ cos x ≤ 1"
                },
                {
                    "args": "conjD1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ -1 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ -1 ≤ cos x"
                }
            ],
            "prop": "-1 ≤ cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "cos_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_ubound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_bound, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (cos x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ cos x ∧ cos x ≤ 1"
                },
                {
                    "args": "conjD2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ cos x ≤ 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x ≤ 1"
                }
            ],
            "prop": "cos x ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "cos_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_abs",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ x ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "0 ≤ x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "if_P, cos (if 0 ≤ x then x else -x) = cos x",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x ⊢ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 ≤ x) ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "¬(0 ≤ x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ x) ⊢ ¬(0 ≤ x)"
                },
                {
                    "args": "cos_neg, cos (-x) = cos x",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (-x) = cos x"
                },
                {
                    "args": "if_not_P, cos (if 0 ≤ x then x else -x) = cos x",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 ≤ x) ⊢ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 ≤ x) ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "abs_def, cos (abs x) = cos x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (abs x) = cos x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (abs x) = cos x"
                }
            ],
            "prop": "cos (abs x) = cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "case": "0 ≤ x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_sub",
            "prop": "sin (x - y) = sin x * cos y - cos x * sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_sub",
            "prop": "cos (x - y) = cos x * cos y + sin x * sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_sin_sin",
            "prop": "sin x * sin y = (cos (x - y) - cos (x + y)) / 2",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_sin_cos",
            "prop": "sin x * cos y = (sin (x + y) + sin (x - y)) / 2",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_cos_sin",
            "prop": "cos x * sin y = (sin (x + y) - sin (x - y)) / 2",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_cos_cos",
            "prop": "cos x * cos y = (cos (x - y) + cos (x + y)) / 2",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_add_sin",
            "prop": "sin x + sin y = 2 * sin ((x + y) / 2) * cos ((x - y) / 2)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sub_sin",
            "prop": "sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_add_cos",
            "prop": "cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sub_cos",
            "prop": "cos x - cos y = 2 * sin ((x + y) / 2) * sin ((y - x) / 2)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_double_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "cos x * cos x - sin x * sin x = sin x * sin x + cos x * cos x - (sin x * sin x + sin x * sin x)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x * cos x - sin x * sin x = sin x * sin x + cos x * cos x - (sin x * sin x + sin x * sin x)"
                },
                {
                    "args": "real_pow_2, cos x * cos x - sin x * sin x = sin x ^ (2::nat) + cos x ^ (2::nat) - (sin x ^ (2::nat) + sin x ^ (2::nat))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos x - sin x * sin x = sin x ^ (2::nat) + cos x ^ (2::nat) - (sin x ^ (2::nat) + sin x ^ (2::nat))"
                },
                {
                    "args": "cos x * cos x - sin x * sin x = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x * cos x - sin x * sin x = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))"
                },
                {
                    "args": "cos_add, cos (x + x) = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + x) = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))"
                },
                {
                    "args": "real_mul_2, cos (2 * x) = 1 - 2 * sin x ^ (2::nat)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * x) = 1 - 2 * sin x ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (2 * x) = 1 - 2 * sin x ^ (2::nat)"
                }
            ],
            "prop": "cos (2 * x) = 1 - 2 * sin x ^ (2::nat)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log",
            "prop": "log y = (THE x. exp x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "exp_log",
            "prop": "0 < x ⟶ exp (log x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "log_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {}, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "exp_log",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log (exp x)) = exp x"
                },
                {
                    "args": "real_exp_inj, log (exp x) = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ log (exp x) = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ log (exp x) = x"
                }
            ],
            "prop": "log (exp x) = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_log",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ exp (log x) = x ⟶ 0 < x"
                },
                {
                    "args": "exp (log x) = x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (log x) = x ⊢ exp (log x) = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "exp (log x) = x ⊢ x = exp (log x)"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: log x}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log x)"
                },
                {
                    "args": "0 < x",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (log x) = x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (log x) = x ⟶ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ exp (log x) = x"
                },
                {
                    "args": "0 < x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ exp (log x) = x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log x) = x ⟷ 0 < x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (log x) = x ⟷ 0 < x"
                }
            ],
            "prop": "exp (log x) = x ⟷ 0 < x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "log_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {}, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "real_lt_mul",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ 0 < x * y"
                },
                {
                    "args": "real_exp_log, exp (log (x * y)) = x * y",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = x * y"
                },
                {
                    "args": "exp (log (x * y)) = x * exp (log y)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x ⊢ exp (log (x * y)) = x * exp (log y)"
                },
                {
                    "args": "exp (log (x * y)) = exp (log x) * exp (log y)",
                    "id": "7",
                    "prevs": [
                        "2",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = exp (log x) * exp (log y)"
                },
                {
                    "args": "real_exp_add, exp (log (x * y)) = exp (log x + log y)",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = exp (log x + log y)"
                },
                {
                    "args": "real_exp_inj, log (x * y) = log x + log y",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y ⊢ log (x * y) = log x + log y"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log (x * y) = log x + log y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log (x * y) = log x + log y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "log_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟶ x = y"
                },
                {
                    "args": "log x = log y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x = log y ⊢ log x = log y"
                },
                {
                    "args": "real_exp_inj",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x = log y ⊢ exp (log x) = exp (log y)"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "2.2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {}, {x: y}",
                    "id": "2.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x = log y ⊢ x = exp (log y)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.3",
                        "2.4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x = log y ⊢ x = y"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟶ x = y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x = y ⟶ log x = log y"
                },
                {
                    "args": "x = y",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "log x = log y",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ log x = log y"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x = y ⟶ log x = log y"
                },
                {
                    "args": "iffI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x = log y ⟷ x = y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x = log y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2.2",
                        "2.1"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2.3",
                        "2.4"
                    ],
                    "goal_id": "2.5",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "log_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(0::real) < 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "exp_log",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log 1) = 1"
                },
                {
                    "args": "real_exp_0, exp (log 1) = exp 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (log 1) = exp 0"
                },
                {
                    "args": "real_exp_inj, log 1 = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ log 1 = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ log 1 = 0"
                }
            ],
            "prop": "log 1 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_inv",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "real_lt_inv",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 0 < real_inverse x"
                },
                {
                    "args": "real_exp_log, exp (log (real_inverse x)) = real_inverse x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (log (real_inverse x)) = real_inverse x"
                },
                {
                    "args": "exp (log (real_inverse x)) = real_inverse (exp (log x))",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log (real_inverse x)) = real_inverse (exp (log x))"
                },
                {
                    "args": "real_exp_neg, exp (log (real_inverse x)) = exp (-(log x))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (log (real_inverse x)) = exp (-(log x))"
                },
                {
                    "args": "real_exp_inj, log (real_inverse x) = -(log x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x ⊢ log (real_inverse x) = -(log x)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log (real_inverse x) = -(log x)"
                }
            ],
            "prop": "0 < x ⟶ log (real_inverse x) = -(log x)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_log"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_inv"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_div",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "log_inv, {}, {x: y}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ log (real_inverse y) = -(log y)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 < y ⊢ -(log y) = log (real_inverse y)"
                },
                {
                    "args": "real_lt_inv",
                    "id": "4",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < y ⊢ 0 < real_inverse y"
                },
                {
                    "args": "log_mul",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log (x * real_inverse y) = log x + log (real_inverse y)"
                },
                {
                    "args": "log (x * real_inverse y) = log x + -(log y)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x ⊢ log (x * real_inverse y) = log x + -(log y)"
                },
                {
                    "args": "real_minus_def, log (x * real_inverse y) = log x - log y",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ log (x * real_inverse y) = log x - log y"
                },
                {
                    "args": "real_divide_def, log (x / y) = log x - log y",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ log (x / y) = log x - log y"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log (x / y) = log x - log y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log (x / y) = log x - log y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "log_inv"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_inv"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {}, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟶ x < y"
                },
                {
                    "args": "log x < log y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x < log y ⊢ log x < log y"
                },
                {
                    "args": "real_exp_mono_lt",
                    "id": "4.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x < log y ⊢ exp (log x) < exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [
                        "2",
                        "4.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x < log y ⊢ x < exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "3",
                        "4.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x < log y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟶ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x < y ⟶ log x < log y"
                },
                {
                    "args": "x < y",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "x < exp (log y)",
                    "id": "5.1",
                    "prevs": [
                        "3",
                        "5.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x, x < y ⊢ x < exp (log y)"
                },
                {
                    "args": "exp (log x) < exp (log y)",
                    "id": "5.2",
                    "prevs": [
                        "2",
                        "5.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y, x < y ⊢ exp (log x) < exp (log y)"
                },
                {
                    "args": "real_exp_mono_lt, log x < log y",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y, x < y ⊢ log x < log y"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [
                        "5.0",
                        "5.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x < y ⟶ log x < log y"
                },
                {
                    "args": "iffI",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x < log y ⟷ x < y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x < log y ⟷ x < y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "fact_ids": [
                        "2",
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "3",
                        "4.2"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_lt_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_lt_trans, {}, {x: (0::real), y: x, z: y}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x < y ⊢ 0 < y"
                },
                {
                    "args": "log_mono_lt, {}, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x < y ⊢ log x < log y ⟷ x < y"
                },
                {
                    "args": "log x < log y",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, x < y ⊢ log x < log y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x < y ⟶ log x < log y"
                }
            ],
            "prop": "0 < x ⟶ x < y ⟶ log x < log y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lt_trans"
                },
                {
                    "fact_ids": [
                        "0",
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_lt_rev",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "log x < log y",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x < log y ⊢ log x < log y"
                },
                {
                    "args": "log_mono_lt, {}, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, 0 < y, log x < log y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x < log y ⟶ x < y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x < log y ⟶ x < y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_lt"
                },
                {
                    "fact_ids": [
                        "3",
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {}, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟶ x ≤ y"
                },
                {
                    "args": "log x ≤ log y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x ≤ log y ⊢ log x ≤ log y"
                },
                {
                    "args": "real_exp_mono_le",
                    "id": "4.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x ≤ log y ⊢ exp (log x) ≤ exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [
                        "2",
                        "4.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x ≤ log y ⊢ x ≤ exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "3",
                        "4.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x ≤ log y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟶ x ≤ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x ≤ y ⟶ log x ≤ log y"
                },
                {
                    "args": "x ≤ y",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "x ≤ exp (log y)",
                    "id": "5.1",
                    "prevs": [
                        "3",
                        "5.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x, x ≤ y ⊢ x ≤ exp (log y)"
                },
                {
                    "args": "exp (log x) ≤ exp (log y)",
                    "id": "5.2",
                    "prevs": [
                        "2",
                        "5.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y, x ≤ y ⊢ exp (log x) ≤ exp (log y)"
                },
                {
                    "args": "real_exp_mono_le, log x ≤ log y",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y, x ≤ y ⊢ log x ≤ log y"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [
                        "5.0",
                        "5.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x ≤ y ⟶ log x ≤ log y"
                },
                {
                    "args": "iffI",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟷ x ≤ y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟷ x ≤ y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "fact_ids": [
                        "2",
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "3",
                        "4.2"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_le_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "real_lte_trans",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x ≤ y ⊢ 0 < y"
                },
                {
                    "args": "log_mono_le, {}, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x ≤ y ⊢ log x ≤ log y ⟷ x ≤ y"
                },
                {
                    "args": "log x ≤ log y",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, x ≤ y ⊢ log x ≤ log y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x ≤ y ⟶ log x ≤ log y"
                }
            ],
            "prop": "0 < x ⟶ x ≤ y ⟶ log x ≤ log y",
            "steps": [
                {
                    "goal": "0 < y",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "0",
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_le"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_le_rev",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "log x ≤ log y",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x ≤ log y ⊢ log x ≤ log y"
                },
                {
                    "args": "log_mono_le, {}, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, 0 < y, log x ≤ log y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟶ x ≤ y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟶ x ≤ y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_le"
                },
                {
                    "fact_ids": [
                        "3",
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_pow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_pow_lt, {}, {n: n, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < x ^ n"
                },
                {
                    "args": "exp_log, {}, {x: x ^ n}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log (x ^ n)) = x ^ n"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "x ^ n = exp (log x) ^ n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ x ^ n = exp (log x) ^ n"
                },
                {
                    "args": "exp (log (x ^ n)) = exp (log x) ^ n",
                    "id": "5",
                    "prevs": [
                        "2",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log (x ^ n)) = exp (log x) ^ n"
                },
                {
                    "args": "real_exp_n, exp (log (x ^ n)) = exp (of_nat n * log x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (log (x ^ n)) = exp (of_nat n * log x)"
                },
                {
                    "args": "real_exp_inj, log (x ^ n) = of_nat n * log x",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x ⊢ log (x ^ n) = of_nat n * log x"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "0",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log (x ^ n) = of_nat n * log x"
                }
            ],
            "prop": "0 < x ⟶ log (x ^ n) = of_nat n * log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "real_pow_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_le_strong",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < 1 + x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < 1 + x ⊢ 0 < 1 + x"
                },
                {
                    "args": "exp_log, {}, {x: 1 + x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < 1 + x ⊢ exp (log (1 + x)) = 1 + x"
                },
                {
                    "args": "real_exp_le_x, {}, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "exp (log (1 + x)) ≤ exp x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < 1 + x ⊢ exp (log (1 + x)) ≤ exp x"
                },
                {
                    "args": "real_exp_mono_le, log (1 + x) ≤ x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < 1 + x ⊢ log (1 + x) ≤ x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < 1 + x ⟶ log (1 + x) ≤ x"
                }
            ],
            "prop": "0 < 1 + x ⟶ log (1 + x) ≤ x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_le_x"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "0 < 1 + x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x ⊢ 0 < 1 + x"
                },
                {
                    "args": "log_le_strong",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ log (1 + x) ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ log (1 + x) ≤ x"
                }
            ],
            "prop": "0 ≤ x ⟶ log (1 + x) ≤ x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_le_strong"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_lt_x",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "real_exp_le_x, {}, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "x < 1 + x",
                    "id": "3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ x < 1 + x"
                },
                {
                    "args": "real_lte_trans",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ x < exp x"
                },
                {
                    "args": "exp (log x) < exp x",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log x) < exp x"
                },
                {
                    "args": "real_exp_mono_lt, log x < x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x ⊢ log x < x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log x < x"
                }
            ],
            "prop": "0 < x ⟶ log x < x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_le_x"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "param_y": "1+x",
                    "theorem": "real_lte_trans"
                },
                {
                    "goal_id": "3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_pos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 ≤ x ⊢ 1 ≤ x"
                },
                {
                    "args": "(0::real) < 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "log_mono_le_imp",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 ≤ x ⊢ log 1 ≤ log x"
                },
                {
                    "args": "log_1, 0 ≤ log x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "1 ≤ x ⊢ 0 ≤ log x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 ≤ x ⟶ 0 ≤ log x"
                }
            ],
            "prop": "1 ≤ x ⟶ 0 ≤ log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mono_le_imp"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "(0::real) < 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "log_mono_lt_imp",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x ⊢ log 1 < log x"
                },
                {
                    "args": "log_1, 0 < log x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "1 < x ⊢ 0 < log x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 < x ⟶ 0 < log x"
                }
            ],
            "prop": "1 < x ⟶ 0 < log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mono_lt_imp"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log_ge_zero",
            "prop": "log x ≥ 0 ⟷ x ≥ 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log_le_zero",
            "prop": "log x ≤ 0 ⟷ x > 0 ∧ x ≤ 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_product",
            "prop": "finite s ⟶ (∀x. x ∈ s ⟶ 0 < f x) ⟶ log (product s f) = sum s (λx. log (f x))",
            "ty": "thm",
            "vars": {
                "f": "'a ⇒ real",
                "s": "'a set"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_nearzero",
            "prop": "∃x. 0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y)",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_nontrivial",
            "prop": "∃x. 0 < x ∧ ¬(sin x = 0)",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_nontrivial",
            "prop": "∃x. 0 < x ∧ ¬(cos x = 1)",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_double_bound",
            "prop": "0 ≤ cos x ⟶ 2 * (1 - cos x) ≤ 1 - cos (2 * x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_goesnegative_lemma",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x < 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x < 1 ⊢ cos x < 1"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1 ⊢ ¬(∃n::nat. cos (2 ^ n * x) < 0) ⟶ false"
                },
                {
                    "args": "¬(∃n::nat. cos (2 ^ n * x) < 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ¬(∃n::nat. cos (2 ^ n * x) < 0)"
                },
                {
                    "args": "not_exists",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀x1::nat. ¬(cos (2 ^ x1 * x) < 0)"
                },
                {
                    "args": "real_not_lt",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀x1::nat. 0 ≤ cos (2 ^ x1 * x)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n::nat. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "n, nat",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "real_le_refl, {}, {x: 1 - cos x}",
                    "id": "1.3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 - cos x ≤ 1 - cos x"
                },
                {
                    "args": "real_mul_lid, 1 * (1 - cos x) ≤ 1 - cos (1 * x)",
                    "id": "1.3.2",
                    "prevs": [
                        "1.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 1 * (1 - cos x) ≤ 1 - cos (1 * x)"
                },
                {
                    "args": "real_nat_power_def_1, 2 ^ (0::nat) * (1 - cos x) ≤ 1 - cos (2 ^ (0::nat) * x)",
                    "id": "1.3.3",
                    "prevs": [
                        "1.3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 2 ^ (0::nat) * (1 - cos x) ≤ 1 - cos (2 ^ (0::nat) * x)"
                },
                {
                    "args": "",
                    "id": "1.3.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⟶ 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)"
                },
                {
                    "args": "2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)",
                    "id": "1.3.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "real_pos, {}, {n: bit0 1}",
                    "id": "1.3.4.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 2"
                },
                {
                    "args": "real_le_lmul",
                    "id": "1.3.4.2",
                    "prevs": [
                        "1.3.4.1",
                        "1.3.4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * (2 ^ n * (1 - cos x)) ≤ 2 * (1 - cos (2 ^ n * x))"
                },
                {
                    "args": "real_mult_assoc, 2 * 2 ^ n * (1 - cos x) ≤ 2 * (1 - cos (2 ^ n * x))",
                    "id": "1.3.4.3",
                    "prevs": [
                        "1.3.4.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * 2 ^ n * (1 - cos x) ≤ 2 * (1 - cos (2 ^ n * x))"
                },
                {
                    "args": "n",
                    "id": "1.3.4.4",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 0 ≤ cos (2 ^ n * x)"
                },
                {
                    "args": "cos_double_bound",
                    "id": "1.3.4.5",
                    "prevs": [
                        "1.3.4.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * (1 - cos (2 ^ n * x)) ≤ 1 - cos (2 * (2 ^ n * x))"
                },
                {
                    "args": "real_mult_assoc, 2 * (1 - cos (2 ^ n * x)) ≤ 1 - cos (2 * 2 ^ n * x)",
                    "id": "1.3.4.6",
                    "prevs": [
                        "1.3.4.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * (1 - cos (2 ^ n * x)) ≤ 1 - cos (2 * 2 ^ n * x)"
                },
                {
                    "args": "real_le_trans",
                    "id": "1.3.4.7",
                    "prevs": [
                        "1.3.4.3",
                        "1.3.4.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * 2 ^ n * (1 - cos x) ≤ 1 - cos (2 * 2 ^ n * x)"
                },
                {
                    "args": "real_nat_power_def_2, 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)",
                    "id": "1.3.4.8",
                    "prevs": [
                        "1.3.4.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)"
                },
                {
                    "args": "",
                    "id": "1.3.4.9",
                    "prevs": [
                        "1.3.0",
                        "1.3.4.0",
                        "1.3.4.8"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⟶ 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)"
                },
                {
                    "args": "nat_induct, {}, {P: λn::nat. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x), x: n}",
                    "id": "1.3.5",
                    "prevs": [
                        "1.3.3",
                        "1.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "",
                    "id": "1.3.6",
                    "prevs": [
                        "1.3.0",
                        "1.3.5"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n::nat. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "real_arch_pow2, {}, {x: 1 / (1 - cos x)}",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃n::nat. 1 / (1 - cos x) < 2 ^ n"
                },
                {
                    "args": "n, nat",
                    "id": "1.5",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "1 / (1 - cos x) < 2 ^ n",
                    "id": "1.6",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 / (1 - cos x) < 2 ^ n ⊢ 1 / (1 - cos x) < 2 ^ n"
                },
                {
                    "args": "∀x::real. x < 1 ⟶ 0 < 1 - x",
                    "id": "1.7",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x < 1 ⟶ 0 < 1 - x"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [
                        "1.7",
                        "0"
                    ],
                    "rule": "apply_fact",
                    "th": "cos x < 1 ⊢ 0 < 1 - cos x"
                },
                {
                    "args": "real_lt_ldiv_eq, {}, {x: (1::real), y: (2::real) ^ n, z: 1 - cos x}",
                    "id": "1.9",
                    "prevs": [
                        "1.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1 ⊢ 1 / (1 - cos x) < 2 ^ n ⟷ 1 < 2 ^ n * (1 - cos x)"
                },
                {
                    "args": "",
                    "id": "1.10",
                    "prevs": [
                        "1.9",
                        "1.6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "cos x < 1, 1 / (1 - cos x) < 2 ^ n ⊢ 1 < 2 ^ n * (1 - cos x)"
                },
                {
                    "args": "n",
                    "id": "1.11",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "forall_elim",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "real_lte_trans, {}, {x: (1::real), y: 2 ^ n * (1 - cos x), z: 1 - cos (2 ^ n * x)}",
                    "id": "1.12",
                    "prevs": [
                        "1.10",
                        "1.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1, 1 / (1 - cos x) < 2 ^ n, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 1 < 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "",
                    "id": "1.13",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n ⊢ ¬false ⟶ ¬(1 < 1 - cos (2 ^ n * x))"
                },
                {
                    "args": "¬false",
                    "id": "1.13.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "∀x::real. 0 ≤ x ⟶ 1 - x ≤ 1",
                    "id": "1.13.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. 0 ≤ x ⟶ 1 - x ≤ 1"
                },
                {
                    "args": "n",
                    "id": "1.13.2",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 0 ≤ cos (2 ^ n * x)"
                },
                {
                    "args": "cos (2 ^ n * x)",
                    "id": "1.13.3",
                    "prevs": [
                        "1.13.1",
                        "1.13.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n, ¬false ⊢ 1 - cos (2 ^ n * x) ≤ 1"
                },
                {
                    "args": "real_not_lt, ¬(1 < 1 - cos (2 ^ n * x))",
                    "id": "1.13.4",
                    "prevs": [
                        "1.13.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n, ¬false ⊢ ¬(1 < 1 - cos (2 ^ n * x))"
                },
                {
                    "args": "",
                    "id": "1.13.5",
                    "prevs": [
                        "1.13.0",
                        "1.13.4"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n ⊢ ¬false ⟶ ¬(1 < 1 - cos (2 ^ n * x))"
                },
                {
                    "args": "contrapositive",
                    "id": "1.14",
                    "prevs": [
                        "1.12",
                        "1.13"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, 1 / (1 - cos x) < 2 ^ n, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ false"
                },
                {
                    "args": "∃n::nat. 1 / (1 - cos x) < 2 ^ n",
                    "id": "1.15",
                    "prevs": [
                        "1.0",
                        "1.4",
                        "1.5",
                        "1.6",
                        "1.14"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1 ⊢ ¬(∃n::nat. cos (2 ^ n * x) < 0) ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1 ⊢ ¬¬(∃n::nat. cos (2 ^ n * x) < 0)"
                },
                {
                    "args": "double_neg, ∃n::nat. cos (2 ^ n * x) < 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos x < 1 ⊢ ∃n::nat. cos (2 ^ n * x) < 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x < 1 ⟶ (∃n::nat. cos (2 ^ n * x) < 0)"
                }
            ],
            "prop": "cos x < 1 ⟶ (∃n::nat. cos (2 ^ n * x) < 0)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_exists"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_not_lt"
                },
                {
                    "goal": "!n::nat. 2 ^ n * (1-cos x) <= 1-cos (2 ^ n * x)",
                    "goal_id": "1.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                },
                {
                    "goal_id": "1.3.4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "apply_backward_step",
                    "param_y": "2 * (1 - cos (2 ^ n * x))",
                    "theorem": "real_le_trans"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_lmul"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pos"
                },
                {
                    "goal_id": "1.3.4.4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "1.3.4.4",
                    "method_name": "apply_backward_step",
                    "theorem": "cos_double_bound"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3.4.4",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_forward_step",
                    "param_x": "1/(1-cos x)",
                    "theorem": "real_arch_pow2"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal": "∀x::real. x < 1 ⟶ 0 < 1 - x",
                    "goal_id": "1.7",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.7",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.7",
                        "0"
                    ],
                    "goal_id": "1.8",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.8"
                    ],
                    "goal_id": "1.9",
                    "method_name": "apply_forward_step",
                    "param_x": "(1::real)",
                    "param_y": "(2::real) ^ n",
                    "theorem": "real_lt_ldiv_eq"
                },
                {
                    "fact_ids": [
                        "1.9",
                        "1.6"
                    ],
                    "goal_id": "1.10",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.11",
                    "method_name": "forall_elim",
                    "s": "n"
                },
                {
                    "fact_ids": [
                        "1.10",
                        "1.11"
                    ],
                    "goal_id": "1.12",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "1.12"
                    ],
                    "goal_id": "1.13",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.13",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.13.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_not_lt"
                },
                {
                    "goal": "!x::real. 0 <= x --> 1-x <= 1",
                    "goal_id": "1.13.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.13.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.13.1"
                    ],
                    "goal_id": "1.13.2",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.13.2",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": " cos_goesnegative",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_nontrivial",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃x. 0 < x ∧ ¬(cos x = 1)"
                },
                {
                    "args": "x, real",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "0 < x ∧ ¬(cos x = 1)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ 0 < x ∧ ¬(cos x = 1)"
                },
                {
                    "args": "conjD1, {}, {A: 0 < x, B: ¬(cos x = 1)}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ 0 < x"
                },
                {
                    "args": "conjD2, {}, {A: 0 < x, B: ¬(cos x = 1)}",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ ¬(cos x = 1)"
                },
                {
                    "args": "cos_ubound, {}, {x: x}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ cos x ≤ 1"
                },
                {
                    "args": "real_le_lt",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ cos x < 1 ∨ cos x = 1"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x < 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "cos x < 1",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x < 1 ⊢ cos x < 1"
                },
                {
                    "args": "cos_goesnegative_lemma, {}, {x: x}",
                    "id": "7.1",
                    "prevs": [
                        "7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1 ⊢ ∃n::nat. cos (2 ^ n * x) < 0"
                },
                {
                    "args": "n, nat",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "cos (2 ^ n * x) < 0",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos (2 ^ n * x) < 0 ⊢ cos (2 ^ n * x) < 0"
                },
                {
                    "args": "real_lt_pow2, {}, {n: n}",
                    "id": "7.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) < 2 ^ n"
                },
                {
                    "args": "real_lt_mul",
                    "id": "7.5",
                    "prevs": [
                        "7.4",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x < 1, cos (2 ^ n * x) < 0 ⊢ 0 < 2 ^ n * x"
                },
                {
                    "args": "conjI",
                    "id": "7.6",
                    "prevs": [
                        "7.5",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x < 1, cos (2 ^ n * x) < 0 ⊢ 0 < 2 ^ n * x ∧ cos (2 ^ n * x) < 0"
                },
                {
                    "args": "exI, {a: real}, {P: λx. 0 < x ∧ cos x < 0, a: 2 ^ n * x}",
                    "id": "7.7",
                    "prevs": [
                        "7.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x < 1, cos (2 ^ n * x) < 0 ⊢ ∃a1. 0 < a1 ∧ cos a1 < 0"
                },
                {
                    "args": "∃n::nat. cos (2 ^ n * x) < 0",
                    "id": "7.8",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.2",
                        "7.3",
                        "7.7"
                    ],
                    "rule": "intros",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x < 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x = 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "cos x = 1",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x = 1 ⊢ cos x = 1"
                },
                {
                    "args": "negE_gen, {}, {A: cos x = 1, C: ∃a1. 0 < a1 ∧ cos a1 < 0}",
                    "id": "8.1",
                    "prevs": [
                        "4",
                        "8.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x = 1 ⊢ ∃a1. 0 < a1 ∧ cos a1 < 0"
                },
                {
                    "args": "",
                    "id": "8.2",
                    "prevs": [
                        "8.0",
                        "8.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x = 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "disjE",
                    "id": "9",
                    "prevs": [
                        "6",
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ ∃a1. 0 < a1 ∧ cos a1 < 0"
                },
                {
                    "args": "∃x. 0 < x ∧ ¬(cos x = 1)",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃a1. 0 < a1 ∧ cos a1 < 0"
                }
            ],
            "prop": "∃x. 0 < x ∧ cos x < 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "theorem": "cos_nontrivial"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "cos_ubound"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "apply_forward_step",
                    "theorem": "cos_goesnegative_lemma"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "inst_exists_goal",
                    "s": "2 ^ n * x"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_pow2"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4",
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_haszero",
            "prop": "∃x. 0 < x ∧ cos x = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_haszero",
            "prop": "∃x. 0 < x ∧ sin x = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_haszero_minimal",
            "prop": "∃p. 0 < p ∧ sin p = 0 ∧ (∀x. 0 < x ⟶ x < p ⟶ ¬(sin x = 0))",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "pi",
            "prop": "pi = (THE p. 0 < p ∧ sin p = 0 ∧ (∀x. 0 < x ⟶ x < p ⟶ ¬(sin x = 0)))",
            "ty": "def",
            "type": "real"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "pi_pos",
            "prop": "0 < pi",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sin_pi",
            "prop": "sin pi = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi",
            "prop": "0 < x ⟶ x < pi ⟶ 0 < sin x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_pi2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_double, {}, {x: pi / 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (2 * (pi / 2)) = 2 * sin (pi / 2) * cos (pi / 2)"
                },
                {
                    "args": "2 * (pi / 2) = pi",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * (pi / 2) = pi"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ sin pi = 2 * sin (pi / 2) * cos (pi / 2)"
                },
                {
                    "args": "real_sin_pi",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 = 2 * sin (pi / 2) * cos (pi / 2)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 2 * sin (pi / 2) * cos (pi / 2) = 0"
                },
                {
                    "args": "real_entire",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 2 * sin (pi / 2) = 0 ∨ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 2 * sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "2 * sin (pi / 2) = 0",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 * sin (pi / 2) = 0 ⊢ 2 * sin (pi / 2) = 0"
                },
                {
                    "args": "real_entire",
                    "id": "6.1",
                    "prevs": [
                        "6.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "2 * sin (pi / 2) = 0 ⊢ (2::real) = 0 ∨ sin (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0 ⊢ (2::real) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "(2::real) = 0",
                    "id": "6.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(2::real) = 0 ⊢ (2::real) = 0"
                },
                {
                    "args": "",
                    "id": "6.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0, (2::real) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬((2::real) = 0)"
                },
                {
                    "args": "¬(cos (pi / 2) = 0)",
                    "id": "6.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (pi / 2) = 0) ⊢ ¬(cos (pi / 2) = 0)"
                },
                {
                    "args": "¬((2::real) = 0)",
                    "id": "6.2.1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬((2::real) = 0)"
                },
                {
                    "args": "",
                    "id": "6.2.1.2",
                    "prevs": [
                        "6.2.1.0",
                        "6.2.1.1"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0, (2::real) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬((2::real) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "6.2.2",
                    "prevs": [
                        "6.2.0",
                        "6.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "(2::real) = 0, 2 * sin (pi / 2) = 0 ⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.2.3",
                    "prevs": [
                        "6.2.0",
                        "6.2.2"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0 ⊢ (2::real) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0 ⊢ sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "sin (pi / 2) = 0",
                    "id": "6.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sin (pi / 2) = 0 ⊢ sin (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬(sin (pi / 2) = 0)"
                },
                {
                    "args": "¬(cos (pi / 2) = 0)",
                    "id": "6.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (pi / 2) = 0) ⊢ ¬(cos (pi / 2) = 0)"
                },
                {
                    "args": "pi_pos",
                    "id": "6.3.1.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "0 < real_inverse 2",
                    "id": "6.3.1.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 0 < real_inverse 2"
                },
                {
                    "args": "real_lt_mul",
                    "id": "6.3.1.3",
                    "prevs": [
                        "6.3.1.1",
                        "6.3.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ 0 < pi * real_inverse 2"
                },
                {
                    "args": "real_divide_def, 0 < pi / 2",
                    "id": "6.3.1.4",
                    "prevs": [
                        "6.3.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ 0 < pi / 2"
                },
                {
                    "args": "real_inverse 2 * 1 < 1",
                    "id": "6.3.1.5",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ real_inverse 2 * 1 < 1"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "6.3.1.6",
                    "prevs": [
                        "6.3.1.1",
                        "6.3.1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi * (real_inverse 2 * 1) < pi * 1"
                },
                {
                    "args": "real_mult_assoc, pi * real_inverse 2 * 1 < pi * 1",
                    "id": "6.3.1.7",
                    "prevs": [
                        "6.3.1.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi * real_inverse 2 * 1 < pi * 1"
                },
                {
                    "args": "real_mul_rid, pi * real_inverse 2 < pi",
                    "id": "6.3.1.8",
                    "prevs": [
                        "6.3.1.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi * real_inverse 2 < pi"
                },
                {
                    "args": "real_divide_def, pi / 2 < pi",
                    "id": "6.3.1.9",
                    "prevs": [
                        "6.3.1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi / 2 < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "6.3.1.10",
                    "prevs": [
                        "6.3.1.4",
                        "6.3.1.9"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ 0 < sin (pi / 2)"
                },
                {
                    "args": "double_neg, ¬¬(0 < sin (pi / 2))",
                    "id": "6.3.1.11",
                    "prevs": [
                        "6.3.1.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬¬(0 < sin (pi / 2))"
                },
                {
                    "args": "real_not_lt, ¬(sin (pi / 2) ≤ 0)",
                    "id": "6.3.1.12",
                    "prevs": [
                        "6.3.1.11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) ≤ 0)"
                },
                {
                    "args": "disjI1, {}, {A: ¬(sin (pi / 2) ≤ 0), B: ¬(0 ≤ sin (pi / 2))}",
                    "id": "6.3.1.13",
                    "prevs": [
                        "6.3.1.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) ≤ 0) ∨ ¬(0 ≤ sin (pi / 2))"
                },
                {
                    "args": "de_morgan_thm1, ¬(sin (pi / 2) ≤ 0 ∧ 0 ≤ sin (pi / 2))",
                    "id": "6.3.1.14",
                    "prevs": [
                        "6.3.1.13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) ≤ 0 ∧ 0 ≤ sin (pi / 2))"
                },
                {
                    "args": "real_le_antisym, ¬(sin (pi / 2) = 0)",
                    "id": "6.3.1.15",
                    "prevs": [
                        "6.3.1.14"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) = 0)"
                },
                {
                    "args": "",
                    "id": "6.3.1.16",
                    "prevs": [
                        "6.3.1.0",
                        "6.3.1.15"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬(sin (pi / 2) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "6.3.2",
                    "prevs": [
                        "6.3.0",
                        "6.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = 0, 2 * sin (pi / 2) = 0 ⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.3.3",
                    "prevs": [
                        "6.3.0",
                        "6.3.2"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0 ⊢ sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "disjE",
                    "id": "6.4",
                    "prevs": [
                        "6.1",
                        "6.2",
                        "6.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0 ⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.5",
                    "prevs": [
                        "6.0",
                        "6.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 2 * sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "cos (pi / 2) = 0 ⟶ cos (pi / 2) = 0",
                    "id": "7",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ cos (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "disjE",
                    "id": "8",
                    "prevs": [
                        "5",
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (pi / 2) = 0"
                }
            ],
            "prop": "cos (pi / 2) = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "pi/2",
                    "theorem": "sin_double"
                },
                {
                    "goal": "2 * (pi/2) = pi",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "1",
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.0"
                    ],
                    "goal_id": "6.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "fact_ids": [
                        "6.1"
                    ],
                    "goal_id": "6.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.2.0"
                    ],
                    "goal_id": "6.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "6.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.2.1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "6.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.3.0"
                    ],
                    "goal_id": "6.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "6.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "pi_pos"
                },
                {
                    "goal_id": "6.3.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "6.3.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "6.3.1.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "pi = 2 * (pi / 2)",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ pi = 2 * (pi / 2)"
                },
                {
                    "args": "(2::real) * 0 ^ (2::nat) - 1 = -1",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (2::real) * 0 ^ (2::nat) - 1 = -1"
                },
                {
                    "args": "real_cos_pi2, 2 * cos (pi / 2) ^ (2::nat) - 1 = -1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 2 * cos (pi / 2) ^ (2::nat) - 1 = -1"
                },
                {
                    "args": "cos_double_cos, cos (2 * (pi / 2)) = -1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * (pi / 2)) = -1"
                },
                {
                    "args": "cos pi = -1",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos pi = -1"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos pi = -1"
                }
            ],
            "prop": "cos pi = -1",
            "steps": [
                {
                    "goal": "pi = 2 * (pi / 2)",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double_cos"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {}, {x: pi / 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (pi / 2) ^ (2::nat) + cos (pi / 2) ^ (2::nat) = 1"
                },
                {
                    "args": "real_cos_pi2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) ^ (2::nat) + 0 ^ (2::nat) = 1"
                },
                {
                    "args": "real_pow_2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) * sin (pi / 2) + 0 * 0 = 1"
                },
                {
                    "args": "real_mul_lzero",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) * sin (pi / 2) + 0 = 1"
                },
                {
                    "args": "real_add_rid",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) * sin (pi / 2) = 1"
                },
                {
                    "args": "∀x::real. x * x = 1 ⟷ x = 1 ∨ x = -1",
                    "id": "5",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x * x = 1 ⟷ x = 1 ∨ x = -1"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ sin (pi / 2) = 1 ∨ sin (pi / 2) = -1"
                },
                {
                    "args": "sin (pi / 2) = 1 ⟶ sin (pi / 2) = 1",
                    "id": "7",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ sin (pi / 2) = 1 ⟶ sin (pi / 2) = 1"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ sin (pi / 2) = -1 ⟶ sin (pi / 2) = 1"
                },
                {
                    "args": "sin (pi / 2) = -1",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sin (pi / 2) = -1 ⊢ sin (pi / 2) = -1"
                },
                {
                    "args": "",
                    "id": "8.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "sin (pi / 2) = -1 ⊢ ¬(sin (pi / 2) = 1) ⟶ ¬(sin (pi / 2) = -1)"
                },
                {
                    "args": "¬(sin (pi / 2) = 1)",
                    "id": "8.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(sin (pi / 2) = 1) ⊢ ¬(sin (pi / 2) = 1)"
                },
                {
                    "args": "∀x::real. 0 < x ⟶ ¬(x = -1)",
                    "id": "8.1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. 0 < x ⟶ ¬(x = -1)"
                },
                {
                    "args": "pi_pos",
                    "id": "8.1.2",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "0 < real_inverse 2",
                    "id": "8.1.3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 0 < real_inverse 2"
                },
                {
                    "args": "real_lt_mul",
                    "id": "8.1.4",
                    "prevs": [
                        "8.1.2",
                        "8.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ 0 < pi * real_inverse 2"
                },
                {
                    "args": "real_divide_def, 0 < pi / 2",
                    "id": "8.1.5",
                    "prevs": [
                        "8.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ 0 < pi / 2"
                },
                {
                    "args": "real_inverse 2 * 1 < 1",
                    "id": "8.1.6",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ real_inverse 2 * 1 < 1"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "8.1.7",
                    "prevs": [
                        "8.1.2",
                        "8.1.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi * (real_inverse 2 * 1) < pi * 1"
                },
                {
                    "args": "real_mult_assoc, pi * real_inverse 2 * 1 < pi * 1",
                    "id": "8.1.8",
                    "prevs": [
                        "8.1.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi * real_inverse 2 * 1 < pi * 1"
                },
                {
                    "args": "real_mul_rid, pi * real_inverse 2 < pi",
                    "id": "8.1.9",
                    "prevs": [
                        "8.1.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi * real_inverse 2 < pi"
                },
                {
                    "args": "real_divide_def, pi / 2 < pi",
                    "id": "8.1.10",
                    "prevs": [
                        "8.1.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi / 2 < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "8.1.11",
                    "prevs": [
                        "8.1.5",
                        "8.1.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ 0 < sin (pi / 2)"
                },
                {
                    "args": "sin (pi / 2)",
                    "id": "8.1.12",
                    "prevs": [
                        "8.1.1",
                        "8.1.11"
                    ],
                    "rule": "apply_fact_for",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ ¬(sin (pi / 2) = -1)"
                },
                {
                    "args": "",
                    "id": "8.1.13",
                    "prevs": [
                        "8.1.0",
                        "8.1.12"
                    ],
                    "rule": "intros",
                    "th": "sin (pi / 2) = -1 ⊢ ¬(sin (pi / 2) = 1) ⟶ ¬(sin (pi / 2) = -1)"
                },
                {
                    "args": "contrapositive",
                    "id": "8.2",
                    "prevs": [
                        "8.0",
                        "8.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1 ⊢ sin (pi / 2) = 1"
                },
                {
                    "args": "",
                    "id": "8.3",
                    "prevs": [
                        "8.0",
                        "8.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (pi / 2) = -1 ⟶ sin (pi / 2) = 1"
                },
                {
                    "args": "disjE",
                    "id": "9",
                    "prevs": [
                        "6",
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sin (pi / 2) = 1"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (pi / 2) = 1"
                }
            ],
            "prop": "sin (pi / 2) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "pi / 2",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_add_rid"
                },
                {
                    "goal": "!x::real. x * x = 1 <--> x = 1 | x = -1",
                    "goal_id": "5",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5",
                        "4"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "introduction"
                },
                {
                    "goal": "∀x::real. 0 < x ⟶ ¬(x = -1)",
                    "goal_id": "8.1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "8.1.1"
                    ],
                    "goal_id": "8.1.2",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "pi_pos"
                },
                {
                    "goal_id": "8.1.3",
                    "method_name": "z3"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_cos",
            "prop": "cos (pi / 2 - x) = sin x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_sin",
            "prop": "sin (pi / 2 - x) = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_periodic_pi_div2",
            "prop": "sin (x + pi / 2) = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_periodic_pi_div2",
            "prop": "cos (x + pi / 2) = -(sin x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_periodic_pi",
            "prop": "sin (x + pi) = -(sin x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_periodic_pi",
            "prop": "cos (x + pi) = -(cos x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite_sym"
            ],
            "name": "sin_periodic",
            "prop": "sin (x + 2 * pi) = sin x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_periodic",
            "prop": "cos (x + 2 * pi) = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_npi",
            "prop": "sin (of_nat n * pi) = 0",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_npi",
            "prop": "cos (of_nat n * pi) = -1 ^ n",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_pos_pi2",
            "prop": "0 < x ⟶ x < pi / 2 ⟶ 0 < cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi2",
            "prop": "0 < x ⟶ x < pi / 2 ⟶ 0 < sin x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_pos_pi",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ 0 < cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_pos_pi_le",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ 0 ≤ cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi_le",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ sin x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_pimul_eq_0",
            "prop": "sin (n * pi) = 0 ⟷ integer n",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq_0",
            "prop": "sin x = 0 ⟷ (∃n. integer n ∧ x = n * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_eq_0",
            "prop": "cos x = 0 ⟷ (∃n. integer n ∧ x = (n + 1 / 2) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_zero_pi",
            "prop": "sin x = 0 ⟷ (∃n. x = of_nat n * pi) ∨ (∃n. x = -(of_nat n * pi))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_zero_pi",
            "prop": [
                "cos x = 0 ⟷ ",
                "(∃n. x = (of_nat n + 1 / 2) * pi) ∨ (∃n. x = -((of_nat n + 1 / 2) * pi))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_zero",
            "prop": [
                "sin x = 0 ⟷ ",
                "(∃n. even n ∧ x = of_nat n * (pi / 2)) ∨ ",
                "(∃n. even n ∧ x = -(of_nat n * (pi / 2)))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_zero",
            "prop": [
                "cos x = 0 ⟷ ",
                "(∃n. ¬(even n) ∧ x = of_nat n * (pi / 2)) ∨ ",
                "(∃n. ¬(even n) ∧ x = -(of_nat n * (pi / 2)))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_one_2pi",
            "prop": "cos x = 1 ⟷ (∃n. x = of_nat n * 2 * pi) ∨ (∃n. x = -(of_nat n * 2 * pi))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_cos_sqrt",
            "prop": "0 ≤ sin x ⟶ sin x = sqrt (1 - cos x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_eq_0_pi",
            "prop": "-pi < x ⟶ x < pi ⟶ sin x = 0 ⟶ x = 0",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_treble_cos",
            "prop": "cos (3 * x) = 4 * cos x ^ (3::nat) - 3 * cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "real_cos_pi6",
            "prop": "cos (1 / 6 * pi) = sqrt 3 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi6",
            "prop": "sin (1 / 6 * pi) = 1 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi_rev",
            "prop": "0 ≤ x ⟶ x ≤ 2 * pi ⟶ 0 < sin x ⟶ 0 < x ∧ x < pi",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "real_sin_pi3",
            "prop": "sin (1 / 3 * pi) = sqrt 3 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi3",
            "prop": "cos (1 / 3 * pi) = 1 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_total_pos",
            "prop": "0 ≤ y ⟶ y ≤ 1 ⟶ (∃x. 0 ≤ x ∧ x ≤ pi / 2 ∧ sin x = y)",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_total_pi2",
            "prop": [
                "0 ≤ x ",
                "⟶ 0 ≤ y ",
                "   ⟶ x ^ (2::nat) + y ^ (2::nat) = 1 ",
                "      ⟶ (∃t. 0 ≤ t ∧ t ≤ pi / 2 ∧ x = cos t ∧ y = sin t)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_total_pi",
            "prop": [
                "0 ≤ y ",
                "⟶ x ^ (2::nat) + y ^ (2::nat) = 1 ⟶ (∃t. 0 ≤ t ∧ t ≤ pi ∧ x = cos t ∧ y = sin t)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_total_2pi",
            "prop": "x ^ (2::nat) + y ^ (2::nat) = 1 ⟶ (∃t. 0 ≤ t ∧ t < pi ∧ x = cos t ∧ y = sin t)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "circle_sincos",
            "prop": "x ^ (2::nat) + y ^ (2::nat) = 1 ⟶ (∃t. x = cos t ∧ y = sin t)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_integer_2pi",
            "prop": "integer n ⟶ sin (2 * pi * n) = 0",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_integer_pi",
            "prop": "integer n ⟶ sin (n * pi) = 0",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_integer_2pi",
            "prop": "integer n ⟶ cos (2 * pi * n) = 1",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sincos_principal_value",
            "prop": "∃y. (-pi < y ∧ y ≤ pi) ∧ sin y = sin x ∧ cos y = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_cos_eq",
            "prop": "sin y = sin x ∧ cos y = cos x ⟷ (∃n. integer n ∧ y = x + 2 * n * pi)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_cos_inj",
            "prop": "sin x = sin y ⟶ cos x = cos y ⟶ abs (x - y) < 2 * pi ⟶ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_eq_1",
            "prop": "cos x = 1 ⟷ (∃n. integer n ∧ x = 2 * n * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq_1",
            "prop": "sin x = 1 ⟷ (∃n. integer n ∧ x = (2 * n + 1 / 2) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq_minus1",
            "prop": "sin x = -1 ⟷ (∃n. integer n ∧ x = (2 * n + 3 / 2) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_eq_minus1",
            "prop": "cos x = -1 ⟷ (∃n. integer n ∧ x = (2 * n + 1) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq",
            "prop": [
                "sin x = sin y ⟷ ",
                "(∃n. integer n ∧ (x = y + 2 * n * pi ∨ x = -y + (2 * n + 1) * pi))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "name": "cos_eq",
            "prop": "cos x = cos y ⟷ (∃n. integer n ∧ (x = y + 2 * n * pi ∨ x = -y + 2 * n * pi))",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sin_0",
            "prop": "sin 0 = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi4",
            "prop": "sin (1 / 4 * pi) = sqrt 2 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_0",
            "prop": "cos 0 = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi4",
            "prop": "cos (1 / 4 * pi) = sqrt 2 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan",
            "prop": "tan x = sin x / cos x",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_sin_0, sin 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin 0 = 0"
                },
                {
                    "args": "disjI1, {}, {A: sin 0 = 0, B: cos 0 = 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin 0 = 0 ∨ cos 0 = 0"
                },
                {
                    "args": "real_div_eq_0, sin 0 / cos 0 = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin 0 / cos 0 = 0"
                },
                {
                    "args": "tan_def, tan 0 = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan 0 = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan 0 = 0"
                }
            ],
            "prop": "tan 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_div_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_0"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_sin_pi, sin pi = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi = 0"
                },
                {
                    "args": "disjI1, {}, {A: sin pi = 0, B: cos pi = 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin pi = 0 ∨ cos pi = 0"
                },
                {
                    "args": "real_div_eq_0, sin pi / cos pi = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi / cos pi = 0"
                },
                {
                    "args": "tan_def, tan pi = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan pi = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan pi = 0"
                }
            ],
            "prop": "tan pi = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_div_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_npi",
            "prop": "tan (of_nat n * pi) = 0",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_neg",
            "prop": "tan (-x) = -(tan x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_periodic_pi",
            "prop": "tan (x + pi) = tan x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_periodic_npi",
            "prop": "tan (x + of_nat n * pi) = tan x",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_add",
            "prop": [
                "¬(cos x = 0) ",
                "⟶ ¬(cos y = 0) ",
                "   ⟶ ¬(cos (x + y) = 0) ⟶ tan (x + y) = (tan x + tan y) / (1 - tan x * tan y)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_sub",
            "prop": [
                "¬(cos x = 0) ",
                "⟶ ¬(cos y = 0) ",
                "   ⟶ ¬(cos (x - y) = 0) ⟶ tan (x - y) = (tan x - tan y) / (1 + tan x * tan y)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_double",
            "prop": "tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cot_double",
            "prop": "real_inverse (tan (2 * x)) = (real_inverse (tan x) - tan x) / 2",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_cot_double",
            "prop": "tan x = 1 / tan x - 2 / tan (2 * x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_add_tan",
            "prop": "¬(cos x = 0) ⟶ ¬(cos y = 0) ⟶ tan x + tan y = sin (x + y) / (cos x * cos y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_sub_tan",
            "prop": "¬(cos x = 0) ⟶ ¬(cos y = 0) ⟶ tan x - tan y = sin (x - y) / (cos x * cos y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_pi4",
            "prop": "tan (pi / 4) = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_pos_pi2",
            "prop": "0 < x ⟶ x < pi / 2 ⟶ 0 < tan x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_pos_pi2_le",
            "prop": "0 ≤ x ⟶ x < pi / 2 ⟶ 0 ≤ tan x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_tan",
            "prop": "abs x < pi / 2 ⟶ cos x = 1 / sqrt (1 + tan x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_tan",
            "prop": "abs x < pi / 2 ⟶ cos x = tan x / sqrt (1 + tan x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_lt",
            "prop": "-(pi / 2) ≤ x ⟶ x < y ⟶ y ≤ pi / 2 ⟶ sin x < sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_le",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ y ⟶ y ≤ pi / 2 ⟶ sin x ≤ sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_lt_eq",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ -(pi / 2) ≤ y ⟶ y ≤ pi / 2 ⟶ sin x < sin y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_le_eq",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ -(pi / 2) ≤ y ⟶ y ≤ pi / 2 ⟶ sin x ≤ sin y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_inj_pi",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ -(pi / 2) ≤ y ⟶ y ≤ pi / 2 ⟶ sin x = sin y ⟶ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_lt",
            "prop": "0 ≤ x ⟶ x < y ⟶ y ≤ pi ⟶ cos x < cos y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_le",
            "prop": "0 ≤ x ⟶ x ≤ y ⟶ y ≤ pi ⟶ cos x ≤ cos y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_lt_eq",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ y ⟶ y ≤ pi ⟶ cos x < cos y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_le_eq",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ y ⟶ y ≤ pi ⟶ cos x ≤ cos y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_inj_pi",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ y ⟶ y ≤ pi ⟶ cos x = cos y ⟶ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_abs_cos_mono_le_eq",
            "prop": "abs x ≤ pi / 2 ⟶ abs y ≤ pi / 2 ⟶ abs (cos x) ≤ abs (cos y) ⟷ abs y ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_lt",
            "prop": "-(pi / 2) < x ⟶ x < y ⟶ y < pi / 2 ⟶ tan x < tan y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_le",
            "prop": "-(pi / 2) < x ⟶ x ≤ y ⟶ y < pi / 2 ⟶ tan x ≤ tan y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_lt_eq",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ -(pi / 2) < y ⟶ y < pi / 2 ⟶ tan x < tan y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_le_eq",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ -(pi / 2) < y ⟶ y < pi / 2 ⟶ tan x ≤ tan y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "tan_bound_pi2",
            "prop": "abs x < pi / 4 ⟶ abs (tan x) < 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_cot",
            "prop": "tan (pi / 2 - x) = real_inverse (tan x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_abs_sin_bound_lt",
            "prop": "¬(x = 0) ⟶ abs (sin x) < abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_abs_sin_bound_le",
            "prop": "abs (sin x) ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pi6_straddle",
            "prop": [
                "0 ≤ a ",
                "⟶ a ≤ b ⟶ b ≤ 4 ⟶ sin (a / 6) ≤ 1 / 2 ⟶ 1 / 2 ≤ sin (b / 6) ⟶ a ≤ pi ∧ pi ≤ b"
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn",
            "prop": "atn y = (THE x. -(pi / 2) < x ∧ x < pi / 2 ∧ tan x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_tan",
            "prop": "tan (atn y) = y",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_bound",
            "prop": "abs (atn y) < pi / 2",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_atn",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ atn (tan x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_0",
            "prop": "atn 0 = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_1",
            "prop": "atn 1 = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "atn_sqrt_3",
            "prop": "atn (3 ^ (1 / 2)) = pi / 3",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "atn_inv_sqrt_3",
            "prop": "atn (1 / 3 * 3 ^ (1 / 2)) = pi / 6",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite_sym"
            ],
            "name": "atn_neg",
            "prop": "atn (-x) = -(atn x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_mono_lt",
            "prop": "x < y ⟶ atn x < atn y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_mono_lt_eq",
            "prop": "atn x < atn y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_mono_le_eq",
            "prop": "atn x ≤ atn y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_inj",
            "prop": "atn x = atn y ⟷ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_pos_lt",
            "prop": "0 < atn x ⟷ 0 < x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_pos_le",
            "prop": "0 ≤ atn x ⟷ 0 ≤ x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_lt_pi4_pos",
            "prop": "x < 1 ⟶ atn x < pi / 4",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_lt_pi4_neg",
            "prop": "-1 < x ⟶ -(pi / 4) < atn x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_lt_pi4",
            "prop": "abs x < 1 ⟶ abs (atn x) < pi / 4",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_le_pi4",
            "prop": "abs x ≤ 1 ⟶ abs (atn x) ≤ pi / 4",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_atn_nz",
            "prop": "¬(cos (atn x) = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "tan_sec",
            "prop": "¬(cos x = 0) ⟶ 1 + tan x ^ (2::nat) = real_inverse (cos x) ^ (2::nat)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_atn",
            "prop": "cos (atn x) = 1 / sqrt (1 + x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_atn",
            "prop": "sin (atn x) = 1 / sqrt (x + x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_abs",
            "prop": "atn (abs x) = abs (atn x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_add",
            "prop": "abs (atn x + atn y) < pi / 2 ⟶ atn x + atn y = atn ((x + y) / (1 - x * y))",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_inv",
            "prop": "0 < x ⟶ atn (real_inverse x) = pi / 2 - atn x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_add_small",
            "prop": "abs (x * y) < 1 ⟶ atn x + atn y = atn ((x + y) / (1 - x * y))",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mathin",
            "prop": "4 * atn (1 / 5) - atn (1 / 239) = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mathin_euler",
            "prop": "5 * atn (1 / 7) + 2 * atn (3 / 79) = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mathin_gauss",
            "prop": "12 * atn (1 / 18) + 8 * atn (1 / 57) - 5 * atn (1 / 239) = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_abs_le_x",
            "prop": "abs (atn x) ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "asn",
            "prop": "asn y = (THE x. -pi / 2 ≤ x ∧ x ≤ pi / 2 ∧ sin x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "cos_asn",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ cos (asn x) = sqrt (1 - x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "acs",
            "prop": "acs y = (THE x. 0 ≤ x ∧ x ≤ pi ∧ cos x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "sin_acs",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ sin (acs x) = sqrt (1 - x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root",
            "prop": "root n x = real_sgn x * exp (log (abs x) / of_nat n)",
            "ty": "def",
            "type": "nat ⇒ real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs 0) / of_nat n) = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs 0) / of_nat n) = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log (abs 0) / of_nat n) = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 0 * exp (log (abs 0) / of_nat n) = 0"
                },
                {
                    "args": "root_def, root n 0 = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 0 = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n 0 = 0"
                }
            ],
            "prop": "root n 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(if (0::real) < 1 then (1::real) else if (1::real) < 0 then -1 else 0) * 1 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (if (0::real) < 1 then (1::real) else if (1::real) < 0 then -1 else 0) * 1 = 1"
                },
                {
                    "args": "real_exp_0, (if (0::real) < 1 then 1 else if (1::real) < 0 then -1 else 0) * exp 0 = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 1 then 1 else if (1::real) < 0 then -1 else 0) * exp 0 = 1"
                },
                {
                    "args": "real_sgn_def, real_sgn 1 * exp 0 = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp 0 = 1"
                },
                {
                    "args": "real_mul_lzero, real_sgn 1 * exp (0 * real_inverse (of_nat n)) = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (0 * real_inverse (of_nat n)) = 1"
                },
                {
                    "args": "real_divide_def, real_sgn 1 * exp (0 / of_nat n) = 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (0 / of_nat n) = 1"
                },
                {
                    "args": "log_1, real_sgn 1 * exp (log 1 / of_nat n) = 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (log 1 / of_nat n) = 1"
                },
                {
                    "args": "real_one_def, real_sgn (of_nat 1) * exp (log (of_nat 1) / of_nat n) = of_nat 1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ real_sgn (of_nat 1) * exp (log (of_nat 1) / of_nat n) = of_nat 1"
                },
                {
                    "args": "real_abs_nat, real_sgn (of_nat 1) * exp (log (abs (of_nat 1)) / of_nat n) = of_nat 1",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (of_nat 1) * exp (log (abs (of_nat 1)) / of_nat n) = of_nat 1"
                },
                {
                    "args": "real_one_def, real_sgn 1 * exp (log (abs 1) / of_nat n) = 1",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (log (abs 1) / of_nat n) = 1"
                },
                {
                    "args": "root_def, root n 1 = 1",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 1 = 1"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n 1 = 1"
                }
            ],
            "prop": "root n 1 = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {}, {x: log (abs x) / of_nat 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat 2)"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (exp (log (abs x) / of_nat 2)) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (exp (log (abs x) / of_nat 2)) = 1"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 = real_sgn x",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * 1 = real_sgn x"
                },
                {
                    "args": "real_sgn x * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ real_sgn x * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "real_sgn_real_sgn, real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "real_sgn_mul, real_sgn (real_sgn x * exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x * exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "root_def, real_sgn (root 2 x) = real_sgn x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (root 2 x) = real_sgn x"
                },
                {
                    "args": "real_abs_pos, {}, {x: x}",
                    "id": "7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ abs x"
                },
                {
                    "args": "real_le_lt",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 < abs x ∨ 0 = abs x"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "0 < abs x",
                    "id": "9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < abs x ⊢ 0 < abs x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (abs x) = 1",
                    "id": "9.1",
                    "prevs": [
                        "9.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ real_sgn (abs x) = 1"
                },
                {
                    "args": "∀x. 2 * (x / 2) = x",
                    "id": "9.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x. 2 * (x / 2) = x"
                },
                {
                    "args": "exp_log",
                    "id": "9.3",
                    "prevs": [
                        "9.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < abs x ⊢ exp (log (abs x)) = abs x"
                },
                {
                    "args": "exp (2 * (log (abs x) / 2)) = abs x",
                    "id": "9.4",
                    "prevs": [
                        "9.2",
                        "9.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < abs x ⊢ exp (2 * (log (abs x) / 2)) = abs x"
                },
                {
                    "args": "real_of_nat_id, exp (of_nat 2 * (log (abs x) / of_nat 2)) = abs x",
                    "id": "9.5",
                    "prevs": [
                        "9.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ exp (of_nat 2 * (log (abs x) / of_nat 2)) = abs x"
                },
                {
                    "args": "real_exp_n, exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.6",
                    "prevs": [
                        "9.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < abs x ⊢ exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_mul_lid, 1 * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.7",
                    "prevs": [
                        "9.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ 1 * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.8",
                    "prevs": [
                        "9.1",
                        "9.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < abs x ⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "9.9",
                    "prevs": [
                        "9.0",
                        "9.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 = abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "0 = abs x",
                    "id": "10.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = abs x ⊢ 0 = abs x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "10.1",
                    "prevs": [
                        "10.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = abs x ⊢ abs x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0",
                    "id": "10.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0",
                    "id": "10.3",
                    "prevs": [
                        "10.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 = abs x ⊢ real_sgn 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0"
                },
                {
                    "args": "real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "10.4",
                    "prevs": [
                        "10.1",
                        "10.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = abs x ⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "10.5",
                    "prevs": [
                        "10.0",
                        "10.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 = abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "disjE",
                    "id": "11",
                    "prevs": [
                        "8",
                        "9",
                        "10"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn_pow_2, real_sgn (x ^ (2::nat)) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (x ^ (2::nat)) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn_pow, real_sgn x ^ (2::nat) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ real_sgn x ^ (2::nat) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_pow_mul, (real_sgn x * exp (log (abs x) / of_nat 2)) ^ (2::nat) = abs x",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat 2)) ^ (2::nat) = abs x"
                },
                {
                    "args": "root_def, root 2 x ^ (2::nat) = abs x",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root 2 x ^ (2::nat) = abs x"
                },
                {
                    "args": "sqrt_unique_gen",
                    "id": "16",
                    "prevs": [
                        "6",
                        "15"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sqrt x = root 2 x"
                },
                {
                    "args": "eq_sym_eq, root 2 x = sqrt x",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root 2 x = sqrt x"
                },
                {
                    "args": "",
                    "id": "18",
                    "prevs": [
                        "17"
                    ],
                    "rule": "intros",
                    "th": "⊢ root 2 x = sqrt x"
                }
            ],
            "prop": "root 2 x = sqrt x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "sqrt_unique_gen"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_real_sgn"
                },
                {
                    "goal": "real_sgn (exp (log (abs x) / of_nat 2)) = 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_mul"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_sgn_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_pow_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_abs_pos"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "9",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn (abs x) = 1",
                    "goal_id": "9.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "9.1"
                    ],
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal": "∀x. 2 * (x / 2) = x",
                    "goal_id": "9.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_id"
                },
                {
                    "fact_ids": [
                        "9.2"
                    ],
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "10",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "10.0"
                    ],
                    "goal_id": "10.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "10.1"
                    ],
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "root_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lneg, -(real_sgn x) * exp (log (abs x) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_sgn x) * exp (log (abs x) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_abs_neg, -(real_sgn x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_sgn x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_sgn_neg, real_sgn (-x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (-x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "root_def, root n (-x) = -(root n x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (-x) = -(root n x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (-x) = -(root n x)"
                }
            ],
            "prop": "root n (-x) = -(root n x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_works_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {}, {x: log (abs x) / of_nat n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (exp (log (abs x) / of_nat n)) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (exp (log (abs x) / of_nat n)) = 1"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 = real_sgn x",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * 1 = real_sgn x"
                },
                {
                    "args": "real_sgn x * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ real_sgn x * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "real_sgn_real_sgn, real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "real_sgn_mul, real_sgn (real_sgn x * exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x * exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "root_def, real_sgn (root n x) = real_sgn x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (root n x) = real_sgn x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_sgn (root n x) = real_sgn x"
                }
            ],
            "prop": "real_sgn (root n x) = real_sgn x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_real_sgn"
                },
                {
                    "goal": "real_sgn (exp (log (abs x) / of_nat n)) = 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_works_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "real_nat_power_def_1, (real_sgn x * exp (log (abs x) / of_nat 0)) ^ (0::nat) = 1",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat 0)) ^ (0::nat) = 1"
                },
                {
                    "args": "(real_sgn x * exp (log (abs x) / of_nat n)) ^ n = 1",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = 1"
                },
                {
                    "args": "if_P, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "∀x. ∀y. ¬(x = 0) ⟶ x * (y / x) = y",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x. ∀y. ¬(x = 0) ⟶ x * (y / x) = y"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ ¬((of_nat::nat ⇒ real) n = of_nat 0)"
                },
                {
                    "args": "real_zero_def",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ ¬(of_nat n = (0::real))"
                },
                {
                    "args": "(of_nat::nat ⇒ real) n",
                    "id": "1.4",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "forall_elim",
                    "th": "⊢ ∀y. ¬(of_nat n = (0::real)) ⟶ of_nat n * (y / of_nat n) = y"
                },
                {
                    "args": "log (abs x)",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "forall_elim",
                    "th": "⊢ ¬(of_nat n = (0::real)) ⟶ of_nat n * (log (abs x) / of_nat n) = log (abs x)"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.5",
                        "1.3"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(n = 0) ⊢ of_nat n * (log (abs x) / of_nat n) = log (abs x)"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ x = 0 ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "x = 0",
                    "id": "1.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs 0)) = 0 * abs 0",
                    "id": "1.7.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs 0)) = 0 * abs 0"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else 0) * exp (log (abs 0)) = (if n = 0 then 1 else 0) * abs 0",
                    "id": "1.7.2",
                    "prevs": [
                        "1.7.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ (if n = 0 then 1 else 0) * exp (log (abs 0)) = (if n = 0 then 1 else 0) * abs 0"
                },
                {
                    "args": "real_pow_zero, 0 ^ n * exp (log (abs 0)) = 0 ^ n * abs 0",
                    "id": "1.7.3",
                    "prevs": [
                        "1.7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ 0 ^ n * exp (log (abs 0)) = 0 ^ n * abs 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 ^ n * exp (log (abs 0)) = real_sgn 0 ^ n * abs 0",
                    "id": "1.7.4",
                    "prevs": [
                        "1.7.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ real_sgn 0 ^ n * exp (log (abs 0)) = real_sgn 0 ^ n * abs 0"
                },
                {
                    "args": "real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x",
                    "id": "1.7.5",
                    "prevs": [
                        "1.7.0",
                        "1.7.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.7.6",
                    "prevs": [
                        "1.7.0",
                        "1.7.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ x = 0 ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < abs x",
                    "id": "1.8.1",
                    "prevs": [
                        "1.8.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "exp_log",
                    "id": "1.8.2",
                    "prevs": [
                        "1.8.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(x = 0) ⊢ exp (log (abs x)) = abs x"
                },
                {
                    "args": "real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x",
                    "id": "1.8.3",
                    "prevs": [
                        "1.8.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), ¬(x = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.8.4",
                    "prevs": [
                        "1.8.0",
                        "1.8.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "classical_cases",
                    "id": "1.9",
                    "prevs": [
                        "1.7",
                        "1.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_sgn x ^ n * exp (of_nat n * (log (abs x) / of_nat n)) = real_sgn x ^ n * abs x",
                    "id": "1.10",
                    "prevs": [
                        "1.6",
                        "1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (of_nat n * (log (abs x) / of_nat n)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_exp_n, real_sgn x ^ n * exp (log (abs x) / of_nat n) ^ n = real_sgn x ^ n * abs x",
                    "id": "1.11",
                    "prevs": [
                        "1.10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x) / of_nat n) ^ n = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_pow_mul, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = real_sgn x ^ n * abs x",
                    "id": "1.12",
                    "prevs": [
                        "1.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = real_sgn x ^ n * abs x"
                },
                {
                    "args": "if_not_P, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "1.13",
                    "prevs": [
                        "1.12",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "1.14",
                    "prevs": [
                        "1.0",
                        "1.13"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "root_def, root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                }
            ],
            "prop": "root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "case": "n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_mul"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal": "!x::real. !y. ~(x =0) --> x *(y/x) = y",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.4",
                    "method_name": "forall_elim",
                    "s": "(of_nat::nat ⇒ real) n"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "forall_elim",
                    "s": "log (abs x)"
                },
                {
                    "fact_ids": [
                        "1.5",
                        "1.3"
                    ],
                    "goal_id": "1.6",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.6"
                    ],
                    "goal_id": "1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.7",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.7.0"
                    ],
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_zero"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1.8",
                    "method_name": "introduction"
                },
                {
                    "goal": "exp (log (abs x)) = abs x",
                    "goal_id": "1.8.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1.8.0"
                    ],
                    "goal_id": "1.8.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.8.2"
                    ],
                    "goal_id": "1.8.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "real_pow_root_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "odd n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "odd_exists",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "odd n ⊢ ∃m. n = Suc (2 * m)"
                },
                {
                    "args": "m, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = Suc (2 * m)",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = Suc (2 * m) ⊢ n = Suc (2 * m)"
                },
                {
                    "args": "nat_zero_Suc_neq, {}, {n: 2 * m}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc (2 * m))"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc (2 * m) = 0)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(Suc (2 * m) = 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), odd n ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd n, n = Suc (2 * m) ⊢ x = 0 ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "x = 0",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, (0::real) * abs 0 = 0",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) * abs 0 = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * real_sgn (abs 0) ^ m * abs 0 = 0",
                    "id": "7.2",
                    "prevs": [
                        "7.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), x = 0 ⊢ 0 * real_sgn (abs 0) ^ m * abs 0 = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * real_sgn (abs 0) ^ m * abs 0 = 0",
                    "id": "7.3",
                    "prevs": [
                        "7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), x = 0 ⊢ real_sgn 0 * real_sgn (abs 0) ^ m * abs 0 = 0"
                },
                {
                    "args": "real_sgn x * real_sgn (abs x) ^ m * abs x = x",
                    "id": "7.4",
                    "prevs": [
                        "7.0",
                        "7.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "7.5",
                    "prevs": [
                        "7.0",
                        "7.4"
                    ],
                    "rule": "intros",
                    "th": "odd n, n = Suc (2 * m) ⊢ x = 0 ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(x = 0) ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < abs x",
                    "id": "8.1",
                    "prevs": [
                        "8.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (abs x) = 1",
                    "id": "8.2",
                    "prevs": [
                        "8.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn (abs x) = 1"
                },
                {
                    "args": "real_sgn_abs, real_sgn x * abs x = x",
                    "id": "8.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * abs x = x"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 * abs x = x",
                    "id": "8.4",
                    "prevs": [
                        "8.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * 1 * abs x = x"
                },
                {
                    "args": "real_pow_one, real_sgn x * 1 ^ m * abs x = x",
                    "id": "8.5",
                    "prevs": [
                        "8.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * 1 ^ m * abs x = x"
                },
                {
                    "args": "real_sgn x * real_sgn (abs x) ^ m * abs x = x",
                    "id": "8.6",
                    "prevs": [
                        "8.2",
                        "8.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "8.7",
                    "prevs": [
                        "8.0",
                        "8.6"
                    ],
                    "rule": "intros",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(x = 0) ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "classical_cases",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "real_sgn_pow_2, real_sgn x * real_sgn (x ^ (2::nat)) ^ m * abs x = x",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (x ^ (2::nat)) ^ m * abs x = x"
                },
                {
                    "args": "real_sgn_pow, real_sgn x * real_sgn x ^ (2::nat) ^ m * abs x = x",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn x ^ (2::nat) ^ m * abs x = x"
                },
                {
                    "args": "real_pow_pow, real_sgn x * real_sgn x ^ (2 * m) * abs x = x",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn x ^ (2 * m) * abs x = x"
                },
                {
                    "args": "real_nat_power_def_2, real_sgn x ^ Suc (2 * m) * abs x = x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x ^ Suc (2 * m) * abs x = x"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "14",
                    "prevs": [
                        "3",
                        "13"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), odd n ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn x ^ n * abs x) = x",
                    "id": "15",
                    "prevs": [
                        "14",
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = Suc (2 * m), odd n ⊢ (if n = 0 then 1 else real_sgn x ^ n * abs x) = x"
                },
                {
                    "args": "root_works_2, root n x ^ n = x",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ root n x ^ n = x"
                },
                {
                    "args": "∃m. n = Suc (2 * m)",
                    "id": "17",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "16"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd n ⟶ root n x ^ n = x"
                }
            ],
            "prop": "odd n ⟶ root n x ^ n = x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_exists"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "goal": "~(n = 0)",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_sgn_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_pow_2"
                },
                {
                    "case": "x = 0",
                    "goal_id": "7",
                    "method_name": "cases"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn (abs x) = 1",
                    "goal_id": "8.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "8.2"
                    ],
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_abs"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "real_pow_root_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = 0 ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "x = 0",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_rzero, (0::real) ^ n * 0 = 0",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) ^ n * 0 = 0"
                },
                {
                    "args": "real_abs_0, (0::real) ^ n * abs 0 = 0",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, x = 0 ⊢ (0::real) ^ n * abs 0 = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 ^ n * abs 0 = 0",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, x = 0 ⊢ real_sgn 0 ^ n * abs 0 = 0"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = 0 ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "3.1",
                    "prevs": [
                        "1",
                        "3.0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ 0 < x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn x = 1",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ real_sgn x = 1"
                },
                {
                    "args": "abs x = x",
                    "id": "3.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x ⊢ abs x = x"
                },
                {
                    "args": "real_mul_lid, 1 * abs x = x",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ 1 * abs x = x"
                },
                {
                    "args": "real_pow_one, 1 ^ n * abs x = x",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ 1 ^ n * abs x = x"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "3.6",
                    "prevs": [
                        "3.2",
                        "3.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "classical_cases",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 ≤ x ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn x ^ n * abs x) = x",
                    "id": "5",
                    "prevs": [
                        "4",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x ⊢ (if n = 0 then 1 else real_sgn x ^ n * abs x) = x"
                },
                {
                    "args": "root_works_2, root n x ^ n = x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x ⊢ root n x ^ n = x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ x ⟶ root n x ^ n = x"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ x ⟶ root n x ^ n = x",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn x = 1",
                    "goal_id": "3.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "1",
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "(0::real) < (if 0 < x then 1 else if x < 0 then -1 else 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ (0::real) < (if 0 < x then 1 else if x < 0 then -1 else 0)"
                },
                {
                    "args": "real_sgn_def, 0 < real_sgn x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < real_sgn x"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: log (abs x) / of_nat n}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "real_lt_mul",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 0 < real_sgn x * exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "root_def, 0 < root n x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                }
            ],
            "prop": "0 < x ⟶ 0 < root n x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_le_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "0 < x",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "root_pos_lt, {}, {n: n, x: x}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "disjI1, {}, {A: 0 < root n x, B: 0 = root n x}",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, 0 < x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "0 = x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "root_0, 0 = root n 0",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = root n 0"
                },
                {
                    "args": "0 = root n x",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, 0 ≤ x ⊢ 0 = root n x"
                },
                {
                    "args": "disjI2, {}, {A: 0 < root n x, B: 0 = root n x}",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, 0 = x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "disjE",
                    "id": "4",
                    "prevs": [
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "real_le_lt, 0 ≤ root n x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ root n x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_lt_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < root n x ⟶ 0 < x"
                },
                {
                    "args": "0 < root n x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < root n x ⊢ 0 < root n x"
                },
                {
                    "args": "real_less_def",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 < root n x ⊢ ¬(root n x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < root n x ⊢ ¬¬(x ≤ 0) ⟶ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "¬¬(x ≤ 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(x ≤ 0) ⊢ ¬¬(x ≤ 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x ≤ 0) ⊢ x ≤ 0"
                },
                {
                    "args": "∀x::real. x ≤ 0 ⟷ 0 ≤ -x",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x ≤ 0 ⟷ 0 ≤ -x"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ -x"
                },
                {
                    "args": "root_pos_le, {}, {n: n, x: -x}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ root n (-x)"
                },
                {
                    "args": "root_neg",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ -(root n x)"
                },
                {
                    "args": "root n x ≤ 0",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.2",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < root n x, ¬¬(x ≤ 0) ⊢ root n x ≤ 0"
                },
                {
                    "args": "double_neg, ¬¬(root n x ≤ 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < root n x, ¬¬(x ≤ 0) ⊢ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 < root n x ⊢ ¬¬(x ≤ 0) ⟶ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < root n x ⊢ ¬(x ≤ 0)"
                },
                {
                    "args": "real_less_def, 0 < x",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < root n x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < root n x ⟶ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                },
                {
                    "args": "0 < x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "root_pos_lt, {}, {n: n, x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < root n x ⟷ 0 < x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < root n x ⟷ 0 < x"
                }
            ],
            "prop": "0 < root n x ⟷ 0 < x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal": "!x::real. x ≤ 0 ⟷ 0 ≤ -x",
                    "goal_id": "0.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.2"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "root_pos_le"
                },
                {
                    "fact_ids": [
                        "0.2.4"
                    ],
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "root_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_le_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ root n x ⟶ 0 ≤ x"
                },
                {
                    "args": "0 ≤ root n x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ root n x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "real_not_lt",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "0 ≤ root n x ⊢ ¬(root n x < 0)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ root n x ⊢ ¬¬(x < 0) ⟶ ¬¬(root n x < 0)"
                },
                {
                    "args": "¬¬(x < 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(x < 0) ⊢ ¬¬(x < 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x < 0) ⊢ x < 0"
                },
                {
                    "args": "∀x::real. x < 0 ⟷ 0 < -x",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x < 0 ⟷ 0 < -x"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬¬(x < 0) ⊢ 0 < -x"
                },
                {
                    "args": "root_pos_lt, {}, {n: n, x: -x}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬¬(x < 0) ⊢ 0 < root n (-x)"
                },
                {
                    "args": "root_neg, 0 < -(root n x)",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ 0 < -(root n x)"
                },
                {
                    "args": "root n x < 0",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.2",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ root n x < 0"
                },
                {
                    "args": "double_neg, ¬¬(root n x < 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ ¬¬(root n x < 0)"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ root n x ⊢ ¬¬(x < 0) ⟶ ¬¬(root n x < 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ root n x ⊢ ¬(x < 0)"
                },
                {
                    "args": "real_not_lt, 0 ≤ x",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ root n x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ root n x ⟶ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "root_pos_le, {}, {n: n, x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ root n x ⟷ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ root n x ⟷ 0 ≤ x"
                }
            ],
            "prop": "0 ≤ root n x ⟷ 0 ≤ x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal": "∀x::real. x < 0 ⟷ 0 < -x",
                    "goal_id": "0.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2.2"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "root_neg"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_eq_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ⟶ x = 0"
                },
                {
                    "args": "real_sgn x = 0",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "real_sgn x = 0 ⊢ real_sgn x = 0"
                },
                {
                    "args": "real_sgn_eq_0",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "real_sgn x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "exp (log (abs x) / of_nat n) = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "exp (log (abs x) / of_nat n) = 0 ⊢ ¬¬(exp (log (abs x) / of_nat n) = 0)"
                },
                {
                    "args": "real_exp_nz, {}, {x: log (abs x) / of_nat n}",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp (log (abs x) / of_nat n) = 0)"
                },
                {
                    "args": "negE_gen, {}, {A: ¬(exp (log (abs x) / of_nat n) = 0), C: x = 0}",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.1",
                        "0.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "exp (log (abs x) / of_nat n) = 0, real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.0",
                        "0.2.3"
                    ],
                    "rule": "intros",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "x = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_sgn_eq_0, real_sgn x = 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ real_sgn x = 0"
                },
                {
                    "args": "disjI1, {}, {A: real_sgn x = 0, B: exp (log (abs x) / of_nat n) = 0}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟷ x = 0"
                },
                {
                    "args": "real_entire, real_sgn x * exp (log (abs x) / of_nat n) = 0 ⟷ x = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * exp (log (abs x) / of_nat n) = 0 ⟷ x = 0"
                },
                {
                    "args": "root_def, root n x = 0 ⟷ x = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x = 0 ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n x = 0 ⟷ x = 0"
                }
            ],
            "prop": "root n x = 0 ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sgn_eq_0"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_root_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 = 0 * root n y",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 * root n y"
                },
                {
                    "args": "root_0, root n 0 = root n 0 * root n y",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ root n 0 = root n 0 * root n y"
                },
                {
                    "args": "real_mul_lzero, root n (0 * y) = root n 0 * root n y",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ root n (0 * y) = root n 0 * root n y"
                },
                {
                    "args": "root n (x * y) = root n x * root n y",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0 ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ y = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "y = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "real_mul_rzero, 0 = root n x * 0",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = root n x * 0"
                },
                {
                    "args": "root_0, root n 0 = root n x * root n 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), y = 0 ⊢ root n 0 = root n x * root n 0"
                },
                {
                    "args": "real_mul_rzero, root n (x * 0) = root n x * root n 0",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), y = 0 ⊢ root n (x * 0) = root n x * root n 0"
                },
                {
                    "args": "root n (x * y) = root n x * root n y",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y = 0, ¬(x = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ y = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(y = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "∀x::real. ¬(x = 0) ⟷ 0 < abs x",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. ¬(x = 0) ⟷ 0 < abs x"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1",
                        "1.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(y = 0) ⊢ 0 < abs y"
                },
                {
                    "args": "log_mul, {}, {x: abs x, y: abs y}",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ log (abs x * abs y) = log (abs x) + log (abs y)"
                },
                {
                    "args": "real_sgn x * real_sgn y * (exp (log (abs x) * real_inverse (of_nat n)) * exp (log (abs y) * real_inverse (of_nat n))) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.5",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ real_sgn x * real_sgn y * (exp (log (abs x) * real_inverse (of_nat n)) * exp (log (abs y) * real_inverse (of_nat n))) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_exp_add, real_sgn x * real_sgn y * exp (log (abs x) * real_inverse (of_nat n) + log (abs y) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs x) * real_inverse (of_nat n) + log (abs y) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_add_rdistrib, real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_divide_def, real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_sgn x * real_sgn y * exp (log (abs x * abs y) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.4",
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs x * abs y) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_abs_mul, real_sgn x * real_sgn y * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_sgn_mul, real_sgn (x * y) * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn (x * y) * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "root_def, root n (x * y) = root n x * root n y",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.2.13",
                    "prevs": [
                        "1.2.0",
                        "1.2.12"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(y = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (x * y) = root n x * root n y"
                }
            ],
            "prop": "root n (x * y) = root n x * root n y",
            "steps": [
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "y = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_mul"
                },
                {
                    "goal": "!x::real. ~(x = 0) <--> 0 < abs x",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1",
                        "1.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1",
                        "1.2.0"
                    ],
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_root_pow_gen",
            "prop": "root n (x ^ m) = root n x ^ m",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_root_pow1",
            "prop": "odd n ⟶ root n (x ^ n) = x",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_root_pow2",
            "prop": "¬(n = 0) ⟶ 0 ≤ x ⟶ root n (x ^ n) = x",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "root_unique",
            "prop": "y ^ n = x ⟶ odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⟶ root n x = y",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "power",
            "prop": [
                "x ^ y = ",
                "(if 0 < x then ",
                "   exp (y * log x)",
                " else ",
                "   if x = 0 then ",
                "     if y = 0 then 1 else 0",
                "   else ",
                "     if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then ",
                "       -(exp (y * log (-x)))",
                "     else ",
                "       exp (y * log (-x)))"
            ],
            "ty": "def",
            "type": "real ⇒ real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_pow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "0 < x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log, {}, {x: x}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp (log x) ^ n = x ^ n",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log x) ^ n = x ^ n"
                },
                {
                    "args": "real_exp_n, exp (of_nat n * log x) = x ^ n",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (of_nat n * log x) = x ^ n"
                },
                {
                    "args": "if_P, (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "0.4",
                    "prevs": [
                        "0.3",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "x = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_zero_def, (if n = 0 then (1::real) else of_nat 0) = (if n = 0 then 1 else 0)",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if n = 0 then (1::real) else of_nat 0) = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "real_pow_zero, (if n = 0 then (1::real) else of_nat 0) = 0 ^ n",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0 ⊢ (if n = 0 then (1::real) else of_nat 0) = 0 ^ n"
                },
                {
                    "args": "(if n = 0 then 1 else of_nat 0) = x ^ n",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(0 < x) ⊢ (if n = 0 then 1 else of_nat 0) = x ^ n"
                },
                {
                    "args": "real_of_nat_eq, (if (of_nat::nat ⇒ real) n = of_nat 0 then 1 else of_nat 0) = x ^ n",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0 ⊢ (if (of_nat::nat ⇒ real) n = of_nat 0 then 1 else of_nat 0) = x ^ n"
                },
                {
                    "args": "real_zero_def, (if of_nat n = (0::real) then 1 else 0) = x ^ n",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0 ⊢ (if of_nat n = (0::real) then 1 else 0) = x ^ n"
                },
                {
                    "args": "if_P, (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.5",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(0 < x) ⊢ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.1.7",
                    "prevs": [
                        "1.1.0",
                        "1.1.6"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟶ odd n"
                },
                {
                    "args": "∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1 ⊢ ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1"
                },
                {
                    "args": "p, nat",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "q, nat",
                    "id": "1.2.1.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q",
                    "id": "1.2.1.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q"
                },
                {
                    "args": "conjD1, {}, {A: odd p, B: odd q ∧ of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd p"
                },
                {
                    "args": "conjD2, {}, {A: odd p, B: odd q ∧ of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd q ∧ of_nat n = of_nat p / of_nat q"
                },
                {
                    "args": "conjD1, {}, {A: odd q, B: of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.6",
                    "prevs": [
                        "1.2.1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd q"
                },
                {
                    "args": "conjD2, {}, {A: odd q, B: of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.7",
                    "prevs": [
                        "1.2.1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ of_nat n = of_nat p / of_nat q"
                },
                {
                    "args": "",
                    "id": "1.2.1.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ q = 0 ⟶ odd n"
                },
                {
                    "args": "q = 0",
                    "id": "1.2.1.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q = 0 ⊢ q = 0"
                },
                {
                    "args": "",
                    "id": "1.2.1.8.1",
                    "prevs": [
                        "1.2.1.8.0",
                        "1.2.1.6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "q = 0, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd 0"
                },
                {
                    "args": "odd_def_1",
                    "id": "1.2.1.8.2",
                    "prevs": [
                        "1.2.1.8.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q = 0, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ false"
                },
                {
                    "args": "not_false_res, odd n",
                    "id": "1.2.1.8.3",
                    "prevs": [
                        "1.2.1.8.2"
                    ],
                    "rule": "resolve_theorem",
                    "th": "q = 0, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.1.8.4",
                    "prevs": [
                        "1.2.1.8.0",
                        "1.2.1.8.3"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ q = 0 ⟶ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.1.9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ ¬(q = 0) ⟶ odd n"
                },
                {
                    "args": "¬(q = 0)",
                    "id": "1.2.1.9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(q = 0) ⊢ ¬(q = 0)"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2.1.9.1",
                    "prevs": [
                        "1.2.1.9.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(q = 0) ⊢ ¬((of_nat::nat ⇒ real) q = of_nat 0)"
                },
                {
                    "args": "(of_nat::nat ⇒ real) q * of_nat n = of_nat p",
                    "id": "1.2.1.9.2",
                    "prevs": [
                        "1.2.1.9.1",
                        "1.2.1.7"
                    ],
                    "rule": "z3",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ (of_nat::nat ⇒ real) q * of_nat n = of_nat p"
                },
                {
                    "args": "real_of_nat_mul",
                    "id": "1.2.1.9.3",
                    "prevs": [
                        "1.2.1.9.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ (of_nat::nat ⇒ real) (q * n) = of_nat p"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2.1.9.4",
                    "prevs": [
                        "1.2.1.9.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ q * n = p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.2.1.9.5",
                    "prevs": [
                        "1.2.1.9.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ p = q * n"
                },
                {
                    "args": "",
                    "id": "1.2.1.9.6",
                    "prevs": [
                        "1.2.1.9.5",
                        "1.2.1.4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd (q * n)"
                },
                {
                    "args": "odd_mult",
                    "id": "1.2.1.9.7",
                    "prevs": [
                        "1.2.1.9.6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd q ∧ odd n"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.1.9.8",
                    "prevs": [
                        "1.2.1.9.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.1.9.9",
                    "prevs": [
                        "1.2.1.9.0",
                        "1.2.1.9.8"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ ¬(q = 0) ⟶ odd n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.1.10",
                    "prevs": [
                        "1.2.1.8",
                        "1.2.1.9"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd n"
                },
                {
                    "args": "∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1",
                    "id": "1.2.1.11",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.0",
                        "1.2.1.1",
                        "1.2.1.2",
                        "1.2.1.3",
                        "1.2.1.10"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟶ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1)"
                },
                {
                    "args": "odd n",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "trueI",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ even 0"
                },
                {
                    "args": "not_odd, ¬(odd 0)",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ ¬(odd 0)"
                },
                {
                    "args": "odd_def_2, odd (Suc 0)",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd (Suc 0)"
                },
                {
                    "args": "nat_one_def, odd 1",
                    "id": "1.2.2.5",
                    "prevs": [
                        "1.2.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd 1"
                },
                {
                    "args": "of_nat n = of_nat n / of_nat 1",
                    "id": "1.2.2.6",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ of_nat n = of_nat n / of_nat 1"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.7",
                    "prevs": [
                        "1.2.2.5",
                        "1.2.2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd 1 ∧ of_nat n = of_nat n / of_nat 1"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.8",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd n ∧ odd 1 ∧ of_nat n = of_nat n / of_nat 1"
                },
                {
                    "args": "exI, {a: nat}, {P: λn1. odd n ∧ odd n1 ∧ of_nat n = of_nat n / of_nat n1, a: (1::nat)}",
                    "id": "1.2.2.9",
                    "prevs": [
                        "1.2.2.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ ∃a1. odd n ∧ odd a1 ∧ of_nat n = of_nat n / of_nat a1"
                },
                {
                    "args": "exI, {a: nat}, {P: λm. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, a: n}",
                    "id": "1.2.2.10",
                    "prevs": [
                        "1.2.2.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1"
                },
                {
                    "args": "",
                    "id": "1.2.2.11",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.10"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1)"
                },
                {
                    "args": "iffI",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟷ odd n"
                },
                {
                    "args": "0 < -x",
                    "id": "1.2.4",
                    "prevs": [
                        "1.0",
                        "1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ 0 < -x"
                },
                {
                    "args": "exp_log, {}, {x: -x}",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ exp (log (-x)) = -x"
                },
                {
                    "args": "",
                    "id": "1.2.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "odd n",
                    "id": "1.2.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "real_neg_neg, --(x ^ n) = x ^ n",
                    "id": "1.2.6.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ --(x ^ n) = x ^ n"
                },
                {
                    "args": "if_not_P2, -(if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.6.2",
                    "prevs": [
                        "1.2.6.1",
                        "1.2.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(0 < x), ¬(x = 0) ⊢ -(if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "not_odd, -(if even n then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.6.3",
                    "prevs": [
                        "1.2.6.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(if even n then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "real_pow_neg, -(-x ^ n) = x ^ n",
                    "id": "1.2.6.4",
                    "prevs": [
                        "1.2.6.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(-x ^ n) = x ^ n"
                },
                {
                    "args": "-(exp (log (-x)) ^ n) = x ^ n",
                    "id": "1.2.6.5",
                    "prevs": [
                        "1.2.5",
                        "1.2.6.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(exp (log (-x)) ^ n) = x ^ n"
                },
                {
                    "args": "real_exp_n, -(exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.6.6",
                    "prevs": [
                        "1.2.6.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "if_P, (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.6.7",
                    "prevs": [
                        "1.2.6.6",
                        "1.2.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(0 < x), ¬(x = 0) ⊢ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.6.8",
                    "prevs": [
                        "1.2.6.0",
                        "1.2.6.7"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(odd n) ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "¬(odd n)",
                    "id": "1.2.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(odd n) ⊢ ¬(odd n)"
                },
                {
                    "args": "if_P, (if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.7.1",
                    "prevs": [
                        "1.2.7.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(odd n) ⊢ (if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "not_odd, (if even n then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.7.2",
                    "prevs": [
                        "1.2.7.1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ (if even n then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "real_pow_neg, -x ^ n = x ^ n",
                    "id": "1.2.7.3",
                    "prevs": [
                        "1.2.7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ -x ^ n = x ^ n"
                },
                {
                    "args": "exp (log (-x)) ^ n = x ^ n",
                    "id": "1.2.7.4",
                    "prevs": [
                        "1.2.5",
                        "1.2.7.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ exp (log (-x)) ^ n = x ^ n"
                },
                {
                    "args": "real_exp_n, exp (of_nat n * log (-x)) = x ^ n",
                    "id": "1.2.7.5",
                    "prevs": [
                        "1.2.7.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ exp (of_nat n * log (-x)) = x ^ n"
                },
                {
                    "args": "if_not_P, (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.7.6",
                    "prevs": [
                        "1.2.7.5",
                        "1.2.7.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(odd n), ¬(0 < x), ¬(x = 0) ⊢ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.7.7",
                    "prevs": [
                        "1.2.7.0",
                        "1.2.7.6"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(odd n) ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.6",
                        "1.2.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "(if ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.3",
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "real_abs_nat, (if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "if_not_P, (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.0",
                        "1.2.11"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x) ⊢ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x) ⊢ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "real_real_power_def, x ^ (of_nat::nat ⇒ real) n = x ^ n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) n = x ^ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) n = x ^ n"
                }
            ],
            "prop": "x ^ (of_nat::nat ⇒ real) n = x ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "0 < x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_zero"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal": "(∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟷ odd n",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "exists_elim",
                    "names": "p,q"
                },
                {
                    "fact_ids": [
                        "1.2.1.3"
                    ],
                    "goal_id": "1.2.1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.3"
                    ],
                    "goal_id": "1.2.1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.1.5"
                    ],
                    "goal_id": "1.2.1.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.5"
                    ],
                    "goal_id": "1.2.1.7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "case": "q=0",
                    "goal_id": "1.2.1.8",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1.8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.8.0",
                        "1.2.1.6"
                    ],
                    "goal_id": "1.2.1.8.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1.8.1"
                    ],
                    "goal_id": "1.2.1.8.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_def_1"
                },
                {
                    "fact_ids": [
                        "1.2.1.8.2"
                    ],
                    "goal_id": "1.2.1.8.3",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1.2.1.9",
                    "method_name": "introduction"
                },
                {
                    "goal": "(of_nat::nat=>real) q * of_nat n = of_nat p",
                    "goal_id": "1.2.1.9.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.0"
                    ],
                    "goal_id": "1.2.1.9.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.1",
                        "1.2.1.7"
                    ],
                    "goal_id": "1.2.1.9.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.2"
                    ],
                    "goal_id": "1.2.1.9.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_of_nat_mul"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.3"
                    ],
                    "goal_id": "1.2.1.9.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.4"
                    ],
                    "goal_id": "1.2.1.9.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.5",
                        "1.2.1.4"
                    ],
                    "goal_id": "1.2.1.9.6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.6"
                    ],
                    "goal_id": "1.2.1.9.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_mult"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.7"
                    ],
                    "goal_id": "1.2.1.9.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_2"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_odd"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "1.2.2.6",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "0 < -x",
                    "goal_id": "1.2.4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "1.2.0"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "case": "odd n",
                    "goal_id": "1.2.6",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.6.0"
                    ],
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "1.2.5"
                    ],
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_neg"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_odd"
                },
                {
                    "fact_ids": [
                        "1.2.6.0"
                    ],
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P2"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "1.2.7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.7.0"
                    ],
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "1.2.5"
                    ],
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_neg"
                },
                {
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_odd"
                },
                {
                    "fact_ids": [
                        "1.2.7.0"
                    ],
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_nat_power_def_1, x ^ (0::nat) = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (0::nat) = 1"
                },
                {
                    "args": "rpow_pow, x ^ (of_nat::nat ⇒ real) 0 = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) 0 = 1"
                },
                {
                    "args": "real_zero_def, x ^ (0::real) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (0::real) = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ (0::real) = 1"
                }
            ],
            "prop": "x ^ (0::real) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "rpow_1",
            "prop": "x ^ (1::real) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "rpow_add",
            "prop": "x > 0 ⟶ x ^ (m + n) = x ^ m * x ^ n",
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "real",
                "x": "real"
            }
        },
        {
            "name": "rpow_neg_one",
            "prop": "real_inverse x = x ^ -(1::real)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "rpow_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "0 < x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_neg, exp (-(y * log x)) = real_inverse (exp (y * log x))",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-(y * log x)) = real_inverse (exp (y * log x))"
                },
                {
                    "args": "real_mul_lneg, exp (-y * log x) = real_inverse (exp (y * log x))",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (-y * log x) = real_inverse (exp (y * log x))"
                },
                {
                    "args": "if_P, (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "x = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), x = 0 ⊢ y = 0 ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "y = 0",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "eq_refl, {a: real}, {x: (0::real)}",
                    "id": "1.1.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) = 0"
                },
                {
                    "args": "1 = real_inverse 1",
                    "id": "1.1.1.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 1 = real_inverse 1"
                },
                {
                    "args": "if_P, (if (0::real) = 0 then 1 else 0) = real_inverse 1",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.2",
                        "1.1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, y = 0 ⊢ (if (0::real) = 0 then 1 else 0) = real_inverse 1"
                },
                {
                    "args": "real_neg_0, (if -(0::real) = 0 then 1 else 0) = real_inverse 1",
                    "id": "1.1.1.4",
                    "prevs": [
                        "1.1.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, y = 0 ⊢ (if -(0::real) = 0 then 1 else 0) = real_inverse 1"
                },
                {
                    "args": "(if -y = 0 then 1 else 0) = real_inverse 1",
                    "id": "1.1.1.5",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y = 0, ¬(0 < x), x = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse 1"
                },
                {
                    "args": "if_P, (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)",
                    "id": "1.1.1.6",
                    "prevs": [
                        "1.1.1.5",
                        "1.1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y = 0, ¬(0 < x), x = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.7",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.6"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), x = 0 ⊢ y = 0 ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), x = 0 ⊢ ¬(y = 0) ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "1.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "¬(-y = 0)",
                    "id": "1.1.2.1",
                    "prevs": [
                        "1.1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(y = 0) ⊢ ¬(-y = 0)"
                },
                {
                    "args": "if_not_P, (if -y = 0 then (1::real) else 0) = 0",
                    "id": "1.1.2.2",
                    "prevs": [
                        "1.1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(y = 0) ⊢ (if -y = 0 then (1::real) else 0) = 0"
                },
                {
                    "args": "real_inv_0, (if -y = 0 then 1 else 0) = real_inverse 0",
                    "id": "1.1.2.3",
                    "prevs": [
                        "1.1.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, ¬(y = 0) ⊢ (if -y = 0 then 1 else 0) = real_inverse 0"
                },
                {
                    "args": "if_not_P, (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)",
                    "id": "1.1.2.4",
                    "prevs": [
                        "1.1.2.3",
                        "1.1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(y = 0), ¬(0 < x), x = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2.5",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), x = 0 ⊢ ¬(y = 0) ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.1",
                        "1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), x = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(0 < x) ⊢ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "real_mul_lneg, -(exp (-y * log (-x))) = -(exp (-(y * log (-x))))",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(exp (-y * log (-x))) = -(exp (-(y * log (-x))))"
                },
                {
                    "args": "real_exp_neg, -(exp (-y * log (-x))) = -(real_inverse (exp (y * log (-x))))",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (-y * log (-x))) = -(real_inverse (exp (y * log (-x))))"
                },
                {
                    "args": "real_inv_neg, -(exp (-y * log (-x))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (-y * log (-x))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "if_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.3",
                        "1.2.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "real_mul_lneg, exp (-y * log (-x)) = exp (-(y * log (-x)))",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-y * log (-x)) = exp (-(y * log (-x)))"
                },
                {
                    "args": "real_exp_neg, exp (-y * log (-x)) = real_inverse (exp (y * log (-x)))",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (-y * log (-x)) = real_inverse (exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2",
                        "1.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_abs_neg, (if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.0",
                        "1.2.5"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x) ⊢ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x) ⊢ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_real_power_def, x ^ -y = real_inverse (x ^ y)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ -y = real_inverse (x ^ y)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ -y = real_inverse (x ^ y)"
                }
            ],
            "prop": "x ^ -y = real_inverse (x ^ y)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "0 < x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "case": "y = 0",
                    "goal_id": "1.1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_0"
                },
                {
                    "goal": "(0::real) = 0",
                    "goal_id": "1.1.1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "1.1.1.1"
                    ],
                    "goal_id": "1.1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.2.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_0"
                },
                {
                    "goal": "~(-y = 0)",
                    "goal_id": "1.1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.2.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.2.1"
                    ],
                    "goal_id": "1.1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "1.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_neg"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "name": "rpow_sqrt",
            "prop": "x ≥ 0 ⟶ sqrt x = x ^ (1 / 2)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "rpow_mult",
            "prop": "x > 0 ⟶ x ^ m ^ n = x ^ (m * n)",
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "real",
                "x": "real"
            }
        },
        {
            "name": "rpow_mult_nat1",
            "prop": "x > 0 ⟶ x ^ m ^ n = x ^ (of_nat m * n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "real",
                "x": "real"
            }
        },
        {
            "name": "rpow_mult_nat2",
            "prop": "x > 0 ⟶ x ^ m ^ n = x ^ (m * of_nat n)",
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "nat",
                "x": "real"
            }
        },
        {
            "name": "rpow_base_mult",
            "prop": "x > 0 ⟶ y > 0 ⟶ (x * y) ^ p = x ^ p * y ^ p",
            "ty": "thm",
            "vars": {
                "p": "real",
                "x": "real",
                "y": "real"
            }
        },
        {
            "name": "rpow_base_mult2",
            "prop": "x ≥ 0 ⟶ y ≥ 0 ⟶ p > 0 ⟶ (x * y) ^ p = x ^ p * y ^ p",
            "ty": "thm",
            "vars": {
                "p": "real",
                "x": "real",
                "y": "real"
            }
        },
        {
            "name": "rpow_base_divide",
            "prop": "x > 0 ⟶ y > 0 ⟶ (x / y) ^ z = x ^ z / y ^ z",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "eq_refl, {a: real}, {x: (0::real)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) = 0"
                },
                {
                    "args": "¬((0::real) < 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬((0::real) < 0)"
                },
                {
                    "args": "if_not_P, (if (0::real) < 0 then exp (y * log 0) else if y = 0 then 1 else 0) = (if y = 0 then 1 else 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 0 then exp (y * log 0) else if y = 0 then 1 else 0) = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if (0::real) < 0 then exp (y * log 0) else if (0::real) = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-0))) else exp (y * log (-0))) = (if y = 0 then 1 else 0)",
                    "id": "3",
                    "prevs": [
                        "2",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 0 then exp (y * log 0) else if (0::real) = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-0))) else exp (y * log (-0))) = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "real_real_power_def, (0::real) ^ y = (if y = 0 then 1 else 0)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) ^ y = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ (0::real) ^ y = (if y = 0 then 1 else 0)"
                }
            ],
            "prop": "(0::real) ^ y = (if y = 0 then 1 else 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "(0::real) = 0 ",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~((0::real) < 0)",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_pos_lt, {}, {x: y * log x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (y * log x)"
                },
                {
                    "args": "if_P, 0 < (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_real_power_def, 0 < x ^ y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < x ^ y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < x ^ y"
                }
            ],
            "prop": "0 < x ⟶ 0 < x ^ y",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_le_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "0 < x",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "rpow_pos_lt, {}, {x: x, y: y}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < x ^ y"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 < x ⊢ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "0 = x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "(0::real) ≤ (if y = 0 then 1 else 0)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) ≤ (if y = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, (0::real) ≤ 0 ^ y",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, 0 = x ⊢ (0::real) ≤ 0 ^ y"
                },
                {
                    "args": "0 ≤ x ^ y",
                    "id": "3.4",
                    "prevs": [
                        "3.1",
                        "3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, 0 ≤ x ⊢ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "disjE",
                    "id": "4",
                    "prevs": [
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ x ^ y"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ x ^ y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_pos_lt"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_lt2",
            "num_gaps": 2,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "0 < z",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < z ⊢ 0 < z"
                },
                {
                    "args": "real_le_lt",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 < x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "0 < x",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_lt_trans, {}, {x: (0::real), y: x, z: y}",
                    "id": "4.1",
                    "prevs": [
                        "4.0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x < y ⊢ 0 < y"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x ⊢ log x < log y"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "4.3",
                    "prevs": [
                        "2",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x ⊢ z * log x < z * log y"
                },
                {
                    "args": "real_exp_mono_lt, exp (z * log x) < exp (z * log y)",
                    "id": "4.4",
                    "prevs": [
                        "4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x ⊢ exp (z * log x) < exp (z * log y)"
                },
                {
                    "args": "if_P, exp (z * log x) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))",
                    "id": "4.5",
                    "prevs": [
                        "4.4",
                        "4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, x < y, 0 ≤ x, 0 < z ⊢ exp (z * log x) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))"
                },
                {
                    "args": "if_P, (if 0 < x then exp (z * log x) else if x = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-x))) else exp (z * log (-x))) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))",
                    "id": "4.6",
                    "prevs": [
                        "4.5",
                        "4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 ≤ x, x < y, 0 < z ⊢ (if 0 < x then exp (z * log x) else if x = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-x))) else exp (z * log (-x))) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))"
                },
                {
                    "args": "real_real_power_def, x ^ z < y ^ z",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x ⊢ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "4.8",
                    "prevs": [
                        "4.0",
                        "4.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 < x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 = x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "disjE",
                    "id": "6",
                    "prevs": [
                        "3",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ x < y ⟶ 0 < z ⟶ x ^ z < y ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ x < y ⟶ 0 < z ⟶ x ^ z < y ^ z",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0",
                        "1"
                    ],
                    "goal_id": "4.1",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lt_trans"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "name": "rpow_exp",
            "prop": "exp x ^ p = exp (x * p)",
            "ty": "thm",
            "vars": {
                "p": "real",
                "x": "real"
            }
        },
        {
            "name": "rpow_abs",
            "prop": "x ^ (2::nat) ^ (1 / 2) = abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        }
    ],
    "description": "Real transcendentals.",
    "imports": [
        "real",
        "metric"
    ],
    "name": "transcendentals"
}