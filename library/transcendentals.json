{
    "content": [
        {
            "name": "infsum",
            "ty": "def.ax",
            "type": "nat set ⇒ (nat ⇒ 'a) ⇒ 'a"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp",
            "prop": "exp x = infsum (from 0) (λn. x ^ n / of_nat (fact n))",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_add",
            "prop": "exp (x + y) = exp x * exp y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_0",
            "prop": "exp 0 = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_nz",
            "prop": "¬(exp x = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_add_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y + -x = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ x + y + -x = y"
                },
                {
                    "args": "exp (x + y + -x) = exp y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (x + y + -x) = exp y"
                },
                {
                    "args": "real_exp_add, exp (x + y) * exp (-x) = exp y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (x + y) * exp (-x) = exp y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (x + y) * exp (-x) = exp y"
                }
            ],
            "prop": "exp (x + y) * exp (-x) = exp y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal": "x + y + -x = y",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_neg_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_add_rinv, exp (x + -x) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x + -x) = 1"
                },
                {
                    "args": "real_exp_add, exp x * exp (-x) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x * exp (-x) = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x * exp (-x) = 1"
                }
            ],
            "prop": "exp x * exp (-x) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rinv"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_neg_mul, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp x * exp (-x) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = exp x * exp (-x)"
                },
                {
                    "args": "real_exp_nz, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp x = 0)"
                },
                {
                    "args": "real_mul_linv, {x: exp x}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ real_inverse (exp x) * exp x = 1"
                },
                {
                    "args": "real_mult_comm, {x: exp (-x), y: (1::real)}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp (-x) * 1 = 1 * exp (-x)"
                },
                {
                    "args": "real_exp_neg_mul, exp (-x) * (exp x * exp (-x)) = 1 * exp (-x)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-x) * (exp x * exp (-x)) = 1 * exp (-x)"
                },
                {
                    "args": "real_mult_assoc, exp (-x) * exp x * exp (-x) = 1 * exp (-x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (-x) * exp x * exp (-x) = 1 * exp (-x)"
                },
                {
                    "args": "exp (-x) * exp x * exp (-x) = real_inverse (exp x) * exp x * exp (-x)",
                    "id": "7",
                    "prevs": [
                        "3",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (-x) * exp x * exp (-x) = real_inverse (exp x) * exp x * exp (-x)"
                },
                {
                    "args": "real_mult_assoc, exp (-x) * (exp x * exp (-x)) = real_inverse (exp x) * (exp x * exp (-x))",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-x) * (exp x * exp (-x)) = real_inverse (exp x) * (exp x * exp (-x))"
                },
                {
                    "args": "exp (-x) * 1 = real_inverse (exp x) * 1",
                    "id": "9",
                    "prevs": [
                        "1",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ exp (-x) * 1 = real_inverse (exp x) * 1"
                },
                {
                    "args": "real_mult_comm, 1 * exp (-x) = 1 * real_inverse (exp x)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * exp (-x) = 1 * real_inverse (exp x)"
                },
                {
                    "args": "real_mul_lid, exp (-x) = real_inverse (exp x)",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (-x) = real_inverse (exp x)"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (-x) = real_inverse (exp x)"
                }
            ],
            "prop": "exp (-x) = real_inverse (exp x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_neg_mul"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_nz"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "real_mul_linv"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg_mul"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mult_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_n",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_mul_lzero, exp (0 * x) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (0 * x) = 1"
                },
                {
                    "args": "real_zero_def, exp (of_nat 0 * x) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp (of_nat 0 * x) = 1"
                },
                {
                    "args": "real_nat_power_def_1, exp (of_nat 0 * x) = exp x ^ (0::nat)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (of_nat 0 * x) = exp x ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. exp (of_nat n * x) = exp x ^ n ⟶ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "exp (of_nat n * x) = exp x ^ n",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat n * x) = exp x ^ n"
                },
                {
                    "args": "exp x * exp (of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp x * exp (of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_exp_add, exp (x + of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.3",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (x + of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_mul_lid, exp (1 * x + of_nat n * x) = exp x * exp x ^ n",
                    "id": "4.4",
                    "prevs": [
                        "4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (1 * x + of_nat n * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_add_rdistrib, exp ((1 + of_nat n) * x) = exp x * exp x ^ n",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((1 + of_nat n) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_add_comm, exp ((of_nat n + 1) * x) = exp x * exp x ^ n",
                    "id": "4.6",
                    "prevs": [
                        "4.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((of_nat n + 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_one_def, exp ((of_nat n + of_nat 1) * x) = exp x * exp x ^ n",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp ((of_nat n + of_nat 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_of_nat_add, exp (of_nat (n + 1) * x) = exp x * exp x ^ n",
                    "id": "4.8",
                    "prevs": [
                        "4.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (n + 1) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "add_1_right, exp (of_nat (Suc n) * x) = exp x * exp x ^ n",
                    "id": "4.9",
                    "prevs": [
                        "4.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (Suc n) * x) = exp x * exp x ^ n"
                },
                {
                    "args": "real_nat_power_def_2, exp (of_nat (Suc n) * x) = exp x ^ Suc n",
                    "id": "4.10",
                    "prevs": [
                        "4.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "exp (of_nat n * x) = exp x ^ n ⊢ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "",
                    "id": "4.11",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.10"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. exp (of_nat n * x) = exp x ^ n ⟶ exp (of_nat (Suc n) * x) = exp x ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. exp (of_nat n * x) = exp x ^ n, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ exp (of_nat n * x) = exp x ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (of_nat n * x) = exp x ^ n"
                }
            ],
            "prop": "exp (of_nat n * x) = exp x ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_of_nat_add"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_comm"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "name": "real_exp_n_sym",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_n, exp x ^ n = exp (of_nat n * x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x ^ n = exp (of_nat n * x)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x ^ n = exp (of_nat n * x)"
                }
            ],
            "prop": "exp x ^ n = exp (of_nat n * x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_exp_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_divide_def, exp x * real_inverse (exp y) = exp x / exp y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x * real_inverse (exp y) = exp x / exp y"
                },
                {
                    "args": "real_exp_neg, exp x * exp (-y) = exp x / exp y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x * exp (-y) = exp x / exp y"
                },
                {
                    "args": "real_exp_add, exp (x + -y) = exp x / exp y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x + -y) = exp x / exp y"
                },
                {
                    "args": "real_minus_def, exp (x - y) = exp x / exp y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (x - y) = exp x / exp y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (x - y) = exp x / exp y"
                }
            ],
            "prop": "exp (x - y) = exp x / exp y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x = x / 2 + x / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ x = x / 2 + x / 2"
                },
                {
                    "args": "real_le_square, {x: exp (x / 2)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp (x / 2) * exp (x / 2)"
                },
                {
                    "args": "real_exp_add, 0 ≤ exp (x / 2 + x / 2)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 ≤ exp (x / 2 + x / 2)"
                },
                {
                    "args": "0 ≤ exp x",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ exp x"
                }
            ],
            "prop": "0 ≤ exp x",
            "steps": [
                {
                    "goal": "x = x/2 + x/2",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_square"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_le, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "real_exp_nz, {x: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp x = 0)"
                },
                {
                    "args": "eq_sym_eq, ¬(0 = exp x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(0 = exp x)"
                },
                {
                    "args": "conjI",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ exp x ∧ ¬(0 = exp x)"
                },
                {
                    "args": "real_lt_le, 0 < exp x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < exp x"
                }
            ],
            "prop": "0 < exp x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_lt_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_le_x",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 1 + x < 0 ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "1 + x < 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 + x < 0 ⊢ 1 + x < 0"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 + x < 0 ⊢ 1 + x ≤ 0"
                },
                {
                    "args": "real_exp_pos_le, {x: x}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "real_le_trans",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 + x < 0 ⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x < 0 ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(1 + x < 0) ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "¬(1 + x < 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(1 + x < 0) ⊢ ¬(1 + x < 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "¬(1 + x < 0) ⊢ 1 + x ≤ infsum (from 0) (λn. x ^ n / of_nat (fact n))"
                },
                {
                    "args": "exp_def, 1 + x ≤ exp x",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(1 + x < 0) ⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(1 + x < 0) ⟶ 1 + x ≤ exp x"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x ≤ exp x"
                }
            ],
            "prop": "1 + x ≤ exp x",
            "steps": [
                {
                    "case": "1 + x < 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "param_y": "(0::real)",
                    "theorem": "real_le_trans"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_lt_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_le_x, {x: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "1 < 1 + x",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ 1 < 1 + x"
                },
                {
                    "args": "real_lte_trans",
                    "id": "3",
                    "prevs": [
                        "2",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 1 < exp x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 1 < exp x"
                }
            ],
            "prop": "0 < x ⟶ 1 < exp x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_le_x"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_y": "1+x",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_mono_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x < y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_sub_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x < y ⊢ 0 < y - x"
                },
                {
                    "args": "real_exp_lt_1, {x: y - x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y ⊢ 1 < exp (y - x)"
                },
                {
                    "args": "real_exp_sub",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x < y ⊢ 1 < exp y / exp x"
                },
                {
                    "args": "∀a. ∀b. 0 < a ⟶ 1 < b / a ⟶ a < b",
                    "id": "4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a. ∀b. 0 < a ⟶ 1 < b / a ⟶ a < b"
                },
                {
                    "args": "real_exp_pos_lt, {x: x}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "exp x, exp y",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "x < y ⊢ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                }
            ],
            "prop": "x < y ⟶ exp x < exp y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_sub_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_exp_lt_1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_exp_sub"
                },
                {
                    "goal": "!a::real. !b. 0 < a --> 1 < b / a --> a < b",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀a::real. ∀b. ∀c::real. ∀d. (a < b ⟶ c < d) ⟶ (a = b ⟶ c = d) ⟶ (b < a ⟶ d < c) ⟶ c < d ⟷ a < b",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. ∀c::real. ∀d. (a < b ⟶ c < d) ⟶ (a = b ⟶ c = d) ⟶ (b < a ⟶ d < c) ⟶ c < d ⟷ a < b"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                },
                {
                    "args": "x < y",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_exp_mono_imp",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y ⊢ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ exp x < exp y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = y ⟶ exp x = exp y"
                },
                {
                    "args": "x = y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "exp x = exp y",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ exp x = exp y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = y ⟶ exp x = exp y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ y < x ⟶ exp y < exp x"
                },
                {
                    "args": "y < x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y < x ⊢ y < x"
                },
                {
                    "args": "real_exp_mono_imp",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "y < x ⊢ exp y < exp x"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ y < x ⟶ exp y < exp x"
                },
                {
                    "args": "x, y, exp x, exp y",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ exp x < exp y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x < exp y ⟷ x < y"
                }
            ],
            "prop": "exp x < exp y ⟷ x < y",
            "steps": [
                {
                    "goal": "!a::real. !b. !c::real. !d. (a < b --> c < d) --> (a = b --> c = d) --> (b < a --> d < c) --> (c < d <--> a < b)",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_mono_imp"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_mono_imp"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_mono_lt, ¬(exp y < exp x) ⟷ ¬(y < x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(exp y < exp x) ⟷ ¬(y < x)"
                },
                {
                    "args": "real_not_lt, exp x ≤ exp y ⟷ x ≤ y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x ≤ exp y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x ≤ exp y ⟷ x ≤ y"
                }
            ],
            "prop": "exp x ≤ exp y ⟷ x ≤ y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_mono_le, exp x ≤ exp y ∧ exp y ≤ exp x ⟷ x ≤ y ∧ y ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x ≤ exp y ∧ exp y ≤ exp x ⟷ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "real_le_antisym, exp x = exp y ⟷ x = y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x = exp y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x = exp y ⟷ x = y"
                }
            ],
            "prop": "exp x = exp y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_eq_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_inj, exp x = exp 0 ⟷ x = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x = exp 0 ⟷ x = 0"
                },
                {
                    "args": "real_exp_0, exp x = 1 ⟷ x = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ exp x = 1 ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x = 1 ⟷ x = 0"
                }
            ],
            "prop": "exp x = 1 ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_abs_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_le, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ exp x"
                },
                {
                    "args": "if_P, (if 0 ≤ exp x then exp x else -(exp x)) = exp x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 0 ≤ exp x then exp x else -(exp x)) = exp x"
                },
                {
                    "args": "abs_def, abs (exp x) = exp x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (exp x) = exp x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs (exp x) = exp x"
                }
            ],
            "prop": "abs (exp x) = exp x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "goal": "0 ≤ exp x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_le"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_exp_sum",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "finite s",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s ⊢ finite s"
                },
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "product_empty, exp 0 = product ∅ (λx. exp (f x))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s ⊢ exp 0 = product ∅ (λx. exp (f x))"
                },
                {
                    "args": "sum_empty, exp (sum ∅ f) = product ∅ (λx. exp (f x))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s ⊢ exp (sum ∅ f) = product ∅ (λx. exp (f x))"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "finite s ⊢ ∀x. ∀s1. exp (sum s1 f) = product s1 (λx1. exp (f x1)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ exp (sum (insert x s1) f) = product (insert x s1) (λx1. exp (f x1))"
                },
                {
                    "args": "x, 'a",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "s1, 'a set",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s1"
                },
                {
                    "args": "exp (sum s1 f) = product s1 (λx. exp (f x))",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (sum s1 f) = product s1 (λx. exp (f x)) ⊢ exp (sum s1 f) = product s1 (λx. exp (f x))"
                },
                {
                    "args": "¬(x ∈ s1)",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ∈ s1) ⊢ ¬(x ∈ s1)"
                },
                {
                    "args": "finite s1",
                    "id": "4.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s1 ⊢ finite s1"
                },
                {
                    "args": "sum_insert, {f: f, s: s1, x: x}",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ sum (insert x s1) f = (if x ∈ s1 then sum s1 f else f x + sum s1 f)"
                },
                {
                    "args": "product_insert, {f: λx1. exp (f x1), s: s1, x: x}",
                    "id": "4.6",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x s1) (λx1. exp (f x1)) = (if x ∈ s1 then product s1 (λx1. exp (f x1)) else exp (f x) * product s1 (λx1. exp (f x1)))"
                },
                {
                    "args": "if_not_P",
                    "id": "4.7",
                    "prevs": [
                        "4.5",
                        "4.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "finite s1, ¬(x ∈ s1) ⊢ sum (insert x s1) f = f x + sum s1 f"
                },
                {
                    "args": "if_not_P",
                    "id": "4.8",
                    "prevs": [
                        "4.6",
                        "4.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "finite s1, ¬(x ∈ s1) ⊢ product (insert x s1) (λx1. exp (f x1)) = exp (f x) * product s1 (λx1. exp (f x1))"
                },
                {
                    "args": "exp (f x) * exp (sum s1 f) = exp (f x) * product s1 (λx1. exp (f x1))",
                    "id": "4.9",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (sum s1 f) = product s1 (λx. exp (f x)) ⊢ exp (f x) * exp (sum s1 f) = exp (f x) * product s1 (λx1. exp (f x1))"
                },
                {
                    "args": "real_exp_add, exp (f x + sum s1 f) = exp (f x) * product s1 (λx1. exp (f x1))",
                    "id": "4.10",
                    "prevs": [
                        "4.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s, finite s1, ¬(x ∈ s1), exp (sum s1 f) = product s1 (λx. exp (f x)) ⊢ exp (f x + sum s1 f) = exp (f x) * product s1 (λx1. exp (f x1))"
                },
                {
                    "args": "exp (f x + sum s1 f) = product (insert x s1) (λx1. exp (f x1))",
                    "id": "4.11",
                    "prevs": [
                        "4.8",
                        "4.10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "finite s, finite s1, ¬(x ∈ s1), exp (sum s1 f) = product s1 (λx. exp (f x)) ⊢ exp (f x + sum s1 f) = product (insert x s1) (λx1. exp (f x1))"
                },
                {
                    "args": "exp (sum (insert x s1) f) = product (insert x s1) (λx1. exp (f x1))",
                    "id": "4.12",
                    "prevs": [
                        "4.7",
                        "4.11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "finite s, finite s1, ¬(x ∈ s1), exp (sum s1 f) = product s1 (λx. exp (f x)) ⊢ exp (sum (insert x s1) f) = product (insert x s1) (λx1. exp (f x1))"
                },
                {
                    "args": "",
                    "id": "4.13",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.2",
                        "4.3",
                        "4.4",
                        "4.12"
                    ],
                    "rule": "intros",
                    "th": "finite s ⊢ ∀x. ∀s1. exp (sum s1 f) = product s1 (λx1. exp (f x1)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ exp (sum (insert x s1) f) = product (insert x s1) (λx1. exp (f x1))"
                },
                {
                    "args": "finite_induct_strong",
                    "id": "5",
                    "prevs": [
                        "0",
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s ⊢ exp (sum s f) = product s (λx. exp (f x))"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ finite s ⟶ exp (sum s f) = product s (λx. exp (f x))"
                }
            ],
            "prop": "finite s ⟶ exp (sum s f) = product s (λx. exp (f x))",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_induct_strong"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sum_empty"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "product_empty"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "x,s1"
                },
                {
                    "fact_ids": [
                        "4.4"
                    ],
                    "goal_id": "4.5",
                    "method_name": "apply_forward_step",
                    "param_f": "f",
                    "param_x": "x",
                    "theorem": "sum_insert"
                },
                {
                    "fact_ids": [
                        "4.4"
                    ],
                    "goal_id": "4.6",
                    "method_name": "apply_forward_step",
                    "param_f": "(λx1. exp (f x1))",
                    "param_x": "x",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "4.5",
                        "4.3"
                    ],
                    "goal_id": "4.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "4.6",
                        "4.3"
                    ],
                    "goal_id": "4.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "4.7"
                    ],
                    "goal_id": "4.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "4.8"
                    ],
                    "goal_id": "4.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "4.2"
                    ],
                    "goal_id": "4.9",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "f": "'a ⇒ real",
                "s": "'a set"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_exp_bound_lemma",
            "prop": "0 ≤ x ⟶ x ≤ real_inverse 2 ⟶ exp x ≤ 1 + 2 * x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos",
            "prop": [
                "cos x = ",
                "infsum (from 0) ",
                "  (λn. if even n then -1 ^ (n DIV 2) * x ^ n / of_nat (fact n) else 0)"
            ],
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "sin",
            "prop": [
                "sin x = ",
                "infsum (from 0) ",
                "  (λn. if even n then 0 else -1 ^ ((n - 1) DIV 2) * x ^ n / of_nat (fact n))"
            ],
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_circle",
            "prop": "sin x ^ (2::nat) + cos x ^ (2::nat) = 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_circle2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "sin x ^ (2::nat) = sin x ^ (2::nat) + cos x ^ (2::nat) - cos x ^ (2::nat)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x ^ (2::nat) = sin x ^ (2::nat) + cos x ^ (2::nat) - cos x ^ (2::nat)"
                },
                {
                    "args": "sin x ^ (2::nat) = 1 - cos x ^ (2::nat)",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x ^ (2::nat) = 1 - cos x ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x ^ (2::nat) = 1 - cos x ^ (2::nat)"
                }
            ],
            "prop": "sin x ^ (2::nat) = 1 - cos x ^ (2::nat)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_circle3",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "cos x ^ (2::nat) = sin x ^ (2::nat) + cos x ^ (2::nat) - sin x ^ (2::nat)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x ^ (2::nat) = sin x ^ (2::nat) + cos x ^ (2::nat) - sin x ^ (2::nat)"
                },
                {
                    "args": "cos x ^ (2::nat) = 1 - sin x ^ (2::nat)",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x ^ (2::nat) = 1 - sin x ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x ^ (2::nat) = 1 - sin x ^ (2::nat)"
                }
            ],
            "prop": "cos x ^ (2::nat) = 1 - sin x ^ (2::nat)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_add",
            "prop": "sin (x + y) = sin x * cos y + cos x * sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_add",
            "prop": "cos (x + y) = cos x * cos y - sin x * sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_neg",
            "prop": "sin (-x) = -(sin x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_neg_alt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_neg, sin (-(c * x)) = -(sin (c * x))",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (-(c * x)) = -(sin (c * x))"
                },
                {
                    "args": "real_mul_lneg, sin (-c * x) = -(sin (c * x))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (-c * x) = -(sin (c * x))"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (-c * x) = -(sin (c * x))"
                }
            ],
            "prop": "sin (-c * x) = -(sin (c * x))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "c": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_neg",
            "prop": "cos (-x) = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_neg_alt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_neg, cos (-(c * x)) = cos (c * x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (-(c * x)) = cos (c * x)"
                },
                {
                    "args": "real_mul_lneg, cos (-c * x) = cos (c * x)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (-c * x) = cos (c * x)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (-c * x) = cos (c * x)"
                }
            ],
            "prop": "cos (-c * x) = cos (c * x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "c": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_double",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin x * cos x + cos x * sin x = (sin x + sin x) * cos x",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x * cos x + cos x * sin x = (sin x + sin x) * cos x"
                },
                {
                    "args": "sin_add, sin (x + x) = (sin x + sin x) * cos x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + x) = (sin x + sin x) * cos x"
                },
                {
                    "args": "real_mul_2, sin (2 * x) = 2 * sin x * cos x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (2 * x) = 2 * sin x * cos x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (2 * x) = 2 * sin x * cos x"
                }
            ],
            "prop": "sin (2 * x) = 2 * sin x * cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_double",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_pow_2, cos x * cos x - sin x * sin x = cos x ^ (2::nat) - sin x ^ (2::nat)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos x - sin x * sin x = cos x ^ (2::nat) - sin x ^ (2::nat)"
                },
                {
                    "args": "cos_add, cos (x + x) = cos x ^ (2::nat) - sin x ^ (2::nat)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + x) = cos x ^ (2::nat) - sin x ^ (2::nat)"
                },
                {
                    "args": "real_mul_2, cos (2 * x) = cos x ^ (2::nat) - sin x ^ (2::nat)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * x) = cos x ^ (2::nat) - sin x ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (2 * x) = cos x ^ (2::nat) - sin x ^ (2::nat)"
                }
            ],
            "prop": "cos (2 * x) = cos x ^ (2::nat) - sin x ^ (2::nat)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_double_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - (sin x ^ (2::nat) + cos x ^ (2::nat))",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - (sin x ^ (2::nat) + cos x ^ (2::nat))"
                },
                {
                    "args": "cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - 1",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x ^ (2::nat) - sin x ^ (2::nat) = 2 * cos x ^ (2::nat) - 1"
                },
                {
                    "args": "cos_double, cos (2 * x) = 2 * cos x ^ (2::nat) - 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * x) = 2 * cos x ^ (2::nat) - 1"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (2 * x) = 2 * cos x ^ (2::nat) - 1"
                }
            ],
            "prop": "cos (2 * x) = 2 * cos x ^ (2::nat) - 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_lower_degree",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x ^ (2::nat) = 1 / 2 * (2 * cos x ^ (2::nat) - 1) + 1 / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x ^ (2::nat) = 1 / 2 * (2 * cos x ^ (2::nat) - 1) + 1 / 2"
                },
                {
                    "args": "cos_double_cos, cos x ^ (2::nat) = 1 / 2 * cos (2 * x) + 1 / 2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x ^ (2::nat) = 1 / 2 * cos (2 * x) + 1 / 2"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x ^ (2::nat) = 1 / 2 * cos (2 * x) + 1 / 2"
                }
            ],
            "prop": "cos x ^ (2::nat) = 1 / 2 * cos (2 * x) + 1 / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double_cos"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_bound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_abs_nat, {n: (1::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (abs::real ⇒ real) of_nat 1 = of_nat 1"
                },
                {
                    "args": "real_one_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "⊢ abs (1::real) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ (1::real) = abs 1"
                },
                {
                    "args": "sin_circle, {x: x}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "real_le_square, {x: cos x}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ cos x * cos x"
                },
                {
                    "args": "real_pow_2",
                    "id": "5",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin x * sin x + cos x * cos x = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x * sin x + cos x * cos x"
                },
                {
                    "args": "∀a::real. ∀b. 0 ≤ b ⟶ a ≤ a + b",
                    "id": "7",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. 0 ≤ b ⟶ a ≤ a + b"
                },
                {
                    "args": "sin x * sin x, cos x * cos x",
                    "id": "8",
                    "prevs": [
                        "7",
                        "4"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ sin x * sin x ≤ sin x * sin x + cos x * cos x"
                },
                {
                    "args": "sin x * sin x ≤ 1",
                    "id": "9",
                    "prevs": [
                        "6",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x * sin x ≤ 1"
                },
                {
                    "args": "real_mul_lid, sin x * sin x ≤ 1 * 1",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * sin x ≤ 1 * 1"
                },
                {
                    "args": "real_pow_2, sin x ^ (2::nat) ≤ 1 ^ (2::nat)",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x ^ (2::nat) ≤ 1 ^ (2::nat)"
                },
                {
                    "args": "real_le_square_abs, abs (sin x) ≤ abs 1",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (sin x) ≤ abs 1"
                },
                {
                    "args": "abs (sin x) ≤ 1",
                    "id": "13",
                    "prevs": [
                        "2",
                        "12"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ abs (sin x) ≤ 1"
                },
                {
                    "args": "",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs (sin x) ≤ 1"
                }
            ],
            "prop": "abs (sin x) ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_n": "(1::nat)",
                    "theorem": "real_abs_nat"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_square_abs"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "param_x": "cos x",
                    "theorem": "real_le_square"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "!a::real. !b. 0 <= b --> a <= a + b ",
                    "goal_id": "7",
                    "method_name": "cut"
                },
                {
                    "goal_id": "7",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_bound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "∀a::real. ∀b. 0 ≤ b ⟶ a ≤ b + a",
                    "id": "2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. 0 ≤ b ⟶ a ≤ b + a"
                },
                {
                    "args": "real_le_pow_2, {x: sin x}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ sin x ^ (2::nat)"
                },
                {
                    "args": "cos x ^ (2::nat), sin x ^ (2::nat)",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ cos x ^ (2::nat) ≤ sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "cos x ^ (2::nat) ≤ 1",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x ^ (2::nat) ≤ 1"
                },
                {
                    "args": "real_pow_one, cos x ^ (2::nat) ≤ 1 ^ (2::nat)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x ^ (2::nat) ≤ 1 ^ (2::nat)"
                },
                {
                    "args": "real_one_def, cos x ^ (2::nat) ≤ of_nat 1 ^ (2::nat)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ cos x ^ (2::nat) ≤ of_nat 1 ^ (2::nat)"
                },
                {
                    "args": "real_le_square_abs, abs (cos x) ≤ abs of_nat 1",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (cos x) ≤ abs of_nat 1"
                },
                {
                    "args": "real_abs_nat, abs (cos x) ≤ of_nat 1",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ abs (cos x) ≤ of_nat 1"
                },
                {
                    "args": "real_one_def, abs (cos x) ≤ 1",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (cos x) ≤ 1"
                },
                {
                    "args": "",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs (cos x) ≤ 1"
                }
            ],
            "prop": "abs (cos x) ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_square_abs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "!a::real. !b. 0 <= b --> a <= b + a",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_pow_2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_lbound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_bound, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (sin x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ sin x ∧ sin x ≤ 1"
                },
                {
                    "args": "conjD1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ -1 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ -1 ≤ sin x"
                }
            ],
            "prop": "-1 ≤ sin x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_ubound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_bound, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (sin x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ sin x ∧ sin x ≤ 1"
                },
                {
                    "args": "conjD2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sin x ≤ 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x ≤ 1"
                }
            ],
            "prop": "sin x ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_lbound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_bound, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (cos x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ cos x ∧ cos x ≤ 1"
                },
                {
                    "args": "conjD1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ -1 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ -1 ≤ cos x"
                }
            ],
            "prop": "-1 ≤ cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "cos_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_ubound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_bound, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs (cos x) ≤ 1"
                },
                {
                    "args": "real_abs_bounds",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ -1 ≤ cos x ∧ cos x ≤ 1"
                },
                {
                    "args": "conjD2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ cos x ≤ 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x ≤ 1"
                }
            ],
            "prop": "cos x ≤ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "cos_bound"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_abs_bounds"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_abs",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ x ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "0 ≤ x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "if_P, cos (if 0 ≤ x then x else -x) = cos x",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x ⊢ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 ≤ x) ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "¬(0 ≤ x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ x) ⊢ ¬(0 ≤ x)"
                },
                {
                    "args": "cos_neg, cos (-x) = cos x",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (-x) = cos x"
                },
                {
                    "args": "if_not_P, cos (if 0 ≤ x then x else -x) = cos x",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 ≤ x) ⊢ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 ≤ x) ⟶ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ cos (if 0 ≤ x then x else -x) = cos x"
                },
                {
                    "args": "abs_def, cos (abs x) = cos x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (abs x) = cos x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (abs x) = cos x"
                }
            ],
            "prop": "cos (abs x) = cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "case": "0 ≤ x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_rneg, sin x * cos y + cos x * -(sin y) = sin x * cos y + -(cos x * sin y)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * cos y + cos x * -(sin y) = sin x * cos y + -(cos x * sin y)"
                },
                {
                    "args": "sin_neg, sin x * cos y + cos x * sin (-y) = sin x * cos y + -(cos x * sin y)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * cos y + cos x * sin (-y) = sin x * cos y + -(cos x * sin y)"
                },
                {
                    "args": "cos_neg, sin x * cos (-y) + cos x * sin (-y) = sin x * cos y + -(cos x * sin y)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * cos (-y) + cos x * sin (-y) = sin x * cos y + -(cos x * sin y)"
                },
                {
                    "args": "sin_add, sin (x + -y) = sin x * cos y + -(cos x * sin y)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + -y) = sin x * cos y + -(cos x * sin y)"
                },
                {
                    "args": "real_minus_def, sin (x - y) = sin x * cos y - cos x * sin y",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x - y) = sin x * cos y - cos x * sin y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (x - y) = sin x * cos y - cos x * sin y"
                }
            ],
            "prop": "sin (x - y) = sin x * cos y - cos x * sin y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x * cos y - sin x * -(sin y) = cos x * cos y + sin x * sin y",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x * cos y - sin x * -(sin y) = cos x * cos y + sin x * sin y"
                },
                {
                    "args": "sin_neg, cos x * cos y - sin x * sin (-y) = cos x * cos y + sin x * sin y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos y - sin x * sin (-y) = cos x * cos y + sin x * sin y"
                },
                {
                    "args": "cos_neg, cos x * cos (-y) - sin x * sin (-y) = cos x * cos y + sin x * sin y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos (-y) - sin x * sin (-y) = cos x * cos y + sin x * sin y"
                },
                {
                    "args": "cos_add, cos (x + -y) = cos x * cos y + sin x * sin y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + -y) = cos x * cos y + sin x * sin y"
                },
                {
                    "args": "real_minus_def, cos (x - y) = cos x * cos y + sin x * sin y",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x - y) = cos x * cos y + sin x * sin y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (x - y) = cos x * cos y + sin x * sin y"
                }
            ],
            "prop": "cos (x - y) = cos x * cos y + sin x * sin y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_sin_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin x * sin y = (cos x * cos y + sin x * sin y - (cos x * cos y - sin x * sin y)) / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x * sin y = (cos x * cos y + sin x * sin y - (cos x * cos y - sin x * sin y)) / 2"
                },
                {
                    "args": "cos_sub, sin x * sin y = (cos (x - y) - (cos x * cos y - sin x * sin y)) / 2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * sin y = (cos (x - y) - (cos x * cos y - sin x * sin y)) / 2"
                },
                {
                    "args": "cos_add, sin x * sin y = (cos (x - y) - cos (x + y)) / 2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * sin y = (cos (x - y) - cos (x + y)) / 2"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x * sin y = (cos (x - y) - cos (x + y)) / 2"
                }
            ],
            "prop": "sin x * sin y = (cos (x - y) - cos (x + y)) / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_sub"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_sin_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin x * cos y = (sin x * cos y + cos x * sin y + (sin x * cos y - cos x * sin y)) / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x * cos y = (sin x * cos y + cos x * sin y + (sin x * cos y - cos x * sin y)) / 2"
                },
                {
                    "args": "sin_sub, sin x * cos y = (sin x * cos y + cos x * sin y + sin (x - y)) / 2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * cos y = (sin x * cos y + cos x * sin y + sin (x - y)) / 2"
                },
                {
                    "args": "sin_add, sin x * cos y = (sin (x + y) + sin (x - y)) / 2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * cos y = (sin (x + y) + sin (x - y)) / 2"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x * cos y = (sin (x + y) + sin (x - y)) / 2"
                }
            ],
            "prop": "sin x * cos y = (sin (x + y) + sin (x - y)) / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_sub"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_cos_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x * sin y = (sin x * cos y + cos x * sin y - (sin x * cos y - cos x * sin y)) / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x * sin y = (sin x * cos y + cos x * sin y - (sin x * cos y - cos x * sin y)) / 2"
                },
                {
                    "args": "sin_sub, cos x * sin y = (sin x * cos y + cos x * sin y - sin (x - y)) / 2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * sin y = (sin x * cos y + cos x * sin y - sin (x - y)) / 2"
                },
                {
                    "args": "sin_add, cos x * sin y = (sin (x + y) - sin (x - y)) / 2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * sin y = (sin (x + y) - sin (x - y)) / 2"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x * sin y = (sin (x + y) - sin (x - y)) / 2"
                }
            ],
            "prop": "cos x * sin y = (sin (x + y) - sin (x - y)) / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_sub"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_mul_cos_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x * cos y = (cos x * cos y + sin x * sin y + (cos x * cos y - sin x * sin y)) / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x * cos y = (cos x * cos y + sin x * sin y + (cos x * cos y - sin x * sin y)) / 2"
                },
                {
                    "args": "cos_sub, cos x * cos y = (cos (x - y) + (cos x * cos y - sin x * sin y)) / 2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos y = (cos (x - y) + (cos x * cos y - sin x * sin y)) / 2"
                },
                {
                    "args": "cos_add, cos x * cos y = (cos (x - y) + cos (x + y)) / 2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos y = (cos (x - y) + cos (x + y)) / 2"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x * cos y = (cos (x - y) + cos (x + y)) / 2"
                }
            ],
            "prop": "cos x * cos y = (cos (x - y) + cos (x + y)) / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_sub"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_add_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(x + y) / 2 + (x - y) / 2 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x + y) / 2 + (x - y) / 2 = x"
                },
                {
                    "args": "(x + y) / 2 - (x - y) / 2 = y",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x + y) / 2 - (x - y) / 2 = y"
                },
                {
                    "args": "sin x + sin y = 2 * ((sin x + sin y) / 2)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x + sin y = 2 * ((sin x + sin y) / 2)"
                },
                {
                    "args": "sin x + sin y = 2 * ((sin x + sin ((x + y) / 2 - (x - y) / 2)) / 2)",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x + sin y = 2 * ((sin x + sin ((x + y) / 2 - (x - y) / 2)) / 2)"
                },
                {
                    "args": "sin x + sin y = 2 * ((sin ((x + y) / 2 + (x - y) / 2) + sin ((x + y) / 2 - (x - y) / 2)) / 2)",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x + sin y = 2 * ((sin ((x + y) / 2 + (x - y) / 2) + sin ((x + y) / 2 - (x - y) / 2)) / 2)"
                },
                {
                    "args": "real_mul_sin_cos, sin x + sin y = 2 * (sin ((x + y) / 2) * cos ((x - y) / 2))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + sin y = 2 * (sin ((x + y) / 2) * cos ((x - y) / 2))"
                },
                {
                    "args": "real_mult_assoc, sin x + sin y = 2 * sin ((x + y) / 2) * cos ((x - y) / 2)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x + sin y = 2 * sin ((x + y) / 2) * cos ((x - y) / 2)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x + sin y = 2 * sin ((x + y) / 2) * cos ((x - y) / 2)"
                }
            ],
            "prop": "sin x + sin y = 2 * sin ((x + y) / 2) * cos ((x - y) / 2)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_sin_cos"
                },
                {
                    "goal": "((x + y) / 2 + (x - y) / 2) = x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "goal": "(x + y) / 2 - (x - y) / 2 = y",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sub_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(x - y) / 2 + (x + y) / 2 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x - y) / 2 + (x + y) / 2 = x"
                },
                {
                    "args": "(x - y) / 2 - (x + y) / 2 = -y",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x - y) / 2 - (x + y) / 2 = -y"
                },
                {
                    "args": "sin x - sin y = 2 * ((sin x + -(sin y)) / 2)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x - sin y = 2 * ((sin x + -(sin y)) / 2)"
                },
                {
                    "args": "sin_neg, sin x - sin y = 2 * ((sin x + sin (-y)) / 2)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - sin y = 2 * ((sin x + sin (-y)) / 2)"
                },
                {
                    "args": "sin x - sin y = 2 * ((sin x + sin ((x - y) / 2 - (x + y) / 2)) / 2)",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x - sin y = 2 * ((sin x + sin ((x - y) / 2 - (x + y) / 2)) / 2)"
                },
                {
                    "args": "sin x - sin y = 2 * ((sin ((x - y) / 2 + (x + y) / 2) + sin ((x - y) / 2 - (x + y) / 2)) / 2)",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x - sin y = 2 * ((sin ((x - y) / 2 + (x + y) / 2) + sin ((x - y) / 2 - (x + y) / 2)) / 2)"
                },
                {
                    "args": "real_mul_sin_cos, sin x - sin y = 2 * (sin ((x - y) / 2) * cos ((x + y) / 2))",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - sin y = 2 * (sin ((x - y) / 2) * cos ((x + y) / 2))"
                },
                {
                    "args": "real_mult_assoc, sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2)"
                }
            ],
            "prop": "sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_sin_cos"
                },
                {
                    "goal": "(x - y) / 2 + (x + y) / 2 = x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "goal": "(x - y) / 2 - (x + y) / 2 = -y",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_neg"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_add_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(x + y) / 2 - (x - y) / 2 = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x + y) / 2 - (x - y) / 2 = y"
                },
                {
                    "args": "(x + y) / 2 + (x - y) / 2 = x",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x + y) / 2 + (x - y) / 2 = x"
                },
                {
                    "args": "cos x + cos y = 2 * ((cos y + cos x) / 2)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x + cos y = 2 * ((cos y + cos x) / 2)"
                },
                {
                    "args": "cos x + cos y = 2 * ((cos y + cos ((x + y) / 2 + (x - y) / 2)) / 2)",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x + cos y = 2 * ((cos y + cos ((x + y) / 2 + (x - y) / 2)) / 2)"
                },
                {
                    "args": "cos x + cos y = 2 * ((cos ((x + y) / 2 - (x - y) / 2) + cos ((x + y) / 2 + (x - y) / 2)) / 2)",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x + cos y = 2 * ((cos ((x + y) / 2 - (x - y) / 2) + cos ((x + y) / 2 + (x - y) / 2)) / 2)"
                },
                {
                    "args": "real_mul_cos_cos, cos x + cos y = 2 * (cos ((x + y) / 2) * cos ((x - y) / 2))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x + cos y = 2 * (cos ((x + y) / 2) * cos ((x - y) / 2))"
                },
                {
                    "args": "real_mult_assoc, cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2)"
                }
            ],
            "prop": "cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_cos_cos"
                },
                {
                    "goal": "(x + y) / 2 - (x - y) / 2 = y",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "goal": "(x + y) / 2 + (x - y) / 2 = x",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sub_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(x + y) / 2 - (y - x) / 2 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x + y) / 2 - (y - x) / 2 = x"
                },
                {
                    "args": "(x + y) / 2 + (y - x) / 2 = y",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (x + y) / 2 + (y - x) / 2 = y"
                },
                {
                    "args": "cos x - cos y = 2 * ((cos x - cos y) / 2)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x - cos y = 2 * ((cos x - cos y) / 2)"
                },
                {
                    "args": "cos x - cos y = 2 * ((cos x - cos ((x + y) / 2 + (y - x) / 2)) / 2)",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x - cos y = 2 * ((cos x - cos ((x + y) / 2 + (y - x) / 2)) / 2)"
                },
                {
                    "args": "cos x - cos y = 2 * ((cos ((x + y) / 2 - (y - x) / 2) - cos ((x + y) / 2 + (y - x) / 2)) / 2)",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x - cos y = 2 * ((cos ((x + y) / 2 - (y - x) / 2) - cos ((x + y) / 2 + (y - x) / 2)) / 2)"
                },
                {
                    "args": "real_mul_sin_sin, cos x - cos y = 2 * (sin ((x + y) / 2) * sin ((y - x) / 2))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x - cos y = 2 * (sin ((x + y) / 2) * sin ((y - x) / 2))"
                },
                {
                    "args": "real_mult_assoc, cos x - cos y = 2 * sin ((x + y) / 2) * sin ((y - x) / 2)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ cos x - cos y = 2 * sin ((x + y) / 2) * sin ((y - x) / 2)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x - cos y = 2 * sin ((x + y) / 2) * sin ((y - x) / 2)"
                }
            ],
            "prop": "cos x - cos y = 2 * sin ((x + y) / 2) * sin ((y - x) / 2)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_sin_sin"
                },
                {
                    "goal": "(x + y) / 2 - (y - x) / 2 = x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "goal": "(x + y) / 2 + (y - x) / 2 = y",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_double_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin x ^ (2::nat) + cos x ^ (2::nat)"
                },
                {
                    "args": "cos x * cos x - sin x * sin x = sin x * sin x + cos x * cos x - (sin x * sin x + sin x * sin x)",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x * cos x - sin x * sin x = sin x * sin x + cos x * cos x - (sin x * sin x + sin x * sin x)"
                },
                {
                    "args": "real_pow_2, cos x * cos x - sin x * sin x = sin x ^ (2::nat) + cos x ^ (2::nat) - (sin x ^ (2::nat) + sin x ^ (2::nat))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos x - sin x * sin x = sin x ^ (2::nat) + cos x ^ (2::nat) - (sin x ^ (2::nat) + sin x ^ (2::nat))"
                },
                {
                    "args": "cos x * cos x - sin x * sin x = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos x * cos x - sin x * sin x = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))"
                },
                {
                    "args": "cos_add, cos (x + x) = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + x) = 1 - (sin x ^ (2::nat) + sin x ^ (2::nat))"
                },
                {
                    "args": "real_mul_2, cos (2 * x) = 1 - 2 * sin x ^ (2::nat)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * x) = 1 - 2 * sin x ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (2 * x) = 1 - 2 * sin x ^ (2::nat)"
                }
            ],
            "prop": "cos (2 * x) = 1 - 2 * sin x ^ (2::nat)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_lower_degree",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin x ^ (2::nat) = 1 / 2 - 1 / 2 * (1 - 2 * sin x ^ (2::nat))",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x ^ (2::nat) = 1 / 2 - 1 / 2 * (1 - 2 * sin x ^ (2::nat))"
                },
                {
                    "args": "cos_double_sin, sin x ^ (2::nat) = 1 / 2 - 1 / 2 * cos (2 * x)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x ^ (2::nat) = 1 / 2 - 1 / 2 * cos (2 * x)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x ^ (2::nat) = 1 / 2 - 1 / 2 * cos (2 * x)"
                }
            ],
            "prop": "sin x ^ (2::nat) = 1 / 2 - 1 / 2 * cos (2 * x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double_sin"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log",
            "prop": "log y = (THE x. exp x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "exp_log",
            "prop": "0 < x ⟶ exp (log x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "log_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "exp_log",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log (exp x)) = exp x"
                },
                {
                    "args": "real_exp_inj, log (exp x) = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ log (exp x) = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ log (exp x) = x"
                }
            ],
            "prop": "log (exp x) = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_exp_log",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ exp (log x) = x ⟶ 0 < x"
                },
                {
                    "args": "exp (log x) = x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (log x) = x ⊢ exp (log x) = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "exp (log x) = x ⊢ x = exp (log x)"
                },
                {
                    "args": "real_exp_pos_lt, {x: log x}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log x)"
                },
                {
                    "args": "0 < x",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "exp (log x) = x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (log x) = x ⟶ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ exp (log x) = x"
                },
                {
                    "args": "0 < x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ exp (log x) = x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log x) = x ⟷ 0 < x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp (log x) = x ⟷ 0 < x"
                }
            ],
            "prop": "exp (log x) = x ⟷ 0 < x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "log_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "real_lt_mul",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ 0 < x * y"
                },
                {
                    "args": "real_exp_log, exp (log (x * y)) = x * y",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = x * y"
                },
                {
                    "args": "exp (log (x * y)) = x * exp (log y)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x ⊢ exp (log (x * y)) = x * exp (log y)"
                },
                {
                    "args": "exp (log (x * y)) = exp (log x) * exp (log y)",
                    "id": "7",
                    "prevs": [
                        "2",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = exp (log x) * exp (log y)"
                },
                {
                    "args": "real_exp_add, exp (log (x * y)) = exp (log x + log y)",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ exp (log (x * y)) = exp (log x + log y)"
                },
                {
                    "args": "real_exp_inj, log (x * y) = log x + log y",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y ⊢ log (x * y) = log x + log y"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log (x * y) = log x + log y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log (x * y) = log x + log y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "log_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟶ x = y"
                },
                {
                    "args": "log x = log y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x = log y ⊢ log x = log y"
                },
                {
                    "args": "real_exp_inj",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x = log y ⊢ exp (log x) = exp (log y)"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "2.2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {x: y}",
                    "id": "2.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x = log y ⊢ x = exp (log y)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.3",
                        "2.4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x = log y ⊢ x = y"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟶ x = y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x = y ⟶ log x = log y"
                },
                {
                    "args": "x = y",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "log x = log y",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ log x = log y"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x = y ⟶ log x = log y"
                },
                {
                    "args": "iffI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x = log y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x = log y ⟷ x = y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x = log y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2.2",
                        "2.1"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2.3",
                        "2.4"
                    ],
                    "goal_id": "2.5",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "log_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(0::real) < 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "exp_log",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ exp (log 1) = 1"
                },
                {
                    "args": "real_exp_0, exp (log 1) = exp 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (log 1) = exp 0"
                },
                {
                    "args": "real_exp_inj, log 1 = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ log 1 = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ log 1 = 0"
                }
            ],
            "prop": "log 1 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_inv",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "real_lt_inv",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 0 < real_inverse x"
                },
                {
                    "args": "real_exp_log, exp (log (real_inverse x)) = real_inverse x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (log (real_inverse x)) = real_inverse x"
                },
                {
                    "args": "exp (log (real_inverse x)) = real_inverse (exp (log x))",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log (real_inverse x)) = real_inverse (exp (log x))"
                },
                {
                    "args": "real_exp_neg, exp (log (real_inverse x)) = exp (-(log x))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (log (real_inverse x)) = exp (-(log x))"
                },
                {
                    "args": "real_exp_inj, log (real_inverse x) = -(log x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x ⊢ log (real_inverse x) = -(log x)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log (real_inverse x) = -(log x)"
                }
            ],
            "prop": "0 < x ⟶ log (real_inverse x) = -(log x)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_log"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_inv"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_div",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "log_inv, {x: y}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ log (real_inverse y) = -(log y)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 < y ⊢ -(log y) = log (real_inverse y)"
                },
                {
                    "args": "real_lt_inv",
                    "id": "4",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < y ⊢ 0 < real_inverse y"
                },
                {
                    "args": "log_mul",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log (x * real_inverse y) = log x + log (real_inverse y)"
                },
                {
                    "args": "log (x * real_inverse y) = log x + -(log y)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x ⊢ log (x * real_inverse y) = log x + -(log y)"
                },
                {
                    "args": "real_minus_def, log (x * real_inverse y) = log x - log y",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ log (x * real_inverse y) = log x - log y"
                },
                {
                    "args": "real_divide_def, log (x / y) = log x - log y",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < y ⊢ log (x / y) = log x - log y"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log (x / y) = log x - log y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log (x / y) = log x - log y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "log_inv"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_inv"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟶ x < y"
                },
                {
                    "args": "log x < log y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x < log y ⊢ log x < log y"
                },
                {
                    "args": "real_exp_mono_lt",
                    "id": "4.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x < log y ⊢ exp (log x) < exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [
                        "2",
                        "4.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x < log y ⊢ x < exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "3",
                        "4.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x < log y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟶ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x < y ⟶ log x < log y"
                },
                {
                    "args": "x < y",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "x < exp (log y)",
                    "id": "5.1",
                    "prevs": [
                        "3",
                        "5.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x, x < y ⊢ x < exp (log y)"
                },
                {
                    "args": "exp (log x) < exp (log y)",
                    "id": "5.2",
                    "prevs": [
                        "2",
                        "5.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y, x < y ⊢ exp (log x) < exp (log y)"
                },
                {
                    "args": "real_exp_mono_lt, log x < log y",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y, x < y ⊢ log x < log y"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [
                        "5.0",
                        "5.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x < y ⟶ log x < log y"
                },
                {
                    "args": "iffI",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x < log y ⟷ x < y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x < log y ⟷ x < y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "fact_ids": [
                        "2",
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "3",
                        "4.2"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_lt_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "real_lt_trans, {x: (0::real), y: x, z: y}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x < y ⊢ 0 < y"
                },
                {
                    "args": "log_mono_lt, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x < y ⊢ log x < log y ⟷ x < y"
                },
                {
                    "args": "log x < log y",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, x < y ⊢ log x < log y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x < y ⟶ log x < log y"
                }
            ],
            "prop": "0 < x ⟶ x < y ⟶ log x < log y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lt_trans"
                },
                {
                    "fact_ids": [
                        "0",
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_lt_rev",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "log x < log y",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x < log y ⊢ log x < log y"
                },
                {
                    "args": "log_mono_lt, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, 0 < y ⊢ log x < log y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, 0 < y, log x < log y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x < log y ⟶ x < y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x < log y ⟶ x < y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_lt"
                },
                {
                    "fact_ids": [
                        "3",
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp_log, {x: y}",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < y ⊢ exp (log y) = y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟶ x ≤ y"
                },
                {
                    "args": "log x ≤ log y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x ≤ log y ⊢ log x ≤ log y"
                },
                {
                    "args": "real_exp_mono_le",
                    "id": "4.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "log x ≤ log y ⊢ exp (log x) ≤ exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [
                        "2",
                        "4.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, log x ≤ log y ⊢ x ≤ exp (log y)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "3",
                        "4.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < y, 0 < x, log x ≤ log y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟶ x ≤ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, 0 < y ⊢ x ≤ y ⟶ log x ≤ log y"
                },
                {
                    "args": "x ≤ y",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "x ≤ exp (log y)",
                    "id": "5.1",
                    "prevs": [
                        "3",
                        "5.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < y, 0 < x, x ≤ y ⊢ x ≤ exp (log y)"
                },
                {
                    "args": "exp (log x) ≤ exp (log y)",
                    "id": "5.2",
                    "prevs": [
                        "2",
                        "5.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, 0 < y, x ≤ y ⊢ exp (log x) ≤ exp (log y)"
                },
                {
                    "args": "real_exp_mono_le, log x ≤ log y",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, 0 < y, x ≤ y ⊢ log x ≤ log y"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [
                        "5.0",
                        "5.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x, 0 < y ⊢ x ≤ y ⟶ log x ≤ log y"
                },
                {
                    "args": "iffI",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟷ x ≤ y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟷ x ≤ y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "fact_ids": [
                        "2",
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "3",
                        "4.2"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_le_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "real_lte_trans",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x ≤ y ⊢ 0 < y"
                },
                {
                    "args": "log_mono_le, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x ≤ y ⊢ log x ≤ log y ⟷ x ≤ y"
                },
                {
                    "args": "log x ≤ log y",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, x ≤ y ⊢ log x ≤ log y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x ≤ y ⟶ log x ≤ log y"
                }
            ],
            "prop": "0 < x ⟶ x ≤ y ⟶ log x ≤ log y",
            "steps": [
                {
                    "goal": "0 < y",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "0",
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_le"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_mono_le_rev",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "log x ≤ log y",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log x ≤ log y ⊢ log x ≤ log y"
                },
                {
                    "args": "log_mono_le, {x: x, y: y}",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, 0 < y ⊢ log x ≤ log y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, 0 < y, log x ≤ log y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟶ x ≤ y"
                }
            ],
            "prop": "0 < x ⟶ 0 < y ⟶ log x ≤ log y ⟶ x ≤ y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mono_le"
                },
                {
                    "fact_ids": [
                        "3",
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_pow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_pow_lt, {n: n, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < x ^ n"
                },
                {
                    "args": "exp_log, {x: x ^ n}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log (x ^ n)) = x ^ n"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "x ^ n = exp (log x) ^ n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ x ^ n = exp (log x) ^ n"
                },
                {
                    "args": "exp (log (x ^ n)) = exp (log x) ^ n",
                    "id": "5",
                    "prevs": [
                        "2",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log (x ^ n)) = exp (log x) ^ n"
                },
                {
                    "args": "real_exp_n, exp (log (x ^ n)) = exp (of_nat n * log x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (log (x ^ n)) = exp (of_nat n * log x)"
                },
                {
                    "args": "real_exp_inj, log (x ^ n) = of_nat n * log x",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x ⊢ log (x ^ n) = of_nat n * log x"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "0",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log (x ^ n) = of_nat n * log x"
                }
            ],
            "prop": "0 < x ⟶ log (x ^ n) = of_nat n * log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "real_pow_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_le_strong",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < 1 + x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < 1 + x ⊢ 0 < 1 + x"
                },
                {
                    "args": "exp_log, {x: 1 + x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < 1 + x ⊢ exp (log (1 + x)) = 1 + x"
                },
                {
                    "args": "real_exp_le_x, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "exp (log (1 + x)) ≤ exp x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < 1 + x ⊢ exp (log (1 + x)) ≤ exp x"
                },
                {
                    "args": "real_exp_mono_le, log (1 + x) ≤ x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < 1 + x ⊢ log (1 + x) ≤ x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < 1 + x ⟶ log (1 + x) ≤ x"
                }
            ],
            "prop": "0 < 1 + x ⟶ log (1 + x) ≤ x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_le_x"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "0 < 1 + x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x ⊢ 0 < 1 + x"
                },
                {
                    "args": "log_le_strong",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ log (1 + x) ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ log (1 + x) ≤ x"
                }
            ],
            "prop": "0 ≤ x ⟶ log (1 + x) ≤ x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_le_strong"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_lt_x",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "real_exp_le_x, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 + x ≤ exp x"
                },
                {
                    "args": "x < 1 + x",
                    "id": "3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ x < 1 + x"
                },
                {
                    "args": "real_lte_trans",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ x < exp x"
                },
                {
                    "args": "exp (log x) < exp x",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log x) < exp x"
                },
                {
                    "args": "real_exp_mono_lt, log x < x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x ⊢ log x < x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log x < x"
                }
            ],
            "prop": "0 < x ⟶ log x < x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_exp_le_x"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "param_y": "1+x",
                    "theorem": "real_lte_trans"
                },
                {
                    "goal_id": "3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_pos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 ≤ x ⊢ 1 ≤ x"
                },
                {
                    "args": "(0::real) < 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "log_mono_le_imp",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 ≤ x ⊢ log 1 ≤ log x"
                },
                {
                    "args": "log_1, 0 ≤ log x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "1 ≤ x ⊢ 0 ≤ log x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 ≤ x ⟶ 0 ≤ log x"
                }
            ],
            "prop": "1 ≤ x ⟶ 0 ≤ log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mono_le_imp"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "(0::real) < 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "log_mono_lt_imp",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x ⊢ log 1 < log x"
                },
                {
                    "args": "log_1, 0 < log x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "1 < x ⊢ 0 < log x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 < x ⟶ 0 < log x"
                }
            ],
            "prop": "1 < x ⟶ 0 < log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mono_lt_imp"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log_ge_zero",
            "num_gaps": 3,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ log x ⟶ 1 ≤ x"
                },
                {
                    "args": "0 ≤ log x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ log x ⊢ 0 ≤ log x"
                },
                {
                    "args": "(0::real) < 1",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ log x ⊢ ¬(0 < x) ⟶ ¬(0 ≤ log x)"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "real_less_def",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(0 < x) ⊢ ¬¬(x ≤ 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(0 < x) ⊢ x ≤ 0"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "¬(0 < x), 0 ≤ log x ⊢ log x < 0"
                },
                {
                    "args": "double_neg, ¬¬(log x < 0)",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), 0 ≤ log x ⊢ ¬¬(log x < 0)"
                },
                {
                    "args": "real_not_lt, ¬(0 ≤ log x)",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), 0 ≤ log x ⊢ ¬(0 ≤ log x)"
                },
                {
                    "args": "",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.0",
                        "0.2.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ log x ⊢ ¬(0 < x) ⟶ ¬(0 ≤ log x)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ log x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "0 ≤ log x ⊢ log 1 ≤ log x"
                },
                {
                    "args": "log_mono_le_rev",
                    "id": "0.5",
                    "prevs": [
                        "0.1",
                        "0.3",
                        "0.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ log x ⊢ 1 ≤ x"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ log x ⟶ 1 ≤ x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ 1 ≤ x ⟶ 0 ≤ log x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ log x ⟷ 1 ≤ x"
                },
                {
                    "args": "greater_eq_def, log x ≥ 0 ⟷ x ≥ 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ log x ≥ 0 ⟷ x ≥ 1"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ log x ≥ 0 ⟷ x ≥ 1"
                }
            ],
            "prop": "log x ≥ 0 ⟷ x ≥ 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "greater_eq_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mono_le_rev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log_gt_zero",
            "prop": "log x > 0 ⟷ x > 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log_le_zero",
            "prop": "log x ≤ 0 ⟷ x > 0 ∧ x ≤ 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "log_lt_zero",
            "prop": "log x < 0 ⟷ x > 0 ∧ x < 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_product",
            "num_gaps": 2,
            "proof": [
                {
                    "args": "finite s",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s ⊢ finite s"
                },
                {
                    "args": "∀x. x ∈ s ⟶ 0 < f x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀x. x ∈ s ⟶ 0 < f x ⊢ ∀x. x ∈ s ⟶ 0 < f x"
                },
                {
                    "args": "log_1, log 1 = 0",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ log 1 = 0"
                },
                {
                    "args": "product_empty, log (product ∅ f) = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s, ∀x. x ∈ s ⟶ 0 < f x ⊢ log (product ∅ f) = 0"
                },
                {
                    "args": "sum_empty, log (product ∅ f) = sum ∅ (λx. log (f x))",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s, ∀x. x ∈ s ⟶ 0 < f x ⊢ log (product ∅ f) = sum ∅ (λx. log (f x))"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "finite s, ∀x. x ∈ s ⟶ 0 < f x ⊢ ∀x. ∀s1. log (product s1 f) = sum s1 (λx1. log (f x1)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ log (product (insert x s1) f) = sum (insert x s1) (λx1. log (f x1))"
                },
                {
                    "args": "x, 'a",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "s1, 'a set",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s1"
                },
                {
                    "args": "log (product s1 f) = sum s1 (λx. log (f x))",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "log (product s1 f) = sum s1 (λx. log (f x)) ⊢ log (product s1 f) = sum s1 (λx. log (f x))"
                },
                {
                    "args": "¬(x ∈ s1)",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ∈ s1) ⊢ ¬(x ∈ s1)"
                },
                {
                    "args": "finite s1",
                    "id": "5.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s1 ⊢ finite s1"
                },
                {
                    "args": "sum_insert, {f: λx1. log (f x1), x: x}",
                    "id": "5.5",
                    "prevs": [
                        "5.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ sum (insert x s1) (λx1. log (f x1)) = (if x ∈ s1 then sum s1 (λx1. log (f x1)) else log (f x) + sum s1 (λx1. log (f x1)))"
                },
                {
                    "args": "product_insert, {f: f, x: x}",
                    "id": "5.6",
                    "prevs": [
                        "5.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x s1) f = (if x ∈ s1 then product s1 f else f x * product s1 f)"
                },
                {
                    "args": "if_not_P",
                    "id": "5.7",
                    "prevs": [
                        "5.5",
                        "5.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "finite s1, ¬(x ∈ s1) ⊢ sum (insert x s1) (λx1. log (f x1)) = log (f x) + sum s1 (λx1. log (f x1))"
                },
                {
                    "args": "if_not_P",
                    "id": "5.8",
                    "prevs": [
                        "5.6",
                        "5.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "finite s1, ¬(x ∈ s1) ⊢ product (insert x s1) f = f x * product s1 f"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "5.9",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "log (product s1 f) = sum s1 (λx. log (f x)) ⊢ sum s1 (λx. log (f x)) = log (product s1 f)"
                },
                {
                    "args": "",
                    "id": "5.10",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ x ∈ s"
                },
                {
                    "args": "x",
                    "id": "5.11",
                    "prevs": [
                        "1",
                        "5.10"
                    ],
                    "rule": "apply_fact_for",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ 0 < f x"
                },
                {
                    "args": "",
                    "id": "5.12",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ 0 < product s1 f"
                },
                {
                    "args": "log_mul",
                    "id": "5.13",
                    "prevs": [
                        "5.11",
                        "5.12"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ log (f x * product s1 f) = log (f x) + log (product s1 f)"
                },
                {
                    "args": "log (f x * product s1 f) = log (f x) + sum s1 (λx1. log (f x1))",
                    "id": "5.14",
                    "prevs": [
                        "5.9",
                        "5.13"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ log (f x * product s1 f) = log (f x) + sum s1 (λx1. log (f x1))"
                },
                {
                    "args": "log (f x * product s1 f) = sum (insert x s1) (λx1. log (f x1))",
                    "id": "5.15",
                    "prevs": [
                        "5.7",
                        "5.14"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ log (f x * product s1 f) = sum (insert x s1) (λx1. log (f x1))"
                },
                {
                    "args": "log (product (insert x s1) f) = sum (insert x s1) (λx1. log (f x1))",
                    "id": "5.16",
                    "prevs": [
                        "5.8",
                        "5.15"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "finite s, finite s1, ¬(x ∈ s1), ∀x. x ∈ s ⟶ 0 < f x, log (product s1 f) = sum s1 (λx. log (f x)) ⊢ log (product (insert x s1) f) = sum (insert x s1) (λx1. log (f x1))"
                },
                {
                    "args": "",
                    "id": "5.17",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.2",
                        "5.3",
                        "5.4",
                        "5.16"
                    ],
                    "rule": "intros",
                    "th": "finite s, ∀x. x ∈ s ⟶ 0 < f x ⊢ ∀x. ∀s1. log (product s1 f) = sum s1 (λx1. log (f x1)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ log (product (insert x s1) f) = sum (insert x s1) (λx1. log (f x1))"
                },
                {
                    "args": "finite_induct_strong",
                    "id": "6",
                    "prevs": [
                        "0",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s, ∀x. x ∈ s ⟶ 0 < f x ⊢ log (product s f) = sum s (λx. log (f x))"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ finite s ⟶ (∀x. x ∈ s ⟶ 0 < f x) ⟶ log (product s f) = sum s (λx. log (f x))"
                }
            ],
            "prop": "finite s ⟶ (∀x. x ∈ s ⟶ 0 < f x) ⟶ log (product s f) = sum s (λx. log (f x))",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_induct_strong"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sum_empty"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "product_empty"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "x,s1"
                },
                {
                    "fact_ids": [
                        "5.4"
                    ],
                    "goal_id": "5.5",
                    "method_name": "apply_forward_step",
                    "param_f": "(λx1. log (f x1))",
                    "param_x": "x",
                    "theorem": "sum_insert"
                },
                {
                    "fact_ids": [
                        "5.4"
                    ],
                    "goal_id": "5.6",
                    "method_name": "apply_forward_step",
                    "param_f": "f",
                    "param_x": "x",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "5.5",
                        "5.3"
                    ],
                    "goal_id": "5.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "5.6",
                        "5.3"
                    ],
                    "goal_id": "5.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "5.8"
                    ],
                    "goal_id": "5.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5.7"
                    ],
                    "goal_id": "5.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.9",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "5.9"
                    ],
                    "goal_id": "5.10",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.10",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "5.10",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "f": "'a ⇒ real",
                "s": "'a set"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_nearzero",
            "prop": "∃x. 0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y)",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_nontrivial",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_nearzero",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃x. 0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y)"
                },
                {
                    "args": "x, real",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ 0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y)"
                },
                {
                    "args": "conjD1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ 0 < x"
                },
                {
                    "args": "conjD2",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ ∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y"
                },
                {
                    "args": "x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ 0 < x ⟶ x ≤ x ⟶ 0 < sin x"
                },
                {
                    "args": "∀a::real. 0 < a ⟶ ¬(a = 0)",
                    "id": "6",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. 0 < a ⟶ ¬(a = 0)"
                },
                {
                    "args": "real_le_refl, {x: x}",
                    "id": "7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ≤ x"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "5",
                        "3",
                        "7"
                    ],
                    "rule": "apply_fact",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ 0 < sin x"
                },
                {
                    "args": "sin x",
                    "id": "9",
                    "prevs": [
                        "6",
                        "8"
                    ],
                    "rule": "apply_fact_for",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ ¬(sin x = 0)"
                },
                {
                    "args": "conjI",
                    "id": "10",
                    "prevs": [
                        "3",
                        "9"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ 0 < x ∧ ¬(sin x = 0)"
                },
                {
                    "args": "exI, {P: λx. 0 < x ∧ ¬(sin x = 0), a: x}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y) ⊢ ∃a1. 0 < a1 ∧ ¬(sin a1 = 0)"
                },
                {
                    "args": "∃x. 0 < x ∧ (∀y. 0 < y ⟶ y ≤ x ⟶ 0 < sin y)",
                    "id": "12",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "11"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃x. 0 < x ∧ ¬(sin x = 0)"
                }
            ],
            "prop": "∃x. 0 < x ∧ ¬(sin x = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "theorem": "sin_nearzero"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "forall_elim",
                    "s": "x"
                },
                {
                    "goal_id": "6",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "6",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal": "!a::real. 0 < a --> ~(a = 0)",
                    "goal_id": "6",
                    "method_name": "cut"
                },
                {
                    "goal_id": "6",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_nontrivial",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_nontrivial",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃x. 0 < x ∧ ¬(sin x = 0)"
                },
                {
                    "args": "x, real",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "0 < x ∧ ¬(sin x = 0)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ 0 < x ∧ ¬(sin x = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ 0 < x"
                },
                {
                    "args": "conjD2",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ ¬(sin x = 0)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ cos x = 1 ⟶ sin x = 0"
                },
                {
                    "args": "cos x = 1",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x = 1 ⊢ cos x = 1"
                },
                {
                    "args": "sin_circle, {x: x}",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin x ^ (2::nat) + cos x ^ (2::nat) = 1"
                },
                {
                    "args": "",
                    "id": "5.2",
                    "prevs": [
                        "5.0",
                        "5.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "cos x = 1 ⊢ sin x ^ (2::nat) + 1 ^ (2::nat) = 1"
                },
                {
                    "args": "real_pow_one",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "cos x = 1 ⊢ sin x ^ (2::nat) + 1 = 1"
                },
                {
                    "args": "∀a::real. a + 1 = 1 ⟶ a = 0",
                    "id": "5.4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. a + 1 = 1 ⟶ a = 0"
                },
                {
                    "args": "",
                    "id": "5.5",
                    "prevs": [
                        "5.4",
                        "5.3"
                    ],
                    "rule": "apply_fact",
                    "th": "cos x = 1 ⊢ sin x ^ (2::nat) = 0"
                },
                {
                    "args": "real_pow_2",
                    "id": "5.6",
                    "prevs": [
                        "5.5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "cos x = 1 ⊢ sin x * sin x = 0"
                },
                {
                    "args": "real_entire",
                    "id": "5.7",
                    "prevs": [
                        "5.6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "cos x = 1 ⊢ sin x = 0 ∨ sin x = 0"
                },
                {
                    "args": "sin x = 0 ⟶ sin x = 0",
                    "id": "5.8",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ sin x = 0 ⟶ sin x = 0"
                },
                {
                    "args": "disjE",
                    "id": "5.9",
                    "prevs": [
                        "5.7",
                        "5.8",
                        "5.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x = 1, 0 < x ∧ ¬(sin x = 0) ⊢ sin x = 0"
                },
                {
                    "args": "",
                    "id": "5.10",
                    "prevs": [
                        "5.0",
                        "5.9"
                    ],
                    "rule": "intros",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ cos x = 1 ⟶ sin x = 0"
                },
                {
                    "args": "double_neg, ¬¬(cos x = 1) ⟶ ¬¬(sin x = 0)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ ¬¬(cos x = 1) ⟶ ¬¬(sin x = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "7",
                    "prevs": [
                        "4",
                        "6"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ ¬(cos x = 1)"
                },
                {
                    "args": "conjI",
                    "id": "8",
                    "prevs": [
                        "3",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ 0 < x ∧ ¬(cos x = 1)"
                },
                {
                    "args": "exI, {P: λx. 0 < x ∧ ¬(cos x = 1), a: x}",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(sin x = 0) ⊢ ∃a1. 0 < a1 ∧ ¬(cos a1 = 1)"
                },
                {
                    "args": "∃x. 0 < x ∧ ¬(sin x = 0)",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃x. 0 < x ∧ ¬(cos x = 1)"
                }
            ],
            "prop": "∃x. 0 < x ∧ ¬(cos x = 1)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "theorem": "sin_nontrivial"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "5",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "5.0",
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal": "∀a::real. a + 1 = 1 ⟶ a = 0",
                    "goal_id": "5.4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5.4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5.4",
                        "5.3"
                    ],
                    "goal_id": "5.5",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "5.5"
                    ],
                    "goal_id": "5.6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "fact_ids": [
                        "5.6"
                    ],
                    "goal_id": "5.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "fact_ids": [
                        "5.7"
                    ],
                    "goal_id": "5.8",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_double_bound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ cos x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ cos x ⊢ 0 ≤ cos x"
                },
                {
                    "args": "∀a::real. ∀b. 2 * (1 - a) ≤ 1 - (2 * b - 1) ⟷ b ≤ a * 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. 2 * (1 - a) ≤ 1 - (2 * b - 1) ⟷ b ≤ a * 1"
                },
                {
                    "args": "cos_ubound, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ cos x ≤ 1"
                },
                {
                    "args": "real_le_lmul",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ cos x ⊢ cos x * cos x ≤ cos x * 1"
                },
                {
                    "args": "real_pow_2, cos x ^ (2::nat) ≤ cos x * 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ cos x ⊢ cos x ^ (2::nat) ≤ cos x * 1"
                },
                {
                    "args": "2 * (1 - cos x) ≤ 1 - (2 * cos x ^ (2::nat) - 1)",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 ≤ cos x ⊢ 2 * (1 - cos x) ≤ 1 - (2 * cos x ^ (2::nat) - 1)"
                },
                {
                    "args": "cos_double_cos, 2 * (1 - cos x) ≤ 1 - cos (2 * x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ cos x ⊢ 2 * (1 - cos x) ≤ 1 - cos (2 * x)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ cos x ⟶ 2 * (1 - cos x) ≤ 1 - cos (2 * x)"
                }
            ],
            "prop": "0 ≤ cos x ⟶ 2 * (1 - cos x) ≤ 1 - cos (2 * x)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double_cos"
                },
                {
                    "goal": "∀a::real. ∀b. 2 * (1 - a) ≤ 1 - (2 * b - 1) ⟷ b ≤ a * 1",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_lmul"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "cos_ubound"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_goesnegative_lemma",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x < 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x < 1 ⊢ cos x < 1"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1 ⊢ ¬(∃n::nat. cos (2 ^ n * x) < 0) ⟶ false"
                },
                {
                    "args": "¬(∃n::nat. cos (2 ^ n * x) < 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ¬(∃n::nat. cos (2 ^ n * x) < 0)"
                },
                {
                    "args": "not_exists",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀x1::nat. ¬(cos (2 ^ x1 * x) < 0)"
                },
                {
                    "args": "real_not_lt",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀x1::nat. 0 ≤ cos (2 ^ x1 * x)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n::nat. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "n, nat",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "real_le_refl, {x: 1 - cos x}",
                    "id": "1.3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 1 - cos x ≤ 1 - cos x"
                },
                {
                    "args": "real_mul_lid, 1 * (1 - cos x) ≤ 1 - cos (1 * x)",
                    "id": "1.3.2",
                    "prevs": [
                        "1.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 1 * (1 - cos x) ≤ 1 - cos (1 * x)"
                },
                {
                    "args": "real_nat_power_def_1, 2 ^ (0::nat) * (1 - cos x) ≤ 1 - cos (2 ^ (0::nat) * x)",
                    "id": "1.3.3",
                    "prevs": [
                        "1.3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 2 ^ (0::nat) * (1 - cos x) ≤ 1 - cos (2 ^ (0::nat) * x)"
                },
                {
                    "args": "",
                    "id": "1.3.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⟶ 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)"
                },
                {
                    "args": "2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)",
                    "id": "1.3.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "real_pos, {n: bit0 1}",
                    "id": "1.3.4.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 2"
                },
                {
                    "args": "real_le_lmul",
                    "id": "1.3.4.2",
                    "prevs": [
                        "1.3.4.1",
                        "1.3.4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * (2 ^ n * (1 - cos x)) ≤ 2 * (1 - cos (2 ^ n * x))"
                },
                {
                    "args": "real_mult_assoc, 2 * 2 ^ n * (1 - cos x) ≤ 2 * (1 - cos (2 ^ n * x))",
                    "id": "1.3.4.3",
                    "prevs": [
                        "1.3.4.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * 2 ^ n * (1 - cos x) ≤ 2 * (1 - cos (2 ^ n * x))"
                },
                {
                    "args": "n",
                    "id": "1.3.4.4",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 0 ≤ cos (2 ^ n * x)"
                },
                {
                    "args": "cos_double_bound",
                    "id": "1.3.4.5",
                    "prevs": [
                        "1.3.4.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * (1 - cos (2 ^ n * x)) ≤ 1 - cos (2 * (2 ^ n * x))"
                },
                {
                    "args": "real_mult_assoc, 2 * (1 - cos (2 ^ n * x)) ≤ 1 - cos (2 * 2 ^ n * x)",
                    "id": "1.3.4.6",
                    "prevs": [
                        "1.3.4.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * (1 - cos (2 ^ n * x)) ≤ 1 - cos (2 * 2 ^ n * x)"
                },
                {
                    "args": "real_le_trans",
                    "id": "1.3.4.7",
                    "prevs": [
                        "1.3.4.3",
                        "1.3.4.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 * 2 ^ n * (1 - cos x) ≤ 1 - cos (2 * 2 ^ n * x)"
                },
                {
                    "args": "real_nat_power_def_2, 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)",
                    "id": "1.3.4.8",
                    "prevs": [
                        "1.3.4.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⊢ 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)"
                },
                {
                    "args": "",
                    "id": "1.3.4.9",
                    "prevs": [
                        "1.3.0",
                        "1.3.4.0",
                        "1.3.4.8"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x) ⟶ 2 ^ Suc n * (1 - cos x) ≤ 1 - cos (2 ^ Suc n * x)"
                },
                {
                    "args": "nat_induct, {P: λn::nat. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x), x: n}",
                    "id": "1.3.5",
                    "prevs": [
                        "1.3.3",
                        "1.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "",
                    "id": "1.3.6",
                    "prevs": [
                        "1.3.0",
                        "1.3.5"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ ∀n::nat. 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "real_arch_pow2, {x: 1 / (1 - cos x)}",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃n::nat. 1 / (1 - cos x) < 2 ^ n"
                },
                {
                    "args": "n, nat",
                    "id": "1.5",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "1 / (1 - cos x) < 2 ^ n",
                    "id": "1.6",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 / (1 - cos x) < 2 ^ n ⊢ 1 / (1 - cos x) < 2 ^ n"
                },
                {
                    "args": "∀x::real. x < 1 ⟶ 0 < 1 - x",
                    "id": "1.7",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x < 1 ⟶ 0 < 1 - x"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [
                        "1.7",
                        "0"
                    ],
                    "rule": "apply_fact",
                    "th": "cos x < 1 ⊢ 0 < 1 - cos x"
                },
                {
                    "args": "real_lt_ldiv_eq, {x: (1::real), y: (2::real) ^ n, z: 1 - cos x}",
                    "id": "1.9",
                    "prevs": [
                        "1.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1 ⊢ 1 / (1 - cos x) < 2 ^ n ⟷ 1 < 2 ^ n * (1 - cos x)"
                },
                {
                    "args": "",
                    "id": "1.10",
                    "prevs": [
                        "1.9",
                        "1.6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "cos x < 1, 1 / (1 - cos x) < 2 ^ n ⊢ 1 < 2 ^ n * (1 - cos x)"
                },
                {
                    "args": "n",
                    "id": "1.11",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 2 ^ n * (1 - cos x) ≤ 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "real_lte_trans, {x: (1::real), y: 2 ^ n * (1 - cos x), z: 1 - cos (2 ^ n * x)}",
                    "id": "1.12",
                    "prevs": [
                        "1.10",
                        "1.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1, 1 / (1 - cos x) < 2 ^ n, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 1 < 1 - cos (2 ^ n * x)"
                },
                {
                    "args": "",
                    "id": "1.13",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n ⊢ ¬false ⟶ ¬(1 < 1 - cos (2 ^ n * x))"
                },
                {
                    "args": "¬false",
                    "id": "1.13.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "∀x::real. 0 ≤ x ⟶ 1 - x ≤ 1",
                    "id": "1.13.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. 0 ≤ x ⟶ 1 - x ≤ 1"
                },
                {
                    "args": "n",
                    "id": "1.13.2",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ 0 ≤ cos (2 ^ n * x)"
                },
                {
                    "args": "cos (2 ^ n * x)",
                    "id": "1.13.3",
                    "prevs": [
                        "1.13.1",
                        "1.13.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n, ¬false ⊢ 1 - cos (2 ^ n * x) ≤ 1"
                },
                {
                    "args": "real_not_lt, ¬(1 < 1 - cos (2 ^ n * x))",
                    "id": "1.13.4",
                    "prevs": [
                        "1.13.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n, ¬false ⊢ ¬(1 < 1 - cos (2 ^ n * x))"
                },
                {
                    "args": "",
                    "id": "1.13.5",
                    "prevs": [
                        "1.13.0",
                        "1.13.4"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1, ¬(∃n::nat. cos (2 ^ n * x) < 0), 1 / (1 - cos x) < 2 ^ n ⊢ ¬false ⟶ ¬(1 < 1 - cos (2 ^ n * x))"
                },
                {
                    "args": "contrapositive",
                    "id": "1.14",
                    "prevs": [
                        "1.12",
                        "1.13"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1, 1 / (1 - cos x) < 2 ^ n, ¬(∃n::nat. cos (2 ^ n * x) < 0) ⊢ false"
                },
                {
                    "args": "∃n::nat. 1 / (1 - cos x) < 2 ^ n",
                    "id": "1.15",
                    "prevs": [
                        "1.0",
                        "1.4",
                        "1.5",
                        "1.6",
                        "1.14"
                    ],
                    "rule": "intros",
                    "th": "cos x < 1 ⊢ ¬(∃n::nat. cos (2 ^ n * x) < 0) ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "cos x < 1 ⊢ ¬¬(∃n::nat. cos (2 ^ n * x) < 0)"
                },
                {
                    "args": "double_neg, ∃n::nat. cos (2 ^ n * x) < 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos x < 1 ⊢ ∃n::nat. cos (2 ^ n * x) < 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x < 1 ⟶ (∃n::nat. cos (2 ^ n * x) < 0)"
                }
            ],
            "prop": "cos x < 1 ⟶ (∃n::nat. cos (2 ^ n * x) < 0)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_exists"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_not_lt"
                },
                {
                    "goal": "!n::nat. 2 ^ n * (1-cos x) <= 1-cos (2 ^ n * x)",
                    "goal_id": "1.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                },
                {
                    "goal_id": "1.3.4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "apply_backward_step",
                    "param_y": "2 * (1 - cos (2 ^ n * x))",
                    "theorem": "real_le_trans"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_lmul"
                },
                {
                    "goal_id": "1.3.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pos"
                },
                {
                    "goal_id": "1.3.4.4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "1.3.4.4",
                    "method_name": "apply_backward_step",
                    "theorem": "cos_double_bound"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3.4.4",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_forward_step",
                    "param_x": "1/(1-cos x)",
                    "theorem": "real_arch_pow2"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal": "∀x::real. x < 1 ⟶ 0 < 1 - x",
                    "goal_id": "1.7",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.7",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.7",
                        "0"
                    ],
                    "goal_id": "1.8",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.8"
                    ],
                    "goal_id": "1.9",
                    "method_name": "apply_forward_step",
                    "param_x": "(1::real)",
                    "param_y": "(2::real) ^ n",
                    "theorem": "real_lt_ldiv_eq"
                },
                {
                    "fact_ids": [
                        "1.9",
                        "1.6"
                    ],
                    "goal_id": "1.10",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.11",
                    "method_name": "forall_elim",
                    "s": "n"
                },
                {
                    "fact_ids": [
                        "1.10",
                        "1.11"
                    ],
                    "goal_id": "1.12",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lte_trans"
                },
                {
                    "fact_ids": [
                        "1.12"
                    ],
                    "goal_id": "1.13",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.13",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.13.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_not_lt"
                },
                {
                    "goal": "!x::real. 0 <= x --> 1-x <= 1",
                    "goal_id": "1.13.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.13.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.13.1"
                    ],
                    "goal_id": "1.13.2",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.13.2",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": " cos_goesnegative",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_nontrivial",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃x. 0 < x ∧ ¬(cos x = 1)"
                },
                {
                    "args": "x, real",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "0 < x ∧ ¬(cos x = 1)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ 0 < x ∧ ¬(cos x = 1)"
                },
                {
                    "args": "conjD1, {A: 0 < x, B: ¬(cos x = 1)}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ 0 < x"
                },
                {
                    "args": "conjD2, {A: 0 < x, B: ¬(cos x = 1)}",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ ¬(cos x = 1)"
                },
                {
                    "args": "cos_ubound, {x: x}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ cos x ≤ 1"
                },
                {
                    "args": "real_le_lt",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ cos x < 1 ∨ cos x = 1"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x < 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "cos x < 1",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x < 1 ⊢ cos x < 1"
                },
                {
                    "args": "cos_goesnegative_lemma, {x: x}",
                    "id": "7.1",
                    "prevs": [
                        "7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "cos x < 1 ⊢ ∃n::nat. cos (2 ^ n * x) < 0"
                },
                {
                    "args": "n, nat",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "cos (2 ^ n * x) < 0",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos (2 ^ n * x) < 0 ⊢ cos (2 ^ n * x) < 0"
                },
                {
                    "args": "real_lt_pow2, {n: n}",
                    "id": "7.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) < 2 ^ n"
                },
                {
                    "args": "real_lt_mul",
                    "id": "7.5",
                    "prevs": [
                        "7.4",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x < 1, cos (2 ^ n * x) < 0 ⊢ 0 < 2 ^ n * x"
                },
                {
                    "args": "conjI",
                    "id": "7.6",
                    "prevs": [
                        "7.5",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x < 1, cos (2 ^ n * x) < 0 ⊢ 0 < 2 ^ n * x ∧ cos (2 ^ n * x) < 0"
                },
                {
                    "args": "exI, {P: λx. 0 < x ∧ cos x < 0, a: 2 ^ n * x}",
                    "id": "7.7",
                    "prevs": [
                        "7.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x < 1, cos (2 ^ n * x) < 0 ⊢ ∃a1. 0 < a1 ∧ cos a1 < 0"
                },
                {
                    "args": "∃n::nat. cos (2 ^ n * x) < 0",
                    "id": "7.8",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.2",
                        "7.3",
                        "7.7"
                    ],
                    "rule": "intros",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x < 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x = 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "cos x = 1",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x = 1 ⊢ cos x = 1"
                },
                {
                    "args": "negE_gen, {A: cos x = 1, C: ∃x. 0 < x ∧ cos x < 0}",
                    "id": "8.1",
                    "prevs": [
                        "4",
                        "8.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ ¬(cos x = 1), cos x = 1 ⊢ ∃x. 0 < x ∧ cos x < 0"
                },
                {
                    "args": "",
                    "id": "8.2",
                    "prevs": [
                        "8.0",
                        "8.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ cos x = 1 ⟶ (∃x1. 0 < x1 ∧ cos x1 < 0)"
                },
                {
                    "args": "disjE",
                    "id": "9",
                    "prevs": [
                        "6",
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ ¬(cos x = 1) ⊢ ∃x. 0 < x ∧ cos x < 0"
                },
                {
                    "args": "∃x. 0 < x ∧ ¬(cos x = 1)",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃x. 0 < x ∧ cos x < 0"
                }
            ],
            "prop": "∃x. 0 < x ∧ cos x < 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "theorem": "cos_nontrivial"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "cos_ubound"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "apply_forward_step",
                    "theorem": "cos_goesnegative_lemma"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "inst_exists_goal",
                    "s": "2 ^ n * x"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_pow2"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4",
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_haszero",
            "prop": "∃x. 0 < x ∧ cos x = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_haszero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_haszero",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃x. 0 < x ∧ cos x = 0"
                },
                {
                    "args": "x, real",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "0 < x ∧ cos x = 0",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ∧ cos x = 0 ⊢ 0 < x ∧ cos x = 0"
                },
                {
                    "args": "conjD1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ cos x = 0 ⊢ 0 < x"
                },
                {
                    "args": "conjD2",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ cos x = 0 ⊢ cos x = 0"
                },
                {
                    "args": "(0::real) < 2",
                    "id": "5",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 2"
                },
                {
                    "args": "real_lt_mul",
                    "id": "6",
                    "prevs": [
                        "5",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ cos x = 0 ⊢ 0 < 2 * x"
                },
                {
                    "args": "disjI1, {A: cos x = 0, B: 2 * sin x = 0}",
                    "id": "7",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ cos x = 0 ⊢ cos x = 0 ∨ 2 * sin x = 0"
                },
                {
                    "args": "real_entire, cos x * (2 * sin x) = 0",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ∧ cos x = 0 ⊢ cos x * (2 * sin x) = 0"
                },
                {
                    "args": "real_mult_comm, 2 * sin x * cos x = 0",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ∧ cos x = 0 ⊢ 2 * sin x * cos x = 0"
                },
                {
                    "args": "sin_double, sin (2 * x) = 0",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ∧ cos x = 0 ⊢ sin (2 * x) = 0"
                },
                {
                    "args": "conjI",
                    "id": "11",
                    "prevs": [
                        "6",
                        "10"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ∧ cos x = 0 ⊢ 0 < 2 * x ∧ sin (2 * x) = 0"
                },
                {
                    "args": "exI, {P: λx. 0 < x ∧ sin x = 0, a: 2 * x}",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ∧ cos x = 0 ⊢ ∃a1. 0 < a1 ∧ sin a1 = 0"
                },
                {
                    "args": "∃x. 0 < x ∧ cos x = 0",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃x. 0 < x ∧ sin x = 0"
                }
            ],
            "prop": "∃x. 0 < x ∧ sin x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "theorem": "cos_haszero"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "x"
                },
                {
                    "goal_id": "3",
                    "method_name": "inst_exists_goal",
                    "s": "2 * x"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "5",
                    "method_name": "z3"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_double"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_haszero_minimal",
            "prop": "∃p. 0 < p ∧ sin p = 0 ∧ (∀x. 0 < x ⟶ x < p ⟶ ¬(sin x = 0))",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "pi",
            "prop": "pi = (THE p. 0 < p ∧ sin p = 0 ∧ (∀x. 0 < x ⟶ x < p ⟶ ¬(sin x = 0)))",
            "ty": "def",
            "type": "real"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "pi_pos",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ 0 < (THE p. 0 < p ∧ sin p = 0 ∧ (∀x. 0 < x ⟶ x < p ⟶ ¬(sin x = 0)))"
                },
                {
                    "args": "pi_def, 0 < pi",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < pi"
                }
            ],
            "prop": "0 < pi",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "pi_def"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sin_pi",
            "prop": "sin pi = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi",
            "prop": "0 < x ⟶ x < pi ⟶ 0 < sin x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_pi2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_double, {x: pi / 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (2 * (pi / 2)) = 2 * sin (pi / 2) * cos (pi / 2)"
                },
                {
                    "args": "2 * (pi / 2) = pi",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * (pi / 2) = pi"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ sin pi = 2 * sin (pi / 2) * cos (pi / 2)"
                },
                {
                    "args": "real_sin_pi",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 = 2 * sin (pi / 2) * cos (pi / 2)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 2 * sin (pi / 2) * cos (pi / 2) = 0"
                },
                {
                    "args": "real_entire",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 2 * sin (pi / 2) = 0 ∨ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 2 * sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "2 * sin (pi / 2) = 0",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 * sin (pi / 2) = 0 ⊢ 2 * sin (pi / 2) = 0"
                },
                {
                    "args": "real_entire",
                    "id": "6.1",
                    "prevs": [
                        "6.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "2 * sin (pi / 2) = 0 ⊢ (2::real) = 0 ∨ sin (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0 ⊢ (2::real) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "(2::real) = 0",
                    "id": "6.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(2::real) = 0 ⊢ (2::real) = 0"
                },
                {
                    "args": "",
                    "id": "6.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0, (2::real) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬((2::real) = 0)"
                },
                {
                    "args": "¬(cos (pi / 2) = 0)",
                    "id": "6.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (pi / 2) = 0) ⊢ ¬(cos (pi / 2) = 0)"
                },
                {
                    "args": "¬((2::real) = 0)",
                    "id": "6.2.1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬((2::real) = 0)"
                },
                {
                    "args": "",
                    "id": "6.2.1.2",
                    "prevs": [
                        "6.2.1.0",
                        "6.2.1.1"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0, (2::real) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬((2::real) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "6.2.2",
                    "prevs": [
                        "6.2.0",
                        "6.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "(2::real) = 0, 2 * sin (pi / 2) = 0 ⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.2.3",
                    "prevs": [
                        "6.2.0",
                        "6.2.2"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0 ⊢ (2::real) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0 ⊢ sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "sin (pi / 2) = 0",
                    "id": "6.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sin (pi / 2) = 0 ⊢ sin (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬(sin (pi / 2) = 0)"
                },
                {
                    "args": "¬(cos (pi / 2) = 0)",
                    "id": "6.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (pi / 2) = 0) ⊢ ¬(cos (pi / 2) = 0)"
                },
                {
                    "args": "pi_pos",
                    "id": "6.3.1.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "0 < real_inverse 2",
                    "id": "6.3.1.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 0 < real_inverse 2"
                },
                {
                    "args": "real_lt_mul",
                    "id": "6.3.1.3",
                    "prevs": [
                        "6.3.1.1",
                        "6.3.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ 0 < pi * real_inverse 2"
                },
                {
                    "args": "real_divide_def, 0 < pi / 2",
                    "id": "6.3.1.4",
                    "prevs": [
                        "6.3.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ 0 < pi / 2"
                },
                {
                    "args": "real_inverse 2 * 1 < 1",
                    "id": "6.3.1.5",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ real_inverse 2 * 1 < 1"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "6.3.1.6",
                    "prevs": [
                        "6.3.1.1",
                        "6.3.1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi * (real_inverse 2 * 1) < pi * 1"
                },
                {
                    "args": "real_mult_assoc, pi * real_inverse 2 * 1 < pi * 1",
                    "id": "6.3.1.7",
                    "prevs": [
                        "6.3.1.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi * real_inverse 2 * 1 < pi * 1"
                },
                {
                    "args": "real_mul_rid, pi * real_inverse 2 < pi",
                    "id": "6.3.1.8",
                    "prevs": [
                        "6.3.1.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi * real_inverse 2 < pi"
                },
                {
                    "args": "real_divide_def, pi / 2 < pi",
                    "id": "6.3.1.9",
                    "prevs": [
                        "6.3.1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ pi / 2 < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "6.3.1.10",
                    "prevs": [
                        "6.3.1.4",
                        "6.3.1.9"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ 0 < sin (pi / 2)"
                },
                {
                    "args": "double_neg, ¬¬(0 < sin (pi / 2))",
                    "id": "6.3.1.11",
                    "prevs": [
                        "6.3.1.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬¬(0 < sin (pi / 2))"
                },
                {
                    "args": "real_not_lt, ¬(sin (pi / 2) ≤ 0)",
                    "id": "6.3.1.12",
                    "prevs": [
                        "6.3.1.11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) ≤ 0)"
                },
                {
                    "args": "disjI1, {A: ¬(sin (pi / 2) ≤ 0), B: ¬(0 ≤ sin (pi / 2))}",
                    "id": "6.3.1.13",
                    "prevs": [
                        "6.3.1.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) ≤ 0) ∨ ¬(0 ≤ sin (pi / 2))"
                },
                {
                    "args": "de_morgan_thm1, ¬(sin (pi / 2) ≤ 0 ∧ 0 ≤ sin (pi / 2))",
                    "id": "6.3.1.14",
                    "prevs": [
                        "6.3.1.13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) ≤ 0 ∧ 0 ≤ sin (pi / 2))"
                },
                {
                    "args": "real_le_antisym, ¬(sin (pi / 2) = 0)",
                    "id": "6.3.1.15",
                    "prevs": [
                        "6.3.1.14"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0, ¬(cos (pi / 2) = 0) ⊢ ¬(sin (pi / 2) = 0)"
                },
                {
                    "args": "",
                    "id": "6.3.1.16",
                    "prevs": [
                        "6.3.1.0",
                        "6.3.1.15"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0, sin (pi / 2) = 0 ⊢ ¬(cos (pi / 2) = 0) ⟶ ¬(sin (pi / 2) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "6.3.2",
                    "prevs": [
                        "6.3.0",
                        "6.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = 0, 2 * sin (pi / 2) = 0 ⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.3.3",
                    "prevs": [
                        "6.3.0",
                        "6.3.2"
                    ],
                    "rule": "intros",
                    "th": "2 * sin (pi / 2) = 0 ⊢ sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "disjE",
                    "id": "6.4",
                    "prevs": [
                        "6.1",
                        "6.2",
                        "6.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 * sin (pi / 2) = 0 ⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "6.5",
                    "prevs": [
                        "6.0",
                        "6.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 2 * sin (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "cos (pi / 2) = 0 ⟶ cos (pi / 2) = 0",
                    "id": "7",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ cos (pi / 2) = 0 ⟶ cos (pi / 2) = 0"
                },
                {
                    "args": "disjE",
                    "id": "8",
                    "prevs": [
                        "5",
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ cos (pi / 2) = 0"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (pi / 2) = 0"
                }
            ],
            "prop": "cos (pi / 2) = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "pi/2",
                    "theorem": "sin_double"
                },
                {
                    "goal": "2 * (pi/2) = pi",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "1",
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.0"
                    ],
                    "goal_id": "6.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "fact_ids": [
                        "6.1"
                    ],
                    "goal_id": "6.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.2.0"
                    ],
                    "goal_id": "6.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "6.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.2.1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "6.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.3.0"
                    ],
                    "goal_id": "6.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "6.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "goal_id": "6.3.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "pi_pos"
                },
                {
                    "goal_id": "6.3.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "6.3.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "6.3.1.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "6.3.1.5",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "pi = 2 * (pi / 2)",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ pi = 2 * (pi / 2)"
                },
                {
                    "args": "(2::real) * 0 ^ (2::nat) - 1 = -1",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ (2::real) * 0 ^ (2::nat) - 1 = -1"
                },
                {
                    "args": "real_cos_pi2, 2 * cos (pi / 2) ^ (2::nat) - 1 = -1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 2 * cos (pi / 2) ^ (2::nat) - 1 = -1"
                },
                {
                    "args": "cos_double_cos, cos (2 * (pi / 2)) = -1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (2 * (pi / 2)) = -1"
                },
                {
                    "args": "cos pi = -1",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos pi = -1"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos pi = -1"
                }
            ],
            "prop": "cos pi = -1",
            "steps": [
                {
                    "goal": "pi = 2 * (pi / 2)",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_double_cos"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sin_pi2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_circle, {x: pi / 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (pi / 2) ^ (2::nat) + cos (pi / 2) ^ (2::nat) = 1"
                },
                {
                    "args": "real_cos_pi2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) ^ (2::nat) + 0 ^ (2::nat) = 1"
                },
                {
                    "args": "real_pow_2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) * sin (pi / 2) + 0 * 0 = 1"
                },
                {
                    "args": "real_mul_lzero",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) * sin (pi / 2) + 0 = 1"
                },
                {
                    "args": "real_add_rid",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (pi / 2) * sin (pi / 2) = 1"
                },
                {
                    "args": "∀x::real. x * x = 1 ⟷ x = 1 ∨ x = -1",
                    "id": "5",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x * x = 1 ⟷ x = 1 ∨ x = -1"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ sin (pi / 2) = 1 ∨ sin (pi / 2) = -1"
                },
                {
                    "args": "sin (pi / 2) = 1 ⟶ sin (pi / 2) = 1",
                    "id": "7",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ sin (pi / 2) = 1 ⟶ sin (pi / 2) = 1"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ sin (pi / 2) = -1 ⟶ sin (pi / 2) = 1"
                },
                {
                    "args": "sin (pi / 2) = -1",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sin (pi / 2) = -1 ⊢ sin (pi / 2) = -1"
                },
                {
                    "args": "",
                    "id": "8.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "sin (pi / 2) = -1 ⊢ ¬(sin (pi / 2) = 1) ⟶ ¬(sin (pi / 2) = -1)"
                },
                {
                    "args": "¬(sin (pi / 2) = 1)",
                    "id": "8.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(sin (pi / 2) = 1) ⊢ ¬(sin (pi / 2) = 1)"
                },
                {
                    "args": "∀x::real. 0 < x ⟶ ¬(x = -1)",
                    "id": "8.1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. 0 < x ⟶ ¬(x = -1)"
                },
                {
                    "args": "pi_pos",
                    "id": "8.1.2",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "0 < real_inverse 2",
                    "id": "8.1.3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 0 < real_inverse 2"
                },
                {
                    "args": "real_lt_mul",
                    "id": "8.1.4",
                    "prevs": [
                        "8.1.2",
                        "8.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ 0 < pi * real_inverse 2"
                },
                {
                    "args": "real_divide_def, 0 < pi / 2",
                    "id": "8.1.5",
                    "prevs": [
                        "8.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ 0 < pi / 2"
                },
                {
                    "args": "real_inverse 2 * 1 < 1",
                    "id": "8.1.6",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ real_inverse 2 * 1 < 1"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "8.1.7",
                    "prevs": [
                        "8.1.2",
                        "8.1.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi * (real_inverse 2 * 1) < pi * 1"
                },
                {
                    "args": "real_mult_assoc, pi * real_inverse 2 * 1 < pi * 1",
                    "id": "8.1.8",
                    "prevs": [
                        "8.1.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi * real_inverse 2 * 1 < pi * 1"
                },
                {
                    "args": "real_mul_rid, pi * real_inverse 2 < pi",
                    "id": "8.1.9",
                    "prevs": [
                        "8.1.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi * real_inverse 2 < pi"
                },
                {
                    "args": "real_divide_def, pi / 2 < pi",
                    "id": "8.1.10",
                    "prevs": [
                        "8.1.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ pi / 2 < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "8.1.11",
                    "prevs": [
                        "8.1.5",
                        "8.1.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ 0 < sin (pi / 2)"
                },
                {
                    "args": "sin (pi / 2)",
                    "id": "8.1.12",
                    "prevs": [
                        "8.1.1",
                        "8.1.11"
                    ],
                    "rule": "apply_fact_for",
                    "th": "sin (pi / 2) = -1, ¬(sin (pi / 2) = 1) ⊢ ¬(sin (pi / 2) = -1)"
                },
                {
                    "args": "",
                    "id": "8.1.13",
                    "prevs": [
                        "8.1.0",
                        "8.1.12"
                    ],
                    "rule": "intros",
                    "th": "sin (pi / 2) = -1 ⊢ ¬(sin (pi / 2) = 1) ⟶ ¬(sin (pi / 2) = -1)"
                },
                {
                    "args": "contrapositive",
                    "id": "8.2",
                    "prevs": [
                        "8.0",
                        "8.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "sin (pi / 2) = -1 ⊢ sin (pi / 2) = 1"
                },
                {
                    "args": "",
                    "id": "8.3",
                    "prevs": [
                        "8.0",
                        "8.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (pi / 2) = -1 ⟶ sin (pi / 2) = 1"
                },
                {
                    "args": "disjE",
                    "id": "9",
                    "prevs": [
                        "6",
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sin (pi / 2) = 1"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (pi / 2) = 1"
                }
            ],
            "prop": "sin (pi / 2) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "pi / 2",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_add_rid"
                },
                {
                    "goal": "!x::real. x * x = 1 <--> x = 1 | x = -1",
                    "goal_id": "5",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5",
                        "4"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "introduction"
                },
                {
                    "goal": "∀x::real. 0 < x ⟶ ¬(x = -1)",
                    "goal_id": "8.1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "8.1.1"
                    ],
                    "goal_id": "8.1.2",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "8.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "pi_pos"
                },
                {
                    "goal_id": "8.1.3",
                    "method_name": "z3"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "8.1.6",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_cos",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 * cos x + 1 * sin x = sin x",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 0 * cos x + 1 * sin x = sin x"
                },
                {
                    "args": "real_sin_pi2, 0 * cos x + sin (pi / 2) * sin x = sin x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * cos x + sin (pi / 2) * sin x = sin x"
                },
                {
                    "args": "real_cos_pi2, cos (pi / 2) * cos x + sin (pi / 2) * sin x = sin x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (pi / 2) * cos x + sin (pi / 2) * sin x = sin x"
                },
                {
                    "args": "cos_sub, cos (pi / 2 - x) = sin x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (pi / 2 - x) = sin x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (pi / 2 - x) = sin x"
                }
            ],
            "prop": "cos (pi / 2 - x) = sin x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_sub"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi2"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_sin",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 * cos x - 0 * sin x = cos x",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 * cos x - 0 * sin x = cos x"
                },
                {
                    "args": "real_cos_pi2, 1 * cos x - cos (pi / 2) * sin x = cos x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * cos x - cos (pi / 2) * sin x = cos x"
                },
                {
                    "args": "real_sin_pi2, sin (pi / 2) * cos x - cos (pi / 2) * sin x = cos x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (pi / 2) * cos x - cos (pi / 2) * sin x = cos x"
                },
                {
                    "args": "sin_sub, sin (pi / 2 - x) = cos x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (pi / 2 - x) = cos x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (pi / 2 - x) = cos x"
                }
            ],
            "prop": "sin (pi / 2 - x) = cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_sub"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_periodic_pi_div2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 / 2 * pi = pi / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 / 2 * pi = pi / 2"
                },
                {
                    "args": "1 * cos x + 0 * sin x = cos x",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 * cos x + 0 * sin x = cos x"
                },
                {
                    "args": "real_cos_pi2, 1 * cos x + cos (pi / 2) * sin x = cos x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * cos x + cos (pi / 2) * sin x = cos x"
                },
                {
                    "args": "real_sin_pi2, sin (pi / 2) * cos x + cos (pi / 2) * sin x = cos x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (pi / 2) * cos x + cos (pi / 2) * sin x = cos x"
                },
                {
                    "args": "sin (1 / 2 * pi) * cos x + cos (1 / 2 * pi) * sin x = cos x",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin (1 / 2 * pi) * cos x + cos (1 / 2 * pi) * sin x = cos x"
                },
                {
                    "args": "sin_add, sin (1 / 2 * pi + x) = cos x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (1 / 2 * pi + x) = cos x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (1 / 2 * pi + x) = cos x"
                }
            ],
            "prop": "sin (1 / 2 * pi + x) = cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal": "1 / 2 * pi = pi / 2",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi2"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_periodic_pi_div2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 / 2 * pi = pi / 2",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 / 2 * pi = pi / 2"
                },
                {
                    "args": "0 * cos x - 1 * sin x = -(sin x)",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 0 * cos x - 1 * sin x = -(sin x)"
                },
                {
                    "args": "real_sin_pi2, 0 * cos x - sin (pi / 2) * sin x = -(sin x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * cos x - sin (pi / 2) * sin x = -(sin x)"
                },
                {
                    "args": "real_cos_pi2, cos (pi / 2) * cos x - sin (pi / 2) * sin x = -(sin x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (pi / 2) * cos x - sin (pi / 2) * sin x = -(sin x)"
                },
                {
                    "args": "cos_add, cos (pi / 2 + x) = -(sin x)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (pi / 2 + x) = -(sin x)"
                },
                {
                    "args": "cos (1 / 2 * pi + x) = -(sin x)",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos (1 / 2 * pi + x) = -(sin x)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (1 / 2 * pi + x) = -(sin x)"
                }
            ],
            "prop": "cos (1 / 2 * pi + x) = -(sin x)",
            "steps": [
                {
                    "goal": "1 / 2 * pi=pi / 2",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi2"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_periodic_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin x * -1 + cos x * 0 = -(sin x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x * -1 + cos x * 0 = -(sin x)"
                },
                {
                    "args": "real_sin_pi, sin x * -1 + cos x * sin pi = -(sin x)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * -1 + cos x * sin pi = -(sin x)"
                },
                {
                    "args": "real_cos_pi, sin x * cos pi + cos x * sin pi = -(sin x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x * cos pi + cos x * sin pi = -(sin x)"
                },
                {
                    "args": "sin_add, sin (x + pi) = -(sin x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + pi) = -(sin x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (x + pi) = -(sin x)"
                }
            ],
            "prop": "sin (x + pi) = -(sin x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_periodic_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos x * -1 - sin x * 0 = -(cos x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ cos x * -1 - sin x * 0 = -(cos x)"
                },
                {
                    "args": "real_sin_pi, cos x * -1 - sin x * sin pi = -(cos x)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * -1 - sin x * sin pi = -(cos x)"
                },
                {
                    "args": "real_cos_pi, cos x * cos pi - sin x * sin pi = -(cos x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos x * cos pi - sin x * sin pi = -(cos x)"
                },
                {
                    "args": "cos_add, cos (x + pi) = -(cos x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + pi) = -(cos x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (x + pi) = -(cos x)"
                }
            ],
            "prop": "cos (x + pi) = -(cos x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite_sym"
            ],
            "name": "sin_periodic",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_neg_neg, --(sin x) = sin x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ --(sin x) = sin x"
                },
                {
                    "args": "sin_periodic_pi, -(sin (x + pi)) = sin x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin (x + pi)) = sin x"
                },
                {
                    "args": "sin_periodic_pi, sin (x + pi + pi) = sin x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + pi + pi) = sin x"
                },
                {
                    "args": "real_add_assoc, sin (x + (pi + pi)) = sin x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + (pi + pi)) = sin x"
                },
                {
                    "args": "real_mul_2, sin (x + 2 * pi) = sin x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + 2 * pi) = sin x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (x + 2 * pi) = sin x"
                }
            ],
            "prop": "sin (x + 2 * pi) = sin x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_assoc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_periodic",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_neg_neg, --(cos x) = cos x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ --(cos x) = cos x"
                },
                {
                    "args": "cos_periodic_pi, -(cos (x + pi)) = cos x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(cos (x + pi)) = cos x"
                },
                {
                    "args": "cos_periodic_pi, cos (x + pi + pi) = cos x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + pi + pi) = cos x"
                },
                {
                    "args": "real_add_assoc, cos (x + (pi + pi)) = cos x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + (pi + pi)) = cos x"
                },
                {
                    "args": "real_mul_2, cos (x + 2 * pi) = cos x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (x + 2 * pi) = cos x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (x + 2 * pi) = cos x"
                }
            ],
            "prop": "cos (x + 2 * pi) = cos x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_assoc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sin_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_sin_pi, sin pi = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi = 0"
                },
                {
                    "args": "real_neg_0, sin pi = -0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi = -0"
                },
                {
                    "args": "real_add_lid, sin (0 + pi) = -0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (0 + pi) = -0"
                },
                {
                    "args": "sin_periodic_pi, -(sin 0) = -0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ -(sin 0) = -0"
                },
                {
                    "args": "real_eq_neg2, sin 0 = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin 0 = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin 0 = 0"
                }
            ],
            "prop": "sin 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_eq_neg2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "sin_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_cos_pi, cos pi = -1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos pi = -1"
                },
                {
                    "args": "real_add_lid, cos (0 + pi) = -1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (0 + pi) = -1"
                },
                {
                    "args": "cos_periodic_pi, -(cos 0) = -1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ -(cos 0) = -1"
                },
                {
                    "args": "real_eq_neg2, cos 0 = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ cos 0 = 1"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos 0 = 1"
                }
            ],
            "prop": "cos 0 = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_eq_neg2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "cos_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_npi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_sin_pi, sin pi = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi = 0"
                },
                {
                    "args": "real_neg_0, sin pi = -0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi = -0"
                },
                {
                    "args": "real_add_lid, sin (0 + pi) = -0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (0 + pi) = -0"
                },
                {
                    "args": "sin_periodic_pi, -(sin 0) = -0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ -(sin 0) = -0"
                },
                {
                    "args": "real_eq_neg2, sin 0 = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin 0 = 0"
                },
                {
                    "args": "real_mul_lzero, sin (0 * pi) = 0",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (0 * pi) = 0"
                },
                {
                    "args": "real_zero_def, sin (of_nat 0 * pi) = 0",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin (of_nat 0 * pi) = 0"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. sin (of_nat n * pi) = 0 ⟶ sin (of_nat (Suc n) * pi) = 0"
                },
                {
                    "args": "n, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "sin (of_nat n * pi) = 0",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin (of_nat n * pi) = 0"
                },
                {
                    "args": "real_neg_0, -(0::real) = 0",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(0::real) = 0"
                },
                {
                    "args": "-(sin (of_nat n * pi)) = 0",
                    "id": "7.3",
                    "prevs": [
                        "7.1",
                        "7.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "sin (of_nat n * pi) = 0 ⊢ -(sin (of_nat n * pi)) = 0"
                },
                {
                    "args": "sin_periodic_pi, sin (of_nat n * pi + pi) = 0",
                    "id": "7.4",
                    "prevs": [
                        "7.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin (of_nat n * pi + pi) = 0"
                },
                {
                    "args": "real_mul_lid, sin (of_nat n * pi + 1 * pi) = 0",
                    "id": "7.5",
                    "prevs": [
                        "7.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin (of_nat n * pi + 1 * pi) = 0"
                },
                {
                    "args": "real_one_def, sin (of_nat n * pi + of_nat 1 * pi) = 0",
                    "id": "7.6",
                    "prevs": [
                        "7.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin (of_nat n * pi + of_nat 1 * pi) = 0"
                },
                {
                    "args": "real_add_rdistrib, sin ((of_nat n + of_nat 1) * pi) = 0",
                    "id": "7.7",
                    "prevs": [
                        "7.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin ((of_nat n + of_nat 1) * pi) = 0"
                },
                {
                    "args": "real_of_nat_add, sin (of_nat (n + 1) * pi) = 0",
                    "id": "7.8",
                    "prevs": [
                        "7.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin (of_nat (n + 1) * pi) = 0"
                },
                {
                    "args": "add_1_right, sin (of_nat (Suc n) * pi) = 0",
                    "id": "7.9",
                    "prevs": [
                        "7.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "sin (of_nat n * pi) = 0 ⊢ sin (of_nat (Suc n) * pi) = 0"
                },
                {
                    "args": "",
                    "id": "7.10",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.9"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. sin (of_nat n * pi) = 0 ⟶ sin (of_nat (Suc n) * pi) = 0"
                },
                {
                    "args": "nat_induct, {P: λn. sin (of_nat n * pi) = 0, x: n}",
                    "id": "8",
                    "prevs": [
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (of_nat n * pi) = 0"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (of_nat n * pi) = 0"
                }
            ],
            "prop": "sin (of_nat n * pi) = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_eq_neg2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "sin_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_of_nat_add"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_periodic_pi"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_npi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_cos_pi, cos pi = -1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos pi = -1"
                },
                {
                    "args": "real_add_lid, cos (0 + pi) = -1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (0 + pi) = -1"
                },
                {
                    "args": "cos_periodic_pi, -(cos 0) = -1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ -(cos 0) = -1"
                },
                {
                    "args": "real_eq_neg2, cos 0 = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ cos 0 = 1"
                },
                {
                    "args": "real_nat_power_def_1, cos 0 = -1 ^ (0::nat)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos 0 = -1 ^ (0::nat)"
                },
                {
                    "args": "real_mul_lzero, cos (0 * pi) = -1 ^ (0::nat)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ cos (0 * pi) = -1 ^ (0::nat)"
                },
                {
                    "args": "real_zero_def, cos (of_nat 0 * pi) = -1 ^ (0::nat)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ cos (of_nat 0 * pi) = -1 ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. cos (of_nat n * pi) = -1 ^ n ⟶ cos (of_nat (Suc n) * pi) = -1 ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "cos (of_nat n * pi) = -1 ^ n",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat n * pi) = -1 ^ n"
                },
                {
                    "args": "-(cos (of_nat n * pi)) = -(-1 ^ n)",
                    "id": "7.2",
                    "prevs": [
                        "7.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ -(cos (of_nat n * pi)) = -(-1 ^ n)"
                },
                {
                    "args": "real_mul_lid, -(cos (of_nat n * pi)) = -(1 * -1 ^ n)",
                    "id": "7.3",
                    "prevs": [
                        "7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ -(cos (of_nat n * pi)) = -(1 * -1 ^ n)"
                },
                {
                    "args": "real_mul_lneg, -(cos (of_nat n * pi)) = -1 * -1 ^ n",
                    "id": "7.4",
                    "prevs": [
                        "7.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ -(cos (of_nat n * pi)) = -1 * -1 ^ n"
                },
                {
                    "args": "cos_periodic_pi, cos (of_nat n * pi + pi) = -1 * -1 ^ n",
                    "id": "7.5",
                    "prevs": [
                        "7.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat n * pi + pi) = -1 * -1 ^ n"
                },
                {
                    "args": "real_mul_lid, cos (of_nat n * pi + 1 * pi) = -1 * -1 ^ n",
                    "id": "7.6",
                    "prevs": [
                        "7.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat n * pi + 1 * pi) = -1 * -1 ^ n"
                },
                {
                    "args": "real_one_def, cos (of_nat n * pi + of_nat 1 * pi) = -1 * -1 ^ n",
                    "id": "7.7",
                    "prevs": [
                        "7.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat n * pi + of_nat 1 * pi) = -1 * -1 ^ n"
                },
                {
                    "args": "real_add_rdistrib, cos ((of_nat n + of_nat 1) * pi) = -1 * -1 ^ n",
                    "id": "7.8",
                    "prevs": [
                        "7.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos ((of_nat n + of_nat 1) * pi) = -1 * -1 ^ n"
                },
                {
                    "args": "real_of_nat_add, cos (of_nat (n + 1) * pi) = -1 * -1 ^ n",
                    "id": "7.9",
                    "prevs": [
                        "7.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat (n + 1) * pi) = -1 * -1 ^ n"
                },
                {
                    "args": "add_1_right, cos (of_nat (Suc n) * pi) = -1 * -1 ^ n",
                    "id": "7.10",
                    "prevs": [
                        "7.9"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat (Suc n) * pi) = -1 * -1 ^ n"
                },
                {
                    "args": "real_nat_power_def_2, cos (of_nat (Suc n) * pi) = -1 ^ Suc n",
                    "id": "7.11",
                    "prevs": [
                        "7.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos (of_nat n * pi) = -1 ^ n ⊢ cos (of_nat (Suc n) * pi) = -1 ^ Suc n"
                },
                {
                    "args": "",
                    "id": "7.12",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.11"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. cos (of_nat n * pi) = -1 ^ n ⟶ cos (of_nat (Suc n) * pi) = -1 ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. cos (of_nat n * pi) = -1 ^ n, x: n}",
                    "id": "8",
                    "prevs": [
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ cos (of_nat n * pi) = -1 ^ n"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (of_nat n * pi) = -1 ^ n"
                }
            ],
            "prop": "cos (of_nat n * pi) = -1 ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_eq_neg2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "cos_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_lid"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_of_nat_add"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_periodic_pi"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_sin_pi4",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "cos_double_sin, {x: 1 / 4 * pi}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ cos (2 * (1 / 4 * pi)) = 1 - 2 * sin (1 / 4 * pi) ^ (2::nat)"
                },
                {
                    "args": "2 * (1 / 4 * pi) = pi / 2",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * (1 / 4 * pi) = pi / 2"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ cos (pi / 2) = 1 - 2 * sin (1 / 4 * pi) ^ (2::nat)"
                },
                {
                    "args": "real_cos_pi2",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 = 1 - 2 * sin (1 / 4 * pi) ^ (2::nat)"
                },
                {
                    "args": "∀a. 0 = 1 - 2 * a ⟶ a = 1 / 2",
                    "id": "4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a. 0 = 1 - 2 * a ⟶ a = 1 / 2"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4",
                        "3"
                    ],
                    "rule": "apply_fact",
                    "th": "⊢ sin (1 / 4 * pi) ^ (2::nat) = 1 / 2"
                },
                {
                    "args": "sqrt 2 * real_inverse 2 * (sqrt 2 * real_inverse 2) = sqrt 2 * sqrt 2 * (real_inverse 2 * real_inverse 2)",
                    "id": "6",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sqrt 2 * real_inverse 2 * (sqrt 2 * real_inverse 2) = sqrt 2 * sqrt 2 * (real_inverse 2 * real_inverse 2)"
                },
                {
                    "args": "real_pos, {n: bit0 1}",
                    "id": "7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 2"
                },
                {
                    "args": "sqrt_pow2, sqrt 2 ^ (2::nat) = 2",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 ^ (2::nat) = 2"
                },
                {
                    "args": "real_pow_2, sqrt 2 * sqrt 2 = 2",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sqrt 2 * sqrt 2 = 2"
                },
                {
                    "args": "1 * real_inverse 2 = 2 * (real_inverse 2 * real_inverse 2)",
                    "id": "10",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 1 * real_inverse 2 = 2 * (real_inverse 2 * real_inverse 2)"
                },
                {
                    "args": "1 * real_inverse 2 = sqrt 2 * sqrt 2 * (real_inverse 2 * real_inverse 2)",
                    "id": "11",
                    "prevs": [
                        "9",
                        "10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ 1 * real_inverse 2 = sqrt 2 * sqrt 2 * (real_inverse 2 * real_inverse 2)"
                },
                {
                    "args": "1 * real_inverse 2 = sqrt 2 * real_inverse 2 * (sqrt 2 * real_inverse 2)",
                    "id": "12",
                    "prevs": [
                        "6",
                        "11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ 1 * real_inverse 2 = sqrt 2 * real_inverse 2 * (sqrt 2 * real_inverse 2)"
                },
                {
                    "args": "real_divide_def, 1 / 2 = sqrt 2 / 2 * (sqrt 2 / 2)",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 / 2 = sqrt 2 / 2 * (sqrt 2 / 2)"
                },
                {
                    "args": "real_pow_2, 1 / 2 = (sqrt 2 / 2) ^ (2::nat)",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 / 2 = (sqrt 2 / 2) ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "15",
                    "prevs": [
                        "14",
                        "5"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ sin (1 / 4 * pi) ^ (2::nat) = (sqrt 2 / 2) ^ (2::nat)"
                },
                {
                    "args": "real_eq_square_abs",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "⊢ abs (sin (1 / 4 * pi)) = abs (sqrt 2 / 2)"
                },
                {
                    "args": "abs_def",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ (if 0 ≤ sin (1 / 4 * pi) then sin (1 / 4 * pi) else -(sin (1 / 4 * pi))) = (if 0 ≤ sqrt 2 / 2 then sqrt 2 / 2 else -(sqrt 2 / 2))"
                },
                {
                    "args": "0 < 1 / 4",
                    "id": "18",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 0 < 1 / 4"
                },
                {
                    "args": "pi_pos",
                    "id": "19",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "real_lt_mul",
                    "id": "20",
                    "prevs": [
                        "18",
                        "19"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < 1 / 4 * pi"
                },
                {
                    "args": "1 * (1 / 4) < 1",
                    "id": "21",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 1 * (1 / 4) < 1"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "22",
                    "prevs": [
                        "19",
                        "21"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ pi * (1 * (1 / 4)) < pi * 1"
                },
                {
                    "args": "real_mult_comm, 1 * (1 / 4) * pi < 1 * pi",
                    "id": "23",
                    "prevs": [
                        "22"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * (1 / 4) * pi < 1 * pi"
                },
                {
                    "args": "real_mult_assoc, 1 * (1 / 4 * pi) < 1 * pi",
                    "id": "24",
                    "prevs": [
                        "23"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * (1 / 4 * pi) < 1 * pi"
                },
                {
                    "args": "real_mul_lid, 1 / 4 * pi < pi",
                    "id": "25",
                    "prevs": [
                        "24"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ 1 / 4 * pi < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "26",
                    "prevs": [
                        "20",
                        "25"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < sin (1 / 4 * pi)"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "27",
                    "prevs": [
                        "26"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ sin (1 / 4 * pi)"
                },
                {
                    "args": "if_P",
                    "id": "28",
                    "prevs": [
                        "17",
                        "27"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (1 / 4 * pi) = (if 0 ≤ sqrt 2 / 2 then sqrt 2 / 2 else -(sqrt 2 / 2))"
                },
                {
                    "args": "sqrt_pos_le",
                    "id": "29",
                    "prevs": [
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ sqrt 2"
                },
                {
                    "args": "0 ≤ real_inverse 2",
                    "id": "30",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 0 ≤ real_inverse 2"
                },
                {
                    "args": "real_le_mul",
                    "id": "31",
                    "prevs": [
                        "29",
                        "30"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ sqrt 2 * real_inverse 2"
                },
                {
                    "args": "real_divide_def, 0 ≤ sqrt 2 / 2",
                    "id": "32",
                    "prevs": [
                        "31"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 ≤ sqrt 2 / 2"
                },
                {
                    "args": "if_P",
                    "id": "33",
                    "prevs": [
                        "28",
                        "32"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sin (1 / 4 * pi) = sqrt 2 / 2"
                },
                {
                    "args": "",
                    "id": "34",
                    "prevs": [
                        "33"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (1 / 4 * pi) = sqrt 2 / 2"
                }
            ],
            "prop": "sin (1 / 4 * pi) = sqrt 2 / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "1 / 4 * pi",
                    "theorem": "cos_double_sin"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal": "2 * (1 / 4 * pi) = pi / 2",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "1",
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal": "!a::real. 0 = 1- 2 * a --> a=1/2",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "4",
                        "3"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_fact"
                },
                {
                    "goal": "1/2 = (sqrt 2 / 2) ^ (2::nat)",
                    "goal_id": "6",
                    "method_name": "cut"
                },
                {
                    "goal_id": "6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal": "sqrt 2 * real_inverse 2 * (sqrt 2 * real_inverse 2) = sqrt 2 * sqrt 2 * (real_inverse 2 * real_inverse 2)",
                    "goal_id": "6",
                    "method_name": "cut"
                },
                {
                    "goal_id": "6",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "sqrt 2 * sqrt 2 = 2",
                    "goal_id": "7",
                    "method_name": "cut"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sqrt_pow2"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pos"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "10",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "14",
                        "5"
                    ],
                    "goal_id": "15",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "15"
                    ],
                    "goal_id": "16",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_eq_square_abs"
                },
                {
                    "fact_ids": [
                        "16"
                    ],
                    "goal_id": "17",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "goal": "0 ≤ sin (1 / 4 * pi)",
                    "goal_id": "18",
                    "method_name": "cut"
                },
                {
                    "goal_id": "18",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "18",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "goal_id": "18",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "18",
                    "method_name": "z3"
                },
                {
                    "goal_id": "19",
                    "method_name": "apply_backward_step",
                    "theorem": "pi_pos"
                },
                {
                    "goal_id": "21",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "21",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "21",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "21",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "21",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "17",
                        "27"
                    ],
                    "goal_id": "28",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "0 ≤ sqrt 2 / 2",
                    "goal_id": "29",
                    "method_name": "cut"
                },
                {
                    "goal_id": "29",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "29",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_mul"
                },
                {
                    "goal_id": "29",
                    "method_name": "apply_backward_step",
                    "theorem": "sqrt_pos_le"
                },
                {
                    "goal_id": "30",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "28",
                        "32"
                    ],
                    "goal_id": "33",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_cos_pi4",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "sin_double, {x: 1 / 4 * pi}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (2 * (1 / 4 * pi)) = 2 * sin (1 / 4 * pi) * cos (1 / 4 * pi)"
                },
                {
                    "args": "2 * (1 / 4 * pi) = pi / 2",
                    "id": "1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * (1 / 4 * pi) = pi / 2"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ sin (pi / 2) = 2 * sin (1 / 4 * pi) * cos (1 / 4 * pi)"
                },
                {
                    "args": "real_sin_pi2",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = 2 * sin (1 / 4 * pi) * cos (1 / 4 * pi)"
                },
                {
                    "args": "real_sin_pi4",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = 2 * (sqrt 2 / 2) * cos (1 / 4 * pi)"
                },
                {
                    "args": "2 * (sqrt 2 / 2) = sqrt 2",
                    "id": "5",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * (sqrt 2 / 2) = sqrt 2"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "⊢ 1 = sqrt 2 * cos (1 / 4 * pi)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ sqrt 2 * cos (1 / 4 * pi) = 1"
                },
                {
                    "args": "real_mult_comm",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ cos (1 / 4 * pi) * sqrt 2 = 1"
                },
                {
                    "args": "real_mul_linv_uniq",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_inverse (sqrt 2) = cos (1 / 4 * pi)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ cos (1 / 4 * pi) = real_inverse (sqrt 2)"
                },
                {
                    "args": "2 * real_inverse 2 = 1",
                    "id": "11",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 2 * real_inverse 2 = 1"
                },
                {
                    "args": "real_abs_nat, abs 2 * real_inverse 2 = 1",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs 2 * real_inverse 2 = 1"
                },
                {
                    "args": "sqrt_works_gen_2, sqrt 2 ^ (2::nat) * real_inverse 2 = 1",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 ^ (2::nat) * real_inverse 2 = 1"
                },
                {
                    "args": "real_pow_2, sqrt 2 * sqrt 2 * real_inverse 2 = 1",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sqrt 2 * sqrt 2 * real_inverse 2 = 1"
                },
                {
                    "args": "real_mult_assoc, sqrt 2 * (sqrt 2 * real_inverse 2) = 1",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 * (sqrt 2 * real_inverse 2) = 1"
                },
                {
                    "args": "real_mult_comm, sqrt 2 * real_inverse 2 * sqrt 2 = 1",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 * real_inverse 2 * sqrt 2 = 1"
                },
                {
                    "args": "real_mul_linv_uniq",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_inverse (sqrt 2) = sqrt 2 * real_inverse 2"
                },
                {
                    "args": "real_divide_def, real_inverse (sqrt 2) = sqrt 2 / 2",
                    "id": "18",
                    "prevs": [
                        "17"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_inverse (sqrt 2) = sqrt 2 / 2"
                },
                {
                    "args": "cos (1 / 4 * pi) = sqrt 2 / 2",
                    "id": "19",
                    "prevs": [
                        "10",
                        "18"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ cos (1 / 4 * pi) = sqrt 2 / 2"
                },
                {
                    "args": "",
                    "id": "20",
                    "prevs": [
                        "19"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos (1 / 4 * pi) = sqrt 2 / 2"
                }
            ],
            "prop": "cos (1 / 4 * pi) = sqrt 2 / 2",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "1 / 4 * pi",
                    "theorem": "sin_double"
                },
                {
                    "goal": "2 * (1 / 4 * pi) = pi / 2",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "1",
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sin_pi2"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sin_pi4"
                },
                {
                    "goal": "2 * (sqrt 2 / 2) = sqrt 2",
                    "goal_id": "5",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "5",
                        "4"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_forward_step",
                    "theorem": "real_mul_linv_uniq"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "10"
                    ],
                    "goal_id": "11",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "11",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "11",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mul_linv_uniq"
                },
                {
                    "goal_id": "11",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "11",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "11",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "11",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sqrt_works_gen_2"
                },
                {
                    "goal_id": "11",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "11",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "sin_cos_combine",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "pi / 4 = 1 / 4 * pi",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ pi / 4 = 1 / 4 * pi"
                },
                {
                    "args": "2 * real_inverse 2 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 2 * real_inverse 2 = 1"
                },
                {
                    "args": "real_abs_nat, abs 2 * real_inverse 2 = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs 2 * real_inverse 2 = 1"
                },
                {
                    "args": "pow_2_sqrt_abs, sqrt (2 ^ (2::nat)) * real_inverse 2 = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt (2 ^ (2::nat)) * real_inverse 2 = 1"
                },
                {
                    "args": "real_pow_2, sqrt (2 * 2) * real_inverse 2 = 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sqrt (2 * 2) * real_inverse 2 = 1"
                },
                {
                    "args": "sqrt_mul, sqrt 2 * sqrt 2 * real_inverse 2 = 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sqrt 2 * sqrt 2 * real_inverse 2 = 1"
                },
                {
                    "args": "real_mult_assoc, sqrt 2 * (sqrt 2 * real_inverse 2) = 1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 * (sqrt 2 * real_inverse 2) = 1"
                },
                {
                    "args": "real_mult_comm, sqrt 2 * real_inverse 2 * sqrt 2 = 1",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 * real_inverse 2 * sqrt 2 = 1"
                },
                {
                    "args": "real_divide_def, sqrt 2 / 2 * sqrt 2 = 1",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 / 2 * sqrt 2 = 1"
                },
                {
                    "args": "real_mul_rid, sin x + cos x = (sin x + cos x) * 1",
                    "id": "9",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + cos x = (sin x + cos x) * 1"
                },
                {
                    "args": "sin x + cos x = (sin x + cos x) * (sqrt 2 / 2 * sqrt 2)",
                    "id": "10",
                    "prevs": [
                        "8",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x + cos x = (sin x + cos x) * (sqrt 2 / 2 * sqrt 2)"
                },
                {
                    "args": "real_mult_assoc, sin x + cos x = (sin x + cos x) * (sqrt 2 / 2) * sqrt 2",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x + cos x = (sin x + cos x) * (sqrt 2 / 2) * sqrt 2"
                },
                {
                    "args": "real_add_rdistrib, sin x + cos x = (sin x * (sqrt 2 / 2) + cos x * (sqrt 2 / 2)) * sqrt 2",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x + cos x = (sin x * (sqrt 2 / 2) + cos x * (sqrt 2 / 2)) * sqrt 2"
                },
                {
                    "args": "real_mult_comm, sin x + cos x = sqrt 2 * (sin x * (sqrt 2 / 2) + cos x * (sqrt 2 / 2))",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + cos x = sqrt 2 * (sin x * (sqrt 2 / 2) + cos x * (sqrt 2 / 2))"
                },
                {
                    "args": "real_cos_pi4, sin x + cos x = sqrt 2 * (sin x * cos (1 / 4 * pi) + cos x * (sqrt 2 / 2))",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + cos x = sqrt 2 * (sin x * cos (1 / 4 * pi) + cos x * (sqrt 2 / 2))"
                },
                {
                    "args": "real_sin_pi4, sin x + cos x = sqrt 2 * (sin x * cos (1 / 4 * pi) + cos x * sin (1 / 4 * pi))",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + cos x = sqrt 2 * (sin x * cos (1 / 4 * pi) + cos x * sin (1 / 4 * pi))"
                },
                {
                    "args": "sin x + cos x = sqrt 2 * (sin x * cos (pi / 4) + cos x * sin (pi / 4))",
                    "id": "16",
                    "prevs": [
                        "0",
                        "15"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x + cos x = sqrt 2 * (sin x * cos (pi / 4) + cos x * sin (pi / 4))"
                },
                {
                    "args": "sin_add, sin x + cos x = sqrt 2 * sin (x + pi / 4)",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + cos x = sqrt 2 * sin (x + pi / 4)"
                },
                {
                    "args": "",
                    "id": "18",
                    "prevs": [
                        "17"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x + cos x = sqrt 2 * sin (x + pi / 4)"
                }
            ],
            "prop": "sin x + cos x = sqrt 2 * sin (x + pi / 4)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "goal": "pi / 4 = 1 / 4 * pi",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi4"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi4"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal": "(sqrt 2 / 2) * sqrt 2 = 1",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "sqrt_mul"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "pow_2_sqrt_abs"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "9",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "sin_cos_combine2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "pi / 4 = 1 / 4 * pi",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ pi / 4 = 1 / 4 * pi"
                },
                {
                    "args": "2 * real_inverse 2 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ 2 * real_inverse 2 = 1"
                },
                {
                    "args": "real_abs_nat, abs 2 * real_inverse 2 = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs 2 * real_inverse 2 = 1"
                },
                {
                    "args": "pow_2_sqrt_abs, sqrt (2 ^ (2::nat)) * real_inverse 2 = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt (2 ^ (2::nat)) * real_inverse 2 = 1"
                },
                {
                    "args": "real_pow_2, sqrt (2 * 2) * real_inverse 2 = 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sqrt (2 * 2) * real_inverse 2 = 1"
                },
                {
                    "args": "sqrt_mul, sqrt 2 * sqrt 2 * real_inverse 2 = 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sqrt 2 * sqrt 2 * real_inverse 2 = 1"
                },
                {
                    "args": "real_mult_assoc, sqrt 2 * (sqrt 2 * real_inverse 2) = 1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 * (sqrt 2 * real_inverse 2) = 1"
                },
                {
                    "args": "real_mult_comm, sqrt 2 * real_inverse 2 * sqrt 2 = 1",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 * real_inverse 2 * sqrt 2 = 1"
                },
                {
                    "args": "real_divide_def, sqrt 2 / 2 * sqrt 2 = 1",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 2 / 2 * sqrt 2 = 1"
                },
                {
                    "args": "sin x + -(cos x) = -((cos x + -(sin x)) * 1)",
                    "id": "9",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ sin x + -(cos x) = -((cos x + -(sin x)) * 1)"
                },
                {
                    "args": "sin x + -(cos x) = -((cos x + -(sin x)) * (sqrt 2 / 2 * sqrt 2))",
                    "id": "10",
                    "prevs": [
                        "8",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x + -(cos x) = -((cos x + -(sin x)) * (sqrt 2 / 2 * sqrt 2))"
                },
                {
                    "args": "real_mult_assoc, sin x + -(cos x) = -((cos x + -(sin x)) * (sqrt 2 / 2) * sqrt 2)",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x + -(cos x) = -((cos x + -(sin x)) * (sqrt 2 / 2) * sqrt 2)"
                },
                {
                    "args": "real_mul_rneg, sin x + -(cos x) = (cos x + -(sin x)) * (sqrt 2 / 2) * -(sqrt 2)",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x + -(cos x) = (cos x + -(sin x)) * (sqrt 2 / 2) * -(sqrt 2)"
                },
                {
                    "args": "real_add_rdistrib, sin x + -(cos x) = (cos x * (sqrt 2 / 2) + -(sin x) * (sqrt 2 / 2)) * -(sqrt 2)",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x + -(cos x) = (cos x * (sqrt 2 / 2) + -(sin x) * (sqrt 2 / 2)) * -(sqrt 2)"
                },
                {
                    "args": "real_mul_lneg, sin x + -(cos x) = (cos x * (sqrt 2 / 2) + -(sin x * (sqrt 2 / 2))) * -(sqrt 2)",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ sin x + -(cos x) = (cos x * (sqrt 2 / 2) + -(sin x * (sqrt 2 / 2))) * -(sqrt 2)"
                },
                {
                    "args": "real_minus_def, sin x - cos x = (cos x * (sqrt 2 / 2) - sin x * (sqrt 2 / 2)) * -(sqrt 2)",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - cos x = (cos x * (sqrt 2 / 2) - sin x * (sqrt 2 / 2)) * -(sqrt 2)"
                },
                {
                    "args": "real_mult_comm, sin x - cos x = -(sqrt 2) * (cos x * (sqrt 2 / 2) - sin x * (sqrt 2 / 2))",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - cos x = -(sqrt 2) * (cos x * (sqrt 2 / 2) - sin x * (sqrt 2 / 2))"
                },
                {
                    "args": "real_sin_pi4, sin x - cos x = -(sqrt 2) * (cos x * (sqrt 2 / 2) - sin x * sin (1 / 4 * pi))",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - cos x = -(sqrt 2) * (cos x * (sqrt 2 / 2) - sin x * sin (1 / 4 * pi))"
                },
                {
                    "args": "real_cos_pi4, sin x - cos x = -(sqrt 2) * (cos x * cos (1 / 4 * pi) - sin x * sin (1 / 4 * pi))",
                    "id": "18",
                    "prevs": [
                        "17"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - cos x = -(sqrt 2) * (cos x * cos (1 / 4 * pi) - sin x * sin (1 / 4 * pi))"
                },
                {
                    "args": "sin x - cos x = -(sqrt 2) * (cos x * cos (pi / 4) - sin x * sin (pi / 4))",
                    "id": "19",
                    "prevs": [
                        "0",
                        "18"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ sin x - cos x = -(sqrt 2) * (cos x * cos (pi / 4) - sin x * sin (pi / 4))"
                },
                {
                    "args": "cos_add, sin x - cos x = -(sqrt 2) * cos (x + pi / 4)",
                    "id": "20",
                    "prevs": [
                        "19"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin x - cos x = -(sqrt 2) * cos (x + pi / 4)"
                },
                {
                    "args": "",
                    "id": "21",
                    "prevs": [
                        "20"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin x - cos x = -(sqrt 2) * cos (x + pi / 4)"
                }
            ],
            "prop": "sin x - cos x = -(sqrt 2) * cos (x + pi / 4)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal": "pi / 4 = 1 / 4 * pi",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi4"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi4"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal": "sqrt 2 / 2 * sqrt 2 = 1",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "sqrt_mul"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "pow_2_sqrt_abs"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_pos_pi2",
            "prop": "0 < x ⟶ x < pi / 2 ⟶ 0 < cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x < pi / 2",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < pi / 2 ⊢ x < pi / 2"
                },
                {
                    "args": "pi_pos",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < pi"
                },
                {
                    "args": "real_inverse 2 * 1 < 1",
                    "id": "3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ real_inverse 2 * 1 < 1"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x < pi / 2 ⊢ pi * (real_inverse 2 * 1) < pi * 1"
                },
                {
                    "args": "real_mult_assoc, pi * real_inverse 2 * 1 < pi * 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, x < pi / 2 ⊢ pi * real_inverse 2 * 1 < pi * 1"
                },
                {
                    "args": "real_mul_rid, pi * real_inverse 2 < pi",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, x < pi / 2 ⊢ pi * real_inverse 2 < pi"
                },
                {
                    "args": "real_divide_def, pi / 2 < pi",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, x < pi / 2 ⊢ pi / 2 < pi"
                },
                {
                    "args": "real_lt_trans",
                    "id": "8",
                    "prevs": [
                        "1",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x < pi / 2 ⊢ x < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "9",
                    "prevs": [
                        "0",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x < pi / 2 ⊢ 0 < sin x"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "0",
                        "1",
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x < pi / 2 ⟶ 0 < sin x"
                }
            ],
            "prop": "0 < x ⟶ x < pi / 2 ⟶ 0 < sin x",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_trans"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "pi_pos"
                },
                {
                    "goal_id": "3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_pos_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "-(pi / 2) < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-(pi / 2) < x ⊢ -(pi / 2) < x"
                },
                {
                    "args": "x < pi / 2",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < pi / 2 ⊢ x < pi / 2"
                },
                {
                    "args": "cos_pos_pi2, {x: abs x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < abs x ⟶ abs x < pi / 2 ⟶ 0 < cos (abs x)"
                },
                {
                    "args": "cos_abs",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 < abs x ⟶ abs x < pi / 2 ⟶ 0 < cos x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x < pi / 2, -(pi / 2) < x ⊢ x = 0 ⟶ 0 < cos x"
                },
                {
                    "args": "x = 0",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "(0::real) < 1",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "real_cos_0, 0 < cos 0",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x < pi / 2, -(pi / 2) < x ⊢ 0 < cos 0"
                },
                {
                    "args": "0 < cos x",
                    "id": "4.3",
                    "prevs": [
                        "4.0",
                        "4.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, x < pi / 2, -(pi / 2) < x ⊢ 0 < cos x"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "x < pi / 2, -(pi / 2) < x ⊢ x = 0 ⟶ 0 < cos x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x < pi / 2, -(pi / 2) < x ⊢ ¬(x = 0) ⟶ 0 < cos x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "real_abs_nz",
                    "id": "5.1",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x < pi / 2, -(pi / 2) < x ⊢ 0 < abs x"
                },
                {
                    "args": "conjI",
                    "id": "5.2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x < pi / 2, -(pi / 2) < x ⊢ -(pi / 2) < x ∧ x < pi / 2"
                },
                {
                    "args": "real_abs_lt, abs x < pi / 2",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x < pi / 2, -(pi / 2) < x ⊢ abs x < pi / 2"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [
                        "3",
                        "5.1",
                        "5.3"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(x = 0), x < pi / 2, -(pi / 2) < x ⊢ 0 < cos x"
                },
                {
                    "args": "",
                    "id": "5.5",
                    "prevs": [
                        "5.0",
                        "5.4"
                    ],
                    "rule": "intros",
                    "th": "x < pi / 2, -(pi / 2) < x ⊢ ¬(x = 0) ⟶ 0 < cos x"
                },
                {
                    "args": "classical_cases",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < pi / 2, -(pi / 2) < x ⊢ 0 < cos x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ -(pi / 2) < x ⟶ x < pi / 2 ⟶ 0 < cos x"
                }
            ],
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ 0 < cos x",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "abs x",
                    "theorem": "cos_pos_pi2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "cos_abs"
                },
                {
                    "case": "x = 0",
                    "goal_id": "4",
                    "method_name": "cases"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_0"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_abs_nz"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_lt"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_pos_pi_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "-(pi / 2) ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-(pi / 2) ≤ x ⊢ -(pi / 2) ≤ x"
                },
                {
                    "args": "x ≤ pi / 2",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ pi / 2 ⊢ x ≤ pi / 2"
                },
                {
                    "args": "real_le_lt",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ≤ pi / 2 ⊢ x < pi / 2 ∨ x = pi / 2"
                },
                {
                    "args": "real_le_lt",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "-(pi / 2) ≤ x ⊢ -(pi / 2) < x ∨ -(pi / 2) = x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi / 2, -(pi / 2) ≤ x ⊢ -(pi / 2) < x ⟶ 0 ≤ cos x"
                },
                {
                    "args": "-(pi / 2) < x",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-(pi / 2) < x ⊢ -(pi / 2) < x"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ x < pi / 2 ⟶ 0 ≤ cos x"
                },
                {
                    "args": "x < pi / 2",
                    "id": "4.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < pi / 2 ⊢ x < pi / 2"
                },
                {
                    "args": "cos_pos_pi",
                    "id": "4.1.1",
                    "prevs": [
                        "4.0",
                        "4.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < pi / 2, x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ 0 < cos x"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "4.1.2",
                    "prevs": [
                        "4.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < pi / 2, x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "4.1.3",
                    "prevs": [
                        "4.1.0",
                        "4.1.2"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ x < pi / 2 ⟶ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ x = pi / 2 ⟶ 0 ≤ cos x"
                },
                {
                    "args": "x = pi / 2",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = pi / 2 ⊢ x = pi / 2"
                },
                {
                    "args": "real_le_refl, {x: (0::real)}",
                    "id": "4.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 0"
                },
                {
                    "args": "real_cos_pi2, 0 ≤ cos (pi / 2)",
                    "id": "4.2.2",
                    "prevs": [
                        "4.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = pi / 2, x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ 0 ≤ cos (pi / 2)"
                },
                {
                    "args": "0 ≤ cos x",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.0",
                        "4.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = pi / 2, x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.0",
                        "4.2.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ x = pi / 2 ⟶ 0 ≤ cos x"
                },
                {
                    "args": "disjE",
                    "id": "4.3",
                    "prevs": [
                        "2",
                        "4.1",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ pi / 2, -(pi / 2) < x, -(pi / 2) ≤ x ⊢ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi / 2, -(pi / 2) ≤ x ⊢ -(pi / 2) < x ⟶ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi / 2, -(pi / 2) ≤ x ⊢ -(pi / 2) = x ⟶ 0 ≤ cos x"
                },
                {
                    "args": "-(pi / 2) = x",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-(pi / 2) = x ⊢ -(pi / 2) = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "5.1",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "-(pi / 2) = x ⊢ x = -(pi / 2)"
                },
                {
                    "args": "real_le_refl, {x: (0::real)}",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 0"
                },
                {
                    "args": "real_cos_pi2, 0 ≤ cos (pi / 2)",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ pi / 2, -(pi / 2) = x, -(pi / 2) ≤ x ⊢ 0 ≤ cos (pi / 2)"
                },
                {
                    "args": "cos_neg, 0 ≤ cos (-(pi / 2))",
                    "id": "5.4",
                    "prevs": [
                        "5.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ pi / 2, -(pi / 2) = x, -(pi / 2) ≤ x ⊢ 0 ≤ cos (-(pi / 2))"
                },
                {
                    "args": "0 ≤ cos x",
                    "id": "5.5",
                    "prevs": [
                        "5.1",
                        "5.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x ≤ pi / 2, -(pi / 2) = x, -(pi / 2) ≤ x ⊢ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "5.0",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi / 2, -(pi / 2) ≤ x ⊢ -(pi / 2) = x ⟶ 0 ≤ cos x"
                },
                {
                    "args": "disjE",
                    "id": "6",
                    "prevs": [
                        "3",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ pi / 2, -(pi / 2) ≤ x ⊢ 0 ≤ cos x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ -(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ 0 ≤ cos x"
                }
            ],
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ 0 ≤ cos x",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "cos_pos_pi"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.0"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_cos_pi2"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x ≤ pi",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ pi ⊢ x ≤ pi"
                },
                {
                    "args": "real_le_lt",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "real_le_lt",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ≤ pi ⊢ x < pi ∨ x = pi"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi, 0 ≤ x ⊢ 0 < x ⟶ x < pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "0 < x",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x < pi",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < pi ⊢ x < pi"
                },
                {
                    "args": "sin_pos_pi",
                    "id": "4.2",
                    "prevs": [
                        "4.0",
                        "4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < pi, 0 < x, x ≤ pi, 0 ≤ x ⊢ 0 < sin x"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "4.3",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < pi, 0 < x, x ≤ pi, 0 ≤ x ⊢ 0 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi, 0 ≤ x ⊢ 0 < x ⟶ x < pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi, 0 ≤ x ⊢ 0 = x ⟶ x < pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "0 = x",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "x < pi",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < pi ⊢ x < pi"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "5.2",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "real_le_refl, {x: (0::real)}",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 0"
                },
                {
                    "args": "real_sin_0, 0 ≤ sin 0",
                    "id": "5.4",
                    "prevs": [
                        "5.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 = x, x < pi, x ≤ pi, 0 ≤ x ⊢ 0 ≤ sin 0"
                },
                {
                    "args": "0 ≤ sin x",
                    "id": "5.5",
                    "prevs": [
                        "5.2",
                        "5.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, x < pi, x ≤ pi, 0 ≤ x ⊢ 0 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi, 0 ≤ x ⊢ 0 = x ⟶ x < pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "disjE",
                    "id": "6",
                    "prevs": [
                        "2",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ pi, 0 ≤ x ⊢ x < pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ pi, 0 ≤ x ⊢ x = pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "x = pi",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = pi ⊢ x = pi"
                },
                {
                    "args": "real_le_refl, {x: (0::real)}",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ 0"
                },
                {
                    "args": "real_sin_pi, 0 ≤ sin pi",
                    "id": "7.2",
                    "prevs": [
                        "7.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = pi, x ≤ pi, 0 ≤ x ⊢ 0 ≤ sin pi"
                },
                {
                    "args": "0 ≤ sin x",
                    "id": "7.3",
                    "prevs": [
                        "7.0",
                        "7.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = pi, x ≤ pi, 0 ≤ x ⊢ 0 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "7.4",
                    "prevs": [
                        "7.0",
                        "7.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ pi, 0 ≤ x ⊢ x = pi ⟶ 0 ≤ sin x"
                },
                {
                    "args": "disjE",
                    "id": "8",
                    "prevs": [
                        "3",
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ pi, 0 ≤ x ⊢ 0 ≤ sin x"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ sin x"
                }
            ],
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ sin x",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.0"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_0"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_pimul_eq_0",
            "num_gaps": 2,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. integer n ⟶ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "n, real",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "integer n",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "integer n ⊢ integer n"
                },
                {
                    "args": "integer_cases",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "integer n ⊢ (∃n1. n = of_nat n1) ∨ (∃n1. n = -(of_nat n1))"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer n ⊢ (∃n1. n = of_nat n1) ⟶ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "∃n1. n = of_nat n1",
                    "id": "0.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n1. n = of_nat n1 ⊢ ∃n1. n = of_nat n1"
                },
                {
                    "args": "n1, nat",
                    "id": "0.3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n1"
                },
                {
                    "args": "n = of_nat n1",
                    "id": "0.3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = of_nat n1 ⊢ n = of_nat n1"
                },
                {
                    "args": "sin_npi, sin (of_nat n1 * pi) = 0",
                    "id": "0.3.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (of_nat n1 * pi) = 0"
                },
                {
                    "args": "¬(-(1::real) = 0)",
                    "id": "0.3.4",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬(-(1::real) = 0)"
                },
                {
                    "args": "real_pow_nz, {n: n1, x: -(1::real)}",
                    "id": "0.3.5",
                    "prevs": [
                        "0.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "integer n, n = of_nat n1, ∃n1. n = of_nat n1 ⊢ ¬(-(1::real) ^ n1 = 0)"
                },
                {
                    "args": "cos_npi, ¬(cos (of_nat n1 * pi) = 0)",
                    "id": "0.3.6",
                    "prevs": [
                        "0.3.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer n, n = of_nat n1, ∃n1. n = of_nat n1 ⊢ ¬(cos (of_nat n1 * pi) = 0)"
                },
                {
                    "args": "conjI",
                    "id": "0.3.7",
                    "prevs": [
                        "0.3.3",
                        "0.3.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "integer n, n = of_nat n1, ∃n1. n = of_nat n1 ⊢ sin (of_nat n1 * pi) = 0 ∧ ¬(cos (of_nat n1 * pi) = 0)"
                },
                {
                    "args": "sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)",
                    "id": "0.3.8",
                    "prevs": [
                        "0.3.2",
                        "0.3.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "integer n, n = of_nat n1, ∃n1. n = of_nat n1 ⊢ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "∃n1. n = of_nat n1",
                    "id": "0.3.9",
                    "prevs": [
                        "0.3.0",
                        "0.3.0",
                        "0.3.1",
                        "0.3.2",
                        "0.3.8"
                    ],
                    "rule": "intros",
                    "th": "integer n ⊢ (∃n1. n = of_nat n1) ⟶ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer n ⊢ (∃n1. n = -(of_nat n1)) ⟶ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "∃n1. n = -(of_nat n1)",
                    "id": "0.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n1. n = -(of_nat n1) ⊢ ∃n1. n = -(of_nat n1)"
                },
                {
                    "args": "n1, nat",
                    "id": "0.4.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n1"
                },
                {
                    "args": "n = -(of_nat n1)",
                    "id": "0.4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = -(of_nat n1) ⊢ n = -(of_nat n1)"
                },
                {
                    "args": "real_neg_0, -(0::real) = 0",
                    "id": "0.4.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(0::real) = 0"
                },
                {
                    "args": "sin_npi, -(sin (of_nat n1 * pi)) = 0",
                    "id": "0.4.4",
                    "prevs": [
                        "0.4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ -(sin (of_nat n1 * pi)) = 0"
                },
                {
                    "args": "sin_neg, sin (-(of_nat n1 * pi)) = 0",
                    "id": "0.4.5",
                    "prevs": [
                        "0.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ sin (-(of_nat n1 * pi)) = 0"
                },
                {
                    "args": "¬(-(1::real) = 0)",
                    "id": "0.4.6",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬(-(1::real) = 0)"
                },
                {
                    "args": "real_pow_nz, {n: n1, x: -(1::real)}",
                    "id": "0.4.7",
                    "prevs": [
                        "0.4.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ ¬(-(1::real) ^ n1 = 0)"
                },
                {
                    "args": "cos_npi, ¬(cos (of_nat n1 * pi) = 0)",
                    "id": "0.4.8",
                    "prevs": [
                        "0.4.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ ¬(cos (of_nat n1 * pi) = 0)"
                },
                {
                    "args": "cos_neg, ¬(cos (-(of_nat n1 * pi)) = 0)",
                    "id": "0.4.9",
                    "prevs": [
                        "0.4.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ ¬(cos (-(of_nat n1 * pi)) = 0)"
                },
                {
                    "args": "conjI",
                    "id": "0.4.10",
                    "prevs": [
                        "0.4.5",
                        "0.4.9"
                    ],
                    "rule": "apply_theorem",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ sin (-(of_nat n1 * pi)) = 0 ∧ ¬(cos (-(of_nat n1 * pi)) = 0)"
                },
                {
                    "args": "real_mul_lneg, sin (-(of_nat n1) * pi) = 0 ∧ ¬(cos (-(of_nat n1) * pi) = 0)",
                    "id": "0.4.11",
                    "prevs": [
                        "0.4.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ sin (-(of_nat n1) * pi) = 0 ∧ ¬(cos (-(of_nat n1) * pi) = 0)"
                },
                {
                    "args": "sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)",
                    "id": "0.4.12",
                    "prevs": [
                        "0.4.2",
                        "0.4.11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "integer n, n = -(of_nat n1), ∃n1. n = -(of_nat n1) ⊢ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "∃n1. n = -(of_nat n1)",
                    "id": "0.4.13",
                    "prevs": [
                        "0.4.0",
                        "0.4.0",
                        "0.4.1",
                        "0.4.2",
                        "0.4.12"
                    ],
                    "rule": "intros",
                    "th": "integer n ⊢ (∃n1. n = -(of_nat n1)) ⟶ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "disjE",
                    "id": "0.5",
                    "prevs": [
                        "0.2",
                        "0.3",
                        "0.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "integer n ⊢ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. integer n ⟶ sin (n * pi) = 0 ∧ ¬(cos (n * pi) = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ sin (n * pi) = 0 ⟶ integer n"
                },
                {
                    "args": "sin (n * pi) = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sin (n * pi) = 0 ⊢ sin (n * pi) = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "sin (n * pi) = 0 ⊢ integer n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (n * pi) = 0 ⟶ integer n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ integer n ⟶ sin (n * pi) = 0"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sin (n * pi) = 0 ⟷ integer n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ sin (n * pi) = 0 ⟷ integer n"
                }
            ],
            "prop": "sin (n * pi) = 0 ⟷ integer n",
            "steps": [
                {
                    "goal": "!n. integer n --> sin(n * pi) = 0 & ~(cos(n * pi) = 0)",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "integer_cases"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.3.0"
                    ],
                    "goal_id": "0.3.1",
                    "method_name": "exists_elim",
                    "names": "n1"
                },
                {
                    "fact_ids": [
                        "0.3.2"
                    ],
                    "goal_id": "0.3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_npi"
                },
                {
                    "goal_id": "0.3.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_npi"
                },
                {
                    "goal_id": "0.3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pow_nz"
                },
                {
                    "goal_id": "0.3.4",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.4.0"
                    ],
                    "goal_id": "0.4.1",
                    "method_name": "exists_elim",
                    "names": "n1"
                },
                {
                    "fact_ids": [
                        "0.4.2"
                    ],
                    "goal_id": "0.4.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "0.4.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.4.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_neg"
                },
                {
                    "goal_id": "0.4.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_npi"
                },
                {
                    "goal_id": "0.4.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_0"
                },
                {
                    "goal_id": "0.4.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                },
                {
                    "goal_id": "0.4.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_npi"
                },
                {
                    "goal_id": "0.4.6",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pow_nz"
                },
                {
                    "goal_id": "0.4.6",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq_0",
            "prop": "sin x = 0 ⟷ (∃n. integer n ∧ x = n * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_eq_0",
            "prop": "cos x = 0 ⟷ (∃n. integer n ∧ x = (n + 1 / 2) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_zero_pi",
            "prop": "sin x = 0 ⟷ (∃n. x = of_nat n * pi) ∨ (∃n. x = -(of_nat n * pi))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_zero_pi",
            "prop": [
                "cos x = 0 ⟷ ",
                "(∃n. x = (of_nat n + 1 / 2) * pi) ∨ (∃n. x = -((of_nat n + 1 / 2) * pi))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_zero",
            "prop": [
                "sin x = 0 ⟷ ",
                "(∃n. even n ∧ x = of_nat n * (pi / 2)) ∨ ",
                "(∃n. even n ∧ x = -(of_nat n * (pi / 2)))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_zero",
            "prop": [
                "cos x = 0 ⟷ ",
                "(∃n. ¬(even n) ∧ x = of_nat n * (pi / 2)) ∨ ",
                "(∃n. ¬(even n) ∧ x = -(of_nat n * (pi / 2)))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_one_2pi",
            "prop": "cos x = 1 ⟷ (∃n. x = of_nat n * 2 * pi) ∨ (∃n. x = -(of_nat n * 2 * pi))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_cos_sqrt",
            "prop": "0 ≤ sin x ⟶ sin x = sqrt (1 - cos x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_eq_0_pi",
            "prop": "-pi < x ⟶ x < pi ⟶ sin x = 0 ⟶ x = 0",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_treble_cos",
            "prop": "cos (3 * x) = 4 * cos x ^ (3::nat) - 3 * cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "real_cos_pi6",
            "prop": "cos (1 / 6 * pi) = sqrt 3 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_sin_pi6",
            "prop": "sin (1 / 6 * pi) = 1 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pos_pi_rev",
            "prop": "0 ≤ x ⟶ x ≤ 2 * pi ⟶ 0 < sin x ⟶ 0 < x ∧ x < pi",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "real_sin_pi3",
            "prop": "sin (1 / 3 * pi) = sqrt 3 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "real_cos_pi3",
            "prop": "cos (1 / 3 * pi) = 1 / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_total_pos",
            "prop": "0 ≤ y ⟶ y ≤ 1 ⟶ (∃x. 0 ≤ x ∧ x ≤ pi / 2 ∧ sin x = y)",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_total_pi2",
            "prop": [
                "0 ≤ x ",
                "⟶ 0 ≤ y ",
                "   ⟶ x ^ (2::nat) + y ^ (2::nat) = 1 ",
                "      ⟶ (∃t. 0 ≤ t ∧ t ≤ pi / 2 ∧ x = cos t ∧ y = sin t)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_total_pi",
            "prop": [
                "0 ≤ y ",
                "⟶ x ^ (2::nat) + y ^ (2::nat) = 1 ⟶ (∃t. 0 ≤ t ∧ t ≤ pi ∧ x = cos t ∧ y = sin t)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_total_2pi",
            "prop": "x ^ (2::nat) + y ^ (2::nat) = 1 ⟶ (∃t. 0 ≤ t ∧ t < pi ∧ x = cos t ∧ y = sin t)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "circle_sincos",
            "prop": "x ^ (2::nat) + y ^ (2::nat) = 1 ⟶ (∃t. x = cos t ∧ y = sin t)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_integer_2pi",
            "prop": "integer n ⟶ sin (2 * pi * n) = 0",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_integer_pi",
            "prop": "integer n ⟶ sin (n * pi) = 0",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_integer_2pi",
            "prop": "integer n ⟶ cos (2 * pi * n) = 1",
            "ty": "thm",
            "vars": {
                "n": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sincos_principal_value",
            "prop": "∃y. (-pi < y ∧ y ≤ pi) ∧ sin y = sin x ∧ cos y = cos x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_cos_eq",
            "prop": "sin y = sin x ∧ cos y = cos x ⟷ (∃n. integer n ∧ y = x + 2 * n * pi)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_cos_inj",
            "prop": "sin x = sin y ⟶ cos x = cos y ⟶ abs (x - y) < 2 * pi ⟶ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_eq_1",
            "prop": "cos x = 1 ⟷ (∃n. integer n ∧ x = 2 * n * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq_1",
            "prop": "sin x = 1 ⟷ (∃n. integer n ∧ x = (2 * n + 1 / 2) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq_minus1",
            "prop": "sin x = -1 ⟷ (∃n. integer n ∧ x = (2 * n + 3 / 2) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_eq_minus1",
            "prop": "cos x = -1 ⟷ (∃n. integer n ∧ x = (2 * n + 1) * pi)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_eq",
            "prop": [
                "sin x = sin y ⟷ ",
                "(∃n. integer n ∧ (x = y + 2 * n * pi ∨ x = -y + (2 * n + 1) * pi))"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "name": "cos_eq",
            "prop": "cos x = cos y ⟷ (∃n. integer n ∧ (x = y + 2 * n * pi ∨ x = -y + 2 * n * pi))",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan",
            "prop": "tan x = sin x / cos x",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_sin_0, sin 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin 0 = 0"
                },
                {
                    "args": "disjI1, {A: sin 0 = 0, B: cos 0 = 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin 0 = 0 ∨ cos 0 = 0"
                },
                {
                    "args": "real_div_eq_0, sin 0 / cos 0 = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin 0 / cos 0 = 0"
                },
                {
                    "args": "tan_def, tan 0 = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan 0 = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan 0 = 0"
                }
            ],
            "prop": "tan 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_div_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_0"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_sin_pi, sin pi = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi = 0"
                },
                {
                    "args": "disjI1, {A: sin pi = 0, B: cos pi = 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin pi = 0 ∨ cos pi = 0"
                },
                {
                    "args": "real_div_eq_0, sin pi / cos pi = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin pi / cos pi = 0"
                },
                {
                    "args": "tan_def, tan pi = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan pi = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan pi = 0"
                }
            ],
            "prop": "tan pi = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_div_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sin_pi"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_npi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "eq_refl, {x: (0::real)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) = 0"
                },
                {
                    "args": "disjI1, {A: (0::real) = 0, B: cos (of_nat n * pi) = 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) = 0 ∨ cos (of_nat n * pi) = 0"
                },
                {
                    "args": "real_div_eq_0, 0 / cos (of_nat n * pi) = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 / cos (of_nat n * pi) = 0"
                },
                {
                    "args": "sin_npi, sin (of_nat n * pi) / cos (of_nat n * pi) = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (of_nat n * pi) / cos (of_nat n * pi) = 0"
                },
                {
                    "args": "tan_def, tan (of_nat n * pi) = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan (of_nat n * pi) = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan (of_nat n * pi) = 0"
                }
            ],
            "prop": "tan (of_nat n * pi) = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_npi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_div_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lneg, -(sin x) * real_inverse (cos x) = -(sin x * real_inverse (cos x))",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin x) * real_inverse (cos x) = -(sin x * real_inverse (cos x))"
                },
                {
                    "args": "real_divide_def, -(sin x) / cos x = -(sin x / cos x)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin x) / cos x = -(sin x / cos x)"
                },
                {
                    "args": "cos_neg, -(sin x) / cos (-x) = -(sin x / cos x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin x) / cos (-x) = -(sin x / cos x)"
                },
                {
                    "args": "sin_neg, sin (-x) / cos (-x) = -(sin x / cos x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (-x) / cos (-x) = -(sin x / cos x)"
                },
                {
                    "args": "tan_def, tan (-x) = -(tan x)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan (-x) = -(tan x)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan (-x) = -(tan x)"
                }
            ],
            "prop": "tan (-x) = -(tan x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_periodic_pi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "-(sin x) * -(real_inverse (cos x)) = sin x * real_inverse (cos x)",
                    "id": "0",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ -(sin x) * -(real_inverse (cos x)) = sin x * real_inverse (cos x)"
                },
                {
                    "args": "real_inv_neg, -(sin x) * real_inverse (-(cos x)) = sin x * real_inverse (cos x)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin x) * real_inverse (-(cos x)) = sin x * real_inverse (cos x)"
                },
                {
                    "args": "real_divide_def, -(sin x) / -(cos x) = sin x / cos x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin x) / -(cos x) = sin x / cos x"
                },
                {
                    "args": "cos_periodic_pi, -(sin x) / cos (x + pi) = sin x / cos x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(sin x) / cos (x + pi) = sin x / cos x"
                },
                {
                    "args": "sin_periodic_pi, sin (x + pi) / cos (x + pi) = sin x / cos x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (x + pi) / cos (x + pi) = sin x / cos x"
                },
                {
                    "args": "tan_def, tan (x + pi) = tan x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan (x + pi) = tan x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan (x + pi) = tan x"
                }
            ],
            "prop": "tan (x + pi) = tan x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_periodic_pi"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_periodic_npi",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_add_rid, tan (x + 0) = tan x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan (x + 0) = tan x"
                },
                {
                    "args": "real_mul_lzero, tan (x + 0 * pi) = tan x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ tan (x + 0 * pi) = tan x"
                },
                {
                    "args": "real_zero_def, tan (x + of_nat 0 * pi) = tan x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ tan (x + of_nat 0 * pi) = tan x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. tan (x + of_nat n * pi) = tan x ⟶ tan (x + of_nat (Suc n) * pi) = tan x"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "tan (x + of_nat n * pi) = tan x",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + of_nat n * pi) = tan x"
                },
                {
                    "args": "tan_periodic_pi, tan (x + of_nat n * pi + pi) = tan x",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + of_nat n * pi + pi) = tan x"
                },
                {
                    "args": "real_add_assoc, tan (x + (of_nat n * pi + pi)) = tan x",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + (of_nat n * pi + pi)) = tan x"
                },
                {
                    "args": "real_mul_lid, tan (x + (of_nat n * pi + 1 * pi)) = tan x",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + (of_nat n * pi + 1 * pi)) = tan x"
                },
                {
                    "args": "real_add_rdistrib, tan (x + (of_nat n + 1) * pi) = tan x",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + (of_nat n + 1) * pi) = tan x"
                },
                {
                    "args": "real_one_def, tan (x + (of_nat n + of_nat 1) * pi) = tan x",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + (of_nat n + of_nat 1) * pi) = tan x"
                },
                {
                    "args": "real_of_nat_add, tan (x + of_nat (n + 1) * pi) = tan x",
                    "id": "3.7",
                    "prevs": [
                        "3.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + of_nat (n + 1) * pi) = tan x"
                },
                {
                    "args": "add_1_right, tan (x + of_nat (Suc n) * pi) = tan x",
                    "id": "3.8",
                    "prevs": [
                        "3.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "tan (x + of_nat n * pi) = tan x ⊢ tan (x + of_nat (Suc n) * pi) = tan x"
                },
                {
                    "args": "",
                    "id": "3.9",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. tan (x + of_nat n * pi) = tan x ⟶ tan (x + of_nat (Suc n) * pi) = tan x"
                },
                {
                    "args": "nat_induct, {P: λn. tan (x + of_nat n * pi) = tan x, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ tan (x + of_nat n * pi) = tan x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan (x + of_nat n * pi) = tan x"
                }
            ],
            "prop": "tan (x + of_nat n * pi) = tan x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rid"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_of_nat_add"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_assoc"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_periodic_pi"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(cos x = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos x = 0) ⊢ ¬(cos x = 0)"
                },
                {
                    "args": "¬(cos y = 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos y = 0) ⊢ ¬(cos y = 0)"
                },
                {
                    "args": "¬(cos (x + y) = 0)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (x + y) = 0) ⊢ ¬(cos (x + y) = 0)"
                },
                {
                    "args": "cos_add",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(cos (x + y) = 0) ⊢ ¬(cos x * cos y - sin x * sin y = 0)"
                },
                {
                    "args": "∀cx. ∀cy. ∀sx. ∀sy. ¬(cx = 0) ⟶ ¬(cy = 0) ⟶ ¬(cx * cy - sx * sy = 0) ⟶ (sx * cy + cx * sy) / (cx * cy - sx * sy) = (sx / cx + sy / cy) / (1 - sx / cx * (sy / cy))",
                    "id": "4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀cx. ∀cy. ∀sx. ∀sy. ¬(cx = 0) ⟶ ¬(cy = 0) ⟶ ¬(cx * cy - sx * sy = 0) ⟶ (sx * cy + cx * sy) / (cx * cy - sx * sy) = (sx / cx + sy / cy) / (1 - sx / cx * (sy / cy))"
                },
                {
                    "args": "cos x, cos y, sin x, sin y",
                    "id": "5",
                    "prevs": [
                        "4",
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x + y) = 0) ⊢ (sin x * cos y + cos x * sin y) / (cos x * cos y - sin x * sin y) = (sin x / cos x + sin y / cos y) / (1 - sin x / cos x * (sin y / cos y))"
                },
                {
                    "args": "sin_add, sin (x + y) / (cos x * cos y - sin x * sin y) = (sin x / cos x + sin y / cos y) / (1 - sin x / cos x * (sin y / cos y))",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x + y) = 0) ⊢ sin (x + y) / (cos x * cos y - sin x * sin y) = (sin x / cos x + sin y / cos y) / (1 - sin x / cos x * (sin y / cos y))"
                },
                {
                    "args": "cos_add, sin (x + y) / cos (x + y) = (sin x / cos x + sin y / cos y) / (1 - sin x / cos x * (sin y / cos y))",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x + y) = 0) ⊢ sin (x + y) / cos (x + y) = (sin x / cos x + sin y / cos y) / (1 - sin x / cos x * (sin y / cos y))"
                },
                {
                    "args": "tan_def, tan (x + y) = (tan x + tan y) / (1 - tan x * tan y)",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x + y) = 0) ⊢ tan (x + y) = (tan x + tan y) / (1 - tan x * tan y)"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(cos x = 0) ⟶ ¬(cos y = 0) ⟶ ¬(cos (x + y) = 0) ⟶ tan (x + y) = (tan x + tan y) / (1 - tan x * tan y)"
                }
            ],
            "prop": [
                "¬(cos x = 0) ",
                "⟶ ¬(cos y = 0) ",
                "   ⟶ ¬(cos (x + y) = 0) ⟶ tan (x + y) = (tan x + tan y) / (1 - tan x * tan y)"
            ],
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_add"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "cos_add"
                },
                {
                    "goal": "!cx::real. !cy. !sx. !sy. ~(cx = 0) --> ~(cy = 0) --> ~(cx *cy - sx * sy = 0) --> (sx * cy + cx * sy) / (cx * cy - sx * sy) = (sx / cx + sy / cy) / (1 - sx / cx * (sy / cy))",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(cos x = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos x = 0) ⊢ ¬(cos x = 0)"
                },
                {
                    "args": "¬(cos y = 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos y = 0) ⊢ ¬(cos y = 0)"
                },
                {
                    "args": "¬(cos (x - y) = 0)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (x - y) = 0) ⊢ ¬(cos (x - y) = 0)"
                },
                {
                    "args": "1 + tan x * tan y = 1 - -(tan x * tan y)",
                    "id": "3",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 + tan x * tan y = 1 - -(tan x * tan y)"
                },
                {
                    "args": "real_mul_rneg, 1 + tan x * tan y = 1 - tan x * -(tan y)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x - y) = 0) ⊢ 1 + tan x * tan y = 1 - tan x * -(tan y)"
                },
                {
                    "args": "cos_neg, ¬(cos (-y) = 0)",
                    "id": "5",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x - y) = 0) ⊢ ¬(cos (-y) = 0)"
                },
                {
                    "args": "real_minus_def",
                    "id": "6",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(cos (x - y) = 0) ⊢ ¬(cos (x + -y) = 0)"
                },
                {
                    "args": "tan_add",
                    "id": "7",
                    "prevs": [
                        "0",
                        "5",
                        "6"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x - y) = 0) ⊢ tan (x + -y) = (tan x + tan (-y)) / (1 - tan x * tan (-y))"
                },
                {
                    "args": "tan_neg, tan (x + -y) = (tan x + -(tan y)) / (1 - tan x * -(tan y))",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x - y) = 0) ⊢ tan (x + -y) = (tan x + -(tan y)) / (1 - tan x * -(tan y))"
                },
                {
                    "args": "tan (x + -y) = (tan x + -(tan y)) / (1 + tan x * tan y)",
                    "id": "9",
                    "prevs": [
                        "4",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x - y) = 0) ⊢ tan (x + -y) = (tan x + -(tan y)) / (1 + tan x * tan y)"
                },
                {
                    "args": "real_minus_def, tan (x - y) = (tan x - tan y) / (1 + tan x * tan y)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos y = 0), ¬(cos (x - y) = 0) ⊢ tan (x - y) = (tan x - tan y) / (1 + tan x * tan y)"
                },
                {
                    "args": "",
                    "id": "11",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(cos x = 0) ⟶ ¬(cos y = 0) ⟶ ¬(cos (x - y) = 0) ⟶ tan (x - y) = (tan x - tan y) / (1 + tan x * tan y)"
                }
            ],
            "prop": [
                "¬(cos x = 0) ",
                "⟶ ¬(cos y = 0) ",
                "   ⟶ ¬(cos (x - y) = 0) ⟶ tan (x - y) = (tan x - tan y) / (1 + tan x * tan y)"
            ],
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal": "(1 + tan x * tan y) = (1 - tan x * (-tan y))",
                    "goal_id": "3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "goal_id": "3",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "tan_neg"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "tan_add"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "cos_neg"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_minus_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_double",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ cos x = 0 ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "cos x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos x = 0 ⊢ cos x = 0"
                },
                {
                    "args": "2 * sin x * 0 * real_inverse (cos (2 * x)) = 2 * (sin x * 0) * real_inverse (1 - (sin x * 0) ^ (2::nat))",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * sin x * 0 * real_inverse (cos (2 * x)) = 2 * (sin x * 0) * real_inverse (1 - (sin x * 0) ^ (2::nat))"
                },
                {
                    "args": "real_inv_0, 2 * sin x * 0 * real_inverse (cos (2 * x)) = 2 * (sin x * real_inverse 0) * real_inverse (1 - (sin x * real_inverse 0) ^ (2::nat))",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x = 0 ⊢ 2 * sin x * 0 * real_inverse (cos (2 * x)) = 2 * (sin x * real_inverse 0) * real_inverse (1 - (sin x * real_inverse 0) ^ (2::nat))"
                },
                {
                    "args": "real_divide_def, 2 * sin x * 0 * real_inverse (cos (2 * x)) = 2 * (sin x / 0) * real_inverse (1 - (sin x / 0) ^ (2::nat))",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x = 0 ⊢ 2 * sin x * 0 * real_inverse (cos (2 * x)) = 2 * (sin x / 0) * real_inverse (1 - (sin x / 0) ^ (2::nat))"
                },
                {
                    "args": "real_divide_def, 2 * sin x * 0 / cos (2 * x) = 2 * (sin x / 0) / (1 - (sin x / 0) ^ (2::nat))",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x = 0 ⊢ 2 * sin x * 0 / cos (2 * x) = 2 * (sin x / 0) / (1 - (sin x / 0) ^ (2::nat))"
                },
                {
                    "args": "2 * sin x * cos x / cos (2 * x) = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "cos x = 0 ⊢ 2 * sin x * cos x / cos (2 * x) = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))"
                },
                {
                    "args": "sin_double, sin (2 * x) / cos (2 * x) = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))",
                    "id": "0.6",
                    "prevs": [
                        "0.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x = 0 ⊢ sin (2 * x) / cos (2 * x) = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))"
                },
                {
                    "args": "tan_def, tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))",
                    "id": "0.7",
                    "prevs": [
                        "0.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "cos x = 0 ⊢ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ cos x = 0 ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(cos x = 0) ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "¬(cos x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos x = 0) ⊢ ¬(cos x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(cos x = 0) ⊢ cos (2 * x) = 0 ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "cos (2 * x) = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "cos (2 * x) = 0 ⊢ cos (2 * x) = 0"
                },
                {
                    "args": "cos_double",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "cos (2 * x) = 0 ⊢ cos x ^ (2::nat) - sin x ^ (2::nat) = 0"
                },
                {
                    "args": "real_sub_0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "cos (2 * x) = 0 ⊢ cos x ^ (2::nat) = sin x ^ (2::nat)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "cos (2 * x) = 0 ⊢ sin x ^ (2::nat) = cos x ^ (2::nat)"
                },
                {
                    "args": "real_pow_nz, {n: (2::nat), x: cos x}",
                    "id": "1.1.4",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(cos x = 0) ⊢ ¬(cos x ^ (2::nat) = 0)"
                },
                {
                    "args": "real_mul_linv, {x: cos x ^ (2::nat)}",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(cos x = 0) ⊢ real_inverse (cos x ^ (2::nat)) * cos x ^ (2::nat) = 1"
                },
                {
                    "args": "real_mult_comm",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(cos x = 0) ⊢ cos x ^ (2::nat) * real_inverse (cos x ^ (2::nat)) = 1"
                },
                {
                    "args": "real_mul_rzero, sin (2 * x) * 0 = 2 * (sin x * real_inverse (cos x)) * 0",
                    "id": "1.1.7",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sin (2 * x) * 0 = 2 * (sin x * real_inverse (cos x)) * 0"
                },
                {
                    "args": "real_inv_0, sin (2 * x) * real_inverse 0 = 2 * (sin x * real_inverse (cos x)) * real_inverse 0",
                    "id": "1.1.8",
                    "prevs": [
                        "1.1.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ sin (2 * x) * real_inverse 0 = 2 * (sin x * real_inverse (cos x)) * real_inverse 0"
                },
                {
                    "args": "real_sub_refl, sin (2 * x) * real_inverse 0 = 2 * (sin x * real_inverse (cos x)) * real_inverse (1 - 1)",
                    "id": "1.1.9",
                    "prevs": [
                        "1.1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ sin (2 * x) * real_inverse 0 = 2 * (sin x * real_inverse (cos x)) * real_inverse (1 - 1)"
                },
                {
                    "args": "sin (2 * x) * real_inverse 0 = 2 * (sin x * real_inverse (cos x)) * real_inverse (1 - cos x ^ (2::nat) * real_inverse (cos x ^ (2::nat)))",
                    "id": "1.1.10",
                    "prevs": [
                        "1.1.6",
                        "1.1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ sin (2 * x) * real_inverse 0 = 2 * (sin x * real_inverse (cos x)) * real_inverse (1 - cos x ^ (2::nat) * real_inverse (cos x ^ (2::nat)))"
                },
                {
                    "args": "real_divide_def, sin (2 * x) * real_inverse 0 = 2 * (sin x / cos x) * real_inverse (1 - cos x ^ (2::nat) / cos x ^ (2::nat))",
                    "id": "1.1.11",
                    "prevs": [
                        "1.1.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ sin (2 * x) * real_inverse 0 = 2 * (sin x / cos x) * real_inverse (1 - cos x ^ (2::nat) / cos x ^ (2::nat))"
                },
                {
                    "args": "real_divide_def, sin (2 * x) / 0 = 2 * (sin x / cos x) / (1 - cos x ^ (2::nat) / cos x ^ (2::nat))",
                    "id": "1.1.12",
                    "prevs": [
                        "1.1.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ sin (2 * x) / 0 = 2 * (sin x / cos x) / (1 - cos x ^ (2::nat) / cos x ^ (2::nat))"
                },
                {
                    "args": "sin (2 * x) / 0 = 2 * (sin x / cos x) / (1 - sin x ^ (2::nat) / cos x ^ (2::nat))",
                    "id": "1.1.13",
                    "prevs": [
                        "1.1.3",
                        "1.1.12"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "cos (2 * x) = 0, ¬(cos x = 0) ⊢ sin (2 * x) / 0 = 2 * (sin x / cos x) / (1 - sin x ^ (2::nat) / cos x ^ (2::nat))"
                },
                {
                    "args": "real_pow_div, sin (2 * x) / 0 = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))",
                    "id": "1.1.14",
                    "prevs": [
                        "1.1.13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ sin (2 * x) / 0 = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))"
                },
                {
                    "args": "sin (2 * x) / cos (2 * x) = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))",
                    "id": "1.1.15",
                    "prevs": [
                        "1.1.0",
                        "1.1.14"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "cos (2 * x) = 0, ¬(cos x = 0) ⊢ sin (2 * x) / cos (2 * x) = 2 * (sin x / cos x) / (1 - (sin x / cos x) ^ (2::nat))"
                },
                {
                    "args": "tan_def, tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))",
                    "id": "1.1.16",
                    "prevs": [
                        "1.1.15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), cos (2 * x) = 0 ⊢ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "1.1.17",
                    "prevs": [
                        "1.1.0",
                        "1.1.16"
                    ],
                    "rule": "intros",
                    "th": "¬(cos x = 0) ⊢ cos (2 * x) = 0 ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(cos x = 0) ⊢ ¬(cos (x + x) = 0) ⟶ tan (x + x) = (tan x + tan x) / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "¬(cos (x + x) = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(cos (x + x) = 0) ⊢ ¬(cos (x + x) = 0)"
                },
                {
                    "args": "tan_add",
                    "id": "1.2.1",
                    "prevs": [
                        "1.0",
                        "1.0",
                        "1.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(cos x = 0), ¬(cos (x + x) = 0) ⊢ tan (x + x) = (tan x + tan x) / (1 - tan x * tan x)"
                },
                {
                    "args": "real_pow_2, tan (x + x) = (tan x + tan x) / (1 - tan x ^ (2::nat))",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0), ¬(cos (x + x) = 0) ⊢ tan (x + x) = (tan x + tan x) / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(cos x = 0) ⊢ ¬(cos (x + x) = 0) ⟶ tan (x + x) = (tan x + tan x) / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "real_mul_2, ¬(cos (2 * x) = 0) ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(cos x = 0) ⊢ ¬(cos (2 * x) = 0) ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.4",
                    "prevs": [
                        "1.1",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(cos x = 0) ⊢ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(cos x = 0) ⟶ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))"
                }
            ],
            "prop": "tan (2 * x) = 2 * tan x / (1 - tan x ^ (2::nat))",
            "steps": [
                {
                    "case": "cos x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sin_double"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_0"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "real_norm"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "cos (2* x) = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "tan_def"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "cos_double"
                },
                {
                    "fact_ids": [
                        "1.1.1"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sub_0"
                },
                {
                    "goal_id": "1.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_div"
                },
                {
                    "fact_ids": [
                        "1.1.2"
                    ],
                    "goal_id": "1.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.1.3"
                    ],
                    "goal_id": "1.1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1.4",
                    "method_name": "apply_forward_step",
                    "param_n": "(2::nat)",
                    "theorem": "real_pow_nz"
                },
                {
                    "goal_id": "1.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "fact_ids": [
                        "1.1.4"
                    ],
                    "goal_id": "1.1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "real_mul_linv"
                },
                {
                    "fact_ids": [
                        "1.1.5"
                    ],
                    "goal_id": "1.1.6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "fact_ids": [
                        "1.1.6"
                    ],
                    "goal_id": "1.1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sub_refl"
                },
                {
                    "goal_id": "1.1.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_0"
                },
                {
                    "goal_id": "1.1.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "tan_add"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cot",
            "prop": "cot x = cos x / sin x",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cot_double",
            "prop": "cot (2 * x) = (cot x - tan x) / 2",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_cot_double",
            "prop": "tan x = cot x - 2 * cot (2 * x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_add_tan",
            "prop": "¬(cos x = 0) ⟶ ¬(cos y = 0) ⟶ tan x + tan y = sin (x + y) / (cos x * cos y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_sub_tan",
            "prop": "¬(cos x = 0) ⟶ ¬(cos y = 0) ⟶ tan x - tan y = sin (x - y) / (cos x * cos y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_pi4",
            "prop": "tan (pi / 4) = 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_pos_pi2",
            "prop": "0 < x ⟶ x < pi / 2 ⟶ 0 < tan x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_pos_pi2_le",
            "prop": "0 ≤ x ⟶ x < pi / 2 ⟶ 0 ≤ tan x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_tan",
            "prop": "abs x < pi / 2 ⟶ cos x = 1 / sqrt (1 + tan x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sin_tan",
            "prop": "abs x < pi / 2 ⟶ cos x = tan x / sqrt (1 + tan x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_lt",
            "prop": "-(pi / 2) ≤ x ⟶ x < y ⟶ y ≤ pi / 2 ⟶ sin x < sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_le",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ y ⟶ y ≤ pi / 2 ⟶ sin x ≤ sin y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_lt_eq",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ -(pi / 2) ≤ y ⟶ y ≤ pi / 2 ⟶ sin x < sin y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_mono_le_eq",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ -(pi / 2) ≤ y ⟶ y ≤ pi / 2 ⟶ sin x ≤ sin y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_inj_pi",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ -(pi / 2) ≤ y ⟶ y ≤ pi / 2 ⟶ sin x = sin y ⟶ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_lt",
            "prop": "0 ≤ x ⟶ x < y ⟶ y ≤ pi ⟶ cos x < cos y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_le",
            "prop": "0 ≤ x ⟶ x ≤ y ⟶ y ≤ pi ⟶ cos x ≤ cos y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_lt_eq",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ y ⟶ y ≤ pi ⟶ cos x < cos y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_mono_le_eq",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ y ⟶ y ≤ pi ⟶ cos x ≤ cos y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_inj_pi",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ 0 ≤ y ⟶ y ≤ pi ⟶ cos x = cos y ⟶ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_abs_cos_mono_le_eq",
            "prop": "abs x ≤ pi / 2 ⟶ abs y ≤ pi / 2 ⟶ abs (cos x) ≤ abs (cos y) ⟷ abs y ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_lt",
            "prop": "-(pi / 2) < x ⟶ x < y ⟶ y < pi / 2 ⟶ tan x < tan y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_le",
            "prop": "-(pi / 2) < x ⟶ x ≤ y ⟶ y < pi / 2 ⟶ tan x ≤ tan y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_lt_eq",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ -(pi / 2) < y ⟶ y < pi / 2 ⟶ tan x < tan y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_mono_le_eq",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ -(pi / 2) < y ⟶ y < pi / 2 ⟶ tan x ≤ tan y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "tan_bound_pi2",
            "prop": "abs x < pi / 4 ⟶ abs (tan x) < 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "tan_cot",
            "prop": "tan (pi / 2 - x) = cot x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_abs_sin_bound_lt",
            "prop": "¬(x = 0) ⟶ abs (sin x) < abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_abs_sin_bound_le",
            "prop": "abs (sin x) ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_pi6_straddle",
            "prop": [
                "0 ≤ a ",
                "⟶ a ≤ b ⟶ b ≤ 4 ⟶ sin (a / 6) ≤ 1 / 2 ⟶ 1 / 2 ≤ sin (b / 6) ⟶ a ≤ pi ∧ pi ≤ b"
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real"
            }
        },
        {
            "name": "sec",
            "prop": "sec x = 1 / cos x",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "csc",
            "prop": "csc x = 1 / sin x",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "sin_csc_inverse",
            "prop": "¬(sin x = 0) ⟶ sin x = 1 / csc x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cos_sec_inverse",
            "prop": "¬(cos x = 0) ⟶ cos x = 1 / sec x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn",
            "prop": "atn y = (THE x. -(pi / 2) < x ∧ x < pi / 2 ∧ tan x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_tan",
            "prop": "tan (atn y) = y",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_bound",
            "prop": "abs (atn y) < pi / 2",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "tan_atn",
            "prop": "-(pi / 2) < x ⟶ x < pi / 2 ⟶ atn (tan x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_0",
            "prop": "atn 0 = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_1",
            "prop": "atn 1 = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "atn_sqrt_3",
            "prop": "atn (3 ^ (1 / 2)) = pi / 3",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "atn_inv_sqrt_3",
            "prop": "atn (1 / 3 * 3 ^ (1 / 2)) = pi / 6",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite_sym"
            ],
            "name": "atn_neg",
            "prop": "atn (-x) = -(atn x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "atn_neg_alt",
            "prop": "atn (-c * x) = -(atn (c * x))",
            "ty": "thm",
            "vars": {
                "c": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_mono_lt",
            "prop": "x < y ⟶ atn x < atn y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_mono_lt_eq",
            "prop": "atn x < atn y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_mono_le_eq",
            "prop": "atn x ≤ atn y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_inj",
            "prop": "atn x = atn y ⟷ x = y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_pos_lt",
            "prop": "0 < atn x ⟷ 0 < x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_pos_le",
            "prop": "0 ≤ atn x ⟷ 0 ≤ x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_lt_pi4_pos",
            "prop": "x < 1 ⟶ atn x < pi / 4",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_lt_pi4_neg",
            "prop": "-1 < x ⟶ -(pi / 4) < atn x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_lt_pi4",
            "prop": "abs x < 1 ⟶ abs (atn x) < pi / 4",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_le_pi4",
            "prop": "abs x ≤ 1 ⟶ abs (atn x) ≤ pi / 4",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "cos_atn_nz",
            "prop": "¬(cos (atn x) = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "tan_sec",
            "prop": "¬(cos x = 0) ⟶ 1 + tan x ^ (2::nat) = sec x ^ (2::nat)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "tan_sec_alt",
            "prop": "¬(cos x = 0) ⟶ tan x ^ (2::nat) = sec x ^ (2::nat) - 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "cot_csc_alt",
            "prop": "¬(sin x = 0) ⟶ cot x ^ (2::nat) = csc x ^ (2::nat) - 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "cos_atn",
            "prop": "cos (atn x) = 1 / sqrt (1 + x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "sin_atn",
            "prop": "sin (atn x) = 1 / sqrt (x + x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "atn_abs",
            "prop": "atn (abs x) = abs (atn x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_add",
            "prop": "abs (atn x + atn y) < pi / 2 ⟶ atn x + atn y = atn ((x + y) / (1 - x * y))",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_inv",
            "prop": "0 < x ⟶ atn (real_inverse x) = pi / 2 - atn x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_add_small",
            "prop": "abs (x * y) < 1 ⟶ atn x + atn y = atn ((x + y) / (1 - x * y))",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mathin",
            "prop": "4 * atn (1 / 5) - atn (1 / 239) = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mathin_euler",
            "prop": "5 * atn (1 / 7) + 2 * atn (3 / 79) = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mathin_gauss",
            "prop": "12 * atn (1 / 18) + 8 * atn (1 / 57) - 5 * atn (1 / 239) = pi / 4",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_abs_le_x",
            "prop": "abs (atn x) ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "atn_le_x",
            "prop": "0 ≤ x ⟶ atn x ≤ x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "tan_abs_ge_x",
            "prop": "abs x < pi / 2 ⟶ abs x ≤ abs (tan x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "asn",
            "prop": "asn y = (THE x. -pi / 2 ≤ x ∧ x ≤ pi / 2 ∧ sin x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_asn",
            "prop": "-1 ≤ y ⟶ y ≤ 1 ⟶ sin (asn y) = y",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_sin",
            "prop": "-(pi / 2) ≤ x ⟶ x ≤ pi / 2 ⟶ asn (sin x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "ans_bounds_lt",
            "prop": "-1 < y ⟶ y < 1 ⟶ -(pi / 2) < asn y ∧ asn y < pi / 2",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "asn_0",
            "prop": "asn 0 = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "asn_1",
            "prop": "asn 1 = pi / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "asn_neg_1",
            "prop": "asn (-1) = -(pi / 2)",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_bounds",
            "prop": "-1 ≤ y ⟶ y ≤ 1 ⟶ -(pi / 2) ≤ asn y ∧ asn y ≤ pi / 2",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "asn_bounds_pi2",
            "prop": "0 ≤ x ⟶ x ≤ 1 ⟶ 0 ≤ asn x ∧ asn x ≤ pi / 2",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_neg",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ asn (-x) = -(asn x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_asn_nz",
            "prop": "-1 < x ⟶ x < 1 ⟶ ¬(cos (asn x) = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_mono_lt_eq",
            "prop": "abs x ≤ 1 ⟶ abs y ≤ 1 ⟶ asn x < asn y ⟷ x < y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_mono_le_eq",
            "prop": "abs x ≤ 1 ⟶ abs y ≤ 1 ⟶ asn x ≤ asn y ⟷ x ≤ y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_mono_lt",
            "prop": "-1 ≤ x ⟶ x < y ⟶ y ≤ 1 ⟶ asn x < asn y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_mono_le",
            "prop": "-1 ≤ x ⟶ x ≤ y ⟶ y ≤ 1 ⟶ asn x ≤ asn y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "cos_asn",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ cos (asn x) = sqrt (1 - x ^ (2::nat))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "acs",
            "prop": "acs y = (THE x. 0 ≤ x ∧ x ≤ pi ∧ cos x = y)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "cos_acs",
            "prop": "-1 ≤ y ⟶ y ≤ 1 ⟶ cos (acs y) = y",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_cos",
            "prop": "0 ≤ x ⟶ x ≤ pi ⟶ acs (cos x) = x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_bounds_lt",
            "prop": "-1 < y ⟶ y < 1 ⟶ 0 < acs y ∧ acs y < pi",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "acs_0",
            "prop": "acs 0 = pi / 2",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "acs_1",
            "prop": "acs 1 = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "acs_neg_1",
            "prop": "acs (-1) = pi",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_bounds",
            "prop": "-1 ≤ y ⟶ y ≤ 1 ⟶ 0 ≤ acs y ∧ acs y ≤ pi",
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_neg",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ acs (-x) = pi - acs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "sin_acs_nz",
            "prop": "-1 < x ⟶ x < 1 ⟶ ¬(sin (acs x) = 0)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_mono_lt_eq",
            "prop": "abs x ≤ 1 ⟶ abs y ≤ 1 ⟶ acs x < acs y ⟷ y < x",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_mono_le_eq",
            "prop": "abs x ≤ 1 ⟶ abs y ≤ 1 ⟶ acs x ≤ acs y ⟷ y ≤ x",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "abs x ≤ 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "abs x ≤ 1 ⊢ abs x ≤ 1"
                },
                {
                    "args": "x < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "abs y ≤ 1",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "abs y ≤ 1 ⊢ abs y ≤ 1"
                },
                {
                    "args": "acs_mono_lt_eq, {x: y, y: x}",
                    "id": "3",
                    "prevs": [
                        "2",
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "abs y ≤ 1, abs x ≤ 1 ⊢ acs y < acs x ⟷ x < y"
                },
                {
                    "args": "acs y < acs x",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "abs y ≤ 1, abs x ≤ 1, x < y ⊢ acs y < acs x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs x ≤ 1 ⟶ x < y ⟶ abs y ≤ 1 ⟶ acs y < acs x"
                }
            ],
            "prop": "abs x ≤ 1 ⟶ x < y ⟶ abs y ≤ 1 ⟶ acs y < acs x",
            "steps": [
                {
                    "fact_ids": [
                        "2",
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "acs_mono_lt_eq"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "abs x ≤ 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "abs x ≤ 1 ⊢ abs x ≤ 1"
                },
                {
                    "args": "x ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "abs y ≤ 1",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "abs y ≤ 1 ⊢ abs y ≤ 1"
                },
                {
                    "args": "acs_mono_le_eq, {x: y, y: x}",
                    "id": "3",
                    "prevs": [
                        "2",
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "abs y ≤ 1, abs x ≤ 1 ⊢ acs y ≤ acs x ⟷ x ≤ y"
                },
                {
                    "args": "acs y ≤ acs x",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "abs y ≤ 1, abs x ≤ 1, x ≤ y ⊢ acs y ≤ acs x"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs x ≤ 1 ⟶ x ≤ y ⟶ abs y ≤ 1 ⟶ acs y ≤ acs x"
                }
            ],
            "prop": "abs x ≤ 1 ⟶ x ≤ y ⟶ abs y ≤ 1 ⟶ acs y ≤ acs x",
            "steps": [
                {
                    "fact_ids": [
                        "2",
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "acs_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "sin_acs",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "-1 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-1 ≤ x ⊢ -1 ≤ x"
                },
                {
                    "args": "x ≤ 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ 1 ⊢ x ≤ 1"
                },
                {
                    "args": "acs_bounds, {y: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ 0 ≤ acs x ∧ acs x ≤ pi"
                },
                {
                    "args": "conjD1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ 0 ≤ acs x"
                },
                {
                    "args": "conjD2",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ acs x ≤ pi"
                },
                {
                    "args": "sin_pos_pi_le",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ 0 ≤ sin (acs x)"
                },
                {
                    "args": "sin_circle, {x: acs x}",
                    "id": "6",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ sin (acs x) ^ (2::nat) + cos (acs x) ^ (2::nat) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = sin (acs x) ^ (2::nat) + cos (acs x) ^ (2::nat)"
                },
                {
                    "args": "cos_acs, {y: x}",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ cos (acs x) = x"
                },
                {
                    "args": "∀a::real. ∀b. a = a + b - b",
                    "id": "9",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. ∀b. a = a + b - b"
                },
                {
                    "args": "sin (acs x) ^ (2::nat), x ^ (2::nat)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ sin (acs x) ^ (2::nat) = sin (acs x) ^ (2::nat) + x ^ (2::nat) - x ^ (2::nat)"
                },
                {
                    "args": "sin (acs x) ^ (2::nat) = sin (acs x) ^ (2::nat) + cos (acs x) ^ (2::nat) - x ^ (2::nat)",
                    "id": "11",
                    "prevs": [
                        "8",
                        "10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ sin (acs x) ^ (2::nat) = sin (acs x) ^ (2::nat) + cos (acs x) ^ (2::nat) - x ^ (2::nat)"
                },
                {
                    "args": "sin (acs x) ^ (2::nat) = 1 - x ^ (2::nat)",
                    "id": "12",
                    "prevs": [
                        "7",
                        "11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ sin (acs x) ^ (2::nat) = 1 - x ^ (2::nat)"
                },
                {
                    "args": "sqrt_unique",
                    "id": "13",
                    "prevs": [
                        "5",
                        "12"
                    ],
                    "rule": "apply_theorem",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ sqrt (1 - x ^ (2::nat)) = sin (acs x)"
                },
                {
                    "args": "eq_sym_eq, sin (acs x) = sqrt (1 - x ^ (2::nat))",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "-1 ≤ x, x ≤ 1 ⊢ sin (acs x) = sqrt (1 - x ^ (2::nat))"
                },
                {
                    "args": "",
                    "id": "15",
                    "prevs": [
                        "0",
                        "1",
                        "14"
                    ],
                    "rule": "intros",
                    "th": "⊢ -1 ≤ x ⟶ x ≤ 1 ⟶ sin (acs x) = sqrt (1 - x ^ (2::nat))"
                }
            ],
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ sin (acs x) = sqrt (1 - x ^ (2::nat))",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "sqrt_unique"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "sin_pos_pi_le"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "acs_bounds"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "param_x": "acs x",
                    "theorem": "sin_circle"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "8",
                    "method_name": "apply_forward_step",
                    "theorem": "cos_acs"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "!a::real. !b. a = a + b -b ",
                    "goal_id": "9",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "abs x ≤ 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "abs x ≤ 1 ⊢ abs x ≤ 1"
                },
                {
                    "args": "abs y ≤ 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "abs y ≤ 1 ⊢ abs y ≤ 1"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ acs x ≤ acs y ∧ acs y ≤ acs x ⟶ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "acs x ≤ acs y ∧ acs y ≤ acs x",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "acs x ≤ acs y ∧ acs y ≤ acs x ⊢ acs x ≤ acs y ∧ acs y ≤ acs x"
                },
                {
                    "args": "conjD1, {A: acs x ≤ acs y, B: acs y ≤ acs x}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "acs x ≤ acs y ∧ acs y ≤ acs x ⊢ acs x ≤ acs y"
                },
                {
                    "args": "conjD2, {A: acs x ≤ acs y, B: acs y ≤ acs x}",
                    "id": "2.2",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "acs x ≤ acs y ∧ acs y ≤ acs x ⊢ acs y ≤ acs x"
                },
                {
                    "args": "acs_mono_le_eq, {x: y, y: x}",
                    "id": "2.3",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "abs y ≤ 1, abs x ≤ 1 ⊢ acs y ≤ acs x ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.3",
                        "2.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "abs y ≤ 1, abs x ≤ 1, acs x ≤ acs y ∧ acs y ≤ acs x ⊢ x ≤ y"
                },
                {
                    "args": "acs_mono_le_eq, {x: x, y: y}",
                    "id": "2.5",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ acs x ≤ acs y ⟷ y ≤ x"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.5",
                        "2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "abs x ≤ 1, abs y ≤ 1, acs x ≤ acs y ∧ acs y ≤ acs x ⊢ y ≤ x"
                },
                {
                    "args": "conjI",
                    "id": "2.7",
                    "prevs": [
                        "2.4",
                        "2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "abs x ≤ 1, abs y ≤ 1, acs x ≤ acs y ∧ acs y ≤ acs x ⊢ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ acs x ≤ acs y ∧ acs y ≤ acs x ⟶ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ x ≤ y ∧ y ≤ x ⟶ acs x ≤ acs y ∧ acs y ≤ acs x"
                },
                {
                    "args": "x ≤ y ∧ y ≤ x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ∧ y ≤ x ⊢ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "conjD2",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y ∧ y ≤ x ⊢ y ≤ x"
                },
                {
                    "args": "acs_mono_le",
                    "id": "3.2",
                    "prevs": [
                        "1",
                        "3.1",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "abs x ≤ 1, abs y ≤ 1, x ≤ y ∧ y ≤ x ⊢ acs x ≤ acs y"
                },
                {
                    "args": "conjD1",
                    "id": "3.3",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y ∧ y ≤ x ⊢ x ≤ y"
                },
                {
                    "args": "acs_mono_le",
                    "id": "3.4",
                    "prevs": [
                        "0",
                        "3.3",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "abs x ≤ 1, abs y ≤ 1, x ≤ y ∧ y ≤ x ⊢ acs y ≤ acs x"
                },
                {
                    "args": "conjI",
                    "id": "3.5",
                    "prevs": [
                        "3.2",
                        "3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "abs x ≤ 1, abs y ≤ 1, x ≤ y ∧ y ≤ x ⊢ acs x ≤ acs y ∧ acs y ≤ acs x"
                },
                {
                    "args": "",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ x ≤ y ∧ y ≤ x ⟶ acs x ≤ acs y ∧ acs y ≤ acs x"
                },
                {
                    "args": "iffI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ acs x ≤ acs y ∧ acs y ≤ acs x ⟷ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "real_le_antisym, acs x = acs y ⟷ x = y",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "abs x ≤ 1, abs y ≤ 1 ⊢ acs x = acs y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs x ≤ 1 ⟶ abs y ≤ 1 ⟶ acs x = acs y ⟷ x = y"
                }
            ],
            "prop": "abs x ≤ 1 ⟶ abs y ≤ 1 ⟶ acs x = acs y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1",
                        "0"
                    ],
                    "goal_id": "2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "acs_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "2.3",
                        "2.2"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2.5",
                    "method_name": "apply_forward_step",
                    "theorem": "acs_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "2.5",
                        "2.1"
                    ],
                    "goal_id": "2.6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "acs_mono_le"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "acs_mono_le"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_atn",
            "prop": "-1 < x ⟶ x < 1 ⟶ acs x = pi / 2 - atn (x / sqrt (1 - x ^ (2::nat)))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_plus_acs",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ asn x + acs x = pi / 2",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_acs",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ asn x = pi / 2 - acs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_asn",
            "prop": "-1 ≤ x ⟶ x ≤ 1 ⟶ acs x = pi / 2 - asn x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_atn",
            "prop": "-1 < x ⟶ x < 1 ⟶ asn x = atn (x / sqrt (1 - x ^ (2::nat)))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_acs_sqrt_pos",
            "prop": "0 ≤ x ⟶ x ≤ 1 ⟶ asn x = acs (sqrt (1 - x ^ (2::nat)))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "asn_acs_sqrt_neg",
            "prop": "-1 ≤ x ⟶ x ≤ 0 ⟶ asn x = -(acs (sqrt (1 - x ^ (2::nat))))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_asn_sqrt_pos",
            "prop": "0 ≤ x ⟶ x ≤ 1 ⟶ acs x = asn (sqrt (1 - x ^ (2::nat)))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "acs_asn_sqrt_neg",
            "prop": "-1 ≤ x ⟶ x ≤ 0 ⟶ acs x = -(asn (sqrt (1 - x ^ (2::nat))))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root",
            "prop": "root n x = real_sgn x * exp (log (abs x) / of_nat n)",
            "ty": "def",
            "type": "nat ⇒ real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs 0) / of_nat n) = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs 0) / of_nat n) = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log (abs 0) / of_nat n) = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 0 * exp (log (abs 0) / of_nat n) = 0"
                },
                {
                    "args": "root_def, root n 0 = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 0 = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n 0 = 0"
                }
            ],
            "prop": "root n 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(if (0::real) < 1 then (1::real) else if (1::real) < 0 then -1 else 0) * 1 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (if (0::real) < 1 then (1::real) else if (1::real) < 0 then -1 else 0) * 1 = 1"
                },
                {
                    "args": "real_exp_0, (if (0::real) < 1 then 1 else if (1::real) < 0 then -1 else 0) * exp 0 = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 1 then 1 else if (1::real) < 0 then -1 else 0) * exp 0 = 1"
                },
                {
                    "args": "real_sgn_def, real_sgn 1 * exp 0 = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp 0 = 1"
                },
                {
                    "args": "real_mul_lzero, real_sgn 1 * exp (0 * real_inverse (of_nat n)) = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (0 * real_inverse (of_nat n)) = 1"
                },
                {
                    "args": "real_divide_def, real_sgn 1 * exp (0 / of_nat n) = 1",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (0 / of_nat n) = 1"
                },
                {
                    "args": "log_1, real_sgn 1 * exp (log 1 / of_nat n) = 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (log 1 / of_nat n) = 1"
                },
                {
                    "args": "real_one_def, real_sgn of_nat 1 * exp (log of_nat 1 / of_nat n) = of_nat 1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ real_sgn of_nat 1 * exp (log of_nat 1 / of_nat n) = of_nat 1"
                },
                {
                    "args": "real_abs_nat, real_sgn of_nat 1 * exp (log (abs of_nat 1) / of_nat n) = of_nat 1",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn of_nat 1 * exp (log (abs of_nat 1) / of_nat n) = of_nat 1"
                },
                {
                    "args": "real_one_def, real_sgn 1 * exp (log (abs 1) / of_nat n) = 1",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn 1 * exp (log (abs 1) / of_nat n) = 1"
                },
                {
                    "args": "root_def, root n 1 = 1",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 1 = 1"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n 1 = 1"
                }
            ],
            "prop": "root n 1 = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {x: log (abs x) / of_nat 2}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat 2)"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (exp (log (abs x) / of_nat 2)) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (exp (log (abs x) / of_nat 2)) = 1"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 = real_sgn x",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * 1 = real_sgn x"
                },
                {
                    "args": "real_sgn x * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ real_sgn x * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "real_sgn_real_sgn, real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "real_sgn_mul, real_sgn (real_sgn x * exp (log (abs x) / of_nat 2)) = real_sgn x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x * exp (log (abs x) / of_nat 2)) = real_sgn x"
                },
                {
                    "args": "root_def, real_sgn (root 2 x) = real_sgn x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (root 2 x) = real_sgn x"
                },
                {
                    "args": "real_abs_pos, {x: x}",
                    "id": "7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ abs x"
                },
                {
                    "args": "real_le_lt",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 0 < abs x ∨ 0 = abs x"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "0 < abs x",
                    "id": "9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < abs x ⊢ 0 < abs x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (abs x) = 1",
                    "id": "9.1",
                    "prevs": [
                        "9.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ real_sgn (abs x) = 1"
                },
                {
                    "args": "∀x. 2 * (x / 2) = x",
                    "id": "9.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x. 2 * (x / 2) = x"
                },
                {
                    "args": "exp_log",
                    "id": "9.3",
                    "prevs": [
                        "9.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < abs x ⊢ exp (log (abs x)) = abs x"
                },
                {
                    "args": "exp (2 * (log (abs x) / 2)) = abs x",
                    "id": "9.4",
                    "prevs": [
                        "9.2",
                        "9.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < abs x ⊢ exp (2 * (log (abs x) / 2)) = abs x"
                },
                {
                    "args": "real_of_nat_id, exp (of_nat 2 * (log (abs x) / of_nat 2)) = abs x",
                    "id": "9.5",
                    "prevs": [
                        "9.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ exp (of_nat 2 * (log (abs x) / of_nat 2)) = abs x"
                },
                {
                    "args": "real_exp_n, exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.6",
                    "prevs": [
                        "9.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < abs x ⊢ exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_mul_lid, 1 * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.7",
                    "prevs": [
                        "9.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < abs x ⊢ 1 * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "9.8",
                    "prevs": [
                        "9.1",
                        "9.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < abs x ⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "9.9",
                    "prevs": [
                        "9.0",
                        "9.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 = abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "0 = abs x",
                    "id": "10.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = abs x ⊢ 0 = abs x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "10.1",
                    "prevs": [
                        "10.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = abs x ⊢ abs x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0",
                    "id": "10.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0",
                    "id": "10.3",
                    "prevs": [
                        "10.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 = abs x ⊢ real_sgn 0 * exp (log 0 / of_nat 2) ^ (2::nat) = 0"
                },
                {
                    "args": "real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "10.4",
                    "prevs": [
                        "10.1",
                        "10.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = abs x ⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "",
                    "id": "10.5",
                    "prevs": [
                        "10.0",
                        "10.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 = abs x ⟶ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "disjE",
                    "id": "11",
                    "prevs": [
                        "8",
                        "9",
                        "10"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn (abs x) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn_pow_2, real_sgn (x ^ (2::nat)) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (x ^ (2::nat)) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_sgn_pow, real_sgn x ^ (2::nat) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ real_sgn x ^ (2::nat) * exp (log (abs x) / of_nat 2) ^ (2::nat) = abs x"
                },
                {
                    "args": "real_pow_mul, (real_sgn x * exp (log (abs x) / of_nat 2)) ^ (2::nat) = abs x",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat 2)) ^ (2::nat) = abs x"
                },
                {
                    "args": "root_def, root 2 x ^ (2::nat) = abs x",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root 2 x ^ (2::nat) = abs x"
                },
                {
                    "args": "sqrt_unique_gen",
                    "id": "16",
                    "prevs": [
                        "6",
                        "15"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ sqrt x = root 2 x"
                },
                {
                    "args": "eq_sym_eq, root 2 x = sqrt x",
                    "id": "17",
                    "prevs": [
                        "16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root 2 x = sqrt x"
                },
                {
                    "args": "",
                    "id": "18",
                    "prevs": [
                        "17"
                    ],
                    "rule": "intros",
                    "th": "⊢ root 2 x = sqrt x"
                }
            ],
            "prop": "root 2 x = sqrt x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "sqrt_unique_gen"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_real_sgn"
                },
                {
                    "goal": "real_sgn (exp (log (abs x) / of_nat 2)) = 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_mul"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_sgn_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_pow_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_abs_pos"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "9",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn (abs x) = 1",
                    "goal_id": "9.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "9.1"
                    ],
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal": "∀x. 2 * (x / 2) = x",
                    "goal_id": "9.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_id"
                },
                {
                    "fact_ids": [
                        "9.2"
                    ],
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "goal_id": "10",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "10.0"
                    ],
                    "goal_id": "10.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "10.1"
                    ],
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "10.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "root_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_mul_lneg, -(real_sgn x) * exp (log (abs x) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_sgn x) * exp (log (abs x) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_abs_neg, -(real_sgn x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_sgn x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_sgn_neg, real_sgn (-x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (-x) * exp (log (abs (-x)) / of_nat n) = -(real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "root_def, root n (-x) = -(root n x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (-x) = -(root n x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (-x) = -(root n x)"
                }
            ],
            "prop": "root n (-x) = -(root n x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_works_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {x: log (abs x) / of_nat n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (exp (log (abs x) / of_nat n)) = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (exp (log (abs x) / of_nat n)) = 1"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 = real_sgn x",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * 1 = real_sgn x"
                },
                {
                    "args": "real_sgn x * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ real_sgn x * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "real_sgn_real_sgn, real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x) * real_sgn (exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "real_sgn_mul, real_sgn (real_sgn x * exp (log (abs x) / of_nat n)) = real_sgn x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_sgn x * exp (log (abs x) / of_nat n)) = real_sgn x"
                },
                {
                    "args": "root_def, real_sgn (root n x) = real_sgn x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (root n x) = real_sgn x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_sgn (root n x) = real_sgn x"
                }
            ],
            "prop": "real_sgn (root n x) = real_sgn x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_real_sgn"
                },
                {
                    "goal": "real_sgn (exp (log (abs x) / of_nat n)) = 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_works_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "real_nat_power_def_1, (real_sgn x * exp (log (abs x) / of_nat 0)) ^ (0::nat) = 1",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat 0)) ^ (0::nat) = 1"
                },
                {
                    "args": "(real_sgn x * exp (log (abs x) / of_nat n)) ^ n = 1",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = 1"
                },
                {
                    "args": "if_P, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "∀x. ∀y. ¬(x = 0) ⟶ x * (y / x) = y",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x. ∀y. ¬(x = 0) ⟶ x * (y / x) = y"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ ¬((of_nat::nat ⇒ real) n = of_nat 0)"
                },
                {
                    "args": "real_zero_def",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ ¬(of_nat n = (0::real))"
                },
                {
                    "args": "(of_nat::nat ⇒ real) n",
                    "id": "1.4",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "⊢ ∀y. ¬(of_nat n = (0::real)) ⟶ of_nat n * (y / of_nat n) = y"
                },
                {
                    "args": "log (abs x)",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "⊢ ¬(of_nat n = (0::real)) ⟶ of_nat n * (log (abs x) / of_nat n) = log (abs x)"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.5",
                        "1.3"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(n = 0) ⊢ of_nat n * (log (abs x) / of_nat n) = log (abs x)"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ x = 0 ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "x = 0",
                    "id": "1.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs 0)) = 0 * abs 0",
                    "id": "1.7.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs 0)) = 0 * abs 0"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else 0) * exp (log (abs 0)) = (if n = 0 then 1 else 0) * abs 0",
                    "id": "1.7.2",
                    "prevs": [
                        "1.7.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ (if n = 0 then 1 else 0) * exp (log (abs 0)) = (if n = 0 then 1 else 0) * abs 0"
                },
                {
                    "args": "real_pow_zero, 0 ^ n * exp (log (abs 0)) = 0 ^ n * abs 0",
                    "id": "1.7.3",
                    "prevs": [
                        "1.7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ 0 ^ n * exp (log (abs 0)) = 0 ^ n * abs 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 ^ n * exp (log (abs 0)) = real_sgn 0 ^ n * abs 0",
                    "id": "1.7.4",
                    "prevs": [
                        "1.7.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x = 0 ⊢ real_sgn 0 ^ n * exp (log (abs 0)) = real_sgn 0 ^ n * abs 0"
                },
                {
                    "args": "real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x",
                    "id": "1.7.5",
                    "prevs": [
                        "1.7.0",
                        "1.7.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.7.6",
                    "prevs": [
                        "1.7.0",
                        "1.7.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ x = 0 ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < abs x",
                    "id": "1.8.1",
                    "prevs": [
                        "1.8.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "exp_log",
                    "id": "1.8.2",
                    "prevs": [
                        "1.8.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(x = 0) ⊢ exp (log (abs x)) = abs x"
                },
                {
                    "args": "real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x",
                    "id": "1.8.3",
                    "prevs": [
                        "1.8.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), ¬(x = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "",
                    "id": "1.8.4",
                    "prevs": [
                        "1.8.0",
                        "1.8.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "classical_cases",
                    "id": "1.9",
                    "prevs": [
                        "1.7",
                        "1.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_sgn x ^ n * exp (of_nat n * (log (abs x) / of_nat n)) = real_sgn x ^ n * abs x",
                    "id": "1.10",
                    "prevs": [
                        "1.6",
                        "1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (of_nat n * (log (abs x) / of_nat n)) = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_exp_n, real_sgn x ^ n * exp (log (abs x) / of_nat n) ^ n = real_sgn x ^ n * abs x",
                    "id": "1.11",
                    "prevs": [
                        "1.10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0) ⊢ real_sgn x ^ n * exp (log (abs x) / of_nat n) ^ n = real_sgn x ^ n * abs x"
                },
                {
                    "args": "real_pow_mul, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = real_sgn x ^ n * abs x",
                    "id": "1.12",
                    "prevs": [
                        "1.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = real_sgn x ^ n * abs x"
                },
                {
                    "args": "if_not_P, (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "1.13",
                    "prevs": [
                        "1.12",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "1.14",
                    "prevs": [
                        "1.0",
                        "1.13"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (real_sgn x * exp (log (abs x) / of_nat n)) ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "root_def, root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)"
                }
            ],
            "prop": "root n x ^ n = (if n = 0 then 1 else real_sgn x ^ n * abs x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "case": "n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_mul"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal": "!x::real. !y. ~(x =0) --> x *(y/x) = y",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.4",
                    "method_name": "forall_elim",
                    "s": "(of_nat::nat ⇒ real) n"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "forall_elim",
                    "s": "log (abs x)"
                },
                {
                    "fact_ids": [
                        "1.5",
                        "1.3"
                    ],
                    "goal_id": "1.6",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.6"
                    ],
                    "goal_id": "1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.7",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.7.0"
                    ],
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_zero"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1.8",
                    "method_name": "introduction"
                },
                {
                    "goal": "exp (log (abs x)) = abs x",
                    "goal_id": "1.8.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "1.8.0"
                    ],
                    "goal_id": "1.8.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.8.2"
                    ],
                    "goal_id": "1.8.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "real_pow_root_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "odd n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "odd_exists",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "odd n ⊢ ∃m. n = Suc (2 * m)"
                },
                {
                    "args": "m, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = Suc (2 * m)",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = Suc (2 * m) ⊢ n = Suc (2 * m)"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: 2 * m}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc (2 * m))"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc (2 * m) = 0)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(Suc (2 * m) = 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), odd n ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd n, n = Suc (2 * m) ⊢ x = 0 ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "x = 0",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, (0::real) * abs 0 = 0",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) * abs 0 = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * real_sgn (abs 0) ^ m * abs 0 = 0",
                    "id": "7.2",
                    "prevs": [
                        "7.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), x = 0 ⊢ 0 * real_sgn (abs 0) ^ m * abs 0 = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * real_sgn (abs 0) ^ m * abs 0 = 0",
                    "id": "7.3",
                    "prevs": [
                        "7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), x = 0 ⊢ real_sgn 0 * real_sgn (abs 0) ^ m * abs 0 = 0"
                },
                {
                    "args": "real_sgn x * real_sgn (abs x) ^ m * abs x = x",
                    "id": "7.4",
                    "prevs": [
                        "7.0",
                        "7.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "7.5",
                    "prevs": [
                        "7.0",
                        "7.4"
                    ],
                    "rule": "intros",
                    "th": "odd n, n = Suc (2 * m) ⊢ x = 0 ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(x = 0) ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < abs x",
                    "id": "8.1",
                    "prevs": [
                        "8.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn (abs x) = 1",
                    "id": "8.2",
                    "prevs": [
                        "8.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn (abs x) = 1"
                },
                {
                    "args": "real_sgn_abs, real_sgn x * abs x = x",
                    "id": "8.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * abs x = x"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 * abs x = x",
                    "id": "8.4",
                    "prevs": [
                        "8.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * 1 * abs x = x"
                },
                {
                    "args": "real_pow_one, real_sgn x * 1 ^ m * abs x = x",
                    "id": "8.5",
                    "prevs": [
                        "8.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * 1 ^ m * abs x = x"
                },
                {
                    "args": "real_sgn x * real_sgn (abs x) ^ m * abs x = x",
                    "id": "8.6",
                    "prevs": [
                        "8.2",
                        "8.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "odd n, n = Suc (2 * m), ¬(x = 0) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "",
                    "id": "8.7",
                    "prevs": [
                        "8.0",
                        "8.6"
                    ],
                    "rule": "intros",
                    "th": "odd n, n = Suc (2 * m) ⊢ ¬(x = 0) ⟶ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "classical_cases",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (abs x) ^ m * abs x = x"
                },
                {
                    "args": "real_sgn_pow_2, real_sgn x * real_sgn (x ^ (2::nat)) ^ m * abs x = x",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn (x ^ (2::nat)) ^ m * abs x = x"
                },
                {
                    "args": "real_sgn_pow, real_sgn x * real_sgn x ^ (2::nat) ^ m * abs x = x",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn x ^ (2::nat) ^ m * abs x = x"
                },
                {
                    "args": "real_pow_pow, real_sgn x * real_sgn x ^ (2 * m) * abs x = x",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x * real_sgn x ^ (2 * m) * abs x = x"
                },
                {
                    "args": "real_nat_power_def_2, real_sgn x ^ Suc (2 * m) * abs x = x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ real_sgn x ^ Suc (2 * m) * abs x = x"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "14",
                    "prevs": [
                        "3",
                        "13"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), odd n ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn x ^ n * abs x) = x",
                    "id": "15",
                    "prevs": [
                        "14",
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = Suc (2 * m), odd n ⊢ (if n = 0 then 1 else real_sgn x ^ n * abs x) = x"
                },
                {
                    "args": "root_works_2, root n x ^ n = x",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, n = Suc (2 * m) ⊢ root n x ^ n = x"
                },
                {
                    "args": "∃m. n = Suc (2 * m)",
                    "id": "17",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "16"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd n ⟶ root n x ^ n = x"
                }
            ],
            "prop": "odd n ⟶ root n x ^ n = x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_exists"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "goal": "~(n = 0)",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_sgn_pow"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_pow_2"
                },
                {
                    "case": "x = 0",
                    "goal_id": "7",
                    "method_name": "cases"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn (abs x) = 1",
                    "goal_id": "8.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "8.0"
                    ],
                    "goal_id": "8.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "8.2"
                    ],
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "8.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_abs"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "real_pow_root_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = 0 ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "x = 0",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_rzero, (0::real) ^ n * 0 = 0",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) ^ n * 0 = 0"
                },
                {
                    "args": "real_abs_0, (0::real) ^ n * abs 0 = 0",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, x = 0 ⊢ (0::real) ^ n * abs 0 = 0"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 ^ n * abs 0 = 0",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, x = 0 ⊢ real_sgn 0 ^ n * abs 0 = 0"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = 0 ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "3.1",
                    "prevs": [
                        "1",
                        "3.0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ 0 < x"
                },
                {
                    "args": "real_sgn_eq_1, real_sgn x = 1",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ real_sgn x = 1"
                },
                {
                    "args": "abs x = x",
                    "id": "3.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x ⊢ abs x = x"
                },
                {
                    "args": "real_mul_lid, 1 * abs x = x",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ 1 * abs x = x"
                },
                {
                    "args": "real_pow_one, 1 ^ n * abs x = x",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ 1 ^ n * abs x = x"
                },
                {
                    "args": "real_sgn x ^ n * abs x = x",
                    "id": "3.6",
                    "prevs": [
                        "3.2",
                        "3.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 ≤ x, ¬(x = 0) ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ ¬(x = 0) ⟶ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "classical_cases",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 ≤ x ⊢ real_sgn x ^ n * abs x = x"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn x ^ n * abs x) = x",
                    "id": "5",
                    "prevs": [
                        "4",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x ⊢ (if n = 0 then 1 else real_sgn x ^ n * abs x) = x"
                },
                {
                    "args": "root_works_2, root n x ^ n = x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 ≤ x ⊢ root n x ^ n = x"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ x ⟶ root n x ^ n = x"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ x ⟶ root n x ^ n = x",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal": "real_sgn x = 1",
                    "goal_id": "3.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_1"
                },
                {
                    "fact_ids": [
                        "1",
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "(0::real) < (if 0 < x then 1 else if x < 0 then -1 else 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ (0::real) < (if 0 < x then 1 else if x < 0 then -1 else 0)"
                },
                {
                    "args": "real_sgn_def, 0 < real_sgn x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < real_sgn x"
                },
                {
                    "args": "real_exp_pos_lt, {x: log (abs x) / of_nat n}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "real_lt_mul",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ 0 < real_sgn x * exp (log (abs x) / of_nat n)"
                },
                {
                    "args": "root_def, 0 < root n x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                }
            ],
            "prop": "0 < x ⟶ 0 < root n x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_le_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "0 < x",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "root_pos_lt, {n: n, x: x}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "disjI1, {A: 0 < root n x, B: 0 = root n x}",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, 0 < x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "0 = x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "root_0, 0 = root n 0",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = root n 0"
                },
                {
                    "args": "0 = root n x",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, 0 ≤ x ⊢ 0 = root n x"
                },
                {
                    "args": "disjI2, {A: 0 < root n x, B: 0 = root n x}",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, 0 = x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "disjE",
                    "id": "4",
                    "prevs": [
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ 0 < root n x ∨ 0 = root n x"
                },
                {
                    "args": "real_le_lt, 0 ≤ root n x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ root n x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_lt_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < root n x ⟶ 0 < x"
                },
                {
                    "args": "0 < root n x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < root n x ⊢ 0 < root n x"
                },
                {
                    "args": "real_less_def",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 < root n x ⊢ ¬(root n x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < root n x ⊢ ¬¬(x ≤ 0) ⟶ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "¬¬(x ≤ 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(x ≤ 0) ⊢ ¬¬(x ≤ 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x ≤ 0) ⊢ x ≤ 0"
                },
                {
                    "args": "∀x::real. x ≤ 0 ⟷ 0 ≤ -x",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x ≤ 0 ⟷ 0 ≤ -x"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ -x"
                },
                {
                    "args": "root_pos_le, {n: n, x: -x}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ root n (-x)"
                },
                {
                    "args": "root_neg",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x ≤ 0) ⊢ 0 ≤ -(root n x)"
                },
                {
                    "args": "root n x ≤ 0",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.2",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < root n x, ¬¬(x ≤ 0) ⊢ root n x ≤ 0"
                },
                {
                    "args": "double_neg, ¬¬(root n x ≤ 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < root n x, ¬¬(x ≤ 0) ⊢ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 < root n x ⊢ ¬¬(x ≤ 0) ⟶ ¬¬(root n x ≤ 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < root n x ⊢ ¬(x ≤ 0)"
                },
                {
                    "args": "real_less_def, 0 < x",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < root n x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < root n x ⟶ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                },
                {
                    "args": "0 < x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "root_pos_lt, {n: n, x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < root n x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 < root n x ⟷ 0 < x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < root n x ⟷ 0 < x"
                }
            ],
            "prop": "0 < root n x ⟷ 0 < x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal": "!x::real. x ≤ 0 ⟷ 0 ≤ -x",
                    "goal_id": "0.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.2"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "root_pos_le"
                },
                {
                    "fact_ids": [
                        "0.2.4"
                    ],
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "root_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_le_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ root n x ⟶ 0 ≤ x"
                },
                {
                    "args": "0 ≤ root n x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ root n x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "real_not_lt",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "0 ≤ root n x ⊢ ¬(root n x < 0)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ root n x ⊢ ¬¬(x < 0) ⟶ ¬¬(root n x < 0)"
                },
                {
                    "args": "¬¬(x < 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(x < 0) ⊢ ¬¬(x < 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(x < 0) ⊢ x < 0"
                },
                {
                    "args": "∀x::real. x < 0 ⟷ 0 < -x",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. x < 0 ⟷ 0 < -x"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬¬(x < 0) ⊢ 0 < -x"
                },
                {
                    "args": "root_pos_lt, {n: n, x: -x}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬¬(x < 0) ⊢ 0 < root n (-x)"
                },
                {
                    "args": "root_neg, 0 < -(root n x)",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ 0 < -(root n x)"
                },
                {
                    "args": "root n x < 0",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.2",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ root n x < 0"
                },
                {
                    "args": "double_neg, ¬¬(root n x < 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ root n x, ¬¬(x < 0) ⊢ ¬¬(root n x < 0)"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ root n x ⊢ ¬¬(x < 0) ⟶ ¬¬(root n x < 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ root n x ⊢ ¬(x < 0)"
                },
                {
                    "args": "real_not_lt, 0 ≤ x",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ root n x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ root n x ⟶ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "root_pos_le, {n: n, x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x ⊢ 0 ≤ root n x"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ root n x"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 ≤ root n x ⟷ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ root n x ⟷ 0 ≤ x"
                }
            ],
            "prop": "0 ≤ root n x ⟷ 0 ≤ x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal": "∀x::real. x < 0 ⟷ 0 < -x",
                    "goal_id": "0.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2.2"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.2",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "root_neg"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_lt"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "root_eq_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ⟶ x = 0"
                },
                {
                    "args": "real_sgn x = 0",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "real_sgn x = 0 ⊢ real_sgn x = 0"
                },
                {
                    "args": "real_sgn_eq_0",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "real_sgn x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ real_sgn x = 0 ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "exp (log (abs x) / of_nat n) = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "exp (log (abs x) / of_nat n) = 0 ⊢ ¬¬(exp (log (abs x) / of_nat n) = 0)"
                },
                {
                    "args": "real_exp_nz, {x: log (abs x) / of_nat n}",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp (log (abs x) / of_nat n) = 0)"
                },
                {
                    "args": "negE_gen, {A: ¬(exp (log (abs x) / of_nat n) = 0), C: x = 0}",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.1",
                        "0.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "exp (log (abs x) / of_nat n) = 0, real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.0",
                        "0.2.3"
                    ],
                    "rule": "intros",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "x = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_sgn_eq_0, real_sgn x = 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ real_sgn x = 0"
                },
                {
                    "args": "disjI1, {A: real_sgn x = 0, B: exp (log (abs x) / of_nat n) = 0}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn x = 0 ∨ exp (log (abs x) / of_nat n) = 0 ⟷ x = 0"
                },
                {
                    "args": "real_entire, real_sgn x * exp (log (abs x) / of_nat n) = 0 ⟷ x = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * exp (log (abs x) / of_nat n) = 0 ⟷ x = 0"
                },
                {
                    "args": "root_def, root n x = 0 ⟷ x = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x = 0 ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n x = 0 ⟷ x = 0"
                }
            ],
            "prop": "root n x = 0 ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_sgn_eq_0"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_eq_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "real_root_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 = 0 * root n y",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 * root n y"
                },
                {
                    "args": "root_0, root n 0 = root n 0 * root n y",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ root n 0 = root n 0 * root n y"
                },
                {
                    "args": "real_mul_lzero, root n (0 * y) = root n 0 * root n y",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ root n (0 * y) = root n 0 * root n y"
                },
                {
                    "args": "root n (x * y) = root n x * root n y",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0 ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ y = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "y = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "real_mul_rzero, 0 = root n x * 0",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = root n x * 0"
                },
                {
                    "args": "root_0, root n 0 = root n x * root n 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), y = 0 ⊢ root n 0 = root n x * root n 0"
                },
                {
                    "args": "real_mul_rzero, root n (x * 0) = root n x * root n 0",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), y = 0 ⊢ root n (x * 0) = root n x * root n 0"
                },
                {
                    "args": "root n (x * y) = root n x * root n y",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y = 0, ¬(x = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ y = 0 ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(y = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "∀x::real. ¬(x = 0) ⟷ 0 < abs x",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. ¬(x = 0) ⟷ 0 < abs x"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1",
                        "1.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(y = 0) ⊢ 0 < abs y"
                },
                {
                    "args": "log_mul, {x: abs x, y: abs y}",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ log (abs x * abs y) = log (abs x) + log (abs y)"
                },
                {
                    "args": "real_sgn x * real_sgn y * (exp (log (abs x) * real_inverse (of_nat n)) * exp (log (abs y) * real_inverse (of_nat n))) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.5",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ real_sgn x * real_sgn y * (exp (log (abs x) * real_inverse (of_nat n)) * exp (log (abs y) * real_inverse (of_nat n))) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_exp_add, real_sgn x * real_sgn y * exp (log (abs x) * real_inverse (of_nat n) + log (abs y) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs x) * real_inverse (of_nat n) + log (abs y) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_add_rdistrib, real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) * real_inverse (of_nat n)) = real_sgn x * exp (log (abs x) * real_inverse (of_nat n)) * (real_sgn y * exp (log (abs y) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_divide_def, real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp ((log (abs x) + log (abs y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_sgn x * real_sgn y * exp (log (abs x * abs y) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.4",
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs x * abs y) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_abs_mul, real_sgn x * real_sgn y * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn x * real_sgn y * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "real_sgn_mul, real_sgn (x * y) * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ real_sgn (x * y) * exp (log (abs (x * y)) / of_nat n) = real_sgn x * exp (log (abs x) / of_nat n) * (real_sgn y * exp (log (abs y) / of_nat n))"
                },
                {
                    "args": "root_def, root n (x * y) = root n x * root n y",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(y = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.2.13",
                    "prevs": [
                        "1.2.0",
                        "1.2.12"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(y = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ root n (x * y) = root n x * root n y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (x * y) = root n x * root n y"
                }
            ],
            "prop": "root n (x * y) = root n x * root n y",
            "steps": [
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "y = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_mul"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_mul"
                },
                {
                    "goal": "!x::real. ~(x = 0) <--> 0 < abs x",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1",
                        "1.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1",
                        "1.2.0"
                    ],
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_root_pow_gen",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "root_1, root n 1 = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 1 = 1"
                },
                {
                    "args": "real_nat_power_def_1, root n (x ^ (0::nat)) = root n x ^ (0::nat)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (x ^ (0::nat)) = root n x ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n1. root n (x ^ n1) = root n x ^ n1 ⟶ root n (x ^ Suc n1) = root n x ^ Suc n1"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "root n (x ^ n) = root n x ^ n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "root n (x ^ n) = root n x ^ n ⊢ root n (x ^ n) = root n x ^ n"
                },
                {
                    "args": "root n x * root n (x ^ n) = root n x * root n x ^ n",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "root n (x ^ n) = root n x ^ n ⊢ root n x * root n (x ^ n) = root n x * root n x ^ n"
                },
                {
                    "args": "real_root_mul, root n (x * x ^ n) = root n x * root n x ^ n",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "root n (x ^ n) = root n x ^ n ⊢ root n (x * x ^ n) = root n x * root n x ^ n"
                },
                {
                    "args": "real_nat_power_def_2, root n (x ^ Suc n) = root n x ^ Suc n",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "root n (x ^ n) = root n x ^ n ⊢ root n (x ^ Suc n) = root n x ^ Suc n"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. root n (x ^ n) = root n x ^ n ⟶ root n (x ^ Suc n) = root n x ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λm::nat. root n (x ^ m) = root n x ^ m, x: m}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ root n (x ^ m) = root n x ^ m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (x ^ m) = root n x ^ m"
                }
            ],
            "prop": "root n (x ^ m) = root n x ^ m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_root_mul"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_root_pow1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "odd n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "real_pow_root_1, {n: n, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd n ⊢ root n x ^ n = x"
                },
                {
                    "args": "real_root_pow_gen, root n (x ^ n) = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n ⊢ root n (x ^ n) = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd n ⟶ root n (x ^ n) = x"
                }
            ],
            "prop": "odd n ⟶ root n (x ^ n) = x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_root_pow_gen"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pow_root_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_root_pow2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_pow_root_2",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, ¬(n = 0) ⊢ root n x ^ n = x"
                },
                {
                    "args": "real_root_pow_gen, root n (x ^ n) = x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(n = 0) ⊢ root n (x ^ n) = x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ x ⟶ root n (x ^ n) = x"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ x ⟶ root n (x ^ n) = x",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_root_pow_gen"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pow_root_2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "root_unique",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "y ^ n = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ^ n = x ⊢ y ^ n = x"
                },
                {
                    "args": "odd n ∨ ¬(n = 0) ∧ 0 ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ odd n ∨ ¬(n = 0) ∧ 0 ≤ y"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "y ^ n = x ⊢ x = y ^ n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ odd n ⟶ root n (y ^ n) = y"
                },
                {
                    "args": "odd n",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "real_root_pow1, {n: n, x: y}",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd n, y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ root n (y ^ n) = y"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ odd n ⟶ root n (y ^ n) = y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ ¬(n = 0) ∧ 0 ≤ y ⟶ root n (y ^ n) = y"
                },
                {
                    "args": "¬(n = 0) ∧ 0 ≤ y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ∧ 0 ≤ y ⊢ ¬(n = 0) ∧ 0 ≤ y"
                },
                {
                    "args": "conjD1",
                    "id": "4.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ∧ 0 ≤ y ⊢ ¬(n = 0)"
                },
                {
                    "args": "conjD2",
                    "id": "4.2",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ∧ 0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "real_root_pow2",
                    "id": "4.3",
                    "prevs": [
                        "4.1",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "y ^ n = x, ¬(n = 0) ∧ 0 ≤ y, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ root n (y ^ n) = y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ ¬(n = 0) ∧ 0 ≤ y ⟶ root n (y ^ n) = y"
                },
                {
                    "args": "disjE",
                    "id": "5",
                    "prevs": [
                        "1",
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ root n (y ^ n) = y"
                },
                {
                    "args": "root n x = y",
                    "id": "6",
                    "prevs": [
                        "2",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y ^ n = x, odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⊢ root n x = y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ y ^ n = x ⟶ odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⟶ root n x = y"
                }
            ],
            "prop": "y ^ n = x ⟶ odd n ∨ ¬(n = 0) ∧ 0 ≤ y ⟶ root n x = y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_root_pow1"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_root_pow2"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_root_inv",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * exp (log (abs (real_inverse 0)) / of_nat n) = 0 * real_inverse (exp (log (abs 0) / of_nat n))",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * exp (log (abs (real_inverse 0)) / of_nat n) = 0 * real_inverse (exp (log (abs 0) / of_nat n))"
                },
                {
                    "args": "real_sgn_0, real_sgn 0 * exp (log (abs (real_inverse 0)) / of_nat n) = real_sgn 0 * real_inverse (exp (log (abs 0) / of_nat n))",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ real_sgn 0 * exp (log (abs (real_inverse 0)) / of_nat n) = real_sgn 0 * real_inverse (exp (log (abs 0) / of_nat n))"
                },
                {
                    "args": "real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0 ⊢ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "real_abs_nz, {x: x}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "log_inv, {x: abs x}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0) ⊢ log (real_inverse (abs x)) = -(log (abs x))"
                },
                {
                    "args": "real_mul_lneg, real_sgn x * exp (-(log (abs x)) * real_inverse (of_nat n)) = real_sgn x * exp (-(log (abs x) * real_inverse (of_nat n)))",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * exp (-(log (abs x)) * real_inverse (of_nat n)) = real_sgn x * exp (-(log (abs x) * real_inverse (of_nat n)))"
                },
                {
                    "args": "real_divide_def, real_sgn x * exp (-(log (abs x)) / of_nat n) = real_sgn x * exp (-(log (abs x) / of_nat n))",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0) ⊢ real_sgn x * exp (-(log (abs x)) / of_nat n) = real_sgn x * exp (-(log (abs x) / of_nat n))"
                },
                {
                    "args": "real_exp_neg, real_sgn x * exp (-(log (abs x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(x = 0) ⊢ real_sgn x * exp (-(log (abs x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_sgn x * exp (log (real_inverse (abs x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))",
                    "id": "1.6",
                    "prevs": [
                        "1.2",
                        "1.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0) ⊢ real_sgn x * exp (log (real_inverse (abs x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_abs_inv, real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))",
                    "id": "1.7",
                    "prevs": [
                        "1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0) ⊢ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [
                        "1.0",
                        "1.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_sgn x * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_inv_sgn, real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_inverse (real_sgn x) * real_inverse (exp (log (abs x) / of_nat n))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_inverse (real_sgn x) * real_inverse (exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_inv_mul, real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_inverse (real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn x * exp (log (abs (real_inverse x)) / of_nat n) = real_inverse (real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "real_sgn_inv, real_sgn (real_inverse x) * exp (log (abs (real_inverse x)) / of_nat n) = real_inverse (real_sgn x * exp (log (abs x) / of_nat n))",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_sgn (real_inverse x) * exp (log (abs (real_inverse x)) / of_nat n) = real_inverse (real_sgn x * exp (log (abs x) / of_nat n))"
                },
                {
                    "args": "root_def, root n (real_inverse x) = real_inverse (root n x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (real_inverse x) = real_inverse (root n x)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (real_inverse x) = real_inverse (root n x)"
                }
            ],
            "prop": "root n (real_inverse x) = real_inverse (root n x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_inv"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_sgn"
                },
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_0"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_inv"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "real_abs_nz"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "log_inv"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_root_div",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_root_inv, root n x * root n (real_inverse y) = root n x * real_inverse (root n y)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n x * root n (real_inverse y) = root n x * real_inverse (root n y)"
                },
                {
                    "args": "real_root_mul, root n (x * real_inverse y) = root n x * real_inverse (root n y)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (x * real_inverse y) = root n x * real_inverse (root n y)"
                },
                {
                    "args": "real_divide_def, root n (x / y) = root n x / root n y",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n (x / y) = root n x / root n y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ root n (x / y) = root n x / root n y"
                }
            ],
            "prop": "root n (x / y) = root n x / root n y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_root_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_root_inv"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "root_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "x < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y ⊢ ∀x. ∀y. 0 ≤ x ⟶ x < y ⟶ root n x < root n y"
                },
                {
                    "args": "a, real",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "b, real",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "0 ≤ a",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ a ⊢ 0 ≤ a"
                },
                {
                    "args": "a < b",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a < b ⊢ a < b"
                },
                {
                    "args": "0 ≤ b",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.3"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ a, a < b ⊢ 0 ≤ b"
                },
                {
                    "args": "root_pos_le, {n: n, x: b}",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ 0 ≤ root n b"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ 0 < a ⟶ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "0 < a",
                    "id": "2.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < a ⊢ 0 < a"
                },
                {
                    "args": "real_lt_trans, {x: (0::real), y: a, z: b}",
                    "id": "2.6.1",
                    "prevs": [
                        "2.6.0",
                        "2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < a, a < b ⊢ 0 < b"
                },
                {
                    "args": "abs a < abs b",
                    "id": "2.6.2",
                    "prevs": [
                        "2.6.0",
                        "2.3"
                    ],
                    "rule": "z3",
                    "th": "0 < a, a < b ⊢ abs a < abs b"
                },
                {
                    "args": "real_mul_lid, 1 * abs a < 1 * abs b",
                    "id": "2.6.3",
                    "prevs": [
                        "2.6.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, 0 < a ⊢ 1 * abs a < 1 * abs b"
                },
                {
                    "args": "real_pow_one, 1 ^ n * abs a < 1 ^ n * abs b",
                    "id": "2.6.4",
                    "prevs": [
                        "2.6.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, 0 < a ⊢ 1 ^ n * abs a < 1 ^ n * abs b"
                },
                {
                    "args": "if_P, 1 ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b",
                    "id": "2.6.5",
                    "prevs": [
                        "2.6.4",
                        "2.6.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, 0 < a, 0 < a, a < b ⊢ 1 ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "if_P, (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b",
                    "id": "2.6.6",
                    "prevs": [
                        "2.6.5",
                        "2.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, 0 < a, 0 < a ⊢ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "",
                    "id": "2.6.7",
                    "prevs": [
                        "2.6.0",
                        "2.6.6"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ 0 < a ⟶ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ ¬(0 < a) ⟶ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "¬(0 < a)",
                    "id": "2.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < a) ⊢ ¬(0 < a)"
                },
                {
                    "args": "",
                    "id": "2.7.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a) ⊢ a < 0 ⟶ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "a < 0",
                    "id": "2.7.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a < 0 ⊢ a < 0"
                },
                {
                    "args": "(if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b",
                    "id": "2.7.1.1",
                    "prevs": [
                        "2.7.1.0",
                        "2.2"
                    ],
                    "rule": "z3",
                    "th": "a < 0, 0 ≤ a ⊢ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "",
                    "id": "2.7.1.2",
                    "prevs": [
                        "2.7.1.0",
                        "2.7.1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a) ⊢ a < 0 ⟶ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "",
                    "id": "2.7.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a) ⊢ ¬(a < 0) ⟶ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "¬(a < 0)",
                    "id": "2.7.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(a < 0) ⊢ ¬(a < 0)"
                },
                {
                    "args": "real_let_trans, {x: (0::real), y: a, z: b}",
                    "id": "2.7.2.1",
                    "prevs": [
                        "2.2",
                        "2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ a, a < b ⊢ 0 < b"
                },
                {
                    "args": "0 < abs b",
                    "id": "2.7.2.2",
                    "prevs": [
                        "2.7.2.1"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ a, a < b ⊢ 0 < abs b"
                },
                {
                    "args": "real_mul_lid, 0 < 1 * abs b",
                    "id": "2.7.2.3",
                    "prevs": [
                        "2.7.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0) ⊢ 0 < 1 * abs b"
                },
                {
                    "args": "real_pow_one, 0 < 1 ^ n * abs b",
                    "id": "2.7.2.4",
                    "prevs": [
                        "2.7.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0) ⊢ 0 < 1 ^ n * abs b"
                },
                {
                    "args": "real_mul_lzero, 0 * abs a < 1 ^ n * abs b",
                    "id": "2.7.2.5",
                    "prevs": [
                        "2.7.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0) ⊢ 0 * abs a < 1 ^ n * abs b"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else 0) * abs a < 1 ^ n * abs b",
                    "id": "2.7.2.6",
                    "prevs": [
                        "2.7.2.5",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0), ¬(n = 0) ⊢ (if n = 0 then 1 else 0) * abs a < 1 ^ n * abs b"
                },
                {
                    "args": "real_pow_zero, 0 ^ n * abs a < 1 ^ n * abs b",
                    "id": "2.7.2.7",
                    "prevs": [
                        "2.7.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0) ⊢ 0 ^ n * abs a < 1 ^ n * abs b"
                },
                {
                    "args": "if_P, 0 ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b",
                    "id": "2.7.2.8",
                    "prevs": [
                        "2.7.2.7",
                        "2.7.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0), 0 ≤ a, a < b ⊢ 0 ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "if_not_P, (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b",
                    "id": "2.7.2.9",
                    "prevs": [
                        "2.7.2.8",
                        "2.7.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(a < 0), ¬(a < 0) ⊢ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "",
                    "id": "2.7.2.10",
                    "prevs": [
                        "2.7.2.0",
                        "2.7.2.9"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a) ⊢ ¬(a < 0) ⟶ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "classical_cases",
                    "id": "2.7.3",
                    "prevs": [
                        "2.7.1",
                        "2.7.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a) ⊢ (if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "if_not_P, (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b",
                    "id": "2.7.4",
                    "prevs": [
                        "2.7.3",
                        "2.7.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(0 < a), ¬(0 < a) ⊢ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "",
                    "id": "2.7.5",
                    "prevs": [
                        "2.7.0",
                        "2.7.4"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ ¬(0 < a) ⟶ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "classical_cases",
                    "id": "2.8",
                    "prevs": [
                        "2.6",
                        "2.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(n = 0), x < y, 0 ≤ a, a < b ⊢ (if 0 < a then 1 else if a < 0 then -1 else 0) ^ n * abs a < (if 0 < b then 1 else if b < 0 then -1 else 0) ^ n * abs b"
                },
                {
                    "args": "real_sgn_def, real_sgn a ^ n * abs a < real_sgn b ^ n * abs b",
                    "id": "2.9",
                    "prevs": [
                        "2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ real_sgn a ^ n * abs a < real_sgn b ^ n * abs b"
                },
                {
                    "args": "if_not_P, (if n = 0 then 1 else real_sgn a ^ n * abs a) < (if n = 0 then 1 else real_sgn b ^ n * abs b)",
                    "id": "2.10",
                    "prevs": [
                        "2.9",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(n = 0) ⊢ (if n = 0 then 1 else real_sgn a ^ n * abs a) < (if n = 0 then 1 else real_sgn b ^ n * abs b)"
                },
                {
                    "args": "root_works_2, root n a ^ n < root n b ^ n",
                    "id": "2.11",
                    "prevs": [
                        "2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b ⊢ root n a ^ n < root n b ^ n"
                },
                {
                    "args": "real_pow_lt2_rev",
                    "id": "2.12",
                    "prevs": [
                        "2.5",
                        "2.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, 0 ≤ a, a < b, ¬(n = 0), x < y, 0 ≤ a, a < b ⊢ root n a < root n b"
                },
                {
                    "args": "",
                    "id": "2.13",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.3",
                        "2.12"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y ⊢ ∀a. ∀b. 0 ≤ a ⟶ a < b ⟶ root n a < root n b"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y ⊢ 0 ≤ x ⟶ root n x < root n y"
                },
                {
                    "args": "0 ≤ x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x, y",
                    "id": "3.1",
                    "prevs": [
                        "2",
                        "3.0",
                        "1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(n = 0), x < y, 0 ≤ x ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [
                        "3.0",
                        "3.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y ⊢ 0 ≤ x ⟶ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y ⊢ ¬(0 ≤ x) ⟶ root n x < root n y"
                },
                {
                    "args": "¬(0 ≤ x)",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ x) ⊢ ¬(0 ≤ x)"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x) ⊢ 0 ≤ y ⟶ root n x < root n y"
                },
                {
                    "args": "0 ≤ y",
                    "id": "4.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "root_le_0, ¬(0 ≤ root n x)",
                    "id": "4.1.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), 0 ≤ y ⊢ ¬(0 ≤ root n x)"
                },
                {
                    "args": "real_less_def, root n x < 0",
                    "id": "4.1.2",
                    "prevs": [
                        "4.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), 0 ≤ y ⊢ root n x < 0"
                },
                {
                    "args": "root_le_0, 0 ≤ root n y",
                    "id": "4.1.3",
                    "prevs": [
                        "4.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), 0 ≤ y ⊢ 0 ≤ root n y"
                },
                {
                    "args": "real_lte_trans",
                    "id": "4.1.4",
                    "prevs": [
                        "4.1.2",
                        "4.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), 0 ≤ y, ¬(n = 0), x < y, ¬(0 ≤ x), 0 ≤ y ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "4.1.5",
                    "prevs": [
                        "4.1.0",
                        "4.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x) ⊢ 0 ≤ y ⟶ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x) ⊢ ¬(0 ≤ y) ⟶ root n x < root n y"
                },
                {
                    "args": "¬(0 ≤ y)",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ y) ⊢ ¬(0 ≤ y)"
                },
                {
                    "args": "0 ≤ -y",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 ≤ y) ⊢ 0 ≤ -y"
                },
                {
                    "args": "real_lt_neg2, -y < -x",
                    "id": "4.2.2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), ¬(0 ≤ y) ⊢ -y < -x"
                },
                {
                    "args": "-y, -x",
                    "id": "4.2.3",
                    "prevs": [
                        "2",
                        "4.2.1",
                        "4.2.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), ¬(0 ≤ y) ⊢ root n (-y) < root n (-x)"
                },
                {
                    "args": "root_neg, -(root n y) < -(root n x)",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), ¬(0 ≤ y) ⊢ -(root n y) < -(root n x)"
                },
                {
                    "args": "real_lt_neg2, root n x < root n y",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), ¬(0 ≤ y) ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "4.2.6",
                    "prevs": [
                        "4.2.0",
                        "4.2.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x) ⊢ ¬(0 ≤ y) ⟶ root n x < root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "4.3",
                    "prevs": [
                        "4.1",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, ¬(0 ≤ x), ¬(n = 0), x < y, ¬(0 ≤ x) ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), x < y ⊢ ¬(0 ≤ x) ⟶ root n x < root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, ¬(n = 0), x < y ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ x < y ⟶ root n x < root n y"
                }
            ],
            "prop": "¬(n = 0) ⟶ x < y ⟶ root n x < root n y",
            "steps": [
                {
                    "goal": "!x. !y. 0 <= x --> x < y --> root n x < root n y",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "a, b"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "apply_backward_step",
                    "param_n": "n",
                    "theorem": "real_pow_lt2_rev"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "root_pos_le"
                },
                {
                    "fact_ids": [
                        "2.2",
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_works_2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "2.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "case": "0 < a",
                    "goal_id": "2.6",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.6.0"
                    ],
                    "goal_id": "2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2.6.0",
                        "2.3"
                    ],
                    "goal_id": "2.6.1",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lt_trans"
                },
                {
                    "fact_ids": [
                        "2.6.1"
                    ],
                    "goal_id": "2.6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "2.6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "2.6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "2.6.0",
                        "2.3"
                    ],
                    "goal_id": "2.6.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2.7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.7.0"
                    ],
                    "goal_id": "2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "a < 0",
                    "goal_id": "2.7.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2.7.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.7.1.0",
                        "2.2"
                    ],
                    "goal_id": "2.7.1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2.7.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.7.2.0"
                    ],
                    "goal_id": "2.7.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "2.2",
                        "2.3"
                    ],
                    "goal_id": "2.7.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "real_let_trans"
                },
                {
                    "fact_ids": [
                        "2.7.2.1"
                    ],
                    "goal_id": "2.7.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "2.7.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_zero"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.7.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "2.7.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "2.7.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_one"
                },
                {
                    "goal_id": "2.7.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "2.7.2.1"
                    ],
                    "goal_id": "2.7.2.2",
                    "method_name": "z3"
                },
                {
                    "case": "0 <= x",
                    "goal_id": "3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3.1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "case": "0 <= y",
                    "goal_id": "4.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "param_y": "(0::real)",
                    "theorem": "real_lte_trans"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_le_0"
                },
                {
                    "goal_id": "4.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_le_0"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_lt_neg2"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "root_neg"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_lt_neg2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x ≤ y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y ⊢ n = 0 ⟶ root n x ≤ root n y"
                },
                {
                    "args": "n = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "(if 0 < x then (1::real) else if x < 0 then -1 else 0) ≤ (if 0 < y then 1 else if y < 0 then -1 else 0)",
                    "id": "1.1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "x ≤ y ⊢ (if 0 < x then (1::real) else if x < 0 then -1 else 0) ≤ (if 0 < y then 1 else if y < 0 then -1 else 0)"
                },
                {
                    "args": "real_sgn_def, real_sgn x ≤ real_sgn y",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x ≤ real_sgn y"
                },
                {
                    "args": "real_mul_rid, real_sgn x * 1 ≤ real_sgn y * 1",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x * 1 ≤ real_sgn y * 1"
                },
                {
                    "args": "real_exp_0, real_sgn x * exp 0 ≤ real_sgn y * exp 0",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x * exp 0 ≤ real_sgn y * exp 0"
                },
                {
                    "args": "real_mul_rzero, real_sgn x * exp (log (abs x) * 0) ≤ real_sgn y * exp (log (abs y) * 0)",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x * exp (log (abs x) * 0) ≤ real_sgn y * exp (log (abs y) * 0)"
                },
                {
                    "args": "real_inv_0, real_sgn x * exp (log (abs x) * real_inverse 0) ≤ real_sgn y * exp (log (abs y) * real_inverse 0)",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x * exp (log (abs x) * real_inverse 0) ≤ real_sgn y * exp (log (abs y) * real_inverse 0)"
                },
                {
                    "args": "real_divide_def, real_sgn x * exp (log (abs x) / 0) ≤ real_sgn y * exp (log (abs y) / 0)",
                    "id": "1.7",
                    "prevs": [
                        "1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x * exp (log (abs x) / 0) ≤ real_sgn y * exp (log (abs y) / 0)"
                },
                {
                    "args": "real_zero_def, real_sgn x * exp (log (abs x) / of_nat 0) ≤ real_sgn y * exp (log (abs y) / of_nat 0)",
                    "id": "1.8",
                    "prevs": [
                        "1.7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "x ≤ y, n = 0 ⊢ real_sgn x * exp (log (abs x) / of_nat 0) ≤ real_sgn y * exp (log (abs y) / of_nat 0)"
                },
                {
                    "args": "root_def, root 0 x ≤ root 0 y",
                    "id": "1.9",
                    "prevs": [
                        "1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, n = 0 ⊢ root 0 x ≤ root 0 y"
                },
                {
                    "args": "root n x ≤ root n y",
                    "id": "1.10",
                    "prevs": [
                        "1.0",
                        "1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, x ≤ y ⊢ root n x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "1.11",
                    "prevs": [
                        "1.0",
                        "1.10"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y ⊢ n = 0 ⟶ root n x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y ⊢ ¬(n = 0) ⟶ root n x ≤ root n y"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "real_le_lt",
                    "id": "2.1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ≤ y ⊢ x < y ∨ x = y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y, ¬(n = 0) ⊢ x < y ⟶ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "x < y",
                    "id": "2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "root_mono_lt",
                    "id": "2.2.1",
                    "prevs": [
                        "2.0",
                        "2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, ¬(n = 0), x < y, x ≤ y, ¬(n = 0), x < y ⊢ root n x < root n y"
                },
                {
                    "args": "disjI1, {A: root n x < root n y, B: root n x = root n y}",
                    "id": "2.2.2",
                    "prevs": [
                        "2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≤ y, ¬(n = 0), x < y ⊢ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "",
                    "id": "2.2.3",
                    "prevs": [
                        "2.2.0",
                        "2.2.2"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y, ¬(n = 0) ⊢ x < y ⟶ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y, ¬(n = 0) ⊢ x = y ⟶ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "x = y",
                    "id": "2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "root n x = root n y",
                    "id": "2.3.1",
                    "prevs": [
                        "2.3.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ root n x = root n y"
                },
                {
                    "args": "disjI2, {A: root n x < root n y, B: root n x = root n y}",
                    "id": "2.3.2",
                    "prevs": [
                        "2.3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≤ y, ¬(n = 0), x = y ⊢ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "",
                    "id": "2.3.3",
                    "prevs": [
                        "2.3.0",
                        "2.3.2"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y, ¬(n = 0) ⊢ x = y ⟶ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "disjE",
                    "id": "2.4",
                    "prevs": [
                        "2.1",
                        "2.2",
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, x ≤ y, ¬(n = 0), x ≤ y, ¬(n = 0) ⊢ root n x < root n y ∨ root n x = root n y"
                },
                {
                    "args": "real_le_lt, root n x ≤ root n y",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, ¬(n = 0) ⊢ root n x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y ⊢ ¬(n = 0) ⟶ root n x ≤ root n y"
                },
                {
                    "args": "classical_cases",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, x ≤ y ⊢ root n x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≤ y ⟶ root n x ≤ root n y"
                }
            ],
            "prop": "x ≤ y ⟶ root n x ≤ root n y",
            "steps": [
                {
                    "case": "n = 0",
                    "goal_id": "1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_0"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rid"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_lt"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "2.3.0"
                    ],
                    "goal_id": "2.3.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_mono_lt_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ root n x < root n y ⟶ x < y"
                },
                {
                    "args": "root n x < root n y",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "root n x < root n y ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), root n x < root n y ⊢ y ≤ x ⟶ root n y ≤ root n x"
                },
                {
                    "args": "y ≤ x",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ x ⊢ y ≤ x"
                },
                {
                    "args": "root_mono_le, {n: n, x: y, y: x}",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), root n x < root n y, y ≤ x ⊢ root n y ≤ root n x"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), root n x < root n y ⊢ y ≤ x ⟶ root n y ≤ root n x"
                },
                {
                    "args": "real_not_lt, ¬(x < y) ⟶ ¬(root n x < root n y)",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), root n x < root n y ⊢ ¬(x < y) ⟶ ¬(root n x < root n y)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "root n x < root n y, ¬(n = 0), root n x < root n y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ root n x < root n y ⟶ x < y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ x < y ⟶ root n x < root n y"
                },
                {
                    "args": "x < y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "root_mono_lt",
                    "id": "2.1",
                    "prevs": [
                        "0",
                        "2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), x < y, ¬(n = 0), x < y ⊢ root n x < root n y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ x < y ⟶ root n x < root n y"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(n = 0) ⊢ root n x < root n y ⟷ x < y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ root n x < root n y ⟷ x < y"
                }
            ],
            "prop": "¬(n = 0) ⟶ root n x < root n y ⟷ x < y",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_le"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_mono_le_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ root n x ≤ root n y ⟶ x ≤ y"
                },
                {
                    "args": "root n x ≤ root n y",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "root n x ≤ root n y ⊢ root n x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), root n x ≤ root n y ⊢ y < x ⟶ root n y < root n x"
                },
                {
                    "args": "y < x",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y < x ⊢ y < x"
                },
                {
                    "args": "root_mono_lt",
                    "id": "1.1.1",
                    "prevs": [
                        "0",
                        "1.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), root n x ≤ root n y, y < x, ¬(n = 0), root n x ≤ root n y, y < x ⊢ root n y < root n x"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), root n x ≤ root n y ⊢ y < x ⟶ root n y < root n x"
                },
                {
                    "args": "double_neg, ¬¬(y < x) ⟶ ¬¬(root n y < root n x)",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), root n x ≤ root n y ⊢ ¬¬(y < x) ⟶ ¬¬(root n y < root n x)"
                },
                {
                    "args": "real_not_lt, ¬(x ≤ y) ⟶ ¬(root n x ≤ root n y)",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0), root n x ≤ root n y ⊢ ¬(x ≤ y) ⟶ ¬(root n x ≤ root n y)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "root n x ≤ root n y, ¬(n = 0), root n x ≤ root n y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ root n x ≤ root n y ⟶ x ≤ y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ x ≤ y ⟶ root n x ≤ root n y"
                },
                {
                    "args": "x ≤ y",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "root_mono_le, {n: n, x: x, y: y}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), x ≤ y ⊢ root n x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ x ≤ y ⟶ root n x ≤ root n y"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(n = 0) ⊢ root n x ≤ root n y ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ root n x ≤ root n y ⟷ x ≤ y"
                }
            ],
            "prop": "¬(n = 0) ⟶ root n x ≤ root n y ⟷ x ≤ y",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_lt"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "root_mono_le_eq, {n: n, x: x, y: y}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ root n x ≤ root n y ⟷ x ≤ y"
                },
                {
                    "args": "root_mono_le_eq, {n: n, x: y, y: x}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ root n y ≤ root n x ⟷ y ≤ x"
                },
                {
                    "args": "x ≤ y ∧ root n y ≤ root n x ⟷ x ≤ y ∧ y ≤ x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ x ≤ y ∧ root n y ≤ root n x ⟷ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "root n x ≤ root n y ∧ root n y ≤ root n x ⟷ x ≤ y ∧ y ≤ x",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ root n x ≤ root n y ∧ root n y ≤ root n x ⟷ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "real_le_antisym, root n x = root n y ⟷ x = y",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0) ⊢ root n x = root n y ⟷ x = y"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ root n x = root n y ⟷ x = y"
                }
            ],
            "prop": "¬(n = 0) ⟶ root n x = root n y ⟷ x = y",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "param_y": "y",
                    "theorem": "root_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "y",
                    "param_y": "x",
                    "theorem": "root_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_root_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "real_root_pow2, {n: n, x: y}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), 0 ≤ y ⊢ root n (y ^ n) = y"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(n = 0), 0 ≤ y ⊢ y = root n (y ^ n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ y ⊢ root n x ≤ y ⟶ x ≤ y ^ n"
                },
                {
                    "args": "root n x ≤ y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "root n x ≤ y ⊢ root n x ≤ y"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [
                        "3",
                        "4.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(n = 0), 0 ≤ y, root n x ≤ y ⊢ root n x ≤ root n (y ^ n)"
                },
                {
                    "args": "root_mono_le_eq, {n: n, x: x, y: y ^ n}",
                    "id": "4.2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ root n x ≤ root n (y ^ n) ⟷ x ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "4.2",
                        "4.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(n = 0), 0 ≤ y, root n x ≤ y ⊢ x ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ y ⊢ root n x ≤ y ⟶ x ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ y ⊢ x ≤ y ^ n ⟶ root n x ≤ y"
                },
                {
                    "args": "x ≤ y ^ n",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ^ n ⊢ x ≤ y ^ n"
                },
                {
                    "args": "root_mono_le, {n: n, x: x, y: y ^ n}",
                    "id": "5.1",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), 0 ≤ y, x ≤ y ^ n ⊢ root n x ≤ root n (y ^ n)"
                },
                {
                    "args": "root n x ≤ y",
                    "id": "5.2",
                    "prevs": [
                        "3",
                        "5.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 ≤ y, x ≤ y ^ n ⊢ root n x ≤ y"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [
                        "5.0",
                        "5.2"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ y ⊢ x ≤ y ^ n ⟶ root n x ≤ y"
                },
                {
                    "args": "iffI",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 ≤ y, ¬(n = 0), 0 ≤ y ⊢ root n x ≤ y ⟷ x ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ y ⟶ root n x ≤ y ⟷ x ≤ y ^ n"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ y ⟶ root n x ≤ y ⟷ x ≤ y ^ n",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_root_pow2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3",
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "4.2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "param_y": "y ^ n",
                    "theorem": "root_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "4.2",
                        "4.1"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_le_root",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_root_pow2, {n: n, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), 0 ≤ x ⊢ root n (x ^ n) = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x = root n (x ^ n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x ≤ root n y ⟶ x ^ n ≤ y"
                },
                {
                    "args": "x ≤ root n y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ root n y ⊢ x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [
                        "3",
                        "4.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(n = 0), 0 ≤ x, x ≤ root n y ⊢ root n (x ^ n) ≤ root n y"
                },
                {
                    "args": "root_mono_le_eq, {n: n, x: x ^ n, y: y}",
                    "id": "4.2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ root n (x ^ n) ≤ root n y ⟷ x ^ n ≤ y"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "4.2",
                        "4.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(n = 0), 0 ≤ x, x ≤ root n y ⊢ x ^ n ≤ y"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x ≤ root n y ⟶ x ^ n ≤ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x ^ n ≤ y ⟶ x ≤ root n y"
                },
                {
                    "args": "x ^ n ≤ y",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ n ≤ y ⊢ x ^ n ≤ y"
                },
                {
                    "args": "root_mono_le, {n: n, x: x ^ n, y: y}",
                    "id": "5.1",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), 0 ≤ x, x ^ n ≤ y ⊢ root n (x ^ n) ≤ root n y"
                },
                {
                    "args": "x ≤ root n y",
                    "id": "5.2",
                    "prevs": [
                        "3",
                        "5.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 ≤ x, x ^ n ≤ y ⊢ x ≤ root n y"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [
                        "5.0",
                        "5.2"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ⊢ x ^ n ≤ y ⟶ x ≤ root n y"
                },
                {
                    "args": "iffI",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 ≤ x, ¬(n = 0), 0 ≤ x ⊢ x ≤ root n y ⟷ x ^ n ≤ y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ x ⟶ x ≤ root n y ⟷ x ^ n ≤ y"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ x ⟶ x ≤ root n y ⟷ x ^ n ≤ y",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_root_pow2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3",
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "4.2",
                    "method_name": "apply_forward_step",
                    "param_x": "x ^ n",
                    "param_y": "y",
                    "theorem": "root_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "4.2",
                        "4.1"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "root_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "log_root",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "le_1_1, {n: n}",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ 0 < n"
                },
                {
                    "args": "real_of_nat_lt",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ (of_nat::nat ⇒ real) 0 < of_nat n"
                },
                {
                    "args": "real_zero_def",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(n = 0) ⊢ (0::real) < of_nat n"
                },
                {
                    "args": "real_eq_rdiv_eq, {x: log (root n x), y: log x, z: (of_nat::nat ⇒ real) n}",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ log (root n x) = log x / of_nat n ⟷ log (root n x) * of_nat n = log x"
                },
                {
                    "args": "root_pos_lt, {n: n, x: x}",
                    "id": "6",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < root n x"
                },
                {
                    "args": "log_pow, {n: n, x: root n x}",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ log (root n x ^ n) = of_nat n * log (root n x)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 < x ⊢ of_nat n * log (root n x) = log (root n x ^ n)"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "9",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 < x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_pow_root_2",
                    "id": "10",
                    "prevs": [
                        "0",
                        "9"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 < x, ¬(n = 0), 0 < x ⊢ root n x ^ n = x"
                },
                {
                    "args": "log (root n x ^ n) = log x",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 < x ⊢ log (root n x ^ n) = log x"
                },
                {
                    "args": "of_nat n * log (root n x) = log x",
                    "id": "12",
                    "prevs": [
                        "8",
                        "11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, ¬(n = 0) ⊢ of_nat n * log (root n x) = log x"
                },
                {
                    "args": "real_mult_comm, log (root n x) * of_nat n = log x",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 < x ⊢ log (root n x) * of_nat n = log x"
                },
                {
                    "args": "log (root n x) = log x / of_nat n",
                    "id": "14",
                    "prevs": [
                        "5",
                        "13"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 0 < x ⊢ log (root n x) = log x / of_nat n"
                },
                {
                    "args": "",
                    "id": "15",
                    "prevs": [
                        "0",
                        "1",
                        "14"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 < x ⟶ log (root n x) = log x / of_nat n"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 < x ⟶ log (root n x) = log x / of_nat n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "le_1_1"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_of_nat_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_zero_def"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "param_x": "log (root n x)",
                    "param_y": "log x",
                    "theorem": "real_eq_rdiv_eq"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "root_pos_lt"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "log_pow"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "root n x ^ n = x",
                    "goal_id": "9",
                    "method_name": "cut"
                },
                {
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pow_root_2"
                },
                {
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "fact_ids": [
                        "10"
                    ],
                    "goal_id": "11",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "root_exp_log",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_lt_imp_le, {x: (0::real), y: x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_mul_lid, 1 * exp (log x / of_nat n) = exp (log x / of_nat n)",
                    "id": "3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * exp (log x / of_nat n) = exp (log x / of_nat n)"
                },
                {
                    "args": "if_P, 1 * exp (log (if 0 ≤ x then x else -x) / of_nat n) = exp (log x / of_nat n)",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 < x, 0 < x ⊢ 1 * exp (log (if 0 ≤ x then x else -x) / of_nat n) = exp (log x / of_nat n)"
                },
                {
                    "args": "if_P, (if 0 < x then 1 else if x < 0 then -1 else 0) * exp (log (if 0 ≤ x then x else -x) / of_nat n) = exp (log x / of_nat n)",
                    "id": "5",
                    "prevs": [
                        "4",
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 < x, 0 < x ⊢ (if 0 < x then 1 else if x < 0 then -1 else 0) * exp (log (if 0 ≤ x then x else -x) / of_nat n) = exp (log x / of_nat n)"
                },
                {
                    "args": "abs_def, (if 0 < x then 1 else if x < 0 then -1 else 0) * exp (log (abs x) / of_nat n) = exp (log x / of_nat n)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 < x ⊢ (if 0 < x then 1 else if x < 0 then -1 else 0) * exp (log (abs x) / of_nat n) = exp (log x / of_nat n)"
                },
                {
                    "args": "real_sgn_def, real_sgn x * exp (log (abs x) / of_nat n) = exp (log x / of_nat n)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 < x ⊢ real_sgn x * exp (log (abs x) / of_nat n) = exp (log x / of_nat n)"
                },
                {
                    "args": "root_def, root n x = exp (log x / of_nat n)",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 0 < x ⊢ root n x = exp (log x / of_nat n)"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 < x ⟶ root n x = exp (log x / of_nat n)"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 < x ⟶ root n x = exp (log x / of_nat n)",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_sgn_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "root_product",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "finite s",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s ⊢ finite s"
                },
                {
                    "args": "root_1, root n 1 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ root n 1 = 1"
                },
                {
                    "args": "product_empty, root n (product ∅ f) = product ∅ (λi. root n (f i))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s ⊢ root n (product ∅ f) = product ∅ (λi. root n (f i))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "finite s ⊢ ∀x. ∀s1. root n (product s1 f) = product s1 (λi. root n (f i)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ root n (product (insert x s1) f) = product (insert x s1) (λi. root n (f i))"
                },
                {
                    "args": "x, 'a",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "s1, 'a set",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s1"
                },
                {
                    "args": "root n (product s1 f) = product s1 (λi. root n (f i))",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "root n (product s1 f) = product s1 (λi. root n (f i)) ⊢ root n (product s1 f) = product s1 (λi. root n (f i))"
                },
                {
                    "args": "¬(x ∈ s1)",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ∈ s1) ⊢ ¬(x ∈ s1)"
                },
                {
                    "args": "finite s1",
                    "id": "3.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s1 ⊢ finite s1"
                },
                {
                    "args": "product_insert, {f: f, s: s1, x: x}",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x s1) f = (if x ∈ s1 then product s1 f else f x * product s1 f)"
                },
                {
                    "args": "if_not_P",
                    "id": "3.6",
                    "prevs": [
                        "3.5",
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ s1), finite s1 ⊢ product (insert x s1) f = f x * product s1 f"
                },
                {
                    "args": "product_insert, {f: λi. root n (f i), s: s1, x: x}",
                    "id": "3.7",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x s1) (λi. root n (f i)) = (if x ∈ s1 then product s1 (λi. root n (f i)) else root n (f x) * product s1 (λi. root n (f i)))"
                },
                {
                    "args": "if_not_P",
                    "id": "3.8",
                    "prevs": [
                        "3.7",
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ s1), finite s1 ⊢ product (insert x s1) (λi. root n (f i)) = root n (f x) * product s1 (λi. root n (f i))"
                },
                {
                    "args": "root n (f x) * root n (product s1 f) = root n (f x) * product s1 (λi. root n (f i))",
                    "id": "3.9",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "root n (product s1 f) = product s1 (λi. root n (f i)) ⊢ root n (f x) * root n (product s1 f) = root n (f x) * product s1 (λi. root n (f i))"
                },
                {
                    "args": "real_root_mul, root n (f x * product s1 f) = root n (f x) * product s1 (λi. root n (f i))",
                    "id": "3.10",
                    "prevs": [
                        "3.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s, root n (product s1 f) = product s1 (λi. root n (f i)), ¬(x ∈ s1), finite s1 ⊢ root n (f x * product s1 f) = root n (f x) * product s1 (λi. root n (f i))"
                },
                {
                    "args": "root n (f x * product s1 f) = product (insert x s1) (λi. root n (f i))",
                    "id": "3.11",
                    "prevs": [
                        "3.8",
                        "3.10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x ∈ s1), finite s1, finite s, root n (product s1 f) = product s1 (λi. root n (f i)) ⊢ root n (f x * product s1 f) = product (insert x s1) (λi. root n (f i))"
                },
                {
                    "args": "root n (product (insert x s1) f) = product (insert x s1) (λi. root n (f i))",
                    "id": "3.12",
                    "prevs": [
                        "3.6",
                        "3.11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x ∈ s1), finite s1, finite s, root n (product s1 f) = product s1 (λi. root n (f i)) ⊢ root n (product (insert x s1) f) = product (insert x s1) (λi. root n (f i))"
                },
                {
                    "args": "",
                    "id": "3.13",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.3",
                        "3.4",
                        "3.12"
                    ],
                    "rule": "intros",
                    "th": "finite s ⊢ ∀x. ∀s1. root n (product s1 f) = product s1 (λi. root n (f i)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ root n (product (insert x s1) f) = product (insert x s1) (λi. root n (f i))"
                },
                {
                    "args": "finite_induct_strong",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s, finite s, finite s ⊢ root n (product s f) = product s (λi. root n (f i))"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ finite s ⟶ root n (product s f) = product s (λi. root n (f i))"
                }
            ],
            "prop": "finite s ⟶ root n (product s f) = product s (λi. root n (f i))",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_induct_strong"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "product_empty"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "x, s1"
                },
                {
                    "fact_ids": [
                        "3.4"
                    ],
                    "goal_id": "3.5",
                    "method_name": "apply_forward_step",
                    "param_f": "f",
                    "param_x": "x",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "3.5",
                        "3.3"
                    ],
                    "goal_id": "3.6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.4"
                    ],
                    "goal_id": "3.7",
                    "method_name": "apply_forward_step",
                    "param_f": "(λi. root n (f i))",
                    "param_x": "x",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "3.7",
                        "3.3"
                    ],
                    "goal_id": "3.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.6"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3.8"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_root_mul"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "f": "'a ⇒ real",
                "n": "nat",
                "s": "'a set"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "sqrt_product",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "finite s",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s ⊢ finite s"
                },
                {
                    "args": "sqrt_1, sqrt 1 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ sqrt 1 = 1"
                },
                {
                    "args": "product_empty, sqrt (product ∅ f) = product ∅ (λi. sqrt (f i))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s ⊢ sqrt (product ∅ f) = product ∅ (λi. sqrt (f i))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "finite s ⊢ ∀x. ∀s1. sqrt (product s1 f) = product s1 (λi. sqrt (f i)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ sqrt (product (insert x s1) f) = product (insert x s1) (λi. sqrt (f i))"
                },
                {
                    "args": "x, 'a",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "s1, 'a set",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s1"
                },
                {
                    "args": "sqrt (product s1 f) = product s1 (λi. sqrt (f i))",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sqrt (product s1 f) = product s1 (λi. sqrt (f i)) ⊢ sqrt (product s1 f) = product s1 (λi. sqrt (f i))"
                },
                {
                    "args": "¬(x ∈ s1)",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ∈ s1) ⊢ ¬(x ∈ s1)"
                },
                {
                    "args": "finite s1",
                    "id": "3.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s1 ⊢ finite s1"
                },
                {
                    "args": "product_insert, {f: f, s: s1, x: x}",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x s1) f = (if x ∈ s1 then product s1 f else f x * product s1 f)"
                },
                {
                    "args": "product_insert, {f: λi. sqrt (f i), s: s1, x: x}",
                    "id": "3.6",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x s1) (λi. sqrt (f i)) = (if x ∈ s1 then product s1 (λi. sqrt (f i)) else sqrt (f x) * product s1 (λi. sqrt (f i)))"
                },
                {
                    "args": "if_not_P",
                    "id": "3.7",
                    "prevs": [
                        "3.5",
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ s1), finite s1 ⊢ product (insert x s1) f = f x * product s1 f"
                },
                {
                    "args": "if_not_P",
                    "id": "3.8",
                    "prevs": [
                        "3.6",
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ s1), finite s1 ⊢ product (insert x s1) (λi. sqrt (f i)) = sqrt (f x) * product s1 (λi. sqrt (f i))"
                },
                {
                    "args": "sqrt (f x) * sqrt (product s1 f) = sqrt (f x) * product s1 (λi. sqrt (f i))",
                    "id": "3.9",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "sqrt (product s1 f) = product s1 (λi. sqrt (f i)) ⊢ sqrt (f x) * sqrt (product s1 f) = sqrt (f x) * product s1 (λi. sqrt (f i))"
                },
                {
                    "args": "sqrt_mul, sqrt (f x * product s1 f) = sqrt (f x) * product s1 (λi. sqrt (f i))",
                    "id": "3.10",
                    "prevs": [
                        "3.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s, sqrt (product s1 f) = product s1 (λi. sqrt (f i)), ¬(x ∈ s1), finite s1 ⊢ sqrt (f x * product s1 f) = sqrt (f x) * product s1 (λi. sqrt (f i))"
                },
                {
                    "args": "sqrt (f x * product s1 f) = product (insert x s1) (λi. sqrt (f i))",
                    "id": "3.11",
                    "prevs": [
                        "3.8",
                        "3.10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x ∈ s1), finite s1, finite s, sqrt (product s1 f) = product s1 (λi. sqrt (f i)) ⊢ sqrt (f x * product s1 f) = product (insert x s1) (λi. sqrt (f i))"
                },
                {
                    "args": "sqrt (product (insert x s1) f) = product (insert x s1) (λi. sqrt (f i))",
                    "id": "3.12",
                    "prevs": [
                        "3.7",
                        "3.11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x ∈ s1), finite s1, finite s, sqrt (product s1 f) = product s1 (λi. sqrt (f i)) ⊢ sqrt (product (insert x s1) f) = product (insert x s1) (λi. sqrt (f i))"
                },
                {
                    "args": "",
                    "id": "3.13",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.3",
                        "3.4",
                        "3.12"
                    ],
                    "rule": "intros",
                    "th": "finite s ⊢ ∀x. ∀s1. sqrt (product s1 f) = product s1 (λi. sqrt (f i)) ⟶ ¬(x ∈ s1) ⟶ finite s1 ⟶ sqrt (product (insert x s1) f) = product (insert x s1) (λi. sqrt (f i))"
                },
                {
                    "args": "finite_induct_strong",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s, finite s, finite s ⊢ sqrt (product s f) = product s (λi. sqrt (f i))"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ finite s ⟶ sqrt (product s f) = product s (λi. sqrt (f i))"
                }
            ],
            "prop": "finite s ⟶ sqrt (product s f) = product s (λi. sqrt (f i))",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_induct_strong"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "product_empty"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sqrt_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "x, s1"
                },
                {
                    "fact_ids": [
                        "3.4"
                    ],
                    "goal_id": "3.5",
                    "method_name": "apply_forward_step",
                    "param_f": "f",
                    "param_x": "x",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "3.4"
                    ],
                    "goal_id": "3.6",
                    "method_name": "apply_forward_step",
                    "param_f": "(λi. sqrt (f i))",
                    "param_x": "x",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "3.5",
                        "3.3"
                    ],
                    "goal_id": "3.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.6",
                        "3.3"
                    ],
                    "goal_id": "3.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.7"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3.8"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sqrt_mul"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "f": "'a ⇒ real",
                "s": "'a set"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "power",
            "prop": [
                "x ^ y = ",
                "(if 0 < x then ",
                "   exp (y * log x)",
                " else ",
                "   if x = 0 then ",
                "     if y = 0 then 1 else 0",
                "   else ",
                "     if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then ",
                "       -(exp (y * log (-x)))",
                "     else ",
                "       exp (y * log (-x)))"
            ],
            "ty": "def",
            "type": "real ⇒ real ⇒ real"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_pow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "0 < x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "exp_log, {x: x}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ exp (log x) = x"
                },
                {
                    "args": "exp (log x) ^ n = x ^ n",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ exp (log x) ^ n = x ^ n"
                },
                {
                    "args": "real_exp_n, exp (of_nat n * log x) = x ^ n",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (of_nat n * log x) = x ^ n"
                },
                {
                    "args": "if_P, (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "0.4",
                    "prevs": [
                        "0.3",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "x = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_zero_def, (if n = 0 then (1::real) else of_nat 0) = (if n = 0 then 1 else 0)",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if n = 0 then (1::real) else of_nat 0) = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "real_pow_zero, (if n = 0 then (1::real) else of_nat 0) = 0 ^ n",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0 ⊢ (if n = 0 then (1::real) else of_nat 0) = 0 ^ n"
                },
                {
                    "args": "(if n = 0 then 1 else of_nat 0) = x ^ n",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(0 < x) ⊢ (if n = 0 then 1 else of_nat 0) = x ^ n"
                },
                {
                    "args": "real_of_nat_eq, (if (of_nat::nat ⇒ real) n = of_nat 0 then 1 else of_nat 0) = x ^ n",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0 ⊢ (if (of_nat::nat ⇒ real) n = of_nat 0 then 1 else of_nat 0) = x ^ n"
                },
                {
                    "args": "real_zero_def, (if of_nat n = (0::real) then 1 else 0) = x ^ n",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0 ⊢ (if of_nat n = (0::real) then 1 else 0) = x ^ n"
                },
                {
                    "args": "if_P, (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.5",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(0 < x) ⊢ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.1.7",
                    "prevs": [
                        "1.1.0",
                        "1.1.6"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟶ odd n"
                },
                {
                    "args": "∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1 ⊢ ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1"
                },
                {
                    "args": "p, nat",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "q, nat",
                    "id": "1.2.1.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q",
                    "id": "1.2.1.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q"
                },
                {
                    "args": "conjD1, {A: odd p, B: odd q ∧ of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd p"
                },
                {
                    "args": "conjD2, {A: odd p, B: odd q ∧ of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd q ∧ of_nat n = of_nat p / of_nat q"
                },
                {
                    "args": "conjD1, {A: odd q, B: of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.6",
                    "prevs": [
                        "1.2.1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd q"
                },
                {
                    "args": "conjD2, {A: odd q, B: of_nat n = of_nat p / of_nat q}",
                    "id": "1.2.1.7",
                    "prevs": [
                        "1.2.1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ of_nat n = of_nat p / of_nat q"
                },
                {
                    "args": "",
                    "id": "1.2.1.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ q = 0 ⟶ odd n"
                },
                {
                    "args": "q = 0",
                    "id": "1.2.1.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q = 0 ⊢ q = 0"
                },
                {
                    "args": "",
                    "id": "1.2.1.8.1",
                    "prevs": [
                        "1.2.1.8.0",
                        "1.2.1.6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "q = 0, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd 0"
                },
                {
                    "args": "odd_def_1",
                    "id": "1.2.1.8.2",
                    "prevs": [
                        "1.2.1.8.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q = 0, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ false"
                },
                {
                    "args": "not_false_res, odd n",
                    "id": "1.2.1.8.3",
                    "prevs": [
                        "1.2.1.8.2"
                    ],
                    "rule": "resolve_theorem",
                    "th": "q = 0, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.1.8.4",
                    "prevs": [
                        "1.2.1.8.0",
                        "1.2.1.8.3"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ q = 0 ⟶ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.1.9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ ¬(q = 0) ⟶ odd n"
                },
                {
                    "args": "¬(q = 0)",
                    "id": "1.2.1.9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(q = 0) ⊢ ¬(q = 0)"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2.1.9.1",
                    "prevs": [
                        "1.2.1.9.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "¬(q = 0) ⊢ ¬((of_nat::nat ⇒ real) q = of_nat 0)"
                },
                {
                    "args": "(of_nat::nat ⇒ real) q * of_nat n = of_nat p",
                    "id": "1.2.1.9.2",
                    "prevs": [
                        "1.2.1.9.1",
                        "1.2.1.7"
                    ],
                    "rule": "z3",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ (of_nat::nat ⇒ real) q * of_nat n = of_nat p"
                },
                {
                    "args": "real_of_nat_mul",
                    "id": "1.2.1.9.3",
                    "prevs": [
                        "1.2.1.9.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ (of_nat::nat ⇒ real) (q * n) = of_nat p"
                },
                {
                    "args": "real_of_nat_eq",
                    "id": "1.2.1.9.4",
                    "prevs": [
                        "1.2.1.9.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ q * n = p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.2.1.9.5",
                    "prevs": [
                        "1.2.1.9.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ p = q * n"
                },
                {
                    "args": "",
                    "id": "1.2.1.9.6",
                    "prevs": [
                        "1.2.1.9.5",
                        "1.2.1.4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd (q * n)"
                },
                {
                    "args": "odd_mult",
                    "id": "1.2.1.9.7",
                    "prevs": [
                        "1.2.1.9.6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd q ∧ odd n"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.1.9.8",
                    "prevs": [
                        "1.2.1.9.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(q = 0), odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.1.9.9",
                    "prevs": [
                        "1.2.1.9.0",
                        "1.2.1.9.8"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ ¬(q = 0) ⟶ odd n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.1.10",
                    "prevs": [
                        "1.2.1.8",
                        "1.2.1.9"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, odd p ∧ odd q ∧ of_nat n = of_nat p / of_nat q ⊢ odd n"
                },
                {
                    "args": "∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1",
                    "id": "1.2.1.11",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.0",
                        "1.2.1.1",
                        "1.2.1.2",
                        "1.2.1.3",
                        "1.2.1.10"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟶ odd n"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1)"
                },
                {
                    "args": "odd n",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "trueI",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ even 0"
                },
                {
                    "args": "not_odd, ¬(odd 0)",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ ¬(odd 0)"
                },
                {
                    "args": "odd_def_2, odd (Suc 0)",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd (Suc 0)"
                },
                {
                    "args": "nat_one_def, odd 1",
                    "id": "1.2.2.5",
                    "prevs": [
                        "1.2.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd 1"
                },
                {
                    "args": "of_nat n = of_nat n / of_nat 1",
                    "id": "1.2.2.6",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ of_nat n = of_nat n / of_nat 1"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.7",
                    "prevs": [
                        "1.2.2.5",
                        "1.2.2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd 1 ∧ of_nat n = of_nat n / of_nat 1"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.8",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ odd n ∧ odd 1 ∧ of_nat n = of_nat n / of_nat 1"
                },
                {
                    "args": "exI, {P: λn1. odd n ∧ odd n1 ∧ of_nat n = of_nat n / of_nat n1, a: (1::nat)}",
                    "id": "1.2.2.9",
                    "prevs": [
                        "1.2.2.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ ∃a1. odd n ∧ odd a1 ∧ of_nat n = of_nat n / of_nat a1"
                },
                {
                    "args": "exI, {P: λm. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1, a: n}",
                    "id": "1.2.2.10",
                    "prevs": [
                        "1.2.2.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ ∃a1. ∃n1. odd a1 ∧ odd n1 ∧ of_nat n = of_nat a1 / of_nat n1"
                },
                {
                    "args": "",
                    "id": "1.2.2.11",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.10"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1)"
                },
                {
                    "args": "iffI",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟷ odd n"
                },
                {
                    "args": "0 < -x",
                    "id": "1.2.4",
                    "prevs": [
                        "1.0",
                        "1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ 0 < -x"
                },
                {
                    "args": "exp_log, {x: -x}",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ exp (log (-x)) = -x"
                },
                {
                    "args": "",
                    "id": "1.2.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "odd n",
                    "id": "1.2.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "real_neg_neg, --(x ^ n) = x ^ n",
                    "id": "1.2.6.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ --(x ^ n) = x ^ n"
                },
                {
                    "args": "if_not_P2, -(if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.6.2",
                    "prevs": [
                        "1.2.6.1",
                        "1.2.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(0 < x), ¬(x = 0) ⊢ -(if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "not_odd, -(if even n then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.6.3",
                    "prevs": [
                        "1.2.6.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(if even n then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "real_pow_neg, -(-x ^ n) = x ^ n",
                    "id": "1.2.6.4",
                    "prevs": [
                        "1.2.6.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(-x ^ n) = x ^ n"
                },
                {
                    "args": "-(exp (log (-x)) ^ n) = x ^ n",
                    "id": "1.2.6.5",
                    "prevs": [
                        "1.2.5",
                        "1.2.6.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(exp (log (-x)) ^ n) = x ^ n"
                },
                {
                    "args": "real_exp_n, -(exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.6.6",
                    "prevs": [
                        "1.2.6.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), odd n ⊢ -(exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "if_P, (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.6.7",
                    "prevs": [
                        "1.2.6.6",
                        "1.2.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(0 < x), ¬(x = 0) ⊢ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.6.8",
                    "prevs": [
                        "1.2.6.0",
                        "1.2.6.7"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ odd n ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(odd n) ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "¬(odd n)",
                    "id": "1.2.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(odd n) ⊢ ¬(odd n)"
                },
                {
                    "args": "if_P, (if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.7.1",
                    "prevs": [
                        "1.2.7.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(odd n) ⊢ (if ¬(odd n) then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "not_odd, (if even n then x ^ n else -(x ^ n)) = x ^ n",
                    "id": "1.2.7.2",
                    "prevs": [
                        "1.2.7.1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ (if even n then x ^ n else -(x ^ n)) = x ^ n"
                },
                {
                    "args": "real_pow_neg, -x ^ n = x ^ n",
                    "id": "1.2.7.3",
                    "prevs": [
                        "1.2.7.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ -x ^ n = x ^ n"
                },
                {
                    "args": "exp (log (-x)) ^ n = x ^ n",
                    "id": "1.2.7.4",
                    "prevs": [
                        "1.2.5",
                        "1.2.7.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ exp (log (-x)) ^ n = x ^ n"
                },
                {
                    "args": "real_exp_n, exp (of_nat n * log (-x)) = x ^ n",
                    "id": "1.2.7.5",
                    "prevs": [
                        "1.2.7.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(odd n) ⊢ exp (of_nat n * log (-x)) = x ^ n"
                },
                {
                    "args": "if_not_P, (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.7.6",
                    "prevs": [
                        "1.2.7.5",
                        "1.2.7.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(odd n), ¬(0 < x), ¬(x = 0) ⊢ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.7.7",
                    "prevs": [
                        "1.2.7.0",
                        "1.2.7.6"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(odd n) ⟶ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.6",
                        "1.2.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if odd n then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "(if ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.3",
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "real_abs_nat, (if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "if_not_P, (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.0",
                        "1.2.11"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x) ⊢ (if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x) ⊢ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < x then exp (of_nat n * log x) else if x = 0 then if of_nat n = (0::real) then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (of_nat n) = of_nat m / of_nat n1 then -(exp (of_nat n * log (-x))) else exp (of_nat n * log (-x))) = x ^ n"
                },
                {
                    "args": "real_real_power_def, x ^ (of_nat::nat ⇒ real) n = x ^ n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) n = x ^ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) n = x ^ n"
                }
            ],
            "prop": "x ^ (of_nat::nat ⇒ real) n = x ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "0 < x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_zero"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal": "(∃m. ∃n1. odd m ∧ odd n1 ∧ of_nat n = of_nat m / of_nat n1) ⟷ odd n",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "exists_elim",
                    "names": "p,q"
                },
                {
                    "fact_ids": [
                        "1.2.1.3"
                    ],
                    "goal_id": "1.2.1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.3"
                    ],
                    "goal_id": "1.2.1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.1.5"
                    ],
                    "goal_id": "1.2.1.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.5"
                    ],
                    "goal_id": "1.2.1.7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "case": "q=0",
                    "goal_id": "1.2.1.8",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1.8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.8.0",
                        "1.2.1.6"
                    ],
                    "goal_id": "1.2.1.8.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1.8.1"
                    ],
                    "goal_id": "1.2.1.8.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_def_1"
                },
                {
                    "fact_ids": [
                        "1.2.1.8.2"
                    ],
                    "goal_id": "1.2.1.8.3",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1.2.1.9",
                    "method_name": "introduction"
                },
                {
                    "goal": "(of_nat::nat=>real) q * of_nat n = of_nat p",
                    "goal_id": "1.2.1.9.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.0"
                    ],
                    "goal_id": "1.2.1.9.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.1",
                        "1.2.1.7"
                    ],
                    "goal_id": "1.2.1.9.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.2"
                    ],
                    "goal_id": "1.2.1.9.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_of_nat_mul"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.3"
                    ],
                    "goal_id": "1.2.1.9.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.4"
                    ],
                    "goal_id": "1.2.1.9.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.5",
                        "1.2.1.4"
                    ],
                    "goal_id": "1.2.1.9.6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.6"
                    ],
                    "goal_id": "1.2.1.9.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "odd_mult"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.7"
                    ],
                    "goal_id": "1.2.1.9.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_2"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_odd"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "1.2.2.6",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "0 < -x",
                    "goal_id": "1.2.4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "1.2.0"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "case": "odd n",
                    "goal_id": "1.2.6",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.6.0"
                    ],
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "1.2.5"
                    ],
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_neg"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_odd"
                },
                {
                    "fact_ids": [
                        "1.2.6.0"
                    ],
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P2"
                },
                {
                    "goal_id": "1.2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "1.2.7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.7.0"
                    ],
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_n"
                },
                {
                    "fact_ids": [
                        "1.2.5"
                    ],
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_neg"
                },
                {
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_odd"
                },
                {
                    "fact_ids": [
                        "1.2.7.0"
                    ],
                    "goal_id": "1.2.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_nat_power_def_1, x ^ (0::nat) = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (0::nat) = 1"
                },
                {
                    "args": "rpow_pow, x ^ (of_nat::nat ⇒ real) 0 = 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) 0 = 1"
                },
                {
                    "args": "real_zero_def, x ^ (0::real) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (0::real) = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ (0::real) = 1"
                }
            ],
            "prop": "x ^ (0::real) = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_nat_power_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "0 < x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_neg, exp (-(y * log x)) = real_inverse (exp (y * log x))",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-(y * log x)) = real_inverse (exp (y * log x))"
                },
                {
                    "args": "real_mul_lneg, exp (-y * log x) = real_inverse (exp (y * log x))",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ exp (-y * log x) = real_inverse (exp (y * log x))"
                },
                {
                    "args": "if_P, (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, 0 < x ⊢ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "x = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), x = 0 ⊢ y = 0 ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "y = 0",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "-y = 0",
                    "id": "1.1.1.1",
                    "prevs": [
                        "1.1.1.0"
                    ],
                    "rule": "z3",
                    "th": "y = 0 ⊢ -y = 0"
                },
                {
                    "args": "real_inv_1, 1 = real_inverse 1",
                    "id": "1.1.1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 = real_inverse 1"
                },
                {
                    "args": "if_P, (if -y = 0 then 1 else 0) = real_inverse 1",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.2",
                        "1.1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, y = 0, y = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse 1"
                },
                {
                    "args": "if_P, (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)",
                    "id": "1.1.1.4",
                    "prevs": [
                        "1.1.1.3",
                        "1.1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, y = 0, y = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.5",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), x = 0 ⊢ y = 0 ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), x = 0 ⊢ ¬(y = 0) ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "1.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "¬(-y = 0)",
                    "id": "1.1.2.1",
                    "prevs": [
                        "1.1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(y = 0) ⊢ ¬(-y = 0)"
                },
                {
                    "args": "real_inv_0, 0 = real_inverse 0",
                    "id": "1.1.2.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = real_inverse 0"
                },
                {
                    "args": "if_not_P, (if -y = 0 then 1 else 0) = real_inverse 0",
                    "id": "1.1.2.3",
                    "prevs": [
                        "1.1.2.2",
                        "1.1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, ¬(y = 0), ¬(y = 0) ⊢ (if -y = 0 then 1 else 0) = real_inverse 0"
                },
                {
                    "args": "if_not_P, (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)",
                    "id": "1.1.2.4",
                    "prevs": [
                        "1.1.2.3",
                        "1.1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, ¬(y = 0), ¬(y = 0) ⊢ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2.5",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), x = 0 ⊢ ¬(y = 0) ⟶ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.1",
                        "1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), x = 0, ¬(0 < x), x = 0 ⊢ (if -y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, x = 0 ⊢ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "real_inv_neg, -(real_inverse (exp (y * log (-x)))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_inverse (exp (y * log (-x)))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "real_exp_neg, -(exp (-(y * log (-x)))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (-(y * log (-x)))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "real_mul_lneg, -(exp (-y * log (-x))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (-y * log (-x))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "if_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.3",
                        "1.2.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "real_exp_neg, exp (-(y * log (-x))) = real_inverse (exp (y * log (-x)))",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-(y * log (-x))) = real_inverse (exp (y * log (-x)))"
                },
                {
                    "args": "real_mul_lneg, exp (-y * log (-x)) = real_inverse (exp (y * log (-x)))",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (-y * log (-x)) = real_inverse (exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2",
                        "1.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), ¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_abs_neg, (if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(x = 0) ⊢ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.0",
                        "1.2.5"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(0 < x) ⊢ (if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(0 < x) ⊢ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < x then exp (-y * log x) else if x = 0 then if -y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs (-y) = of_nat m / of_nat n then -(exp (-y * log (-x))) else exp (-y * log (-x))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_real_power_def, x ^ -y = real_inverse (x ^ y)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ -y = real_inverse (x ^ y)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ -y = real_inverse (x ^ y)"
                }
            ],
            "prop": "x ^ -y = real_inverse (x ^ y)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "0 < x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "x = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "case": "y = 0",
                    "goal_id": "1.1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "-y = 0",
                    "goal_id": "1.1.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.1.1"
                    ],
                    "goal_id": "1.1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_1"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.2.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "¬(-y = 0)",
                    "goal_id": "1.1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.2.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.2.1"
                    ],
                    "goal_id": "1.1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_0"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "1.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_neg"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_pos_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_exp_pos_lt, {x: y * log x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp (y * log x)"
                },
                {
                    "args": "if_P, 0 < (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_real_power_def, 0 < x ^ y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ 0 < x ^ y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ 0 < x ^ y"
                }
            ],
            "prop": "0 < x ⟶ 0 < x ^ y",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_pos_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_le_lt",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "0 < x",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "rpow_pos_lt, {x: x, y: y}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ 0 < x ^ y"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 < x ⊢ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 < x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "0 = x",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "(0::real) ≤ (if y = 0 then 1 else 0)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) ≤ (if y = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, (0::real) ≤ 0 ^ y",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, 0 = x ⊢ (0::real) ≤ 0 ^ y"
                },
                {
                    "args": "0 ≤ x ^ y",
                    "id": "3.4",
                    "prevs": [
                        "3.1",
                        "3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, 0 ≤ x ⊢ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 = x ⟶ 0 ≤ x ^ y"
                },
                {
                    "args": "disjE",
                    "id": "4",
                    "prevs": [
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x ⊢ 0 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ x ^ y"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ x ^ y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_pos_lt"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_lt2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "0 < z",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < z ⊢ 0 < z"
                },
                {
                    "args": "real_le_lt",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x ⊢ 0 < x ∨ 0 = x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 < x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "0 < x",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "real_lt_trans, {x: (0::real), y: x, z: y}",
                    "id": "4.1",
                    "prevs": [
                        "4.0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, x < y ⊢ 0 < y"
                },
                {
                    "args": "log_mono_lt_imp",
                    "id": "4.2",
                    "prevs": [
                        "4.0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x, 0 ≤ x, x < y, 0 < z, 0 < x ⊢ log x < log y"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "4.3",
                    "prevs": [
                        "2",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x, 0 ≤ x, x < y, 0 < z, 0 < x ⊢ z * log x < z * log y"
                },
                {
                    "args": "real_exp_mono_lt, exp (z * log x) < exp (z * log y)",
                    "id": "4.4",
                    "prevs": [
                        "4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x ⊢ exp (z * log x) < exp (z * log y)"
                },
                {
                    "args": "if_P, exp (z * log x) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))",
                    "id": "4.5",
                    "prevs": [
                        "4.4",
                        "4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x, 0 < x, x < y ⊢ exp (z * log x) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))"
                },
                {
                    "args": "if_P, (if 0 < x then exp (z * log x) else if x = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-x))) else exp (z * log (-x))) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))",
                    "id": "4.6",
                    "prevs": [
                        "4.5",
                        "4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x, 0 < x ⊢ (if 0 < x then exp (z * log x) else if x = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-x))) else exp (z * log (-x))) < (if 0 < y then exp (z * log y) else if y = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-y))) else exp (z * log (-y)))"
                },
                {
                    "args": "real_real_power_def, x ^ z < y ^ z",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 < x ⊢ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "4.8",
                    "prevs": [
                        "4.0",
                        "4.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 < x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 = x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "0 = x",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = x ⊢ 0 = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "5.1",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = x ⊢ x = 0"
                },
                {
                    "args": "¬(z = 0)",
                    "id": "5.2",
                    "prevs": [
                        "2"
                    ],
                    "rule": "z3",
                    "th": "0 < z ⊢ ¬(z = 0)"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [
                        "5.1",
                        "1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 = x, x < y ⊢ 0 < y"
                },
                {
                    "args": "rpow_pos_lt, {x: y, y: z}",
                    "id": "5.4",
                    "prevs": [
                        "5.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, x < y, 0 < z, 0 = x ⊢ 0 < y ^ z"
                },
                {
                    "args": "if_not_P, (if z = 0 then 1 else 0) < y ^ z",
                    "id": "5.5",
                    "prevs": [
                        "5.4",
                        "5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 = x, 0 < z ⊢ (if z = 0 then 1 else 0) < y ^ z"
                },
                {
                    "args": "rpow_zero, 0 ^ z < y ^ z",
                    "id": "5.6",
                    "prevs": [
                        "5.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x < y, 0 < z, 0 = x ⊢ 0 ^ z < y ^ z"
                },
                {
                    "args": "x ^ z < y ^ z",
                    "id": "5.7",
                    "prevs": [
                        "5.1",
                        "5.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = x, 0 ≤ x, x < y, 0 < z ⊢ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "5.8",
                    "prevs": [
                        "5.0",
                        "5.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x < y, 0 < z ⊢ 0 = x ⟶ x ^ z < y ^ z"
                },
                {
                    "args": "disjE",
                    "id": "6",
                    "prevs": [
                        "3",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 ≤ x, x < y, 0 < z, 0 ≤ x, x < y, 0 < z ⊢ x ^ z < y ^ z"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ x < y ⟶ 0 < z ⟶ x ^ z < y ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ x < y ⟶ 0 < z ⟶ x ^ z < y ^ z",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_le_lt"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0",
                        "1"
                    ],
                    "goal_id": "4.1",
                    "method_name": "apply_forward_step",
                    "theorem": "real_lt_trans"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "log_mono_lt_imp"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.0"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "goal": "~(z=0)",
                    "goal_id": "5.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "5.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_pos_lt"
                },
                {
                    "fact_ids": [
                        "5.1",
                        "1"
                    ],
                    "goal_id": "5.3",
                    "method_name": "rewrite_fact_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_le2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "0 ≤ z",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ z ⊢ 0 ≤ z"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z ⊢ z = 0 ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "z = 0",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "z = 0 ⊢ z = 0"
                },
                {
                    "args": "real_le_refl, {x: (1::real)}",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::real) ≤ 1"
                },
                {
                    "args": "rpow_0, x ^ (0::real) ≤ y ^ (0::real)",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, z = 0 ⊢ x ^ (0::real) ≤ y ^ (0::real)"
                },
                {
                    "args": "x ^ z ≤ y ^ z",
                    "id": "3.3",
                    "prevs": [
                        "3.0",
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "z = 0, 0 ≤ x, x ≤ y, 0 ≤ z ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z ⊢ z = 0 ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z ⊢ ¬(z = 0) ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "¬(z = 0)",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(z = 0) ⊢ ¬(z = 0)"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0) ⊢ x = y ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "x = y",
                    "id": "4.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "real_le_refl, {x: y ^ z}",
                    "id": "4.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ y ^ z ≤ y ^ z"
                },
                {
                    "args": "x ^ z ≤ y ^ z",
                    "id": "4.1.2",
                    "prevs": [
                        "4.1.0",
                        "4.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y, 0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0) ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "4.1.3",
                    "prevs": [
                        "4.1.0",
                        "4.1.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0) ⊢ x = y ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0) ⊢ ¬(x = y) ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "¬(x = y)",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = y) ⊢ ¬(x = y)"
                },
                {
                    "args": "x < y",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0",
                        "1"
                    ],
                    "rule": "z3",
                    "th": "¬(x = y), x ≤ y ⊢ x < y"
                },
                {
                    "args": "0 < z",
                    "id": "4.2.2",
                    "prevs": [
                        "2",
                        "4.0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ z, ¬(z = 0) ⊢ 0 < z"
                },
                {
                    "args": "rpow_lt2",
                    "id": "4.2.3",
                    "prevs": [
                        "0",
                        "4.2.1",
                        "4.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0), ¬(x = y), 0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0), ¬(x = y), 0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0), ¬(x = y) ⊢ x ^ z < y ^ z"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0), ¬(x = y) ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.0",
                        "4.2.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0) ⊢ ¬(x = y) ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "classical_cases",
                    "id": "4.3",
                    "prevs": [
                        "4.1",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0), 0 ≤ x, x ≤ y, 0 ≤ z, ¬(z = 0) ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z ⊢ ¬(z = 0) ⟶ x ^ z ≤ y ^ z"
                },
                {
                    "args": "classical_cases",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x ≤ y, 0 ≤ z, 0 ≤ x, x ≤ y, 0 ≤ z ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ x ≤ y ⟶ 0 ≤ z ⟶ x ^ z ≤ y ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ x ≤ y ⟶ 0 ≤ z ⟶ x ^ z ≤ y ^ z",
            "steps": [
                {
                    "case": "z=0",
                    "goal_id": "3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_0"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "case": "x = y",
                    "goal_id": "4.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.1.0"
                    ],
                    "goal_id": "4.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_lt2"
                },
                {
                    "fact_ids": [
                        "4.2.0",
                        "1"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2",
                        "4.0"
                    ],
                    "goal_id": "4.2.2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "eq_refl, {x: (0::real)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) = 0"
                },
                {
                    "args": "¬((0::real) < 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬((0::real) < 0)"
                },
                {
                    "args": "if_not_P, (if (0::real) < 0 then exp (y * log 0) else if y = 0 then 1 else 0) = (if y = 0 then 1 else 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 0 then exp (y * log 0) else if y = 0 then 1 else 0) = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if (0::real) < 0 then exp (y * log 0) else if (0::real) = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log -0)) else exp (y * log -0)) = (if y = 0 then 1 else 0)",
                    "id": "3",
                    "prevs": [
                        "2",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 0 then exp (y * log 0) else if (0::real) = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log -0)) else exp (y * log -0)) = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "real_real_power_def, (0::real) ^ y = (if y = 0 then 1 else 0)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) ^ y = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ (0::real) ^ y = (if y = 0 then 1 else 0)"
                }
            ],
            "prop": "(0::real) ^ y = (if y = 0 then 1 else 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "(0::real) = 0 ",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~((0::real) < 0)",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_pow_1, x ^ (1::nat) = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (1::nat) = x"
                },
                {
                    "args": "rpow_pow, x ^ (of_nat::nat ⇒ real) 1 = x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (of_nat::nat ⇒ real) 1 = x"
                },
                {
                    "args": "real_one_def, x ^ (1::real) = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (1::real) = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ (1::real) = x"
                }
            ],
            "prop": "x ^ (1::real) = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_one",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(0::real) < 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (0::real) < 1"
                },
                {
                    "args": "real_exp_0, exp 0 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp 0 = 1"
                },
                {
                    "args": "real_mul_rzero, exp (z * 0) = 1",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (z * 0) = 1"
                },
                {
                    "args": "log_1, exp (z * log 1) = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (z * log 1) = 1"
                },
                {
                    "args": "if_P, (if (0::real) < 1 then exp (z * log 1) else if (1::real) = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-1))) else exp (z * log (-1))) = 1",
                    "id": "4",
                    "prevs": [
                        "3",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if (0::real) < 1 then exp (z * log 1) else if (1::real) = 0 then if z = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(exp (z * log (-1))) else exp (z * log (-1))) = 1"
                },
                {
                    "args": "real_real_power_def, (1::real) ^ z = 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::real) ^ z = 1"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (1::real) ^ z = 1"
                }
            ],
            "prop": "(1::real) ^ z = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "(0::real) < 1",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_rpow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ x = 0 ⟶ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "x = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⊢ m = 0 ⟶ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "m = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "real_mul_lzero, 0 * n = 0",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * n = 0"
                },
                {
                    "args": "m * n = 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, 0 ≤ x, x = 0 ⊢ m * n = 0"
                },
                {
                    "args": "rpow_one, (1::real) ^ n = 1",
                    "id": "1.1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::real) ^ n = 1"
                },
                {
                    "args": "if_P, (1::real) ^ n = (if m * n = 0 then 1 else 0)",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, m = 0, m = 0, 0 ≤ x, x = 0 ⊢ (1::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.4",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, m = 0, m = 0 ⊢ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.0",
                        "1.1.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⊢ m = 0 ⟶ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⊢ ¬(m = 0) ⟶ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0, ¬(m = 0) ⊢ n = 0 ⟶ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "real_mul_rzero, m * 0 = 0",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m * 0 = 0"
                },
                {
                    "args": "m * n = 0",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, 0 ≤ x, x = 0, ¬(m = 0) ⊢ m * n = 0"
                },
                {
                    "args": "rpow_0, (0::real) ^ (0::real) = 1",
                    "id": "1.2.1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) ^ (0::real) = 1"
                },
                {
                    "args": "(0::real) ^ n = 1",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, 0 ≤ x, x = 0, ¬(m = 0) ⊢ (0::real) ^ n = 1"
                },
                {
                    "args": "if_P, (0::real) ^ n = (if m * n = 0 then 1 else 0)",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.4",
                        "1.2.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), n = 0, n = 0, 0 ≤ x, x = 0, ¬(m = 0) ⊢ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1.6",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0, ¬(m = 0) ⊢ n = 0 ⟶ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0, ¬(m = 0) ⊢ ¬(n = 0) ⟶ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.1",
                    "prevs": [
                        "1.2.0",
                        "1.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0), 0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0) ⊢ ¬(m = 0) ∧ ¬(n = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(m = 0 ∨ n = 0)",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0) ⊢ ¬(m = 0 ∨ n = 0)"
                },
                {
                    "args": "real_entire, ¬(m * n = 0)",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "if_not_P, (if n = 0 then (1::real) else 0) = 0",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (if n = 0 then (1::real) else 0) = 0"
                },
                {
                    "args": "rpow_zero, (0::real) ^ n = 0",
                    "id": "1.2.2.5",
                    "prevs": [
                        "1.2.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0) ⊢ (0::real) ^ n = 0"
                },
                {
                    "args": "if_not_P, (0::real) ^ n = (if m * n = 0 then 1 else 0)",
                    "id": "1.2.2.6",
                    "prevs": [
                        "1.2.2.5",
                        "1.2.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0), 0 ≤ x, x = 0, ¬(m = 0), ¬(n = 0) ⊢ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2.7",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.6"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0, ¬(m = 0) ⊢ ¬(n = 0) ⟶ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), 0 ≤ x, x = 0, ¬(m = 0) ⊢ (0::real) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0, ¬(m = 0), ¬(m = 0) ⊢ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.0",
                        "1.2.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⊢ ¬(m = 0) ⟶ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0, 0 ≤ x, x = 0 ⊢ (if m = 0 then (1::real) else 0) ^ n = (if m * n = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, (0::real) ^ m ^ n = 0 ^ (m * n)",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⊢ (0::real) ^ m ^ n = 0 ^ (m * n)"
                },
                {
                    "args": "x ^ m ^ n = x ^ (m * n)",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, 0 ≤ x ⊢ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ x = 0 ⟶ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ ¬(x = 0) ⟶ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "2.1",
                    "prevs": [
                        "2.0",
                        "0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0), 0 ≤ x ⊢ 0 < x"
                },
                {
                    "args": "rpow_pos_lt, {x: x, y: m}",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ 0 < x ^ m"
                },
                {
                    "args": "n * (m * log x) = m * n * log x",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ n * (m * log x) = m * n * log x"
                },
                {
                    "args": "real_exp_inj, exp (n * (m * log x)) = exp (m * n * log x)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ exp (n * (m * log x)) = exp (m * n * log x)"
                },
                {
                    "args": "log_exp, exp (n * log (exp (m * log x))) = exp (m * n * log x)",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ exp (n * log (exp (m * log x))) = exp (m * n * log x)"
                },
                {
                    "args": "if_P, exp (n * log (if 0 < x then exp (m * log x) else if x = 0 then if m = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs m = of_nat m1 / of_nat n1 then -(exp (m * log (-x))) else exp (m * log (-x)))) = exp (m * n * log x)",
                    "id": "2.6",
                    "prevs": [
                        "2.5",
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0), ¬(x = 0), 0 ≤ x ⊢ exp (n * log (if 0 < x then exp (m * log x) else if x = 0 then if m = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs m = of_nat m1 / of_nat n1 then -(exp (m * log (-x))) else exp (m * log (-x)))) = exp (m * n * log x)"
                },
                {
                    "args": "real_real_power_def, exp (n * log (x ^ m)) = exp (m * n * log x)",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ exp (n * log (x ^ m)) = exp (m * n * log x)"
                },
                {
                    "args": "if_P, exp (n * log (x ^ m)) = (if 0 < x then exp (m * n * log x) else if x = 0 then if m * n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs (m * n) = of_nat m1 / of_nat n1 then -(exp (m * n * log (-x))) else exp (m * n * log (-x)))",
                    "id": "2.8",
                    "prevs": [
                        "2.7",
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0), ¬(x = 0), 0 ≤ x ⊢ exp (n * log (x ^ m)) = (if 0 < x then exp (m * n * log x) else if x = 0 then if m * n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs (m * n) = of_nat m1 / of_nat n1 then -(exp (m * n * log (-x))) else exp (m * n * log (-x)))"
                },
                {
                    "args": "if_P, (if 0 < x ^ m then exp (n * log (x ^ m)) else if x ^ m = 0 then if n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs n = of_nat m1 / of_nat n1 then -(exp (n * log (-(x ^ m)))) else exp (n * log (-(x ^ m)))) = (if 0 < x then exp (m * n * log x) else if x = 0 then if m * n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs (m * n) = of_nat m1 / of_nat n1 then -(exp (m * n * log (-x))) else exp (m * n * log (-x)))",
                    "id": "2.9",
                    "prevs": [
                        "2.8",
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0), 0 ≤ x, ¬(x = 0) ⊢ (if 0 < x ^ m then exp (n * log (x ^ m)) else if x ^ m = 0 then if n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs n = of_nat m1 / of_nat n1 then -(exp (n * log (-(x ^ m)))) else exp (n * log (-(x ^ m)))) = (if 0 < x then exp (m * n * log x) else if x = 0 then if m * n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs (m * n) = of_nat m1 / of_nat n1 then -(exp (m * n * log (-x))) else exp (m * n * log (-x)))"
                },
                {
                    "args": "real_real_power_def, x ^ m ^ n = x ^ (m * n)",
                    "id": "2.10",
                    "prevs": [
                        "2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "",
                    "id": "2.11",
                    "prevs": [
                        "2.0",
                        "2.10"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ ¬(x = 0) ⟶ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "classical_cases",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 ≤ x ⊢ x ^ m ^ n = x ^ (m * n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ x ^ m ^ n = x ^ (m * n)"
                }
            ],
            "prop": "0 ≤ x ⟶ x ^ m ^ n = x ^ (m * n)",
            "steps": [
                {
                    "case": "x = 0",
                    "goal_id": "1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "case": "m = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "m * n = 0",
                    "goal_id": "1.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "fact_ids": [
                        "1.1.2"
                    ],
                    "goal_id": "1.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_one"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "n = 0",
                    "goal_id": "1.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal": "m * n = 0",
                    "goal_id": "1.2.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "fact_ids": [
                        "1.2.1.2"
                    ],
                    "goal_id": "1.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_0"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal": "~(m * n = 0)",
                    "goal_id": "1.2.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.2.2.3"
                    ],
                    "goal_id": "1.2.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "0 < x ^ m",
                    "goal_id": "2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_pos_lt"
                },
                {
                    "fact_ids": [
                        "2.0",
                        "0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_exp"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_lneg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "-x = 0",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ -x = 0"
                },
                {
                    "args": "¬(0 < -x)",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ ¬(0 < -x)"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "0.3",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ y = 0 ⟶ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "y = 0",
                    "id": "0.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "",
                    "id": "0.4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0 ⊢ ∀x. ∀x1. ¬(odd x) ∨ ¬(odd x1) ∨ ¬(0 = of_nat x / of_nat x1)"
                },
                {
                    "args": "m, nat",
                    "id": "0.4.1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n, nat",
                    "id": "0.4.1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "",
                    "id": "0.4.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0 ⊢ even m ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "even m",
                    "id": "0.4.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⊢ even m"
                },
                {
                    "args": "disjI1, {A: even m, B: even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)}",
                    "id": "0.4.1.2.1",
                    "prevs": [
                        "0.4.1.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, y = 0, even m ⊢ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.2.2",
                    "prevs": [
                        "0.4.1.2.0",
                        "0.4.1.2.1"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0 ⊢ even m ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0 ⊢ ¬(even m) ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "¬(even m)",
                    "id": "0.4.1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even m) ⊢ ¬(even m)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0, ¬(even m) ⊢ even n ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "even n",
                    "id": "0.4.1.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ⊢ even n"
                },
                {
                    "args": "disjI1, {A: even n, B: ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)}",
                    "id": "0.4.1.3.1.1",
                    "prevs": [
                        "0.4.1.3.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, y = 0, ¬(even m), even n ⊢ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "disjI2, {A: even m, B: even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)}",
                    "id": "0.4.1.3.1.2",
                    "prevs": [
                        "0.4.1.3.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, y = 0, ¬(even m), even n ⊢ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.1.3",
                    "prevs": [
                        "0.4.1.3.1.0",
                        "0.4.1.3.1.2"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0, ¬(even m) ⊢ even n ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0, ¬(even m) ⊢ ¬(even n) ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "¬(even n)",
                    "id": "0.4.1.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even n) ⊢ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ m = 0 ⟶ even m"
                },
                {
                    "args": "m = 0",
                    "id": "0.4.1.3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "trueI",
                    "id": "0.4.1.3.2.1.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "0.4.1.3.2.1.2",
                    "prevs": [
                        "0.4.1.3.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n), m = 0 ⊢ even 0"
                },
                {
                    "args": "even m",
                    "id": "0.4.1.3.2.1.3",
                    "prevs": [
                        "0.4.1.3.2.1.0",
                        "0.4.1.3.2.1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, x = 0, y = 0, ¬(even m), ¬(even n) ⊢ even m"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.2.1.4",
                    "prevs": [
                        "0.4.1.3.2.1.0",
                        "0.4.1.3.2.1.3"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ m = 0 ⟶ even m"
                },
                {
                    "args": "double_neg, ¬¬(m = 0) ⟶ ¬¬(even m)",
                    "id": "0.4.1.3.2.2",
                    "prevs": [
                        "0.4.1.3.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬¬(m = 0) ⟶ ¬¬(even m)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.4.1.3.2.3",
                    "prevs": [
                        "0.4.1.3.0",
                        "0.4.1.3.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(even m), x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ n = 0 ⟶ even n"
                },
                {
                    "args": "n = 0",
                    "id": "0.4.1.3.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "trueI",
                    "id": "0.4.1.3.2.4.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "0.4.1.3.2.4.2",
                    "prevs": [
                        "0.4.1.3.2.4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n), n = 0 ⊢ even 0"
                },
                {
                    "args": "even n",
                    "id": "0.4.1.3.2.4.3",
                    "prevs": [
                        "0.4.1.3.2.4.0",
                        "0.4.1.3.2.4.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, x = 0, y = 0, ¬(even m), ¬(even n) ⊢ even n"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.2.4.4",
                    "prevs": [
                        "0.4.1.3.2.4.0",
                        "0.4.1.3.2.4.3"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ n = 0 ⟶ even n"
                },
                {
                    "args": "double_neg, ¬¬(n = 0) ⟶ ¬¬(even n)",
                    "id": "0.4.1.3.2.5",
                    "prevs": [
                        "0.4.1.3.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬¬(n = 0) ⟶ ¬¬(even n)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.4.1.3.2.6",
                    "prevs": [
                        "0.4.1.3.2.0",
                        "0.4.1.3.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(even n), x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬(n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "0.4.1.3.2.7",
                    "prevs": [
                        "0.4.1.3.2.3",
                        "0.4.1.3.2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n), x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬(m = 0) ∧ ¬(n = 0)"
                },
                {
                    "args": "real_of_nat_eq, ¬((of_nat::nat ⇒ real) m = of_nat 0) ∧ ¬((of_nat::nat ⇒ real) n = of_nat 0)",
                    "id": "0.4.1.3.2.8",
                    "prevs": [
                        "0.4.1.3.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬((of_nat::nat ⇒ real) m = of_nat 0) ∧ ¬((of_nat::nat ⇒ real) n = of_nat 0)"
                },
                {
                    "args": "real_zero_def, ¬(of_nat m = (0::real)) ∧ ¬(of_nat n = (0::real))",
                    "id": "0.4.1.3.2.9",
                    "prevs": [
                        "0.4.1.3.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬(of_nat m = (0::real)) ∧ ¬(of_nat n = (0::real))"
                },
                {
                    "args": "real_inv_eq_0, ¬(of_nat m = (0::real)) ∧ ¬(real_inverse (of_nat n) = 0)",
                    "id": "0.4.1.3.2.10",
                    "prevs": [
                        "0.4.1.3.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬(of_nat m = (0::real)) ∧ ¬(real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)",
                    "id": "0.4.1.3.2.11",
                    "prevs": [
                        "0.4.1.3.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "disjI2, {A: even n, B: ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)}",
                    "id": "0.4.1.3.2.12",
                    "prevs": [
                        "0.4.1.3.2.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "disjI2, {A: even m, B: even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)}",
                    "id": "0.4.1.3.2.13",
                    "prevs": [
                        "0.4.1.3.2.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, y = 0, ¬(even m), ¬(even n) ⊢ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.2.14",
                    "prevs": [
                        "0.4.1.3.2.0",
                        "0.4.1.3.2.13"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0, ¬(even m) ⊢ ¬(even n) ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "0.4.1.3.3",
                    "prevs": [
                        "0.4.1.3.1",
                        "0.4.1.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, y = 0, ¬(even m), x = 0, y = 0, ¬(even m) ⊢ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "",
                    "id": "0.4.1.3.4",
                    "prevs": [
                        "0.4.1.3.0",
                        "0.4.1.3.3"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0 ⊢ ¬(even m) ⟶ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "0.4.1.4",
                    "prevs": [
                        "0.4.1.2",
                        "0.4.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, y = 0, x = 0, y = 0 ⊢ even m ∨ even n ∨ ¬(of_nat m = (0::real) ∨ real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "real_entire, even m ∨ even n ∨ ¬(of_nat m * real_inverse (of_nat n) = 0)",
                    "id": "0.4.1.5",
                    "prevs": [
                        "0.4.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ even m ∨ even n ∨ ¬(of_nat m * real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "eq_sym_eq, even m ∨ even n ∨ ¬(0 = of_nat m * real_inverse (of_nat n))",
                    "id": "0.4.1.6",
                    "prevs": [
                        "0.4.1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ even m ∨ even n ∨ ¬(0 = of_nat m * real_inverse (of_nat n))"
                },
                {
                    "args": "real_divide_def, even m ∨ even n ∨ ¬(0 = of_nat m / of_nat n)",
                    "id": "0.4.1.7",
                    "prevs": [
                        "0.4.1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ even m ∨ even n ∨ ¬(0 = of_nat m / of_nat n)"
                },
                {
                    "args": "not_odd, ¬(odd m) ∨ ¬(odd n) ∨ ¬(0 = of_nat m / of_nat n)",
                    "id": "0.4.1.8",
                    "prevs": [
                        "0.4.1.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ ¬(odd m) ∨ ¬(odd n) ∨ ¬(0 = of_nat m / of_nat n)"
                },
                {
                    "args": "",
                    "id": "0.4.1.9",
                    "prevs": [
                        "0.4.1.0",
                        "0.4.1.1",
                        "0.4.1.8"
                    ],
                    "rule": "intros",
                    "th": "x = 0, y = 0 ⊢ ∀m. ∀n. ¬(odd m) ∨ ¬(odd n) ∨ ¬(0 = of_nat m / of_nat n)"
                },
                {
                    "args": "de_morgan_thm1, ∀x. ∀x1. ¬(odd x) ∨ ¬(odd x1 ∧ 0 = of_nat x / of_nat x1)",
                    "id": "0.4.2",
                    "prevs": [
                        "0.4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ ∀x. ∀x1. ¬(odd x) ∨ ¬(odd x1 ∧ 0 = of_nat x / of_nat x1)"
                },
                {
                    "args": "de_morgan_thm1, ∀x. ∀x1. ¬(odd x ∧ odd x1 ∧ 0 = of_nat x / of_nat x1)",
                    "id": "0.4.3",
                    "prevs": [
                        "0.4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ ∀x. ∀x1. ¬(odd x ∧ odd x1 ∧ 0 = of_nat x / of_nat x1)"
                },
                {
                    "args": "not_exists, ∀x. ¬(∃n. odd x ∧ odd n ∧ 0 = of_nat x / of_nat n)",
                    "id": "0.4.4",
                    "prevs": [
                        "0.4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ ∀x. ¬(∃n. odd x ∧ odd n ∧ 0 = of_nat x / of_nat n)"
                },
                {
                    "args": "not_exists, ¬(∃m. ∃n. odd m ∧ odd n ∧ 0 = of_nat m / of_nat n)",
                    "id": "0.4.5",
                    "prevs": [
                        "0.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ 0 = of_nat m / of_nat n)"
                },
                {
                    "args": "real_abs_0, ¬(∃m. ∃n. odd m ∧ odd n ∧ abs 0 = of_nat m / of_nat n)",
                    "id": "0.4.6",
                    "prevs": [
                        "0.4.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs 0 = of_nat m / of_nat n)"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "0.4.7",
                    "prevs": [
                        "0.4.0",
                        "0.4.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y = 0, x = 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "if_not_P, (1::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -1 else 1)",
                    "id": "0.4.8",
                    "prevs": [
                        "0.4.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y = 0, x = 0 ⊢ (1::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -1 else 1)"
                },
                {
                    "args": "if_P, (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)",
                    "id": "0.4.9",
                    "prevs": [
                        "0.4.8",
                        "0.4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, y = 0 ⊢ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "0.4.10",
                    "prevs": [
                        "0.4.0",
                        "0.4.9"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ y = 0 ⟶ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ ¬(y = 0) ⟶ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "0.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "0.5.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, ¬(y = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "0.5.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "if_P, (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)",
                    "id": "0.5.1.1",
                    "prevs": [
                        "0.5.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "",
                    "id": "0.5.1.2",
                    "prevs": [
                        "0.5.1.0",
                        "0.5.1.1"
                    ],
                    "rule": "intros",
                    "th": "x = 0, ¬(y = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "",
                    "id": "0.5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, ¬(y = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "0.5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "if_not_P, (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)",
                    "id": "0.5.2.1",
                    "prevs": [
                        "0.5.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "",
                    "id": "0.5.2.2",
                    "prevs": [
                        "0.5.2.0",
                        "0.5.2.1"
                    ],
                    "rule": "intros",
                    "th": "x = 0, ¬(y = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "0.5.3",
                    "prevs": [
                        "0.5.1",
                        "0.5.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, ¬(y = 0), x = 0, ¬(y = 0) ⊢ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then 0 else 0)"
                },
                {
                    "args": "real_neg_0, (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -0 else 0)",
                    "id": "0.5.4",
                    "prevs": [
                        "0.5.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(y = 0) ⊢ (0::real) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -0 else 0)"
                },
                {
                    "args": "if_not_P, (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)",
                    "id": "0.5.5",
                    "prevs": [
                        "0.5.4",
                        "0.5.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(y = 0), ¬(y = 0) ⊢ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "0.5.6",
                    "prevs": [
                        "0.5.0",
                        "0.5.5"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ ¬(y = 0) ⟶ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "0.6",
                    "prevs": [
                        "0.4",
                        "0.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, x = 0 ⊢ (if y = 0 then (1::real) else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if y = 0 then 1 else 0) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if y = 0 then 1 else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) else if 0 < x then exp (y * log x) else if y = 0 then 1 else 0)",
                    "id": "0.7",
                    "prevs": [
                        "0.6",
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ (if y = 0 then 1 else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) else if 0 < x then exp (y * log x) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if 0 < -x then exp (y * log (-x)) else if y = 0 then 1 else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) else if 0 < x then exp (y * log x) else if y = 0 then 1 else 0)",
                    "id": "0.8",
                    "prevs": [
                        "0.7",
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ (if 0 < -x then exp (y * log (-x)) else if y = 0 then 1 else 0) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) else if 0 < x then exp (y * log x) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) else if 0 < x then exp (y * log x) else if y = 0 then 1 else 0)",
                    "id": "0.9",
                    "prevs": [
                        "0.8",
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) else if 0 < x then exp (y * log x) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.10",
                    "prevs": [
                        "0.9",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "0.11",
                    "prevs": [
                        "0.0",
                        "0.10"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "¬(-x = 0)",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0) ⊢ ¬(-x = 0)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ 0 < -x ⟶ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "0 < -x",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < -x ⊢ 0 < -x"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.2.1",
                    "prevs": [
                        "1.2.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "0 < -x, ¬(x = 0) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 0 < -x ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "real_neg_neg, exp (y * log (-x)) = --(exp (y * log (-x)))",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (y * log (-x)) = --(exp (y * log (-x)))"
                },
                {
                    "args": "if_P, exp (y * log (-x)) = -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.1",
                        "1.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < -x, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ exp (y * log (-x)) = -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_P, exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2",
                        "1.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < -x, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 0 < -x ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 0 < -x ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "1.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "if_not_P, exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.3.1",
                    "prevs": [
                        "1.2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.3.2",
                    "prevs": [
                        "1.2.3.1",
                        "1.2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < -x, ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.3.3",
                    "prevs": [
                        "1.2.3.0",
                        "1.2.3.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 0 < -x ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.2",
                        "1.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), 0 < -x, ¬(x = 0), 0 < -x ⊢ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < -x, ¬(x = 0) ⊢ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5",
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < -x, 0 < -x, ¬(x = 0) ⊢ exp (y * log (-x)) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_P, (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < -x, 0 < -x ⊢ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.0",
                        "1.2.7"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ 0 < -x ⟶ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(0 < -x) ⟶ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(0 < -x)",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < -x) ⊢ ¬(0 < -x)"
                },
                {
                    "args": "0 < x",
                    "id": "1.3.1",
                    "prevs": [
                        "1.3.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 < -x), ¬(x = 0) ⊢ 0 < x"
                },
                {
                    "args": "real_neg_neg, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log x)) else exp (y * log x))",
                    "id": "1.3.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log x)) else exp (y * log x))"
                },
                {
                    "args": "if_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.3.3",
                    "prevs": [
                        "1.3.2",
                        "1.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < -x), ¬(0 < -x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.3.4",
                    "prevs": [
                        "1.3.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < -x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.3.5",
                    "prevs": [
                        "1.3.4",
                        "1.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < -x), ¬(0 < -x) ⊢ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.3.6",
                    "prevs": [
                        "1.3.0",
                        "1.3.5"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(0 < -x) ⟶ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(x = 0) ⊢ (if 0 < -x then exp (y * log (-x)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.5",
                    "prevs": [
                        "1.4",
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(x = 0) ⊢ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < -x then exp (y * log (-x)) else if -x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (--x))) else exp (y * log (--x))) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) else if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_real_power_def, -x ^ y = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(x ^ y) else x ^ y)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ -x ^ y = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(x ^ y) else x ^ y)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ -x ^ y = (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(x ^ y) else x ^ y)"
                }
            ],
            "prop": [
                "-x ^ y = ",
                "(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(x ^ y) else x ^ y)"
            ],
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "-x = 0",
                    "goal_id": "0.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~(0 < -x)",
                    "goal_id": "0.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "~(0 < x)",
                    "goal_id": "0.3",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.3",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "y = 0",
                    "goal_id": "0.4",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.4.0"
                    ],
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "goal_id": "0.4.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.4.0"
                    ],
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_0"
                },
                {
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_exists"
                },
                {
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_exists"
                },
                {
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0.4.1",
                    "method_name": "introduction",
                    "names": "m,n"
                },
                {
                    "goal_id": "0.4.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_odd"
                },
                {
                    "goal_id": "0.4.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0.4.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0.4.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_entire"
                },
                {
                    "case": "even m",
                    "goal_id": "0.4.1.2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.4.1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.4.1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.4.1.3",
                    "method_name": "introduction"
                },
                {
                    "case": "even n",
                    "goal_id": "0.4.1.3.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.4.1.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.4.1.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.4.1.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.4.1.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_eq_0"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "0.4.1.3.0"
                    ],
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "0.4.1.3.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.4.1.3.2.1.0"
                    ],
                    "goal_id": "0.4.1.3.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4.1.3.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0.4.1.3.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "fact_ids": [
                        "0.4.1.3.2.0"
                    ],
                    "goal_id": "0.4.1.3.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.4.1.3.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "0.4.1.3.2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.4.1.3.2.4.0"
                    ],
                    "goal_id": "0.4.1.3.2.4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4.1.3.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0.4.1.3.2.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "fact_ids": [
                        "0.4.7"
                    ],
                    "goal_id": "0.4.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.5.0"
                    ],
                    "goal_id": "0.5.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.5.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_0"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "0.5.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.5.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.5.1.0"
                    ],
                    "goal_id": "0.5.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.5.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.5.2.0"
                    ],
                    "goal_id": "0.5.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal": "~(-x = 0)",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "0 < -x",
                    "goal_id": "1.2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~(0 < x)",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "1.2.2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.3.0"
                    ],
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "1.2.3.0"
                    ],
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.3.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "0 < x",
                    "goal_id": "1.3.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.3.0",
                        "1.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.3.1"
                    ],
                    "goal_id": "1.3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_eq_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ y = 0 ⟶ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "y = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "(1::real) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0",
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "y = 0, x = 0 ⊢ (1::real) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_P, (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.1",
                        "0.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, y = 0, y = 0 ⊢ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.0",
                        "0.2.2"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ y = 0 ⟶ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ ¬(y = 0) ⟶ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "0.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "(0::real) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "0.3.1",
                    "prevs": [
                        "0.3.0",
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "¬(y = 0), x = 0 ⊢ (0::real) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_not_P, (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "0.3.2",
                    "prevs": [
                        "0.3.1",
                        "0.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(y = 0), ¬(y = 0) ⊢ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "0.3.3",
                    "prevs": [
                        "0.3.0",
                        "0.3.2"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ ¬(y = 0) ⟶ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "0.4",
                    "prevs": [
                        "0.2",
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, x = 0 ⊢ (if y = 0 then (1::real) else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "0.5",
                    "prevs": [
                        "0.4",
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ (if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_P, (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "0.6",
                    "prevs": [
                        "0.5",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "0.7",
                    "prevs": [
                        "0.0",
                        "0.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ 0 < x ⟶ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "0 < x",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 0 < x ⊢ exp (y * log x) = 0 ⟶ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "exp (y * log x) = 0",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (y * log x) = 0 ⊢ exp (y * log x) = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 0 < x, exp (y * log x) = 0 ⊢ ¬(x = 0 ∧ ¬(y = 0)) ⟶ ¬(exp (y * log x) = 0)"
                },
                {
                    "args": "¬(x = 0 ∧ ¬(y = 0))",
                    "id": "1.1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0 ∧ ¬(y = 0)) ⊢ ¬(x = 0 ∧ ¬(y = 0))"
                },
                {
                    "args": "real_exp_nz, {x: y * log x}",
                    "id": "1.1.1.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp (y * log x) = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.1.2",
                    "prevs": [
                        "1.1.1.1.0",
                        "1.1.1.1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 0 < x, exp (y * log x) = 0 ⊢ ¬(x = 0 ∧ ¬(y = 0)) ⟶ ¬(exp (y * log x) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.1.1.2",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "exp (y * log x) = 0, ¬(x = 0), 0 < x, exp (y * log x) = 0 ⊢ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 0 < x ⊢ exp (y * log x) = 0 ⟶ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 0 < x ⊢ x = 0 ∧ ¬(y = 0) ⟶ exp (y * log x) = 0"
                },
                {
                    "args": "x = 0 ∧ ¬(y = 0)",
                    "id": "1.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ∧ ¬(y = 0) ⊢ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "conjD1, {A: x = 0, B: ¬(y = 0)}",
                    "id": "1.1.2.1",
                    "prevs": [
                        "1.1.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ∧ ¬(y = 0) ⊢ x = 0"
                },
                {
                    "args": "exp (y * log x) = 0",
                    "id": "1.1.2.2",
                    "prevs": [
                        "1.1.2.1",
                        "1.1.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ∧ ¬(y = 0), 0 < x ⊢ exp (y * log x) = 0"
                },
                {
                    "args": "",
                    "id": "1.1.2.3",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 0 < x ⊢ x = 0 ∧ ¬(y = 0) ⟶ exp (y * log x) = 0"
                },
                {
                    "args": "iffI",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.1",
                        "1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), 0 < x, ¬(x = 0), 0 < x ⊢ exp (y * log x) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_P, (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < x, 0 < x ⊢ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ 0 < x ⟶ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(0 < x) ⟶ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (y * log (-x))) = 0 ⟶ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "-(exp (y * log (-x))) = 0",
                    "id": "1.2.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-(exp (y * log (-x))) = 0 ⊢ -(exp (y * log (-x))) = 0"
                },
                {
                    "args": "",
                    "id": "1.2.1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, -(exp (y * log (-x))) = 0 ⊢ ¬(x = 0 ∧ ¬(y = 0)) ⟶ ¬(-(exp (y * log (-x))) = 0)"
                },
                {
                    "args": "¬(x = 0 ∧ ¬(y = 0))",
                    "id": "1.2.1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0 ∧ ¬(y = 0)) ⊢ ¬(x = 0 ∧ ¬(y = 0))"
                },
                {
                    "args": "∀a::real. -a = 0 ⟷ a = 0",
                    "id": "1.2.1.1.1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::real. -a = 0 ⟷ a = 0"
                },
                {
                    "args": "real_exp_nz, {x: y * log (-x)}",
                    "id": "1.2.1.1.1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp (y * log (-x)) = 0)"
                },
                {
                    "args": "¬(-(exp (y * log (-x))) = 0)",
                    "id": "1.2.1.1.1.3",
                    "prevs": [
                        "1.2.1.1.1.1",
                        "1.2.1.1.1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, -(exp (y * log (-x))) = 0, ¬(x = 0 ∧ ¬(y = 0)) ⊢ ¬(-(exp (y * log (-x))) = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1.1.1.4",
                    "prevs": [
                        "1.2.1.1.1.0",
                        "1.2.1.1.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, -(exp (y * log (-x))) = 0 ⊢ ¬(x = 0 ∧ ¬(y = 0)) ⟶ ¬(-(exp (y * log (-x))) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.2.1.1.2",
                    "prevs": [
                        "1.2.1.1.0",
                        "1.2.1.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "-(exp (y * log (-x))) = 0, ¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, -(exp (y * log (-x))) = 0 ⊢ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1.1.3",
                    "prevs": [
                        "1.2.1.1.0",
                        "1.2.1.1.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (y * log (-x))) = 0 ⟶ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ x = 0 ∧ ¬(y = 0) ⟶ -(exp (y * log (-x))) = 0"
                },
                {
                    "args": "x = 0 ∧ ¬(y = 0)",
                    "id": "1.2.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ∧ ¬(y = 0) ⊢ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "conjD1, {A: x = 0, B: ¬(y = 0)}",
                    "id": "1.2.1.2.1",
                    "prevs": [
                        "1.2.1.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ∧ ¬(y = 0) ⊢ x = 0"
                },
                {
                    "args": "negE_gen, {A: x = 0, C: -(exp (y * log (-x))) = 0}",
                    "id": "1.2.1.2.2",
                    "prevs": [
                        "1.0",
                        "1.2.1.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), x = 0 ∧ ¬(y = 0) ⊢ -(exp (y * log (-x))) = 0"
                },
                {
                    "args": "",
                    "id": "1.2.1.2.3",
                    "prevs": [
                        "1.2.1.2.0",
                        "1.2.1.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ x = 0 ∧ ¬(y = 0) ⟶ -(exp (y * log (-x))) = 0"
                },
                {
                    "args": "iffI",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.1",
                        "1.2.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.3",
                        "1.2.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (y * log (-x)) = 0 ⟶ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "exp (y * log (-x)) = 0",
                    "id": "1.2.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "exp (y * log (-x)) = 0 ⊢ exp (y * log (-x)) = 0"
                },
                {
                    "args": "",
                    "id": "1.2.2.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), exp (y * log (-x)) = 0 ⊢ ¬(x = 0 ∧ ¬(y = 0)) ⟶ ¬(exp (y * log (-x)) = 0)"
                },
                {
                    "args": "¬(x = 0 ∧ ¬(y = 0))",
                    "id": "1.2.2.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0 ∧ ¬(y = 0)) ⊢ ¬(x = 0 ∧ ¬(y = 0))"
                },
                {
                    "args": "real_exp_nz, {x: y * log (-x)}",
                    "id": "1.2.2.1.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(exp (y * log (-x)) = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2.1.1.2",
                    "prevs": [
                        "1.2.2.1.1.0",
                        "1.2.2.1.1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), exp (y * log (-x)) = 0 ⊢ ¬(x = 0 ∧ ¬(y = 0)) ⟶ ¬(exp (y * log (-x)) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.2.2.1.2",
                    "prevs": [
                        "1.2.2.1.0",
                        "1.2.2.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "exp (y * log (-x)) = 0, ¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), exp (y * log (-x)) = 0 ⊢ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2.1.3",
                    "prevs": [
                        "1.2.2.1.0",
                        "1.2.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (y * log (-x)) = 0 ⟶ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ x = 0 ∧ ¬(y = 0) ⟶ exp (y * log (-x)) = 0"
                },
                {
                    "args": "x = 0 ∧ ¬(y = 0)",
                    "id": "1.2.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ∧ ¬(y = 0) ⊢ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "conjD1, {A: x = 0, B: ¬(y = 0)}",
                    "id": "1.2.2.2.1",
                    "prevs": [
                        "1.2.2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ∧ ¬(y = 0) ⊢ x = 0"
                },
                {
                    "args": "negE_gen, {A: x = 0, C: exp (y * log (-x)) = 0}",
                    "id": "1.2.2.2.2",
                    "prevs": [
                        "1.0",
                        "1.2.2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), x = 0 ∧ ¬(y = 0) ⊢ exp (y * log (-x)) = 0"
                },
                {
                    "args": "",
                    "id": "1.2.2.2.3",
                    "prevs": [
                        "1.2.2.2.0",
                        "1.2.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ x = 0 ∧ ¬(y = 0) ⟶ exp (y * log (-x)) = 0"
                },
                {
                    "args": "iffI",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.1",
                        "1.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (y * log (-x)) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_not_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.3",
                        "1.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2.5",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(0 < x), ¬(x = 0), ¬(0 < x) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ¬(0 < x) ⊢ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.0",
                        "1.2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(0 < x) ⟶ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(x = 0) ⊢ (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(x = 0) ⊢ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "real_real_power_def, x ^ y = 0 ⟷ x = 0 ∧ ¬(y = 0)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ y = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ y = 0 ⟷ x = 0 ∧ ¬(y = 0)"
                }
            ],
            "prop": "x ^ y = 0 ⟷ x = 0 ∧ ¬(y = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~(0<x)",
                    "goal_id": "0.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "y = 0",
                    "goal_id": "0.2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.2.0",
                        "0.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.3.0"
                    ],
                    "goal_id": "0.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "0.3.0",
                        "0.0"
                    ],
                    "goal_id": "0.3.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "0 < x",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.1.1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.2.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.1.2.1",
                        "1.1.0"
                    ],
                    "goal_id": "1.1.2.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "1.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.1.0"
                    ],
                    "goal_id": "1.2.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2.1.1.1",
                    "method_name": "introduction"
                },
                {
                    "goal": "!a::real. -a = 0 <--> a = 0",
                    "goal_id": "1.2.1.1.1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1.1.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1.1.1.1"
                    ],
                    "goal_id": "1.2.1.1.1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1.1.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                },
                {
                    "goal_id": "1.2.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.2.0"
                    ],
                    "goal_id": "1.2.1.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "1.2.1.2.1"
                    ],
                    "goal_id": "1.2.1.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.1.0"
                    ],
                    "goal_id": "1.2.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2.2.1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_nz"
                },
                {
                    "goal_id": "1.2.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.2.0"
                    ],
                    "goal_id": "1.2.2.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "1.2.2.2.1"
                    ],
                    "goal_id": "1.2.2.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀z::real. ∀y::real. ∀x. 0 ≤ x ⟶ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "c, real",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR c"
                },
                {
                    "args": "b, real",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "a, real",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "0 ≤ a",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ a ⊢ 0 ≤ a"
                },
                {
                    "args": "0 ≤ b",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ b ⊢ 0 ≤ b"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ a, 0 ≤ b ⊢ c = 0 ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "c = 0",
                    "id": "0.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "c = 0 ⊢ c = 0"
                },
                {
                    "args": "real_mul_lid, (1::real) = 1 * 1",
                    "id": "0.5.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::real) = 1 * 1"
                },
                {
                    "args": "rpow_0, (a * b) ^ (0::real) = a ^ (0::real) * b ^ (0::real)",
                    "id": "0.5.2",
                    "prevs": [
                        "0.5.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, c = 0 ⊢ (a * b) ^ (0::real) = a ^ (0::real) * b ^ (0::real)"
                },
                {
                    "args": "(a * b) ^ c = a ^ c * b ^ c",
                    "id": "0.5.3",
                    "prevs": [
                        "0.5.0",
                        "0.5.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "c = 0, 0 ≤ a, 0 ≤ b ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.5.4",
                    "prevs": [
                        "0.5.0",
                        "0.5.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ a, 0 ≤ b ⊢ c = 0 ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ a, 0 ≤ b ⊢ ¬(c = 0) ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "¬(c = 0)",
                    "id": "0.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "",
                    "id": "0.6.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0) ⊢ a = 0 ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "a = 0",
                    "id": "0.6.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = 0 ⊢ a = 0"
                },
                {
                    "args": "real_mul_lzero, 0 = 0 * b ^ c",
                    "id": "0.6.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 * b ^ c"
                },
                {
                    "args": "if_not_P, (if c = 0 then 1 else 0) = (if c = 0 then 1 else 0) * b ^ c",
                    "id": "0.6.1.2",
                    "prevs": [
                        "0.6.1.1",
                        "0.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), a = 0, ¬(c = 0) ⊢ (if c = 0 then 1 else 0) = (if c = 0 then 1 else 0) * b ^ c"
                },
                {
                    "args": "rpow_zero, 0 ^ c = 0 ^ c * b ^ c",
                    "id": "0.6.1.3",
                    "prevs": [
                        "0.6.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), a = 0 ⊢ 0 ^ c = 0 ^ c * b ^ c"
                },
                {
                    "args": "real_mul_lzero, (0 * b) ^ c = 0 ^ c * b ^ c",
                    "id": "0.6.1.4",
                    "prevs": [
                        "0.6.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), a = 0 ⊢ (0 * b) ^ c = 0 ^ c * b ^ c"
                },
                {
                    "args": "(a * b) ^ c = a ^ c * b ^ c",
                    "id": "0.6.1.5",
                    "prevs": [
                        "0.6.1.0",
                        "0.6.1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a = 0, 0 ≤ a, 0 ≤ b, ¬(c = 0) ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.1.6",
                    "prevs": [
                        "0.6.1.0",
                        "0.6.1.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0) ⊢ a = 0 ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0) ⊢ ¬(a = 0) ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "¬(a = 0)",
                    "id": "0.6.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(a = 0) ⊢ ¬(a = 0)"
                },
                {
                    "args": "",
                    "id": "0.6.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0) ⊢ b = 0 ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "b = 0",
                    "id": "0.6.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b = 0 ⊢ b = 0"
                },
                {
                    "args": "real_mul_rzero, 0 = a ^ c * 0",
                    "id": "0.6.2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = a ^ c * 0"
                },
                {
                    "args": "if_not_P, (if c = 0 then 1 else 0) = a ^ c * (if c = 0 then 1 else 0)",
                    "id": "0.6.2.1.2",
                    "prevs": [
                        "0.6.2.1.1",
                        "0.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), b = 0, ¬(c = 0) ⊢ (if c = 0 then 1 else 0) = a ^ c * (if c = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, 0 ^ c = a ^ c * 0 ^ c",
                    "id": "0.6.2.1.3",
                    "prevs": [
                        "0.6.2.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), b = 0 ⊢ 0 ^ c = a ^ c * 0 ^ c"
                },
                {
                    "args": "real_mul_rzero, (a * 0) ^ c = a ^ c * 0 ^ c",
                    "id": "0.6.2.1.4",
                    "prevs": [
                        "0.6.2.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), b = 0 ⊢ (a * 0) ^ c = a ^ c * 0 ^ c"
                },
                {
                    "args": "(a * b) ^ c = a ^ c * b ^ c",
                    "id": "0.6.2.1.5",
                    "prevs": [
                        "0.6.2.1.0",
                        "0.6.2.1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b = 0, 0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0) ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.2.1.6",
                    "prevs": [
                        "0.6.2.1.0",
                        "0.6.2.1.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0) ⊢ b = 0 ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0) ⊢ ¬(b = 0) ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "¬(b = 0)",
                    "id": "0.6.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(b = 0) ⊢ ¬(b = 0)"
                },
                {
                    "args": "¬(a * b = 0)",
                    "id": "0.6.2.2.1",
                    "prevs": [
                        "0.6.2.2.0",
                        "0.6.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(b = 0), ¬(a = 0) ⊢ ¬(a * b = 0)"
                },
                {
                    "args": "0 < a",
                    "id": "0.6.2.2.2",
                    "prevs": [
                        "0.6.2.0",
                        "0.3"
                    ],
                    "rule": "z3",
                    "th": "¬(a = 0), 0 ≤ a ⊢ 0 < a"
                },
                {
                    "args": "0 < b",
                    "id": "0.6.2.2.3",
                    "prevs": [
                        "0.6.2.2.0",
                        "0.4"
                    ],
                    "rule": "z3",
                    "th": "¬(b = 0), 0 ≤ b ⊢ 0 < b"
                },
                {
                    "args": "real_lt_mul",
                    "id": "0.6.2.2.4",
                    "prevs": [
                        "0.6.2.2.2",
                        "0.6.2.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(a = 0), 0 ≤ a, ¬(b = 0), 0 ≤ b ⊢ 0 < a * b"
                },
                {
                    "args": "log_mul, {x: a, y: b}",
                    "id": "0.6.2.2.5",
                    "prevs": [
                        "0.6.2.2.2",
                        "0.6.2.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0), 0 ≤ a, ¬(b = 0), 0 ≤ b ⊢ log (a * b) = log a + log b"
                },
                {
                    "args": "log (a * b) * c = (log a + log b) * c",
                    "id": "0.6.2.2.6",
                    "prevs": [
                        "0.6.2.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(a = 0), 0 ≤ a, ¬(b = 0), 0 ≤ b ⊢ log (a * b) * c = (log a + log b) * c"
                },
                {
                    "args": "real_add_rdistrib, log (a * b) * c = log a * c + log b * c",
                    "id": "0.6.2.2.7",
                    "prevs": [
                        "0.6.2.2.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0) ⊢ log (a * b) * c = log a * c + log b * c"
                },
                {
                    "args": "real_mult_comm, c * log (a * b) = c * log a + c * log b",
                    "id": "0.6.2.2.8",
                    "prevs": [
                        "0.6.2.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0) ⊢ c * log (a * b) = c * log a + c * log b"
                },
                {
                    "args": "real_exp_inj, exp (c * log (a * b)) = exp (c * log a + c * log b)",
                    "id": "0.6.2.2.9",
                    "prevs": [
                        "0.6.2.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0) ⊢ exp (c * log (a * b)) = exp (c * log a + c * log b)"
                },
                {
                    "args": "real_exp_add, exp (c * log (a * b)) = exp (c * log a) * exp (c * log b)",
                    "id": "0.6.2.2.10",
                    "prevs": [
                        "0.6.2.2.9"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0) ⊢ exp (c * log (a * b)) = exp (c * log a) * exp (c * log b)"
                },
                {
                    "args": "if_P, (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = exp (c * log a) * exp (c * log b)",
                    "id": "0.6.2.2.11",
                    "prevs": [
                        "0.6.2.2.10",
                        "0.6.2.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(a = 0), 0 ≤ a, ¬(b = 0), 0 ≤ b ⊢ (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = exp (c * log a) * exp (c * log b)"
                },
                {
                    "args": "if_P, (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = exp (c * log a) * (if 0 < b then exp (c * log b) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))",
                    "id": "0.6.2.2.12",
                    "prevs": [
                        "0.6.2.2.11",
                        "0.6.2.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(b = 0), 0 ≤ b ⊢ (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = exp (c * log a) * (if 0 < b then exp (c * log b) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))"
                },
                {
                    "args": "if_P, (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))",
                    "id": "0.6.2.2.13",
                    "prevs": [
                        "0.6.2.2.12",
                        "0.6.2.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(a = 0), 0 ≤ a ⊢ (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))"
                },
                {
                    "args": "if_not_P, (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))",
                    "id": "0.6.2.2.14",
                    "prevs": [
                        "0.6.2.2.13",
                        "0.6.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(b = 0) ⊢ (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))"
                },
                {
                    "args": "if_not_P, (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if a = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))",
                    "id": "0.6.2.2.15",
                    "prevs": [
                        "0.6.2.2.14",
                        "0.6.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(a = 0) ⊢ (if 0 < a * b then exp (c * log (a * b)) else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if a = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))"
                },
                {
                    "args": "if_not_P, (if 0 < a * b then exp (c * log (a * b)) else if a * b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if a = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))",
                    "id": "0.6.2.2.16",
                    "prevs": [
                        "0.6.2.2.15",
                        "0.6.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(b = 0), ¬(a = 0) ⊢ (if 0 < a * b then exp (c * log (a * b)) else if a * b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if a = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))"
                },
                {
                    "args": "if_not_P, (if 0 < a * b then exp (c * log (a * b)) else if a * b = 0 then if c = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if a = 0 then if c = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then if c = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))",
                    "id": "0.6.2.2.17",
                    "prevs": [
                        "0.6.2.2.16",
                        "0.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0), ¬(c = 0) ⊢ (if 0 < a * b then exp (c * log (a * b)) else if a * b = 0 then if c = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-(a * b)))) else exp (c * log (-(a * b)))) = (if 0 < a then exp (c * log a) else if a = 0 then if c = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-a))) else exp (c * log (-a))) * (if 0 < b then exp (c * log b) else if b = 0 then if c = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs c = of_nat m / of_nat n then -(exp (c * log (-b))) else exp (c * log (-b)))"
                },
                {
                    "args": "real_real_power_def, (a * b) ^ c = a ^ c * b ^ c",
                    "id": "0.6.2.2.18",
                    "prevs": [
                        "0.6.2.2.17"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), ¬(b = 0) ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.2.2.19",
                    "prevs": [
                        "0.6.2.2.0",
                        "0.6.2.2.18"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0) ⊢ ¬(b = 0) ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "classical_cases",
                    "id": "0.6.2.3",
                    "prevs": [
                        "0.6.2.1",
                        "0.6.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0), 0 ≤ a, 0 ≤ b, ¬(c = 0), ¬(a = 0) ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.2.4",
                    "prevs": [
                        "0.6.2.0",
                        "0.6.2.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0) ⊢ ¬(a = 0) ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "classical_cases",
                    "id": "0.6.3",
                    "prevs": [
                        "0.6.1",
                        "0.6.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ a, 0 ≤ b, ¬(c = 0), 0 ≤ a, 0 ≤ b, ¬(c = 0) ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.6.4",
                    "prevs": [
                        "0.6.0",
                        "0.6.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ a, 0 ≤ b ⊢ ¬(c = 0) ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "classical_cases",
                    "id": "0.7",
                    "prevs": [
                        "0.5",
                        "0.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ a, 0 ≤ b, 0 ≤ a, 0 ≤ b ⊢ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.3",
                        "0.4",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀c::real. ∀b::real. ∀a. 0 ≤ a ⟶ 0 ≤ b ⟶ (a * b) ^ c = a ^ c * b ^ c"
                },
                {
                    "args": "z",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "⊢ ∀y::real. ∀x. 0 ≤ x ⟶ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "real_le_total, {x: x, y: (0::real)}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ≤ 0 ∨ 0 ≤ x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x ≤ 0 ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "x ≤ 0",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ 0 ⊢ x ≤ 0"
                },
                {
                    "args": "0 ≤ -x",
                    "id": "3.1",
                    "prevs": [
                        "3.0"
                    ],
                    "rule": "z3",
                    "th": "x ≤ 0 ⊢ 0 ≤ -x"
                },
                {
                    "args": "real_le_total, {x: y, y: (0::real)}",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ y ≤ 0 ∨ 0 ≤ y"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ 0 ⊢ y ≤ 0 ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "y ≤ 0",
                    "id": "3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ 0 ⊢ y ≤ 0"
                },
                {
                    "args": "0 ≤ -y",
                    "id": "3.3.1",
                    "prevs": [
                        "3.3.0"
                    ],
                    "rule": "z3",
                    "th": "y ≤ 0 ⊢ 0 ≤ -y"
                },
                {
                    "args": "",
                    "id": "3.3.2",
                    "prevs": [
                        "1",
                        "3.1",
                        "3.3.1"
                    ],
                    "rule": "apply_fact",
                    "th": "x ≤ 0, y ≤ 0 ⊢ (-x * -y) ^ z = -x ^ z * -y ^ z"
                },
                {
                    "args": "rpow_lneg",
                    "id": "3.3.3",
                    "prevs": [
                        "3.3.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ≤ 0, y ≤ 0 ⊢ (-x * -y) ^ z = (if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(x ^ z) else x ^ z) * (if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(y ^ z) else y ^ z)"
                },
                {
                    "args": "",
                    "id": "3.3.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ 0, y ≤ 0 ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n",
                    "id": "3.3.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n"
                },
                {
                    "args": "if_P",
                    "id": "3.3.4.1",
                    "prevs": [
                        "3.3.3",
                        "3.3.4.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, y ≤ 0 ⊢ (-x * -y) ^ z = -(x ^ z) * -(y ^ z)"
                },
                {
                    "args": "real_mul_lneg",
                    "id": "3.3.4.2",
                    "prevs": [
                        "3.3.4.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, y ≤ 0 ⊢ -(x * -y) ^ z = -(x ^ z * -(y ^ z))"
                },
                {
                    "args": "real_mul_rneg",
                    "id": "3.3.4.3",
                    "prevs": [
                        "3.3.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, y ≤ 0 ⊢ --(x * y) ^ z = --(x ^ z * y ^ z)"
                },
                {
                    "args": "real_neg_neg",
                    "id": "3.3.4.4",
                    "prevs": [
                        "3.3.4.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, y ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.3.4.5",
                    "prevs": [
                        "3.3.4.0",
                        "3.3.4.4"
                    ],
                    "rule": "intros",
                    "th": "x ≤ 0, y ≤ 0 ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.3.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ 0, y ≤ 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n)",
                    "id": "3.3.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n)"
                },
                {
                    "args": "if_not_P",
                    "id": "3.3.5.1",
                    "prevs": [
                        "3.3.3",
                        "3.3.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n), x ≤ 0, y ≤ 0 ⊢ (-x * -y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "real_mul_lneg",
                    "id": "3.3.5.2",
                    "prevs": [
                        "3.3.5.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n), x ≤ 0, y ≤ 0 ⊢ -(x * -y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "real_mul_rneg",
                    "id": "3.3.5.3",
                    "prevs": [
                        "3.3.5.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n), x ≤ 0, y ≤ 0 ⊢ --(x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "real_neg_neg",
                    "id": "3.3.5.4",
                    "prevs": [
                        "3.3.5.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n), x ≤ 0, y ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.3.5.5",
                    "prevs": [
                        "3.3.5.0",
                        "3.3.5.4"
                    ],
                    "rule": "intros",
                    "th": "x ≤ 0, y ≤ 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "classical_cases",
                    "id": "3.3.6",
                    "prevs": [
                        "3.3.4",
                        "3.3.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ 0, y ≤ 0, x ≤ 0, y ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.3.7",
                    "prevs": [
                        "3.3.0",
                        "3.3.6"
                    ],
                    "rule": "intros",
                    "th": "x ≤ 0 ⊢ y ≤ 0 ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ 0 ⊢ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "0 ≤ y",
                    "id": "3.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "",
                    "id": "3.4.1",
                    "prevs": [
                        "1",
                        "3.1",
                        "3.4.0"
                    ],
                    "rule": "apply_fact",
                    "th": "x ≤ 0, 0 ≤ y ⊢ (-x * y) ^ z = -x ^ z * y ^ z"
                },
                {
                    "args": "real_mul_lneg",
                    "id": "3.4.2",
                    "prevs": [
                        "3.4.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ≤ 0, 0 ≤ y ⊢ -(x * y) ^ z = -x ^ z * y ^ z"
                },
                {
                    "args": "rpow_lneg",
                    "id": "3.4.3",
                    "prevs": [
                        "3.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ≤ 0, 0 ≤ y ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -((x * y) ^ z) else (x * y) ^ z) = (if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(x ^ z) else x ^ z) * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ 0, 0 ≤ y ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n",
                    "id": "3.4.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n"
                },
                {
                    "args": "if_P",
                    "id": "3.4.4.1",
                    "prevs": [
                        "3.4.3",
                        "3.4.4.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, 0 ≤ y ⊢ -((x * y) ^ z) = -(x ^ z) * y ^ z"
                },
                {
                    "args": "real_mul_lneg",
                    "id": "3.4.4.2",
                    "prevs": [
                        "3.4.4.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, 0 ≤ y ⊢ -((x * y) ^ z) = -(x ^ z * y ^ z)"
                },
                {
                    "args": "real_eq_neg2",
                    "id": "3.4.4.3",
                    "prevs": [
                        "3.4.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, x ≤ 0, 0 ≤ y ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4.4.4",
                    "prevs": [
                        "3.4.4.0",
                        "3.4.4.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ 0, 0 ≤ y ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ 0, 0 ≤ y ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n)",
                    "id": "3.4.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n)"
                },
                {
                    "args": "if_not_P",
                    "id": "3.4.5.1",
                    "prevs": [
                        "3.4.3",
                        "3.4.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n), x ≤ 0, 0 ≤ y ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4.5.2",
                    "prevs": [
                        "3.4.5.0",
                        "3.4.5.1"
                    ],
                    "rule": "intros",
                    "th": "x ≤ 0, 0 ≤ y ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "classical_cases",
                    "id": "3.4.6",
                    "prevs": [
                        "3.4.4",
                        "3.4.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ 0, 0 ≤ y, x ≤ 0, 0 ≤ y ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.4.7",
                    "prevs": [
                        "3.4.0",
                        "3.4.6"
                    ],
                    "rule": "intros",
                    "th": "x ≤ 0 ⊢ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "disjE",
                    "id": "3.5",
                    "prevs": [
                        "3.2",
                        "3.3",
                        "3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ 0, x ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≤ 0 ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 ≤ x ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "0 ≤ x",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "real_le_total, {x: y, y: (0::real)}",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ y ≤ 0 ∨ 0 ≤ y"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ y ≤ 0 ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "y ≤ 0",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ 0 ⊢ y ≤ 0"
                },
                {
                    "args": "0 ≤ -y",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "z3",
                    "th": "y ≤ 0 ⊢ 0 ≤ -y"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [
                        "1",
                        "4.0",
                        "4.2.1"
                    ],
                    "rule": "apply_fact",
                    "th": "0 ≤ x, y ≤ 0 ⊢ (x * -y) ^ z = x ^ z * -y ^ z"
                },
                {
                    "args": "real_mul_rneg",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x, y ≤ 0 ⊢ -(x * y) ^ z = x ^ z * -y ^ z"
                },
                {
                    "args": "rpow_lneg",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x, y ≤ 0 ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -((x * y) ^ z) else (x * y) ^ z) = x ^ z * (if ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n then -(y ^ z) else y ^ z)"
                },
                {
                    "args": "",
                    "id": "4.2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, y ≤ 0 ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n",
                    "id": "4.2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n"
                },
                {
                    "args": "if_P",
                    "id": "4.2.5.1",
                    "prevs": [
                        "4.2.4",
                        "4.2.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, 0 ≤ x, y ≤ 0 ⊢ -((x * y) ^ z) = x ^ z * -(y ^ z)"
                },
                {
                    "args": "real_mul_rneg",
                    "id": "4.2.5.2",
                    "prevs": [
                        "4.2.5.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, 0 ≤ x, y ≤ 0 ⊢ -((x * y) ^ z) = -(x ^ z * y ^ z)"
                },
                {
                    "args": "real_eq_neg2",
                    "id": "4.2.5.3",
                    "prevs": [
                        "4.2.5.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n, 0 ≤ x, y ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.2.5.4",
                    "prevs": [
                        "4.2.5.0",
                        "4.2.5.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, y ≤ 0 ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.2.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, y ≤ 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n)",
                    "id": "4.2.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n)"
                },
                {
                    "args": "if_not_P",
                    "id": "4.2.6.1",
                    "prevs": [
                        "4.2.4",
                        "4.2.6.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n), 0 ≤ x, y ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.2.6.2",
                    "prevs": [
                        "4.2.6.0",
                        "4.2.6.1"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, y ≤ 0 ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n) ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "classical_cases",
                    "id": "4.2.7",
                    "prevs": [
                        "4.2.5",
                        "4.2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, y ≤ 0, 0 ≤ x, y ≤ 0 ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.2.8",
                    "prevs": [
                        "4.2.0",
                        "4.2.7"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ y ≤ 0 ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x ⊢ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "0 ≤ y",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "y, x",
                    "id": "4.3.1",
                    "prevs": [
                        "1",
                        "4.0",
                        "4.3.0"
                    ],
                    "rule": "apply_fact_for",
                    "th": "0 ≤ x, 0 ≤ y ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.3.2",
                    "prevs": [
                        "4.3.0",
                        "4.3.1"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x ⊢ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "disjE",
                    "id": "4.4",
                    "prevs": [
                        "4.1",
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 ≤ x ⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "4.5",
                    "prevs": [
                        "4.0",
                        "4.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "disjE",
                    "id": "5",
                    "prevs": [
                        "2",
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (x * y) ^ z = x ^ z * y ^ z"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (x * y) ^ z = x ^ z * y ^ z"
                }
            ],
            "prop": "(x * y) ^ z = x ^ z * y ^ z",
            "steps": [
                {
                    "goal": "∀z::real. ∀y. ∀x::real. 0 ≤ x ⟶ 0 ≤ y ⟶ (x * y) ^ z = x ^ z * y ^ z",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "c, b,a"
                },
                {
                    "case": "c = 0",
                    "goal_id": "0.5",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.5.0"
                    ],
                    "goal_id": "0.5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.5.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_0"
                },
                {
                    "goal_id": "0.5.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "0.6",
                    "method_name": "introduction"
                },
                {
                    "case": "a=0",
                    "goal_id": "0.6.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.6.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.6.1.0"
                    ],
                    "goal_id": "0.6.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.6.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0.6.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "fact_ids": [
                        "0.6.0"
                    ],
                    "goal_id": "0.6.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.6.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "0.6.2",
                    "method_name": "introduction"
                },
                {
                    "case": "b=0",
                    "goal_id": "0.6.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.6.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.6.2.1.0"
                    ],
                    "goal_id": "0.6.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.6.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "0.6.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "fact_ids": [
                        "0.6.0"
                    ],
                    "goal_id": "0.6.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.6.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rzero"
                },
                {
                    "goal_id": "0.6.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.6.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "0.6.0"
                    ],
                    "goal_id": "0.6.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "~(a * b = 0)",
                    "goal_id": "0.6.2.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.0",
                        "0.6.2.0"
                    ],
                    "goal_id": "0.6.2.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.1"
                    ],
                    "goal_id": "0.6.2.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "0.6.2.0"
                    ],
                    "goal_id": "0.6.2.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.0"
                    ],
                    "goal_id": "0.6.2.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "0 < a",
                    "goal_id": "0.6.2.2.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.6.2.0",
                        "0.3"
                    ],
                    "goal_id": "0.6.2.2.2",
                    "method_name": "z3"
                },
                {
                    "goal": "0 < b",
                    "goal_id": "0.6.2.2.3",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.0",
                        "0.4"
                    ],
                    "goal_id": "0.6.2.2.3",
                    "method_name": "z3"
                },
                {
                    "goal": "0 < a * b",
                    "goal_id": "0.6.2.2.4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.2",
                        "0.6.2.2.3"
                    ],
                    "goal_id": "0.6.2.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_mul"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.2"
                    ],
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.3"
                    ],
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.4"
                    ],
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_add"
                },
                {
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "0.6.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.2",
                        "0.6.2.2.3"
                    ],
                    "goal_id": "0.6.2.2.5",
                    "method_name": "apply_forward_step",
                    "theorem": "log_mul"
                },
                {
                    "fact_ids": [
                        "0.6.2.2.5"
                    ],
                    "goal_id": "0.6.2.2.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "forall_elim",
                    "s": "z"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "param_y": "(0::real)",
                    "theorem": "real_le_total"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal": "0 <= -x",
                    "goal_id": "3.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_forward_step",
                    "param_x": "y",
                    "param_y": "(0::real)",
                    "theorem": "real_le_total"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "introduction"
                },
                {
                    "goal": "0 <= -y",
                    "goal_id": "3.3.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.3.0"
                    ],
                    "goal_id": "3.3.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1",
                        "3.1",
                        "3.3.1"
                    ],
                    "goal_id": "3.3.2",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3.3.2"
                    ],
                    "goal_id": "3.3.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "rpow_lneg"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n",
                    "goal_id": "3.3.4",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3.3.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.3.3",
                        "3.3.4.0"
                    ],
                    "goal_id": "3.3.4.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "3.3.4.1"
                    ],
                    "goal_id": "3.3.4.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "fact_ids": [
                        "3.3.4.2"
                    ],
                    "goal_id": "3.3.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "fact_ids": [
                        "3.3.4.3"
                    ],
                    "goal_id": "3.3.4.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "3.3.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.3.3",
                        "3.3.5.0"
                    ],
                    "goal_id": "3.3.5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.3.5.1"
                    ],
                    "goal_id": "3.3.5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "fact_ids": [
                        "3.3.5.2"
                    ],
                    "goal_id": "3.3.5.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "fact_ids": [
                        "3.3.5.3"
                    ],
                    "goal_id": "3.3.5.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "3.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1",
                        "3.1",
                        "3.4.0"
                    ],
                    "goal_id": "3.4.1",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3.4.1"
                    ],
                    "goal_id": "3.4.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "fact_ids": [
                        "3.4.2"
                    ],
                    "goal_id": "3.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "rpow_lneg"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n",
                    "goal_id": "3.4.4",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3.4.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.4.3",
                        "3.4.4.0"
                    ],
                    "goal_id": "3.4.4.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "3.4.4.1"
                    ],
                    "goal_id": "3.4.4.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_lneg"
                },
                {
                    "fact_ids": [
                        "3.4.4.2"
                    ],
                    "goal_id": "3.4.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_eq_neg2"
                },
                {
                    "goal_id": "3.4.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.4.3",
                        "3.4.5.0"
                    ],
                    "goal_id": "3.4.5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "apply_forward_step",
                    "param_x": "y",
                    "param_y": "(0::real)",
                    "theorem": "real_le_total"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal": "0 <= -y",
                    "goal_id": "4.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1",
                        "4.0",
                        "4.2.1"
                    ],
                    "goal_id": "4.2.2",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "4.2.2"
                    ],
                    "goal_id": "4.2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "fact_ids": [
                        "4.2.3"
                    ],
                    "goal_id": "4.2.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "rpow_lneg"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs z = of_nat m / of_nat n",
                    "goal_id": "4.2.5",
                    "method_name": "cases"
                },
                {
                    "goal_id": "4.2.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.4",
                        "4.2.5.0"
                    ],
                    "goal_id": "4.2.5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "4.2.5.1"
                    ],
                    "goal_id": "4.2.5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "fact_ids": [
                        "4.2.5.2"
                    ],
                    "goal_id": "4.2.5.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_eq_neg2"
                },
                {
                    "goal_id": "4.2.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.4",
                        "4.2.6.0"
                    ],
                    "goal_id": "4.2.6.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_inv",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "0 < x",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "log_inv, {x: x}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ log (real_inverse x) = -(log x)"
                },
                {
                    "args": "if_P, (if 0 < x then real_inverse (exp (y * log x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ (if 0 < x then real_inverse (exp (y * log x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_exp_neg, (if 0 < x then exp (-(y * log x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ (if 0 < x then exp (-(y * log x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_mul_rneg, (if 0 < x then exp (y * -(log x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ (if 0 < x then exp (y * -(log x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "(if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "0.5",
                    "prevs": [
                        "0.1",
                        "0.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "x = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), x = 0 ⊢ y = 0 ⟶ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "y = 0",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = 0 ⊢ y = 0"
                },
                {
                    "args": "real_inv_1, 1 = real_inverse 1",
                    "id": "1.1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 = real_inverse 1"
                },
                {
                    "args": "if_P, (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)",
                    "id": "1.1.1.2",
                    "prevs": [
                        "1.1.1.1",
                        "1.1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, y = 0, y = 0 ⊢ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.2"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), x = 0 ⊢ y = 0 ⟶ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), x = 0 ⊢ ¬(y = 0) ⟶ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "1.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "real_inv_0, 0 = real_inverse 0",
                    "id": "1.1.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = real_inverse 0"
                },
                {
                    "args": "if_not_P, (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)",
                    "id": "1.1.2.2",
                    "prevs": [
                        "1.1.2.1",
                        "1.1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, ¬(y = 0), ¬(y = 0) ⊢ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2.3",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), x = 0 ⊢ ¬(y = 0) ⟶ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.1",
                        "1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), x = 0, ¬(0 < x), x = 0 ⊢ (if y = 0 then 1 else 0) = real_inverse (if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), x = 0, x = 0 ⊢ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ x = 0 ⟶ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "0 < -x",
                    "id": "1.2.1",
                    "prevs": [
                        "1.2.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ 0 < -x"
                },
                {
                    "args": "log_inv, {x: -x}",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ log (real_inverse (-x)) = -(log (-x))"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "1.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "real_inv_neg, -(real_inverse (exp (y * log (-x)))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.3.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ -(real_inverse (exp (y * log (-x)))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "real_exp_neg, -(exp (-(y * log (-x)))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.3.2",
                    "prevs": [
                        "1.2.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (-(y * log (-x)))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "real_mul_rneg, -(exp (y * -(log (-x)))) = real_inverse (-(exp (y * log (-x))))",
                    "id": "1.2.3.3",
                    "prevs": [
                        "1.2.3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ -(exp (y * -(log (-x)))) = real_inverse (-(exp (y * log (-x))))"
                },
                {
                    "args": "if_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.3.4",
                    "prevs": [
                        "1.2.3.3",
                        "1.2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.3.5",
                    "prevs": [
                        "1.2.3.0",
                        "1.2.3.4"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "1.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "real_exp_neg, exp (-(y * log (-x))) = real_inverse (exp (y * log (-x)))",
                    "id": "1.2.4.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (-(y * log (-x))) = real_inverse (exp (y * log (-x)))"
                },
                {
                    "args": "real_mul_rneg, exp (y * -(log (-x))) = real_inverse (exp (y * log (-x)))",
                    "id": "1.2.4.2",
                    "prevs": [
                        "1.2.4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ exp (y * -(log (-x))) = real_inverse (exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.4.3",
                    "prevs": [
                        "1.2.4.2",
                        "1.2.4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.4.4",
                    "prevs": [
                        "1.2.4.0",
                        "1.2.4.3"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.3",
                        "1.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(x = 0), ¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * -(log (-x)))) else exp (y * -(log (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "(if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (real_inverse (-x)))) else exp (y * log (real_inverse (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.2",
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (real_inverse (-x)))) else exp (y * log (real_inverse (-x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_inv_neg, (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(x = 0), ¬(x = 0) ⊢ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.0",
                        "1.2.8"
                    ],
                    "rule": "intros",
                    "th": "¬(0 < x) ⊢ ¬(x = 0) ⟶ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 < x), ¬(0 < x) ⊢ (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_inv_eq_0, (if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x) ⊢ (if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "if_not_P, (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.5",
                    "prevs": [
                        "1.4",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 < x), ¬(0 < x) ⊢ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(0 < x) ⟶ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if 0 < x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_lt_inv_eq, (if 0 < real_inverse x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 0 < real_inverse x then exp (y * log (real_inverse x)) else if real_inverse x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(real_inverse x)))) else exp (y * log (-(real_inverse x)))) = real_inverse (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "real_real_power_def, real_inverse x ^ y = real_inverse (x ^ y)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_inverse x ^ y = real_inverse (x ^ y)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_inverse x ^ y = real_inverse (x ^ y)"
                }
            ],
            "prop": "real_inverse x ^ y = real_inverse (x ^ y)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_lt_inv_eq"
                },
                {
                    "case": "0 < x",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "log_inv"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_eq_0"
                },
                {
                    "case": "x=0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "case": "y=0",
                    "goal_id": "1.1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_1"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.2.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_0"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "0 < -x",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "log_inv"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_inv_neg"
                },
                {
                    "fact_ids": [
                        "1.2.2"
                    ],
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "1.2.3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.3.0"
                    ],
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                },
                {
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_neg"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.4.0"
                    ],
                    "goal_id": "1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_rneg"
                },
                {
                    "goal_id": "1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rpow_div",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "rpow_inv, x ^ z * real_inverse y ^ z = x ^ z * real_inverse (y ^ z)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ z * real_inverse y ^ z = x ^ z * real_inverse (y ^ z)"
                },
                {
                    "args": "rpow_mul, (x * real_inverse y) ^ z = x ^ z * real_inverse (y ^ z)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (x * real_inverse y) ^ z = x ^ z * real_inverse (y ^ z)"
                },
                {
                    "args": "real_divide_def, (x / y) ^ z = x ^ z / y ^ z",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (x / y) ^ z = x ^ z / y ^ z"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (x / y) ^ z = x ^ z / y ^ z"
                }
            ],
            "prop": "(x / y) ^ z = x ^ z / y ^ z",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_mul"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_inv"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_product",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "finite s",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s ⊢ finite s"
                },
                {
                    "args": "rpow_one, (1::real) ^ y = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::real) ^ y = 1"
                },
                {
                    "args": "product_empty, product ∅ x ^ y = product ∅ (λi. x i ^ y)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s ⊢ product ∅ x ^ y = product ∅ (λi. x i ^ y)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "finite s ⊢ ∀x1. ∀s1. product s1 x ^ y = product s1 (λi. x i ^ y) ⟶ ¬(x1 ∈ s1) ⟶ finite s1 ⟶ product (insert x1 s1) x ^ y = product (insert x1 s1) (λi. x i ^ y)"
                },
                {
                    "args": "x1, 'a",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x1"
                },
                {
                    "args": "s1, 'a set",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s1"
                },
                {
                    "args": "product s1 x ^ y = product s1 (λi. x i ^ y)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "product s1 x ^ y = product s1 (λi. x i ^ y) ⊢ product s1 x ^ y = product s1 (λi. x i ^ y)"
                },
                {
                    "args": "¬(x1 ∈ s1)",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x1 ∈ s1) ⊢ ¬(x1 ∈ s1)"
                },
                {
                    "args": "finite s1",
                    "id": "3.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "finite s1 ⊢ finite s1"
                },
                {
                    "args": "product_insert, {f: x, s: s1, x: x1}",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x1 s1) x = (if x1 ∈ s1 then product s1 x else x x1 * product s1 x)"
                },
                {
                    "args": "product_insert, {f: λi. x i ^ y, s: s1, x: x1}",
                    "id": "3.6",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "finite s1 ⊢ product (insert x1 s1) (λi. x i ^ y) = (if x1 ∈ s1 then product s1 (λi. x i ^ y) else x x1 ^ y * product s1 (λi. x i ^ y))"
                },
                {
                    "args": "if_not_P",
                    "id": "3.7",
                    "prevs": [
                        "3.5",
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x1 ∈ s1), finite s1 ⊢ product (insert x1 s1) x = x x1 * product s1 x"
                },
                {
                    "args": "if_not_P",
                    "id": "3.8",
                    "prevs": [
                        "3.6",
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x1 ∈ s1), finite s1 ⊢ product (insert x1 s1) (λi. x i ^ y) = x x1 ^ y * product s1 (λi. x i ^ y)"
                },
                {
                    "args": "x x1 ^ y * product s1 x ^ y = x x1 ^ y * product s1 (λi. x i ^ y)",
                    "id": "3.9",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "product s1 x ^ y = product s1 (λi. x i ^ y) ⊢ x x1 ^ y * product s1 x ^ y = x x1 ^ y * product s1 (λi. x i ^ y)"
                },
                {
                    "args": "rpow_mul, (x x1 * product s1 x) ^ y = x x1 ^ y * product s1 (λi. x i ^ y)",
                    "id": "3.10",
                    "prevs": [
                        "3.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "finite s, product s1 x ^ y = product s1 (λi. x i ^ y), ¬(x1 ∈ s1), finite s1 ⊢ (x x1 * product s1 x) ^ y = x x1 ^ y * product s1 (λi. x i ^ y)"
                },
                {
                    "args": "(x x1 * product s1 x) ^ y = product (insert x1 s1) (λi. x i ^ y)",
                    "id": "3.11",
                    "prevs": [
                        "3.8",
                        "3.10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x1 ∈ s1), finite s1, finite s, product s1 x ^ y = product s1 (λi. x i ^ y) ⊢ (x x1 * product s1 x) ^ y = product (insert x1 s1) (λi. x i ^ y)"
                },
                {
                    "args": "product (insert x1 s1) x ^ y = product (insert x1 s1) (λi. x i ^ y)",
                    "id": "3.12",
                    "prevs": [
                        "3.7",
                        "3.11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x1 ∈ s1), finite s1, finite s, product s1 x ^ y = product s1 (λi. x i ^ y) ⊢ product (insert x1 s1) x ^ y = product (insert x1 s1) (λi. x i ^ y)"
                },
                {
                    "args": "",
                    "id": "3.13",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.3",
                        "3.4",
                        "3.12"
                    ],
                    "rule": "intros",
                    "th": "finite s ⊢ ∀x1. ∀s1. product s1 x ^ y = product s1 (λi. x i ^ y) ⟶ ¬(x1 ∈ s1) ⟶ finite s1 ⟶ product (insert x1 s1) x ^ y = product (insert x1 s1) (λi. x i ^ y)"
                },
                {
                    "args": "finite_induct_strong",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "finite s, finite s, finite s ⊢ product s x ^ y = product s (λi. x i ^ y)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ finite s ⟶ product s x ^ y = product s (λi. x i ^ y)"
                }
            ],
            "prop": "finite s ⟶ product s x ^ y = product s (λi. x i ^ y)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_induct_strong"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "product_empty"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_one"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "x1,s1"
                },
                {
                    "fact_ids": [
                        "3.4"
                    ],
                    "goal_id": "3.5",
                    "method_name": "apply_forward_step",
                    "param_f": "x",
                    "param_x": "x1",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "3.4"
                    ],
                    "goal_id": "3.6",
                    "method_name": "apply_forward_step",
                    "param_f": "(λi. x i ^ y)",
                    "param_x": "x1",
                    "theorem": "product_insert"
                },
                {
                    "fact_ids": [
                        "3.5",
                        "3.3"
                    ],
                    "goal_id": "3.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.6",
                        "3.3"
                    ],
                    "goal_id": "3.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.7"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3.8"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_mul"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.9",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "s": "'a set",
                "x": "'a ⇒ real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x > 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x > 0 ⊢ x > 0"
                },
                {
                    "args": "0 < x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "x > 0 ⊢ 0 < x"
                },
                {
                    "args": "real_exp_add, exp (m * log x + n * log x) = exp (m * log x) * exp (n * log x)",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (m * log x + n * log x) = exp (m * log x) * exp (n * log x)"
                },
                {
                    "args": "real_add_rdistrib, exp ((m + n) * log x) = exp (m * log x) * exp (n * log x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x > 0 ⊢ exp ((m + n) * log x) = exp (m * log x) * exp (n * log x)"
                },
                {
                    "args": "if_P, (if 0 < x then exp ((m + n) * log x) else if x = 0 then if m + n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs (m + n) = of_nat m1 / of_nat n1 then -(exp ((m + n) * log (-x))) else exp ((m + n) * log (-x))) = (if 0 < x then exp (m * log x) else if x = 0 then if m = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs m = of_nat m1 / of_nat n1 then -(exp (m * log (-x))) else exp (m * log (-x))) * (if 0 < x then exp (n * log x) else if x = 0 then if n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs n = of_nat m1 / of_nat n1 then -(exp (n * log (-x))) else exp (n * log (-x)))",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x > 0, x > 0 ⊢ (if 0 < x then exp ((m + n) * log x) else if x = 0 then if m + n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs (m + n) = of_nat m1 / of_nat n1 then -(exp ((m + n) * log (-x))) else exp ((m + n) * log (-x))) = (if 0 < x then exp (m * log x) else if x = 0 then if m = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs m = of_nat m1 / of_nat n1 then -(exp (m * log (-x))) else exp (m * log (-x))) * (if 0 < x then exp (n * log x) else if x = 0 then if n = 0 then 1 else 0 else if ∃m1. ∃n1. odd m1 ∧ odd n1 ∧ abs n = of_nat m1 / of_nat n1 then -(exp (n * log (-x))) else exp (n * log (-x)))"
                },
                {
                    "args": "real_real_power_def, x ^ (m + n) = x ^ m * x ^ n",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x > 0 ⊢ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ x > 0 ⟶ x ^ (m + n) = x ^ m * x ^ n"
                }
            ],
            "prop": "x > 0 ⟶ x ^ (m + n) = x ^ m * x ^ n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "0 < x",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_add_rdistrib"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_add"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x > 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x > 0 ⊢ x > 0"
                },
                {
                    "args": "rpow_add, {m: m, n: -n, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x > 0 ⊢ x ^ (m + -n) = x ^ m * x ^ -n"
                },
                {
                    "args": "real_divide_def, x ^ m * real_inverse (x ^ n) = x ^ m / x ^ n",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ m * real_inverse (x ^ n) = x ^ m / x ^ n"
                },
                {
                    "args": "rpow_neg, x ^ m * x ^ -n = x ^ m / x ^ n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x > 0 ⊢ x ^ m * x ^ -n = x ^ m / x ^ n"
                },
                {
                    "args": "x ^ (m + -n) = x ^ m / x ^ n",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x > 0 ⊢ x ^ (m + -n) = x ^ m / x ^ n"
                },
                {
                    "args": "real_minus_def, x ^ (m - n) = x ^ m / x ^ n",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x > 0 ⊢ x ^ (m - n) = x ^ m / x ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ x > 0 ⟶ x ^ (m - n) = x ^ m / x ^ n"
                }
            ],
            "prop": "x > 0 ⟶ x ^ (m - n) = x ^ m / x ^ n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "-n",
                    "theorem": "rpow_add"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_neg"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_add_alt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ x = 0 ⟶ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "x = 0",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "2.1",
                    "prevs": [
                        "1",
                        "2.0"
                    ],
                    "rule": "apply_fact",
                    "th": "x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0 ⊢ y + z = 0 ⟶ y = 0 ∨ z = 0"
                },
                {
                    "args": "y = 0 ⟶ (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ y = 0 ⟶ (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0 ⊢ ¬(y = 0) ⟶ (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "¬(y = 0)",
                    "id": "2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y = 0) ⊢ ¬(y = 0)"
                },
                {
                    "args": "",
                    "id": "2.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0) ⊢ y + z = 0 ⟶ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "y + z = 0",
                    "id": "2.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y + z = 0 ⊢ y + z = 0"
                },
                {
                    "args": "",
                    "id": "2.3.1.1",
                    "prevs": [
                        "2.1",
                        "2.3.1.0"
                    ],
                    "rule": "apply_fact",
                    "th": "x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, y + z = 0 ⊢ y = 0 ∨ z = 0"
                },
                {
                    "args": "(1::real) = 0 * (if z = 0 then 1 else 0)",
                    "id": "2.3.1.2",
                    "prevs": [
                        "2.3.0",
                        "2.3.1.0",
                        "2.3.1.1"
                    ],
                    "rule": "z3",
                    "th": "¬(y = 0), y + z = 0, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, y + z = 0 ⊢ (1::real) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)",
                    "id": "2.3.1.3",
                    "prevs": [
                        "2.3.1.2",
                        "2.3.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0), y + z = 0, y + z = 0 ⊢ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "2.3.1.4",
                    "prevs": [
                        "2.3.1.0",
                        "2.3.1.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0) ⊢ y + z = 0 ⟶ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "2.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0) ⊢ ¬(y + z = 0) ⟶ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "¬(y + z = 0)",
                    "id": "2.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(y + z = 0) ⊢ ¬(y + z = 0)"
                },
                {
                    "args": "real_mul_lzero, (0::real) = 0 * (if z = 0 then 1 else 0)",
                    "id": "2.3.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)",
                    "id": "2.3.2.2",
                    "prevs": [
                        "2.3.2.1",
                        "2.3.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0), ¬(y + z = 0), ¬(y + z = 0) ⊢ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "2.3.2.3",
                    "prevs": [
                        "2.3.2.0",
                        "2.3.2.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0) ⊢ ¬(y + z = 0) ⟶ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "2.3.3",
                    "prevs": [
                        "2.3.1",
                        "2.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0), 0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0) ⊢ (if y + z = 0 then (1::real) else 0) = 0 * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)",
                    "id": "2.3.4",
                    "prevs": [
                        "2.3.3",
                        "2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, ¬(y = 0), ¬(y = 0) ⊢ (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "2.3.5",
                    "prevs": [
                        "2.3.0",
                        "2.3.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0 ⊢ ¬(y = 0) ⟶ (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0, 0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0 ⊢ (if y + z = 0 then (1::real) else 0) = (if y = 0 then 1 else 0) * (if z = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, (0::real) ^ (y + z) = 0 ^ y * 0 ^ z",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, x = 0 ⊢ (0::real) ^ (y + z) = 0 ^ y * 0 ^ z"
                },
                {
                    "args": "x ^ (y + z) = x ^ y * x ^ z",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, 0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [
                        "2.0",
                        "2.6"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ x = 0 ⟶ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ ¬(x = 0) ⟶ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "x > 0",
                    "id": "3.1",
                    "prevs": [
                        "3.0",
                        "0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0), 0 ≤ x ⊢ x > 0"
                },
                {
                    "args": "rpow_add, {m: y, n: z, x: x}",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, ¬(x = 0) ⊢ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [
                        "3.0",
                        "3.2"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ ¬(x = 0) ⟶ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "classical_cases",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0, 0 ≤ x, x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0 ⊢ x ^ (y + z) = x ^ y * x ^ z"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ (x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0) ⟶ x ^ (y + z) = x ^ y * x ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ (x = 0 ⟶ y + z = 0 ⟶ y = 0 ∨ z = 0) ⟶ x ^ (y + z) = x ^ y * x ^ z",
            "steps": [
                {
                    "case": "x=0",
                    "goal_id": "2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1",
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "case": "y = 0",
                    "goal_id": "2.2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.3.0"
                    ],
                    "goal_id": "2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "y + z = 0",
                    "goal_id": "2.3.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.3.1.0"
                    ],
                    "goal_id": "2.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2.1",
                        "2.3.1.0"
                    ],
                    "goal_id": "2.3.1.1",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "2.3.0",
                        "2.3.1.0",
                        "2.3.1.1"
                    ],
                    "goal_id": "2.3.1.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.3.2.0"
                    ],
                    "goal_id": "2.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "2.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_add"
                },
                {
                    "fact_ids": [
                        "3.0",
                        "0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_sub_alt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0 ⊢ x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0"
                },
                {
                    "args": "x = 0 ⟶ y + -z = 0 ⟶ y = 0 ∨ -z = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0 ⊢ x = 0 ⟶ y + -z = 0 ⟶ y = 0 ∨ -z = 0"
                },
                {
                    "args": "rpow_add_alt",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0 ⊢ x ^ (y + -z) = x ^ y * x ^ -z"
                },
                {
                    "args": "rpow_neg, x ^ (y + -z) = x ^ y * real_inverse (x ^ z)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 ≤ x, x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0 ⊢ x ^ (y + -z) = x ^ y * real_inverse (x ^ z)"
                },
                {
                    "args": "real_divide_def, x ^ (y + -z) = x ^ y / x ^ z",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0 ⊢ x ^ (y + -z) = x ^ y / x ^ z"
                },
                {
                    "args": "real_minus_def, x ^ (y - z) = x ^ y / x ^ z",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0 ⊢ x ^ (y - z) = x ^ y / x ^ z"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ (x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0) ⟶ x ^ (y - z) = x ^ y / x ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ (x = 0 ⟶ y = z ⟶ y = 0 ∨ z = 0) ⟶ x ^ (y - z) = x ^ y / x ^ z",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_minus_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "rpow_neg"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_add_alt"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "name": "rpow_neg_one",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "rpow_1, real_inverse x = real_inverse (x ^ (1::real))",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_inverse x = real_inverse (x ^ (1::real))"
                },
                {
                    "args": "rpow_neg, real_inverse x = x ^ -(1::real)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ real_inverse x = x ^ -(1::real)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ real_inverse x = x ^ -(1::real)"
                }
            ],
            "prop": "real_inverse x = x ^ -(1::real)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "rpow_sqrt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x ≥ 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≥ 0 ⊢ x ≥ 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≥ 0 ⊢ ∀x::real. ∀y. x ^ (2::nat) = y ^ (2::nat) ⟶ (x + y = 0 ⟶ x = 0 ∧ y = 0) ⟶ x = y"
                },
                {
                    "args": "a, real",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "b, real",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "a ^ (2::nat) = b ^ (2::nat)",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a ^ (2::nat) = b ^ (2::nat) ⊢ a ^ (2::nat) = b ^ (2::nat)"
                },
                {
                    "args": "a + b = 0 ⟶ a = 0 ∧ b = 0",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a + b = 0 ⟶ a = 0 ∧ b = 0 ⊢ a + b = 0 ⟶ a = 0 ∧ b = 0"
                },
                {
                    "args": "real_pow_2",
                    "id": "1.4",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "a ^ (2::nat) = b ^ (2::nat) ⊢ a * a = b * b"
                },
                {
                    "args": "a = b",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "z3",
                    "th": "a + b = 0 ⟶ a = 0 ∧ b = 0, a ^ (2::nat) = b ^ (2::nat) ⊢ a = b"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "x ≥ 0 ⊢ ∀a::real. ∀b. a ^ (2::nat) = b ^ (2::nat) ⟶ (a + b = 0 ⟶ a = 0 ∧ b = 0) ⟶ a = b"
                },
                {
                    "args": "0 ≤ x",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "x ≥ 0 ⊢ 0 ≤ x"
                },
                {
                    "args": "sqrt_pow_2, {x: x}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≥ 0 ⊢ sqrt x ^ (2::nat) = x"
                },
                {
                    "args": "rpow_rpow, {m: 1 / 2, n: (2::real), x: x}",
                    "id": "4",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≥ 0 ⊢ x ^ (1 / 2) ^ (2::real) = x ^ (1 / 2 * 2)"
                },
                {
                    "args": "1 / 2 * 2 = 1",
                    "id": "5",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 / 2 * 2 = 1"
                },
                {
                    "args": "rpow_1, x = x ^ (1::real)",
                    "id": "6",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x = x ^ (1::real)"
                },
                {
                    "args": "x = x ^ (1 / 2 * 2)",
                    "id": "7",
                    "prevs": [
                        "5",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x ≥ 0 ⊢ x = x ^ (1 / 2 * 2)"
                },
                {
                    "args": "x = x ^ (1 / 2) ^ (2::real)",
                    "id": "8",
                    "prevs": [
                        "4",
                        "7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x ≥ 0 ⊢ x = x ^ (1 / 2) ^ (2::real)"
                },
                {
                    "args": "real_of_nat_id, x = x ^ (1 / 2) ^ (of_nat::nat ⇒ real) 2",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≥ 0 ⊢ x = x ^ (1 / 2) ^ (of_nat::nat ⇒ real) 2"
                },
                {
                    "args": "rpow_pow, x = x ^ (1 / 2) ^ (2::nat)",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "x ≥ 0 ⊢ x = x ^ (1 / 2) ^ (2::nat)"
                },
                {
                    "args": "sqrt x ^ (2::nat) = x ^ (1 / 2) ^ (2::nat)",
                    "id": "11",
                    "prevs": [
                        "3",
                        "10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x ≥ 0 ⊢ sqrt x ^ (2::nat) = x ^ (1 / 2) ^ (2::nat)"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≥ 0 ⊢ sqrt x + x ^ (1 / 2) = 0 ⟶ sqrt x = 0 ∧ x ^ (1 / 2) = 0"
                },
                {
                    "args": "sqrt x + x ^ (1 / 2) = 0",
                    "id": "12.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "sqrt x + x ^ (1 / 2) = 0 ⊢ sqrt x + x ^ (1 / 2) = 0"
                },
                {
                    "args": "∀x::real. ∀y. 0 ≤ x ⟶ 0 ≤ y ⟶ x + y = 0 ⟶ x = 0 ∧ y = 0",
                    "id": "12.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. ∀y. 0 ≤ x ⟶ 0 ≤ y ⟶ x + y = 0 ⟶ x = 0 ∧ y = 0"
                },
                {
                    "args": "sqrt_le_0, 0 ≤ sqrt x",
                    "id": "12.2",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≥ 0, sqrt x + x ^ (1 / 2) = 0 ⊢ 0 ≤ sqrt x"
                },
                {
                    "args": "rpow_pos_le, {x: x, y: 1 / 2}",
                    "id": "12.3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≥ 0, sqrt x + x ^ (1 / 2) = 0 ⊢ 0 ≤ x ^ (1 / 2)"
                },
                {
                    "args": "sqrt x, x ^ (1 / 2)",
                    "id": "12.4",
                    "prevs": [
                        "12.1",
                        "12.2",
                        "12.3",
                        "12.0"
                    ],
                    "rule": "apply_fact_for",
                    "th": "x ≥ 0, sqrt x + x ^ (1 / 2) = 0 ⊢ sqrt x = 0 ∧ x ^ (1 / 2) = 0"
                },
                {
                    "args": "",
                    "id": "12.5",
                    "prevs": [
                        "12.0",
                        "12.4"
                    ],
                    "rule": "intros",
                    "th": "x ≥ 0 ⊢ sqrt x + x ^ (1 / 2) = 0 ⟶ sqrt x = 0 ∧ x ^ (1 / 2) = 0"
                },
                {
                    "args": "sqrt x, x ^ (1 / 2)",
                    "id": "13",
                    "prevs": [
                        "1",
                        "11",
                        "12"
                    ],
                    "rule": "apply_fact_for",
                    "th": "x ≥ 0 ⊢ sqrt x = x ^ (1 / 2)"
                },
                {
                    "args": "",
                    "id": "14",
                    "prevs": [
                        "0",
                        "13"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≥ 0 ⟶ sqrt x = x ^ (1 / 2)"
                }
            ],
            "prop": "x ≥ 0 ⟶ sqrt x = x ^ (1 / 2)",
            "steps": [
                {
                    "goal": "!x::real. !y. x ^ (2::nat) = y ^ (2::nat) --> (x + y = 0 --> x = 0 & y = 0)\n    --> x = y",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "a,b"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_pow_2"
                },
                {
                    "fact_ids": [
                        "1.3",
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_prev"
                },
                {
                    "goal": "0 <= x",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "theorem": "sqrt_pow_2"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_id"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "param_m": "1/2",
                    "param_n": "(2::real)",
                    "theorem": "rpow_rpow"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "(1 / 2 * 2) = 1",
                    "goal_id": "5",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_1"
                },
                {
                    "goal_id": "12",
                    "method_name": "introduction"
                },
                {
                    "goal": "!x::real. !y. 0 <= x --> 0 <= y --> x + y = 0 --> x = 0 & y = 0",
                    "goal_id": "12.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "12.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "12.1"
                    ],
                    "goal_id": "12.2",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "12.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sqrt_le_0"
                },
                {
                    "goal_id": "12.3",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_pos_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 ≤ x ⊢ 1 ≤ x"
                },
                {
                    "args": "a ≤ b",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a ≤ b ⊢ a ≤ b"
                },
                {
                    "args": "0 < x",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "1 ≤ x ⊢ 0 < x"
                },
                {
                    "args": "log_pos",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "a ≤ b, 1 ≤ x ⊢ 0 ≤ log x"
                },
                {
                    "args": "real_le_lmul",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "a ≤ b, 1 ≤ x ⊢ log x * a ≤ log x * b"
                },
                {
                    "args": "real_mult_comm, a * log x ≤ b * log x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a ≤ b, 1 ≤ x ⊢ a * log x ≤ b * log x"
                },
                {
                    "args": "real_exp_mono_le, exp (a * log x) ≤ exp (b * log x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a ≤ b, 1 ≤ x ⊢ exp (a * log x) ≤ exp (b * log x)"
                },
                {
                    "args": "if_P, (if 0 < x then exp (a * log x) else if x = 0 then if a = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs a = of_nat m / of_nat n then -(exp (a * log (-x))) else exp (a * log (-x))) ≤ (if 0 < x then exp (b * log x) else if x = 0 then if b = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs b = of_nat m / of_nat n then -(exp (b * log (-x))) else exp (b * log (-x)))",
                    "id": "7",
                    "prevs": [
                        "6",
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a ≤ b, 1 ≤ x ⊢ (if 0 < x then exp (a * log x) else if x = 0 then if a = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs a = of_nat m / of_nat n then -(exp (a * log (-x))) else exp (a * log (-x))) ≤ (if 0 < x then exp (b * log x) else if x = 0 then if b = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs b = of_nat m / of_nat n then -(exp (b * log (-x))) else exp (b * log (-x)))"
                },
                {
                    "args": "real_real_power_def, x ^ a ≤ x ^ b",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a ≤ b, 1 ≤ x ⊢ x ^ a ≤ x ^ b"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 ≤ x ⟶ a ≤ b ⟶ x ^ a ≤ x ^ b"
                }
            ],
            "prop": "1 ≤ x ⟶ a ≤ b ⟶ x ^ a ≤ x ^ b",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "0 < x",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_le"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_lmul"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "log_pos"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "a < b",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a < b ⊢ a < b"
                },
                {
                    "args": "0 < x",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "1 < x ⊢ 0 < x"
                },
                {
                    "args": "log_pos_lt",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "a < b, 1 < x ⊢ 0 < log x"
                },
                {
                    "args": "real_lt_lmul:",
                    "id": "4",
                    "prevs": [
                        "3",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "a < b, 1 < x ⊢ log x * a < log x * b"
                },
                {
                    "args": "real_mult_comm, a * log x < b * log x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a < b, 1 < x ⊢ a * log x < b * log x"
                },
                {
                    "args": "real_exp_mono_lt, exp (a * log x) < exp (b * log x)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a < b, 1 < x ⊢ exp (a * log x) < exp (b * log x)"
                },
                {
                    "args": "if_P, (if 0 < x then exp (a * log x) else if x = 0 then if a = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs a = of_nat m / of_nat n then -(exp (a * log (-x))) else exp (a * log (-x))) < (if 0 < x then exp (b * log x) else if x = 0 then if b = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs b = of_nat m / of_nat n then -(exp (b * log (-x))) else exp (b * log (-x)))",
                    "id": "7",
                    "prevs": [
                        "6",
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a < b, 1 < x ⊢ (if 0 < x then exp (a * log x) else if x = 0 then if a = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs a = of_nat m / of_nat n then -(exp (a * log (-x))) else exp (a * log (-x))) < (if 0 < x then exp (b * log x) else if x = 0 then if b = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs b = of_nat m / of_nat n then -(exp (b * log (-x))) else exp (b * log (-x)))"
                },
                {
                    "args": "real_real_power_def, x ^ a < x ^ b",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a < b, 1 < x ⊢ x ^ a < x ^ b"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 < x ⟶ a < b ⟶ x ^ a < x ^ b"
                }
            ],
            "prop": "1 < x ⟶ a < b ⟶ x ^ a < x ^ b",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "0 < x",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_mono_lt"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_lmul:"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "log_pos_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_mono_le_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 < x ⊢ x ^ a ≤ x ^ b ⟶ a ≤ b"
                },
                {
                    "args": "x ^ a ≤ x ^ b",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ a ≤ x ^ b ⊢ x ^ a ≤ x ^ b"
                },
                {
                    "args": "real_not_lt",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x ^ a ≤ x ^ b ⊢ ¬(x ^ b < x ^ a)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 < x, x ^ a ≤ x ^ b ⊢ b < a ⟶ x ^ b < x ^ a"
                },
                {
                    "args": "b < a",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b < a ⊢ b < a"
                },
                {
                    "args": "rpow_mono_lt",
                    "id": "1.2.1",
                    "prevs": [
                        "0",
                        "1.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "b < a, 1 < x, x ^ a ≤ x ^ b ⊢ x ^ b < x ^ a"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1"
                    ],
                    "rule": "intros",
                    "th": "1 < x, x ^ a ≤ x ^ b ⊢ b < a ⟶ x ^ b < x ^ a"
                },
                {
                    "args": "double_neg, ¬¬(b < a) ⟶ ¬¬(x ^ b < x ^ a)",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "1 < x, x ^ a ≤ x ^ b ⊢ ¬¬(b < a) ⟶ ¬¬(x ^ b < x ^ a)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.4",
                    "prevs": [
                        "1.1",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x, x ^ a ≤ x ^ b ⊢ ¬(b < a)"
                },
                {
                    "args": "real_not_lt, a ≤ b",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "1 < x, x ^ a ≤ x ^ b ⊢ a ≤ b"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "1 < x ⊢ x ^ a ≤ x ^ b ⟶ a ≤ b"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 < x ⊢ a ≤ b ⟶ x ^ a ≤ x ^ b"
                },
                {
                    "args": "a ≤ b",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a ≤ b ⊢ a ≤ b"
                },
                {
                    "args": "real_lt_imp_le",
                    "id": "2.1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x, a ≤ b ⊢ 1 ≤ x"
                },
                {
                    "args": "rpow_mono_le",
                    "id": "2.2",
                    "prevs": [
                        "2.1",
                        "2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x, a ≤ b ⊢ x ^ a ≤ x ^ b"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "1 < x ⊢ a ≤ b ⟶ x ^ a ≤ x ^ b"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x ⊢ x ^ a ≤ x ^ b ⟷ a ≤ b"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 < x ⟶ x ^ a ≤ x ^ b ⟷ a ≤ b"
                }
            ],
            "prop": "1 < x ⟶ x ^ a ≤ x ^ b ⟷ a ≤ b",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_not_lt"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_mono_lt"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_mono_le"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_imp_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_mono_lt_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "rpow_mono_le_eq, {a: b, b: a, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "1 < x ⊢ x ^ b ≤ x ^ a ⟷ b ≤ a"
                },
                {
                    "args": "¬(x ^ b ≤ x ^ a) ⟷ ¬(b ≤ a)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "1 < x ⊢ ¬(x ^ b ≤ x ^ a) ⟷ ¬(b ≤ a)"
                },
                {
                    "args": "real_less_def, x ^ a < x ^ b ⟷ a < b",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "1 < x ⊢ x ^ a < x ^ b ⟷ a < b"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 < x ⟶ x ^ a < x ^ b ⟷ a < b"
                }
            ],
            "prop": "1 < x ⟶ x ^ a < x ^ b ⟷ a < b",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_less_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_a": "b",
                    "param_b": "a",
                    "theorem": "rpow_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "rpow_inj",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ⊢ x ^ y = x ^ z ⟶ x = 1 ∨ y = z"
                },
                {
                    "args": "x ^ y = x ^ z",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ y = x ^ z ⊢ x ^ y = x ^ z"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, x ^ y = x ^ z ⊢ x = 1 ⟶ x = 1 ∨ y = z"
                },
                {
                    "args": "x = 1",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "disjI1, {A: x = 1, B: y = z}",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 1, 0 < x, x ^ y = x ^ z ⊢ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x, x ^ y = x ^ z ⊢ x = 1 ⟶ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, x ^ y = x ^ z ⊢ ¬(x = 1) ⟶ x = 1 ∨ y = z"
                },
                {
                    "args": "¬(x = 1)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 1) ⊢ ¬(x = 1)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ 1 < x ⟶ y = z"
                },
                {
                    "args": "1 < x",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "real_le_antisym",
                    "id": "1.2.1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x ^ y = x ^ z ⊢ x ^ y ≤ x ^ z ∧ x ^ z ≤ x ^ y"
                },
                {
                    "args": "conjD1, {A: x ^ y ≤ x ^ z, B: x ^ z ≤ x ^ y}",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ^ y = x ^ z ⊢ x ^ y ≤ x ^ z"
                },
                {
                    "args": "conjD2, {A: x ^ y ≤ x ^ z, B: x ^ z ≤ x ^ y}",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ^ y = x ^ z ⊢ x ^ z ≤ x ^ y"
                },
                {
                    "args": "rpow_mono_le_eq, {a: y, b: z, x: x}",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "1 < x ⊢ x ^ y ≤ x ^ z ⟷ y ≤ z"
                },
                {
                    "args": "",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.4",
                        "1.2.1.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "1 < x, x ^ y = x ^ z ⊢ y ≤ z"
                },
                {
                    "args": "rpow_mono_le_eq, {a: z, b: y, x: x}",
                    "id": "1.2.1.6",
                    "prevs": [
                        "1.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "1 < x ⊢ x ^ z ≤ x ^ y ⟷ z ≤ y"
                },
                {
                    "args": "",
                    "id": "1.2.1.7",
                    "prevs": [
                        "1.2.1.6",
                        "1.2.1.3"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "1 < x, x ^ y = x ^ z ⊢ z ≤ y"
                },
                {
                    "args": "conjI",
                    "id": "1.2.1.8",
                    "prevs": [
                        "1.2.1.5",
                        "1.2.1.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x, 0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ y ≤ z ∧ z ≤ y"
                },
                {
                    "args": "real_le_antisym, y = z",
                    "id": "1.2.1.9",
                    "prevs": [
                        "1.2.1.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "1 < x, 0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ y = z"
                },
                {
                    "args": "",
                    "id": "1.2.1.10",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.9"
                    ],
                    "rule": "intros",
                    "th": "0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ 1 < x ⟶ y = z"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ ¬(1 < x) ⟶ y = z"
                },
                {
                    "args": "¬(1 < x)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(1 < x) ⊢ ¬(1 < x)"
                },
                {
                    "args": "1 < real_inverse x",
                    "id": "1.2.2.1",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.0",
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x) ⊢ 1 < real_inverse x"
                },
                {
                    "args": "real_eq_inv2",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x ^ y = x ^ z ⊢ real_inverse (x ^ y) = real_inverse (x ^ z)"
                },
                {
                    "args": "rpow_inv",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x ^ y = x ^ z ⊢ real_inverse x ^ y = real_inverse x ^ z"
                },
                {
                    "args": "real_le_antisym",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.3"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x ^ y = x ^ z ⊢ real_inverse x ^ y ≤ real_inverse x ^ z ∧ real_inverse x ^ z ≤ real_inverse x ^ y"
                },
                {
                    "args": "conjD1, {A: real_inverse x ^ y ≤ real_inverse x ^ z, B: real_inverse x ^ z ≤ real_inverse x ^ y}",
                    "id": "1.2.2.5",
                    "prevs": [
                        "1.2.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ^ y = x ^ z ⊢ real_inverse x ^ y ≤ real_inverse x ^ z"
                },
                {
                    "args": "conjD2, {A: real_inverse x ^ y ≤ real_inverse x ^ z, B: real_inverse x ^ z ≤ real_inverse x ^ y}",
                    "id": "1.2.2.6",
                    "prevs": [
                        "1.2.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ^ y = x ^ z ⊢ real_inverse x ^ z ≤ real_inverse x ^ y"
                },
                {
                    "args": "rpow_mono_le_eq, {a: y, b: z, x: real_inverse x}",
                    "id": "1.2.2.7",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x) ⊢ real_inverse x ^ y ≤ real_inverse x ^ z ⟷ y ≤ z"
                },
                {
                    "args": "",
                    "id": "1.2.2.8",
                    "prevs": [
                        "1.2.2.7",
                        "1.2.2.5"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x), x ^ y = x ^ z ⊢ y ≤ z"
                },
                {
                    "args": "rpow_mono_le_eq, {a: z, b: y, x: real_inverse x}",
                    "id": "1.2.2.9",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x) ⊢ real_inverse x ^ z ≤ real_inverse x ^ y ⟷ z ≤ y"
                },
                {
                    "args": "",
                    "id": "1.2.2.10",
                    "prevs": [
                        "1.2.2.9",
                        "1.2.2.6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x), x ^ y = x ^ z ⊢ z ≤ y"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.11",
                    "prevs": [
                        "1.2.2.8",
                        "1.2.2.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x), x ^ y = x ^ z ⊢ y ≤ z ∧ z ≤ y"
                },
                {
                    "args": "real_le_antisym, y = z",
                    "id": "1.2.2.12",
                    "prevs": [
                        "1.2.2.11"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "0 < x, ¬(x = 1), ¬(1 < x), x ^ y = x ^ z ⊢ y = z"
                },
                {
                    "args": "",
                    "id": "1.2.2.13",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.12"
                    ],
                    "rule": "intros",
                    "th": "0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ ¬(1 < x) ⟶ y = z"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ y = z"
                },
                {
                    "args": "disjI2, {A: x = 1, B: y = z}",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, ¬(x = 1), x ^ y = x ^ z ⊢ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.0",
                        "1.2.4"
                    ],
                    "rule": "intros",
                    "th": "0 < x, x ^ y = x ^ z ⊢ ¬(x = 1) ⟶ x = 1 ∨ y = z"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x ^ y = x ^ z ⊢ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x ⊢ x ^ y = x ^ z ⟶ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x ⊢ x = 1 ∨ y = z ⟶ x ^ y = x ^ z"
                },
                {
                    "args": "x = 1 ∨ y = z",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ∨ y = z ⊢ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, x = 1 ∨ y = z ⊢ x = 1 ⟶ x ^ y = x ^ z"
                },
                {
                    "args": "x = 1",
                    "id": "2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "rpow_one, (1::real) ^ y = 1 ^ z",
                    "id": "2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::real) ^ y = 1 ^ z"
                },
                {
                    "args": "x ^ y = x ^ z",
                    "id": "2.1.2",
                    "prevs": [
                        "2.1.0",
                        "2.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 1, 0 < x, x = 1 ∨ y = z ⊢ x ^ y = x ^ z"
                },
                {
                    "args": "",
                    "id": "2.1.3",
                    "prevs": [
                        "2.1.0",
                        "2.1.2"
                    ],
                    "rule": "intros",
                    "th": "0 < x, x = 1 ∨ y = z ⊢ x = 1 ⟶ x ^ y = x ^ z"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < x, x = 1 ∨ y = z ⊢ y = z ⟶ x ^ y = x ^ z"
                },
                {
                    "args": "y = z",
                    "id": "2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = z ⊢ y = z"
                },
                {
                    "args": "x ^ y = x ^ z",
                    "id": "2.2.1",
                    "prevs": [
                        "2.2.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y = z ⊢ x ^ y = x ^ z"
                },
                {
                    "args": "",
                    "id": "2.2.2",
                    "prevs": [
                        "2.2.0",
                        "2.2.1"
                    ],
                    "rule": "intros",
                    "th": "0 < x, x = 1 ∨ y = z ⊢ y = z ⟶ x ^ y = x ^ z"
                },
                {
                    "args": "disjE",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x = 1 ∨ y = z ⊢ x ^ y = x ^ z"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "0 < x ⊢ x = 1 ∨ y = z ⟶ x ^ y = x ^ z"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x ⊢ x ^ y = x ^ z ⟷ x = 1 ∨ y = z"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x ^ y = x ^ z ⟷ x = 1 ∨ y = z"
                }
            ],
            "prop": "0 < x ⟶ x ^ y = x ^ z ⟷ x = 1 ∨ y = z",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "x=1",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "case": "1 < x",
                    "goal_id": "1.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "1.2.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.2.1.1"
                    ],
                    "goal_id": "1.2.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.1"
                    ],
                    "goal_id": "1.2.1.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.4",
                    "method_name": "apply_forward_step",
                    "param_a": "y",
                    "param_b": "z",
                    "theorem": "rpow_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.4",
                        "1.2.1.2"
                    ],
                    "goal_id": "1.2.1.5",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.6",
                    "method_name": "apply_forward_step",
                    "param_a": "z",
                    "param_b": "y",
                    "theorem": "rpow_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "1.2.1.6",
                        "1.2.1.3"
                    ],
                    "goal_id": "1.2.1.7",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal": "1 < real_inverse x",
                    "goal_id": "1.2.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.2.0",
                        "1.2.0",
                        "0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_eq_inv2"
                },
                {
                    "fact_ids": [
                        "1.2.2.2"
                    ],
                    "goal_id": "1.2.2.3",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "rpow_inv"
                },
                {
                    "fact_ids": [
                        "1.2.2.3"
                    ],
                    "goal_id": "1.2.2.4",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "1.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_le_antisym"
                },
                {
                    "goal_id": "1.2.2.5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.2.2.4"
                    ],
                    "goal_id": "1.2.2.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.2.4"
                    ],
                    "goal_id": "1.2.2.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.2.1"
                    ],
                    "goal_id": "1.2.2.7",
                    "method_name": "apply_forward_step",
                    "param_a": "y",
                    "param_b": "z",
                    "theorem": "rpow_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "1.2.2.7",
                        "1.2.2.5"
                    ],
                    "goal_id": "1.2.2.8",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.1"
                    ],
                    "goal_id": "1.2.2.9",
                    "method_name": "apply_forward_step",
                    "param_a": "z",
                    "param_b": "y",
                    "theorem": "rpow_mono_le_eq"
                },
                {
                    "fact_ids": [
                        "1.2.2.9",
                        "1.2.2.6"
                    ],
                    "goal_id": "1.2.2.10",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.1.0"
                    ],
                    "goal_id": "2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_one"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.2.0"
                    ],
                    "goal_id": "2.2.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_le_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 ≤ x ⊢ 1 ≤ x"
                },
                {
                    "args": "0 ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "rpow_0, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ^ (0::real) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = x ^ (0::real)"
                },
                {
                    "args": "rpow_mono_le",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 ≤ x, 0 ≤ y ⊢ x ^ (0::real) ≤ x ^ y"
                },
                {
                    "args": "1 ≤ x ^ y",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "1 ≤ x, 0 ≤ y ⊢ 1 ≤ x ^ y"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 ≤ x ⟶ 0 ≤ y ⟶ 1 ≤ x ^ y"
                }
            ],
            "prop": "1 ≤ x ⟶ 0 ≤ y ⟶ 1 ≤ x ^ y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "rpow_0"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_mono_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_lt_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 < x ⊢ 1 < x"
                },
                {
                    "args": "0 < y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < y ⊢ 0 < y"
                },
                {
                    "args": "rpow_0, {x: x}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ^ (0::real) = 1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ 1 = x ^ (0::real)"
                },
                {
                    "args": "rpow_mono_lt",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 < x, 0 < y ⊢ x ^ (0::real) < x ^ y"
                },
                {
                    "args": "1 < x ^ y",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "1 < x, 0 < y ⊢ 1 < x ^ y"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 < x ⟶ 0 < y ⟶ 1 < x ^ y"
                }
            ],
            "prop": "1 < x ⟶ 0 < y ⟶ 1 < x ^ y",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "rpow_0"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_mono_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_mono_inv",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x ≤ 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ 1 ⊢ x ≤ 1"
                },
                {
                    "args": "b ≤ a",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b ≤ a ⊢ b ≤ a"
                },
                {
                    "args": "real_inv_inv, {x: x}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ real_inverse (real_inverse x) = x"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ x = real_inverse (real_inverse x)"
                },
                {
                    "args": "real_lt_inv",
                    "id": "5",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, b ≤ a, x ≤ 1 ⊢ 0 < real_inverse x"
                },
                {
                    "args": "rpow_pos_lt, {x: real_inverse x, y: b}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x, b ≤ a, x ≤ 1 ⊢ 0 < real_inverse x ^ b"
                },
                {
                    "args": "real_inv_1_le",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, x ≤ 1 ⊢ 1 ≤ real_inverse x"
                },
                {
                    "args": "rpow_mono_le",
                    "id": "8",
                    "prevs": [
                        "7",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, b ≤ a, x ≤ 1 ⊢ real_inverse x ^ b ≤ real_inverse x ^ a"
                },
                {
                    "args": "real_le_inv2",
                    "id": "9",
                    "prevs": [
                        "6",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < x, b ≤ a, x ≤ 1 ⊢ real_inverse (real_inverse x ^ a) ≤ real_inverse (real_inverse x ^ b)"
                },
                {
                    "args": "rpow_inv, real_inverse (real_inverse x) ^ a ≤ real_inverse (real_inverse x) ^ b",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x, b ≤ a, x ≤ 1 ⊢ real_inverse (real_inverse x) ^ a ≤ real_inverse (real_inverse x) ^ b"
                },
                {
                    "args": "x ^ a ≤ x ^ b",
                    "id": "11",
                    "prevs": [
                        "4",
                        "10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, b ≤ a, x ≤ 1 ⊢ x ^ a ≤ x ^ b"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "11"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ x ≤ 1 ⟶ b ≤ a ⟶ x ^ a ≤ x ^ b"
                }
            ],
            "prop": "0 < x ⟶ x ≤ 1 ⟶ b ≤ a ⟶ x ^ a ≤ x ^ b",
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "real_inv_inv"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_inv"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_inv2"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_pos_lt"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "real_lt_inv"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_mono_le"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "real_inv_1_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "b": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_1_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "x ≤ 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ 1 ⊢ x ≤ 1"
                },
                {
                    "args": "0 ≤ a",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ a ⊢ 0 ≤ a"
                },
                {
                    "args": "rpow_le2",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ 1, 0 ≤ a, 0 ≤ x ⊢ x ^ a ≤ 1 ^ a"
                },
                {
                    "args": "real_le_refl, {x: (1::real)}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::real) ≤ 1"
                },
                {
                    "args": "rpow_one, (1::real) ^ a ≤ 1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ 1, 0 ≤ a, 0 ≤ x ⊢ (1::real) ^ a ≤ 1"
                },
                {
                    "args": "real_le_trans",
                    "id": "6",
                    "prevs": [
                        "3",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ 1, 0 ≤ a, 0 ≤ x ⊢ x ^ a ≤ 1"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ x ≤ 1 ⟶ 0 ≤ a ⟶ x ^ a ≤ 1"
                }
            ],
            "prop": "0 ≤ x ⟶ x ≤ 1 ⟶ 0 ≤ a ⟶ x ^ a ≤ 1",
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "param_y": "(1::real)^a",
                    "theorem": "real_le_trans"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_le2"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_one"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_le_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_root_rpow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 ≤ x ∨ odd n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ∨ odd n ⊢ 0 ≤ x ∨ odd n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ∨ odd n ⊢ x = 0 ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "x = 0",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "real_of_nat_eq, ¬((of_nat::nat ⇒ real) n = of_nat 0)",
                    "id": "2.1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ ¬((of_nat::nat ⇒ real) n = of_nat 0)"
                },
                {
                    "args": "real_zero_def, ¬(of_nat n = (0::real))",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ ¬(of_nat n = (0::real))"
                },
                {
                    "args": "real_inv_eq_0, ¬(real_inverse (of_nat n) = 0)",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ ¬(real_inverse (of_nat n) = 0)"
                },
                {
                    "args": "if_not_P, (0::real) = (if real_inverse (of_nat n) = 0 then 1 else 0)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ (0::real) = (if real_inverse (of_nat n) = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, (0::real) = 0 ^ real_inverse (of_nat n)",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ (0::real) = 0 ^ real_inverse (of_nat n)"
                },
                {
                    "args": "root_0, root n 0 = 0 ^ real_inverse (of_nat n)",
                    "id": "2.6",
                    "prevs": [
                        "2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ root n 0 = 0 ^ real_inverse (of_nat n)"
                },
                {
                    "args": "root n x = x ^ real_inverse (of_nat n)",
                    "id": "2.7",
                    "prevs": [
                        "2.0",
                        "2.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(n = 0), 0 ≤ x ∨ odd n ⊢ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ∨ odd n ⊢ x = 0 ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 0 ≤ x ∨ odd n ⊢ ¬(x = 0) ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ 0 ≤ x ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "0 ≤ x",
                    "id": "3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "0 < x",
                    "id": "3.1.1",
                    "prevs": [
                        "3.1.0",
                        "3.0"
                    ],
                    "rule": "z3",
                    "th": "0 ≤ x, ¬(x = 0) ⊢ 0 < x"
                },
                {
                    "args": "root_exp_log, {n: n, x: x}",
                    "id": "3.1.2",
                    "prevs": [
                        "0",
                        "3.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, ¬(n = 0), ¬(x = 0) ⊢ root n x = exp (log x / of_nat n)"
                },
                {
                    "args": "real_mult_comm, {x: log x, y: real_inverse (of_nat n)}",
                    "id": "3.1.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ log x * real_inverse (of_nat n) = real_inverse (of_nat n) * log x"
                },
                {
                    "args": "real_divide_def, log x / of_nat n = real_inverse (of_nat n) * log x",
                    "id": "3.1.4",
                    "prevs": [
                        "3.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ log x / of_nat n = real_inverse (of_nat n) * log x"
                },
                {
                    "args": "real_exp_inj, exp (log x / of_nat n) = exp (real_inverse (of_nat n) * log x)",
                    "id": "3.1.5",
                    "prevs": [
                        "3.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ exp (log x / of_nat n) = exp (real_inverse (of_nat n) * log x)"
                },
                {
                    "args": "if_P, exp (log x / of_nat n) = (if 0 < x then exp (real_inverse (of_nat n) * log x) else if x = 0 then if real_inverse (of_nat n) = 0 then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))",
                    "id": "3.1.6",
                    "prevs": [
                        "3.1.5",
                        "3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ exp (log x / of_nat n) = (if 0 < x then exp (real_inverse (of_nat n) * log x) else if x = 0 then if real_inverse (of_nat n) = 0 then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))"
                },
                {
                    "args": "real_real_power_def, exp (log x / of_nat n) = x ^ real_inverse (of_nat n)",
                    "id": "3.1.7",
                    "prevs": [
                        "3.1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, ¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ exp (log x / of_nat n) = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "root n x = x ^ real_inverse (of_nat n)",
                    "id": "3.1.8",
                    "prevs": [
                        "3.1.2",
                        "3.1.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 ≤ x, ¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "3.1.9",
                    "prevs": [
                        "3.1.0",
                        "3.1.8"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ 0 ≤ x ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ ¬(0 ≤ x) ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "¬(0 ≤ x)",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ x) ⊢ ¬(0 ≤ x)"
                },
                {
                    "args": "",
                    "id": "3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd n ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "odd n",
                    "id": "3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "0 < -x",
                    "id": "3.2.1.1",
                    "prevs": [
                        "3.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 ≤ x) ⊢ 0 < -x"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "3.2.1.2",
                    "prevs": [
                        "3.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 ≤ x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "trueI",
                    "id": "3.2.1.3",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "3.2.1.4",
                    "prevs": [
                        "3.2.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ even 0"
                },
                {
                    "args": "not_odd, ¬(odd 0)",
                    "id": "3.2.1.5",
                    "prevs": [
                        "3.2.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ ¬(odd 0)"
                },
                {
                    "args": "odd_def_2, odd (Suc 0)",
                    "id": "3.2.1.6",
                    "prevs": [
                        "3.2.1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd (Suc 0)"
                },
                {
                    "args": "nat_one_def, odd 1",
                    "id": "3.2.1.7",
                    "prevs": [
                        "3.2.1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd 1"
                },
                {
                    "args": "real_inverse (of_nat n) = of_nat 1 * real_inverse (of_nat n)",
                    "id": "3.2.1.8",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ real_inverse (of_nat n) = of_nat 1 * real_inverse (of_nat n)"
                },
                {
                    "args": "real_abs_nat, real_inverse (abs (of_nat n)) = of_nat 1 * real_inverse (of_nat n)",
                    "id": "3.2.1.9",
                    "prevs": [
                        "3.2.1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ real_inverse (abs (of_nat n)) = of_nat 1 * real_inverse (of_nat n)"
                },
                {
                    "args": "real_abs_inv, abs (real_inverse (of_nat n)) = of_nat 1 * real_inverse (of_nat n)",
                    "id": "3.2.1.10",
                    "prevs": [
                        "3.2.1.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ abs (real_inverse (of_nat n)) = of_nat 1 * real_inverse (of_nat n)"
                },
                {
                    "args": "real_divide_def, abs (real_inverse (of_nat n)) = of_nat 1 / of_nat n",
                    "id": "3.2.1.11",
                    "prevs": [
                        "3.2.1.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ abs (real_inverse (of_nat n)) = of_nat 1 / of_nat n"
                },
                {
                    "args": "conjI",
                    "id": "3.2.1.12",
                    "prevs": [
                        "3.2.1.0",
                        "3.2.1.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd n ∧ abs (real_inverse (of_nat n)) = of_nat 1 / of_nat n"
                },
                {
                    "args": "conjI",
                    "id": "3.2.1.13",
                    "prevs": [
                        "3.2.1.7",
                        "3.2.1.12"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd 1 ∧ odd n ∧ abs (real_inverse (of_nat n)) = of_nat 1 / of_nat n"
                },
                {
                    "args": "exI, {P: λn1. odd 1 ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat 1 / of_nat n1, a: n}",
                    "id": "3.2.1.14",
                    "prevs": [
                        "3.2.1.13"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ ∃a1. odd 1 ∧ odd a1 ∧ abs (real_inverse (of_nat n)) = of_nat 1 / of_nat a1"
                },
                {
                    "args": "exI, {P: λm. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1, a: (1::nat)}",
                    "id": "3.2.1.15",
                    "prevs": [
                        "3.2.1.14"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ ∃a1. ∃n1. odd a1 ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat a1 / of_nat n1"
                },
                {
                    "args": "real_of_nat_eq, ¬((of_nat::nat ⇒ real) n = of_nat 0)",
                    "id": "3.2.1.16",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ ¬((of_nat::nat ⇒ real) n = of_nat 0)"
                },
                {
                    "args": "real_zero_def, ¬(of_nat n = (0::real))",
                    "id": "3.2.1.17",
                    "prevs": [
                        "3.2.1.16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ ¬(of_nat n = (0::real))"
                },
                {
                    "args": "real_mul_linv",
                    "id": "3.2.1.18",
                    "prevs": [
                        "3.2.1.17"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ real_inverse (of_nat n) * of_nat n = 1"
                },
                {
                    "args": "real_mult_comm, of_nat n * real_inverse (of_nat n) = 1",
                    "id": "3.2.1.19",
                    "prevs": [
                        "3.2.1.18"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ of_nat n * real_inverse (of_nat n) = 1"
                },
                {
                    "args": "exp_log, {x: -x}",
                    "id": "3.2.1.20",
                    "prevs": [
                        "3.2.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 ≤ x) ⊢ exp (log (-x)) = -x"
                },
                {
                    "args": "real_neg_neg, --x = x",
                    "id": "3.2.1.21",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ --x = x"
                },
                {
                    "args": "-(exp (log (-x))) = x",
                    "id": "3.2.1.22",
                    "prevs": [
                        "3.2.1.20",
                        "3.2.1.21"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ -(exp (log (-x))) = x"
                },
                {
                    "args": "real_mul_lid, -(exp (1 * log (-x))) = x",
                    "id": "3.2.1.23",
                    "prevs": [
                        "3.2.1.22"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ -(exp (1 * log (-x))) = x"
                },
                {
                    "args": "-(exp (of_nat n * real_inverse (of_nat n) * log (-x))) = x",
                    "id": "3.2.1.24",
                    "prevs": [
                        "3.2.1.19",
                        "3.2.1.23"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ -(exp (of_nat n * real_inverse (of_nat n) * log (-x))) = x"
                },
                {
                    "args": "real_mult_assoc, -(exp (of_nat n * (real_inverse (of_nat n) * log (-x)))) = x",
                    "id": "3.2.1.25",
                    "prevs": [
                        "3.2.1.24"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ -(exp (of_nat n * (real_inverse (of_nat n) * log (-x)))) = x"
                },
                {
                    "args": "real_exp_n, -(exp (real_inverse (of_nat n) * log (-x)) ^ n) = x",
                    "id": "3.2.1.26",
                    "prevs": [
                        "3.2.1.25"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ -(exp (real_inverse (of_nat n) * log (-x)) ^ n) = x"
                },
                {
                    "args": "if_not_P2, (if ¬(odd n) then exp (real_inverse (of_nat n) * log (-x)) ^ n else -(exp (real_inverse (of_nat n) * log (-x)) ^ n)) = x",
                    "id": "3.2.1.27",
                    "prevs": [
                        "3.2.1.26",
                        "3.2.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ (if ¬(odd n) then exp (real_inverse (of_nat n) * log (-x)) ^ n else -(exp (real_inverse (of_nat n) * log (-x)) ^ n)) = x"
                },
                {
                    "args": "not_odd, (if even n then exp (real_inverse (of_nat n) * log (-x)) ^ n else -(exp (real_inverse (of_nat n) * log (-x)) ^ n)) = x",
                    "id": "3.2.1.28",
                    "prevs": [
                        "3.2.1.27"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ (if even n then exp (real_inverse (of_nat n) * log (-x)) ^ n else -(exp (real_inverse (of_nat n) * log (-x)) ^ n)) = x"
                },
                {
                    "args": "real_pow_neg, -(exp (real_inverse (of_nat n) * log (-x))) ^ n = x",
                    "id": "3.2.1.29",
                    "prevs": [
                        "3.2.1.28"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ -(exp (real_inverse (of_nat n) * log (-x))) ^ n = x"
                },
                {
                    "args": "disjI1, {A: odd n, B: ¬(n = 0) ∧ 0 ≤ -(exp (real_inverse (of_nat n) * log (-x)))}",
                    "id": "3.2.1.30",
                    "prevs": [
                        "3.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd n ∨ ¬(n = 0) ∧ 0 ≤ -(exp (real_inverse (of_nat n) * log (-x)))"
                },
                {
                    "args": "root_unique",
                    "id": "3.2.1.31",
                    "prevs": [
                        "3.2.1.29",
                        "3.2.1.30"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ root n x = -(exp (real_inverse (of_nat n) * log (-x)))"
                },
                {
                    "args": "if_P, root n x = (if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))",
                    "id": "3.2.1.32",
                    "prevs": [
                        "3.2.1.31",
                        "3.2.1.15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ root n x = (if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))"
                },
                {
                    "args": "if_not_P, root n x = (if x = 0 then if real_inverse (of_nat n) = 0 then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))",
                    "id": "3.2.1.33",
                    "prevs": [
                        "3.2.1.32",
                        "3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ root n x = (if x = 0 then if real_inverse (of_nat n) = 0 then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))"
                },
                {
                    "args": "if_not_P, root n x = (if 0 < x then exp (real_inverse (of_nat n) * log x) else if x = 0 then if real_inverse (of_nat n) = 0 then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))",
                    "id": "3.2.1.34",
                    "prevs": [
                        "3.2.1.33",
                        "3.2.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ root n x = (if 0 < x then exp (real_inverse (of_nat n) * log x) else if x = 0 then if real_inverse (of_nat n) = 0 then 1 else 0 else if ∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1 then -(exp (real_inverse (of_nat n) * log (-x))) else exp (real_inverse (of_nat n) * log (-x)))"
                },
                {
                    "args": "real_real_power_def, root n x = x ^ real_inverse (of_nat n)",
                    "id": "3.2.1.35",
                    "prevs": [
                        "3.2.1.34"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd n, ¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "3.2.1.36",
                    "prevs": [
                        "3.2.1.0",
                        "3.2.1.35"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ odd n ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "disjE",
                    "id": "3.2.2",
                    "prevs": [
                        "1",
                        "3.1",
                        "3.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(x = 0), ¬(0 ≤ x), 0 ≤ x ∨ odd n ⊢ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "3.2.3",
                    "prevs": [
                        "3.2.0",
                        "3.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ ¬(0 ≤ x) ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "classical_cases",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(x = 0), 0 ≤ x ∨ odd n ⊢ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 0 ≤ x ∨ odd n ⊢ ¬(x = 0) ⟶ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "classical_cases",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 0 ≤ x ∨ odd n ⊢ root n x = x ^ real_inverse (of_nat n)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 ≤ x ∨ odd n ⟶ root n x = x ^ real_inverse (of_nat n)"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 ≤ x ∨ odd n ⟶ root n x = x ^ real_inverse (of_nat n)",
            "steps": [
                {
                    "case": "x = 0",
                    "goal_id": "2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "root_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "goal": "~(real_inverse (of_nat n) = 0)",
                    "goal_id": "2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_inv_eq_0"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "case": "0 <= x",
                    "goal_id": "3.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.1.0"
                    ],
                    "goal": "0 < x",
                    "goal_id": "3.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.1.0",
                        "3.0"
                    ],
                    "goal_id": "3.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0",
                        "3.1.1"
                    ],
                    "goal_id": "3.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "root_exp_log"
                },
                {
                    "fact_ids": [
                        "3.1.2"
                    ],
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "3.1.1"
                    ],
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "3.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal": "0 < -x",
                    "goal_id": "3.2.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "~(0 <x)",
                    "goal_id": "3.2.1.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2.1.2"
                    ],
                    "goal_id": "3.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "∃m. ∃n1. odd m ∧ odd n1 ∧ abs (real_inverse (of_nat n)) = of_nat m / of_nat n1",
                    "goal_id": "3.2.1.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_2"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_odd"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "3.2.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "3.2.1.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.2.1.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_divide_def"
                },
                {
                    "goal_id": "3.2.1.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_inv"
                },
                {
                    "goal_id": "3.2.1.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_nat"
                },
                {
                    "goal_id": "3.2.1.8",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "3.2.1.15"
                    ],
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "apply_backward_step",
                    "theorem": "root_unique"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_pow_neg"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_odd"
                },
                {
                    "fact_ids": [
                        "3.2.1.0"
                    ],
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P2"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_exp_n"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_assoc"
                },
                {
                    "goal": "of_nat n * real_inverse (of_nat n) = 1",
                    "goal_id": "3.2.1.16",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mult_comm"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mul_linv"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_zero_def"
                },
                {
                    "goal_id": "3.2.1.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_eq"
                },
                {
                    "fact_ids": [
                        "3.2.1.19"
                    ],
                    "goal_id": "3.2.1.20",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.1.20",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "fact_ids": [
                        "3.2.1.1"
                    ],
                    "goal_id": "3.2.1.20",
                    "method_name": "apply_forward_step",
                    "theorem": "exp_log"
                },
                {
                    "fact_ids": [
                        "3.2.1.20"
                    ],
                    "goal_id": "3.2.1.21",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.1.21",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "3.2.1.30",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_rpow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "log_exp, log (exp (y * log x)) = y * log x",
                    "id": "1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ log (exp (y * log x)) = y * log x"
                },
                {
                    "args": "if_P, log (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = y * log x",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ log (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = y * log x"
                },
                {
                    "args": "real_real_power_def, log (x ^ y) = y * log x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < x ⊢ log (x ^ y) = y * log x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log (x ^ y) = y * log x"
                }
            ],
            "prop": "0 < x ⟶ log (x ^ y) = y * log x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_exp"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "log_sqrt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 < x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "x ≥ 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ x ≥ 0"
                },
                {
                    "args": "rpow_sqrt, {x: x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ sqrt x = x ^ (1 / 2)"
                },
                {
                    "args": "log_rpow, {x: x, y: 1 / 2}",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < x ⊢ log (x ^ (1 / 2)) = 1 / 2 * log x"
                },
                {
                    "args": "1 / 2 * log x = log x / 2",
                    "id": "4",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 1 / 2 * log x = log x / 2"
                },
                {
                    "args": "log (x ^ (1 / 2)) = log x / 2",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ log (x ^ (1 / 2)) = log x / 2"
                },
                {
                    "args": "log (sqrt x) = log x / 2",
                    "id": "6",
                    "prevs": [
                        "2",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x ⊢ log (sqrt x) = log x / 2"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ⟶ log (sqrt x) = log x / 2"
                }
            ],
            "prop": "0 < x ⟶ log (sqrt x) = log x / 2",
            "steps": [
                {
                    "goal": "x >=0",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "rpow_sqrt"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_y": "1/2",
                    "theorem": "log_rpow"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "real_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "rpow_add_integer",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "integer m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "integer m ⊢ integer m"
                },
                {
                    "args": "integer n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "integer n ⊢ integer n"
                },
                {
                    "args": "¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0))",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer m, integer n, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ x = 0 ⟶ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "x = 0",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ m + n = 0 ⟶ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "m + n = 0",
                    "id": "3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m + n = 0 ⊢ m + n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "3.1.1",
                    "prevs": [
                        "2",
                        "3.0",
                        "3.1.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0, m + n = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "3.1.2",
                    "prevs": [
                        "3.1.0",
                        "3.1.1"
                    ],
                    "rule": "z3",
                    "th": "x = 0, m + n = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ m = 0"
                },
                {
                    "args": "real_mul_lid, (1::real) = 1 * 1",
                    "id": "3.1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::real) = 1 * 1"
                },
                {
                    "args": "if_P, (1::real) = 1 * (if n = 0 then 1 else 0)",
                    "id": "3.1.4",
                    "prevs": [
                        "3.1.3",
                        "3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, x = 0, m + n = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (1::real) = 1 * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (1::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)",
                    "id": "3.1.5",
                    "prevs": [
                        "3.1.4",
                        "3.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, x = 0, m + n = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (1::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)",
                    "id": "3.1.6",
                    "prevs": [
                        "3.1.5",
                        "3.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, x = 0, m + n = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3.1.7",
                    "prevs": [
                        "3.1.0",
                        "3.1.6"
                    ],
                    "rule": "intros",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ m + n = 0 ⟶ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(m + n = 0) ⟶ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "¬(m + n = 0)",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m + n = 0) ⊢ ¬(m + n = 0)"
                },
                {
                    "args": "",
                    "id": "3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer m, integer n, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ m = 0 ⟶ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "m = 0",
                    "id": "3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "3.2.1.1",
                    "prevs": [
                        "3.2.0",
                        "3.2.1.0"
                    ],
                    "rule": "z3",
                    "th": "m = 0, ¬(m + n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "real_mul_lid, (0::real) = 1 * 0",
                    "id": "3.2.1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) = 1 * 0"
                },
                {
                    "args": "if_not_P, (0::real) = 1 * (if n = 0 then 1 else 0)",
                    "id": "3.2.1.3",
                    "prevs": [
                        "3.2.1.2",
                        "3.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, m = 0, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (0::real) = 1 * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)",
                    "id": "3.2.1.4",
                    "prevs": [
                        "3.2.1.3",
                        "3.2.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, m = 0, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3.2.1.5",
                    "prevs": [
                        "3.2.1.0",
                        "3.2.1.4"
                    ],
                    "rule": "intros",
                    "th": "integer m, integer n, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ m = 0 ⟶ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer m, integer n, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(m = 0) ⟶ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "3.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "real_mul_lzero, (0::real) = 0 * (if n = 0 then 1 else 0)",
                    "id": "3.2.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::real) = 0 * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)",
                    "id": "3.2.2.2",
                    "prevs": [
                        "3.2.2.1",
                        "3.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, x = 0, ¬(m = 0), ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3.2.2.3",
                    "prevs": [
                        "3.2.2.0",
                        "3.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "integer m, integer n, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(m = 0) ⟶ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "3.2.3",
                    "prevs": [
                        "3.2.1",
                        "3.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "integer m, integer n, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (0::real) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)",
                    "id": "3.2.4",
                    "prevs": [
                        "3.2.3",
                        "3.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, x = 0, ¬(m + n = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3.2.5",
                    "prevs": [
                        "3.2.0",
                        "3.2.4"
                    ],
                    "rule": "intros",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(m + n = 0) ⟶ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (if m + n = 0 then (1::real) else 0) = (if m = 0 then 1 else 0) * (if n = 0 then 1 else 0)"
                },
                {
                    "args": "rpow_zero, (0::real) ^ (m + n) = 0 ^ m * 0 ^ n",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ (0::real) ^ (m + n) = 0 ^ m * 0 ^ n"
                },
                {
                    "args": "x ^ (m + n) = x ^ m * x ^ n",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "integer m, integer n, x = 0, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "integer m, integer n, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ x = 0 ⟶ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "integer m, integer n, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(x = 0) ⟶ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "integer m, integer n, ¬(x = 0), ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [
                        "4.0",
                        "4.1"
                    ],
                    "rule": "intros",
                    "th": "integer m, integer n, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ ¬(x = 0) ⟶ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "integer m, integer n, ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⊢ x ^ (m + n) = x ^ m * x ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ integer m ⟶ integer n ⟶ ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⟶ x ^ (m + n) = x ^ m * x ^ n"
                }
            ],
            "prop": [
                "integer m ",
                "⟶ integer n ⟶ ¬(x = 0 ∧ m + n = 0 ∧ ¬(n = 0)) ⟶ x ^ (m + n) = x ^ m * x ^ n"
            ],
            "steps": [
                {
                    "case": "x=0",
                    "goal_id": "3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_zero"
                },
                {
                    "case": "m + n = 0",
                    "goal_id": "3.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.1.0"
                    ],
                    "goal_id": "3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "n = 0",
                    "goal_id": "3.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "2",
                        "3.0",
                        "3.1.0"
                    ],
                    "goal_id": "3.1.1",
                    "method_name": "z3"
                },
                {
                    "goal": "m=0",
                    "goal_id": "3.1.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.1.0",
                        "3.1.1"
                    ],
                    "goal_id": "3.1.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.1.2"
                    ],
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "3.1.1"
                    ],
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "m = 0",
                    "goal_id": "3.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal": "~(n=0)",
                    "goal_id": "3.2.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "3.2.0",
                        "3.2.1.0"
                    ],
                    "goal_id": "3.2.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2.1.0"
                    ],
                    "goal_id": "3.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "3.2.1.1"
                    ],
                    "goal_id": "3.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "3.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lid"
                },
                {
                    "goal_id": "3.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.2.0"
                    ],
                    "goal_id": "3.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "3.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_mul_lzero"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_max_rpow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "0 ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "0 ≤ z",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ z ⊢ 0 ≤ z"
                },
                {
                    "args": "real_le_total, {x: x, y: y}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ≤ y ∨ y ≤ x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ x ≤ y ⟶ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "x ≤ y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "rpow_le2",
                    "id": "4.1",
                    "prevs": [
                        "0",
                        "4.0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "if_P, (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = y ^ z",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = y ^ z"
                },
                {
                    "args": "if_P, (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z",
                    "id": "4.3",
                    "prevs": [
                        "4.2",
                        "4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ x ≤ y ⟶ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ y ≤ x ⟶ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "y ≤ x",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ x ⊢ y ≤ x"
                },
                {
                    "args": "∀x::real. ∀y. (if x ≤ y then y else x) = (if y ≤ x then x else y)",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. ∀y. (if x ≤ y then y else x) = (if y ≤ x then x else y)"
                },
                {
                    "args": "rpow_le2",
                    "id": "5.2",
                    "prevs": [
                        "1",
                        "5.0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ y ^ z ≤ x ^ z"
                },
                {
                    "args": "if_P, (if y ^ z ≤ x ^ z then x ^ z else y ^ z) = x ^ z",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if y ^ z ≤ x ^ z then x ^ z else y ^ z) = x ^ z"
                },
                {
                    "args": "if_P, (if y ^ z ≤ x ^ z then x ^ z else y ^ z) = (if y ≤ x then x else y) ^ z",
                    "id": "5.4",
                    "prevs": [
                        "5.3",
                        "5.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if y ^ z ≤ x ^ z then x ^ z else y ^ z) = (if y ≤ x then x else y) ^ z"
                },
                {
                    "args": "(if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z",
                    "id": "5.5",
                    "prevs": [
                        "5.1",
                        "5.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "5.0",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ y ≤ x ⟶ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "disjE",
                    "id": "6",
                    "prevs": [
                        "3",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if x ^ z ≤ y ^ z then y ^ z else x ^ z) = (if x ≤ y then y else x) ^ z"
                },
                {
                    "args": "max_def, max (x ^ z) (y ^ z) = max x y ^ z",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ max (x ^ z) (y ^ z) = max x y ^ z"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ y ⟶ 0 ≤ z ⟶ max (x ^ z) (y ^ z) = max x y ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ y ⟶ 0 ≤ z ⟶ max (x ^ z) (y ^ z) = max x y ^ z",
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "max_def"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "param_y": "y",
                    "theorem": "real_le_total"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "x ^ z ≤ y ^ z",
                    "goal_id": "4.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_le2"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal": "∀x::real. ∀y. (if x ≤ y then y else x) = (if y ≤ x then x else y)",
                    "goal_id": "5.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5.0"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "y ^ z ≤ x ^ z",
                    "goal_id": "5.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_le2"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_min_rpow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0 ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "0 ≤ y",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ y ⊢ 0 ≤ y"
                },
                {
                    "args": "0 ≤ z",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ z ⊢ 0 ≤ z"
                },
                {
                    "args": "real_le_total, {x: x, y: y}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ≤ y ∨ y ≤ x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ x ≤ y ⟶ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "x ≤ y",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "rpow_le2",
                    "id": "4.1",
                    "prevs": [
                        "0",
                        "4.0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ x ^ z ≤ y ^ z"
                },
                {
                    "args": "if_P, (if x ^ z ≤ y ^ z then x ^ z else y ^ z) = x ^ z",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if x ^ z ≤ y ^ z then x ^ z else y ^ z) = x ^ z"
                },
                {
                    "args": "if_P, (if x ^ z ≤ y ^ z then x ^ z else y ^ z) = (if x ≤ y then x else y) ^ z",
                    "id": "4.3",
                    "prevs": [
                        "4.2",
                        "4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if x ^ z ≤ y ^ z then x ^ z else y ^ z) = (if x ≤ y then x else y) ^ z"
                },
                {
                    "args": "min_def, min (x ^ z) (y ^ z) = min x y ^ z",
                    "id": "4.4",
                    "prevs": [
                        "4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "",
                    "id": "4.5",
                    "prevs": [
                        "4.0",
                        "4.4"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ x ≤ y ⟶ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ y ≤ x ⟶ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "y ≤ x",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ x ⊢ y ≤ x"
                },
                {
                    "args": "∀x::real. ∀y. min x y = min y x",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀x::real. ∀y. min x y = min y x"
                },
                {
                    "args": "rpow_le2",
                    "id": "5.2",
                    "prevs": [
                        "1",
                        "5.0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ y ^ z ≤ x ^ z"
                },
                {
                    "args": "if_P, (if y ^ z ≤ x ^ z then y ^ z else x ^ z) = y ^ z",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if y ^ z ≤ x ^ z then y ^ z else x ^ z) = y ^ z"
                },
                {
                    "args": "if_P, (if y ^ z ≤ x ^ z then y ^ z else x ^ z) = (if y ≤ x then y else x) ^ z",
                    "id": "5.4",
                    "prevs": [
                        "5.3",
                        "5.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ (if y ^ z ≤ x ^ z then y ^ z else x ^ z) = (if y ≤ x then y else x) ^ z"
                },
                {
                    "args": "min_def, min (y ^ z) (x ^ z) = min y x ^ z",
                    "id": "5.5",
                    "prevs": [
                        "5.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ min (y ^ z) (x ^ z) = min y x ^ z"
                },
                {
                    "args": "min (x ^ z) (y ^ z) = min x y ^ z",
                    "id": "5.6",
                    "prevs": [
                        "5.1",
                        "5.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "y ≤ x, 0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "",
                    "id": "5.7",
                    "prevs": [
                        "5.0",
                        "5.6"
                    ],
                    "rule": "intros",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ y ≤ x ⟶ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "disjE",
                    "id": "6",
                    "prevs": [
                        "3",
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ x, 0 ≤ y, 0 ≤ z ⊢ min (x ^ z) (y ^ z) = min x y ^ z"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ x ⟶ 0 ≤ y ⟶ 0 ≤ z ⟶ min (x ^ z) (y ^ z) = min x y ^ z"
                }
            ],
            "prop": "0 ≤ x ⟶ 0 ≤ y ⟶ 0 ≤ z ⟶ min (x ^ z) (y ^ z) = min x y ^ z",
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "param_y": "y",
                    "theorem": "real_le_total"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "min_def"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "x ^ z ≤ y ^ z",
                    "goal_id": "4.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_le2"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "goal": "!x::real. !y. min x y = min y x",
                    "goal_id": "5.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "min_def"
                },
                {
                    "fact_ids": [
                        "5.0"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "y ^ z ≤ x ^ z",
                    "goal_id": "5.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_le2"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "name": "rpow_rpow_nat1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x ≥ 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≥ 0 ⊢ x ≥ 0"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "x ≥ 0 ⊢ 0 ≤ x"
                },
                {
                    "args": "rpow_rpow, {m: (of_nat::nat ⇒ real) m, n: n, x: x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≥ 0 ⊢ x ^ (of_nat::nat ⇒ real) m ^ n = x ^ (of_nat m * n)"
                },
                {
                    "args": "rpow_pow, x ^ m ^ n = x ^ (of_nat m * n)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "x ≥ 0 ⊢ x ^ m ^ n = x ^ (of_nat m * n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≥ 0 ⟶ x ^ m ^ n = x ^ (of_nat m * n)"
                }
            ],
            "prop": "x ≥ 0 ⟶ x ^ m ^ n = x ^ (of_nat m * n)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_rpow"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "real",
                "x": "real"
            }
        },
        {
            "name": "rpow_rpow_nat2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x ≥ 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≥ 0 ⊢ x ≥ 0"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "x ≥ 0 ⊢ 0 ≤ x"
                },
                {
                    "args": "rpow_rpow, {m: m, n: (of_nat::nat ⇒ real) n, x: x}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≥ 0 ⊢ x ^ m ^ (of_nat::nat ⇒ real) n = x ^ (m * of_nat n)"
                },
                {
                    "args": "rpow_pow, x ^ m ^ n = x ^ (m * of_nat n)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "x ≥ 0 ⊢ x ^ m ^ n = x ^ (m * of_nat n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≥ 0 ⟶ x ^ m ^ n = x ^ (m * of_nat n)"
                }
            ],
            "prop": "x ≥ 0 ⟶ x ^ m ^ n = x ^ (m * of_nat n)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "rpow_rpow"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "real",
                "n": "nat",
                "x": "real"
            }
        },
        {
            "name": "rpow_base_divide",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x > 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x > 0 ⊢ x > 0"
                },
                {
                    "args": "y > 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y > 0 ⊢ y > 0"
                },
                {
                    "args": "rpow_div, (x / y) ^ z = x ^ z / y ^ z",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (x / y) ^ z = x ^ z / y ^ z"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x > 0 ⟶ y > 0 ⟶ (x / y) ^ z = x ^ z / y ^ z"
                }
            ],
            "prop": "x > 0 ⟶ y > 0 ⟶ (x / y) ^ z = x ^ z / y ^ z",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_div"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real",
                "z": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_abs_rpow",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ ¬(0 < x)"
                },
                {
                    "args": "¬(0 < abs x)",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ ¬(0 < abs x)"
                },
                {
                    "args": "abs (if y = 0 then (1::real) else 0) = (if y = 0 then 1 else 0)",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ abs (if y = 0 then (1::real) else 0) = (if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, abs (if y = 0 then 1 else 0) = (if 0 < abs x then exp (y * log (abs x)) else if y = 0 then 1 else 0)",
                    "id": "0.4",
                    "prevs": [
                        "0.3",
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ abs (if y = 0 then 1 else 0) = (if 0 < abs x then exp (y * log (abs x)) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, abs (if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) = (if 0 < abs x then exp (y * log (abs x)) else if y = 0 then 1 else 0)",
                    "id": "0.5",
                    "prevs": [
                        "0.4",
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ abs (if 0 < x then exp (y * log x) else if y = 0 then 1 else 0) = (if 0 < abs x then exp (y * log (abs x)) else if y = 0 then 1 else 0)"
                },
                {
                    "args": "if_P, abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))",
                    "id": "0.6",
                    "prevs": [
                        "0.5",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x = 0 ⊢ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "real_abs_zero, abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))",
                    "id": "0.7",
                    "prevs": [
                        "0.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ 0 < x ⟶ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "0 < x",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < x ⊢ 0 < x"
                },
                {
                    "args": "abs x = x",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "z3",
                    "th": "0 < x ⊢ abs x = x"
                },
                {
                    "args": "real_abs_exp, abs (exp (y * log x)) = exp (y * log x)",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (exp (y * log x)) = exp (y * log x)"
                },
                {
                    "args": "if_P, abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), 0 < x, 0 < x ⊢ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x)))"
                },
                {
                    "args": "abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.1",
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 < x, ¬(x = 0) ⊢ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ 0 < x ⟶ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(0 < x) ⟶ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "¬(0 < x)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 < x) ⊢ ¬(0 < x)"
                },
                {
                    "args": "0 < abs x",
                    "id": "1.2.1",
                    "prevs": [
                        "1.2.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ 0 < abs x"
                },
                {
                    "args": "abs x = -x",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(0 < x) ⊢ abs x = -x"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "id": "1.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n"
                },
                {
                    "args": "real_abs_exp, abs (exp (y * log (-x))) = exp (y * log (-x))",
                    "id": "1.2.3.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "real_abs_neg, abs (-(exp (y * log (-x)))) = exp (y * log (-x))",
                    "id": "1.2.3.2",
                    "prevs": [
                        "1.2.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ abs (-(exp (y * log (-x)))) = exp (y * log (-x))"
                },
                {
                    "args": "if_P, abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))",
                    "id": "1.2.3.3",
                    "prevs": [
                        "1.2.3.2",
                        "1.2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n, ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n ⊢ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "",
                    "id": "1.2.3.4",
                    "prevs": [
                        "1.2.3.0",
                        "1.2.3.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ (∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)",
                    "id": "1.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n)"
                },
                {
                    "args": "real_abs_exp, abs (exp (y * log (-x))) = exp (y * log (-x))",
                    "id": "1.2.4.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "if_not_P, abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))",
                    "id": "1.2.4.2",
                    "prevs": [
                        "1.2.4.1",
                        "1.2.4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n), ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⊢ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "",
                    "id": "1.2.4.3",
                    "prevs": [
                        "1.2.4.0",
                        "1.2.4.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(0 < x) ⊢ ¬(∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n) ⟶ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.3",
                        "1.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(0 < x), ¬(x = 0), ¬(0 < x) ⊢ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (-x))"
                },
                {
                    "args": "abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (abs x))",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.2",
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 < x), ¬(x = 0) ⊢ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = exp (y * log (abs x))"
                },
                {
                    "args": "if_P, abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6",
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ¬(0 < x), ¬(x = 0) ⊢ abs (if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "if_not_P, abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(0 < x), ¬(0 < x) ⊢ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.0",
                        "1.2.8"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(0 < x) ⟶ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(x = 0) ⊢ abs (if 0 < x then exp (y * log x) else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "if_not_P, abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), ¬(x = 0) ⊢ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ abs (if 0 < x then exp (y * log x) else if x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-x))) else exp (y * log (-x))) = (if 0 < abs x then exp (y * log (abs x)) else if abs x = 0 then if y = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n then -(exp (y * log (-(abs x)))) else exp (y * log (-(abs x))))"
                },
                {
                    "args": "real_real_power_def, abs (x ^ y) = abs x ^ y",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs (x ^ y) = abs x ^ y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ abs (x ^ y) = abs x ^ y"
                }
            ],
            "prop": "abs (x ^ y) = abs x ^ y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_zero"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "~(0 < x)",
                    "goal_id": "0.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "~(0 < abs x)",
                    "goal_id": "0.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "case": "0 < x",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal": "abs x = x",
                    "goal_id": "1.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.1"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_exp"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "0 < abs x",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "abs x = -x",
                    "goal_id": "1.2.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.2"
                    ],
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "case": "∃m. ∃n. odd m ∧ odd n ∧ abs y = of_nat m / of_nat n",
                    "goal_id": "1.2.3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.3.0"
                    ],
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                },
                {
                    "goal_id": "1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_exp"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.4.0"
                    ],
                    "goal_id": "1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_exp"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "name": "rpow_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_exp_pos_lt, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < exp x"
                },
                {
                    "args": "real_mult_comm, {x: p, y: x}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ p * x = x * p"
                },
                {
                    "args": "real_exp_inj, exp (p * x) = exp (x * p)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (p * x) = exp (x * p)"
                },
                {
                    "args": "log_exp, exp (p * log (exp x)) = exp (x * p)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp (p * log (exp x)) = exp (x * p)"
                },
                {
                    "args": "if_P, (if 0 < exp x then exp (p * log (exp x)) else if exp x = 0 then if p = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs p = of_nat m / of_nat n then -(exp (p * log (-(exp x)))) else exp (p * log (-(exp x)))) = exp (x * p)",
                    "id": "4",
                    "prevs": [
                        "3",
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 0 < exp x then exp (p * log (exp x)) else if exp x = 0 then if p = 0 then 1 else 0 else if ∃m. ∃n. odd m ∧ odd n ∧ abs p = of_nat m / of_nat n then -(exp (p * log (-(exp x)))) else exp (p * log (-(exp x)))) = exp (x * p)"
                },
                {
                    "args": "real_real_power_def, exp x ^ p = exp (x * p)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ exp x ^ p = exp (x * p)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ exp x ^ p = exp (x * p)"
                }
            ],
            "prop": "exp x ^ p = exp (x * p)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_real_power_def"
                },
                {
                    "goal": "0 < exp x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_exp_pos_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "log_exp"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_exp_inj"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "real_mult_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "p": "real",
                "x": "real"
            }
        },
        {
            "name": "rpow_abs",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_abs_pos, {x: x}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ abs x"
                },
                {
                    "args": "rpow_rpow, {m: (2::real), n: 1 / 2, x: abs x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ abs x ^ (2::real) ^ (1 / 2) = abs x ^ (2 * (1 / 2))"
                },
                {
                    "args": "2 * (1 / 2) = 1",
                    "id": "2",
                    "prevs": [],
                    "rule": "real_norm",
                    "th": "⊢ 2 * (1 / 2) = 1"
                },
                {
                    "args": "rpow_1, abs x ^ (1::real) = abs x",
                    "id": "3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs x ^ (1::real) = abs x"
                },
                {
                    "args": "abs x ^ (2 * (1 / 2)) = abs x",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ abs x ^ (2 * (1 / 2)) = abs x"
                },
                {
                    "args": "abs x ^ (2::real) ^ (1 / 2) = abs x",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ abs x ^ (2::real) ^ (1 / 2) = abs x"
                },
                {
                    "args": "real_of_nat_id, abs x ^ (of_nat::nat ⇒ real) 2 ^ (1 / 2) = abs x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ abs x ^ (of_nat::nat ⇒ real) 2 ^ (1 / 2) = abs x"
                },
                {
                    "args": "rpow_pow, abs x ^ (2::nat) ^ (1 / 2) = abs x",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ abs x ^ (2::nat) ^ (1 / 2) = abs x"
                },
                {
                    "args": "real_pow2_abs, x ^ (2::nat) ^ (1 / 2) = abs x",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ x ^ (2::nat) ^ (1 / 2) = abs x"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ (2::nat) ^ (1 / 2) = abs x"
                }
            ],
            "prop": "x ^ (2::nat) ^ (1 / 2) = abs x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "real_pow2_abs"
                },
                {
                    "goal": "0<= abs x",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "real_abs_pos"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_m": "(2::real)",
                    "param_n": "1/2",
                    "theorem": "rpow_rpow"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "rpow_pow"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_of_nat_id"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "2 * (1 / 2)=1",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "real_norm"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "rpow_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        }
    ],
    "description": "Real transcendentals.",
    "imports": [
        "real",
        "metric"
    ],
    "name": "transcendentals"
}