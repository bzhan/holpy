(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort Nat$ 0)
(declare-sort Ref$ 0)
(declare-sort Ref_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Ref_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Dag$ 0)
(declare-fun tip$ () Dag$)
(declare-fun select$ (Dag$) Dag$)
(declare-fun selecta$ (Dag$) Ref$)
(declare-fun selectb$ (Dag$) Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$) Dag$)
(declare-fun x$ () Dag$)
(declare-fun y$ () Dag$)
(declare-fun z$ () Dag$)
(declare-fun uu$ (Ref_set$) Ref_bool_fun$)
(declare-fun dag$ (Dag$) Bool)
(declare-fun one$ () Nat$)
(declare-fun less$ (Dag$ Dag$) Bool)
(declare-fun size$ (Dag$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun least$ (Nat_bool_fun$) Nat$)
(declare-fun less$a () Nat_nat_bool_fun_fun$)
(declare-fun power$ (Nat$) Nat_nat_fun$)
(declare-fun divide$ (Nat$) Nat_nat_fun$)
(declare-fun member$ (Ref$ Ref_set$) Bool)
(declare-fun set_of$ (Dag$) Ref_set$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun collect$ (Ref_bool_fun$) Ref_set$)
(declare-fun fun_app$ (Ref_bool_fun$ Ref$) Bool)
(declare-fun less_eq$ (Dag$ Dag$) Bool)
(declare-fun of_bool$ (Bool) Nat$)
(declare-fun antimono$ (Nat_nat_fun$) Bool)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$c (Nat_nat_fun$ Nat$) Nat$)
(declare-fun less_eq$a () Nat_nat_bool_fun_fun$)
(declare-fun ordering$ (Nat_nat_bool_fun_fun$ Nat_nat_bool_fun_fun$) Bool)
(declare-fun size_dag$ (Dag$) Nat$)
(declare-fun strict_mono$ (Nat_nat_fun$) Bool)
(assert (forall ((?v0 Ref_set$) (?v1 Ref$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (not (less_eq$ x$ z$)))
(assert (less_eq$ x$ y$))
(assert (less_eq$ y$ z$))
(assert (forall ((?v0 Dag$)) (less_eq$ ?v0 ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) false) (=> (fun_app$a (fun_app$b less_eq$a ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v3) ?v4) (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$a (fun_app$b ?v0 ?v4) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) )) (fun_app$a (fun_app$b ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (and (fun_app$a (fun_app$b less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v4) ?v5) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5))) ))) (fun_app$a (fun_app$b less_eq$a ?v0) (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (and (= (fun_app$c ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v4) ?v5) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ))) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (= (fun_app$a (fun_app$b less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$a (fun_app$b less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v2) ?v0)) (fun_app$a (fun_app$b less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) (fun_app$c ?v1 ?v2)) (and (fun_app$a (fun_app$b less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v4) ?v5) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5))) ))) (fun_app$a (fun_app$b less_eq$a ?v0) (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v4) ?v5) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ))) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$ ?v0) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v0 ?v2)) (fun_app$c ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$ ?v0) (and (fun_app$a (fun_app$b less_eq$a ?v1) ?v2) (=> (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v0 ?v2)) (fun_app$c ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Nat_nat_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v1) ?v2) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v0 ?v2)) (fun_app$c ?v0 ?v1))) ) (antimono$ ?v0)) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (antimono$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v1) ?v2) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v0 ?v2)) (fun_app$c ?v0 ?v1))) )) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (strict_mono$ ?v0) (= (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v0 ?v1)) (fun_app$c ?v0 ?v2)) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less_eq$ ?v0 ?v1) (or (= ?v0 ?v1) (less$ ?v0 ?v1))) :pattern ((less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 Nat$)) (=> (and (fun_app$a ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$a ?v0 ?v4) (fun_app$a (fun_app$b less_eq$a ?v3) ?v4)) )) (fun_app$a ?v2 ?v3)) )) (fun_app$a ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) )) (= (least$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$a ?v0 ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$a ?v0 ?v3) (fun_app$a (fun_app$b less_eq$a ?v1) ?v3)) ) (forall ((?v3 Nat$)) (=> (and (fun_app$a ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$a ?v0 ?v4) (fun_app$a (fun_app$b less_eq$a ?v3) ?v4)) )) (fun_app$a ?v2 ?v3)) ))) (fun_app$a ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$a (fun_app$b less$a ?v0) ?v1)) (or (fun_app$a (fun_app$b less$a ?v1) ?v0) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (strict_mono$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (fun_app$a (fun_app$b less$a (fun_app$c ?v0 ?v1)) (fun_app$c ?v0 ?v2))) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$a (fun_app$b less$a ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat_nat_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (fun_app$a (fun_app$b less$a (fun_app$c ?v0 ?v1)) (fun_app$c ?v0 ?v2))) ) (strict_mono$ ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v3) ?v2) (fun_app$a ?v0 ?v3)) ) (fun_app$a ?v0 ?v2)) ) (fun_app$a ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (and (fun_app$a (fun_app$b less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (fun_app$a (fun_app$b less$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5))) ))) (fun_app$a (fun_app$b less$a ?v0) (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$)) (=> (forall ((?v2 Ref$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 Ref_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (=> (not false) (fun_app$a (fun_app$b less$a ?v1) ?v0))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (= (fun_app$c ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ))) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ))) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) (fun_app$c ?v1 ?v2)) (and (fun_app$a (fun_app$b less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (fun_app$a (fun_app$b less$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5))) ))) (fun_app$a (fun_app$b less$a ?v0) (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v2) ?v0)) (fun_app$a (fun_app$b less$a ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (= (= ?v1 ?v0) false)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (= (= ?v0 ?v1) false)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Bool)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (= (=> (fun_app$a (fun_app$b less$a ?v1) ?v0) ?v2) true)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (= (not (fun_app$a (fun_app$b less$a ?v1) ?v0)) true)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (not (fun_app$a (fun_app$b less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (=> (and (exists ((?v2 Nat$)) (fun_app$a ?v0 ?v2) ) (forall ((?v2 Nat$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) )) (fun_app$a ?v1 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$)) (=> (exists ((?v1 Nat$)) (fun_app$a ?v0 ?v1) ) (fun_app$a ?v0 (least$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) false) (=> (fun_app$a (fun_app$b less$a ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$a (fun_app$b less$a ?v0) ?v1)) (= (not (fun_app$a (fun_app$b less$a ?v1) ?v0)) (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (strict_mono$ ?v0) (fun_app$a (fun_app$b less$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a (fun_app$c ?v0 ?v1)) (fun_app$c ?v0 ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (strict_mono$ ?v0) (= (fun_app$a (fun_app$b less$a (fun_app$c ?v0 ?v1)) (fun_app$c ?v0 ?v2)) (fun_app$a (fun_app$b less$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$a ?v0 ?v3) (fun_app$a ?v2 ?v3)) )) (fun_app$a ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$a (fun_app$b less$a ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (fun_app$a (fun_app$b less$a ?v0) ?v1) ) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$a (fun_app$b less$a ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$a (fun_app$b less$a ?v0) ?v0)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (strict_mono$ ?v0) (= (= (fun_app$c ?v0 ?v1) (fun_app$c ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (not (= ?v1 ?v0)))) :pattern ((fun_app$a (fun_app$b less$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$a (fun_app$b less$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$a (fun_app$b less$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (not (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)))) :pattern ((fun_app$a (fun_app$b less$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (or (fun_app$a (fun_app$b less$a ?v0) ?v1) (= ?v1 ?v0))) :pattern ((fun_app$a (fun_app$b less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (or (fun_app$a (fun_app$b less$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$a (fun_app$b less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (or (fun_app$a (fun_app$b less$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$a (fun_app$b less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$a (fun_app$b less$a ?v0) ?v1)) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) (fun_app$a (fun_app$b less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ))) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) (fun_app$c ?v1 ?v2)) (and (fun_app$a (fun_app$b less_eq$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v4) ?v5) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5))) ))) (fun_app$a (fun_app$b less$a ?v0) (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v2) ?v0)) (fun_app$a (fun_app$b less$a ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (and (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v4) ?v5) (fun_app$a (fun_app$b less_eq$a (fun_app$c ?v2 ?v4)) (fun_app$c ?v2 ?v5))) ))) (fun_app$a (fun_app$b less$a (fun_app$c ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) (fun_app$c ?v1 ?v2)) (and (fun_app$a (fun_app$b less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (fun_app$a (fun_app$b less$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5))) ))) (fun_app$a (fun_app$b less$a ?v0) (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v2) ?v0)) (fun_app$a (fun_app$b less$a ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$a (fun_app$b less$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (= (not (fun_app$a (fun_app$b less$a ?v0) ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (or (fun_app$a (fun_app$b less$a ?v0) ?v1) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (not (fun_app$a (fun_app$b less$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) (fun_app$a (fun_app$b less$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (not (fun_app$a (fun_app$b less$a ?v0) ?v1)) (= (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$a (fun_app$b less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$a (fun_app$b less$a ?v0) ?v1)) (fun_app$a (fun_app$b less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$a (fun_app$b less_eq$a ?v0) ?v1)) (fun_app$a (fun_app$b less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (= (fun_app$a (fun_app$b less_eq$a ?v2) ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (= (fun_app$a (fun_app$b less_eq$a ?v0) ?v2) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v2) ?v1) (= (fun_app$a (fun_app$b less_eq$a ?v2) ?v0) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v2) ?v1) (= (fun_app$a (fun_app$b less_eq$a ?v0) ?v2) false)) ) ) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (subdag$ ?v1 ?v0)) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v2) ?v1) (= (fun_app$a (fun_app$b less$a ?v0) ?v2) false)) ) ) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v2)) (subdag$ ?v0 ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v0)) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (subdag$ ?v0 ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (= (fun_app$a ?v0 ?v5) (fun_app$a ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (= (fun_app$a ?v2 ?v5) (fun_app$a ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (= (and (fun_app$a ?v0 ?v5) (fun_app$a ?v2 ?v5)) (and (fun_app$a ?v1 ?v5) (fun_app$a ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (= (fun_app$a ?v0 ?v5) (fun_app$a ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (= (fun_app$a ?v2 ?v5) (fun_app$a ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v4) ?v5) (= (or (fun_app$a ?v0 ?v5) (fun_app$a ?v2 ?v5)) (or (fun_app$a ?v1 ?v5) (fun_app$a ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v5) ?v4) (= (fun_app$a ?v0 ?v5) (fun_app$a ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v5) ?v4) (= (fun_app$a ?v2 ?v5) (fun_app$a ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v5) ?v4) (= (and (fun_app$a ?v0 ?v5) (fun_app$a ?v2 ?v5)) (and (fun_app$a ?v1 ?v5) (fun_app$a ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v5) ?v4) (= (fun_app$a ?v0 ?v5) (fun_app$a ?v1 ?v5))) ) ) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v5) ?v4) (= (fun_app$a ?v2 ?v5) (fun_app$a ?v3 ?v5))) ) )) (exists ((?v4 Nat$)) (forall ((?v5 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v5) ?v4) (= (or (fun_app$a ?v0 ?v5) (fun_app$a ?v2 ?v5)) (or (fun_app$a ?v1 ?v5) (fun_app$a ?v3 ?v5)))) ) )) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (= (= ?v2 ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (= (not (= ?v2 ?v0)) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (= (fun_app$a (fun_app$b less$a ?v2) ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v1) ?v2) (= (fun_app$a (fun_app$b less$a ?v0) ?v2) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v2) ?v1) (= (= ?v2 ?v0) false)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v2) ?v1) (= (not (= ?v2 ?v0)) true)) ) ) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (forall ((?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a ?v2) ?v1) (= (fun_app$a (fun_app$b less$a ?v2) ?v0) true)) ) ) ))
(assert (forall ((?v0 Dag$)) (! (= (subdag$ tip$ ?v0) false) :pattern ((subdag$ tip$ ?v0)))))
(assert (= (dag$ tip$) true))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (subdag$ ?v0 ?v1) (fun_app$a (fun_app$b less$a (size$ ?v1)) (size$ ?v0))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (subdag$ ?v0 (node$ ?v1 ?v2 ?v3)) (and (subdag$ ?v0 ?v1) (subdag$ ?v0 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$)) (! (= (subdag$ (node$ ?v0 ?v1 ?v2) ?v3) (or (= ?v3 ?v0) (or (= ?v3 ?v2) (or (subdag$ ?v0 ?v3) (subdag$ ?v2 ?v3))))) :pattern ((subdag$ (node$ ?v0 ?v1 ?v2) ?v3)))))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$)) (not (= tip$ (node$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 Dag$)) (=> (and (=> (= ?v0 tip$) false) (forall ((?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false) )) false) ))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$)) (! (= (dag$ (node$ ?v0 ?v1 ?v2)) (and (not (member$ ?v1 (set_of$ ?v0))) (and (not (member$ ?v1 (set_of$ ?v2))) (and (dag$ ?v0) (dag$ ?v2))))) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (= (size$ tip$) zero$))
(assert (ordering$ less_eq$a less$a))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$)) (=> (ordering$ ?v0 ?v1) (fun_app$a (fun_app$b ?v0 ?v2) ?v2)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$)) (=> (ordering$ ?v0 ?v1) (not (fun_app$a (fun_app$b ?v1 ?v2) ?v2))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (ordering$ ?v0 ?v1) (= (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (or (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (= ?v2 ?v3)))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (ordering$ ?v0 ?v1) (= (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (not (= ?v2 ?v3))))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (ordering$ ?v0 ?v1) (fun_app$a (fun_app$b ?v1 ?v2) ?v3)) (fun_app$a (fun_app$b ?v0 ?v2) ?v3)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (ordering$ ?v0 ?v1) (fun_app$a (fun_app$b ?v1 ?v2) ?v3)) (not (= ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (fun_app$a (fun_app$b ?v1 ?v3) ?v2))) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) (fun_app$a (fun_app$b ?v0 ?v2) ?v4)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (fun_app$a (fun_app$b ?v1 ?v3) ?v4))) (fun_app$a (fun_app$b ?v1 ?v2) ?v4)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (fun_app$a (fun_app$b ?v1 ?v3) ?v4))) (fun_app$a (fun_app$b ?v1 ?v2) ?v4)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) (fun_app$a (fun_app$b ?v1 ?v2) ?v4)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v2))) (= ?v2 ?v3)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (ordering$ ?v0 ?v1) (and (not (= ?v2 ?v3)) (fun_app$a (fun_app$b ?v0 ?v2) ?v3))) (fun_app$a (fun_app$b ?v1 ?v2) ?v3)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$)) (=> (and (forall ((?v2 Nat$) (?v3 Nat$)) (= (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (and (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (not (= ?v2 ?v3)))) ) (and (forall ((?v2 Nat$)) (fun_app$a (fun_app$b ?v1 ?v2) ?v2) ) (and (forall ((?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (fun_app$a (fun_app$b ?v1 ?v3) ?v2)) (= ?v2 ?v3)) ) (forall ((?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (fun_app$a (fun_app$b ?v1 ?v3) ?v4)) (fun_app$a (fun_app$b ?v1 ?v2) ?v4)) )))) (ordering$ ?v1 ?v0)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$)) (= (ordering$ ?v0 ?v1) (and (and (forall ((?v2 Nat$) (?v3 Nat$)) (= (fun_app$a (fun_app$b ?v1 ?v2) ?v3) (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (not (= ?v2 ?v3)))) ) (forall ((?v2 Nat$)) (fun_app$a (fun_app$b ?v0 ?v2) ?v2) )) (and (forall ((?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v2)) (= ?v2 ?v3)) ) (forall ((?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v2) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v4)) (fun_app$a (fun_app$b ?v0 ?v2) ?v4)) )))) ))
(assert (= (size_dag$ tip$) zero$))
(assert (not (fun_app$a (fun_app$b less$a zero$) zero$)))
(assert (fun_app$a (fun_app$b less_eq$a zero$) zero$))
(assert (= (of_bool$ false) zero$))
(assert (forall ((?v0 Bool) (?v1 Bool)) (= (= (of_bool$ ?v0) (of_bool$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a zero$) ?v0) (fun_app$a (fun_app$b less$a zero$) ?v2))) (fun_app$a (fun_app$b less$a (fun_app$c (power$ ?v0) ?v2)) (fun_app$c (power$ ?v1) ?v2))) ))
(assert (= (of_bool$ true) one$))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a one$) ?v0) (= (= (fun_app$c (power$ ?v0) ?v1) (fun_app$c (power$ ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a one$) ?v0) (= (fun_app$a (fun_app$b less_eq$a (fun_app$c (power$ ?v0) ?v1)) (fun_app$c (power$ ?v0) ?v2)) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$a (fun_app$b less$a one$) ?v0) (= (fun_app$a (fun_app$b less$a (fun_app$c (power$ ?v0) ?v1)) (fun_app$c (power$ ?v0) ?v2)) (fun_app$a (fun_app$b less$a ?v1) ?v2))) ))
(assert (fun_app$a (fun_app$b less_eq$a zero$) one$))
(assert (not (fun_app$a (fun_app$b less_eq$a one$) zero$)))
(assert (fun_app$a (fun_app$b less$a zero$) one$))
(assert (not (fun_app$a (fun_app$b less$a one$) zero$)))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a one$) ?v2)) (fun_app$a (fun_app$b less_eq$a (fun_app$c (power$ ?v2) ?v0)) (fun_app$c (power$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a one$) ?v0) (fun_app$a (fun_app$b less_eq$a one$) (fun_app$c (power$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a one$) ?v0) (fun_app$a (fun_app$b less$a (fun_app$c (power$ ?v0) ?v1)) (fun_app$c (power$ ?v0) ?v2))) (fun_app$a (fun_app$b less$a ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (fun_app$a (fun_app$b less$a one$) ?v2)) (fun_app$a (fun_app$b less$a (fun_app$c (power$ ?v2) ?v0)) (fun_app$c (power$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a one$) ?v0) (fun_app$a (fun_app$b less_eq$a (fun_app$c (power$ ?v0) ?v1)) (fun_app$c (power$ ?v0) ?v2))) (fun_app$a (fun_app$b less_eq$a ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a (fun_app$c (power$ ?v0) ?v1)) (fun_app$c (power$ ?v2) ?v1)) (fun_app$a (fun_app$b less_eq$a zero$) ?v2)) (fun_app$a (fun_app$b less$a ?v0) ?v2)) ))
(assert (not (fun_app$a (fun_app$b less$a one$) one$)))
(assert (fun_app$a (fun_app$b less_eq$a one$) one$))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (and (fun_app$a (fun_app$b less_eq$a zero$) ?v2) (fun_app$a (fun_app$b less_eq$a ?v2) one$))) (fun_app$a (fun_app$b less_eq$a (fun_app$c (power$ ?v2) ?v1)) (fun_app$c (power$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a ?v0) ?v1) (fun_app$a (fun_app$b less_eq$a zero$) ?v0)) (fun_app$a (fun_app$b less_eq$a (fun_app$c (power$ ?v0) ?v2)) (fun_app$c (power$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a zero$) ?v0) (fun_app$a (fun_app$b less_eq$a ?v0) one$)) (fun_app$a (fun_app$b less_eq$a (fun_app$c (power$ ?v0) ?v1)) one$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less_eq$a zero$) ?v0) (fun_app$a (fun_app$b less_eq$a zero$) (fun_app$c (power$ ?v0) ?v1))) ))
(assert (not (= zero$ one$)))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less_eq$a one$) ?v0) (fun_app$a (fun_app$b less$a zero$) ?v1)) (fun_app$a (fun_app$b less_eq$a ?v0) (fun_app$c (power$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$a (fun_app$b less$a zero$) ?v0) (fun_app$a (fun_app$b less$a zero$) (fun_app$c (power$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (fun_app$b less$a one$) ?v0) (fun_app$a (fun_app$b less$a zero$) ?v1)) (fun_app$a (fun_app$b less$a one$) (fun_app$c (power$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$a (fun_app$b less$a ?v0) ?v1) (and (fun_app$a (fun_app$b less$a zero$) ?v2) (fun_app$a (fun_app$b less$a ?v2) one$))) (fun_app$a (fun_app$b less$a (fun_app$c (power$ ?v2) ?v1)) (fun_app$c (power$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Bool)) (= (fun_app$a ?v0 (of_bool$ ?v1)) (not (or (and ?v1 (not (fun_app$a ?v0 one$))) (and (not ?v1) (not (fun_app$a ?v0 zero$)))))) ))
(assert (forall ((?v0 Bool)) (! (= (of_bool$ ?v0) (ite ?v0 one$ zero$)) :pattern ((of_bool$ ?v0)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Bool)) (= (fun_app$a ?v0 (of_bool$ ?v1)) (and (=> ?v1 (fun_app$a ?v0 one$)) (=> (not ?v1) (fun_app$a ?v0 zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= (fun_app$c (power$ ?v0) ?v1) (fun_app$c (power$ ?v2) ?v1)) (and (fun_app$a (fun_app$b less_eq$a zero$) ?v0) (and (fun_app$a (fun_app$b less_eq$a zero$) ?v2) (fun_app$a (fun_app$b less$a zero$) ?v1)))) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$c (divide$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$c (divide$ ?v0) zero$) zero$) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$c (divide$ ?v0) one$) ?v0) ))
(assert (forall ((?v0 Nat$)) (! (=> (not (= ?v0 zero$)) (= (fun_app$c (divide$ ?v0) ?v0) one$)) :pattern ((divide$ ?v0)))))
(check-sat)
(exit)

