(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_list_a_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_list_list_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_list_list_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_list_list_bool_fun$ 0)
(declare-sort A_a_list_bool_fun_fun$ 0)
(declare-sort A_list_a_bool_fun_fun$ 0)
(declare-sort A_list_a_list_list_fun$ 0)
(declare-sort A_list_list_a_list_fun$ 0)
(declare-sort A_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_fun$ 0)
(declare-sort A_list_a_list_a_list_fun_fun$ 0)
(declare-sort A_a_fun_a_list_a_list_fun_fun$ 0)
(declare-sort A_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_a_list_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-fun nil$ () A_list$)
(declare-fun hd$ (A_list$) A$)
(declare-fun tl$ (A_list$) A_list$)
(declare-fun cons$ (A$ A_list$) A_list$)
(declare-fun nil$a () A_list_list$)
(declare-fun hd$a (A_list_list$) A_list$)
(declare-fun tl$a (A_list_list$) A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$) A_list_list$)
(declare-fun nil$b () A_list_list_list$)
(declare-fun hd$b (A_list_list_list$) A_list_list$)
(declare-fun tl$b (A_list_list_list$) A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun l1$ () A_list$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun x1$ () A$)
(declare-fun bot$ () A_set$)
(declare-fun l2a$ () A_list$)
(declare-fun map$ (A_list_a_fun$) A_list_list_a_list_fun$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun uua$ (A_list_set$) A_list_bool_fun$)
(declare-fun uub$ (A_list$) A_list_list_a_list_list_fun$)
(declare-fun bind$ (A_list$ A_a_list_list_fun$) A_list_list$)
(declare-fun bot$a () A_list_set$)
(declare-fun less$ (A$) A_bool_fun$)
(declare-fun map$a (A_a_list_fun$) A_list_a_list_list_fun$)
(declare-fun map$b (A_list_a_list_fun$) A_list_list_a_list_list_fun$)
(declare-fun map$c () A_a_fun_a_list_a_list_fun_fun$)
(declare-fun revg$ (A_list_list$ A_list_list$) A_list_list$)
(declare-fun succ$ (A_list_list_set$ A_list_list$) A_list_set$)
(declare-fun sup$a (A_list_set$ A_list_set$) A_list_set$)
(declare-fun bind$a (A_list_list$ A_list_a_list_fun$) A_list$)
(declare-fun bind$b (A_list_list$ A_list_a_list_list_fun$) A_list_list$)
(declare-fun bind$c (A_list$ A_a_list_fun$) A_list$)
(declare-fun merge$ (A_list$) A_list_a_list_fun$)
(declare-fun revg$a (A_list$) A_list_a_list_fun$)
(declare-fun succ$a (A_list_set$ A_list$) A_set$)
(declare-fun append$ (A_list$) A_list_a_list_fun$)
(declare-fun insert$ (A_list$) A_list_list_a_list_list_fun$)
(declare-fun member$ (A_list$ A_list_set$) Bool)
(declare-fun splice$ (A_list_list$) A_list_list_a_list_list_fun$)
(declare-fun append$a (A_list_list$) A_list_list_a_list_list_fun$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_list_list_a_list_list_fun$ A_list_list$) A_list_list$)
(declare-fun insert$a (A$) A_list_a_list_fun$)
(declare-fun lexordp$ (A_list$) A_list_bool_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_list_list$) A_list_bool_fun$)
(declare-fun member$c (A_list$) A_bool_fun$)
(declare-fun member$d (A_list_list$ A_list_list_set$) Bool)
(declare-fun splice$a (A_list$) A_list_a_list_fun$)
(declare-fun collect$a (A_list_bool_fun$) A_list_set$)
(declare-fun fun_app$a (A_list_bool_fun$ A_list$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_list_list_bool_fun$ A_list_list$) Bool)
(declare-fun fun_app$d (A_list_a_list_list_bool_fun_fun$ A_list$) A_list_list_bool_fun$)
(declare-fun fun_app$e (A_list_list_a_list_bool_fun_fun$ A_list_list$) A_list_bool_fun$)
(declare-fun fun_app$f (A_list_list_a_list_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun fun_app$g (A_list_a_list_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun fun_app$h (A_list_a_bool_fun_fun$ A_list$) A_bool_fun$)
(declare-fun fun_app$i (A_a_list_bool_fun_fun$ A$) A_list_bool_fun$)
(declare-fun fun_app$j (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$k (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$l (A_a_list_fun$ A$) A_list$)
(declare-fun fun_app$m (A_list_list_a_list_a_list_fun_fun$ A_list_list$) A_list_a_list_fun$)
(declare-fun fun_app$n (A_list_a_fun$ A_list$) A$)
(declare-fun fun_app$o (A_list_a_list_a_list_fun_fun$ A_list$) A_list_a_list_fun$)
(declare-fun fun_app$p (A_a_fun$ A$) A$)
(declare-fun fun_app$q (A_list_list_a_list_fun$ A_list_list$) A_list$)
(declare-fun fun_app$r (A_list_a_list_list_fun$ A_list$) A_list_list$)
(declare-fun fun_app$s (A_a_fun_a_list_a_list_fun_fun$ A_a_fun$) A_list_a_list_fun$)
(declare-fun list_ex1$ (A_list_bool_fun$) A_list_list_bool_fun$)
(declare-fun listrelp$ (A_a_list_bool_fun_fun$) A_list_a_list_list_bool_fun_fun$)
(declare-fun sublists$ (A_list_list$) A_list_list_list$)
(declare-fun list_ex1$a (A_bool_fun$) A_list_bool_fun$)
(declare-fun listrelp$a (A_list_a_bool_fun_fun$) A_list_list_a_list_bool_fun_fun$)
(declare-fun listrelp$b (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun listrelp$c (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun sublists$a (A_list$) A_list_list$)
(declare-fun lexordp_eq$ (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun merge_list$ (A_list_list$ A_list_list$) A_list$)
(declare-fun diff_sorted$ (A_list$) A_list_a_list_fun$)
(declare-fun lexordp_eq$a (A_a_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun lexordp_eq$b (A_list$) A_list_bool_fun$)
(declare-fun map_tailrec$ () A_a_fun_a_list_a_list_fun_fun$)
(declare-fun inter_sorted$ (A_list$) A_list_a_list_fun$)
(declare-fun product_lists$ (A_list_list_list$) A_list_list_list$)
(declare-fun sorted_by_rel$ (A_list_a_list_bool_fun_fun$) A_list_list_bool_fun$)
(declare-fun subset_sorted$ (A_list$) A_list_bool_fun$)
(declare-fun product_lists$a (A_list_list$) A_list_list$)
(declare-fun sorted_by_rel$a (A_a_bool_fun_fun$) A_list_bool_fun$)
(declare-fun map_tailrec_rev$ (A_a_list_fun$ A_list$ A_list_list$) A_list_list$)
(declare-fun map_tailrec_rev$a (A_list_a_fun$) A_list_list_a_list_a_list_fun_fun$)
(declare-fun map_tailrec_rev$b (A_list_a_list_fun$ A_list_list$ A_list_list$) A_list_list$)
(declare-fun map_tailrec_rev$c (A_a_fun$) A_list_a_list_a_list_fun_fun$)
(declare-fun mergesort_by_rel$ (A_list_a_list_bool_fun_fun$) A_list_list_a_list_list_fun$)
(declare-fun mergesort_by_rel$a (A_a_bool_fun_fun$) A_list_a_list_fun$)
(declare-fun combinatorial_product$ (A_list_list_list$) A_list_list_list$)
(declare-fun combinatorial_product$a (A_list_list$) A_list_list$)
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (cons$a ?v0 ?v1)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list_set$) (?v1 A_list$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))))
(assert (not (= (= (cons$ x1$ l1$) l2a$) (and (fun_app$a (subset_sorted$ (cons$ x1$ l1$)) l2a$) (fun_app$a (subset_sorted$ l2a$) (cons$ x1$ l1$))))))
(assert (= l2a$ nil$))
(assert (forall ((?v0 A_list$)) (= (= l1$ ?v0) (and (fun_app$a (subset_sorted$ l1$) ?v0) (fun_app$a (subset_sorted$ ?v0) l1$))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$a (subset_sorted$ (cons$ ?v0 ?v1)) nil$) false) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$a (subset_sorted$ nil$) ?v0) true) :pattern ((fun_app$a (subset_sorted$ nil$) ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (=> (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= (cons$a ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$a (subset_sorted$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (ite (fun_app$b (less$ ?v0) ?v2) false (ite (= ?v0 ?v2) (fun_app$a (subset_sorted$ ?v1) ?v3) (fun_app$a (subset_sorted$ (cons$ ?v0 ?v1)) ?v3)))) :pattern ((fun_app$a (subset_sorted$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 Bool)) (=> (and (= (fun_app$a (subset_sorted$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) ?v2)) false) ) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (not ?v2))) false) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (ite (fun_app$b (less$ ?v3) ?v5) false (ite (= ?v3 ?v5) (fun_app$a (subset_sorted$ ?v4) ?v6) (fun_app$a (subset_sorted$ (cons$ ?v3 ?v4)) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$a (subset_sorted$ ?v0) ?v1) (and (forall ((?v2 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_list$) (?v4 A$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v4 ?v5)) (ite (fun_app$b (less$ ?v2) ?v4) false (ite (= ?v2 ?v4) (fun_app$a (subset_sorted$ ?v3) ?v5) (fun_app$a (subset_sorted$ (cons$ ?v2 ?v3)) ?v5))))) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (not (fun_app$a (subset_sorted$ ?v0) ?v1)) (and (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (= ?v1 nil$)) false) ) (forall ((?v2 A$) (?v3 A_list$) (?v4 A$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v4 ?v5)) (not (ite (fun_app$b (less$ ?v2) ?v4) false (ite (= ?v2 ?v4) (fun_app$a (subset_sorted$ ?v3) ?v5) (fun_app$a (subset_sorted$ (cons$ ?v2 ?v3)) ?v5)))))) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 A_list$) (?v2 A_list_list$)) (= ?v0 (cons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A$) (?v2 A_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_list$)) (=> (= ?v0 (cons$a ?v1 nil$a)) false) ) (forall ((?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 A$) (?v2 A$) (?v3 A_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (=> (not (= ?v0 nil$a)) false)) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 A_list_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_list_list_list$)) (=> (= ?v0 (cons$b nil$a ?v1)) false) ) (forall ((?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list_list$)) (=> (= ?v0 (cons$b (cons$a ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false) ) (forall ((?v1 A$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (not (= nil$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$d ?v0 nil$) nil$a) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list_list$)) (=> (fun_app$c (fun_app$d ?v0 ?v4) ?v5) (fun_app$c (fun_app$d ?v0 (cons$ ?v3 ?v4)) ?v5)) ) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$)) (=> (fun_app$c (fun_app$d ?v0 ?v4) ?v5) (fun_app$c (fun_app$d ?v0 ?v4) (cons$a ?v3 ?v5))) ))) (fun_app$c (fun_app$d ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$e ?v0 nil$a) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$)) (=> (fun_app$a (fun_app$e ?v0 ?v4) ?v5) (fun_app$a (fun_app$e ?v0 (cons$a ?v3 ?v4)) ?v5)) ) (forall ((?v3 A$) (?v4 A_list_list$) (?v5 A_list$)) (=> (fun_app$a (fun_app$e ?v0 ?v4) ?v5) (fun_app$a (fun_app$e ?v0 ?v4) (cons$ ?v3 ?v5))) ))) (fun_app$a (fun_app$e ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$f ?v0 nil$a) nil$a) (and (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list_list$)) (=> (fun_app$c (fun_app$f ?v0 ?v4) ?v5) (fun_app$c (fun_app$f ?v0 (cons$a ?v3 ?v4)) ?v5)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list_list$)) (=> (fun_app$c (fun_app$f ?v0 ?v4) ?v5) (fun_app$c (fun_app$f ?v0 ?v4) (cons$a ?v3 ?v5))) ))) (fun_app$c (fun_app$f ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$g ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (fun_app$a (fun_app$g ?v0 ?v4) ?v5) (fun_app$a (fun_app$g ?v0 (cons$ ?v3 ?v4)) ?v5)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (fun_app$a (fun_app$g ?v0 ?v4) ?v5) (fun_app$a (fun_app$g ?v0 ?v4) (cons$ ?v3 ?v5))) ))) (fun_app$a (fun_app$g ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_bool_fun$) (?v1 A_list_list$)) (=> (and (fun_app$c ?v0 nil$a) (and (forall ((?v2 A_list$)) (fun_app$c ?v0 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (fun_app$c ?v0 ?v4) (fun_app$c ?v0 (cons$a ?v2 (cons$a ?v3 ?v4)))) ))) (fun_app$c ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_bool_fun$) (?v1 A_list$)) (=> (and (fun_app$a ?v0 nil$) (and (forall ((?v2 A$)) (fun_app$a ?v0 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$)) (=> (fun_app$a ?v0 ?v4) (fun_app$a ?v0 (cons$ ?v2 (cons$ ?v3 ?v4)))) ))) (fun_app$a ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$d ?v0 nil$) nil$a) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$c (fun_app$d ?v0 (cons$ ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$c (fun_app$d ?v0 nil$) (cons$a ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$c (fun_app$d ?v0 ?v4) ?v6) (fun_app$c (fun_app$d ?v0 (cons$ ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$c (fun_app$d ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$e ?v0 nil$a) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$a (fun_app$e ?v0 (cons$a ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$e ?v0 nil$a) (cons$ ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$a (fun_app$e ?v0 ?v4) ?v6) (fun_app$a (fun_app$e ?v0 (cons$a ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$a (fun_app$e ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$f ?v0 nil$a) nil$a) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$c (fun_app$f ?v0 (cons$a ?v3 ?v4)) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$c (fun_app$f ?v0 nil$a) (cons$a ?v3 ?v4)) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$c (fun_app$f ?v0 ?v4) ?v6) (fun_app$c (fun_app$f ?v0 (cons$a ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$c (fun_app$f ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$g ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$g ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$g ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$a (fun_app$g ?v0 ?v4) ?v6) (fun_app$a (fun_app$g ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$a (fun_app$g ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 A_list$)) (fun_app$c ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$c ?v1 ?v3)) (fun_app$c ?v1 (cons$a ?v2 ?v3))) ))) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$a ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$a ?v1 ?v3)) (fun_app$a ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) (not (= ?v0 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_a_bool_fun_fun$) (?v2 A_list_list$) (?v3 A_list$)) (=> (and (forall ((?v4 A_list_list$)) (fun_app$a (fun_app$e ?v0 ?v4) nil$) ) (and (forall ((?v4 A_list$)) (fun_app$a (fun_app$e ?v0 nil$a) ?v4) ) (and (forall ((?v4 A_list$) (?v5 A_list_list$) (?v6 A$) (?v7 A_list$)) (=> (and (fun_app$b (fun_app$h ?v1 ?v4) ?v6) (fun_app$a (fun_app$e ?v0 ?v5) (cons$ ?v6 ?v7))) (fun_app$a (fun_app$e ?v0 (cons$a ?v4 ?v5)) (cons$ ?v6 ?v7))) ) (forall ((?v4 A_list$) (?v5 A_list_list$) (?v6 A$) (?v7 A_list$)) (=> (and (not (fun_app$b (fun_app$h ?v1 ?v4) ?v6)) (fun_app$a (fun_app$e ?v0 (cons$a ?v4 ?v5)) ?v7)) (fun_app$a (fun_app$e ?v0 (cons$a ?v4 ?v5)) (cons$ ?v6 ?v7))) )))) (fun_app$a (fun_app$e ?v0 ?v2) ?v3)) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_a_list_bool_fun_fun$) (?v2 A_list$) (?v3 A_list_list$)) (=> (and (forall ((?v4 A_list$)) (fun_app$c (fun_app$d ?v0 ?v4) nil$a) ) (and (forall ((?v4 A_list_list$)) (fun_app$c (fun_app$d ?v0 nil$) ?v4) ) (and (forall ((?v4 A$) (?v5 A_list$) (?v6 A_list$) (?v7 A_list_list$)) (=> (and (fun_app$a (fun_app$i ?v1 ?v4) ?v6) (fun_app$c (fun_app$d ?v0 ?v5) (cons$a ?v6 ?v7))) (fun_app$c (fun_app$d ?v0 (cons$ ?v4 ?v5)) (cons$a ?v6 ?v7))) ) (forall ((?v4 A$) (?v5 A_list$) (?v6 A_list$) (?v7 A_list_list$)) (=> (and (not (fun_app$a (fun_app$i ?v1 ?v4) ?v6)) (fun_app$c (fun_app$d ?v0 (cons$ ?v4 ?v5)) ?v7)) (fun_app$c (fun_app$d ?v0 (cons$ ?v4 ?v5)) (cons$a ?v6 ?v7))) )))) (fun_app$c (fun_app$d ?v0 ?v2) ?v3)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list_list$) (?v3 A_list_list$)) (=> (and (forall ((?v4 A_list_list$)) (fun_app$c (fun_app$f ?v0 ?v4) nil$a) ) (and (forall ((?v4 A_list_list$)) (fun_app$c (fun_app$f ?v0 nil$a) ?v4) ) (and (forall ((?v4 A_list$) (?v5 A_list_list$) (?v6 A_list$) (?v7 A_list_list$)) (=> (and (fun_app$a (fun_app$g ?v1 ?v4) ?v6) (fun_app$c (fun_app$f ?v0 ?v5) (cons$a ?v6 ?v7))) (fun_app$c (fun_app$f ?v0 (cons$a ?v4 ?v5)) (cons$a ?v6 ?v7))) ) (forall ((?v4 A_list$) (?v5 A_list_list$) (?v6 A_list$) (?v7 A_list_list$)) (=> (and (not (fun_app$a (fun_app$g ?v1 ?v4) ?v6)) (fun_app$c (fun_app$f ?v0 (cons$a ?v4 ?v5)) ?v7)) (fun_app$c (fun_app$f ?v0 (cons$a ?v4 ?v5)) (cons$a ?v6 ?v7))) )))) (fun_app$c (fun_app$f ?v0 ?v2) ?v3)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A_list$) (?v3 A_list$)) (=> (and (forall ((?v4 A_list$)) (fun_app$a (fun_app$g ?v0 ?v4) nil$) ) (and (forall ((?v4 A_list$)) (fun_app$a (fun_app$g ?v0 nil$) ?v4) ) (and (forall ((?v4 A$) (?v5 A_list$) (?v6 A$) (?v7 A_list$)) (=> (and (fun_app$b (fun_app$j ?v1 ?v4) ?v6) (fun_app$a (fun_app$g ?v0 ?v5) (cons$ ?v6 ?v7))) (fun_app$a (fun_app$g ?v0 (cons$ ?v4 ?v5)) (cons$ ?v6 ?v7))) ) (forall ((?v4 A$) (?v5 A_list$) (?v6 A$) (?v7 A_list$)) (=> (and (not (fun_app$b (fun_app$j ?v1 ?v4) ?v6)) (fun_app$a (fun_app$g ?v0 (cons$ ?v4 ?v5)) ?v7)) (fun_app$a (fun_app$g ?v0 (cons$ ?v4 ?v5)) (cons$ ?v6 ?v7))) )))) (fun_app$a (fun_app$g ?v0 ?v2) ?v3)) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 A_list$) (?v2 A_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A$) (?v2 A_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_a_list_list_fun$)) (! (= (bind$ nil$ ?v0) nil$a) :pattern ((bind$ nil$ ?v0)))))
(assert (forall ((?v0 A_list_a_list_fun$)) (! (= (bind$a nil$a ?v0) nil$) :pattern ((bind$a nil$a ?v0)))))
(assert (forall ((?v0 A_list_a_list_list_fun$)) (! (= (bind$b nil$a ?v0) nil$a) :pattern ((bind$b nil$a ?v0)))))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (bind$c nil$ ?v0) nil$) :pattern ((bind$c nil$ ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$ (insert$ ?v0) nil$a) (cons$a ?v0 nil$a)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$k (insert$a ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$a ?v0)))))
(assert (forall ((?v0 A_list_bool_fun$)) (! (= (fun_app$c (list_ex1$ ?v0) nil$a) false) :pattern ((list_ex1$ ?v0)))))
(assert (forall ((?v0 A_bool_fun$)) (! (= (fun_app$a (list_ex1$a ?v0) nil$) false) :pattern ((list_ex1$a ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (= (fun_app$k (merge$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4)))) false) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (ite (fun_app$b (less$ ?v3) ?v5) (cons$ ?v3 (fun_app$k (merge$ ?v4) (cons$ ?v5 ?v6))) (ite (= ?v3 ?v5) (cons$ ?v3 (fun_app$k (merge$ ?v4) ?v6)) (cons$ ?v5 (fun_app$k (merge$ (cons$ ?v3 ?v4)) ?v6))))))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (= (fun_app$k (inter_sorted$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 nil$))) false) ) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (= ?v2 nil$))) false) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (ite (fun_app$b (less$ ?v3) ?v5) (fun_app$k (inter_sorted$ ?v4) (cons$ ?v5 ?v6)) (ite (= ?v3 ?v5) (cons$ ?v3 (fun_app$k (inter_sorted$ ?v4) ?v6)) (fun_app$k (inter_sorted$ (cons$ ?v3 ?v4)) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (= (fun_app$k (diff_sorted$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 nil$))) false) ) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4)))) false) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (ite (fun_app$b (less$ ?v3) ?v5) (cons$ ?v3 (fun_app$k (diff_sorted$ ?v4) (cons$ ?v5 ?v6))) (ite (= ?v3 ?v5) (fun_app$k (diff_sorted$ ?v4) ?v6) (fun_app$k (diff_sorted$ (cons$ ?v3 ?v4)) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (= (revg$ ?v0 ?v1) ?v2) (and (forall ((?v3 A_list_list$)) (=> (and (= ?v0 nil$a) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list_list$)) (=> (and (= ?v0 (cons$a ?v3 ?v4)) (and (= ?v1 ?v5) (= ?v2 (revg$ ?v4 (cons$a ?v3 ?v5))))) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (= (fun_app$k (revg$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 ?v5) (= ?v2 (fun_app$k (revg$a ?v4) (cons$ ?v3 ?v5))))) false) ))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (fun_app$c (fun_app$f (lexordp_eq$ ?v0) (cons$a ?v1 ?v2)) nil$a) false) :pattern ((fun_app$f (lexordp_eq$ ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$a (fun_app$g (lexordp_eq$a ?v0) (cons$ ?v1 ?v2)) nil$) false) :pattern ((fun_app$g (lexordp_eq$a ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$d (listrelp$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$a)) false) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$a (fun_app$i ?v0 ?v3) ?v4) (fun_app$c (fun_app$d (listrelp$ ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 A_list_a_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$e (listrelp$a ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$a) (= ?v2 nil$)) false) (forall ((?v3 A_list$) (?v4 A$) (?v5 A_list_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$b (fun_app$h ?v0 ?v3) ?v4) (fun_app$a (fun_app$e (listrelp$a ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$f (listrelp$b ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$a) (= ?v2 nil$a)) false) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$a (fun_app$g ?v0 ?v3) ?v4) (fun_app$c (fun_app$f (listrelp$b ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$g (listrelp$c ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$)) false) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$b (fun_app$j ?v0 ?v3) ?v4) (fun_app$a (fun_app$g (listrelp$c ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 A_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (= (fun_app$c (fun_app$d (listrelp$ ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$a)) (exists ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$a (fun_app$i ?v0 ?v3) ?v4) (fun_app$c (fun_app$d (listrelp$ ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 A_list_a_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (= (fun_app$a (fun_app$e (listrelp$a ?v0) ?v1) ?v2) (or (and (= ?v1 nil$a) (= ?v2 nil$)) (exists ((?v3 A_list$) (?v4 A$) (?v5 A_list_list$) (?v6 A_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$b (fun_app$h ?v0 ?v3) ?v4) (fun_app$a (fun_app$e (listrelp$a ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$c (fun_app$f (listrelp$b ?v0) ?v1) ?v2) (or (and (= ?v1 nil$a) (= ?v2 nil$a)) (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$a (fun_app$g ?v0 ?v3) ?v4) (fun_app$c (fun_app$f (listrelp$b ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$a (fun_app$g (listrelp$c ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$)) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$b (fun_app$j ?v0 ?v3) ?v4) (fun_app$a (fun_app$g (listrelp$c ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$) (?v4 A_list_list$)) (! (= (fun_app$c (fun_app$f (lexordp_eq$ ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4)) (or (fun_app$a (fun_app$g ?v0 ?v1) ?v3) (and (not (fun_app$a (fun_app$g ?v0 ?v3) ?v1)) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$c (fun_app$f (lexordp_eq$ ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A_list$)) (! (= (fun_app$a (fun_app$g (lexordp_eq$a ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$b (fun_app$j ?v0 ?v1) ?v3) (and (not (fun_app$b (fun_app$j ?v0 ?v3) ?v1)) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v2) ?v4)))) :pattern ((fun_app$a (fun_app$g (lexordp_eq$a ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$c (fun_app$f (lexordp_eq$ ?v0) nil$a) ?v1) true) :pattern ((fun_app$c (fun_app$f (lexordp_eq$ ?v0) nil$a) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$a (fun_app$g (lexordp_eq$a ?v0) nil$) ?v1) true) :pattern ((fun_app$a (fun_app$g (lexordp_eq$a ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (! (= (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v1) nil$a) (= ?v1 nil$a)) :pattern ((fun_app$f (lexordp_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$g (lexordp_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v1) ?v1) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (not (fun_app$a (fun_app$g ?v0 ?v1) ?v2)) (and (not (fun_app$a (fun_app$g ?v0 ?v2) ?v1)) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (not (fun_app$b (fun_app$j ?v0 ?v1) ?v2)) (and (not (fun_app$b (fun_app$j ?v0 ?v2) ?v1)) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v3) ?v4))) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (fun_app$a (fun_app$g ?v0 ?v1) ?v2) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$b (fun_app$j ?v0 ?v1) ?v2) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$)) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) nil$a) ?v1) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) nil$) ?v1) ))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (inter_sorted$ nil$) ?v0) nil$) :pattern ((fun_app$k (inter_sorted$ nil$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (diff_sorted$ nil$) ?v0) nil$) :pattern ((fun_app$k (diff_sorted$ nil$) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (merge$ nil$) ?v0) ?v0) :pattern ((fun_app$k (merge$ nil$) ?v0)))))
(assert (forall ((?v0 A_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_list_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_list_bool_fun_fun$) (?v1 A$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list_list$)) (=> (and (fun_app$a (fun_app$i ?v0 ?v1) ?v2) (fun_app$c (fun_app$d (listrelp$ ?v0) ?v3) ?v4)) (fun_app$c (fun_app$d (listrelp$ ?v0) (cons$ ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_bool_fun_fun$) (?v1 A_list$) (?v2 A$) (?v3 A_list_list$) (?v4 A_list$)) (=> (and (fun_app$b (fun_app$h ?v0 ?v1) ?v2) (fun_app$a (fun_app$e (listrelp$a ?v0) ?v3) ?v4)) (fun_app$a (fun_app$e (listrelp$a ?v0) (cons$a ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (fun_app$a (fun_app$g ?v0 ?v1) ?v2) (fun_app$c (fun_app$f (listrelp$b ?v0) ?v3) ?v4)) (fun_app$c (fun_app$f (listrelp$b ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (fun_app$b (fun_app$j ?v0 ?v1) ?v2) (fun_app$a (fun_app$g (listrelp$c ?v0) ?v3) ?v4)) (fun_app$a (fun_app$g (listrelp$c ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_list_bool_fun_fun$)) (fun_app$c (fun_app$d (listrelp$ ?v0) nil$) nil$a) ))
(assert (forall ((?v0 A_list_a_bool_fun_fun$)) (fun_app$a (fun_app$e (listrelp$a ?v0) nil$a) nil$) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$)) (fun_app$c (fun_app$f (listrelp$b ?v0) nil$a) nil$a) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$a (fun_app$g (listrelp$c ?v0) nil$) nil$) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (revg$ (cons$a ?v0 ?v1) ?v2) (revg$ ?v1 (cons$a ?v0 ?v2))) :pattern ((revg$ (cons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$k (revg$a (cons$ ?v0 ?v1)) ?v2) (fun_app$k (revg$a ?v1) (cons$ ?v0 ?v2))) :pattern ((fun_app$k (revg$a (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_list_list$)) (! (= (revg$ nil$a ?v0) ?v0) :pattern ((revg$ nil$a ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (revg$a nil$) ?v0) ?v0) :pattern ((fun_app$k (revg$a nil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$k (diff_sorted$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (ite (fun_app$b (less$ ?v0) ?v2) (cons$ ?v0 (fun_app$k (diff_sorted$ ?v1) (cons$ ?v2 ?v3))) (ite (= ?v0 ?v2) (fun_app$k (diff_sorted$ ?v1) ?v3) (fun_app$k (diff_sorted$ (cons$ ?v0 ?v1)) ?v3)))) :pattern ((fun_app$k (diff_sorted$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$k (inter_sorted$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (ite (fun_app$b (less$ ?v0) ?v2) (fun_app$k (inter_sorted$ ?v1) (cons$ ?v2 ?v3)) (ite (= ?v0 ?v2) (cons$ ?v0 (fun_app$k (inter_sorted$ ?v1) ?v3)) (fun_app$k (inter_sorted$ (cons$ ?v0 ?v1)) ?v3)))) :pattern ((fun_app$k (inter_sorted$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$k (merge$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (ite (fun_app$b (less$ ?v0) ?v2) (cons$ ?v0 (fun_app$k (merge$ ?v1) (cons$ ?v2 ?v3))) (ite (= ?v0 ?v2) (cons$ ?v0 (fun_app$k (merge$ ?v1) ?v3)) (cons$ ?v2 (fun_app$k (merge$ (cons$ ?v0 ?v1)) ?v3))))) :pattern ((fun_app$k (merge$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (= (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_list_list$)) (and (= ?v1 nil$a) (= ?v2 ?v3)) ) (or (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$a (fun_app$g ?v0 ?v3) ?v4))) ) (exists ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$a (fun_app$g ?v0 ?v3) ?v4)) (and (not (fun_app$a (fun_app$g ?v0 ?v4) ?v3)) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v1) ?v2) (or (exists ((?v3 A_list$)) (and (= ?v1 nil$) (= ?v2 ?v3)) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$b (fun_app$j ?v0 ?v3) ?v4))) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$b (fun_app$j ?v0 ?v3) ?v4)) (and (not (fun_app$b (fun_app$j ?v0 ?v4) ?v3)) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list_list$)) (=> (and (= ?v1 nil$a) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (fun_app$a (fun_app$g ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$) (?v6 A_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (not (fun_app$a (fun_app$g ?v0 ?v3) ?v4)) (and (not (fun_app$a (fun_app$g ?v0 ?v4) ?v3)) (fun_app$c (fun_app$f (lexordp_eq$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$b (fun_app$j ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$b (fun_app$j ?v0 ?v3) ?v4)) (and (not (fun_app$b (fun_app$j ?v0 ?v4) ?v3)) (fun_app$a (fun_app$g (lexordp_eq$a ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$k (diff_sorted$ (cons$ ?v0 ?v1)) nil$) (cons$ ?v0 ?v1)) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$k (inter_sorted$ (cons$ ?v0 ?v1)) nil$) nil$) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$k (merge$ (cons$ ?v0 ?v1)) nil$) (cons$ ?v0 ?v1)) :pattern ((cons$ ?v0 ?v1)))))
(assert (= (sublists$ nil$a) (cons$b nil$a nil$b)))
(assert (= (sublists$a nil$) (cons$a nil$ nil$a)))
(assert (= (product_lists$ nil$b) (cons$b nil$a nil$b)))
(assert (= (product_lists$a nil$a) (cons$a nil$ nil$a)))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (= (merge_list$ ?v0 ?v1) ?v2) (and (=> (and (= ?v0 nil$a) (and (= ?v1 nil$a) (= ?v2 nil$))) false) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$a) (and (= ?v1 (cons$a ?v3 nil$a)) (= ?v2 ?v3))) false) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (cons$a ?v3 ?v4)) (and (= ?v1 nil$a) (= ?v2 (merge_list$ nil$a (cons$a ?v3 ?v4))))) false) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$a ?v3 ?v4)) (and (= ?v1 (cons$a ?v5 nil$a)) (= ?v2 (merge_list$ nil$a (cons$a ?v5 (cons$a ?v3 ?v4)))))) false) ) (forall ((?v3 A_list_list$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (and (= ?v0 ?v3) (and (= ?v1 (cons$a ?v4 (cons$a ?v5 ?v6))) (= ?v2 (merge_list$ (cons$a (fun_app$k (merge$ ?v4) ?v5) ?v3) ?v6)))) false) )))))) false) ))
(assert (= (combinatorial_product$ nil$b) (cons$b nil$a nil$b)))
(assert (= (combinatorial_product$a nil$a) (cons$a nil$ nil$a)))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$a (lexordp_eq$b ?v0) ?v1) (and (forall ((?v2 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 ?v2)) false) ) (and (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$b (less$ ?v2) ?v3))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$b (less$ ?v2) ?v3)) (and (not (fun_app$b (less$ ?v3) ?v2)) (fun_app$a (lexordp_eq$b ?v4) ?v5))))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$a (lexordp_eq$b ?v0) ?v1) (or (exists ((?v2 A_list$)) (and (= ?v0 nil$) (= ?v1 ?v2)) ) (or (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$b (less$ ?v2) ?v3))) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$b (less$ ?v2) ?v3)) (and (not (fun_app$b (less$ ?v3) ?v2)) (fun_app$a (lexordp_eq$b ?v4) ?v5))))) )))) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (=> (and (= (map_tailrec_rev$ ?v0 ?v1 ?v2) ?v3) (and (forall ((?v4 A_a_list_fun$) (?v5 A_list_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 A_a_list_fun$) (?v5 A$) (?v6 A_list$) (?v7 A_list_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$ ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (map_tailrec_rev$ ?v4 ?v6 (cons$a (fun_app$l ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (fun_app$k (fun_app$m (map_tailrec_rev$a ?v0) ?v1) ?v2) ?v3) (and (forall ((?v4 A_list_a_fun$) (?v5 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$a) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 A_list_a_fun$) (?v5 A_list$) (?v6 A_list_list$) (?v7 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$a ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (fun_app$k (fun_app$m (map_tailrec_rev$a ?v4) ?v6) (cons$ (fun_app$n ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (=> (and (= (map_tailrec_rev$b ?v0 ?v1 ?v2) ?v3) (and (forall ((?v4 A_list_a_list_fun$) (?v5 A_list_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$a) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 A_list_a_list_fun$) (?v5 A_list$) (?v6 A_list_list$) (?v7 A_list_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$a ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (map_tailrec_rev$b ?v4 ?v6 (cons$a (fun_app$k ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (fun_app$k (fun_app$o (map_tailrec_rev$c ?v0) ?v1) ?v2) ?v3) (and (forall ((?v4 A_a_fun$) (?v5 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 A_a_fun$) (?v5 A$) (?v6 A_list$) (?v7 A_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$ ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (fun_app$k (fun_app$o (map_tailrec_rev$c ?v4) ?v6) (cons$ (fun_app$p ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (fun_app$ (splice$ (cons$a ?v0 ?v1)) nil$a) (cons$a ?v0 ?v1)) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$k (splice$a (cons$ ?v0 ?v1)) nil$) (cons$ ?v0 ?v1)) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$a (lexordp_eq$b ?v0) nil$) (= ?v0 nil$)) :pattern ((lexordp_eq$b ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$a (lexordp_eq$b nil$) ?v0) true) :pattern ((fun_app$a (lexordp_eq$b nil$) ?v0)))))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$ (splice$ ?v0) nil$a) ?v0) :pattern ((splice$ ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (splice$a ?v0) nil$) ?v0) :pattern ((splice$a ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$a (lexordp_eq$b (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (or (fun_app$b (less$ ?v0) ?v2) (and (not (fun_app$b (less$ ?v2) ?v0)) (fun_app$a (lexordp_eq$b ?v1) ?v3)))) :pattern ((fun_app$a (lexordp_eq$b (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$a (lexordp_eq$b (cons$ ?v0 ?v1)) nil$) false) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_list$)) (fun_app$a (lexordp_eq$b ?v0) ?v0) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (or (fun_app$a (lexordp_eq$b ?v0) ?v1) (fun_app$a (lexordp_eq$b ?v1) ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (lexordp_eq$b ?v0) ?v1) (fun_app$a (lexordp_eq$b ?v1) ?v2)) (fun_app$a (lexordp_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$a (lexordp_eq$b ?v0) ?v1) (fun_app$a (lexordp_eq$b ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_list$)) (fun_app$a (lexordp_eq$b nil$) ?v0) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (! (= (fun_app$ (splice$ (cons$a ?v0 ?v1)) (cons$a ?v2 ?v3)) (cons$a ?v0 (cons$a ?v2 (fun_app$ (splice$ ?v1) ?v3)))) :pattern ((fun_app$ (splice$ (cons$a ?v0 ?v1)) (cons$a ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$k (splice$a (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (cons$ ?v0 (cons$ ?v2 (fun_app$k (splice$a ?v1) ?v3)))) :pattern ((fun_app$k (splice$a (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$ (splice$ nil$a) ?v0) ?v0) :pattern ((fun_app$ (splice$ nil$a) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (splice$a nil$) ?v0) ?v0) :pattern ((fun_app$k (splice$a nil$) ?v0)))))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$) (?v3 A_list_list$)) (! (= (map_tailrec_rev$ ?v0 (cons$ ?v1 ?v2) ?v3) (map_tailrec_rev$ ?v0 ?v2 (cons$a (fun_app$l ?v0 ?v1) ?v3))) :pattern ((map_tailrec_rev$ ?v0 (cons$ ?v1 ?v2) ?v3)))))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (! (= (fun_app$k (fun_app$m (map_tailrec_rev$a ?v0) (cons$a ?v1 ?v2)) ?v3) (fun_app$k (fun_app$m (map_tailrec_rev$a ?v0) ?v2) (cons$ (fun_app$n ?v0 ?v1) ?v3))) :pattern ((fun_app$k (fun_app$m (map_tailrec_rev$a ?v0) (cons$a ?v1 ?v2)) ?v3)))))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (! (= (map_tailrec_rev$b ?v0 (cons$a ?v1 ?v2) ?v3) (map_tailrec_rev$b ?v0 ?v2 (cons$a (fun_app$k ?v0 ?v1) ?v3))) :pattern ((map_tailrec_rev$b ?v0 (cons$a ?v1 ?v2) ?v3)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (! (= (fun_app$k (fun_app$o (map_tailrec_rev$c ?v0) (cons$ ?v1 ?v2)) ?v3) (fun_app$k (fun_app$o (map_tailrec_rev$c ?v0) ?v2) (cons$ (fun_app$p ?v0 ?v1) ?v3))) :pattern ((fun_app$k (fun_app$o (map_tailrec_rev$c ?v0) (cons$ ?v1 ?v2)) ?v3)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$)) (! (= (fun_app$k (fun_app$o (map_tailrec_rev$c ?v0) nil$) ?v1) ?v1) :pattern ((fun_app$k (fun_app$o (map_tailrec_rev$c ?v0) nil$) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$b (less$ ?v0) ?v1) (fun_app$a (lexordp_eq$b (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (not (fun_app$b (less$ ?v0) ?v1)) (and (not (fun_app$b (less$ ?v1) ?v0)) (fun_app$a (lexordp_eq$b ?v2) ?v3))) (fun_app$a (lexordp_eq$b (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (= (merge_list$ nil$a nil$a) nil$))
(assert (forall ((?v0 A_list$)) (! (= (merge_list$ nil$a (cons$a ?v0 nil$a)) ?v0) :pattern ((uub$ ?v0)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$)) (! (= (merge_list$ (cons$a ?v0 ?v1) nil$a) (merge_list$ nil$a (cons$a ?v0 ?v1))) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$)) (! (= (merge_list$ (cons$a ?v0 ?v1) (cons$a ?v2 nil$a)) (merge_list$ nil$a (cons$a ?v2 (cons$a ?v0 ?v1)))) :pattern ((merge_list$ (cons$a ?v0 ?v1) (cons$a ?v2 nil$a))))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (! (= (merge_list$ ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) (merge_list$ (cons$a (fun_app$k (merge$ ?v1) ?v2) ?v0) ?v3)) :pattern ((merge_list$ ?v0 (cons$a ?v1 (cons$a ?v2 ?v3)))))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (= (fun_app$ (splice$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_list_list$)) (=> (and (= ?v0 nil$a) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (=> (and (= ?v0 (cons$a ?v3 ?v4)) (and (= ?v1 nil$a) (= ?v2 (cons$a ?v3 ?v4)))) false) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (and (= ?v0 (cons$a ?v3 ?v4)) (and (= ?v1 (cons$a ?v5 ?v6)) (= ?v2 (cons$a ?v3 (cons$a ?v5 (fun_app$ (splice$ ?v4) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (= (fun_app$k (splice$a ?v0) ?v1) ?v2) (and (forall ((?v3 A_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (and (forall ((?v3 A$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4)))) false) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (cons$ ?v3 (cons$ ?v5 (fun_app$k (splice$a ?v4) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$a (lexordp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_list$)) (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) ) (or (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$b (less$ ?v2) ?v3))) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$b (less$ ?v2) ?v3)) (and (not (fun_app$b (less$ ?v3) ?v2)) (fun_app$a (lexordp$ ?v4) ?v5))))) )))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_a_list_bool_fun_fun$)) (=> (and (fun_app$a (lexordp$ ?v0) ?v1) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$g ?v2 nil$) (cons$ ?v3 ?v4)) ) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$b (less$ ?v3) ?v5) (fun_app$a (fun_app$g ?v2 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (fun_app$a (lexordp$ ?v4) ?v5) (fun_app$a (fun_app$g ?v2 ?v4) ?v5)) (fun_app$a (fun_app$g ?v2 (cons$ ?v3 ?v4)) (cons$ ?v3 ?v5))) )))) (fun_app$a (fun_app$g ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$a (lexordp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) false) ) (and (forall ((?v2 A$) (?v3 A_list$) (?v4 A$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v4 ?v5)) (fun_app$b (less$ ?v2) ?v4))) false) ) (forall ((?v2 A$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v2 ?v4)) (fun_app$a (lexordp$ ?v3) ?v4))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$a (lexordp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) false) ) (and (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (fun_app$b (less$ ?v2) ?v3))) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (not (fun_app$b (less$ ?v2) ?v3)) (and (not (fun_app$b (less$ ?v3) ?v2)) (fun_app$a (lexordp$ ?v4) ?v5))))) false) )))) false) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$)) (! (= (fun_app$ (mergesort_by_rel$ ?v0) (cons$a ?v1 nil$a)) (cons$a ?v1 nil$a)) :pattern ((fun_app$ (mergesort_by_rel$ ?v0) (cons$a ?v1 nil$a))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$k (mergesort_by_rel$a ?v0) (cons$ ?v1 nil$)) (cons$ ?v1 nil$)) :pattern ((fun_app$k (mergesort_by_rel$a ?v0) (cons$ ?v1 nil$))))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$)) (fun_app$c (sorted_by_rel$ ?v0) (cons$a ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (fun_app$a (sorted_by_rel$a ?v0) (cons$ ?v1 nil$)) ))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$)) (= (= nil$ (fun_app$q (map$ ?v0) ?v1)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$)) (= (= nil$a (fun_app$r (map$a ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$)) (= (= nil$a (fun_app$ (map$b ?v0) ?v1)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (= nil$ (fun_app$k (fun_app$s map$c ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$)) (= (= (fun_app$q (map$ ?v0) ?v1) nil$) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$)) (= (= (fun_app$r (map$a ?v0) ?v1) nil$a) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$)) (= (= (fun_app$ (map$b ?v0) ?v1) nil$a) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (= (fun_app$k (fun_app$s map$c ?v0) ?v1) nil$) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$)) (= (= (fun_app$q (map$ ?v0) ?v1) nil$) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$)) (= (= (fun_app$r (map$a ?v0) ?v1) nil$a) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$)) (= (= (fun_app$ (map$b ?v0) ?v1) nil$a) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (= (fun_app$k (fun_app$s map$c ?v0) ?v1) nil$) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$a (lexordp$ ?v0) nil$) false) :pattern ((lexordp$ ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$a (lexordp$ nil$) ?v0) (not (= ?v0 nil$))) :pattern ((fun_app$a (lexordp$ nil$) ?v0)))))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$)) (! (= (fun_app$ (mergesort_by_rel$ ?v0) nil$a) nil$a) :pattern ((mergesort_by_rel$ ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (! (= (fun_app$k (mergesort_by_rel$a ?v0) nil$) nil$) :pattern ((mergesort_by_rel$a ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (fun_app$a (lexordp$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (or (fun_app$b (less$ ?v0) ?v2) (and (not (fun_app$b (less$ ?v2) ?v0)) (fun_app$a (lexordp$ ?v1) ?v3)))) :pattern ((fun_app$a (lexordp$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (=> (and (forall ((?v2 A$) (?v3 A$)) (or (fun_app$b (fun_app$j ?v0 ?v2) ?v3) (fun_app$b (fun_app$j ?v0 ?v3) ?v2)) ) (forall ((?v2 A$) (?v3 A$) (?v4 A$)) (=> (and (fun_app$b (fun_app$j ?v0 ?v2) ?v3) (fun_app$b (fun_app$j ?v0 ?v3) ?v4)) (fun_app$b (fun_app$j ?v0 ?v2) ?v4)) )) (fun_app$a (sorted_by_rel$a ?v0) (fun_app$k (mergesort_by_rel$a ?v0) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (lexordp$ ?v0) ?v1) (fun_app$a (lexordp$ ?v1) ?v2)) (fun_app$a (lexordp$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (fun_app$a (lexordp$ ?v0) ?v1) (fun_app$a (lexordp$ ?v1) ?v0)) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (or (fun_app$a (lexordp$ ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$a (lexordp$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_list$)) (not (fun_app$a (lexordp$ ?v0) ?v0)) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$r (map$a ?v0) (cons$ ?v1 ?v2)) (cons$a (fun_app$l ?v0 ?v1) (fun_app$r (map$a ?v0) ?v2))) :pattern ((fun_app$r (map$a ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (fun_app$q (map$ ?v0) (cons$a ?v1 ?v2)) (cons$ (fun_app$n ?v0 ?v1) (fun_app$q (map$ ?v0) ?v2))) :pattern ((fun_app$q (map$ ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (fun_app$ (map$b ?v0) (cons$a ?v1 ?v2)) (cons$a (fun_app$k ?v0 ?v1) (fun_app$ (map$b ?v0) ?v2))) :pattern ((fun_app$ (map$b ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_list$)) (! (= (fun_app$k (fun_app$s map$c ?v0) (cons$ ?v1 ?v2)) (cons$ (fun_app$p ?v0 ?v1) (fun_app$k (fun_app$s map$c ?v0) ?v2))) :pattern ((fun_app$k (fun_app$s map$c ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$q (map$ ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v1 (cons$a ?v4 ?v5)) (and (= (fun_app$n ?v0 ?v4) ?v2) (= (fun_app$q (map$ ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$r (map$a ?v0) ?v1) (cons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$l ?v0 ?v4) ?v2) (= (fun_app$r (map$a ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$ (map$b ?v0) ?v1) (cons$a ?v2 ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v1 (cons$a ?v4 ?v5)) (and (= (fun_app$k ?v0 ?v4) ?v2) (= (fun_app$ (map$b ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$k (fun_app$s map$c ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$p ?v0 ?v4) ?v2) (= (fun_app$k (fun_app$s map$c ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list_a_fun$) (?v3 A_list_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$q (map$ ?v2) ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v3 (cons$a ?v4 ?v5)) (and (= ?v0 (fun_app$n ?v2 ?v4)) (= ?v1 (fun_app$q (map$ ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_a_list_fun$) (?v3 A_list$)) (= (= (cons$a ?v0 ?v1) (fun_app$r (map$a ?v2) ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (= ?v0 (fun_app$l ?v2 ?v4)) (= ?v1 (fun_app$r (map$a ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_a_list_fun$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (fun_app$ (map$b ?v2) ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v3 (cons$a ?v4 ?v5)) (and (= ?v0 (fun_app$k ?v2 ?v4)) (= ?v1 (fun_app$ (map$b ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_fun$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$k (fun_app$s map$c ?v2) ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (= ?v0 (fun_app$p ?v2 ?v4)) (= ?v1 (fun_app$k (fun_app$s map$c ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$) (?v2 A$) (?v3 A_list$)) (=> (and (= (fun_app$q (map$ ?v0) ?v1) (cons$ ?v2 ?v3)) (forall ((?v4 A_list$) (?v5 A_list_list$)) (=> (and (= ?v1 (cons$a ?v4 ?v5)) (and (= (fun_app$n ?v0 ?v4) ?v2) (= (fun_app$q (map$ ?v0) ?v5) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (and (= (fun_app$r (map$a ?v0) ?v1) (cons$a ?v2 ?v3)) (forall ((?v4 A$) (?v5 A_list$)) (=> (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$l ?v0 ?v4) ?v2) (= (fun_app$r (map$a ?v0) ?v5) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (and (= (fun_app$ (map$b ?v0) ?v1) (cons$a ?v2 ?v3)) (forall ((?v4 A_list$) (?v5 A_list_list$)) (=> (and (= ?v1 (cons$a ?v4 ?v5)) (and (= (fun_app$k ?v0 ?v4) ?v2) (= (fun_app$ (map$b ?v0) ?v5) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (=> (and (= (fun_app$k (fun_app$s map$c ?v0) ?v1) (cons$ ?v2 ?v3)) (forall ((?v4 A$) (?v5 A_list$)) (=> (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$p ?v0 ?v4) ?v2) (= (fun_app$k (fun_app$s map$c ?v0) ?v5) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_list_a_fun$) (?v1 A_list_list$) (?v2 A$) (?v3 A_list$)) (=> (= (fun_app$q (map$ ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v1 (cons$a ?v4 ?v5)) (and (= (fun_app$n ?v0 ?v4) ?v2) (= (fun_app$q (map$ ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A_a_list_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= (fun_app$r (map$a ?v0) ?v1) (cons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$l ?v0 ?v4) ?v2) (= (fun_app$r (map$a ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (= (fun_app$ (map$b ?v0) ?v1) (cons$a ?v2 ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v1 (cons$a ?v4 ?v5)) (and (= (fun_app$k ?v0 ?v4) ?v2) (= (fun_app$ (map$b ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (=> (= (fun_app$k (fun_app$s map$c ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$p ?v0 ?v4) ?v2) (= (fun_app$k (fun_app$s map$c ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list_a_fun$) (?v3 A_list_list$)) (=> (= (cons$ ?v0 ?v1) (fun_app$q (map$ ?v2) ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v3 (cons$a ?v4 ?v5)) (and (= ?v0 (fun_app$n ?v2 ?v4)) (= ?v1 (fun_app$q (map$ ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_a_list_fun$) (?v3 A_list$)) (=> (= (cons$a ?v0 ?v1) (fun_app$r (map$a ?v2) ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (= ?v0 (fun_app$l ?v2 ?v4)) (= ?v1 (fun_app$r (map$a ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_a_list_fun$) (?v3 A_list_list$)) (=> (= (cons$a ?v0 ?v1) (fun_app$ (map$b ?v2) ?v3)) (exists ((?v4 A_list$) (?v5 A_list_list$)) (and (= ?v3 (cons$a ?v4 ?v5)) (and (= ?v0 (fun_app$k ?v2 ?v4)) (= ?v1 (fun_app$ (map$b ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_fun$) (?v3 A_list$)) (=> (= (cons$ ?v0 ?v1) (fun_app$k (fun_app$s map$c ?v2) ?v3)) (exists ((?v4 A$) (?v5 A_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (= ?v0 (fun_app$p ?v2 ?v4)) (= ?v1 (fun_app$k (fun_app$s map$c ?v2) ?v5)))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_a_fun$) (?v2 A_list_list$) (?v3 A_list$)) (=> (= ?v0 (fun_app$q (map$ ?v1) ?v2)) (= (cons$ (fun_app$n ?v1 ?v3) ?v0) (fun_app$q (map$ ?v1) (cons$a ?v3 ?v2)))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_a_list_fun$) (?v2 A_list$) (?v3 A$)) (=> (= ?v0 (fun_app$r (map$a ?v1) ?v2)) (= (cons$a (fun_app$l ?v1 ?v3) ?v0) (fun_app$r (map$a ?v1) (cons$ ?v3 ?v2)))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_a_list_fun$) (?v2 A_list_list$) (?v3 A_list$)) (=> (= ?v0 (fun_app$ (map$b ?v1) ?v2)) (= (cons$a (fun_app$k ?v1 ?v3) ?v0) (fun_app$ (map$b ?v1) (cons$a ?v3 ?v2)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_a_fun$) (?v2 A_list$) (?v3 A$)) (=> (= ?v0 (fun_app$k (fun_app$s map$c ?v1) ?v2)) (= (cons$ (fun_app$p ?v1 ?v3) ?v0) (fun_app$k (fun_app$s map$c ?v1) (cons$ ?v3 ?v2)))) ))
(assert (forall ((?v0 A_a_list_fun$)) (! (= (fun_app$r (map$a ?v0) nil$) nil$a) :pattern ((map$a ?v0)))))
(assert (forall ((?v0 A_list_a_fun$)) (! (= (fun_app$q (map$ ?v0) nil$a) nil$) :pattern ((map$ ?v0)))))
(assert (forall ((?v0 A_list_a_list_fun$)) (! (= (fun_app$ (map$b ?v0) nil$a) nil$a) :pattern ((map$b ?v0)))))
(assert (forall ((?v0 A_a_fun$)) (! (= (fun_app$k (fun_app$s map$c ?v0) nil$) nil$) :pattern ((fun_app$s map$c ?v0)))))
(assert (forall ((?v0 A_list$)) (=> (forall ((?v1 A$)) (not (fun_app$b (less$ ?v1) ?v1)) ) (not (fun_app$a (lexordp$ ?v0) ?v0))) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$)) (fun_app$c (sorted_by_rel$ ?v0) nil$a) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$a (sorted_by_rel$a ?v0) nil$) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (! (= (fun_app$a (lexordp$ ?v0) ?v1) (and (fun_app$a (lexordp_eq$b ?v0) ?v1) (not (fun_app$a (lexordp_eq$b ?v1) ?v0)))) :pattern ((fun_app$a (lexordp$ ?v0) ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (! (= (fun_app$a (lexordp_eq$b ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$a (lexordp$ ?v0) ?v1))) :pattern ((fun_app$a (lexordp_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (fun_app$a (lexordp$ ?v0) ?v1) (fun_app$a (lexordp_eq$b ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (not (fun_app$b (less$ ?v0) ?v1)) (and (not (fun_app$b (less$ ?v1) ?v0)) (fun_app$a (lexordp$ ?v2) ?v3))) (fun_app$a (lexordp$ (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (fun_app$b (less$ ?v0) ?v1) (fun_app$a (lexordp$ (cons$ ?v0 ?v2)) (cons$ ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_list$)) (fun_app$a (lexordp$ nil$) (cons$ ?v0 ?v1)) ))
(assert (= map$c map_tailrec$))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$a (member$b nil$a) ?v0) false) :pattern ((fun_app$a (member$b nil$a) ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$b (member$c nil$) ?v0) false) :pattern ((fun_app$b (member$c nil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_list_fun$)) (! (= (bind$c (cons$ ?v0 ?v1) ?v2) (fun_app$k (append$ (fun_app$l ?v2 ?v0)) (bind$c ?v1 ?v2))) :pattern ((bind$c (cons$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_a_list_fun$)) (! (= (bind$a (cons$a ?v0 ?v1) ?v2) (fun_app$k (append$ (fun_app$k ?v2 ?v0)) (bind$a ?v1 ?v2))) :pattern ((bind$a (cons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$k (append$ (fun_app$k (append$ ?v0) ?v1)) ?v2) (fun_app$k (append$ ?v0) (fun_app$k (append$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) (fun_app$k (append$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) (fun_app$k (append$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$ (append$a ?v0) ?v1) ?v1) (= ?v0 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) ?v1) (= ?v0 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$ (append$a ?v0) ?v1) ?v0) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) ?v0) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$ (append$a ?v1) ?v0)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$k (append$ ?v1) ?v0)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= ?v0 (fun_app$ (append$a ?v0) ?v1)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 (fun_app$k (append$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= nil$a (fun_app$ (append$a ?v0) ?v1)) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= nil$ (fun_app$k (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (= (fun_app$ (append$a ?v0) ?v1) nil$a) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$ (append$a ?v0) nil$a) ?v0) :pattern ((append$a ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (append$ ?v0) nil$) ?v0) :pattern ((append$ ?v0)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_list$)) (= (fun_app$k (fun_app$s map$c ?v0) (fun_app$k (append$ ?v1) ?v2)) (fun_app$k (append$ (fun_app$k (fun_app$s map$c ?v0) ?v1)) (fun_app$k (fun_app$s map$c ?v0) ?v2))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (not (= ?v0 nil$a)) (= (= (cons$a ?v1 nil$a) (fun_app$ (append$a ?v2) ?v0)) (and (= ?v2 nil$a) (= ?v0 (cons$a ?v1 nil$a))))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (not (= ?v0 nil$)) (= (= (cons$ ?v1 nil$) (fun_app$k (append$ ?v2) ?v0)) (and (= ?v2 nil$) (= ?v0 (cons$ ?v1 nil$))))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$)) (=> (not (= ?v0 nil$a)) (= (= (cons$a ?v1 nil$a) (fun_app$ (append$a ?v0) ?v2)) (and (= ?v0 (cons$a ?v1 nil$a)) (= ?v2 nil$a)))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$)) (=> (not (= ?v0 nil$)) (= (= (cons$ ?v1 nil$) (fun_app$k (append$ ?v0) ?v2)) (and (= ?v0 (cons$ ?v1 nil$)) (= ?v2 nil$)))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$)) (=> (not (= ?v0 nil$a)) (= (= (fun_app$ (append$a ?v1) ?v0) (cons$a ?v2 nil$a)) (and (= ?v1 nil$a) (= ?v0 (cons$a ?v2 nil$a))))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$)) (=> (not (= ?v0 nil$)) (= (= (fun_app$k (append$ ?v1) ?v0) (cons$ ?v2 nil$)) (and (= ?v1 nil$) (= ?v0 (cons$ ?v2 nil$))))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$)) (=> (not (= ?v0 nil$a)) (= (= (fun_app$ (append$a ?v0) ?v1) (cons$a ?v2 nil$a)) (and (= ?v0 (cons$a ?v2 nil$a)) (= ?v1 nil$a)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$)) (=> (not (= ?v0 nil$)) (= (= (fun_app$k (append$ ?v0) ?v1) (cons$ ?v2 nil$)) (and (= ?v0 (cons$ ?v2 nil$)) (= ?v1 nil$)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$)) (= (= (cons$a ?v0 (cons$a ?v1 nil$a)) (fun_app$ (append$a ?v2) (cons$a ?v3 (cons$a ?v4 ?v5)))) (and (= ?v2 nil$a) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v5 nil$a))))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A$) (?v4 A$) (?v5 A_list$)) (= (= (cons$ ?v0 (cons$ ?v1 nil$)) (fun_app$k (append$ ?v2) (cons$ ?v3 (cons$ ?v4 ?v5)))) (and (= ?v2 nil$) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v5 nil$))))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list_list$) (?v4 A_list$) (?v5 A_list$)) (= (= (fun_app$ (append$a ?v0) (cons$a ?v1 (cons$a ?v2 ?v3))) (cons$a ?v4 (cons$a ?v5 nil$a))) (and (= ?v0 nil$a) (and (= ?v4 ?v1) (and (= ?v5 ?v2) (= ?v3 nil$a))))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A$) (?v5 A$)) (= (= (fun_app$k (append$ ?v0) (cons$ ?v1 (cons$ ?v2 ?v3))) (cons$ ?v4 (cons$ ?v5 nil$))) (and (= ?v0 nil$) (and (= ?v4 ?v1) (and (= ?v5 ?v2) (= ?v3 nil$))))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (= (= (fun_app$ (append$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 nil$a)) (and (= ?v0 nil$a) (and (= ?v1 ?v3) (= ?v2 nil$a)))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$)) (= (= (fun_app$k (append$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 nil$)) (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 nil$)))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list$)) (= (= (fun_app$ (append$a ?v0) (cons$a ?v1 nil$a)) (fun_app$ (append$a ?v2) (cons$a ?v3 nil$a))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A$)) (= (= (fun_app$k (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$k (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 nil$a) (fun_app$ (append$a ?v1) (cons$a ?v2 ?v3))) (and (= ?v1 nil$a) (and (= ?v2 ?v0) (= ?v3 nil$a)))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 nil$) (fun_app$k (append$ ?v1) (cons$ ?v2 ?v3))) (and (= ?v1 nil$) (and (= ?v2 ?v0) (= ?v3 nil$)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (fun_app$ (append$a (cons$a ?v0 ?v1)) ?v2) (cons$a ?v0 (fun_app$ (append$a ?v1) ?v2))) :pattern ((fun_app$ (append$a (cons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$k (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$k (append$ ?v1) ?v2))) :pattern ((fun_app$k (append$ (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list$) (?v5 A_list_list$)) (=> (and (= (fun_app$ (append$a ?v0) (cons$a ?v1 ?v2)) (fun_app$ (append$a ?v3) (cons$a ?v4 ?v5))) (and (forall ((?v6 A_list_list$)) (=> (and (= ?v0 (fun_app$ (append$a ?v3) (cons$a ?v4 ?v6))) (= ?v5 (fun_app$ (append$a ?v6) (cons$a ?v1 ?v2)))) false) ) (and (=> (and (= ?v3 ?v0) (and (= ?v4 ?v1) (= ?v5 ?v2))) false) (forall ((?v6 A_list_list$)) (=> (and (= ?v3 (fun_app$ (append$a ?v0) (cons$a ?v1 ?v6))) (= ?v2 (fun_app$ (append$a ?v6) (cons$a ?v4 ?v5)))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A$) (?v2 A_list$) (?v3 A_list$) (?v4 A$) (?v5 A_list$)) (=> (and (= (fun_app$k (append$ ?v0) (cons$ ?v1 ?v2)) (fun_app$k (append$ ?v3) (cons$ ?v4 ?v5))) (and (forall ((?v6 A_list$)) (=> (and (= ?v0 (fun_app$k (append$ ?v3) (cons$ ?v4 ?v6))) (= ?v5 (fun_app$k (append$ ?v6) (cons$ ?v1 ?v2)))) false) ) (and (=> (and (= ?v3 ?v0) (and (= ?v4 ?v1) (= ?v5 ?v2))) false) (forall ((?v6 A_list$)) (=> (and (= ?v3 (fun_app$k (append$ ?v0) (cons$ ?v1 ?v6))) (= ?v2 (fun_app$k (append$ ?v6) (cons$ ?v4 ?v5)))) false) )))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$) (?v4 A_list_list$)) (=> (and (= (cons$a ?v0 ?v1) ?v2) (= ?v3 (fun_app$ (append$a ?v1) ?v4))) (= (cons$a ?v0 ?v3) (fun_app$ (append$a ?v2) ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$k (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$k (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$ (append$a nil$a) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$k (append$ nil$) ?v1))) ))
(assert (forall ((?v0 A_list_list$)) (! (= (fun_app$ (append$a nil$a) ?v0) ?v0) :pattern ((fun_app$ (append$a nil$a) ?v0)))))
(assert (forall ((?v0 A_list$)) (! (= (fun_app$k (append$ nil$) ?v0) ?v0) :pattern ((fun_app$k (append$ nil$) ?v0)))))
(assert (forall ((?v0 A_set$)) (=> (and (not (= ?v0 bot$)) (forall ((?v1 A$)) (=> (member$a ?v1 ?v0) false) )) false) ))
(assert (forall ((?v0 A_list_set$)) (=> (and (not (= ?v0 bot$a)) (forall ((?v1 A_list$)) (=> (member$ ?v1 ?v0) false) )) false) ))
(assert (forall ((?v0 A$) (?v1 A_set$)) (=> (member$a ?v0 ?v1) (not (= ?v1 bot$))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$)) (=> (member$ ?v0 ?v1) (not (= ?v1 bot$a))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (fun_app$k (append$ ?v0) ?v1) ?v2) (= ?v3 (fun_app$k (append$ ?v1) ?v4))) (= (fun_app$k (append$ ?v0) ?v3) (fun_app$k (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) (fun_app$k (append$ ?v2) ?v3)) (exists ((?v4 A_list$)) (or (and (= ?v0 (fun_app$k (append$ ?v2) ?v4)) (= (fun_app$k (append$ ?v4) ?v1) ?v3)) (and (= (fun_app$k (append$ ?v0) ?v4) ?v2) (= ?v1 (fun_app$k (append$ ?v4) ?v3)))) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (fun_app$k (fun_app$s map$c ?v0) ?v1) (fun_app$k (append$ ?v2) ?v3)) (forall ((?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v1 (fun_app$k (append$ ?v4) ?v5)) (and (= (fun_app$k (fun_app$s map$c ?v0) ?v4) ?v2) (= (fun_app$k (fun_app$s map$c ?v0) ?v5) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (fun_app$k (fun_app$s map$c ?v0) ?v1) (fun_app$k (append$ ?v2) ?v3)) (forall ((?v4 A_list$) (?v5 A_list$)) (=> (and (= ?v1 (fun_app$k (append$ ?v4) ?v5)) (and (= (fun_app$k (fun_app$s map$c ?v0) ?v4) ?v2) (= (fun_app$k (fun_app$s map$c ?v0) ?v5) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$a (lexordp$ ?v0) ?v1) (fun_app$a (lexordp$ (fun_app$k (append$ ?v2) ?v0)) (fun_app$k (append$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_list_list_bool_fun$) (?v1 A_list_list$)) (=> (and (fun_app$c ?v0 nil$a) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (fun_app$c ?v0 ?v3) (fun_app$c ?v0 (fun_app$ (append$a ?v3) (cons$a ?v2 nil$a)))) )) (fun_app$c ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_bool_fun$) (?v1 A_list$)) (=> (and (fun_app$a ?v0 nil$) (forall ((?v2 A$) (?v3 A_list$)) (=> (fun_app$a ?v0 ?v3) (fun_app$a ?v0 (fun_app$k (append$ ?v3) (cons$ ?v2 nil$)))) )) (fun_app$a ?v0 ?v1)) ))
(assert (forall ((?v0 A_list_a_list_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$d ?v0 nil$) nil$a) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$c (fun_app$d ?v0 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$c (fun_app$d ?v0 nil$) (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$c (fun_app$d ?v0 ?v4) ?v6) (fun_app$c (fun_app$d ?v0 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) (fun_app$ (append$a ?v6) (cons$a ?v5 nil$a)))) )))) (fun_app$c (fun_app$d ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$e ?v0 nil$a) nil$) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$a (fun_app$e ?v0 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$e ?v0 nil$a) (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$a (fun_app$e ?v0 ?v4) ?v6) (fun_app$a (fun_app$e ?v0 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) (fun_app$k (append$ ?v6) (cons$ ?v5 nil$)))) )))) (fun_app$a (fun_app$e ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (and (fun_app$c (fun_app$f ?v0 nil$a) nil$a) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$c (fun_app$f ?v0 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) nil$a) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$)) (fun_app$c (fun_app$f ?v0 nil$a) (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (fun_app$c (fun_app$f ?v0 ?v4) ?v6) (fun_app$c (fun_app$f ?v0 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) (fun_app$ (append$a ?v6) (cons$a ?v5 nil$a)))) )))) (fun_app$c (fun_app$f ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (fun_app$g ?v0 nil$) nil$) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$g ?v0 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) nil$) ) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$a (fun_app$g ?v0 nil$) (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (fun_app$a (fun_app$g ?v0 ?v4) ?v6) (fun_app$a (fun_app$g ?v0 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) (fun_app$k (append$ ?v6) (cons$ ?v5 nil$)))) )))) (fun_app$a (fun_app$g ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 A_list_list$)) (=> (not (= ?v0 nil$a)) (exists ((?v1 A_list_list$) (?v2 A_list$)) (= ?v0 (fun_app$ (append$a ?v1) (cons$a ?v2 nil$a))) )) ))
(assert (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (exists ((?v1 A_list$) (?v2 A$)) (= ?v0 (fun_app$k (append$ ?v1) (cons$ ?v2 nil$))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_a_list_list_bool_fun_fun$)) (=> (and (not (= ?v0 nil$)) (and (not (= ?v1 nil$a)) (and (forall ((?v3 A$) (?v4 A_list$)) (fun_app$c (fun_app$d ?v2 (cons$ ?v3 nil$)) (cons$a ?v4 nil$a)) ) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$)) (=> (not (= ?v4 nil$)) (fun_app$c (fun_app$d ?v2 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) (cons$a ?v5 nil$a))) ) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list_list$)) (=> (not (= ?v5 nil$a)) (fun_app$c (fun_app$d ?v2 (cons$ ?v3 nil$)) (fun_app$ (append$a ?v5) (cons$a ?v4 nil$a)))) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (and (fun_app$c (fun_app$d ?v2 ?v4) ?v6) (and (not (= ?v4 nil$)) (not (= ?v6 nil$a)))) (fun_app$c (fun_app$d ?v2 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) (fun_app$ (append$a ?v6) (cons$a ?v5 nil$a)))) )))))) (fun_app$c (fun_app$d ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list$) (?v2 A_list_list_a_list_bool_fun_fun$)) (=> (and (not (= ?v0 nil$a)) (and (not (= ?v1 nil$)) (and (forall ((?v3 A_list$) (?v4 A$)) (fun_app$a (fun_app$e ?v2 (cons$a ?v3 nil$a)) (cons$ ?v4 nil$)) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$)) (=> (not (= ?v4 nil$a)) (fun_app$a (fun_app$e ?v2 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) (cons$ ?v5 nil$))) ) (and (forall ((?v3 A_list$) (?v4 A$) (?v5 A_list$)) (=> (not (= ?v5 nil$)) (fun_app$a (fun_app$e ?v2 (cons$a ?v3 nil$a)) (fun_app$k (append$ ?v5) (cons$ ?v4 nil$)))) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A$) (?v6 A_list$)) (=> (and (fun_app$a (fun_app$e ?v2 ?v4) ?v6) (and (not (= ?v4 nil$a)) (not (= ?v6 nil$)))) (fun_app$a (fun_app$e ?v2 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) (fun_app$k (append$ ?v6) (cons$ ?v5 nil$)))) )))))) (fun_app$a (fun_app$e ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_list_a_list_list_bool_fun_fun$)) (=> (and (not (= ?v0 nil$a)) (and (not (= ?v1 nil$a)) (and (forall ((?v3 A_list$) (?v4 A_list$)) (fun_app$c (fun_app$f ?v2 (cons$a ?v3 nil$a)) (cons$a ?v4 nil$a)) ) (and (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$)) (=> (not (= ?v4 nil$a)) (fun_app$c (fun_app$f ?v2 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) (cons$a ?v5 nil$a))) ) (and (forall ((?v3 A_list$) (?v4 A_list$) (?v5 A_list_list$)) (=> (not (= ?v5 nil$a)) (fun_app$c (fun_app$f ?v2 (cons$a ?v3 nil$a)) (fun_app$ (append$a ?v5) (cons$a ?v4 nil$a)))) ) (forall ((?v3 A_list$) (?v4 A_list_list$) (?v5 A_list$) (?v6 A_list_list$)) (=> (and (fun_app$c (fun_app$f ?v2 ?v4) ?v6) (and (not (= ?v4 nil$a)) (not (= ?v6 nil$a)))) (fun_app$c (fun_app$f ?v2 (fun_app$ (append$a ?v4) (cons$a ?v3 nil$a))) (fun_app$ (append$a ?v6) (cons$a ?v5 nil$a)))) )))))) (fun_app$c (fun_app$f ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_a_list_bool_fun_fun$)) (=> (and (not (= ?v0 nil$)) (and (not (= ?v1 nil$)) (and (forall ((?v3 A$) (?v4 A$)) (fun_app$a (fun_app$g ?v2 (cons$ ?v3 nil$)) (cons$ ?v4 nil$)) ) (and (forall ((?v3 A$) (?v4 A_list$) (?v5 A$)) (=> (not (= ?v4 nil$)) (fun_app$a (fun_app$g ?v2 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) (cons$ ?v5 nil$))) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_list$)) (=> (not (= ?v5 nil$)) (fun_app$a (fun_app$g ?v2 (cons$ ?v3 nil$)) (fun_app$k (append$ ?v5) (cons$ ?v4 nil$)))) ) (forall ((?v3 A$) (?v4 A_list$) (?v5 A$) (?v6 A_list$)) (=> (and (fun_app$a (fun_app$g ?v2 ?v4) ?v6) (and (not (= ?v4 nil$)) (not (= ?v6 nil$)))) (fun_app$a (fun_app$g ?v2 (fun_app$k (append$ ?v4) (cons$ ?v3 nil$))) (fun_app$k (append$ ?v6) (cons$ ?v5 nil$)))) )))))) (fun_app$a (fun_app$g ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 A_list$)) (fun_app$c ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 A_list$) (?v3 A_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$c ?v1 ?v3)) (fun_app$c ?v1 (fun_app$ (append$a ?v3) (cons$a ?v2 nil$a)))) ))) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A$)) (fun_app$a ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$a ?v1 ?v3)) (fun_app$a ?v1 (fun_app$k (append$ ?v3) (cons$ ?v2 nil$)))) ))) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (=> (and (= (cons$a ?v0 ?v1) (fun_app$ (append$a ?v2) ?v3)) (and (=> (and (= ?v2 nil$a) (= ?v3 (cons$a ?v0 ?v1))) false) (forall ((?v4 A_list_list$)) (=> (and (= ?v2 (cons$a ?v0 ?v4)) (= (fun_app$ (append$a ?v4) ?v3) ?v1)) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (cons$ ?v0 ?v1) (fun_app$k (append$ ?v2) ?v3)) (and (=> (and (= ?v2 nil$) (= ?v3 (cons$ ?v0 ?v1))) false) (forall ((?v4 A_list$)) (=> (and (= ?v2 (cons$ ?v0 ?v4)) (= (fun_app$k (append$ ?v4) ?v3) ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (=> (and (= (fun_app$ (append$a ?v0) ?v1) (cons$a ?v2 ?v3)) (and (=> (and (= ?v0 nil$a) (= ?v1 (cons$a ?v2 ?v3))) false) (forall ((?v4 A_list_list$)) (=> (and (= ?v0 (cons$a ?v2 ?v4)) (= (fun_app$ (append$a ?v4) ?v1) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (=> (and (= (fun_app$k (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (and (=> (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) false) (forall ((?v4 A_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$k (append$ ?v4) ?v1) ?v3)) false) ))) false) ))
(assert (forall ((?v0 A_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 A_list_list$) (?v2 A_list$)) (=> (= ?v0 (fun_app$ (append$a ?v1) (cons$a ?v2 nil$a))) false) )) false) ))
(assert (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A_list$) (?v2 A$)) (=> (= ?v0 (fun_app$k (append$ ?v1) (cons$ ?v2 nil$))) false) )) false) ))
(assert (forall ((?v0 A_list_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 A_list_list$) (?v2 A_list$)) (= ?v0 (fun_app$ (append$a ?v1) (cons$a ?v2 nil$a))) )) ))
(assert (forall ((?v0 A_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A_list$) (?v2 A$)) (= ?v0 (fun_app$k (append$ ?v1) (cons$ ?v2 nil$))) )) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (cons$a ?v0 ?v1) (fun_app$ (append$a ?v2) ?v3)) (or (and (= ?v2 nil$a) (= (cons$a ?v0 ?v1) ?v3)) (exists ((?v4 A_list_list$)) (and (= (cons$a ?v0 ?v4) ?v2) (= ?v1 (fun_app$ (append$a ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$k (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 A_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$k (append$ ?v4) ?v3))) ))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (fun_app$ (append$a ?v0) ?v1) (cons$a ?v2 ?v3)) (or (and (= ?v0 nil$a) (= ?v1 (cons$a ?v2 ?v3))) (exists ((?v4 A_list_list$)) (and (= ?v0 (cons$a ?v2 ?v4)) (= (fun_app$ (append$a ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (fun_app$k (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 A_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$k (append$ ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_a_fun$) (?v3 A_list_list$) (?v4 A_list$)) (=> (= (fun_app$k (append$ ?v0) ?v1) (fun_app$k (append$ (fun_app$q (map$ ?v2) ?v3)) ?v1)) (= (cons$ (fun_app$n ?v2 ?v4) (fun_app$k (append$ ?v0) ?v1)) (fun_app$k (append$ (fun_app$q (map$ ?v2) (cons$a ?v4 ?v3))) ?v1))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_a_list_fun$) (?v3 A_list$) (?v4 A$)) (=> (= (fun_app$ (append$a ?v0) ?v1) (fun_app$ (append$a (fun_app$r (map$a ?v2) ?v3)) ?v1)) (= (cons$a (fun_app$l ?v2 ?v4) (fun_app$ (append$a ?v0) ?v1)) (fun_app$ (append$a (fun_app$r (map$a ?v2) (cons$ ?v4 ?v3))) ?v1))) ))
(assert (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_a_list_fun$) (?v3 A_list_list$) (?v4 A_list$)) (=> (= (fun_app$ (append$a ?v0) ?v1) (fun_app$ (append$a (fun_app$ (map$b ?v2) ?v3)) ?v1)) (= (cons$a (fun_app$k ?v2 ?v4) (fun_app$ (append$a ?v0) ?v1)) (fun_app$ (append$a (fun_app$ (map$b ?v2) (cons$a ?v4 ?v3))) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_a_fun$) (?v3 A_list$) (?v4 A$)) (=> (= (fun_app$k (append$ ?v0) ?v1) (fun_app$k (append$ (fun_app$k (fun_app$s map$c ?v2) ?v3)) ?v1)) (= (cons$ (fun_app$p ?v2 ?v4) (fun_app$k (append$ ?v0) ?v1)) (fun_app$k (append$ (fun_app$k (fun_app$s map$c ?v2) (cons$ ?v4 ?v3))) ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (fun_app$a (lexordp$ (fun_app$k (append$ ?v0) ?v1)) (fun_app$k (append$ ?v0) ?v2)) (forall ((?v3 A$)) (not (fun_app$b (less$ ?v3) ?v3)) )) (fun_app$a (lexordp$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= ?v0 nil$)) (fun_app$a (lexordp$ ?v1) (fun_app$k (append$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$a (lexordp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_list$)) (= ?v1 (fun_app$k (append$ ?v0) (cons$ ?v2 ?v3))) ) (exists ((?v2 A_list$) (?v3 A$) (?v4 A$) (?v5 A_list$) (?v6 A_list$)) (and (fun_app$b (less$ ?v3) ?v4) (and (= ?v0 (fun_app$k (append$ ?v2) (cons$ ?v3 ?v5))) (= ?v1 (fun_app$k (append$ ?v2) (cons$ ?v4 ?v6))))) ))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (fun_app$b (less$ ?v0) ?v1) (fun_app$a (lexordp$ (fun_app$k (append$ ?v2) (cons$ ?v0 ?v3))) (fun_app$k (append$ ?v2) (cons$ ?v1 ?v4)))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$)) (! (= (fun_app$a (member$b (cons$a ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$b ?v1) ?v2))) :pattern ((fun_app$a (member$b (cons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (! (= (fun_app$b (member$c (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$b (member$c ?v1) ?v2))) :pattern ((fun_app$b (member$c (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$)) (= (member$a ?v0 bot$) false) ))
(assert (forall ((?v0 A_list$)) (= (member$ ?v0 bot$a) false) ))
(assert (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$a ?v1 ?v0)) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 A_list_set$)) (= (forall ((?v1 A_list$)) (not (member$ ?v1 ?v0)) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (=> (not (member$a ?v0 ?v1)) (member$a ?v0 ?v2)) (member$a ?v0 (sup$ ?v2 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (=> (not (member$ ?v0 ?v1)) (member$ ?v0 ?v2)) (member$ ?v0 (sup$a ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$a ?v0 (sup$ ?v1 ?v2)) (or (member$a ?v0 ?v1) (member$a ?v0 ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (= (member$ ?v0 (sup$a ?v1 ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 A$)) (=> (member$a ?v0 bot$) false) ))
(assert (forall ((?v0 A_list$)) (=> (member$ ?v0 bot$a) false) ))
(assert (forall ((?v0 A_set$) (?v1 A$)) (=> (= ?v0 bot$) (not (member$a ?v1 ?v0))) ))
(assert (forall ((?v0 A_list_set$) (?v1 A_list$)) (=> (= ?v0 bot$a) (not (member$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (=> (member$a ?v1 ?v0) false) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 A_list_set$)) (=> (forall ((?v1 A_list$)) (=> (member$ ?v1 ?v0) false) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 A_set$)) (= (exists ((?v1 A$)) (member$a ?v1 ?v0) ) (not (= ?v0 bot$))) ))
(assert (forall ((?v0 A_list_set$)) (= (exists ((?v1 A_list$)) (member$ ?v1 ?v0) ) (not (= ?v0 bot$a))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (sup$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (sup$a ?v1 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (sup$ ?v2 ?v1))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (sup$a ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$a ?v0 (sup$ ?v1 ?v2)) (and (=> (member$a ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_set$)) (=> (and (member$ ?v0 (sup$a ?v1 ?v2)) (and (=> (member$ ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$a ?v3 (sup$ ?v0 ?v1)) (fun_app$b ?v2 ?v3)) ) (and (forall ((?v3 A$)) (=> (member$a ?v3 ?v0) (fun_app$b ?v2 ?v3)) ) (forall ((?v3 A$)) (=> (member$a ?v3 ?v1) (fun_app$b ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_list_set$) (?v1 A_list_set$) (?v2 A_list_bool_fun$)) (= (forall ((?v3 A_list$)) (=> (member$ ?v3 (sup$a ?v0 ?v1)) (fun_app$a ?v2 ?v3)) ) (and (forall ((?v3 A_list$)) (=> (member$ ?v3 ?v0) (fun_app$a ?v2 ?v3)) ) (forall ((?v3 A_list$)) (=> (member$ ?v3 ?v1) (fun_app$a ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$a ?v3 (sup$ ?v0 ?v1)) (fun_app$b ?v2 ?v3)) ) (or (exists ((?v3 A$)) (and (member$a ?v3 ?v0) (fun_app$b ?v2 ?v3)) ) (exists ((?v3 A$)) (and (member$a ?v3 ?v1) (fun_app$b ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_list_set$) (?v1 A_list_set$) (?v2 A_list_bool_fun$)) (= (exists ((?v3 A_list$)) (and (member$ ?v3 (sup$a ?v0 ?v1)) (fun_app$a ?v2 ?v3)) ) (or (exists ((?v3 A_list$)) (and (member$ ?v3 ?v0) (fun_app$a ?v2 ?v3)) ) (exists ((?v3 A_list$)) (and (member$ ?v3 ?v1) (fun_app$a ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_list$) (?v1 A_list_list_set$) (?v2 A_list_list$)) (=> (member$ ?v0 (succ$ ?v1 ?v2)) (member$d (fun_app$ (append$a ?v2) (cons$a ?v0 nil$a)) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_list_set$) (?v2 A_list$)) (=> (member$a ?v0 (succ$a ?v1 ?v2)) (member$ (fun_app$k (append$ ?v2) (cons$ ?v0 nil$)) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (not (= ?v0 ?v1)) (or (fun_app$b (less$ ?v0) ?v1) (fun_app$b (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (not (fun_app$b (less$ ?v0) ?v1)) (or (fun_app$b (less$ ?v1) ?v0) (= ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (=> (fun_app$b (less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$b (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (and (fun_app$b (less$ ?v2) ?v3) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$b (less$ ?v4) ?v5) (fun_app$b (less$ (fun_app$p ?v1 ?v4)) (fun_app$p ?v1 ?v5))) ))) (fun_app$b (less$ ?v0) (fun_app$p ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$b (less$ ?v1) ?v2)) (fun_app$b (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$b (less$ ?v0) ?v1) (=> (not false) (fun_app$b (less$ ?v1) ?v0))) false) ))
(check-sat)
(exit)

