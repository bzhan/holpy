(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_set_bool_fun$ 0)
(declare-sort A_set_enat_fun$ 0)
(declare-sort Enat_a_set_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_enat_fun_fun$ 0)
(declare-sort A_set_a_set_bool_fun_fun$ 0)
(declare-sort A_set_a_set_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun x$ () A$)
(declare-fun uu$ (A$) A_llist_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun inf$ (A_set$) A_set_a_set_fun$)
(declare-fun max$ (A_a_bool_fun_fun$) A_a_a_fun_fun$)
(declare-fun min$ (A_a_bool_fun_fun$) A_a_a_fun_fun$)
(declare-fun uua$ (A_set$) A_bool_fun$)
(declare-fun inf$a (Enat$) Enat_enat_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun image$ (A_a_fun$) A_set_a_set_fun$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun atMost$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun transp$ (A_a_bool_fun_fun$) Bool)
(declare-fun atLeast$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun transp$a (Enat_enat_bool_fun_fun$) Bool)
(declare-fun transp$b (A_set_a_set_bool_fun_fun$) Bool)
(declare-fun transp$c (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$g (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$h (A_set_bool_fun$ A_set$) Bool)
(declare-fun fun_app$i (A_set_a_set_bool_fun_fun$ A_set$) A_set_bool_fun$)
(declare-fun fun_app$j (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$k (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$l (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$m (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$n (Enat_enat_enat_fun_fun$ Enat$) Enat_enat_fun$)
(declare-fun fun_app$o (A_set_a_set_a_set_fun_fun$ A_set$) A_set_a_set_fun$)
(declare-fun fun_app$p (Enat_a_set_fun$ Enat$) A_set$)
(declare-fun fun_app$q (A_set_enat_fun$ A_set$) Enat$)
(declare-fun less_eq$a () A_set_a_set_bool_fun_fun$)
(declare-fun less_eq$b () Enat_enat_bool_fun_fun$)
(declare-fun bdd_above$ (A_a_bool_fun_fun$ A_set$) Bool)
(declare-fun bdd_below$ (A_a_bool_fun_fun$ A_set$) Bool)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(declare-fun finite_lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))))
(assert (not (fun_app$b (lsorted$ less_eq$) (lCons$ x$ xs$))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$c less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$c less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (= ?v0 ?v1) (fun_app$a (fun_app$c less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$c less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$c less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$c less_eq$ ?v0) ?v1) (fun_app$a (fun_app$c less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$c less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$c less_eq$ ?v0) ?v1) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v1 ?v2))) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v0 (lCons$ ?v1 ?v2)))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$d (fun_app$e (max$ less_eq$) ?v0) ?v1) (ite (fun_app$a (fun_app$c less_eq$ ?v0) ?v1) ?v1 ?v0)) :pattern ((fun_app$d (fun_app$e (max$ less_eq$) ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$d (fun_app$e (min$ less_eq$) ?v0) ?v1) (ite (fun_app$a (fun_app$c less_eq$ ?v0) ?v1) ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e (min$ less_eq$) ?v0) ?v1)))))
(assert (and (fun_app$b (lsorted$ less_eq$) xs$) (forall ((?v0 A$)) (=> (member$ ?v0 (lset$ xs$)) (fun_app$a (fun_app$c less_eq$ x$) ?v0)) )))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$)) (fun_app$a (fun_app$c less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (lsorted$ less_eq$) (lCons$ ?v0 (lCons$ ?v1 ?v2))) (and (fun_app$a (fun_app$c less_eq$ ?v0) ?v1) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v1 ?v2)))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$a (fun_app$c ?v0 ?v1) ?v2) (fun_app$b (lsorted$ ?v0) (lCons$ ?v2 ?v3)))) :pattern ((fun_app$b (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$a (fun_app$c ?v0 ?v1) ?v2) (fun_app$b (lsorted$ ?v0) (lCons$ ?v2 ?v3))) (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))) ))
(assert (forall ((?v0 A_set$)) (= (bdd_above$ less_eq$ ?v0) (exists ((?v1 A$)) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (fun_app$a (fun_app$c less_eq$ ?v2) ?v1)) ) )) ))
(assert (forall ((?v0 A_set$)) (= (bdd_below$ less_eq$ ?v0) (exists ((?v1 A$)) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (fun_app$a (fun_app$c less_eq$ ?v1) ?v2)) ) )) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$b (lsorted$ less_eq$) ?v0) (or (= ?v0 lNil$) (or (exists ((?v1 A$)) (= ?v0 (lCons$ ?v1 lNil$)) ) (exists ((?v1 A$) (?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$a (fun_app$c less_eq$ ?v1) ?v2) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v2 ?v3)))) )))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (fun_app$b (lsorted$ less_eq$) ?v0) (and (=> (= ?v0 lNil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (lCons$ ?v1 lNil$)) false) ) (forall ((?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$a (fun_app$c less_eq$ ?v1) ?v2) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v2 ?v3)))) false) )))) false) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (fun_app$b ?v0 ?v2) (or (= ?v2 lNil$) (or (exists ((?v3 A$)) (= ?v2 (lCons$ ?v3 lNil$)) ) (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$)) (and (= ?v2 (lCons$ ?v3 (lCons$ ?v4 ?v5))) (and (fun_app$a (fun_app$c less_eq$ ?v3) ?v4) (or (fun_app$b ?v0 (lCons$ ?v4 ?v5)) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v4 ?v5))))) )))) )) (fun_app$b (lsorted$ less_eq$) ?v1)) ))
(assert (forall ((?v0 A$)) (fun_app$b (lsorted$ less_eq$) (lCons$ ?v0 lNil$)) ))
(assert (transp$ less_eq$))
(assert (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (fun_app$b (lsorted$ less_eq$) ?v0) (fun_app$b (lsorted$ less_eq$) (fun_app$ (ldropn$ ?v1) ?v0))) ))
(assert (fun_app$b (lsorted$ less_eq$) lNil$))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (fun_app$b (lsorted$ less_eq$) ?v0) (fun_app$b (lsorted$ less_eq$) (fun_app$ (ldrop$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (lsorted$ less_eq$) ?v1)) (fun_app$b (lsorted$ less_eq$) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b (lsorted$ less_eq$) ?v0) (fun_app$b (lsorted$ less_eq$) (ltl$ ?v0))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$f lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$f lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (fun_app$f lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (fun_app$f lprefix$ ?v1) ?v3))) :pattern ((fun_app$b (fun_app$f lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$f lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (fun_app$f lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (fun_app$a (fun_app$c less_eq$ ?v1) ?v2)) ) (bdd_below$ less_eq$ ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (fun_app$a (fun_app$c less_eq$ ?v2) ?v1)) ) (bdd_above$ less_eq$ ?v0)) ))
(assert (= (fun_app$b (lsorted$ less_eq$) lNil$) true))
(assert (forall ((?v0 A$)) (! (= (fun_app$b (lsorted$ less_eq$) (lCons$ ?v0 lNil$)) true) :pattern ((uu$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (ldrop$ ?v0) ?v1)) (fun_app$ (ldrop$ ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (ldropn$ ?v0) ?v1)) (fun_app$ (ldropn$ ?v0) (ltl$ ?v1))) ))
(assert (= (ltl$ lNil$) lNil$))
(assert (forall ((?v0 A$) (?v1 Enat$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (ldrop$ ?v1) ?v2))) (member$ ?v0 (lset$ ?v2))) ))
(assert (forall ((?v0 A$) (?v1 Nat$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (ldropn$ ?v1) ?v2))) (member$ ?v0 (lset$ ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ (ltl$ ?v1))) (member$ ?v0 (lset$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$f lprefix$ ?v0) ?v2) (fun_app$b (fun_app$f lprefix$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$f lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 A_set$)) (= (collect$ (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$f lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ (ltl$ ?v0)) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$f lprefix$ lNil$) ?v0) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$f ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$f ?v0 ?v3) ?v4) (or (exists ((?v5 A_llist$)) (and (= ?v3 lNil$) (= ?v4 ?v5)) ) (exists ((?v5 A_llist$) (?v6 A_llist$) (?v7 A$)) (and (= ?v3 (lCons$ ?v7 ?v5)) (and (= ?v4 (lCons$ ?v7 ?v6)) (or (fun_app$b (fun_app$f ?v0 ?v5) ?v6) (fun_app$b (fun_app$f lprefix$ ?v5) ?v6)))) ))) )) (fun_app$b (fun_app$f lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (and (forall ((?v2 A_llist$)) (=> (and (= ?v0 lNil$) (= ?v1 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$b (fun_app$f lprefix$ ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$f lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2)) ) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$b (fun_app$f lprefix$ ?v2) ?v3))) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (fun_app$f lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$b (fun_app$f lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (fun_app$b (lsorted$ ?v0) ?v1) (fun_app$b (lsorted$ ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (fun_app$f lprefix$ (lCons$ ?v2 ?v0)) (lCons$ ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$f lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$b (fun_app$f lprefix$ ?v1) ?v3)) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$b (lsorted$ ?v2) ?v1)) (fun_app$b (lsorted$ ?v2) ?v0)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (lsorted$ ?v0) lNil$) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (! (= (fun_app$b (lsorted$ ?v0) lNil$) true) :pattern ((lsorted$ ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 Enat$)) (=> (fun_app$b (lsorted$ ?v0) ?v1) (fun_app$b (lsorted$ ?v0) (fun_app$ (ldrop$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 Nat$)) (=> (fun_app$b (lsorted$ ?v0) ?v1) (fun_app$b (lsorted$ ?v0) (fun_app$ (ldropn$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 lNil$)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$b ?v0 ?v3) (or (= ?v3 lNil$) (or (exists ((?v4 A$)) (= ?v3 (lCons$ ?v4 lNil$)) ) (exists ((?v4 A$) (?v5 A$) (?v6 A_llist$)) (and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6))) (and (fun_app$a (fun_app$c ?v2 ?v4) ?v5) (or (fun_app$b ?v0 (lCons$ ?v5 ?v6)) (fun_app$b (lsorted$ ?v2) (lCons$ ?v5 ?v6))))) )))) )) (fun_app$b (lsorted$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (and (fun_app$b (lsorted$ ?v0) ?v1) (and (=> (= ?v1 lNil$) false) (and (forall ((?v2 A$)) (=> (= ?v1 (lCons$ ?v2 lNil$)) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$a (fun_app$c ?v0 ?v2) ?v3) (fun_app$b (lsorted$ ?v0) (lCons$ ?v3 ?v4)))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 lNil$)) true) :pattern ((fun_app$b (lsorted$ ?v0) (lCons$ ?v1 lNil$))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (fun_app$b (lsorted$ ?v0) ?v1) (or (= ?v1 lNil$) (or (exists ((?v2 A$)) (= ?v1 (lCons$ ?v2 lNil$)) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$a (fun_app$c ?v0 ?v2) ?v3) (fun_app$b (lsorted$ ?v0) (lCons$ ?v3 ?v4)))) )))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$b ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$b ?v2 ?v4))) (fun_app$b ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$b ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$b ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$b ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$b (fun_app$g ?v2 ?v3) (lCons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$b (fun_app$g ?v2 ?v5) ?v4)) (fun_app$b (fun_app$g ?v2 ?v5) (lCons$ ?v3 ?v4))) ))) (fun_app$b (fun_app$g ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (bdd_below$ less_eq$ (atLeastAtMost$ less_eq$ ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (bdd_above$ less_eq$ (atLeastAtMost$ less_eq$ ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (bdd_below$ less_eq$ ?v0) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (bdd_below$ less_eq$ ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (bdd_above$ less_eq$ ?v0) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (bdd_above$ less_eq$ ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (bdd_below$ less_eq$ ?v0) (bdd_below$ less_eq$ (fun_app$j (inf$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (bdd_below$ less_eq$ ?v0) (bdd_below$ less_eq$ (fun_app$j (inf$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (bdd_above$ less_eq$ ?v0) (bdd_above$ less_eq$ (fun_app$j (inf$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (bdd_above$ less_eq$ ?v0) (bdd_above$ less_eq$ (fun_app$j (inf$ ?v1) ?v0))) ))
(assert (forall ((?v0 A$)) (bdd_below$ less_eq$ (atLeast$ less_eq$ ?v0)) ))
(assert (forall ((?v0 A$)) (bdd_above$ less_eq$ (atMost$ less_eq$ ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (atLeastAtMost$ less_eq$ ?v0 ?v1) (fun_app$j (inf$ (atLeast$ less_eq$ ?v0)) (atMost$ less_eq$ ?v1))) :pattern ((atLeastAtMost$ less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$)) (= (member$ ?v0 (atMost$ less_eq$ ?v1)) (fun_app$a (fun_app$c less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (member$ ?v0 (atLeast$ less_eq$ ?v1)) (fun_app$a (fun_app$c less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (member$ ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2)) (and (fun_app$a (fun_app$c less_eq$ ?v1) ?v0) (fun_app$a (fun_app$c less_eq$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v3) ?v4) (fun_app$k (fun_app$l ?v0 ?v3) ?v4)) ) (=> (fun_app$k (fun_app$l ?v0 ?v1) ?v2) (fun_app$k (fun_app$l ?v0 ?v2) ?v1))) (fun_app$k (fun_app$l ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a (lset$ ?v0)) (lset$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$h (fun_app$i less_eq$a (lset$ (ltl$ ?v0))) (lset$ ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (fun_app$h (fun_app$i less_eq$a (lset$ (fun_app$ (ldrop$ ?v0) ?v1))) (lset$ ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 A_llist$)) (fun_app$h (fun_app$i less_eq$a (lset$ (fun_app$ (ldropn$ ?v0) ?v1))) (lset$ ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2)) (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2)) (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (atLeastAtMost$ ?v0 ?v1 ?v2) (fun_app$j (inf$ (atLeast$ ?v0 ?v1)) (atMost$ ?v0 ?v2))) :pattern ((atLeastAtMost$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) ) (fun_app$h (fun_app$i less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a (fun_app$m (inf$a ?v0) ?v1)) ?v1) (fun_app$m (inf$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ (fun_app$j (inf$ ?v0) ?v1)) ?v1) (fun_app$j (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a (fun_app$m (inf$a ?v0) ?v1)) ?v1) (fun_app$m (inf$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ (fun_app$j (inf$ ?v0) ?v1)) ?v1) (fun_app$j (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v0) ?v1)) (fun_app$m (inf$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v0) ?v1)) (fun_app$j (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v0) ?v1)) (fun_app$m (inf$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v0) ?v1)) (fun_app$j (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$m (inf$a ?v0) ?v0) ?v0) :pattern ((inf$a ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$j (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$m (inf$a ?v0) ?v0) ?v0) :pattern ((inf$a ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$j (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (fun_app$j (inf$ ?v1) ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (= ?v0 ?v1) (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (fun_app$h (fun_app$i less_eq$a (collect$ ?v0)) (collect$ ?v1)) (forall ((?v2 A$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (fun_app$h (fun_app$i less_eq$a (collect$ ?v0)) (collect$ ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (= ?v0 ?v1) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (and (=> (not (member$ ?v2 ?v0)) false) (=> (member$ ?v2 ?v1) false))) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (not (member$ ?v2 ?v1))) (not (member$ ?v2 ?v0))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 A_set$)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$m (inf$a (fun_app$m (inf$a ?v0) ?v1)) ?v2) (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ (fun_app$j (inf$ ?v0) ?v1)) ?v2) (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$m (inf$a (fun_app$m (inf$a ?v0) ?v1)) ?v2) (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ (fun_app$j (inf$ ?v0) ?v1)) ?v2) (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$m (inf$a (fun_app$m (inf$a ?v0) ?v1)) ?v2) (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ (fun_app$j (inf$ ?v0) ?v1)) ?v2) (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v1) ?v2)) (fun_app$m (inf$a ?v1) (fun_app$m (inf$a ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2)) (fun_app$j (inf$ ?v1) (fun_app$j (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v1) ?v2)) (fun_app$m (inf$a ?v1) (fun_app$m (inf$a ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2)) (fun_app$j (inf$ ?v1) (fun_app$j (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v1) ?v2)) (fun_app$m (inf$a ?v1) (fun_app$m (inf$a ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2)) (fun_app$j (inf$ ?v1) (fun_app$j (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a ?v0) (fun_app$m (inf$a ?v0) ?v1)) (fun_app$m (inf$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v0) ?v1)) (fun_app$j (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a ?v0) ?v1) (fun_app$m (inf$a ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) ?v1) (fun_app$j (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a ?v0) ?v1) (fun_app$m (inf$a ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) ?v1) (fun_app$j (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$m (inf$a ?v0) ?v1) (fun_app$m (inf$a ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) ?v1) (fun_app$j (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ (fun_app$j (inf$ ?v0) ?v1)) ?v2) (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v1) ?v2)) (fun_app$j (inf$ ?v1) (fun_app$j (inf$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) (fun_app$j (inf$ ?v0) ?v1)) (fun_app$j (inf$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$j (inf$ ?v0) ?v1) (fun_app$j (inf$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$j (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 (fun_app$j (inf$ ?v1) ?v2)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) false)) false) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$ ?v0 (fun_app$j (inf$ ?v1) ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$ ?v0 (fun_app$j (inf$ ?v1) ?v2)) (member$ ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (= (member$ ?v0 (atLeastAtMost$ ?v1 ?v2 ?v3)) (and (fun_app$a (fun_app$c ?v1 ?v2) ?v0) (fun_app$a (fun_app$c ?v1 ?v0) ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (member$ ?v0 (atLeast$ ?v1 ?v2)) (fun_app$a (fun_app$c ?v1 ?v2) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (member$ ?v0 (atMost$ ?v1 ?v2)) (fun_app$a (fun_app$c ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v1) ?v0) ?v0)) :pattern ((fun_app$k (fun_app$l less_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (= (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v1) ?v0) ?v0)) :pattern ((fun_app$h (fun_app$i less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v0) ?v1) ?v0)) :pattern ((fun_app$k (fun_app$l less_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (= (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v0) ?v1) ?v0)) :pattern ((fun_app$h (fun_app$i less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v0) ?v1) ?v0)) :pattern ((fun_app$k (fun_app$l less_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (= (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v0) ?v1) ?v0)) :pattern ((fun_app$h (fun_app$i less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= ?v0 (fun_app$m (inf$a ?v0) ?v1))) :pattern ((fun_app$k (fun_app$l less_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (= (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= ?v0 (fun_app$j (inf$ ?v0) ?v1))) :pattern ((fun_app$h (fun_app$i less_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (fun_app$n ?v0 ?v3) ?v4)) ?v3) ) (and (forall ((?v3 Enat$) (?v4 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (fun_app$n ?v0 ?v3) ?v4)) ?v4) ) (forall ((?v3 Enat$) (?v4 Enat$) (?v5 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v3) ?v4) (fun_app$k (fun_app$l less_eq$b ?v3) ?v5)) (fun_app$k (fun_app$l less_eq$b ?v3) (fun_app$m (fun_app$n ?v0 ?v4) ?v5))) ))) (= (fun_app$m (inf$a ?v1) ?v2) (fun_app$m (fun_app$n ?v0 ?v1) ?v2))) ))
(assert (forall ((?v0 A_set_a_set_a_set_fun_fun$) (?v1 A_set$) (?v2 A_set$)) (=> (and (forall ((?v3 A_set$) (?v4 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (fun_app$o ?v0 ?v3) ?v4)) ?v3) ) (and (forall ((?v3 A_set$) (?v4 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (fun_app$o ?v0 ?v3) ?v4)) ?v4) ) (forall ((?v3 A_set$) (?v4 A_set$) (?v5 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v3) ?v4) (fun_app$h (fun_app$i less_eq$a ?v3) ?v5)) (fun_app$h (fun_app$i less_eq$a ?v3) (fun_app$j (fun_app$o ?v0 ?v4) ?v5))) ))) (= (fun_app$j (inf$ ?v1) ?v2) (fun_app$j (fun_app$o ?v0 ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (fun_app$m (inf$a ?v0) ?v1)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 (fun_app$j (inf$ ?v0) ?v1)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (=> (= ?v0 (fun_app$m (inf$a ?v0) ?v1)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (=> (= ?v0 (fun_app$j (inf$ ?v0) ?v1)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v2) ?v3)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v2)) (fun_app$m (inf$a ?v1) ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v2) ?v3)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v2)) (fun_app$j (inf$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m (inf$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v1) ?v0) ?v0)) :pattern ((fun_app$m (inf$a ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v1) ?v0) ?v0)) :pattern ((fun_app$j (inf$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v0) ?v1) ?v0)) :pattern ((fun_app$m (inf$a ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v0) ?v1) ?v0)) :pattern ((fun_app$j (inf$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v1) ?v0) ?v0)) :pattern ((fun_app$m (inf$a ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v1) ?v0) ?v0)) :pattern ((fun_app$j (inf$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$m (inf$a ?v0) ?v1) ?v0)) :pattern ((fun_app$m (inf$a ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v0) ?v1) ?v0)) :pattern ((fun_app$j (inf$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v2) ?v0)) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v2) ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v2) ?v0)) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v2) ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$k (fun_app$l less_eq$b (fun_app$m (inf$a ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (forall ((?v4 A$)) (=> (and (member$ ?v4 ?v0) (fun_app$a ?v2 ?v4)) (fun_app$a ?v3 ?v4)) )) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) (collect$ ?v2))) (fun_app$j (inf$ ?v1) (collect$ ?v3)))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v2) ?v3)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v2)) (fun_app$j (inf$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (inf$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v0) ?v1) ?v0)) :pattern ((fun_app$j (inf$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$j (inf$ ?v1) ?v0) ?v0)) :pattern ((fun_app$j (inf$ ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (inf$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v0) ))
(assert (forall ((?v0 A_set$)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v0) ))
(assert (transp$a less_eq$b))
(assert (transp$b less_eq$a))
(assert (transp$a less_eq$b))
(assert (transp$b less_eq$a))
(assert (forall ((?v0 A_set$) (?v1 A$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (fun_app$a (fun_app$c less_eq$ ?v1) (fun_app$d ?v2 ?v3))) ) (bdd_below$ less_eq$ (fun_app$j (image$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (fun_app$a (fun_app$c less_eq$ (fun_app$d ?v1 ?v3)) ?v2)) ) (bdd_above$ less_eq$ (fun_app$j (image$ ?v1) ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (fun_app$j (image$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a (fun_app$j (image$ ?v2) ?v0)) (fun_app$j (image$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (image$ ?v1) ?v2)) (forall ((?v3 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v3) ?v2) (= ?v0 (fun_app$j (image$ ?v1) ?v3))) false) )) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A_set$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (member$ (fun_app$d ?v1 ?v3) ?v2)) ) (fun_app$h (fun_app$i less_eq$a (fun_app$j (image$ ?v1) ?v0)) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A_set$)) (= (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j (image$ ?v1) ?v2)) (exists ((?v3 A_set$)) (and (fun_app$h (fun_app$i less_eq$a ?v3) ?v2) (= ?v0 (fun_app$j (image$ ?v1) ?v3))) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$h (fun_app$i less_eq$a (fun_app$j (image$ ?v0) ?v1)) ?v2) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (member$ (fun_app$d ?v0 ?v3) ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A_set$)) (= (member$ ?v0 (fun_app$j (image$ ?v1) ?v2)) (exists ((?v3 A$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$d ?v1 ?v3))) )) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 ?v1) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))) )) (= (fun_app$j (image$ ?v2) ?v0) (fun_app$j (image$ ?v3) ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$ ?v3 (fun_app$j (image$ ?v0) ?v1)) (fun_app$a ?v2 ?v3)) ) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$d ?v0 ?v3))) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (fun_app$j (image$ ?v0) ?v1)) (fun_app$a ?v2 ?v3)) ) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$d ?v0 ?v3))) )) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$ ?v2 (fun_app$j (image$ ?v3) ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$d ?v2 ?v0) (fun_app$j (image$ ?v2) ?v1))) ))
(assert (transp$c lprefix$))
(assert (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_set$)) (fun_app$h (fun_app$i less_eq$a (fun_app$j (image$ ?v0) (fun_app$j (inf$ ?v1) ?v2))) (fun_app$j (inf$ (fun_app$j (image$ ?v0) ?v1)) (fun_app$j (image$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v0) ))
(assert (forall ((?v0 A_set$)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v0) ))
(assert (forall ((?v0 A_set$)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= (fun_app$k (fun_app$l less_eq$b ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$k (fun_app$l less_eq$b ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= (fun_app$h (fun_app$i less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$h (fun_app$i less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v2) ?v0)) (fun_app$k (fun_app$l less_eq$b ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v2) ?v0)) (fun_app$h (fun_app$i less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v2) ?v0)) (fun_app$k (fun_app$l less_eq$b ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v2) ?v0)) (fun_app$h (fun_app$i less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 Enat_a_set_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$p ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$b ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v1 ?v4)) (fun_app$p ?v1 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$p ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 A_set_enat_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$q ?v1 ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v1 ?v4)) (fun_app$q ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$q ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$b ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v1 ?v4)) (fun_app$m ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_a_set_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (and (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v2 ?v1)) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v2 ?v4)) (fun_app$q ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (and (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v2 ?v4)) (fun_app$p ?v2 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (and (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v2 ?v4)) (fun_app$m ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (and (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (= ?v1 ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (and (= (fun_app$q ?v2 ?v1) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v2 ?v4)) (fun_app$q ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (and (= (fun_app$p ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v2 ?v4)) (fun_app$p ?v2 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (and (= (fun_app$m ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v2 ?v4)) (fun_app$m ?v2 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_a_set_fun$) (?v3 A_set$)) (=> (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (fun_app$k (fun_app$l less_eq$b ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (fun_app$h (fun_app$i less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (= ?v0 ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v2)) (fun_app$h (fun_app$i less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 A_set_enat_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$q ?v1 ?v4)) (fun_app$q ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$q ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 Enat_a_set_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$b ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$p ?v1 ?v4)) (fun_app$p ?v1 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$p ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (and (fun_app$k (fun_app$l less_eq$b ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v4) ?v5) (fun_app$k (fun_app$l less_eq$b (fun_app$m ?v1 ?v4)) (fun_app$m ?v1 ?v5))) ))) (fun_app$k (fun_app$l less_eq$b ?v0) (fun_app$m ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_a_set_fun$) (?v2 A_set$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$h (fun_app$i less_eq$a ?v2) ?v3) (forall ((?v4 A_set$) (?v5 A_set$)) (=> (fun_app$h (fun_app$i less_eq$a ?v4) ?v5) (fun_app$h (fun_app$i less_eq$a (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$h (fun_app$i less_eq$a ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$k (fun_app$l less_eq$b ?v3) ?v4) (fun_app$k (fun_app$l ?v0 ?v3) ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$k (fun_app$l ?v0 ?v4) ?v3) (fun_app$k (fun_app$l ?v0 ?v3) ?v4)) )) (fun_app$k (fun_app$l ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) false) (=> (fun_app$k (fun_app$l less_eq$b ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (fun_app$k (fun_app$l less_eq$b ?v0) ?v1) (fun_app$k (fun_app$l less_eq$b ?v1) ?v0))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (= ?v0 ?v1) (and (fun_app$h (fun_app$i less_eq$a ?v0) ?v1) (fun_app$h (fun_app$i less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (min$ ?v0) ?v1) ?v2) (ite (fun_app$a (fun_app$c ?v0 ?v1) ?v2) ?v1 ?v2)) :pattern ((fun_app$d (fun_app$e (min$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (max$ ?v0) ?v1) ?v2) (ite (fun_app$a (fun_app$c ?v0 ?v1) ?v2) ?v2 ?v1)) :pattern ((fun_app$d (fun_app$e (max$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (fun_app$b (lsorted$ less_eq$) ?v0) (fun_app$b (lsorted$ less_eq$) (fun_app$ (ltake$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (fun_app$f finite_lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$b (fun_app$f finite_lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (fun_app$b (fun_app$f lprefix$ (fun_app$ (ltake$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$ (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (fun_app$h (fun_app$i less_eq$a (lset$ (fun_app$ (ltake$ ?v0) ?v1))) (lset$ ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 Enat$)) (=> (fun_app$b (lsorted$ ?v0) ?v1) (fun_app$b (lsorted$ ?v0) (fun_app$ (ltake$ ?v2) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (and (= (fun_app$ (ltake$ ?v0) ?v1) (fun_app$ (ltake$ ?v0) ?v2)) (fun_app$k (fun_app$l less_eq$b ?v3) ?v0)) (= (fun_app$ (ltake$ ?v3) ?v1) (fun_app$ (ltake$ ?v3) ?v2))) ))
(assert (= finite_lprefix$ lprefix$))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$f finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((fun_app$f finite_lprefix$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$f finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (fun_app$f finite_lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (= (fun_app$b (lstrict_prefix$ lNil$) lNil$) false))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$b (lstrict_prefix$ ?v3) ?v2) (fun_app$b ?v0 ?v3)) ) (fun_app$b ?v0 ?v2)) ) (fun_app$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ ?v0) ?v1) (and (fun_app$b (fun_app$f lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$b (lstrict_prefix$ ?v0) ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (fun_app$b (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$b (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))))
(check-sat)
(exit)

