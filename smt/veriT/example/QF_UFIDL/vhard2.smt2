(set-info :smt-lib-version 2.6)
(set-logic QF_UFIDL)
(set-info :source | MathSat group |)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun Succ (Int) Int)
(declare-fun Pred (Int) Int)
(declare-fun Sum (Int Int) Int)
(declare-fun x0 () Int)
(declare-fun y0 () Int)
(declare-fun x1 () Int)
(declare-fun y1 () Int)
(declare-fun x2 () Int)
(declare-fun y2 () Int)
(assert (let ((?v_0 (- x0 1)) (?v_1 (- y0 1)) (?v_2 (+ x0 1)) (?v_3 (+ y0 1)) (?v_4 (- x1 1)) (?v_5 (- y1 1)) (?v_6 (+ x1 1)) (?v_7 (+ y1 1))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Succ 0) 1) (= (Succ 1) 2)) (= (Succ 2) 0)) (= (Pred 0) 2)) (= (Pred 1) 0)) (= (Pred 2) 1)) (= (Sum 0 0) 0)) (= (Sum 0 1) 1)) (= (Sum 0 2) 2)) (= (Sum 1 0) 1)) (= (Sum 1 1) 2)) (= (Sum 1 2) 0)) (= (Sum 2 0) 2)) (= (Sum 2 1) 0)) (= (Sum 2 2) 1)) (or (or (= x0 0) (= x0 1)) (= x0 2))) (or (or (= y0 0) (= y0 1)) (= y0 2))) (and (and (and (and (= x1 (Sum (Sum (ite (> x0 0) ?v_0 (+ ?v_0 3)) (Succ y0)) (Sum (ite (> y0 0) ?v_1 (+ ?v_1 3)) (Succ x0)))) (= y1 (Sum (Sum (Pred x0) (ite (< ?v_2 3) ?v_2 (- ?v_2 3))) (Sum (Pred y0) (ite (< ?v_3 3) ?v_3 (- ?v_3 3)))))) (= x2 (Sum (Sum (ite (> x1 0) ?v_4 (+ ?v_4 3)) (Succ y1)) (Sum (ite (> y1 0) ?v_5 (+ ?v_5 3)) (Succ x1))))) (= y2 (Sum (Sum (Pred x1) (ite (< ?v_6 3) ?v_6 (- ?v_6 3))) (Sum (Pred y1) (ite (< ?v_7 3) ?v_7 (- ?v_7 3)))))) (or (not (= x1 y1)) (not (= x2 y2)))))))
(check-sat)
(exit)
