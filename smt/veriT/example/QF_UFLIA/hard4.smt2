(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source | MathSat group |)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun z () Int)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun Succ (Int) Int)
(declare-fun Pred (Int) Int)
(declare-fun Sum (Int Int) Int)
(assert (let ((?v_0 (- y 1)) (?v_1 (+ x 1)) (?v_4 (- x 1)) (?v_6 (+ y 1))) (let ((?v_2 (+ (ite (> y 0) ?v_0 (+ ?v_0 5)) (ite (< ?v_1 5) ?v_1 (- ?v_1 5)))) (?v_5 (+ (ite (> x 0) ?v_4 (+ ?v_4 5)) (Succ x)))) (let ((?v_3 (+ (Sum (Pred x) (Succ y)) (ite (< ?v_2 5) ?v_2 (- ?v_2 5))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Succ 0) 1) (= (Succ 1) 2)) (= (Succ 2) 3)) (= (Succ 3) 4)) (= (Succ 4) 0)) (= (Pred 0) 4)) (= (Pred 1) 0)) (= (Pred 2) 1)) (= (Pred 3) 2)) (= (Pred 4) 3)) (= (Sum 0 0) 0)) (= (Sum 0 1) 1)) (= (Sum 0 2) 2)) (= (Sum 0 3) 3)) (= (Sum 0 4) 4)) (= (Sum 1 0) 1)) (= (Sum 1 1) 2)) (= (Sum 1 2) 3)) (= (Sum 1 3) 4)) (= (Sum 1 4) 0)) (= (Sum 2 0) 2)) (= (Sum 2 1) 3)) (= (Sum 2 2) 4)) (= (Sum 2 3) 0)) (= (Sum 2 4) 1)) (= (Sum 3 0) 3)) (= (Sum 3 1) 4)) (= (Sum 3 2) 0)) (= (Sum 3 3) 1)) (= (Sum 3 4) 2)) (= (Sum 4 0) 4)) (= (Sum 4 1) 0)) (= (Sum 4 2) 1)) (= (Sum 4 3) 2)) (= (Sum 4 4) 3)) (or (or (or (or (= x 0) (= x 1)) (= x 2)) (= x 3)) (= x 4))) (or (or (or (or (= y 0) (= y 1)) (= y 2)) (= y 3)) (= y 4))) (distinct (ite (< ?v_3 5) ?v_3 (- ?v_3 5)) (Sum (ite (< ?v_5 5) ?v_5 (- ?v_5 5)) (Sum (Pred y) (ite (< ?v_6 5) ?v_6 (- ?v_6 5))))))))))
(check-sat)
(exit)
