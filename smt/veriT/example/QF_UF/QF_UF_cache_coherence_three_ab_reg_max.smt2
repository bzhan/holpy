(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: cache_coherence_three
query-maker: "Yices 2"
query-time: 0.002000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$2 0)
(declare-sort utt$3 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun Extract_1_0_0_32 (utt$32 ) Bool)
(declare-fun y$1 () Bool)
(declare-fun y$1006 () Bool)
(declare-fun y$1040 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$125 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$22 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$30 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$374 () Bool)
(declare-fun y$376 () Bool)
(declare-fun y$379 () Bool)
(declare-fun y$384 () Bool)
(declare-fun y$387 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$60 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$73 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$77 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$984 () Bool)
(declare-fun y$987 () Bool)
(declare-fun y$992 () Bool)
(declare-fun y$995 () Bool)
(declare-fun y$bus_arbiter.bus_ackA () Bool)
(declare-fun y$bus_arbiter.bus_ackB () Bool)
(declare-fun y$bus_arbiter.bus_ackC () Bool)
(declare-fun y$bus_arbiter.invalidate () Bool)
(declare-fun y$bus_arbiter.is_snoop () Bool)
(declare-fun y$bus_arbiter.shared_snoop () utt$3)
(declare-fun y$is_sharedA () Bool)
(declare-fun y$is_sharedB () Bool)
(declare-fun y$is_sharedC () Bool)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s2 () utt$2)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n1s1 () Bool)
(declare-fun y$n1s2 () utt$2)
(declare-fun y$n1s3 () utt$3)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n2s2 () utt$2)
(declare-fun y$n2s3 () utt$3)
(declare-fun y$n3s3 () utt$3)
(declare-fun y$n4s3 () utt$3)
(declare-fun y$n5s3 () utt$3)
(declare-fun y$pcacheA.bus_req () Bool)
(declare-fun y$pcacheA.hit () Bool)
(declare-fun y$pcacheA.inv_out () Bool)
(declare-fun y$pcacheA.miss () Bool)
(declare-fun y$pcacheA.next_state () utt$2)
(declare-fun y$pcacheA.proc.count () utt$3)
(declare-fun y$pcacheA.proc.valid () Bool)
(declare-fun y$pcacheA.read () Bool)
(declare-fun y$pcacheA.snoop_type () utt$3)
(declare-fun y$pcacheA.state () utt$2)
(declare-fun y$pcacheA.update () Bool)
(declare-fun y$pcacheA.write () Bool)
(declare-fun y$pcacheB.bus_req () Bool)
(declare-fun y$pcacheB.hit () Bool)
(declare-fun y$pcacheB.inv_out () Bool)
(declare-fun y$pcacheB.miss () Bool)
(declare-fun y$pcacheB.next_state () utt$2)
(declare-fun y$pcacheB.proc.count () utt$3)
(declare-fun y$pcacheB.proc.valid () Bool)
(declare-fun y$pcacheB.read () Bool)
(declare-fun y$pcacheB.snoop_type () utt$3)
(declare-fun y$pcacheB.state () utt$2)
(declare-fun y$pcacheB.update () Bool)
(declare-fun y$pcacheB.write () Bool)
(declare-fun y$pcacheC.bus_req () Bool)
(declare-fun y$pcacheC.hit () Bool)
(declare-fun y$pcacheC.inv_out () Bool)
(declare-fun y$pcacheC.miss () Bool)
(declare-fun y$pcacheC.next_state () utt$2)
(declare-fun y$pcacheC.proc.count () utt$3)
(declare-fun y$pcacheC.proc.valid () Bool)
(declare-fun y$pcacheC.read () Bool)
(declare-fun y$pcacheC.snoop_type () utt$3)
(declare-fun y$pcacheC.state () utt$2)
(declare-fun y$pcacheC.update () Bool)
(declare-fun y$pcacheC.write () Bool)
(declare-fun y$prop () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$s$12 () Bool)
(declare-fun y$s$12_op () Bool)
(declare-fun y$s$216_op () Bool)
(declare-fun y$s$436_op () Bool)
(declare-fun y$s$641_op () Bool)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1_op () utt$32)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2_op () utt$32)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3_op () utt$32)
(declare-fun y$w$4 () utt$32)
(declare-fun y$w$4_op () utt$32)
(declare-fun y$w$5 () utt$32)
(declare-fun y$w$5_op () utt$32)
(declare-fun y$w$6 () utt$32)
(declare-fun y$w$6_op () utt$32)
(assert (distinct y$n0s2 y$n2s2 y$n1s2))
(assert (distinct y$n0s3 y$n5s3 y$n2s3 y$n1s3 y$n3s3 y$n4s3))
(assert (not (= y$n1s32 y$n0s32)))
(assert (= y$bus_arbiter.bus_ackA (not y$1)))
(assert (= y$bus_arbiter.bus_ackB (not y$3)))
(assert (= y$bus_arbiter.bus_ackC (not y$5)))
(assert (= y$bus_arbiter.invalidate (not y$7)))
(assert (= y$bus_arbiter.is_snoop (not y$9)))
(assert (= y$12 (= y$n0s3 y$bus_arbiter.shared_snoop)))
(assert (= y$pcacheA.bus_req (not y$14)))
(assert (= y$pcacheA.hit (not y$16)))
(assert (= y$pcacheA.inv_out (not y$18)))
(assert (= y$22 (= y$n0s2 y$pcacheA.next_state)))
(assert (= y$25 (= y$n5s3 y$pcacheA.proc.count)))
(assert (= y$30 (= y$n2s3 y$pcacheA.snoop_type)))
(assert (= y$33 (= y$n2s2 y$pcacheA.state)))
(assert (= y$pcacheA.update (not y$35)))
(assert (= y$pcacheA.write (not y$37)))
(assert (= y$pcacheB.bus_req (not y$39)))
(assert (= y$pcacheB.hit (not y$41)))
(assert (= y$pcacheB.inv_out (not y$43)))
(assert (= y$46 (= y$n0s2 y$pcacheB.next_state)))
(assert (= y$48 (= y$n5s3 y$pcacheB.proc.count)))
(assert (= y$52 (= y$n2s3 y$pcacheB.snoop_type)))
(assert (= y$54 (= y$n2s2 y$pcacheB.state)))
(assert (= y$pcacheB.update (not y$56)))
(assert (= y$pcacheB.write (not y$58)))
(assert (= y$pcacheC.bus_req (not y$60)))
(assert (= y$pcacheC.hit (not y$62)))
(assert (= y$pcacheC.inv_out (not y$64)))
(assert (= y$67 (= y$n0s2 y$pcacheC.next_state)))
(assert (= y$69 (= y$n5s3 y$pcacheC.proc.count)))
(assert (= y$73 (= y$n2s3 y$pcacheC.snoop_type)))
(assert (= y$75 (= y$n2s2 y$pcacheC.state)))
(assert (= y$pcacheC.update (not y$77)))
(assert (= y$pcacheC.write (not y$79)))
(assert (= y$prop (not y$1006)))
(assert (= y$125 (= y$n1s2 y$pcacheA.state)))
(assert (= y$w$1_op (ite y$125 y$n1s32 y$n0s32)))
(assert (= y$125 y$s$216_op))
(assert (= y$374 (Extract_1_0_0_32 y$w$1_op)))
(assert (= y$s$216_op y$374))
(assert (= y$w$2_op (Concat_32_1_31 y$374 y$n0s31)))
(assert (= y$984 (not (= y$n1s32 y$w$2_op))))
(assert (= y$376 (= y$n1s2 y$pcacheB.state)))
(assert (= y$w$3_op (ite y$376 y$n1s32 y$n0s32)))
(assert (= y$376 y$s$436_op))
(assert (= y$379 (Extract_1_0_0_32 y$w$3_op)))
(assert (= y$s$436_op y$379))
(assert (= y$w$4_op (Concat_32_1_31 y$379 y$n0s31)))
(assert (= y$987 (= y$n1s32 y$w$4_op)))
(assert (= y$s$12_op (or y$984 y$987)))
(assert (= y$384 (= y$n1s2 y$pcacheC.state)))
(assert (= y$w$5_op (ite y$384 y$n1s32 y$n0s32)))
(assert (= y$384 y$s$641_op))
(assert (= y$387 (Extract_1_0_0_32 y$w$5_op)))
(assert (= y$s$641_op y$387))
(assert (= y$w$6_op (Concat_32_1_31 y$387 y$n0s31)))
(assert (= y$992 (= y$n1s32 y$w$6_op)))
(assert (= y$prop0_op (or y$s$12_op y$992)))
(assert (= y$995 (= y$prop y$prop0_op)))
(assert (= y$1040 (and y$1 y$3 y$5 y$7 y$9 y$12 y$14 y$16 y$18 y$pcacheA.miss y$22 y$25 y$pcacheA.proc.valid y$pcacheA.read y$30 y$33 y$35 y$37 y$39 y$41 y$43 y$pcacheB.miss y$46 y$48 y$pcacheB.proc.valid y$pcacheB.read y$52 y$54 y$56 y$58 y$60 y$62 y$64 y$pcacheC.miss y$67 y$69 y$pcacheC.proc.valid y$pcacheC.read y$73 y$75 y$77 y$79 y$1006 y$995)))
(assert y$1040)
(check-sat)
(exit)
