(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort Rule_set$ 0)
(declare-sort Rule_fset$ 0)
(declare-sort Rule_tree$ 0)
(declare-sort State_set$ 0)
(declare-sort State_fset$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_rule_fun$ 0)
(declare-sort Rule_bool_fun$ 0)
(declare-sort Rule_tree_fset$ 0)
(declare-sort State_bool_fun$ 0)
(declare-sort State_state_fun$ 0)
(declare-sort Nat_rule_set_fun$ 0)
(declare-sort Rule_set_nat_fun$ 0)
(declare-sort Nat_state_set_fun$ 0)
(declare-sort Rule_set_bool_fun$ 0)
(declare-sort State_set_nat_fun$ 0)
(declare-sort Rule_fset_bool_fun$ 0)
(declare-sort Rule_tree_bool_fun$ 0)
(declare-sort State_set_bool_fun$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_set$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Rule_stream_bool_fun$ 0)
(declare-sort Rule_stream_rule_fun$ 0)
(declare-sort State_rule_prod_tree$ 0)
(declare-sort Nat_rule_bool_fun_fun$ 0)
(declare-sort Rule_bool_fun_nat_fun$ 0)
(declare-sort Rule_nat_bool_fun_fun$ 0)
(declare-sort State_stream_bool_fun$ 0)
(declare-sort Nat_state_bool_fun_fun$ 0)
(declare-sort Rule_bool_fun_bool_fun$ 0)
(declare-sort Rule_rule_bool_fun_fun$ 0)
(declare-sort Rule_set_state_set_fun$ 0)
(declare-sort State_bool_fun_nat_fun$ 0)
(declare-sort State_nat_bool_fun_fun$ 0)
(declare-sort State_set_rule_set_fun$ 0)
(declare-sort Rule_state_bool_fun_fun$ 0)
(declare-sort State_bool_fun_bool_fun$ 0)
(declare-sort State_rule_bool_fun_fun$ 0)
(declare-sort State_set_state_set_fun$ 0)
(declare-sort State_state_bool_fun_fun$ 0)
(declare-sort State_rule_prod_tree_fset$ 0)
(declare-sort Rule_bool_fun_rule_set_fun$ 0)
(declare-sort Rule_bool_fun_state_set_fun$ 0)
(declare-sort Rule_rule_fset_bool_fun_fun$ 0)
(declare-sort Rule_stream_rule_stream_fun$ 0)
(declare-sort Rule_rule_stream_bool_fun_fun$ 0)
(declare-sort Rule_rule_stream_rule_fun_fun$ 0)
(declare-sort State_rule_prod_tree_bool_fun$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort State_state_rule_prod_tree_fun$ 0)
(declare-sort Rule_bool_fun_rule_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_bool_fun$ 0)
(declare-sort State_state_stream_bool_fun_fun$ 0)
(declare-sort Rule_bool_fun_state_bool_fun_fun$ 0)
(declare-sort State_rule_bool_fun_fun_bool_fun$ 0)
(declare-sort Rule_stream_rule_set_bool_fun_fun$ 0)
(declare-sort State_bool_fun_state_bool_fun_fun$ 0)
(declare-sort Rule_stream_state_set_bool_fun_fun$ 0)
(declare-sort Rule_tree_rule_stream_bool_fun_fun$ 0)
(declare-sort State_stream_rule_set_bool_fun_fun$ 0)
(declare-sort State_stream_state_set_bool_fun_fun$ 0)
(declare-sort Rule_rule_rule_fset_bool_fun_fun_fun$ 0)
(declare-sort Rule_rule_stream_rule_stream_fun_fun$ 0)
(declare-sort Rule_stream_rule_stream_bool_fun_fun$ 0)
(declare-sort Rule_stream_state_rule_prod_tree_fun$ 0)
(declare-sort Rule_stream_rule_nat_bool_fun_fun_fun$ 0)
(declare-sort State_rule_rule_fset_bool_fun_fun_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort Rule_stream_state_nat_bool_fun_fun_fun$ 0)
(declare-sort State_stream_rule_nat_bool_fun_fun_fun$ 0)
(declare-sort State_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort State_stream_state_nat_bool_fun_fun_fun$ 0)
(declare-sort Rule_bool_fun_state_rule_bool_fun_fun_fun$ 0)
(declare-sort Rule_rule_stream_state_rule_prod_tree_fun_fun$ 0)
(declare-sort State_rule_prod_tree_fset_state_rule_prod_fun$ 0)
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun$ 0)
(declare-sort Rule_stream_state_state_rule_prod_tree_fun_fun$ 0)
(declare-sort State_state_fun_state_state_rule_prod_tree_fun_fun$ 0)
(declare-sort State_rule_prod_tree_fset_state_rule_prod_tree_fset_fun$ 0)
(declare-sort State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_fun_fun$ 0)
(declare-sort State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ 0)
(declare-sort State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_tree_fset_fun_fun$ 0)
(declare-sort Rule_stream$ 0)
(declare-sort State_stream$ 0)
(declare-fun shd$ (Rule_stream$) Rule$)
(declare-fun stl$ (Rule_stream$) Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$) Rule_stream$)
(declare-fun shd$a (State_stream$) State$)
(declare-fun stl$a (State_stream$) State_stream$)
(declare-fun sCons$a (State$ State_stream$) State_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$) State$)
(declare-fun snd$ (State_rule_prod$) Rule$)
(declare-fun pair$ (State$ Rule$) State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$b (State_rule_prod_stream$) State_rule_prod$)
(declare-fun stl$b (State_rule_prod_stream$) State_rule_prod_stream$)
(declare-fun sCons$b (State_rule_prod$ State_rule_prod_stream$) State_rule_prod_stream$)
(declare-fun n$ () Nat$)
(declare-fun s$ () State$)
(declare-fun rs$ () Rule_stream$)
(declare-fun s$a () State_set$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun bot$ () Rule_set$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun eps$ (Rule_tree_bool_fun$) Rule_tree$)
(declare-fun uua$ (Rule_stream$) State_nat_bool_fun_fun$)
(declare-fun uub$ (State_rule_rule_fset_bool_fun_fun_fun$) State_stream_rule_nat_bool_fun_fun_fun$)
(declare-fun uuc$ (State_state_state_fset_bool_fun_fun_fun$) State_stream_state_nat_bool_fun_fun_fun$)
(declare-fun uud$ (Rule_rule_rule_fset_bool_fun_fun_fun$) Rule_stream_rule_nat_bool_fun_fun_fun$)
(declare-fun uue$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_stream_state_nat_bool_fun_fun_fun$)
(declare-fun uuf$ (State$) Rule_bool_fun$)
(declare-fun uug$ (State_rule_rule_fset_bool_fun_fun_fun$) Rule_state_bool_fun_fun$)
(declare-fun uuh$ (State_state_state_fset_bool_fun_fun_fun$) State_state_bool_fun_fun$)
(declare-fun uui$ (Rule_rule_rule_fset_bool_fun_fun_fun$) Rule_rule_bool_fun_fun$)
(declare-fun uuj$ (Rule_state_state_fset_bool_fun_fun_fun$) State_rule_bool_fun_fun$)
(declare-fun uuk$ (State_set$) State_bool_fun$)
(declare-fun uul$ (Rule_set$) Rule_bool_fun$)
(declare-fun uum$ () Rule_bool_fun$)
(declare-fun uun$ (State_set$) State_bool_fun_state_bool_fun_fun$)
(declare-fun uuo$ (Rule_set$) Rule_bool_fun_rule_bool_fun_fun$)
(declare-fun uup$ (State_rule_prod_tree_state_rule_prod_tree_fun$) State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$)
(declare-fun uuq$ (State_state_rule_prod_tree_fun$) State_state_fun_state_state_rule_prod_tree_fun_fun$)
(declare-fun uur$ (State_rule_prod_tree_state_rule_prod_tree_fun$ Rule_rule_stream_state_rule_prod_tree_fun_fun$) Rule_rule_stream_state_rule_prod_tree_fun_fun$)
(declare-fun uus$ () Rule_rule_stream_rule_stream_fun_fun$)
(declare-fun uut$ () Rule_rule_stream_rule_fun_fun$)
(declare-fun uuu$ (State$) Rule_rule_stream_state_rule_prod_tree_fun_fun$)
(declare-fun uuv$ (State_rule_prod_set$) State_rule_bool_fun_fun$)
(declare-fun uuw$ (Rule_state_state_fset_bool_fun_fun_fun$ State$) Rule_rule_stream_state_rule_prod_tree_fun_fun$)
(declare-fun uux$ () State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_tree_fset_fun_fun$)
(declare-fun uuy$ () State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_fun_fun$)
(declare-fun uuz$ (Rule_tree$) Rule_tree_bool_fun$)
(declare-fun uva$ (State_rule_prod_tree$) State_rule_prod_tree_bool_fun$)
(declare-fun bot$a () Nat$)
(declare-fun bot$b () State_set$)
(declare-fun bot$c () State_fset$)
(declare-fun bot$d () Rule_bool_fun$)
(declare-fun bot$e () State_rule_prod_tree_fset$)
(declare-fun bot$f (State$) Bool)
(declare-fun bot$g (State$) Rule_bool_fun$)
(declare-fun bot$h () State_rule_prod_set$)
(declare-fun cont$ (State_rule_prod_tree$) State_rule_prod_tree_fset$)
(declare-fun eps$a (State_rule_prod_tree_bool_fun$) State_rule_prod_tree$)
(declare-fun eps$b (State_bool_fun$) State$)
(declare-fun eps$c (Rule_bool_fun$) Rule$)
(declare-fun fair$ (Rule_stream$ Rule_stream$) Bool)
(declare-fun node$ (State_rule_prod$ State_rule_prod_tree_fset$) State_rule_prod_tree$)
(declare-fun root$ (State_rule_prod_tree$) State_rule_prod$)
(declare-fun sset$ (State_stream$) State_set$)
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) Rule_stream$)
(declare-fun cont$a (Rule_tree$) Rule_tree_fset$)
(declare-fun fair$a (State_stream$ State_stream$) Bool)
(declare-fun fenum$ (Rule_stream$) Rule_stream$)
(declare-fun ipath$ (Rule_tree$ Rule_stream$) Bool)
(declare-fun konig$ (Rule_tree$) Rule_stream$)
(declare-fun least$ (Nat_bool_fun$) Nat$)
(declare-fun root$a (Rule_tree$) Rule$)
(declare-fun rules$ () Rule_stream$)
(declare-fun sdrop$ (Nat$ Rule_stream$) Rule_stream$)
(declare-fun sset$a (Rule_stream$) Rule_set$)
(declare-fun trim$a (State_rule_rule_fset_bool_fun_fun_fun$ State_stream$ Rule$) State_stream$)
(declare-fun trim$b (State_state_state_fset_bool_fun_fun_fun$ State_stream$ State$) State_stream$)
(declare-fun trim$c (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule_stream$ Rule$) Rule_stream$)
(declare-fun fimage$ (State_state_rule_prod_tree_fun$ State_fset$) State_rule_prod_tree_fset$)
(declare-fun ipath$a (State_rule_prod_tree$ State_rule_prod_stream$) Bool)
(declare-fun konig$a (State_rule_prod_tree$) State_rule_prod_stream$)
(declare-fun least$a (State_set_bool_fun$) State_set$)
(declare-fun least$b (Rule_set_bool_fun$) Rule_set$)
(declare-fun least$c (State_bool_fun_bool_fun$) State_bool_fun$)
(declare-fun least$d (State_rule_bool_fun_fun_bool_fun$) State_rule_bool_fun_fun$)
(declare-fun least$e (Rule_bool_fun_bool_fun$) Rule_bool_fun$)
(declare-fun member$ (State$) State_set_bool_fun$)
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_stream_state_state_rule_prod_tree_fun_fun$)
(declare-fun sdrop$a (Nat$ State_stream$) State_stream$)
(declare-fun collect$ (State_bool_fun$) State_set$)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_state_bool_fun_fun$)
(declare-fun fimage$a (State_state_fun$ State_fset$) State_fset$)
(declare-fun fimage$b (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree_fset$) State_rule_prod_tree_fset$)
(declare-fun fmember$ (State_rule_prod_tree$ State_rule_prod_tree_fset$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun member$a (Rule$) Rule_set_bool_fun$)
(declare-fun member$b (State_rule_prod$ State_rule_prod_set$) Bool)
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) Nat$)
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) State_fset$)
(declare-fun smember$ (State$ State_stream$) Bool)
(declare-fun tfinite$ (State_rule_prod_tree$) Bool)
(declare-fun collect$a (Rule_bool_fun$) Rule_set$)
(declare-fun enabled$a (State_state_state_fset_bool_fun_fun_fun$) State_state_bool_fun_fun$)
(declare-fun enabled$b (State_rule_rule_fset_bool_fun_fun_fun$) State_rule_bool_fun_fun$)
(declare-fun enabled$c (Rule_rule_rule_fset_bool_fun_fun_fun$) Rule_rule_bool_fun_fun$)
(declare-fun fmember$a (Rule_tree$ Rule_tree_fset$) Bool)
(declare-fun fmember$b (State$ State_fset$) Bool)
(declare-fun fmember$c (Rule$ Rule_fset$) Bool)
(declare-fun fun_app$a (State_bool_fun$ State$) Bool)
(declare-fun fun_app$b (Rule_state_bool_fun_fun$ Rule$) State_bool_fun$)
(declare-fun fun_app$c (State_rule_prod_tree_bool_fun$ State_rule_prod_tree$) Bool)
(declare-fun fun_app$d (Rule_tree_bool_fun$ Rule_tree$) Bool)
(declare-fun fun_app$e (State_set_bool_fun$ State_set$) Bool)
(declare-fun fun_app$f (Rule_bool_fun$ Rule$) Bool)
(declare-fun fun_app$g (Rule_set_bool_fun$ Rule_set$) Bool)
(declare-fun fun_app$h (State_nat_bool_fun_fun$ State$) Nat_bool_fun$)
(declare-fun fun_app$i (Rule_stream_state_rule_prod_tree_fun$ Rule_stream$) State_rule_prod_tree$)
(declare-fun fun_app$j (Rule_rule_stream_state_rule_prod_tree_fun_fun$ Rule$) Rule_stream_state_rule_prod_tree_fun$)
(declare-fun fun_app$k (Rule_stream_state_state_rule_prod_tree_fun_fun$ Rule_stream$) State_state_rule_prod_tree_fun$)
(declare-fun fun_app$l (State_bool_fun_state_bool_fun_fun$ State_bool_fun$) State_bool_fun$)
(declare-fun fun_app$m (Rule_bool_fun_rule_bool_fun_fun$ Rule_bool_fun$) Rule_bool_fun$)
(declare-fun fun_app$n (State_rule_bool_fun_fun$ State$) Rule_bool_fun$)
(declare-fun fun_app$o (State_state_rule_prod_tree_fun$ State$) State_rule_prod_tree$)
(declare-fun fun_app$p (State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ State_state_rule_prod_tree_fun$) State_state_rule_prod_tree_fun$)
(declare-fun fun_app$q (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree$) State_rule_prod_tree$)
(declare-fun fun_app$r (State_state_fun_state_state_rule_prod_tree_fun_fun$ State_state_fun$) State_state_rule_prod_tree_fun$)
(declare-fun fun_app$s (State_state_fun$ State$) State$)
(declare-fun fun_app$t (State_state_bool_fun_fun$ State$) State_bool_fun$)
(declare-fun fun_app$u (Rule_rule_bool_fun_fun$ Rule$) Rule_bool_fun$)
(declare-fun fun_app$v (State_stream_state_nat_bool_fun_fun_fun$ State_stream$) State_nat_bool_fun_fun$)
(declare-fun fun_app$w (Rule_nat_bool_fun_fun$ Rule$) Nat_bool_fun$)
(declare-fun fun_app$x (State_stream_rule_nat_bool_fun_fun_fun$ State_stream$) Rule_nat_bool_fun_fun$)
(declare-fun fun_app$y (Rule_stream_state_nat_bool_fun_fun_fun$ Rule_stream$) State_nat_bool_fun_fun$)
(declare-fun fun_app$z (Rule_stream_rule_nat_bool_fun_fun_fun$ Rule_stream$) Rule_nat_bool_fun_fun$)
(declare-fun greatest$ (Nat_bool_fun$) Nat$)
(declare-fun is_empty$ (Rule_set$) Bool)
(declare-fun less_eq$a (State_set$) State_set_bool_fun$)
(declare-fun less_eq$b (Rule_set$) Rule_set_bool_fun$)
(declare-fun less_eq$c (State_bool_fun$) State_bool_fun_bool_fun$)
(declare-fun less_eq$d (State_rule_bool_fun_fun$) State_rule_bool_fun_fun_bool_fun$)
(declare-fun less_eq$e (Rule_bool_fun$) Rule_bool_fun_bool_fun$)
(declare-fun less_eq$f (Bool Bool) Bool)
(declare-fun less_eq$g (State_fset$ State_fset$) Bool)
(declare-fun less_eq$h (State_rule_prod_tree_fset$ State_rule_prod_tree_fset$) Bool)
(declare-fun less_eq$i (State_rule_prod_set$ State_rule_prod_set$) Bool)
(declare-fun minWait$a (State_rule_rule_fset_bool_fun_fun_fun$ State_stream$ Rule$) Nat$)
(declare-fun minWait$b (State_state_state_fset_bool_fun_fun_fun$ State_stream$ State$) Nat$)
(declare-fun minWait$c (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule_stream$ Rule$) Nat$)
(declare-fun pickEff$a (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule$ Rule$) Rule_fset$)
(declare-fun smember$a (Rule$ Rule_stream$) Bool)
(declare-fun tfinite$a (Rule_tree$) Bool)
(declare-fun case_tree$ (State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_tree_fset_fun_fun$ State_rule_prod_tree$) State_rule_prod_tree_fset$)
(declare-fun countable$ (Rule_set$) Bool)
(declare-fun fun_app$aa (State_rule_prod_tree_fset_state_rule_prod_fun$ State_rule_prod_tree_fset$) State_rule_prod$)
(declare-fun fun_app$ab (State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_fun_fun$ State_rule_prod$) State_rule_prod_tree_fset_state_rule_prod_fun$)
(declare-fun fun_app$ac (Rule_stream_rule_fun$ Rule_stream$) Rule$)
(declare-fun fun_app$ad (Rule_rule_stream_rule_fun_fun$ Rule$) Rule_stream_rule_fun$)
(declare-fun fun_app$ae (State_rule_prod_tree_fset_state_rule_prod_tree_fset_fun$ State_rule_prod_tree_fset$) State_rule_prod_tree_fset$)
(declare-fun fun_app$af (State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_tree_fset_fun_fun$ State_rule_prod$) State_rule_prod_tree_fset_state_rule_prod_tree_fset_fun$)
(declare-fun fun_app$ag (Rule_stream_rule_stream_fun$ Rule_stream$) Rule_stream$)
(declare-fun fun_app$ah (Rule_rule_stream_rule_stream_fun_fun$ Rule$) Rule_stream_rule_stream_fun$)
(declare-fun fun_app$ai (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun fun_app$aj (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$ak (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(declare-fun fun_app$al (Rule_fset_bool_fun$ Rule_fset$) Bool)
(declare-fun fun_app$am (Rule_rule_fset_bool_fun_fun$ Rule$) Rule_fset_bool_fun$)
(declare-fun fun_app$an (Rule_rule_rule_fset_bool_fun_fun_fun$ Rule$) Rule_rule_fset_bool_fun_fun$)
(declare-fun fun_app$ao (State_bool_fun_bool_fun$ State_bool_fun$) Bool)
(declare-fun fun_app$ap (State_rule_bool_fun_fun_bool_fun$ State_rule_bool_fun_fun$) Bool)
(declare-fun fun_app$aq (Rule_bool_fun_bool_fun$ Rule_bool_fun$) Bool)
(declare-fun fun_app$ar (State_stream_rule_set_bool_fun_fun$ State_stream$) Rule_set_bool_fun$)
(declare-fun fun_app$as (State_stream_state_set_bool_fun_fun$ State_stream$) State_set_bool_fun$)
(declare-fun fun_app$at (Rule_stream_rule_set_bool_fun_fun$ Rule_stream$) Rule_set_bool_fun$)
(declare-fun fun_app$au (Rule_stream_state_set_bool_fun_fun$ Rule_stream$) State_set_bool_fun$)
(declare-fun fun_app$av (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$aw (State_set_nat_fun$ State_set$) Nat$)
(declare-fun fun_app$ax (Rule_set_nat_fun$ Rule_set$) Nat$)
(declare-fun fun_app$ay (Nat_state_set_fun$ Nat$) State_set$)
(declare-fun fun_app$az (Nat_rule_set_fun$ Nat$) Rule_set$)
(declare-fun fun_app$ba (State_bool_fun_nat_fun$ State_bool_fun$) Nat$)
(declare-fun fun_app$bb (Rule_bool_fun_nat_fun$ Rule_bool_fun$) Nat$)
(declare-fun fun_app$bc (State_set_state_set_fun$ State_set$) State_set$)
(declare-fun fun_app$bd (Rule_set_state_set_fun$ Rule_set$) State_set$)
(declare-fun fun_app$be (State_set_rule_set_fun$ State_set$) Rule_set$)
(declare-fun fun_app$bf (Nat_state_bool_fun_fun$ Nat$) State_bool_fun$)
(declare-fun fun_app$bg (Nat_rule_bool_fun_fun$ Nat$) Rule_bool_fun$)
(declare-fun fun_app$bh (Rule_bool_fun_state_set_fun$ Rule_bool_fun$) State_set$)
(declare-fun fun_app$bi (Rule_bool_fun_rule_set_fun$ Rule_bool_fun$) Rule_set$)
(declare-fun fun_app$bj (Rule_bool_fun_state_bool_fun_fun$ Rule_bool_fun$) State_bool_fun$)
(declare-fun fun_app$bk (Rule_bool_fun_state_rule_bool_fun_fun_fun$ Rule_bool_fun$) State_rule_bool_fun_fun$)
(declare-fun fun_app$bl (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$bm (State_state_state_fset_bool_fun_fun_fun$ State$) State_state_fset_bool_fun_fun$)
(declare-fun fun_app$bn (State_rule_rule_fset_bool_fun_fun_fun$ State$) Rule_rule_fset_bool_fun_fun$)
(declare-fun fun_app$bo (Rule_stream_bool_fun$ Rule_stream$) Bool)
(declare-fun fun_app$bp (Rule_stream_rule_stream_bool_fun_fun$ Rule_stream$) Rule_stream_bool_fun$)
(declare-fun fun_app$bq (State_stream_bool_fun$ State_stream$) Bool)
(declare-fun fun_app$br (State_state_stream_bool_fun_fun$ State$) State_stream_bool_fun$)
(declare-fun fun_app$bs (Rule_rule_stream_bool_fun_fun$ Rule$) Rule_stream_bool_fun$)
(declare-fun fun_app$bt (Nat_rule_fun$ Nat$) Rule$)
(declare-fun fun_app$bu (Rule_tree_rule_stream_bool_fun_fun$ Rule_tree$) Rule_stream_bool_fun$)
(declare-fun fun_app$bv (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$) Bool)
(declare-fun fun_app$bw (State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_tree$) State_rule_prod_stream_bool_fun$)
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$) Bool)
(declare-fun to_nat_on$ (State_set$ State$) Nat$)
(declare-fun case_tree$a (State_rule_prod_state_rule_prod_tree_fset_state_rule_prod_fun_fun$ State_rule_prod_tree$) State_rule_prod$)
(declare-fun countable$a (State_set$) Bool)
(declare-fun ruleSystem$ (State_rule_rule_fset_bool_fun_fun_fun$) State_stream_rule_set_bool_fun_fun$)
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State_rule_prod_stream$) Bool)
(declare-fun to_nat_on$a (Rule_set$ Rule$) Nat$)
(declare-fun case_stream$ (Rule_rule_stream_state_rule_prod_tree_fun_fun$ Rule_stream$) State_rule_prod_tree$)
(declare-fun ruleSystem$a (State_state_state_fset_bool_fun_fun_fun$) State_stream_state_set_bool_fun_fun$)
(declare-fun ruleSystem$b (Rule_rule_rule_fset_bool_fun_fun_fun$) Rule_stream_rule_set_bool_fun_fun$)
(declare-fun ruleSystem$c (Rule_state_state_fset_bool_fun_fun_fun$) Rule_stream_state_set_bool_fun_fun$)
(declare-fun sdrop_while$ (Rule_bool_fun$ Rule_stream$) Rule_stream$)
(declare-fun case_stream$a (Rule_rule_stream_rule_stream_fun_fun$ Rule_stream$) Rule_stream$)
(declare-fun case_stream$b (Rule_rule_stream_rule_fun_fun$ Rule_stream$) Rule$)
(declare-fun sdrop_while$a (State_bool_fun$ State_stream$) State_stream$)
(declare-fun from_nat_into$ (Rule_set$) Nat_rule_fun$)
(declare-fun from_nat_into$a (State_set$ Nat$) State$)
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a (fun_app$b (enabled$ eff$) (shd$ (sdrop$ ?v0 rs$))) s$)) :pattern ((fun_app$ uu$ ?v0)))))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_tree$)) (! (= (fun_app$c (uva$ ?v0) ?v1) (and (fmember$ ?v1 (cont$ ?v0)) (not (tfinite$ ?v1)))) :pattern ((fun_app$c (uva$ ?v0) ?v1)))))
(assert (forall ((?v0 Rule_tree$) (?v1 Rule_tree$)) (! (= (fun_app$d (uuz$ ?v0) ?v1) (and (fmember$a ?v1 (cont$a ?v0)) (not (tfinite$a ?v1)))) :pattern ((fun_app$d (uuz$ ?v0) ?v1)))))
(assert (forall ((?v0 State_set$) (?v1 State$)) (! (= (fun_app$a (uuk$ ?v0) ?v1) (fun_app$e (member$ ?v1) ?v0)) :pattern ((fun_app$a (uuk$ ?v0) ?v1)))))
(assert (forall ((?v0 Rule_set$) (?v1 Rule$)) (! (= (fun_app$f (uul$ ?v0) ?v1) (fun_app$g (member$a ?v1) ?v0)) :pattern ((fun_app$f (uul$ ?v0) ?v1)))))
(assert (forall ((?v0 State$) (?v1 Rule$)) (! (= (fun_app$f (uuf$ ?v0) ?v1) (not (fun_app$a (fun_app$b (enabled$ eff$) ?v1) ?v0))) :pattern ((fun_app$f (uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 Rule_stream$) (?v1 State$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$h (uua$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$b (enabled$ eff$) (shd$ (sdrop$ ?v2 ?v0))) ?v1)) :pattern ((fun_app$ (fun_app$h (uua$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State$) (?v1 Rule$) (?v2 Rule_stream$)) (! (= (fun_app$i (fun_app$j (uuu$ ?v0) ?v1) ?v2) (node$ (pair$ ?v0 ?v1) (fimage$ (fun_app$k (mkTree$ eff$) ?v2) (pickEff$ eff$ ?v1 ?v0)))) :pattern ((fun_app$i (fun_app$j (uuu$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_set$) (?v1 State_bool_fun$) (?v2 State$)) (! (= (fun_app$a (fun_app$l (uun$ ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v2) ?v0) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$l (uun$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_bool_fun$) (?v2 Rule$)) (! (= (fun_app$f (fun_app$m (uuo$ ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v2) ?v0) (fun_app$f ?v1 ?v2))) :pattern ((fun_app$f (fun_app$m (uuo$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_rule_prod_set$) (?v1 State$) (?v2 Rule$)) (! (= (fun_app$f (fun_app$n (uuv$ ?v0) ?v1) ?v2) (member$b (pair$ ?v1 ?v2) ?v0)) :pattern ((fun_app$f (fun_app$n (uuv$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$) (?v1 State_state_rule_prod_tree_fun$) (?v2 State$)) (! (= (fun_app$o (fun_app$p (uup$ ?v0) ?v1) ?v2) (fun_app$q ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$o (fun_app$p (uup$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_state_rule_prod_tree_fun$) (?v1 State_state_fun$) (?v2 State$)) (! (= (fun_app$o (fun_app$r (uuq$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$o (fun_app$r (uuq$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State$) (?v2 State$)) (! (= (fun_app$a (fun_app$t (uuh$ ?v0) ?v1) ?v2) (not (fun_app$a (fun_app$t (enabled$a ?v0) ?v2) ?v1))) :pattern ((fun_app$a (fun_app$t (uuh$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State$)) (! (= (fun_app$a (fun_app$b (uug$ ?v0) ?v1) ?v2) (not (fun_app$f (fun_app$n (enabled$b ?v0) ?v2) ?v1))) :pattern ((fun_app$a (fun_app$b (uug$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 State$) (?v2 Rule$)) (! (= (fun_app$f (fun_app$n (uuj$ ?v0) ?v1) ?v2) (not (fun_app$a (fun_app$b (enabled$ ?v0) ?v2) ?v1))) :pattern ((fun_app$f (fun_app$n (uuj$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 Rule$)) (! (= (fun_app$f (fun_app$u (uui$ ?v0) ?v1) ?v2) (not (fun_app$f (fun_app$u (enabled$c ?v0) ?v2) ?v1))) :pattern ((fun_app$f (fun_app$u (uui$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$h (fun_app$v (uuc$ ?v0) ?v1) ?v2) ?v3) (fun_app$a (fun_app$t (enabled$a ?v0) (shd$a (sdrop$a ?v3 ?v1))) ?v2)) :pattern ((fun_app$ (fun_app$h (fun_app$v (uuc$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$w (fun_app$x (uub$ ?v0) ?v1) ?v2) ?v3) (fun_app$f (fun_app$n (enabled$b ?v0) (shd$a (sdrop$a ?v3 ?v1))) ?v2)) :pattern ((fun_app$ (fun_app$w (fun_app$x (uub$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$h (fun_app$y (uue$ ?v0) ?v1) ?v2) ?v3) (fun_app$a (fun_app$b (enabled$ ?v0) (shd$ (sdrop$ ?v3 ?v1))) ?v2)) :pattern ((fun_app$ (fun_app$h (fun_app$y (uue$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$w (fun_app$z (uud$ ?v0) ?v1) ?v2) ?v3) (fun_app$f (fun_app$u (enabled$c ?v0) (shd$ (sdrop$ ?v3 ?v1))) ?v2)) :pattern ((fun_app$ (fun_app$w (fun_app$z (uud$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 State$) (?v2 Rule$) (?v3 Rule_stream$)) (! (= (fun_app$i (fun_app$j (uuw$ ?v0 ?v1) ?v2) ?v3) (node$ (pair$ ?v1 ?v2) (fimage$ (fun_app$k (mkTree$ ?v0) ?v3) (pickEff$ ?v0 ?v2 ?v1)))) :pattern ((fun_app$i (fun_app$j (uuw$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$) (?v1 Rule_rule_stream_state_rule_prod_tree_fun_fun$) (?v2 Rule$) (?v3 Rule_stream$)) (! (= (fun_app$i (fun_app$j (uur$ ?v0 ?v1) ?v2) ?v3) (fun_app$q ?v0 (fun_app$i (fun_app$j ?v1 ?v2) ?v3))) :pattern ((fun_app$i (fun_app$j (uur$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 State_rule_prod$) (?v1 State_rule_prod_tree_fset$)) (! (= (fun_app$aa (fun_app$ab uuy$ ?v0) ?v1) ?v0) :pattern ((fun_app$aa (fun_app$ab uuy$ ?v0) ?v1)))))
(assert (forall ((?v0 Rule$) (?v1 Rule_stream$)) (! (= (fun_app$ac (fun_app$ad uut$ ?v0) ?v1) ?v0) :pattern ((fun_app$ac (fun_app$ad uut$ ?v0) ?v1)))))
(assert (forall ((?v0 State_rule_prod$) (?v1 State_rule_prod_tree_fset$)) (! (= (fun_app$ae (fun_app$af uux$ ?v0) ?v1) ?v1) :pattern ((fun_app$ae (fun_app$af uux$ ?v0) ?v1)))))
(assert (forall ((?v0 Rule$) (?v1 Rule_stream$)) (! (= (fun_app$ag (fun_app$ah uus$ ?v0) ?v1) ?v1) :pattern ((fun_app$ag (fun_app$ah uus$ ?v0) ?v1)))))
(assert (forall ((?v0 Rule$)) (! (= (fun_app$f uum$ ?v0) false) :pattern ((fun_app$f uum$ ?v0)))))
(assert (not (fun_app$ (less_eq$ (least$ uu$)) n$)))
(assert (fun_app$a (fun_app$b (enabled$ eff$) (shd$ (sdrop$ n$ rs$))) s$))
(assert (forall ((?v0 Rule$) (?v1 State$)) (! (= (fun_app$a (fun_app$b (enabled$ eff$) ?v0) ?v1) (exists ((?v2 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$ak eff$ ?v0) ?v1) ?v2) )) :pattern ((fun_app$a (fun_app$b (enabled$ eff$) ?v0) ?v1)))))
(assert (forall ((?v0 Rule_stream$) (?v1 State$)) (= (minWait$ eff$ ?v0 ?v1) (least$ (fun_app$h (uua$ ?v0) ?v1))) ))
(assert (forall ((?v0 Rule$) (?v1 State$)) (=> (fun_app$a (fun_app$b (enabled$ eff$) ?v0) ?v1) (fun_app$ai (fun_app$aj (fun_app$ak eff$ ?v0) ?v1) (pickEff$ eff$ ?v0 ?v1))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 Rule$)) (! (= (fun_app$f (fun_app$u (enabled$c ?v0) ?v1) ?v2) (exists ((?v3 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$an ?v0 ?v1) ?v2) ?v3) )) :pattern ((fun_app$f (fun_app$u (enabled$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State$)) (! (= (fun_app$a (fun_app$b (enabled$ ?v0) ?v1) ?v2) (exists ((?v3 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$ak ?v0 ?v1) ?v2) ?v3) )) :pattern ((fun_app$a (fun_app$b (enabled$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ (less_eq$ (least$ ?v0)) ?v1)) ))
(assert (forall ((?v0 State_set$)) (fun_app$e (less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Rule_set$)) (fun_app$g (less_eq$b ?v0) ?v0) ))
(assert (forall ((?v0 State_bool_fun$)) (fun_app$ao (less_eq$c ?v0) ?v0) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$)) (fun_app$ap (less_eq$d ?v0) ?v0) ))
(assert (forall ((?v0 Rule_bool_fun$)) (fun_app$aq (less_eq$e ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 State_set_bool_fun$) (?v1 State_set$) (?v2 State_set_bool_fun$)) (=> (and (fun_app$e ?v0 ?v1) (and (forall ((?v3 State_set$)) (=> (fun_app$e ?v0 ?v3) (fun_app$e (less_eq$a ?v1) ?v3)) ) (forall ((?v3 State_set$)) (=> (and (fun_app$e ?v0 ?v3) (forall ((?v4 State_set$)) (=> (fun_app$e ?v0 ?v4) (fun_app$e (less_eq$a ?v3) ?v4)) )) (fun_app$e ?v2 ?v3)) ))) (fun_app$e ?v2 (least$a ?v0))) ))
(assert (forall ((?v0 Rule_set_bool_fun$) (?v1 Rule_set$) (?v2 Rule_set_bool_fun$)) (=> (and (fun_app$g ?v0 ?v1) (and (forall ((?v3 Rule_set$)) (=> (fun_app$g ?v0 ?v3) (fun_app$g (less_eq$b ?v1) ?v3)) ) (forall ((?v3 Rule_set$)) (=> (and (fun_app$g ?v0 ?v3) (forall ((?v4 Rule_set$)) (=> (fun_app$g ?v0 ?v4) (fun_app$g (less_eq$b ?v3) ?v4)) )) (fun_app$g ?v2 ?v3)) ))) (fun_app$g ?v2 (least$b ?v0))) ))
(assert (forall ((?v0 State_bool_fun_bool_fun$) (?v1 State_bool_fun$) (?v2 State_bool_fun_bool_fun$)) (=> (and (fun_app$ao ?v0 ?v1) (and (forall ((?v3 State_bool_fun$)) (=> (fun_app$ao ?v0 ?v3) (fun_app$ao (less_eq$c ?v1) ?v3)) ) (forall ((?v3 State_bool_fun$)) (=> (and (fun_app$ao ?v0 ?v3) (forall ((?v4 State_bool_fun$)) (=> (fun_app$ao ?v0 ?v4) (fun_app$ao (less_eq$c ?v3) ?v4)) )) (fun_app$ao ?v2 ?v3)) ))) (fun_app$ao ?v2 (least$c ?v0))) ))
(assert (forall ((?v0 State_rule_bool_fun_fun_bool_fun$) (?v1 State_rule_bool_fun_fun$) (?v2 State_rule_bool_fun_fun_bool_fun$)) (=> (and (fun_app$ap ?v0 ?v1) (and (forall ((?v3 State_rule_bool_fun_fun$)) (=> (fun_app$ap ?v0 ?v3) (fun_app$ap (less_eq$d ?v1) ?v3)) ) (forall ((?v3 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap ?v0 ?v3) (forall ((?v4 State_rule_bool_fun_fun$)) (=> (fun_app$ap ?v0 ?v4) (fun_app$ap (less_eq$d ?v3) ?v4)) )) (fun_app$ap ?v2 ?v3)) ))) (fun_app$ap ?v2 (least$d ?v0))) ))
(assert (forall ((?v0 Rule_bool_fun_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun_bool_fun$)) (=> (and (fun_app$aq ?v0 ?v1) (and (forall ((?v3 Rule_bool_fun$)) (=> (fun_app$aq ?v0 ?v3) (fun_app$aq (less_eq$e ?v1) ?v3)) ) (forall ((?v3 Rule_bool_fun$)) (=> (and (fun_app$aq ?v0 ?v3) (forall ((?v4 Rule_bool_fun$)) (=> (fun_app$aq ?v0 ?v4) (fun_app$aq (less_eq$e ?v3) ?v4)) )) (fun_app$aq ?v2 ?v3)) ))) (fun_app$aq ?v2 (least$e ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (less_eq$ ?v1) ?v3)) ) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (less_eq$ ?v3) ?v4)) )) (fun_app$ ?v2 ?v3)) ))) (fun_app$ ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 State_set_bool_fun$) (?v1 State_set$)) (=> (and (fun_app$e ?v0 ?v1) (forall ((?v2 State_set$)) (=> (fun_app$e ?v0 ?v2) (fun_app$e (less_eq$a ?v1) ?v2)) )) (= (least$a ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_set_bool_fun$) (?v1 Rule_set$)) (=> (and (fun_app$g ?v0 ?v1) (forall ((?v2 Rule_set$)) (=> (fun_app$g ?v0 ?v2) (fun_app$g (less_eq$b ?v1) ?v2)) )) (= (least$b ?v0) ?v1)) ))
(assert (forall ((?v0 State_bool_fun_bool_fun$) (?v1 State_bool_fun$)) (=> (and (fun_app$ao ?v0 ?v1) (forall ((?v2 State_bool_fun$)) (=> (fun_app$ao ?v0 ?v2) (fun_app$ao (less_eq$c ?v1) ?v2)) )) (= (least$c ?v0) ?v1)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun_bool_fun$) (?v1 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap ?v0 ?v1) (forall ((?v2 State_rule_bool_fun_fun$)) (=> (fun_app$ap ?v0 ?v2) (fun_app$ap (less_eq$d ?v1) ?v2)) )) (= (least$d ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_bool_fun_bool_fun$) (?v1 Rule_bool_fun$)) (=> (and (fun_app$aq ?v0 ?v1) (forall ((?v2 Rule_bool_fun$)) (=> (fun_app$aq ?v0 ?v2) (fun_app$aq (less_eq$e ?v1) ?v2)) )) (= (least$e ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (less_eq$ ?v1) ?v2)) )) (= (least$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (less_eq$ ?v3) ?v4)) )) (fun_app$ ?v2 ?v3)) )) (fun_app$ ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule_set$) (?v3 State_stream$) (?v4 Rule$)) (=> (fun_app$g (fun_app$ar (ruleSystem$ ?v0) ?v1) ?v2) (= (minWait$a ?v0 ?v3 ?v4) (least$ (fun_app$w (fun_app$x (uub$ ?v0) ?v3) ?v4)))) ))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State_set$) (?v3 State_stream$) (?v4 State$)) (=> (fun_app$e (fun_app$as (ruleSystem$a ?v0) ?v1) ?v2) (= (minWait$b ?v0 ?v3 ?v4) (least$ (fun_app$h (fun_app$v (uuc$ ?v0) ?v3) ?v4)))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule_stream$) (?v4 Rule$)) (=> (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (= (minWait$c ?v0 ?v3 ?v4) (least$ (fun_app$w (fun_app$z (uud$ ?v0) ?v3) ?v4)))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 Rule_stream$) (?v4 State$)) (=> (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (= (minWait$ ?v0 ?v3 ?v4) (least$ (fun_app$h (fun_app$y (uue$ ?v0) ?v3) ?v4)))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ ?v0 (least$ ?v0))) ))
(assert (forall ((?v0 Rule_stream$) (?v1 State$)) (= (trim$ eff$ ?v0 ?v1) (sdrop_while$ (uuf$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (=> (and (exists ((?v2 Nat$)) (fun_app$ ?v0 ?v2) ) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) )) (fun_app$ ?v1 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$)) (=> (exists ((?v1 Nat$)) (fun_app$ ?v0 ?v1) ) (fun_app$ ?v0 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)) )) (fun_app$ ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 Rule$)) (=> (fun_app$f (fun_app$u (enabled$c ?v0) ?v1) ?v2) (fun_app$al (fun_app$am (fun_app$an ?v0 ?v1) ?v2) (pickEff$a ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State$)) (=> (fun_app$a (fun_app$b (enabled$ ?v0) ?v1) ?v2) (fun_app$ai (fun_app$aj (fun_app$ak ?v0 ?v1) ?v2) (pickEff$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule$)) (= (trim$a ?v0 ?v1 ?v2) (sdrop_while$a (fun_app$b (uug$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State$)) (= (trim$b ?v0 ?v1 ?v2) (sdrop_while$a (fun_app$t (uuh$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule$)) (= (trim$c ?v0 ?v1 ?v2) (sdrop_while$ (fun_app$u (uui$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State$)) (= (trim$ ?v0 ?v1 ?v2) (sdrop_while$ (fun_app$n (uuj$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 State_set$)) (fun_app$e (less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Rule_set$)) (fun_app$g (less_eq$b ?v0) ?v0) ))
(assert (forall ((?v0 State_bool_fun$)) (fun_app$ao (less_eq$c ?v0) ?v0) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$)) (fun_app$ap (less_eq$d ?v0) ?v0) ))
(assert (forall ((?v0 Rule_bool_fun$)) (fun_app$aq (less_eq$e ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$) (?v2 State$)) (=> (fun_app$ao (less_eq$c ?v0) ?v1) (less_eq$f (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$) (?v2 State$)) (=> (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$aq (less_eq$e (fun_app$n ?v0 ?v2)) (fun_app$n ?v1 ?v2))) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule$)) (=> (fun_app$aq (less_eq$e ?v0) ?v1) (less_eq$f (fun_app$f ?v0 ?v2) (fun_app$f ?v1 ?v2))) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (! (=> (fun_app$e (less_eq$a ?v0) ?v1) (= (fun_app$e (less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$e (less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (! (=> (fun_app$g (less_eq$b ?v0) ?v1) (= (fun_app$g (less_eq$b ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$g (less_eq$b ?v1) ?v0)))))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$)) (! (=> (fun_app$ao (less_eq$c ?v0) ?v1) (= (fun_app$ao (less_eq$c ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ao (less_eq$c ?v1) ?v0)))))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$)) (! (=> (fun_app$ap (less_eq$d ?v0) ?v1) (= (fun_app$ap (less_eq$d ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ap (less_eq$d ?v1) ?v0)))))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$)) (! (=> (fun_app$aq (less_eq$e ?v0) ?v1) (= (fun_app$aq (less_eq$e ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$aq (less_eq$e ?v1) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$ (less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v2)) (fun_app$g (less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$) (?v2 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (fun_app$ao (less_eq$c ?v1) ?v2)) (fun_app$ao (less_eq$c ?v0) ?v2)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$) (?v2 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$ap (less_eq$d ?v1) ?v2)) (fun_app$ap (less_eq$d ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (fun_app$aq (less_eq$e ?v1) ?v2)) (fun_app$aq (less_eq$e ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v2)) (fun_app$g (less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$) (?v2 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (fun_app$ao (less_eq$c ?v1) ?v2)) (fun_app$ao (less_eq$c ?v0) ?v2)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$) (?v2 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$ap (less_eq$d ?v1) ?v2)) (fun_app$ap (less_eq$d ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (fun_app$aq (less_eq$e ?v1) ?v2)) (fun_app$aq (less_eq$e ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v2) ?v0)) (fun_app$e (less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (less_eq$b ?v2) ?v0)) (fun_app$g (less_eq$b ?v2) ?v1)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$) (?v2 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (fun_app$ao (less_eq$c ?v2) ?v0)) (fun_app$ao (less_eq$c ?v2) ?v1)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$) (?v2 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$ap (less_eq$d ?v2) ?v0)) (fun_app$ap (less_eq$d ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (fun_app$aq (less_eq$e ?v2) ?v0)) (fun_app$aq (less_eq$e ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v0)) (fun_app$ (less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (fun_app$ao (less_eq$c ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$ap (less_eq$d ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (fun_app$aq (less_eq$e ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (fun_app$ao (less_eq$c ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$ap (less_eq$d ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (fun_app$aq (less_eq$e ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (fun_app$ao (less_eq$c ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (fun_app$ap (less_eq$d ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (fun_app$aq (less_eq$e ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$av ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$av ?v1 ?v4)) (fun_app$av ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$av ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 State_set_nat_fun$) (?v2 State_set$) (?v3 State_set$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$aw ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 State_set$) (?v5 State_set$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$aw ?v1 ?v4)) (fun_app$aw ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$aw ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Rule_set_nat_fun$) (?v2 Rule_set$) (?v3 Rule_set$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$ax ?v1 ?v2)) (and (fun_app$g (less_eq$b ?v2) ?v3) (forall ((?v4 Rule_set$) (?v5 Rule_set$)) (=> (fun_app$g (less_eq$b ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$ax ?v1 ?v4)) (fun_app$ax ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$ax ?v1 ?v3))) ))
(assert (forall ((?v0 State_set$) (?v1 Nat_state_set_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$ay ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$ay ?v1 ?v4)) (fun_app$ay ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$ay ?v1 ?v3))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Nat_rule_set_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$g (less_eq$b ?v0) (fun_app$az ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$g (less_eq$b (fun_app$az ?v1 ?v4)) (fun_app$az ?v1 ?v5))) ))) (fun_app$g (less_eq$b ?v0) (fun_app$az ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 State_bool_fun_nat_fun$) (?v2 State_bool_fun$) (?v3 State_bool_fun$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$ba ?v1 ?v2)) (and (fun_app$ao (less_eq$c ?v2) ?v3) (forall ((?v4 State_bool_fun$) (?v5 State_bool_fun$)) (=> (fun_app$ao (less_eq$c ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$ba ?v1 ?v4)) (fun_app$ba ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$ba ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Rule_bool_fun_nat_fun$) (?v2 Rule_bool_fun$) (?v3 Rule_bool_fun$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$bb ?v1 ?v2)) (and (fun_app$aq (less_eq$e ?v2) ?v3) (forall ((?v4 Rule_bool_fun$) (?v5 Rule_bool_fun$)) (=> (fun_app$aq (less_eq$e ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$bb ?v1 ?v4)) (fun_app$bb ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$bb ?v1 ?v3))) ))
(assert (forall ((?v0 State_set$) (?v1 State_set_state_set_fun$) (?v2 State_set$) (?v3 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$bc ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 State_set$) (?v5 State_set$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$bc ?v1 ?v4)) (fun_app$bc ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$bc ?v1 ?v3))) ))
(assert (forall ((?v0 State_set$) (?v1 Rule_set_state_set_fun$) (?v2 Rule_set$) (?v3 Rule_set$)) (=> (and (fun_app$e (less_eq$a ?v0) (fun_app$bd ?v1 ?v2)) (and (fun_app$g (less_eq$b ?v2) ?v3) (forall ((?v4 Rule_set$) (?v5 Rule_set$)) (=> (fun_app$g (less_eq$b ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$bd ?v1 ?v4)) (fun_app$bd ?v1 ?v5))) ))) (fun_app$e (less_eq$a ?v0) (fun_app$bd ?v1 ?v3))) ))
(assert (forall ((?v0 Rule_set$) (?v1 State_set_rule_set_fun$) (?v2 State_set$) (?v3 State_set$)) (=> (and (fun_app$g (less_eq$b ?v0) (fun_app$be ?v1 ?v2)) (and (fun_app$e (less_eq$a ?v2) ?v3) (forall ((?v4 State_set$) (?v5 State_set$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$g (less_eq$b (fun_app$be ?v1 ?v4)) (fun_app$be ?v1 ?v5))) ))) (fun_app$g (less_eq$b ?v0) (fun_app$be ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$ (less_eq$ (fun_app$av ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$av ?v2 ?v4)) (fun_app$av ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$av ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_state_set_fun$) (?v3 State_set$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$ay ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$ay ?v2 ?v4)) (fun_app$ay ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$ay ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_rule_set_fun$) (?v3 Rule_set$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$g (less_eq$b (fun_app$az ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$g (less_eq$b (fun_app$az ?v2 ?v4)) (fun_app$az ?v2 ?v5))) ))) (fun_app$g (less_eq$b (fun_app$az ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$ (less_eq$ (fun_app$aw ?v2 ?v1)) ?v3) (forall ((?v4 State_set$) (?v5 State_set$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$aw ?v2 ?v4)) (fun_app$aw ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$aw ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule_set_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (and (fun_app$ (less_eq$ (fun_app$ax ?v2 ?v1)) ?v3) (forall ((?v4 Rule_set$) (?v5 Rule_set$)) (=> (fun_app$g (less_eq$b ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$ax ?v2 ?v4)) (fun_app$ax ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$ax ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_state_bool_fun_fun$) (?v3 State_bool_fun$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$ao (less_eq$c (fun_app$bf ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ao (less_eq$c (fun_app$bf ?v2 ?v4)) (fun_app$bf ?v2 ?v5))) ))) (fun_app$ao (less_eq$c (fun_app$bf ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_rule_bool_fun_fun$) (?v3 Rule_bool_fun$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$aq (less_eq$e (fun_app$bg ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$aq (less_eq$e (fun_app$bg ?v2 ?v4)) (fun_app$bg ?v2 ?v5))) ))) (fun_app$aq (less_eq$e (fun_app$bg ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set_state_set_fun$) (?v3 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$bc ?v2 ?v1)) ?v3) (forall ((?v4 State_set$) (?v5 State_set$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$bc ?v2 ?v4)) (fun_app$bc ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$bc ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set_rule_set_fun$) (?v3 Rule_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (fun_app$g (less_eq$b (fun_app$be ?v2 ?v1)) ?v3) (forall ((?v4 State_set$) (?v5 State_set$)) (=> (fun_app$e (less_eq$a ?v4) ?v5) (fun_app$g (less_eq$b (fun_app$be ?v2 ?v4)) (fun_app$be ?v2 ?v5))) ))) (fun_app$g (less_eq$b (fun_app$be ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule_set_state_set_fun$) (?v3 State_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (and (fun_app$e (less_eq$a (fun_app$bd ?v2 ?v1)) ?v3) (forall ((?v4 Rule_set$) (?v5 Rule_set$)) (=> (fun_app$g (less_eq$b ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$bd ?v2 ?v4)) (fun_app$bd ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$bd ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State_set$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$e (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (= ?v1 ?v2)) (fun_app$g (less_eq$b ?v0) ?v2)) ))
(assert (forall ((?v0 State_bool_fun$) (?v1 State_bool_fun$) (?v2 State_bool_fun$)) (=> (and (fun_app$ao (less_eq$c ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ao (less_eq$c ?v0) ?v2)) ))
(assert (forall ((?v0 State_rule_bool_fun_fun$) (?v1 State_rule_bool_fun_fun$) (?v2 State_rule_bool_fun_fun$)) (=> (and (fun_app$ap (less_eq$d ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ap (less_eq$d ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (= ?v1 ?v2)) (fun_app$aq (less_eq$e ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun_state_set_fun$) (?v3 State_set$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (and (= (fun_app$bh ?v2 ?v1) ?v3) (forall ((?v4 Rule_bool_fun$) (?v5 Rule_bool_fun$)) (=> (fun_app$aq (less_eq$e ?v4) ?v5) (fun_app$e (less_eq$a (fun_app$bh ?v2 ?v4)) (fun_app$bh ?v2 ?v5))) ))) (fun_app$e (less_eq$a (fun_app$bh ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun_rule_set_fun$) (?v3 Rule_set$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (and (= (fun_app$bi ?v2 ?v1) ?v3) (forall ((?v4 Rule_bool_fun$) (?v5 Rule_bool_fun$)) (=> (fun_app$aq (less_eq$e ?v4) ?v5) (fun_app$g (less_eq$b (fun_app$bi ?v2 ?v4)) (fun_app$bi ?v2 ?v5))) ))) (fun_app$g (less_eq$b (fun_app$bi ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun_state_bool_fun_fun$) (?v3 State_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (and (= (fun_app$bj ?v2 ?v1) ?v3) (forall ((?v4 Rule_bool_fun$) (?v5 Rule_bool_fun$)) (=> (fun_app$aq (less_eq$e ?v4) ?v5) (fun_app$ao (less_eq$c (fun_app$bj ?v2 ?v4)) (fun_app$bj ?v2 ?v5))) ))) (fun_app$ao (less_eq$c (fun_app$bj ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun_state_rule_bool_fun_fun_fun$) (?v3 State_rule_bool_fun_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (and (= (fun_app$bk ?v2 ?v1) ?v3) (forall ((?v4 Rule_bool_fun$) (?v5 Rule_bool_fun$)) (=> (fun_app$aq (less_eq$e ?v4) ?v5) (fun_app$ap (less_eq$d (fun_app$bk ?v2 ?v4)) (fun_app$bk ?v2 ?v5))) ))) (fun_app$ap (less_eq$d (fun_app$bk ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_bool_fun$) (?v2 Rule_bool_fun_rule_bool_fun_fun$) (?v3 Rule_bool_fun$)) (=> (and (fun_app$aq (less_eq$e ?v0) ?v1) (and (= (fun_app$m ?v2 ?v1) ?v3) (forall ((?v4 Rule_bool_fun$) (?v5 Rule_bool_fun$)) (=> (fun_app$aq (less_eq$e ?v4) ?v5) (fun_app$aq (less_eq$e (fun_app$m ?v2 ?v4)) (fun_app$m ?v2 ?v5))) ))) (fun_app$aq (less_eq$e (fun_app$m ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (= (fun_app$av ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$av ?v2 ?v4)) (fun_app$av ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$av ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$av ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$av ?v1 ?v4)) (fun_app$av ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$av ?v1 ?v3))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (less_eq$ ?v3) ?v4) (fun_app$ (fun_app$bl ?v0 ?v3) ?v4)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$bl ?v0 ?v4) ?v3) (fun_app$ (fun_app$bl ?v0 ?v3) ?v4)) )) (fun_app$ (fun_app$bl ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$ (less_eq$ ?v0) ?v1) false) (=> (fun_app$ (less_eq$ ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 Rule_stream$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (fair$ ?v1 ?v4))) (= (trim$c ?v0 ?v4 ?v3) (sdrop$ (minWait$c ?v0 ?v4 ?v3) ?v4))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$) (?v4 Rule_stream$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (fair$ ?v1 ?v4))) (= (trim$ ?v0 ?v4 ?v3) (sdrop$ (minWait$ ?v0 ?v4 ?v3) ?v4))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 Rule_stream$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (fair$ ?v1 ?v4))) (fun_app$f (fun_app$u (enabled$c ?v0) (shd$ (trim$c ?v0 ?v4 ?v3))) ?v3)) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$) (?v4 Rule_stream$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (fair$ ?v1 ?v4))) (fun_app$a (fun_app$b (enabled$ ?v0) (shd$ (trim$ ?v0 ?v4 ?v3))) ?v3)) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 Rule_stream$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (fair$ ?v1 ?v4))) (exists ((?v5 Nat$)) (fun_app$f (fun_app$u (enabled$c ?v0) (shd$ (sdrop$ ?v5 ?v4))) ?v3) )) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$) (?v4 Rule_stream$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (fair$ ?v1 ?v4))) (exists ((?v5 Nat$)) (fun_app$a (fun_app$b (enabled$ ?v0) (shd$ (sdrop$ ?v5 ?v4))) ?v3) )) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 Rule_stream$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (fair$ ?v1 ?v4))) (fair$ ?v1 (trim$c ?v0 ?v4 ?v3))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$) (?v4 Rule_stream$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (fair$ ?v1 ?v4))) (fair$ ?v1 (trim$ ?v0 ?v4 ?v3))) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 State_set$)) (= (collect$ (uuk$ ?v0)) ?v0) ))
(assert (forall ((?v0 Rule_set$)) (= (collect$a (uul$ ?v0)) ?v0) ))
(assert (forall ((?v0 State$) (?v1 State_bool_fun$)) (= (fun_app$e (member$ ?v0) (collect$ ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 Rule$) (?v1 Rule_bool_fun$)) (= (fun_app$g (member$a ?v0) (collect$a ?v1)) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_stream$) (?v1 Rule_stream$) (?v2 Nat$)) (=> (fair$ ?v0 ?v1) (fair$ ?v0 (sdrop$ ?v2 ?v1))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (less_eq$ ?v2) ?v1)) )) (= (greatest$ ?v0) ?v1)) ))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State_set$) (?v3 State$) (?v4 State_stream$)) (=> (and (fun_app$e (fun_app$as (ruleSystem$a ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (fair$a ?v1 ?v4))) (fun_app$e (member$ (shd$a (trim$b ?v0 ?v4 ?v3))) (sset$ ?v1))) ))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 State_stream$)) (=> (and (fun_app$g (fun_app$ar (ruleSystem$ ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (fair$a ?v1 ?v4))) (fun_app$e (member$ (shd$a (trim$a ?v0 ?v4 ?v3))) (sset$ ?v1))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 Rule_stream$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (fair$ ?v1 ?v4))) (fun_app$g (member$a (shd$ (trim$c ?v0 ?v4 ?v3))) (sset$a ?v1))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$) (?v4 Rule_stream$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (fair$ ?v1 ?v4))) (fun_app$g (member$a (shd$ (trim$ ?v0 ?v4 ?v3))) (sset$a ?v1))) ))
(assert (forall ((?v0 Rule_stream$)) (fair$ ?v0 (fenum$ ?v0)) ))
(assert (forall ((?v0 State$) (?v1 Rule_stream$)) (! (=> (and (fun_app$e (member$ ?v0) s$a) (fair$ rules$ ?v1)) (= (trim$ eff$ ?v1 ?v0) (sdrop$ (minWait$ eff$ ?v1 ?v0) ?v1))) :pattern ((trim$ eff$ ?v1 ?v0)))))
(assert (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (fun_app$e (member$ ?v0) s$a) (fair$ rules$ ?v1)) (exists ((?v2 Nat$)) (fun_app$a (fun_app$b (enabled$ eff$) (shd$ (sdrop$ ?v2 ?v1))) ?v0) )) ))
(assert (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (fun_app$e (member$ ?v0) s$a) (fair$ rules$ ?v1)) (fun_app$a (fun_app$b (enabled$ eff$) (shd$ (trim$ eff$ ?v1 ?v0))) ?v0)) ))
(assert (= (sset$a (fenum$ rules$)) (sset$a rules$)))
(assert (fun_app$e (fun_app$au (ruleSystem$c eff$) rules$) s$a))
(assert (fair$ rules$ (fenum$ rules$)))
(assert (forall ((?v0 Rule_stream$) (?v1 Nat$)) (=> (fair$ rules$ ?v0) (fair$ rules$ (sdrop$ ?v1 ?v0))) ))
(assert (forall ((?v0 State$)) (=> (fun_app$e (member$ ?v0) s$a) (exists ((?v1 Rule$)) (and (fun_app$g (member$a ?v1) (sset$a rules$)) (exists ((?v2 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$ak eff$ ?v1) ?v0) ?v2) )) )) ))
(assert (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (fun_app$e (member$ ?v0) s$a) (fair$ rules$ ?v1)) (fair$ rules$ (trim$ eff$ ?v1 ?v0))) ))
(assert (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (fun_app$e (member$ ?v0) s$a) (fair$ rules$ ?v1)) (fun_app$g (member$a (shd$ (trim$ eff$ ?v1 ?v0))) (sset$a rules$))) ))
(assert (forall ((?v0 Rule_stream$)) (= (sset$a (fenum$ ?v0)) (sset$a ?v0)) ))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State_set$) (?v3 State$)) (=> (and (fun_app$e (fun_app$as (ruleSystem$a ?v0) ?v1) ?v2) (fun_app$e (member$ ?v3) ?v2)) (exists ((?v4 State$)) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (exists ((?v5 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$bm ?v0 ?v4) ?v3) ?v5) )) )) ))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule_set$) (?v3 Rule$)) (=> (and (fun_app$g (fun_app$ar (ruleSystem$ ?v0) ?v1) ?v2) (fun_app$g (member$a ?v3) ?v2)) (exists ((?v4 State$)) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (exists ((?v5 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$bn ?v0 ?v4) ?v3) ?v5) )) )) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (fun_app$g (member$a ?v3) ?v2)) (exists ((?v4 Rule$)) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (exists ((?v5 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$an ?v0 ?v4) ?v3) ?v5) )) )) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (fun_app$e (member$ ?v3) ?v2)) (exists ((?v4 Rule$)) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (exists ((?v5 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$ak ?v0 ?v4) ?v3) ?v5) )) )) ))
(assert (forall ((?v0 State_rule_prod_stream$)) (= (saturated$ eff$ rules$ ?v0) (forall ((?v1 Rule$)) (=> (fun_app$g (member$a ?v1) (sset$a rules$)) (saturated$a eff$ ?v1 ?v0)) )) ))
(assert (forall ((?v0 State$) (?v1 Rule$) (?v2 State_fset$) (?v3 State$)) (=> (and (fun_app$e (member$ ?v0) s$a) (and (fun_app$g (member$a ?v1) (sset$a rules$)) (and (fun_app$ai (fun_app$aj (fun_app$ak eff$ ?v1) ?v0) ?v2) (fmember$b ?v3 ?v2)))) (fun_app$e (member$ ?v3) s$a)) ))
(assert (forall ((?v0 State_stream$)) (fun_app$e (member$ (shd$a ?v0)) (sset$ ?v0)) ))
(assert (forall ((?v0 Rule_stream$)) (fun_app$g (member$a (shd$ ?v0)) (sset$a ?v0)) ))
(assert (forall ((?v0 Rule_stream$)) (=> (fair$ rules$ ?v0) (fair$ rules$ (stl$ ?v0))) ))
(assert (not (= (sset$a rules$) bot$)))
(assert (countable$ (sset$a rules$)))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_rule_prod_stream$)) (= (saturated$ ?v0 ?v1 ?v2) (forall ((?v3 Rule$)) (=> (fun_app$g (member$a ?v3) (sset$a ?v1)) (saturated$a ?v0 ?v3 ?v2)) )) ))
(assert (forall ((?v0 State$) (?v1 State_stream$)) (=> (fun_app$e (member$ ?v0) (sset$ (stl$a ?v1))) (fun_app$e (member$ ?v0) (sset$ ?v1))) ))
(assert (forall ((?v0 Rule$) (?v1 Rule_stream$)) (=> (fun_app$g (member$a ?v0) (sset$a (stl$ ?v1))) (fun_app$g (member$a ?v0) (sset$a ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Rule_stream$)) (= (sdrop$ ?v0 (stl$ ?v1)) (stl$ (sdrop$ ?v0 ?v1))) ))
(assert (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$)) (=> (and (fun_app$bo (fun_app$bp ?v0 ?v1) ?v2) (forall ((?v3 Rule_stream$) (?v4 Rule_stream$)) (=> (fun_app$bo (fun_app$bp ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$bo (fun_app$bp ?v0 (stl$ ?v3)) (stl$ ?v4)))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$)) (=> (and (fun_app$bo (fun_app$bp ?v0 ?v1) ?v2) (forall ((?v3 Rule_stream$) (?v4 Rule_stream$)) (=> (fun_app$bo (fun_app$bp ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$bo (fun_app$bp ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Rule_stream$) (?v1 Rule_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Rule_set$)) (= (fun_app$g (less_eq$b ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$ (less_eq$ ?v0) bot$a) (= ?v0 bot$a)) ))
(assert (forall ((?v0 Rule_set$)) (=> (fun_app$g (less_eq$b ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$ (less_eq$ ?v0) bot$a) (= ?v0 bot$a)) ))
(assert (forall ((?v0 Rule_set$)) (fun_app$g (less_eq$b bot$) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ bot$a) ?v0) ))
(assert (forall ((?v0 Rule_stream$)) (countable$ (sset$a ?v0)) ))
(assert (forall ((?v0 Rule_stream$) (?v1 Rule_stream$)) (=> (fair$ ?v0 ?v1) (fair$ ?v0 (stl$ ?v1))) ))
(assert (forall ((?v0 Rule_stream$)) (not (= (sset$a ?v0) bot$)) ))
(assert (forall ((?v0 State$) (?v1 State_stream$) (?v2 State_state_stream_bool_fun_fun$)) (=> (and (fun_app$e (member$ ?v0) (sset$ ?v1)) (and (forall ((?v3 State_stream$)) (fun_app$bq (fun_app$br ?v2 (shd$a ?v3)) ?v3) ) (forall ((?v3 State_stream$) (?v4 State$)) (=> (and (fun_app$e (member$ ?v4) (sset$ (stl$a ?v3))) (fun_app$bq (fun_app$br ?v2 ?v4) (stl$a ?v3))) (fun_app$bq (fun_app$br ?v2 ?v4) ?v3)) ))) (fun_app$bq (fun_app$br ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Rule$) (?v1 Rule_stream$) (?v2 Rule_rule_stream_bool_fun_fun$)) (=> (and (fun_app$g (member$a ?v0) (sset$a ?v1)) (and (forall ((?v3 Rule_stream$)) (fun_app$bo (fun_app$bs ?v2 (shd$ ?v3)) ?v3) ) (forall ((?v3 Rule_stream$) (?v4 Rule$)) (=> (and (fun_app$g (member$a ?v4) (sset$a (stl$ ?v3))) (fun_app$bo (fun_app$bs ?v2 ?v4) (stl$ ?v3))) (fun_app$bo (fun_app$bs ?v2 ?v4) ?v3)) ))) (fun_app$bo (fun_app$bs ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_bool_fun$) (?v1 Rule_stream$)) (= (sdrop_while$ ?v0 ?v1) (ite (fun_app$f ?v0 (shd$ ?v1)) (sdrop_while$ ?v0 (stl$ ?v1)) ?v1)) ))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule_set$)) (= (fun_app$g (fun_app$ar (ruleSystem$ ?v0) ?v1) ?v2) (and (forall ((?v3 Rule$) (?v4 State$) (?v5 Rule_fset$) (?v6 Rule$)) (=> (and (fun_app$g (member$a ?v3) ?v2) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (and (fun_app$al (fun_app$am (fun_app$bn ?v0 ?v4) ?v3) ?v5) (fmember$c ?v6 ?v5)))) (fun_app$g (member$a ?v6) ?v2)) ) (forall ((?v3 Rule$)) (=> (fun_app$g (member$a ?v3) ?v2) (exists ((?v4 State$)) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (exists ((?v5 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$bn ?v0 ?v4) ?v3) ?v5) )) )) ))) ))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State_set$)) (= (fun_app$e (fun_app$as (ruleSystem$a ?v0) ?v1) ?v2) (and (forall ((?v3 State$) (?v4 State$) (?v5 State_fset$) (?v6 State$)) (=> (and (fun_app$e (member$ ?v3) ?v2) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (and (fun_app$ai (fun_app$aj (fun_app$bm ?v0 ?v4) ?v3) ?v5) (fmember$b ?v6 ?v5)))) (fun_app$e (member$ ?v6) ?v2)) ) (forall ((?v3 State$)) (=> (fun_app$e (member$ ?v3) ?v2) (exists ((?v4 State$)) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (exists ((?v5 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$bm ?v0 ?v4) ?v3) ?v5) )) )) ))) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$)) (= (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (forall ((?v3 Rule$) (?v4 Rule$) (?v5 Rule_fset$) (?v6 Rule$)) (=> (and (fun_app$g (member$a ?v3) ?v2) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (and (fun_app$al (fun_app$am (fun_app$an ?v0 ?v4) ?v3) ?v5) (fmember$c ?v6 ?v5)))) (fun_app$g (member$a ?v6) ?v2)) ) (forall ((?v3 Rule$)) (=> (fun_app$g (member$a ?v3) ?v2) (exists ((?v4 Rule$)) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (exists ((?v5 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$an ?v0 ?v4) ?v3) ?v5) )) )) ))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$)) (= (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (forall ((?v3 State$) (?v4 Rule$) (?v5 State_fset$) (?v6 State$)) (=> (and (fun_app$e (member$ ?v3) ?v2) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (and (fun_app$ai (fun_app$aj (fun_app$ak ?v0 ?v4) ?v3) ?v5) (fmember$b ?v6 ?v5)))) (fun_app$e (member$ ?v6) ?v2)) ) (forall ((?v3 State$)) (=> (fun_app$e (member$ ?v3) ?v2) (exists ((?v4 Rule$)) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (exists ((?v5 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$ak ?v0 ?v4) ?v3) ?v5) )) )) ))) ))
(assert (forall ((?v0 Rule_set$) (?v1 State_stream$) (?v2 State_rule_rule_fset_bool_fun_fun_fun$)) (=> (and (forall ((?v3 Rule$) (?v4 State$) (?v5 Rule_fset$) (?v6 Rule$)) (=> (and (fun_app$g (member$a ?v3) ?v0) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (and (fun_app$al (fun_app$am (fun_app$bn ?v2 ?v4) ?v3) ?v5) (fmember$c ?v6 ?v5)))) (fun_app$g (member$a ?v6) ?v0)) ) (forall ((?v3 Rule$)) (=> (fun_app$g (member$a ?v3) ?v0) (exists ((?v4 State$)) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (exists ((?v5 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$bn ?v2 ?v4) ?v3) ?v5) )) )) )) (fun_app$g (fun_app$ar (ruleSystem$ ?v2) ?v1) ?v0)) ))
(assert (forall ((?v0 State_set$) (?v1 State_stream$) (?v2 State_state_state_fset_bool_fun_fun_fun$)) (=> (and (forall ((?v3 State$) (?v4 State$) (?v5 State_fset$) (?v6 State$)) (=> (and (fun_app$e (member$ ?v3) ?v0) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (and (fun_app$ai (fun_app$aj (fun_app$bm ?v2 ?v4) ?v3) ?v5) (fmember$b ?v6 ?v5)))) (fun_app$e (member$ ?v6) ?v0)) ) (forall ((?v3 State$)) (=> (fun_app$e (member$ ?v3) ?v0) (exists ((?v4 State$)) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (exists ((?v5 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$bm ?v2 ?v4) ?v3) ?v5) )) )) )) (fun_app$e (fun_app$as (ruleSystem$a ?v2) ?v1) ?v0)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_stream$) (?v2 Rule_rule_rule_fset_bool_fun_fun_fun$)) (=> (and (forall ((?v3 Rule$) (?v4 Rule$) (?v5 Rule_fset$) (?v6 Rule$)) (=> (and (fun_app$g (member$a ?v3) ?v0) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (and (fun_app$al (fun_app$am (fun_app$an ?v2 ?v4) ?v3) ?v5) (fmember$c ?v6 ?v5)))) (fun_app$g (member$a ?v6) ?v0)) ) (forall ((?v3 Rule$)) (=> (fun_app$g (member$a ?v3) ?v0) (exists ((?v4 Rule$)) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (exists ((?v5 Rule_fset$)) (fun_app$al (fun_app$am (fun_app$an ?v2 ?v4) ?v3) ?v5) )) )) )) (fun_app$g (fun_app$at (ruleSystem$b ?v2) ?v1) ?v0)) ))
(assert (forall ((?v0 State_set$) (?v1 Rule_stream$) (?v2 Rule_state_state_fset_bool_fun_fun_fun$)) (=> (and (forall ((?v3 State$) (?v4 Rule$) (?v5 State_fset$) (?v6 State$)) (=> (and (fun_app$e (member$ ?v3) ?v0) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (and (fun_app$ai (fun_app$aj (fun_app$ak ?v2 ?v4) ?v3) ?v5) (fmember$b ?v6 ?v5)))) (fun_app$e (member$ ?v6) ?v0)) ) (forall ((?v3 State$)) (=> (fun_app$e (member$ ?v3) ?v0) (exists ((?v4 Rule$)) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (exists ((?v5 State_fset$)) (fun_app$ai (fun_app$aj (fun_app$ak ?v2 ?v4) ?v3) ?v5) )) )) )) (fun_app$e (fun_app$au (ruleSystem$c ?v2) ?v1) ?v0)) ))
(assert (forall ((?v0 State_rule_rule_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 State$) (?v5 Rule_fset$) (?v6 Rule$)) (=> (and (fun_app$g (fun_app$ar (ruleSystem$ ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (and (fun_app$al (fun_app$am (fun_app$bn ?v0 ?v4) ?v3) ?v5) (fmember$c ?v6 ?v5))))) (fun_app$g (member$a ?v6) ?v2)) ))
(assert (forall ((?v0 State_state_state_fset_bool_fun_fun_fun$) (?v1 State_stream$) (?v2 State_set$) (?v3 State$) (?v4 State$) (?v5 State_fset$) (?v6 State$)) (=> (and (fun_app$e (fun_app$as (ruleSystem$a ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (and (fun_app$e (member$ ?v4) (sset$ ?v1)) (and (fun_app$ai (fun_app$aj (fun_app$bm ?v0 ?v4) ?v3) ?v5) (fmember$b ?v6 ?v5))))) (fun_app$e (member$ ?v6) ?v2)) ))
(assert (forall ((?v0 Rule_rule_rule_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_set$) (?v3 Rule$) (?v4 Rule$) (?v5 Rule_fset$) (?v6 Rule$)) (=> (and (fun_app$g (fun_app$at (ruleSystem$b ?v0) ?v1) ?v2) (and (fun_app$g (member$a ?v3) ?v2) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (and (fun_app$al (fun_app$am (fun_app$an ?v0 ?v4) ?v3) ?v5) (fmember$c ?v6 ?v5))))) (fun_app$g (member$a ?v6) ?v2)) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_set$) (?v3 State$) (?v4 Rule$) (?v5 State_fset$) (?v6 State$)) (=> (and (fun_app$e (fun_app$au (ruleSystem$c ?v0) ?v1) ?v2) (and (fun_app$e (member$ ?v3) ?v2) (and (fun_app$g (member$a ?v4) (sset$a ?v1)) (and (fun_app$ai (fun_app$aj (fun_app$ak ?v0 ?v4) ?v3) ?v5) (fmember$b ?v6 ?v5))))) (fun_app$e (member$ ?v6) ?v2)) ))
(assert (countable$ bot$))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$)) (=> (forall ((?v2 State$)) (=> (fmember$b ?v2 ?v0) (fmember$b ?v2 ?v1)) ) (less_eq$g ?v0 ?v1)) ))
(assert (forall ((?v0 State$)) (= (fun_app$e (member$ ?v0) bot$b) false) ))
(assert (forall ((?v0 Rule$)) (= (fun_app$g (member$a ?v0) bot$) false) ))
(assert (forall ((?v0 Rule_bool_fun$)) (= (= bot$ (collect$a ?v0)) (forall ((?v1 Rule$)) (not (fun_app$f ?v0 ?v1)) )) ))
(assert (forall ((?v0 State_set$)) (= (forall ((?v1 State$)) (not (fun_app$e (member$ ?v1) ?v0)) ) (= ?v0 bot$b)) ))
(assert (forall ((?v0 Rule_set$)) (= (forall ((?v1 Rule$)) (not (fun_app$g (member$a ?v1) ?v0)) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 Rule_set$)) (= (fun_app$g (less_eq$b ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Rule_set$)) (fun_app$g (less_eq$b bot$) ?v0) ))
(assert (forall ((?v0 Rule_bool_fun$)) (= (= (collect$a ?v0) bot$) (forall ((?v1 Rule$)) (not (fun_app$f ?v0 ?v1)) )) ))
(assert (forall ((?v0 State$)) (= (fmember$b ?v0 bot$c) false) ))
(assert (forall ((?v0 State_fset$)) (= (forall ((?v1 State$)) (not (fmember$b ?v1 ?v0)) ) (= ?v0 bot$c)) ))
(assert (forall ((?v0 State$)) (=> (fmember$b ?v0 bot$c) false) ))
(assert (forall ((?v0 State_fset$) (?v1 State$)) (=> (= ?v0 bot$c) (not (fmember$b ?v1 ?v0))) ))
(assert (forall ((?v0 State_fset$)) (=> (forall ((?v1 State$)) (=> (fmember$b ?v1 ?v0) false) ) (= ?v0 bot$c)) ))
(assert (= bot$ (collect$a bot$d)))
(assert (forall ((?v0 State_fset$)) (= (exists ((?v1 State$)) (fmember$b ?v1 ?v0) ) (not (= ?v0 bot$c))) ))
(assert (forall ((?v0 State_set$)) (= (exists ((?v1 State$)) (fun_app$e (member$ ?v1) ?v0) ) (not (= ?v0 bot$b))) ))
(assert (forall ((?v0 Rule_set$)) (= (exists ((?v1 Rule$)) (fun_app$g (member$a ?v1) ?v0) ) (not (= ?v0 bot$))) ))
(assert (forall ((?v0 State_set$)) (=> (forall ((?v1 State$)) (=> (fun_app$e (member$ ?v1) ?v0) false) ) (= ?v0 bot$b)) ))
(assert (forall ((?v0 Rule_set$)) (=> (forall ((?v1 Rule$)) (=> (fun_app$g (member$a ?v1) ?v0) false) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 State_set$) (?v1 State$)) (=> (= ?v0 bot$b) (not (fun_app$e (member$ ?v1) ?v0))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule$)) (=> (= ?v0 bot$) (not (fun_app$g (member$a ?v1) ?v0))) ))
(assert (forall ((?v0 State$)) (=> (fun_app$e (member$ ?v0) bot$b) false) ))
(assert (forall ((?v0 Rule$)) (=> (fun_app$g (member$a ?v0) bot$) false) ))
(assert (forall ((?v0 State$) (?v1 State_fset$) (?v2 State_fset$)) (=> (and (fmember$b ?v0 ?v1) (less_eq$g ?v1 ?v2)) (fmember$b ?v0 ?v2)) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State$)) (=> (and (less_eq$g ?v0 ?v1) (fmember$b ?v2 ?v0)) (fmember$b ?v2 ?v1)) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State$)) (=> (and (less_eq$g ?v0 ?v1) (fmember$b ?v2 ?v0)) (fmember$b ?v2 ?v1)) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State$)) (=> (and (less_eq$g ?v0 ?v1) (fmember$b ?v2 ?v0)) (fmember$b ?v2 ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 State$) (?v2 State$) (?v3 State_fset$)) (= (fmember$b (ite ?v0 ?v1 ?v2) ?v3) (and (=> ?v0 (fmember$b ?v1 ?v3)) (=> (not ?v0) (fmember$b ?v2 ?v3)))) ))
(assert (forall ((?v0 State$) (?v1 Bool) (?v2 State_fset$) (?v3 State_fset$)) (= (fmember$b ?v0 (ite ?v1 ?v2 ?v3)) (and (=> ?v1 (fmember$b ?v0 ?v2)) (=> (not ?v1) (fmember$b ?v0 ?v3)))) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$)) (=> (forall ((?v2 State$)) (= (fmember$b ?v2 ?v0) (fmember$b ?v2 ?v1)) ) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State$)) (=> (and (= ?v0 ?v1) (and (=> (and (fmember$b ?v2 ?v0) (fmember$b ?v2 ?v1)) false) (=> (and (not (fmember$b ?v2 ?v0)) (not (fmember$b ?v2 ?v1))) false))) false) ))
(assert (forall ((?v0 State$) (?v1 State$) (?v2 State_fset$)) (=> (and (= ?v0 ?v1) (fmember$b ?v1 ?v2)) (fmember$b ?v0 ?v2)) ))
(assert (forall ((?v0 State$) (?v1 State$) (?v2 State_fset$)) (=> (= ?v0 ?v1) (= (fmember$b ?v0 ?v2) (fmember$b ?v1 ?v2))) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State$)) (=> (= ?v0 ?v1) (= (fmember$b ?v2 ?v0) (fmember$b ?v2 ?v1))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (countable$ ?v1)) (countable$ ?v0)) ))
(assert (= bot$ (collect$a uum$)))
(assert (forall ((?v0 State_set$) (?v1 State_bool_fun$)) (=> (countable$a ?v0) (countable$a (collect$ (fun_app$l (uun$ ?v0) ?v1)))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_bool_fun$)) (=> (countable$ ?v0) (countable$ (collect$a (fun_app$m (uuo$ ?v0) ?v1)))) ))
(assert (forall ((?v0 Rule_set$)) (! (= (is_empty$ ?v0) (= ?v0 bot$)) :pattern ((is_empty$ ?v0)))))
(assert (forall ((?v0 State$) (?v1 State_stream$)) (! (= (smember$ ?v0 ?v1) (fun_app$e (member$ ?v0) (sset$ ?v1))) :pattern ((smember$ ?v0 ?v1)))))
(assert (forall ((?v0 Rule$) (?v1 Rule_stream$)) (! (= (smember$a ?v0 ?v1) (fun_app$g (member$a ?v0) (sset$a ?v1))) :pattern ((smember$a ?v0 ?v1)))))
(assert (forall ((?v0 Rule_rule_stream_state_rule_prod_tree_fun_fun$) (?v1 Rule_stream$)) (! (= (case_stream$ ?v0 ?v1) (fun_app$i (fun_app$j ?v0 (shd$ ?v1)) (stl$ ?v1))) :pattern ((case_stream$ ?v0 ?v1)))))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (not (= ?v0 bot$)) (and (countable$ ?v0) (and (not (= ?v1 bot$)) (countable$ ?v1)))) (= (= (from_nat_into$ ?v0) (from_nat_into$ ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Rule_stream$) (?v1 State$)) (= (cont$ (fun_app$o (fun_app$k (mkTree$ eff$) ?v0) ?v1)) (fimage$ (fun_app$k (mkTree$ eff$) (stl$ (trim$ eff$ ?v0 ?v1))) (pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1)) ?v1))) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (=> (forall ((?v2 State$)) (=> (fun_app$e (member$ ?v2) ?v0) (fun_app$e (member$ ?v2) ?v1)) ) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (forall ((?v2 Rule$)) (=> (fun_app$g (member$a ?v2) ?v0) (fun_app$g (member$a ?v2) ?v1)) ) (fun_app$g (less_eq$b ?v0) ?v1)) ))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_state_rule_prod_tree_fun$) (?v2 State$) (?v3 State_fset$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (fmember$b ?v2 ?v3)) (fmember$ ?v0 (fimage$ ?v1 ?v3))) ))
(assert (forall ((?v0 State$) (?v1 State_state_fun$) (?v2 State$) (?v3 State_fset$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (fmember$b ?v2 ?v3)) (fmember$b ?v0 (fimage$a ?v1 ?v3))) ))
(assert (forall ((?v0 State_state_rule_prod_tree_fun$)) (= (fimage$ ?v0 bot$c) bot$e) ))
(assert (forall ((?v0 State_state_rule_prod_tree_fun$) (?v1 State_fset$)) (= (= bot$e (fimage$ ?v0 ?v1)) (= ?v1 bot$c)) ))
(assert (forall ((?v0 State_state_rule_prod_tree_fun$) (?v1 State_fset$)) (= (= (fimage$ ?v0 ?v1) bot$e) (= ?v1 bot$c)) ))
(assert (forall ((?v0 State$) (?v1 State_fset$) (?v2 State_state_rule_prod_tree_fun$)) (=> (fmember$b ?v0 ?v1) (fmember$ (fun_app$o ?v2 ?v0) (fimage$ ?v2 ?v1))) ))
(assert (forall ((?v0 State$) (?v1 State_fset$) (?v2 State_state_fun$)) (=> (fmember$b ?v0 ?v1) (fmember$b (fun_app$s ?v2 ?v0) (fimage$a ?v2 ?v1))) ))
(assert (forall ((?v0 State$) (?v1 State_fset$) (?v2 State_rule_prod_tree$) (?v3 State_state_rule_prod_tree_fun$)) (=> (and (fmember$b ?v0 ?v1) (= ?v2 (fun_app$o ?v3 ?v0))) (fmember$ ?v2 (fimage$ ?v3 ?v1))) ))
(assert (forall ((?v0 State$) (?v1 State_fset$) (?v2 State$) (?v3 State_state_fun$)) (=> (and (fmember$b ?v0 ?v1) (= ?v2 (fun_app$s ?v3 ?v0))) (fmember$b ?v2 (fimage$a ?v3 ?v1))) ))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_state_rule_prod_tree_fun$) (?v2 State_fset$)) (=> (and (fmember$ ?v0 (fimage$ ?v1 ?v2)) (forall ((?v3 State$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v3)) (fmember$b ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 State$) (?v1 State_state_fun$) (?v2 State_fset$)) (=> (and (fmember$b ?v0 (fimage$a ?v1 ?v2)) (forall ((?v3 State$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v3)) (fmember$b ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State_state_rule_prod_tree_fun$) (?v3 State_state_rule_prod_tree_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 State$)) (=> (fmember$b ?v4 ?v1) (= (fun_app$o ?v2 ?v4) (fun_app$o ?v3 ?v4))) )) (= (fimage$ ?v2 ?v0) (fimage$ ?v3 ?v1))) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (= (fun_app$e (less_eq$a ?v0) ?v1) (forall ((?v2 State$)) (=> (fun_app$e (member$ ?v2) ?v0) (fun_app$e (member$ ?v2) ?v1)) )) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (= (fun_app$g (less_eq$b ?v0) ?v1) (forall ((?v2 Rule$)) (=> (fun_app$g (member$a ?v2) ?v0) (fun_app$g (member$a ?v2) ?v1)) )) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (= (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$ao (less_eq$c (uuk$ ?v0)) (uuk$ ?v1))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (= (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$aq (less_eq$e (uul$ ?v0)) (uul$ ?v1))) ))
(assert (forall ((?v0 State_rule_prod_tree_fset$) (?v1 State_state_rule_prod_tree_fun$) (?v2 State_fset$)) (= (less_eq$h ?v0 (fimage$ ?v1 ?v2)) (exists ((?v3 State_fset$)) (and (less_eq$g ?v3 ?v2) (= ?v0 (fimage$ ?v1 ?v3))) )) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (= (fun_app$e (less_eq$a ?v0) ?v1) (forall ((?v2 State$)) (=> (fun_app$e (member$ ?v2) ?v0) (fun_app$e (member$ ?v2) ?v1)) )) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (= (fun_app$g (less_eq$b ?v0) ?v1) (forall ((?v2 Rule$)) (=> (fun_app$g (member$a ?v2) ?v0) (fun_app$g (member$a ?v2) ?v1)) )) ))
(assert (forall ((?v0 State$) (?v1 State_set$) (?v2 State_set$)) (=> (and (fun_app$e (member$ ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (member$ ?v0) ?v2)) ))
(assert (forall ((?v0 Rule$) (?v1 Rule_set$) (?v2 Rule_set$)) (=> (and (fun_app$g (member$a ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v2)) (fun_app$g (member$a ?v0) ?v2)) ))
(assert (forall ((?v0 State$) (?v1 State_set$) (?v2 State_set$)) (=> (and (fun_app$e (member$ ?v0) ?v1) (fun_app$e (less_eq$a ?v1) ?v2)) (fun_app$e (member$ ?v0) ?v2)) ))
(assert (forall ((?v0 Rule$) (?v1 Rule_set$) (?v2 Rule_set$)) (=> (and (fun_app$g (member$a ?v0) ?v1) (fun_app$g (less_eq$b ?v1) ?v2)) (fun_app$g (member$a ?v0) ?v2)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (and (=> (not (fun_app$e (member$ ?v2) ?v0)) false) (=> (fun_app$e (member$ ?v2) ?v1) false))) false) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (and (=> (not (fun_app$g (member$a ?v2) ?v0)) false) (=> (fun_app$g (member$a ?v2) ?v1) false))) false) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (member$ ?v2) ?v0)) (fun_app$e (member$ ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (member$a ?v2) ?v0)) (fun_app$g (member$a ?v2) ?v1)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (member$ ?v2) ?v0)) (fun_app$e (member$ ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (member$a ?v2) ?v0)) (fun_app$g (member$a ?v2) ?v1)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (not (fun_app$e (member$ ?v2) ?v1))) (not (fun_app$e (member$ ?v2) ?v0))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (not (fun_app$g (member$a ?v2) ?v1))) (not (fun_app$g (member$a ?v2) ?v0))) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$) (?v2 State$)) (=> (and (fun_app$e (less_eq$a ?v0) ?v1) (fun_app$e (member$ ?v2) ?v0)) (fun_app$e (member$ ?v2) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$) (?v2 Rule$)) (=> (and (fun_app$g (less_eq$b ?v0) ?v1) (fun_app$g (member$a ?v2) ?v0)) (fun_app$g (member$a ?v2) ?v1)) ))
(assert (forall ((?v0 State_fset$) (?v1 State_fset$) (?v2 State_state_rule_prod_tree_fun$)) (=> (less_eq$g ?v0 ?v1) (less_eq$h (fimage$ ?v2 ?v0) (fimage$ ?v2 ?v1))) ))
(assert (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$) (?v1 State_state_rule_prod_tree_fun$) (?v2 State_fset$)) (= (fimage$b ?v0 (fimage$ ?v1 ?v2)) (fimage$ (fun_app$p (uup$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 State_state_rule_prod_tree_fun$) (?v1 State_state_fun$) (?v2 State_fset$)) (= (fimage$ ?v0 (fimage$a ?v1 ?v2)) (fimage$ (fun_app$r (uuq$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$) (?v1 Rule_rule_stream_state_rule_prod_tree_fun_fun$) (?v2 Rule_stream$)) (= (fun_app$q ?v0 (case_stream$ ?v1 ?v2)) (case_stream$ (uur$ ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 State_set$) (?v1 Nat$)) (=> (not (= ?v0 bot$b)) (fun_app$e (member$ (from_nat_into$a ?v0 ?v1)) ?v0)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Nat$)) (=> (not (= ?v0 bot$)) (fun_app$g (member$a (fun_app$bt (from_nat_into$ ?v0) ?v1)) ?v0)) ))
(assert (forall ((?v0 State_set$) (?v1 State$)) (=> (and (countable$a ?v0) (fun_app$e (member$ ?v1) ?v0)) (exists ((?v2 Nat$)) (= (from_nat_into$a ?v0 ?v2) ?v1) )) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule$)) (=> (and (countable$ ?v0) (fun_app$g (member$a ?v1) ?v0)) (exists ((?v2 Nat$)) (= (fun_app$bt (from_nat_into$ ?v0) ?v2) ?v1) )) ))
(assert (forall ((?v0 State_set$) (?v1 State_bool_fun$)) (=> (countable$a ?v0) (= (forall ((?v2 State$)) (=> (fun_app$e (member$ ?v2) ?v0) (fun_app$a ?v1 ?v2)) ) (forall ((?v2 Nat$)) (=> (fun_app$e (member$ (from_nat_into$a ?v0 ?v2)) ?v0) (fun_app$a ?v1 (from_nat_into$a ?v0 ?v2))) ))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_bool_fun$)) (=> (countable$ ?v0) (= (forall ((?v2 Rule$)) (=> (fun_app$g (member$a ?v2) ?v0) (fun_app$f ?v1 ?v2)) ) (forall ((?v2 Nat$)) (=> (fun_app$g (member$a (fun_app$bt (from_nat_into$ ?v0) ?v2)) ?v0) (fun_app$f ?v1 (fun_app$bt (from_nat_into$ ?v0) ?v2))) ))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State$)) (= (cont$ (fun_app$o (fun_app$k (mkTree$ ?v0) ?v1) ?v2)) (fimage$ (fun_app$k (mkTree$ ?v0) (stl$ (trim$ ?v0 ?v1 ?v2))) (pickEff$ ?v0 (shd$ (trim$ ?v0 ?v1 ?v2)) ?v2))) ))
(assert (forall ((?v0 State_fset$) (?v1 State_state_rule_prod_tree_fun$) (?v2 State_rule_prod_tree_fset$)) (=> (forall ((?v3 State$)) (=> (fmember$b ?v3 ?v0) (fmember$ (fun_app$o ?v1 ?v3) ?v2)) ) (less_eq$h (fimage$ ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 State_fset$) (?v1 State_state_fun$) (?v2 State_fset$)) (=> (forall ((?v3 State$)) (=> (fmember$b ?v3 ?v0) (fmember$b (fun_app$s ?v1 ?v3) ?v2)) ) (less_eq$g (fimage$a ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 Rule_stream$)) (= (stl$ ?v0) (case_stream$a uus$ ?v0)) ))
(assert (forall ((?v0 Rule_stream$)) (= (shd$ ?v0) (case_stream$b uut$ ?v0)) ))
(assert (forall ((?v0 Rule_stream$) (?v1 State$)) (! (= (fun_app$o (fun_app$k (mkTree$ eff$) ?v0) ?v1) (node$ (pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1))) (fimage$ (fun_app$k (mkTree$ eff$) (stl$ (trim$ eff$ ?v0 ?v1))) (pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1)) ?v1)))) :pattern ((fun_app$o (fun_app$k (mkTree$ eff$) ?v0) ?v1)))))
(assert (forall ((?v0 State$)) (! (= (bot$f ?v0) (fun_app$e (member$ ?v0) bot$b)) :pattern ((bot$f ?v0)))))
(assert (forall ((?v0 Rule$)) (! (= (fun_app$f bot$d ?v0) (fun_app$g (member$a ?v0) bot$)) :pattern ((fun_app$f bot$d ?v0)))))
(assert (forall ((?v0 State_set$)) (=> (forall ((?v1 State$)) (=> (fun_app$e (member$ ?v1) ?v0) false) ) (fun_app$e (less_eq$a ?v0) bot$b)) ))
(assert (forall ((?v0 Rule_set$)) (=> (forall ((?v1 Rule$)) (=> (fun_app$g (member$a ?v1) ?v0) false) ) (fun_app$g (less_eq$b ?v0) bot$)) ))
(assert (forall ((?v0 State_rule_prod$) (?v1 State_rule_prod_tree_fset$) (?v2 State_rule_prod$) (?v3 State_rule_prod_tree_fset$)) (= (= (node$ ?v0 ?v1) (node$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Rule_stream$) (?v1 State$)) (= (fun_app$o (fun_app$k (mkTree$ eff$) ?v0) ?v1) (case_stream$ (uuu$ ?v1) (trim$ eff$ ?v0 ?v1))) ))
(assert (forall ((?v0 State$) (?v1 Rule$)) (! (= (fun_app$f (bot$g ?v0) ?v1) (member$b (pair$ ?v0 ?v1) bot$h)) :pattern ((fun_app$f (bot$g ?v0) ?v1)))))
(assert (forall ((?v0 State_rule_prod_set$) (?v1 State_rule_prod_set$)) (= (fun_app$ap (less_eq$d (uuv$ ?v0)) (uuv$ ?v1)) (less_eq$i ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_prod_set$) (?v1 State_rule_prod_set$)) (=> (forall ((?v2 State$) (?v3 Rule$)) (=> (member$b (pair$ ?v2 ?v3) ?v0) (member$b (pair$ ?v2 ?v3) ?v1)) ) (less_eq$i ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_prod$) (?v1 State_rule_prod_tree_fset$)) (! (= (cont$ (node$ ?v0 ?v1)) ?v1) :pattern ((node$ ?v0 ?v1)))))
(assert (forall ((?v0 State_rule_prod_set$) (?v1 State_rule_prod_set$)) (= (= (uuv$ ?v0) (uuv$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (=> (forall ((?v1 State_rule_prod$) (?v2 State_rule_prod_tree_fset$)) (=> (= ?v0 (node$ ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State$)) (= (fun_app$o (fun_app$k (mkTree$ ?v0) ?v1) ?v2) (case_stream$ (uuw$ ?v0 ?v2) (trim$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State$)) (! (= (fun_app$o (fun_app$k (mkTree$ ?v0) ?v1) ?v2) (node$ (pair$ ?v2 (shd$ (trim$ ?v0 ?v1 ?v2))) (fimage$ (fun_app$k (mkTree$ ?v0) (stl$ (trim$ ?v0 ?v1 ?v2))) (pickEff$ ?v0 (shd$ (trim$ ?v0 ?v1 ?v2)) ?v2)))) :pattern ((fun_app$o (fun_app$k (mkTree$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 State_set$) (?v1 State_bool_fun$)) (fun_app$e (less_eq$a (collect$ (fun_app$l (uun$ ?v0) ?v1))) ?v0) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_bool_fun$)) (fun_app$g (less_eq$b (collect$a (fun_app$m (uuo$ ?v0) ?v1))) ?v0) ))
(assert (forall ((?v0 State$) (?v1 State_set$) (?v2 State_set$) (?v3 State_bool_fun$)) (=> (and (fun_app$e (member$ ?v0) ?v1) (fun_app$e (less_eq$a ?v1) (collect$ (fun_app$l (uun$ ?v2) ?v3)))) (fun_app$a ?v3 ?v0)) ))
(assert (forall ((?v0 Rule$) (?v1 Rule_set$) (?v2 Rule_set$) (?v3 Rule_bool_fun$)) (=> (and (fun_app$g (member$a ?v0) ?v1) (fun_app$g (less_eq$b ?v1) (collect$a (fun_app$m (uuo$ ?v2) ?v3)))) (fun_app$f ?v3 ?v0)) ))
(assert (forall ((?v0 State_set$) (?v1 State_set$)) (= (fun_app$ao (less_eq$c (uuk$ ?v0)) (uuk$ ?v1)) (fun_app$e (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (= (fun_app$aq (less_eq$e (uul$ ?v0)) (uul$ ?v1)) (fun_app$g (less_eq$b ?v0) ?v1)) ))
(assert (forall ((?v0 Rule_stream$) (?v1 State$)) (= (root$ (fun_app$o (fun_app$k (mkTree$ eff$) ?v0) ?v1)) (pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1)))) ))
(assert (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State$)) (= (root$ (fun_app$o (fun_app$k (mkTree$ ?v0) ?v1) ?v2)) (pair$ ?v2 (shd$ (trim$ ?v0 ?v1 ?v2)))) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (= (node$ (root$ ?v0) (cont$ ?v0)) ?v0) ))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_tree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_prod$) (?v1 State_rule_prod_tree_fset$)) (! (= (root$ (node$ ?v0 ?v1)) ?v0) :pattern ((node$ ?v0 ?v1)))))
(assert (forall ((?v0 State_rule_prod_tree$)) (=> (=> (= ?v0 (node$ (root$ ?v0) (cont$ ?v0))) false) false) ))
(assert (forall ((?v0 Rule_tree_rule_stream_bool_fun_fun$) (?v1 Rule_tree$) (?v2 Rule_stream$)) (=> (and (fun_app$bo (fun_app$bu ?v0 ?v1) ?v2) (forall ((?v3 Rule_tree$) (?v4 Rule_stream$)) (=> (fun_app$bo (fun_app$bu ?v0 ?v3) ?v4) (exists ((?v5 Rule_tree$) (?v6 Rule_stream$) (?v7 Rule_tree$)) (and (= ?v3 ?v5) (and (= ?v4 ?v6) (and (= (root$a ?v5) (shd$ ?v6)) (and (fmember$a ?v7 (cont$a ?v5)) (or (fun_app$bo (fun_app$bu ?v0 ?v7) (stl$ ?v6)) (ipath$ ?v7 (stl$ ?v6))))))) )) )) (ipath$ ?v1 ?v2)) ))
(assert (forall ((?v0 State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$) (?v1 State_rule_prod_tree$) (?v2 State_rule_prod_stream$)) (=> (and (fun_app$bv (fun_app$bw ?v0 ?v1) ?v2) (forall ((?v3 State_rule_prod_tree$) (?v4 State_rule_prod_stream$)) (=> (fun_app$bv (fun_app$bw ?v0 ?v3) ?v4) (exists ((?v5 State_rule_prod_tree$) (?v6 State_rule_prod_stream$) (?v7 State_rule_prod_tree$)) (and (= ?v3 ?v5) (and (= ?v4 ?v6) (and (= (root$ ?v5) (shd$b ?v6)) (and (fmember$ ?v7 (cont$ ?v5)) (or (fun_app$bv (fun_app$bw ?v0 ?v7) (stl$b ?v6)) (ipath$a ?v7 (stl$b ?v6))))))) )) )) (ipath$a ?v1 ?v2)) ))
(assert (forall ((?v0 Rule_tree$) (?v1 Rule_stream$)) (=> (and (ipath$ ?v0 ?v1) (forall ((?v2 Rule_tree$) (?v3 Rule_stream$) (?v4 Rule_tree$)) (=> (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (root$a ?v2) (shd$ ?v3)) (and (fmember$a ?v4 (cont$a ?v2)) (ipath$ ?v4 (stl$ ?v3)))))) false) )) false) ))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$)) (=> (and (ipath$a ?v0 ?v1) (forall ((?v2 State_rule_prod_tree$) (?v3 State_rule_prod_stream$) (?v4 State_rule_prod_tree$)) (=> (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (root$ ?v2) (shd$b ?v3)) (and (fmember$ ?v4 (cont$ ?v2)) (ipath$a ?v4 (stl$b ?v3)))))) false) )) false) ))
(assert (forall ((?v0 Rule_tree$) (?v1 Rule_stream$)) (= (ipath$ ?v0 ?v1) (exists ((?v2 Rule_tree$) (?v3 Rule_stream$) (?v4 Rule_tree$)) (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (root$a ?v2) (shd$ ?v3)) (and (fmember$a ?v4 (cont$a ?v2)) (ipath$ ?v4 (stl$ ?v3)))))) )) ))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$)) (= (ipath$a ?v0 ?v1) (exists ((?v2 State_rule_prod_tree$) (?v3 State_rule_prod_stream$) (?v4 State_rule_prod_tree$)) (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (root$ ?v2) (shd$b ?v3)) (and (fmember$ ?v4 (cont$ ?v2)) (ipath$a ?v4 (stl$b ?v3)))))) )) ))
(assert (forall ((?v0 Rule_tree$) (?v1 Rule_stream$) (?v2 Rule_tree$)) (=> (and (= (root$a ?v0) (shd$ ?v1)) (and (fmember$a ?v2 (cont$a ?v0)) (ipath$ ?v2 (stl$ ?v1)))) (ipath$ ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$) (?v2 State_rule_prod_tree$)) (=> (and (= (root$ ?v0) (shd$b ?v1)) (and (fmember$ ?v2 (cont$ ?v0)) (ipath$a ?v2 (stl$b ?v1)))) (ipath$a ?v0 ?v1)) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (= (cont$ ?v0) (case_tree$ uux$ ?v0)) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (= (root$ ?v0) (case_tree$a uuy$ ?v0)) ))
(assert (forall ((?v0 Rule_tree$)) (= (shd$ (konig$ ?v0)) (root$a ?v0)) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (= (shd$b (konig$a ?v0)) (root$ ?v0)) ))
(assert (forall ((?v0 State_set$) (?v1 State$)) (=> (and (countable$a ?v0) (fun_app$e (member$ ?v1) ?v0)) (= (from_nat_into$a ?v0 (to_nat_on$ ?v0 ?v1)) ?v1)) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule$)) (=> (and (countable$ ?v0) (fun_app$g (member$a ?v1) ?v0)) (= (fun_app$bt (from_nat_into$ ?v0) (to_nat_on$a ?v0 ?v1)) ?v1)) ))
(assert (forall ((?v0 State_set$) (?v1 State$) (?v2 State$)) (=> (and (countable$a ?v0) (and (fun_app$e (member$ ?v1) ?v0) (fun_app$e (member$ ?v2) ?v0))) (= (= (to_nat_on$ ?v0 ?v1) (to_nat_on$ ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Rule_set$) (?v1 Rule$) (?v2 Rule$)) (=> (and (countable$ ?v0) (and (fun_app$g (member$a ?v1) ?v0) (fun_app$g (member$a ?v2) ?v0))) (= (= (to_nat_on$a ?v0 ?v1) (to_nat_on$a ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (= (tfinite$ ?v0) (exists ((?v1 State_rule_prod_tree$)) (and (= ?v0 ?v1) (forall ((?v2 State_rule_prod_tree$)) (=> (fmember$ ?v2 (cont$ ?v1)) (tfinite$ ?v2)) )) )) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (=> (forall ((?v1 State_rule_prod_tree$)) (=> (fmember$ ?v1 (cont$ ?v0)) (tfinite$ ?v1)) ) (tfinite$ ?v0)) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (=> (and (tfinite$ ?v0) (forall ((?v1 State_rule_prod_tree$)) (=> (and (= ?v0 ?v1) (forall ((?v2 State_rule_prod_tree$)) (=> (fmember$ ?v2 (cont$ ?v1)) (tfinite$ ?v2)) )) false) )) false) ))
(assert (forall ((?v0 Rule_tree$)) (= (stl$ (konig$ ?v0)) (konig$ (eps$ (uuz$ ?v0)))) ))
(assert (forall ((?v0 State_rule_prod_tree$)) (= (stl$b (konig$a ?v0)) (konig$a (eps$a (uva$ ?v0)))) ))
(assert (forall ((?v0 State_set$)) (= (fun_app$e (member$ (eps$b (uuk$ ?v0))) ?v0) (not (= ?v0 bot$b))) ))
(assert (forall ((?v0 Rule_set$)) (= (fun_app$g (member$a (eps$c (uul$ ?v0))) ?v0) (not (= ?v0 bot$))) ))
(check-sat)
(exit)

