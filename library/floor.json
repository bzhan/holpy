{
    "content": [
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "integer",
            "prop": "integer x ⟷ (∃n. abs x = of_nat n)",
            "ty": "def",
            "type": "real ⇒ bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "integer_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃n. (if 0 ≤ x then x else -x) = of_nat n) ⟶ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "∃n. (if 0 ≤ x then x else -x) = of_nat n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ ∃n. (if 0 ≤ x then x else -x) = of_nat n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ 0 ≤ x ⟶ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "0 ≤ x",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ x ⊢ 0 ≤ x"
                },
                {
                    "args": "if_P",
                    "id": "0.1.1",
                    "prevs": [
                        "0.0",
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ x, ∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ ∃n. x = of_nat n"
                },
                {
                    "args": "disjI1, {A: ∃n. x = of_nat n, B: ∃n. x = -(of_nat n)}",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ x, ∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.0",
                        "0.1.2"
                    ],
                    "rule": "intros",
                    "th": "∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ 0 ≤ x ⟶ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ ¬(0 ≤ x) ⟶ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "¬(0 ≤ x)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ x) ⊢ ¬(0 ≤ x)"
                },
                {
                    "args": "if_not_P",
                    "id": "0.2.1",
                    "prevs": [
                        "0.0",
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(0 ≤ x), ∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ ∃n. -x = of_nat n"
                },
                {
                    "args": "n, nat",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "-x = of_nat n",
                    "id": "0.2.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "-x = of_nat n ⊢ -x = of_nat n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "-x = of_nat n ⊢ of_nat n = -x"
                },
                {
                    "args": "real_neg_neg, x = --x",
                    "id": "0.2.5",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x = --x"
                },
                {
                    "args": "x = -(of_nat n)",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.4",
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(0 ≤ x), -x = of_nat n, ∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ x = -(of_nat n)"
                },
                {
                    "args": "exI, {P: λn. x = -(of_nat n), a: n}",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 ≤ x), -x = of_nat n, ∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ ∃a1. x = -(of_nat a1)"
                },
                {
                    "args": "disjI2, {A: ∃n. x = of_nat n, B: ∃n. x = -(of_nat n)}",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(0 ≤ x), -x = of_nat n, ∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "∃n. -x = of_nat n",
                    "id": "0.2.9",
                    "prevs": [
                        "0.2.0",
                        "0.2.1",
                        "0.2.2",
                        "0.2.3",
                        "0.2.8"
                    ],
                    "rule": "intros",
                    "th": "∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ ¬(0 ≤ x) ⟶ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "classical_cases",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "∃n. (if 0 ≤ x then x else -x) = of_nat n ⊢ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃n. (if 0 ≤ x then x else -x) = of_nat n) ⟶ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⟶ (∃n. (if 0 ≤ x then x else -x) = of_nat n)"
                },
                {
                    "args": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (∃n. x = of_nat n) ⟶ (∃n. (if 0 ≤ x then x else -x) = of_nat n)"
                },
                {
                    "args": "∃n. x = of_nat n",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n. x = of_nat n ⊢ ∃n. x = of_nat n"
                },
                {
                    "args": "n, nat",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "x = of_nat n",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = of_nat n ⊢ x = of_nat n"
                },
                {
                    "args": "real_pos, {n: n}",
                    "id": "1.1.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ of_nat n"
                },
                {
                    "args": "0 ≤ x",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.2",
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = of_nat n, ∃n. x = of_nat n, (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ 0 ≤ x"
                },
                {
                    "args": "if_P, (if 0 ≤ x then x else -x) = of_nat n",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.2",
                        "1.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = of_nat n, ∃n. x = of_nat n, (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (if 0 ≤ x then x else -x) = of_nat n"
                },
                {
                    "args": "exI, {P: λn. (if 0 ≤ x then x else -x) = of_nat n, a: n}",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = of_nat n, ∃n. x = of_nat n, (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ ∃a1. (if 0 ≤ x then x else -x) = of_nat a1"
                },
                {
                    "args": "∃n. x = of_nat n",
                    "id": "1.1.7",
                    "prevs": [
                        "1.1.0",
                        "1.1.0",
                        "1.1.1",
                        "1.1.2",
                        "1.1.6"
                    ],
                    "rule": "intros",
                    "th": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (∃n. x = of_nat n) ⟶ (∃n. (if 0 ≤ x then x else -x) = of_nat n)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (∃n. x = -(of_nat n)) ⟶ (∃n. (if 0 ≤ x then x else -x) = of_nat n)"
                },
                {
                    "args": "∃n. x = -(of_nat n)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n. x = -(of_nat n) ⊢ ∃n. x = -(of_nat n)"
                },
                {
                    "args": "n, nat",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "x = -(of_nat n)",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = -(of_nat n) ⊢ x = -(of_nat n)"
                },
                {
                    "args": "(if 0 ≤ x then x else -x) = (if 0 ≤ -x then -x else x)",
                    "id": "1.2.3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (if 0 ≤ x then x else -x) = (if 0 ≤ -x then -x else x)"
                },
                {
                    "args": "real_pos, {n: n}",
                    "id": "1.2.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::real) ≤ of_nat n"
                },
                {
                    "args": "real_neg_neg, (0::real) ≤ --(of_nat n)",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = -(of_nat n), ∃n. x = -(of_nat n), (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (0::real) ≤ --(of_nat n)"
                },
                {
                    "args": "0 ≤ -x",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.2",
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = -(of_nat n), ∃n. x = -(of_nat n), (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ 0 ≤ -x"
                },
                {
                    "args": "real_neg_neg, --(of_nat n) = of_nat n",
                    "id": "1.2.7",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ --(of_nat n) = of_nat n"
                },
                {
                    "args": "-x = of_nat n",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.2",
                        "1.2.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = -(of_nat n), ∃n. x = -(of_nat n), (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ -x = of_nat n"
                },
                {
                    "args": "if_P, (if 0 ≤ -x then -x else x) = of_nat n",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.8",
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = -(of_nat n), ∃n. x = -(of_nat n), (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (if 0 ≤ -x then -x else x) = of_nat n"
                },
                {
                    "args": "(if 0 ≤ x then x else -x) = of_nat n",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.3",
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = -(of_nat n), ∃n. x = -(of_nat n), (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (if 0 ≤ x then x else -x) = of_nat n"
                },
                {
                    "args": "exI, {P: λn. (if 0 ≤ x then x else -x) = of_nat n, a: n}",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = -(of_nat n), ∃n. x = -(of_nat n), (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ ∃a1. (if 0 ≤ x then x else -x) = of_nat a1"
                },
                {
                    "args": "∃n. x = -(of_nat n)",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.0",
                        "1.2.0",
                        "1.2.1",
                        "1.2.2",
                        "1.2.11"
                    ],
                    "rule": "intros",
                    "th": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ (∃n. x = -(of_nat n)) ⟶ (∃n. (if 0 ≤ x then x else -x) = of_nat n)"
                },
                {
                    "args": "disjE",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "(∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⊢ ∃n. (if 0 ≤ x then x else -x) = of_nat n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n)) ⟶ (∃n. (if 0 ≤ x then x else -x) = of_nat n)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃n. (if 0 ≤ x then x else -x) = of_nat n) ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "abs_def, (∃n. abs x = of_nat n) ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (∃n. abs x = of_nat n) ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "integer_def, integer x ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ integer x ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ integer x ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))"
                }
            ],
            "prop": "integer x ⟷ (∃n. x = of_nat n) ∨ (∃n. x = -(of_nat n))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "integer_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "abs_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "case": "0 ≤ x",
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0",
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0",
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal_id": "0.2.4",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.2.4"
                    ],
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal_id": "1.1.3",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "goal": "0 ≤ x",
                    "goal_id": "1.1.3",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.2"
                    ],
                    "goal_id": "1.1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pos"
                },
                {
                    "fact_ids": [
                        "1.1.4"
                    ],
                    "goal_id": "1.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "goal": "(if 0 ≤ x then x else -x) = (if 0 ≤ -x then -x else x)",
                    "goal_id": "1.2.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "0 ≤ -x",
                    "goal_id": "1.2.4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.2"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "real_pos"
                },
                {
                    "fact_ids": [
                        "1.2.6"
                    ],
                    "goal_id": "1.2.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "1.2.2"
                    ],
                    "goal_id": "1.2.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_neg_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "real_abs_integer_lemma",
            "prop": "integer x ⟶ ¬(x = 0) ⟶ 1 ≤ abs x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "integer_add",
            "prop": "integer x ⟶ integer y ⟶ integer (x + y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "integer_sub",
            "prop": "integer x ⟶ integer y ⟶ integer (x - y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "integer_mul",
            "prop": "integer x ⟶ integer y ⟶ integer (x * y)",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "integer_pow",
            "prop": "integer x ⟶ integer (x ^ n)",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "integer_neg",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "real_abs_neg, (∃n. abs (-x) = of_nat n) ⟷ (∃n. abs x = of_nat n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (∃n. abs (-x) = of_nat n) ⟷ (∃n. abs x = of_nat n)"
                },
                {
                    "args": "integer_def, integer (-x) ⟷ integer x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ integer (-x) ⟷ integer x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ integer (-x) ⟷ integer x"
                }
            ],
            "prop": "integer (-x) ⟷ integer x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "integer_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_abs_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "rational",
            "prop": "rational x ⟷ (∃m. ∃n. integer m ∧ integer n ∧ ¬(n = 0) ∧ x = m / n)",
            "ty": "def",
            "type": "real ⇒ bool"
        },
        {
            "name": "real_truncate_pos",
            "prop": "0 ≤ x ⟶ (∃n. ∃r. 0 ≤ r ∧ r < 1 ∧ x = of_nat n + r)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "real_truncate",
            "prop": "∃n. ∃r. integer n ∧ 0 ≤ r ∧ r < 1 ∧ x = n + r",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "floor",
            "prop": "floor x = (THE n. integer n ∧ 0 ≤ x - n ∧ x - n < 1)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "frac",
            "prop": "frac x = (THE r. integer (x - r) ∧ 0 ≤ r ∧ r < 1)",
            "ty": "def",
            "type": "real ⇒ real"
        },
        {
            "name": "floor_unique",
            "prop": "integer a ∧ a ≤ x ∧ x < a + 1 ⟷ floor x = a",
            "ty": "thm",
            "vars": {
                "a": "real",
                "x": "real"
            }
        },
        {
            "name": "floor_eq_0",
            "prop": "floor x = 0 ⟷ 0 ≤ x ∧ x < 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "floor",
            "prop": "integer (floor x) ∧ floor x ≤ x ∧ x < floor x + 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "frac_floor",
            "prop": "frac x = x - floor x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "name": "floor_nat",
            "prop": "floor (of_nat n) = of_nat n",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_le_floor",
            "prop": "integer n ⟶ n ≤ floor x ⟷ n ≤ x",
            "ty": "thm",
            "vars": {
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_floor_le",
            "prop": "integer n ⟶ floor x ≤ n ⟷ x - 1 < n",
            "ty": "thm",
            "vars": {
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_floor_lt",
            "prop": "integer n ⟶ floor x < n ⟷ x < n",
            "ty": "thm",
            "vars": {
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_lt_floor",
            "prop": "integer n ⟶ n < floor x ⟷ n ≤ x - 1",
            "ty": "thm",
            "vars": {
                "n": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "floor_pos",
            "prop": "0 ≤ x ⟶ (∃n. floor x = of_nat n)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "floor_div_div",
            "prop": "¬(m = 0) ⟶ floor (of_nat n / of_nat m) = of_nat (n DIV m)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "floor_mono",
            "prop": "x ≤ y ⟶ floor x ≤ floor y",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_floor_eq",
            "prop": "floor x = x ⟷ integer x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_floor_lt_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ floor x ≤ x ∧ ¬(floor x = x) ⟶ ¬(integer x)"
                },
                {
                    "args": "floor x ≤ x ∧ ¬(floor x = x)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "floor x ≤ x ∧ ¬(floor x = x) ⊢ floor x ≤ x ∧ ¬(floor x = x)"
                },
                {
                    "args": "conjD2, {A: floor x ≤ x, B: ¬(floor x = x)}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "floor x ≤ x ∧ ¬(floor x = x) ⊢ ¬(floor x = x)"
                },
                {
                    "args": "real_floor_eq",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "floor x ≤ x ∧ ¬(floor x = x) ⊢ ¬(integer x)"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ floor x ≤ x ∧ ¬(floor x = x) ⟶ ¬(integer x)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(integer x) ⟶ floor x ≤ x ∧ ¬(floor x = x)"
                },
                {
                    "args": "¬(integer x)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(integer x) ⊢ ¬(integer x)"
                },
                {
                    "args": "floor, {x: x}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ integer (floor x) ∧ floor x ≤ x ∧ x < floor x + 1"
                },
                {
                    "args": "conjD2, {A: integer (floor x), B: floor x ≤ x ∧ x < floor x + 1}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ floor x ≤ x ∧ x < floor x + 1"
                },
                {
                    "args": "conjD1",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ floor x ≤ x"
                },
                {
                    "args": "real_floor_eq, ¬(floor x = x)",
                    "id": "1.4",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(integer x) ⊢ ¬(floor x = x)"
                },
                {
                    "args": "conjI",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(integer x) ⊢ floor x ≤ x ∧ ¬(floor x = x)"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(integer x) ⟶ floor x ≤ x ∧ ¬(floor x = x)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ floor x ≤ x ∧ ¬(floor x = x) ⟷ ¬(integer x)"
                },
                {
                    "args": "real_lt_le, floor x < x ⟷ ¬(integer x)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ floor x < x ⟷ ¬(integer x)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ floor x < x ⟷ ¬(integer x)"
                }
            ],
            "prop": "floor x < x ⟷ ¬(integer x)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_lt_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "real_floor_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_x": "x",
                    "theorem": "floor"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_floor_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_frac_eq_0",
            "prop": "frac x = 0 ⟷ integer x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_frac_pos_lt",
            "prop": "0 < frac x ⟷ ¬(integer x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "frac_nat",
            "prop": "frac (of_nat n) = 0",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_floor_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "integer x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "integer x ⊢ integer x"
                },
                {
                    "args": "real_floor_eq, floor x = x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer x ⊢ floor x = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ integer x ⟶ floor x = x"
                }
            ],
            "prop": "integer x ⟶ floor x = x",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_floor_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_frac_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "integer x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "integer x ⊢ integer x"
                },
                {
                    "args": "real_frac_eq_0, frac x = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "integer x ⊢ frac x = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ integer x ⟶ frac x = 0"
                }
            ],
            "prop": "integer x ⟶ frac x = 0",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "real_frac_eq_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_floor_add",
            "prop": [
                "floor (x + y) = ",
                "(if frac x + frac y < 1 then floor x + floor y else floor x + floor y + 1)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "real_floor_triangle",
            "prop": "floor x + floor y ≤ floor (x + y) ∧ floor (x + y) ≤ floor x + floor y + 1",
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_floor_neg",
            "prop": "floor (-x) = (if integer x then -x else -(floor x + 1))",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_frac_add",
            "prop": [
                "frac (x + y) = ",
                "(if frac x + frac y < 1 then frac x + frac y else frac x + frac y - 1)"
            ],
            "ty": "thm",
            "vars": {
                "x": "real",
                "y": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "floor_pos_le",
            "prop": "0 ≤ floor x ⟷ 0 ≤ x",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "frac_unique",
            "prop": "integer (x - a) ∧ 0 ≤ a ∧ a < 1 ⟷ frac x = a",
            "ty": "thm",
            "vars": {
                "a": "real",
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_frac_eq",
            "prop": "frac x = x ⟷ 0 ≤ x ∧ x < 1",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "integer_round",
            "prop": "∃n. integer n ∧ abs (x - n) ≤ 1 / 2",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "frac_div_mod",
            "prop": "¬(n = 0) ⟶ frac (of_nat m / of_nat n) = of_nat (m MOD n) / of_nat n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "frac_neg",
            "prop": "frac (-x) = (if integer x then 0 else 1 - frac x)",
            "ty": "thm",
            "vars": {
                "x": "real"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "real_floor_floor_div",
            "prop": "floor (floor x / of_nat n) = floor (x / of_nat n)",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "real"
            }
        }
    ],
    "description": "The integer/rational-value reals, and the 'floor' and 'frac' functions.",
    "imports": [
        "realset"
    ],
    "name": "floor"
}