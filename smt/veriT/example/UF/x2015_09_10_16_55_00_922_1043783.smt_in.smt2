(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort Nat$ 0)
(declare-sort Num_num_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Num_bool_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_fun$ 0)
(declare-sort Bool_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_bool_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_tree_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Bool_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_bool_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_bool_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_bool_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_tree_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_tree_nat_nat_prod_tree_fun$ 0)
(declare-sort Nat_nat_prod_tree_tree_tree_nat_nat_prod_tree_tree_tree_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_tree_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_fun_nat_nat_prod_tree_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_bool_fun_fun_nat_nat_prod_nat_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun_fun$ 0)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$) Nat$)
(declare-fun snd$ (Nat_nat_prod$) Nat$)
(declare-fun pair$ (Nat$ Nat$) Nat_nat_prod$)
(declare-sort Nat_nat_prod_tree$ 0)
(declare-fun root$ (Nat_nat_prod_tree$) Nat_nat_prod$)
(declare-fun left$ (Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun right$ (Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun node$ (Nat_nat_prod$ Nat_nat_prod_tree$ Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-sort Num$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-fun one$ () Num$)
(declare-fun select$ (Num$) Num$)
(declare-fun bit0$ (Num$) Num$)
(declare-fun selecta$ (Num$) Num$)
(declare-fun bit1$ (Num$) Num$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-sort Nat_nat_prod_tree_tree$ 0)
(declare-sort Nat_nat_prod_tree_tree_tree$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_tree$ 0)
(declare-fun root$a (Nat_nat_prod_tree_tree$) Nat_nat_prod_tree$)
(declare-fun left$a (Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree$)
(declare-fun right$a (Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree$)
(declare-fun node$a (Nat_nat_prod_tree$ Nat_nat_prod_tree_tree$ Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree$)
(declare-fun root$b (Nat_nat_prod_tree_tree_tree$) Nat_nat_prod_tree_tree$)
(declare-fun left$b (Nat_nat_prod_tree_tree_tree$) Nat_nat_prod_tree_tree_tree$)
(declare-fun right$b (Nat_nat_prod_tree_tree_tree$) Nat_nat_prod_tree_tree_tree$)
(declare-fun node$b (Nat_nat_prod_tree_tree$ Nat_nat_prod_tree_tree_tree$ Nat_nat_prod_tree_tree_tree$) Nat_nat_prod_tree_tree_tree$)
(declare-fun selectb$ (Nat_nat_prod_nat_nat_prod_fun_tree$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun selectc$ (Nat_nat_prod_nat_nat_prod_fun_tree$) Nat_nat_prod_nat_nat_prod_fun_tree$)
(declare-fun selectd$ (Nat_nat_prod_nat_nat_prod_fun_tree$) Nat_nat_prod_nat_nat_prod_fun_tree$)
(declare-fun node$c (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun_tree$ Nat_nat_prod_nat_nat_prod_fun_tree$) Nat_nat_prod_nat_nat_prod_fun_tree$)
(declare-fun uu$ () Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun inc$ (Num$) Num$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ () Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uub$ (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uuc$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$)
(declare-fun uud$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uue$ (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$ Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uuf$ (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$)
(declare-fun uug$ (Bool_bool_fun$ Nat_nat_bool_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uuh$ (Nat_nat_prod_bool_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uui$ (Bool_nat_nat_prod_fun$ Nat_nat_bool_fun_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uuj$ (Nat_nat_prod_nat_nat_prod_fun_bool_fun$ Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uuk$ (Bool_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_bool_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$)
(declare-fun uul$ (Nat_nat_prod_nat_nat_prod_prod_bool_fun$) Nat_nat_prod_nat_nat_prod_bool_fun_fun$)
(declare-fun uum$ (Nat_nat_prod_bool_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uun$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uuo$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun uup$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun uuq$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uur$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun uus$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uut$ (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uuu$ (Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uuv$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uuw$ (Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_nat_nat_prod_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$)
(declare-fun uux$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uuy$ (Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$)
(declare-fun uuz$ (Nat_nat_bool_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uva$ (Nat_nat_prod_nat_nat_prod_bool_fun_fun$ Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uvb$ (Nat_nat_bool_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_bool_fun_fun_fun$)
(declare-fun uvc$ (Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun uvd$ () Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uve$ () Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun uvf$ () Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uvg$ (Bool) Nat_nat_prod_nat_nat_prod_bool_fun_fun_nat_nat_prod_nat_nat_prod_bool_fun_fun_fun$)
(declare-fun uvh$ (Bool Nat_nat_bool_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uvi$ () Nat_nat_prod_nat_nat_prod_bool_fun_fun$)
(declare-fun uvj$ () Nat_nat_bool_fun_fun$)
(declare-fun uvk$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uvl$ (Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$ Nat_nat_prod$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uvm$ () Nat_nat_prod_tree_nat_nat_prod_tree_fun$)
(declare-fun uvn$ () Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun uvo$ (Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_fun$)
(declare-fun uvp$ (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_fun$)
(declare-fun uvq$ (Nat_nat_prod_tree$) Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$)
(declare-fun uvr$ (Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$)
(declare-fun uvs$ (Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)
(declare-fun uvt$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun uvu$ (Nat$ Nat$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun uvv$ () Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun uvw$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_fun$)
(declare-fun uvx$ (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$)
(declare-fun bird$ () Nat_nat_prod_tree$)
(declare-fun bitM$ (Num$) Num$)
(declare-fun comp$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun fmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun one$a () Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun comp$a (Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$)
(declare-fun comp$b (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_fun$)
(declare-fun comp$c (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$)
(declare-fun comp$d (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$)
(declare-fun comp$e (Nat_nat_prod_nat_nat_prod_tree_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$)
(declare-fun comp$f (Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_nat_nat_prod_tree_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$)
(declare-fun comp$g (Nat_nat_prod_tree_nat_nat_prod_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_fun_fun$)
(declare-fun comp$h (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_tree_nat_nat_prod_fun_nat_nat_prod_tree_nat_nat_prod_fun_fun$)
(declare-fun comp$i (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun comp$j (Nat_nat_prod_tree_tree_tree_nat_nat_prod_tree_tree_tree_fun$ Nat_nat_prod_tree_tree_tree_nat_nat_prod_tree_tree_tree_fun$) Nat_nat_prod_tree_tree_tree_nat_nat_prod_tree_tree_tree_fun$)
(declare-fun comp$k (Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_nat_nat_prod_fun_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_nat_nat_prod_fun_tree_nat_nat_prod_tree_fun$)
(declare-fun comp$l (Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun_fun$)
(declare-fun minus$ (Nat$ Nat$) Nat$)
(declare-fun plus$a (Num$) Num_num_fun$)
(declare-fun fun_app$ (Nat_nat_nat_prod_fun$ Nat$) Nat_nat_prod$)
(declare-fun mediant$ () Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)
(declare-fun numeral$ (Num$) Nat$)
(declare-fun uncurry$ (Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$a (Nat_nat_nat_nat_prod_fun_fun$ Nat$) Nat_nat_nat_prod_fun$)
(declare-fun fun_app$b (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$c (Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$d (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$e (Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun$)
(declare-fun fun_app$f (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)
(declare-fun fun_app$g (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)
(declare-fun fun_app$h (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)
(declare-fun fun_app$i (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod$)
(declare-fun fun_app$j (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$) Nat_nat_prod$)
(declare-fun fun_app$k (Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree$)
(declare-fun fun_app$l (Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun fun_app$m (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) Nat_nat_prod_tree_tree$)
(declare-fun fun_app$n (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree$)
(declare-fun fun_app$o (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) Nat_nat_prod$)
(declare-fun fun_app$p (Nat_nat_nat_prod_nat_nat_prod_fun_fun$ Nat$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$q (Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$ Nat$) Nat_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun fun_app$r (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$s (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$t (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun fun_app$u (Nat_nat_prod_bool_fun$ Nat_nat_prod$) Bool)
(declare-fun fun_app$v (Nat_nat_prod_nat_nat_prod_bool_fun_fun$ Nat_nat_prod$) Nat_nat_prod_bool_fun$)
(declare-fun fun_app$w (Nat_nat_prod_nat_nat_prod_prod_bool_fun$ Nat_nat_prod_nat_nat_prod_prod$) Bool)
(declare-fun fun_app$x (Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun fun_app$y (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$z (Nat_nat_nat_prod_nat_nat_prod_prod_fun$ Nat$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun map_tree$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun$)
(declare-fun uncurry$a (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)
(declare-fun uncurry$b (Nat_nat_prod_nat_nat_prod_bool_fun_fun$) Nat_nat_prod_nat_nat_prod_prod_bool_fun$)
(declare-fun uncurry$c (Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun uncurry$d (Nat_nat_bool_fun_fun$) Nat_nat_prod_bool_fun$)
(declare-fun uncurry$e (Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun uncurry$f (Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun uncurry$g (Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$aa (Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$ Nat$) Nat_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$ab (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$ac (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$ad (Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun fun_app$ae (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun fun_app$af (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_bool_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_bool_fun_fun$)
(declare-fun fun_app$ag (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun fun_app$ah (Nat_nat_nat_nat_prod_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun fun_app$ai (Nat_nat_prod_nat_nat_prod_bool_fun_fun_nat_nat_prod_nat_nat_prod_bool_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_bool_fun_fun$) Nat_nat_prod_nat_nat_prod_bool_fun_fun$)
(declare-fun fun_app$aj (Bool_nat_nat_prod_fun$ Bool) Nat_nat_prod$)
(declare-fun fun_app$ak (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$al (Nat_nat_bool_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ Nat_nat_bool_fun_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun fun_app$am (Bool_nat_nat_prod_nat_nat_prod_fun_fun$ Bool) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$an (Nat_nat_prod_nat_nat_prod_fun_bool_fun$ Nat_nat_prod_nat_nat_prod_fun$) Bool)
(declare-fun fun_app$ao (Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun_fun$ Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$)
(declare-fun fun_app$ap (Num_num_fun$ Num$) Num$)
(declare-fun fun_app$aq (Nat_nat_prod_nat_nat_prod_tree_fun$ Nat_nat_prod$) Nat_nat_prod_tree$)
(declare-fun fun_app$ar (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_tree_fun$)
(declare-fun fun_app$as (Nat_nat_prod_tree_nat_nat_prod_fun$ Nat_nat_prod_tree$) Nat_nat_prod$)
(declare-fun fun_app$at (Nat_nat_prod_tree_tree_tree_nat_nat_prod_tree_tree_tree_fun$ Nat_nat_prod_tree_tree_tree$) Nat_nat_prod_tree_tree_tree$)
(declare-fun fun_app$au (Nat_nat_prod_nat_nat_prod_fun_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_nat_nat_prod_fun_tree$) Nat_nat_prod_tree$)
(declare-fun fun_app$av (Nat_nat_prod_nat_nat_prod_tree_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$ Nat_nat_prod_nat_nat_prod_tree_fun$) Nat_nat_prod_nat_nat_prod_tree_fun$)
(declare-fun fun_app$aw (Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_fun_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_nat_nat_prod_fun$)
(declare-fun fun_app$ax (Nat_nat_prod_tree_nat_nat_prod_fun_nat_nat_prod_tree_nat_nat_prod_fun_fun$ Nat_nat_prod_tree_nat_nat_prod_fun$) Nat_nat_prod_tree_nat_nat_prod_fun$)
(declare-fun fun_app$ay (Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$az (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$)
(declare-fun fun_app$ba (Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$)
(declare-fun fun_app$bb (Num_bool_fun$ Num$) Bool)
(declare-fun map_tree$a (Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)
(declare-fun map_tree$b (Nat_nat_prod_nat_nat_prod_tree_fun$ Nat_nat_prod_tree$) Nat_nat_prod_tree_tree$)
(declare-fun map_tree$c (Nat_nat_prod_tree_nat_nat_prod_fun$ Nat_nat_prod_tree_tree$) Nat_nat_prod_tree$)
(declare-fun map_tree$d (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) Nat_nat_prod_tree_tree_tree_nat_nat_prod_tree_tree_tree_fun$)
(declare-fun map_tree$e (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_tree_nat_nat_prod_tree_fun$)
(declare-fun odd_mirror$ (Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun odd_mirror$a (Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree$)
(declare-fun unfold_tree$ (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) Nat_nat_prod_tree_tree_tree$)
(declare-fun stern_brocot$ () Nat_nat_prod_tree$)
(declare-fun tree_recurse$ (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun$)
(declare-fun unfold_tree$a (Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$) Nat_nat_prod_tree_tree$)
(declare-fun unfold_tree$b (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_tree$)
(declare-fun unfold_tree$c (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) Nat_nat_prod_tree$)
(declare-fun unfold_tree$d (Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_tree$) Nat_nat_prod_tree_tree$)
(declare-fun unfold_tree$e (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_tree_fun_fun_fun$)
(declare-fun unfold_tree$f (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree_tree$)
(declare-fun tree_recurse$a (Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$ Nat_nat_prod_tree_tree$) Nat_nat_prod_tree_tree_tree$)
(declare-fun tree_recurse$b (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_tree$)
(declare-fun tree_recurse$c (Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_tree_nat_nat_prod_tree_fun$ Nat_nat_prod_tree$) Nat_nat_prod_tree_tree$)
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uua$ ?v0) ?v1) (pair$ (plus$ ?v0 ?v1) ?v1)) :pattern ((fun_app$ (fun_app$a uua$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uvd$ ?v0) ?v1) (pair$ ?v0 (plus$ ?v0 ?v1))) :pattern ((fun_app$ (fun_app$a uvd$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$)) (! (= (fun_app$b (fun_app$c uve$ ?v0) ?v1) (pair$a ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uve$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uvf$ ?v0) ?v1) (pair$ ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uvf$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (pair$ ?v1 ?v0)) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$)) (! (= (fun_app$d (uvt$ ?v0) ?v1) (fun_app$d (comp$ ?v1) ?v0)) :pattern ((fun_app$d (uvt$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (! (= (fun_app$e (uvr$ ?v0) ?v1) (fun_app$e (comp$a ?v1) ?v0)) :pattern ((fun_app$e (uvr$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (! (= (fun_app$f (uvp$ ?v0) ?v1) (fun_app$f (comp$b ?v1) ?v0)) :pattern ((fun_app$f (uvp$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (! (= (fun_app$g (uvx$ ?v0) ?v1) (fun_app$h (comp$c ?v1) ?v0)) :pattern ((fun_app$g (uvx$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod_nat_nat_prod_fun$)) (! (= (fun_app$i (uvs$ ?v0) ?v1) (fun_app$j ?v1 ?v0)) :pattern ((fun_app$i (uvs$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_tree$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (! (= (fun_app$k (uvq$ ?v0) ?v1) (fun_app$l ?v1 ?v0)) :pattern ((fun_app$k (uvq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_tree_tree$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (! (= (fun_app$m (uvo$ ?v0) ?v1) (fun_app$n ?v1 ?v0)) :pattern ((fun_app$m (uvo$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (! (= (fun_app$o (uvw$ ?v0) ?v1) (fun_app$i ?v1 ?v0)) :pattern ((fun_app$o (uvw$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$p (fun_app$q uvv$ ?v0) ?v1) (uncurry$ (uvu$ ?v0 ?v1))) :pattern ((fun_app$p (fun_app$q uvv$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$b (fun_app$c (uuo$ ?v0) ?v1) ?v2) (fun_app$r ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (uuo$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$s (uur$ ?v0) ?v1) ?v2) (fun_app$t ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$j (fun_app$s (uur$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_bool_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$u (fun_app$v (uul$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$u (fun_app$v (uul$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$s (fun_app$x (uun$ ?v0) ?v1) ?v2) (fun_app$y ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$s (fun_app$x (uun$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$z (fun_app$aa (uup$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$z (fun_app$aa (uup$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$a (uuq$ ?v0) ?v1) ?v2) (fun_app$j ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uuq$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ab (fun_app$ac (uum$ ?v0) ?v1) ?v2) (fun_app$u ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$ab (fun_app$ac (uum$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$p (fun_app$q (uus$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$p (fun_app$q (uus$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$s (fun_app$x (uvk$ ?v0) ?v1) ?v2) ?v3) (fun_app$j (fun_app$s (fun_app$x ?v0 ?v2) ?v3) ?v1)) :pattern ((fun_app$j (fun_app$s (fun_app$x (uvk$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uvl$ ?v0 ?v1) ?v2) ?v3) (fun_app$j (fun_app$p (fun_app$q ?v0 ?v2) ?v3) ?v1)) :pattern ((fun_app$ (fun_app$a (uvl$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uvu$ ?v0 ?v1) ?v2) ?v3) (pair$ (plus$ ?v0 ?v2) (plus$ ?v1 ?v3))) :pattern ((fun_app$ (fun_app$a (uvu$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$s (fun_app$ad (uux$ ?v0) ?v1) ?v2) ?v3) (fun_app$t (uncurry$a ?v0) (fun_app$b (fun_app$c ?v1 ?v2) ?v3))) :pattern ((fun_app$j (fun_app$s (fun_app$ad (uux$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uuv$ ?v0 ?v1) ?v2) ?v3) (fun_app$t (uncurry$a ?v0) (fun_app$z (fun_app$aa ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uuv$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$ac (uva$ ?v0 ?v1) ?v2) ?v3) (fun_app$w (uncurry$b ?v0) (fun_app$z (fun_app$aa ?v1 ?v2) ?v3))) :pattern ((fun_app$ab (fun_app$ac (uva$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$z (fun_app$aa (uvc$ ?v0 ?v1) ?v2) ?v3) (fun_app$b (uncurry$c ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$z (fun_app$aa (uvc$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$s (fun_app$ae (uuu$ ?v0) ?v1) ?v2) ?v3) (fun_app$j (uncurry$ ?v0) (fun_app$j (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$j (fun_app$s (fun_app$ae (uuu$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uut$ ?v0 ?v1) ?v2) ?v3) (fun_app$j (uncurry$ ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uut$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$u (fun_app$v (fun_app$af (uvb$ ?v0) ?v1) ?v2) ?v3) (fun_app$u (uncurry$d ?v0) (fun_app$j (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$u (fun_app$v (fun_app$af (uvb$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$ac (uuz$ ?v0 ?v1) ?v2) ?v3) (fun_app$u (uncurry$d ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ab (fun_app$ac (uuz$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$s (fun_app$x (fun_app$ag (uuy$ ?v0) ?v1) ?v2) ?v3) (fun_app$s (uncurry$e ?v0) (fun_app$j (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$s (fun_app$x (fun_app$ag (uuy$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$p (fun_app$q (fun_app$ah (uuw$ ?v0) ?v1) ?v2) ?v3) (fun_app$s (uncurry$e ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$p (fun_app$q (fun_app$ah (uuw$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool) (?v1 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$u (fun_app$v (fun_app$ai (uvg$ ?v0) ?v1) ?v2) ?v3) (and ?v0 (fun_app$u (fun_app$v ?v1 ?v2) ?v3))) :pattern ((fun_app$u (fun_app$v (fun_app$ai (uvg$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$ac (uvh$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2) ?v3))) :pattern ((fun_app$ab (fun_app$ac (uvh$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$s (fun_app$ae (uud$ ?v0) ?v1) ?v2) ?v3) (fun_app$j ?v0 (fun_app$j (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$j (fun_app$s (fun_app$ae (uud$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uub$ ?v0 ?v1) ?v2) ?v3) (fun_app$j ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uub$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$ac (uuh$ ?v0 ?v1) ?v2) ?v3) (fun_app$u ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ab (fun_app$ac (uuh$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$p (fun_app$q (fun_app$ah (uuc$ ?v0) ?v1) ?v2) ?v3) (fun_app$s ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$p (fun_app$q (fun_app$ah (uuc$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool_nat_nat_prod_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uui$ ?v0 ?v1) ?v2) ?v3) (fun_app$aj ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uui$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$ac (uug$ ?v0 ?v1) ?v2) ?v3) (fun_app$ak ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2) ?v3))) :pattern ((fun_app$ab (fun_app$ac (uug$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$p (fun_app$q (fun_app$al (uuk$ ?v0) ?v1) ?v2) ?v3) (fun_app$am ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2) ?v3))) :pattern ((fun_app$p (fun_app$q (fun_app$al (uuk$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uue$ ?v0 ?v1) ?v2) ?v3) (fun_app$i ?v0 (fun_app$p (fun_app$q ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uue$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_bool_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$ac (uuj$ ?v0 ?v1) ?v2) ?v3) (fun_app$an ?v0 (fun_app$p (fun_app$q ?v1 ?v2) ?v3))) :pattern ((fun_app$ab (fun_app$ac (uuj$ ?v0 ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$p (fun_app$q (fun_app$ao (uuf$ ?v0) ?v1) ?v2) ?v3) (fun_app$d ?v0 (fun_app$p (fun_app$q ?v1 ?v2) ?v3))) :pattern ((fun_app$p (fun_app$q (fun_app$ao (uuf$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$)) (! (= (fun_app$u (fun_app$v uvi$ ?v0) ?v1) true) :pattern ((fun_app$u (fun_app$v uvi$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ab (fun_app$ac uvj$ ?v0) ?v1) true) :pattern ((fun_app$ab (fun_app$ac uvj$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_nat_prod$)) (! (= (fun_app$j uvn$ ?v0) ?v0) :pattern ((fun_app$j uvn$ ?v0)))))
(assert (forall ((?v0 Nat_nat_prod_tree$)) (! (= (fun_app$l uvm$ ?v0) ?v0) :pattern ((fun_app$l uvm$ ?v0)))))
(assert (not (= stern_brocot$ (node$ (pair$ one$a one$a) (node$ (pair$ one$a (numeral$ (bit0$ one$))) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uua$))) (uncurry$ uu$))) stern_brocot$) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uu$))) (uncurry$ uua$))) stern_brocot$)) (node$ (pair$ (numeral$ (bit0$ one$)) one$a) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uu$))) (uncurry$ uua$))) (uncurry$ uu$))) stern_brocot$) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uu$))) (uncurry$ uu$))) (uncurry$ uua$))) stern_brocot$))))))
(assert (= (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uu$))) (uncurry$ uu$))) (uncurry$ uua$))) (uncurry$ uu$)) (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uua$))) (uncurry$ uu$))))
(assert (= (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uu$))) (uncurry$ uu$))) (uncurry$ uua$)) (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uua$))))
(assert (= (plus$ one$a one$a) (numeral$ (bit0$ one$))))
(assert (forall ((?v0 Num$)) (= (plus$ (numeral$ ?v0) one$a) (numeral$ (fun_app$ap (plus$a ?v0) one$))) ))
(assert (forall ((?v0 Num$)) (= (plus$ one$a (numeral$ ?v0)) (numeral$ (fun_app$ap (plus$a one$) ?v0))) ))
(assert (forall ((?v0 Num$)) (= (= (numeral$ ?v0) one$a) (= ?v0 one$)) ))
(assert (forall ((?v0 Num$)) (= (= one$a (numeral$ ?v0)) (= one$ ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2)) (fun_app$u (fun_app$v ?v0 ?v1) ?v2)) :pattern ((fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2)) (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2)) :pattern ((fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$y (uncurry$f ?v0) (pair$a ?v1 ?v2)) (fun_app$s (fun_app$x ?v0 ?v1) ?v2)) :pattern ((fun_app$y (uncurry$f ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$r (uncurry$g ?v0) (pair$a ?v1 ?v2)) (fun_app$b (fun_app$c ?v0 ?v1) ?v2)) :pattern ((fun_app$r (uncurry$g ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$b (uncurry$c ?v0) (pair$ ?v1 ?v2)) (fun_app$z (fun_app$aa ?v0 ?v1) ?v2)) :pattern ((fun_app$b (uncurry$c ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$j (uncurry$ ?v0) (pair$ ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$j (uncurry$ ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$t (uncurry$a ?v0) (pair$a ?v1 ?v2)) (fun_app$j (fun_app$s ?v0 ?v1) ?v2)) :pattern ((fun_app$t (uncurry$a ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$s (uncurry$e ?v0) (pair$ ?v1 ?v2)) (fun_app$p (fun_app$q ?v0 ?v1) ?v2)) :pattern ((fun_app$s (uncurry$e ?v0) (pair$ ?v1 ?v2))))))
(assert (= (plus$ one$a one$a) (numeral$ (bit0$ one$))))
(assert (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false) ))
(assert (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false) ))
(assert (forall ((?v0 Num$) (?v1 Num$) (?v2 Nat$)) (= (plus$ (numeral$ ?v0) (plus$ (numeral$ ?v1) ?v2)) (plus$ (numeral$ (fun_app$ap (plus$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Num$) (?v1 Num$)) (= (plus$ (numeral$ ?v0) (numeral$ ?v1)) (numeral$ (fun_app$ap (plus$a ?v0) ?v1))) ))
(assert (= (odd_mirror$ bird$) (node$ (pair$ one$a one$a) (node$ (pair$ one$a (numeral$ (bit0$ one$))) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uua$))) (uncurry$ uu$))) (odd_mirror$ bird$)) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uu$))) (uncurry$ uua$))) (odd_mirror$ bird$))) (node$ (pair$ (numeral$ (bit0$ one$)) one$a) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uu$))) (uncurry$ uua$))) (uncurry$ uu$))) (odd_mirror$ bird$)) (fun_app$l (map_tree$ (fun_app$d (comp$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uu$))) (uncurry$ uu$))) (uncurry$ uua$))) (odd_mirror$ bird$))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (=> (fun_app$u (fun_app$v ?v0 ?v1) ?v2) (fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2) (fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (=> (fun_app$u (fun_app$v ?v0 ?v1) ?v2) (fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2))) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2) (fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_bool_fun_fun$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (=> (= ?v0 (pair$a ?v2 ?v3)) (fun_app$u (fun_app$v ?v1 ?v2) ?v3)) ) (fun_app$w (uncurry$b ?v1) ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_bool_fun_fun$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$ab (fun_app$ac ?v1 ?v2) ?v3)) ) (fun_app$u (uncurry$d ?v1) ?v0)) ))
(assert (forall ((?v0 Num$) (?v1 Num$)) (! (= (fun_app$ap (plus$a (bit0$ ?v0)) (bit0$ ?v1)) (bit0$ (fun_app$ap (plus$a ?v0) ?v1))) :pattern ((fun_app$ap (plus$a (bit0$ ?v0)) (bit0$ ?v1))))))
(assert (= (fun_app$ap (plus$a one$) one$) (bit0$ one$)))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (fun_app$w (uncurry$b ?v0) ?v1) (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (=> (and (= ?v1 (pair$a ?v2 ?v3)) (fun_app$u (fun_app$v ?v0 ?v2) ?v3)) false) )) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_prod$)) (=> (and (fun_app$u (uncurry$d ?v0) ?v1) (forall ((?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v1 (pair$ ?v2 ?v3)) (fun_app$ab (fun_app$ac ?v0 ?v2) ?v3)) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_bool_fun_fun$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (=> (= ?v0 (pair$a ?v2 ?v3)) (fun_app$u (fun_app$v ?v1 ?v2) ?v3)) ) (fun_app$w (uncurry$b ?v1) ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_bool_fun_fun$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$ab (fun_app$ac ?v1 ?v2) ?v3)) ) (fun_app$u (uncurry$d ?v1) ?v0)) ))
(assert (forall ((?v0 Num$)) (! (= (fun_app$ap (plus$a one$) ?v0) (fun_app$ap (plus$a ?v0) one$)) :pattern ((fun_app$ap (plus$a one$) ?v0)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (fun_app$w (uncurry$b ?v0) ?v1) (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (=> (and (= ?v1 (pair$a ?v2 ?v3)) (fun_app$u (fun_app$v ?v0 ?v2) ?v3)) false) )) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_prod$)) (=> (and (fun_app$u (uncurry$d ?v0) ?v1) (forall ((?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v1 (pair$ ?v2 ?v3)) (fun_app$ab (fun_app$ac ?v0 ?v2) ?v3)) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (=> (fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2)) (fun_app$u (fun_app$v ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2)) (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_tree$)) (= (fun_app$n (map_tree$a ?v0) (odd_mirror$a ?v1)) (odd_mirror$a (fun_app$n (map_tree$a ?v0) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (fun_app$l (map_tree$ ?v0) (odd_mirror$ ?v1)) (odd_mirror$ (fun_app$l (map_tree$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (exists ((?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (= ?v0 (pair$a ?v1 ?v2)) ) ))
(assert (forall ((?v0 Nat_nat_prod$)) (exists ((?v1 Nat$) (?v2 Nat$)) (= ?v0 (pair$ ?v1 ?v2)) ) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (=> (and (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_bool_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (fun_app$w ?v0 (pair$a ?v2 ?v3)) ) (fun_app$w ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (fun_app$u ?v0 (pair$ ?v2 ?v3)) ) (fun_app$u ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (forall ((?v1 Nat_nat_prod$) (?v2 Nat$) (?v3 Nat$)) (=> (= ?v0 (pair$a ?v1 (pair$ ?v2 ?v3))) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_bool_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat$) (?v4 Nat$)) (fun_app$w ?v0 (pair$a ?v2 (pair$ ?v3 ?v4))) ) (fun_app$w ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (forall ((?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (=> (= ?v0 (pair$a ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_bool_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$w (uncurry$b ?v2) ?v0) (fun_app$w (uncurry$b ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_bool_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$u (uncurry$d ?v2) ?v0) (fun_app$u (uncurry$d ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$y (uncurry$f ?v2) ?v0) (fun_app$y (uncurry$f ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$r (uncurry$g ?v2) ?v0) (fun_app$r (uncurry$g ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$b (uncurry$c ?v2) ?v0) (fun_app$b (uncurry$c ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_nat_nat_prod_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$j (uncurry$ ?v2) ?v0) (fun_app$j (uncurry$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$t (uncurry$a ?v2) ?v0) (fun_app$t (uncurry$a ?v2) ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$s (uncurry$e ?v2) ?v0) (fun_app$s (uncurry$e ?v2) ?v1))) ))
(assert (= (= one$ one$) true))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$j ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$j (uncurry$ (uub$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$s ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$ah (uuc$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$j ?v0 (fun_app$t (uncurry$a ?v1) ?v2)) (fun_app$t (uncurry$a (fun_app$ae (uud$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$i ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (fun_app$j (uncurry$ (uue$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$d ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$ao (uuf$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$ak ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (fun_app$u (uncurry$d (uug$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$u ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$u (uncurry$d (uuh$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_nat_nat_prod_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$aj ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (fun_app$j (uncurry$ (uui$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_bool_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$an ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (fun_app$u (uncurry$d (uuj$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$am ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$al (uuk$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$j ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$j (uncurry$ (uub$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$s ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$ah (uuc$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$j ?v0 (fun_app$t (uncurry$a ?v1) ?v2)) (fun_app$t (uncurry$a (fun_app$ae (uud$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$i ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (fun_app$j (uncurry$ (uue$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$d ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$ao (uuf$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$ak ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (fun_app$u (uncurry$d (uug$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$u ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$u (uncurry$d (uuh$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_nat_nat_prod_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$aj ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (fun_app$j (uncurry$ (uui$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_bool_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$an ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (fun_app$u (uncurry$d (uuj$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$am ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$al (uuk$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2)) (fun_app$u (fun_app$v ?v0 ?v1) ?v2)) :pattern ((fun_app$w (uncurry$b ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2)) (fun_app$ab (fun_app$ac ?v0 ?v1) ?v2)) :pattern ((fun_app$u (uncurry$d ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$y (uncurry$f ?v0) (pair$a ?v1 ?v2)) (fun_app$s (fun_app$x ?v0 ?v1) ?v2)) :pattern ((fun_app$y (uncurry$f ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$r (uncurry$g ?v0) (pair$a ?v1 ?v2)) (fun_app$b (fun_app$c ?v0 ?v1) ?v2)) :pattern ((fun_app$r (uncurry$g ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$b (uncurry$c ?v0) (pair$ ?v1 ?v2)) (fun_app$z (fun_app$aa ?v0 ?v1) ?v2)) :pattern ((fun_app$b (uncurry$c ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$j (uncurry$ ?v0) (pair$ ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$j (uncurry$ ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (! (= (fun_app$t (uncurry$a ?v0) (pair$a ?v1 ?v2)) (fun_app$j (fun_app$s ?v0 ?v1) ?v2)) :pattern ((fun_app$t (uncurry$a ?v0) (pair$a ?v1 ?v2))))))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$s (uncurry$e ?v0) (pair$ ?v1 ?v2)) (fun_app$p (fun_app$q ?v0 ?v1) ?v2)) :pattern ((fun_app$s (uncurry$e ?v0) (pair$ ?v1 ?v2))))))
(assert (forall ((?v0 Num$)) (not (= one$ (bit0$ ?v0))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (fun_app$ak ?v0 (fun_app$w (uncurry$b ?v1) ?v2)) (forall ((?v3 Nat_nat_prod$) (?v4 Nat_nat_prod$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$ak ?v0 (fun_app$u (fun_app$v ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (=> (and (fun_app$ak ?v0 (fun_app$u (uncurry$d ?v1) ?v2)) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$ak ?v0 (fun_app$ab (fun_app$ac ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_bool_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (fun_app$an ?v0 (fun_app$y (uncurry$f ?v1) ?v2)) (forall ((?v3 Nat_nat_prod$) (?v4 Nat_nat_prod$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$an ?v0 (fun_app$s (fun_app$x ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_bool_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (fun_app$w ?v0 (fun_app$r (uncurry$g ?v1) ?v2)) (forall ((?v3 Nat_nat_prod$) (?v4 Nat_nat_prod$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$w ?v0 (fun_app$b (fun_app$c ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_bool_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod$)) (=> (and (fun_app$w ?v0 (fun_app$b (uncurry$c ?v1) ?v2)) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$w ?v0 (fun_app$z (fun_app$aa ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (=> (and (fun_app$u ?v0 (fun_app$j (uncurry$ ?v1) ?v2)) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$u ?v0 (fun_app$ (fun_app$a ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (fun_app$u ?v0 (fun_app$t (uncurry$a ?v1) ?v2)) (forall ((?v3 Nat_nat_prod$) (?v4 Nat_nat_prod$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$u ?v0 (fun_app$j (fun_app$s ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_bool_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod$)) (=> (and (fun_app$an ?v0 (fun_app$s (uncurry$e ?v1) ?v2)) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$an ?v0 (fun_app$p (fun_app$q ?v1 ?v3) ?v4))) false) )) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_bool_fun$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (= (fun_app$u (fun_app$v ?v0 ?v2) ?v3) (fun_app$w ?v1 (pair$a ?v2 ?v3))) ) (= (uncurry$b ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_prod_bool_fun$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (= (fun_app$ab (fun_app$ac ?v0 ?v2) ?v3) (fun_app$u ?v1 (pair$ ?v2 ?v3))) ) (= (uncurry$d ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (= (fun_app$s (fun_app$x ?v0 ?v2) ?v3) (fun_app$y ?v1 (pair$a ?v2 ?v3))) ) (= (uncurry$f ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (= (fun_app$b (fun_app$c ?v0 ?v2) ?v3) (fun_app$r ?v1 (pair$a ?v2 ?v3))) ) (= (uncurry$g ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (= (fun_app$z (fun_app$aa ?v0 ?v2) ?v3) (fun_app$b ?v1 (pair$ ?v2 ?v3))) ) (= (uncurry$c ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (= (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$j ?v1 (pair$ ?v2 ?v3))) ) (= (uncurry$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)) (=> (forall ((?v2 Nat_nat_prod$) (?v3 Nat_nat_prod$)) (= (fun_app$j (fun_app$s ?v0 ?v2) ?v3) (fun_app$t ?v1 (pair$a ?v2 ?v3))) ) (= (uncurry$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (= (fun_app$p (fun_app$q ?v0 ?v2) ?v3) (fun_app$s ?v1 (pair$ ?v2 ?v3))) ) (= (uncurry$e ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_bool_fun$)) (= (uncurry$b (uul$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_bool_fun$)) (= (uncurry$d (uum$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (= (uncurry$f (uun$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)) (= (uncurry$g (uuo$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$)) (= (uncurry$c (uup$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$)) (= (uncurry$ (uuq$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)) (= (uncurry$a (uur$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (= (uncurry$e (uus$ ?v0)) ?v0) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$j (uncurry$ ?v0) (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$j (uncurry$ (uut$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$j (uncurry$ ?v0) (fun_app$t (uncurry$a ?v1) ?v2)) (fun_app$t (uncurry$a (fun_app$ae (uuu$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$t (uncurry$a ?v0) (fun_app$b (uncurry$c ?v1) ?v2)) (fun_app$j (uncurry$ (uuv$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$s (uncurry$e ?v0) (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$s (uncurry$e (fun_app$ah (uuw$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$t (uncurry$a ?v0) (fun_app$r (uncurry$g ?v1) ?v2)) (fun_app$t (uncurry$a (fun_app$ad (uux$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$s (uncurry$e ?v0) (fun_app$t (uncurry$a ?v1) ?v2)) (fun_app$y (uncurry$f (fun_app$ag (uuy$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$u (uncurry$d ?v0) (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$u (uncurry$d (uuz$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$w (uncurry$b ?v0) (fun_app$b (uncurry$c ?v1) ?v2)) (fun_app$u (uncurry$d (uva$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$u (uncurry$d ?v0) (fun_app$t (uncurry$a ?v1) ?v2)) (fun_app$w (uncurry$b (fun_app$af (uvb$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$b (uncurry$c ?v0) (fun_app$j (uncurry$ ?v1) ?v2)) (fun_app$b (uncurry$c (uvc$ ?v0 ?v1)) ?v2)) ))
(assert (forall ((?v0 Num$)) (= (plus$ one$a (numeral$ ?v0)) (plus$ (numeral$ ?v0) one$a)) ))
(assert (forall ((?v0 Num$)) (! (= (numeral$ (bit0$ ?v0)) (plus$ (numeral$ ?v0) (numeral$ ?v0))) :pattern ((bit0$ ?v0)))))
(assert (= (numeral$ one$) one$a))
(assert (= (numeral$ one$) one$a))
(assert (forall ((?v0 Num$)) (= (numeral$ (bit0$ ?v0)) (plus$ (numeral$ ?v0) (numeral$ ?v0))) ))
(assert (= (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uu$)) (uncurry$ uvd$)))
(assert (= bird$ (fun_app$aq (fun_app$ar (tree_recurse$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (fun_app$d (comp$ (uncurry$ uua$)) (uncurry$ uu$))) (pair$ one$a one$a))))
(assert (forall ((?v0 Nat_nat_prod_tree$) (?v1 Nat_nat_prod_tree_tree$) (?v2 Nat_nat_prod_tree_tree$) (?v3 Nat_nat_prod_tree$) (?v4 Nat_nat_prod_tree_tree$) (?v5 Nat_nat_prod_tree_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree$) (?v3 Nat_nat_prod$) (?v4 Nat_nat_prod_tree$) (?v5 Nat_nat_prod_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree$)) (! (= (fun_app$n (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$n ?v0 (fun_app$n ?v1 ?v2))) :pattern ((fun_app$n (fun_app$f (comp$b ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$)) (! (= (fun_app$i (fun_app$g (comp$d ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$g (comp$d ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree$)) (! (= (fun_app$l (fun_app$e (comp$a ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$l (fun_app$e (comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$d (comp$ ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$d (comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (! (= (fun_app$r (uncurry$g uve$) ?v0) ?v0) :pattern ((fun_app$r (uncurry$g uve$) ?v0)))))
(assert (forall ((?v0 Nat_nat_prod$)) (! (= (fun_app$j (uncurry$ uvf$) ?v0) ?v0) :pattern ((fun_app$j (uncurry$ uvf$) ?v0)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_tree$) (?v3 Nat_nat_prod_tree$)) (! (= (map_tree$b ?v0 (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$aq ?v0 ?v1) (map_tree$b ?v0 ?v2) (map_tree$b ?v0 ?v3))) :pattern ((map_tree$b ?v0 (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree_tree$) (?v3 Nat_nat_prod_tree_tree$)) (! (= (map_tree$c ?v0 (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$as ?v0 ?v1) (map_tree$c ?v0 ?v2) (map_tree$c ?v0 ?v3))) :pattern ((map_tree$c ?v0 (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree_tree$) (?v3 Nat_nat_prod_tree_tree$)) (! (= (fun_app$n (map_tree$a ?v0) (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$l ?v0 ?v1) (fun_app$n (map_tree$a ?v0) ?v2) (fun_app$n (map_tree$a ?v0) ?v3))) :pattern ((fun_app$n (map_tree$a ?v0) (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_tree$) (?v3 Nat_nat_prod_tree$)) (! (= (fun_app$l (map_tree$ ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$j ?v0 ?v1) (fun_app$l (map_tree$ ?v0) ?v2) (fun_app$l (map_tree$ ?v0) ?v3))) :pattern ((fun_app$l (map_tree$ ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 Bool) (?v1 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$w (uncurry$b (fun_app$ai (uvg$ ?v0) ?v1)) ?v2) (and ?v0 (fun_app$w (uncurry$b ?v1) ?v2))) ))
(assert (forall ((?v0 Bool) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_prod$)) (= (fun_app$u (uncurry$d (uvh$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$u (uncurry$d ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (= ?v0 ?v0) (fun_app$w (uncurry$b uvi$) ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod$)) (= (= ?v0 ?v0) (fun_app$u (uncurry$d uvj$) ?v0)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v5 Nat_nat_prod_tree_tree$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v0)) (= (fun_app$f (comp$b ?v0) ?v3) (fun_app$f (comp$b ?v4) ?v0))) (= (fun_app$at (map_tree$d ?v0) (tree_recurse$a ?v1 ?v3 ?v5)) (tree_recurse$a ?v2 ?v4 (fun_app$n ?v0 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$h (comp$c ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v0)) (= (fun_app$h (comp$c ?v0) ?v3) (fun_app$g (comp$d ?v4) ?v0))) (= (fun_app$au (map_tree$e ?v0) (tree_recurse$b ?v1 ?v3 ?v5)) (fun_app$aq (fun_app$ar (tree_recurse$ ?v2) ?v4) (fun_app$i ?v0 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v5 Nat_nat_prod$)) (=> (and (= (fun_app$ar (comp$e ?v0) ?v1) (fun_app$av (comp$f ?v2) ?v0)) (= (fun_app$ar (comp$e ?v0) ?v3) (fun_app$av (comp$f ?v4) ?v0))) (= (map_tree$b ?v0 (fun_app$aq (fun_app$ar (tree_recurse$ ?v1) ?v3) ?v5)) (tree_recurse$c ?v2 ?v4 (fun_app$aq ?v0 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_tree$)) (=> (and (= (fun_app$aw (comp$g ?v0) ?v1) (fun_app$ax (comp$h ?v2) ?v0)) (= (fun_app$aw (comp$g ?v0) ?v3) (fun_app$ax (comp$h ?v4) ?v0))) (= (map_tree$c ?v0 (tree_recurse$c ?v1 ?v3 ?v5)) (fun_app$aq (fun_app$ar (tree_recurse$ ?v2) ?v4) (fun_app$as ?v0 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v5 Nat_nat_prod_tree$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v0)) (= (fun_app$e (comp$a ?v0) ?v3) (fun_app$e (comp$a ?v4) ?v0))) (= (fun_app$n (map_tree$a ?v0) (tree_recurse$c ?v1 ?v3 ?v5)) (tree_recurse$c ?v2 ?v4 (fun_app$l ?v0 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v0)) (= (fun_app$d (comp$ ?v0) ?v3) (fun_app$d (comp$ ?v4) ?v0))) (= (fun_app$l (map_tree$ ?v0) (fun_app$aq (fun_app$ar (tree_recurse$ ?v1) ?v3) ?v5)) (fun_app$aq (fun_app$ar (tree_recurse$ ?v2) ?v4) (fun_app$j ?v0 ?v5)))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree$)) (! (= (tree_recurse$c ?v0 ?v1 ?v2) (node$a ?v2 (fun_app$n (map_tree$a ?v0) (tree_recurse$c ?v0 ?v1 ?v2)) (fun_app$n (map_tree$a ?v1) (tree_recurse$c ?v0 ?v1 ?v2)))) :pattern ((tree_recurse$c ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$)) (! (= (fun_app$aq (fun_app$ar (tree_recurse$ ?v0) ?v1) ?v2) (node$ ?v2 (fun_app$l (map_tree$ ?v0) (fun_app$aq (fun_app$ar (tree_recurse$ ?v0) ?v1) ?v2)) (fun_app$l (map_tree$ ?v1) (fun_app$aq (fun_app$ar (tree_recurse$ ?v0) ?v1) ?v2)))) :pattern ((fun_app$aq (fun_app$ar (tree_recurse$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_tree_tree$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (= ?v0 (node$a ?v1 (fun_app$n (map_tree$a ?v2) ?v0) (fun_app$n (map_tree$a ?v3) ?v0))) (= ?v0 (tree_recurse$c ?v2 ?v3 ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_tree$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= ?v0 (node$ ?v1 (fun_app$l (map_tree$ ?v2) ?v0) (fun_app$l (map_tree$ ?v3) ?v0))) (= ?v0 (fun_app$aq (fun_app$ar (tree_recurse$ ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (plus$ ?v0 (plus$ ?v1 ?v2)) (plus$ ?v1 (plus$ ?v0 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (plus$ ?v0 ?v1) (plus$ ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$ ?v0 ?v2) (plus$ ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$)) (= (= one$a ?v0) (= ?v0 one$a)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (= (fun_app$ay (comp$i (fun_app$g (comp$d ?v0) ?v1)) ?v2) (fun_app$d (comp$ ?v0) (fun_app$ay (comp$i ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$)) (= (fun_app$h (comp$c (fun_app$g (comp$d ?v0) ?v1)) ?v2) (fun_app$g (comp$d ?v0) (fun_app$h (comp$c ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (= (fun_app$f (comp$b (fun_app$f (comp$b ?v0) ?v1)) ?v2) (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (= (fun_app$g (comp$d (fun_app$d (comp$ ?v0) ?v1)) ?v2) (fun_app$g (comp$d ?v0) (fun_app$g (comp$d ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (= (fun_app$e (comp$a (fun_app$e (comp$a ?v0) ?v1)) ?v2) (fun_app$e (comp$a ?v0) (fun_app$e (comp$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$)) (= (fun_app$d (comp$ (fun_app$d (comp$ ?v0) ?v1)) ?v2) (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree$)) (! (= (fun_app$n (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$n ?v0 (fun_app$n ?v1 ?v2))) :pattern ((fun_app$n (fun_app$f (comp$b ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$)) (! (= (fun_app$i (fun_app$g (comp$d ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$g (comp$d ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree$)) (! (= (fun_app$l (fun_app$e (comp$a ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$l (fun_app$e (comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$)) (! (= (fun_app$j (fun_app$d (comp$ ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$d (comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (=> (forall ((?v4 Nat_nat_prod_tree_tree$)) (= (fun_app$n ?v0 (fun_app$n ?v1 ?v4)) (fun_app$n ?v2 (fun_app$n ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (=> (and (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v3)) (=> (forall ((?v4 Nat_nat_prod_nat_nat_prod_fun$)) (= (fun_app$j ?v0 (fun_app$i ?v1 ?v4)) (fun_app$j ?v2 (fun_app$i ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (=> (forall ((?v4 Nat_nat_prod_tree$)) (= (fun_app$l ?v0 (fun_app$l ?v1 ?v4)) (fun_app$l ?v2 (fun_app$l ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (=> (forall ((?v4 Nat_nat_prod$)) (= (fun_app$j ?v0 (fun_app$j ?v1 ?v4)) (fun_app$j ?v2 (fun_app$j ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$ay (comp$i ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$d (comp$ ?v4) ?v2) ?v5)) (= (fun_app$ay (comp$i (fun_app$g (comp$d ?v4) ?v0)) ?v1) (fun_app$d (comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$h (comp$c ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v3)) (= (fun_app$d (comp$ ?v4) ?v2) ?v5)) (= (fun_app$h (comp$c (fun_app$g (comp$d ?v4) ?v0)) ?v1) (fun_app$g (comp$d ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$ay (comp$i ?v2) ?v3)) (= (fun_app$g (comp$d ?v4) ?v2) ?v5)) (= (fun_app$d (comp$ (fun_app$d (comp$ ?v4) ?v0)) ?v1) (fun_app$ay (comp$i ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v5 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$f (comp$b ?v4) ?v2) ?v5)) (= (fun_app$f (comp$b (fun_app$f (comp$b ?v4) ?v0)) ?v1) (fun_app$f (comp$b ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (=> (and (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$h (comp$c ?v2) ?v3)) (= (fun_app$g (comp$d ?v4) ?v2) ?v5)) (= (fun_app$g (comp$d (fun_app$d (comp$ ?v4) ?v0)) ?v1) (fun_app$h (comp$c ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v3)) (= (fun_app$d (comp$ ?v4) ?v2) ?v5)) (= (fun_app$g (comp$d (fun_app$d (comp$ ?v4) ?v0)) ?v1) (fun_app$g (comp$d ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v5 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$e (comp$a ?v4) ?v2) ?v5)) (= (fun_app$e (comp$a (fun_app$e (comp$a ?v4) ?v0)) ?v1) (fun_app$e (comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$d (comp$ ?v4) ?v2) ?v5)) (= (fun_app$d (comp$ (fun_app$d (comp$ ?v4) ?v0)) ?v1) (fun_app$d (comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$g (comp$d ?v3) ?v4) ?v5)) (= (fun_app$g (comp$d ?v0) (fun_app$g (comp$d ?v1) ?v4)) (fun_app$g (comp$d ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v5 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$f (comp$b ?v3) ?v4) ?v5)) (= (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v4)) (fun_app$f (comp$b ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v3)) (= (fun_app$ay (comp$i ?v3) ?v4) ?v5)) (= (fun_app$d (comp$ ?v0) (fun_app$ay (comp$i ?v1) ?v4)) (fun_app$d (comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (=> (and (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v3)) (= (fun_app$h (comp$c ?v3) ?v4) ?v5)) (= (fun_app$g (comp$d ?v0) (fun_app$h (comp$c ?v1) ?v4)) (fun_app$g (comp$d ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v5 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$e (comp$a ?v3) ?v4) ?v5)) (= (fun_app$e (comp$a ?v0) (fun_app$e (comp$a ?v1) ?v4)) (fun_app$e (comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$d (comp$ ?v3) ?v4) ?v5)) (= (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v4)) (fun_app$d (comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$n ?v0 (fun_app$n ?v1 ?v4)) (fun_app$n ?v2 (fun_app$n ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$g (comp$d ?v2) ?v3)) (= (fun_app$j ?v0 (fun_app$i ?v1 ?v4)) (fun_app$j ?v2 (fun_app$i ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$l ?v1 ?v4)) (fun_app$l ?v2 (fun_app$l ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$j ?v0 (fun_app$j ?v1 ?v4)) (fun_app$j ?v2 (fun_app$j ?v3 ?v4)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$ay (comp$i ?v0) ?v1) ?v2) (= (fun_app$ay (comp$i (fun_app$g (comp$d ?v3) ?v0)) ?v1) (fun_app$d (comp$ ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$h (comp$c ?v0) ?v1) ?v2) (= (fun_app$h (comp$c (fun_app$g (comp$d ?v3) ?v0)) ?v1) (fun_app$g (comp$d ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$f (comp$b (fun_app$f (comp$b ?v3) ?v0)) ?v1) (fun_app$f (comp$b ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$g (comp$d ?v0) ?v1) ?v2) (= (fun_app$g (comp$d (fun_app$d (comp$ ?v3) ?v0)) ?v1) (fun_app$g (comp$d ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$e (comp$a (fun_app$e (comp$a ?v3) ?v0)) ?v1) (fun_app$e (comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$d (comp$ (fun_app$d (comp$ ?v3) ?v0)) ?v1) (fun_app$d (comp$ ?v3) ?v2))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$g (comp$d ?v0) (fun_app$g (comp$d ?v1) ?v3)) (fun_app$g (comp$d ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v3)) (fun_app$f (comp$b ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$)) (=> (= (fun_app$g (comp$d ?v0) ?v1) ?v2) (= (fun_app$d (comp$ ?v0) (fun_app$ay (comp$i ?v1) ?v3)) (fun_app$ay (comp$i ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$)) (=> (= (fun_app$g (comp$d ?v0) ?v1) ?v2) (= (fun_app$g (comp$d ?v0) (fun_app$h (comp$c ?v1) ?v3)) (fun_app$h (comp$c ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$e (comp$a ?v0) (fun_app$e (comp$a ?v1) ?v3)) (fun_app$e (comp$a ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v3)) (fun_app$d (comp$ ?v2) ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$n ?v0 (fun_app$n ?v1 ?v3)) (fun_app$n ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$g (comp$d ?v0) ?v1) ?v2) (= (fun_app$j ?v0 (fun_app$i ?v1 ?v3)) (fun_app$i ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$l ?v0 (fun_app$l ?v1 ?v3)) (fun_app$l ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$j ?v0 (fun_app$j ?v1 ?v3)) (fun_app$j ?v2 ?v3))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree$)) (=> (forall ((?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree_tree$) (?v3 Nat_nat_prod_tree_tree$)) (=> (= ?v0 (node$a ?v1 ?v2 ?v3)) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod_tree$)) (=> (forall ((?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_tree$) (?v3 Nat_nat_prod_tree$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false) ) false) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod$)) (= (fun_app$j (fun_app$y (uncurry$f ?v0) ?v1) ?v2) (fun_app$t (uncurry$a (fun_app$x (uvk$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod$)) (= (fun_app$j (fun_app$s (uncurry$e ?v0) ?v1) ?v2) (fun_app$j (uncurry$ (uvl$ ?v0 ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree$)) (= (fun_app$n (map_tree$a uvm$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat_nat_prod_tree$)) (= (fun_app$l (map_tree$ uvn$) ?v0) ?v0) ))
(assert (= stern_brocot$ (fun_app$aq (fun_app$ar (tree_recurse$ (fun_app$d (comp$ (fun_app$d (comp$ (uncurry$ uu$)) (uncurry$ uua$))) (uncurry$ uu$))) (uncurry$ uua$)) (pair$ one$a one$a))))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_tree$)) (= (fun_app$at (map_tree$d ?v0) (fun_app$at (map_tree$d ?v1) ?v2)) (fun_app$at (map_tree$d (fun_app$f (comp$b ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_tree$)) (= (fun_app$l (map_tree$ ?v0) (fun_app$au (map_tree$e ?v1) ?v2)) (fun_app$au (map_tree$e (fun_app$g (comp$d ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_tree$)) (= (fun_app$n (map_tree$a ?v0) (fun_app$n (map_tree$a ?v1) ?v2)) (fun_app$n (map_tree$a (fun_app$e (comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_tree$)) (= (fun_app$l (map_tree$ ?v0) (fun_app$l (map_tree$ ?v1) ?v2)) (fun_app$l (map_tree$ (fun_app$d (comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (= (map_tree$d (fun_app$f (comp$b ?v0) ?v1)) (comp$j (map_tree$d ?v0) (map_tree$d ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (= (map_tree$e (fun_app$g (comp$d ?v0) ?v1)) (comp$k (map_tree$ ?v0) (map_tree$e ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (= (map_tree$a (fun_app$e (comp$a ?v0) ?v1)) (fun_app$f (comp$b (map_tree$a ?v0)) (map_tree$a ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$)) (= (map_tree$ (fun_app$d (comp$ ?v0) ?v1)) (fun_app$e (comp$a (map_tree$ ?v0)) (map_tree$ ?v1))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_bool_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (forall ((?v4 Nat_nat_prod$) (?v5 Nat_nat_prod$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$u (fun_app$v ?v1 ?v4) ?v5) (fun_app$u (fun_app$v ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$w (uncurry$b ?v1) ?v3) (fun_app$w (uncurry$b ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_nat_bool_fun_fun$) (?v3 Nat_nat_prod$)) (=> (and (forall ((?v4 Nat$) (?v5 Nat$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$ab (fun_app$ac ?v1 ?v4) ?v5) (fun_app$ab (fun_app$ac ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$u (uncurry$d ?v1) ?v3) (fun_app$u (uncurry$d ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (forall ((?v4 Nat_nat_prod$) (?v5 Nat_nat_prod$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$s (fun_app$x ?v1 ?v4) ?v5) (fun_app$s (fun_app$x ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$y (uncurry$f ?v1) ?v3) (fun_app$y (uncurry$f ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (forall ((?v4 Nat_nat_prod$) (?v5 Nat_nat_prod$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$b (fun_app$c ?v1 ?v4) ?v5) (fun_app$b (fun_app$c ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$r (uncurry$g ?v1) ?v3) (fun_app$r (uncurry$g ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v2 Nat_nat_nat_nat_prod_nat_nat_prod_prod_fun_fun$) (?v3 Nat_nat_prod$)) (=> (and (forall ((?v4 Nat$) (?v5 Nat$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$z (fun_app$aa ?v1 ?v4) ?v5) (fun_app$z (fun_app$aa ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$b (uncurry$c ?v1) ?v3) (fun_app$b (uncurry$c ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_nat_nat_prod_fun_fun$) (?v3 Nat_nat_prod$)) (=> (and (forall ((?v4 Nat$) (?v5 Nat$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$ (fun_app$a ?v1 ?v4) ?v5) (fun_app$ (fun_app$a ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$j (uncurry$ ?v1) ?v3) (fun_app$j (uncurry$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_nat_nat_prod_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (forall ((?v4 Nat_nat_prod$) (?v5 Nat_nat_prod$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$j (fun_app$s ?v1 ?v4) ?v5) (fun_app$j (fun_app$s ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$t (uncurry$a ?v1) ?v3) (fun_app$t (uncurry$a ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v2 Nat_nat_nat_nat_prod_nat_nat_prod_fun_fun_fun$) (?v3 Nat_nat_prod$)) (=> (and (forall ((?v4 Nat$) (?v5 Nat$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$p (fun_app$q ?v1 ?v4) ?v5) (fun_app$p (fun_app$q ?v2 ?v4) ?v5))) ) (= ?v3 ?v0)) (= (fun_app$s (uncurry$e ?v1) ?v3) (fun_app$s (uncurry$e ?v2) ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_tree$) (?v1 Nat_nat_prod_tree_tree$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (=> (= ?v0 (node$b ?v1 (fun_app$at (map_tree$d ?v2) ?v0) (fun_app$at (map_tree$d ?v3) ?v0))) (= (fun_app$at (map_tree$d ?v4) ?v0) (unfold_tree$ (uvo$ ?v1) (uvp$ ?v2) (uvp$ ?v3) ?v4))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (=> (= ?v0 (node$a ?v1 (fun_app$n (map_tree$a ?v2) ?v0) (fun_app$n (map_tree$a ?v3) ?v0))) (= (fun_app$n (map_tree$a ?v4) ?v0) (unfold_tree$a (uvq$ ?v1) (uvr$ ?v2) (uvr$ ?v3) ?v4))) ))
(assert (forall ((?v0 Nat_nat_prod_tree$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= ?v0 (node$ ?v1 (fun_app$l (map_tree$ ?v2) ?v0) (fun_app$l (map_tree$ ?v3) ?v0))) (= (fun_app$l (map_tree$ ?v4) ?v0) (unfold_tree$b (uvs$ ?v1) (uvt$ ?v2) (uvt$ ?v3) ?v4))) ))
(assert (= (suc$ one$a) (numeral$ (bit0$ one$))))
(assert (= mediant$ (uncurry$a (uncurry$e uvv$))))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$)) (= (fun_app$at (map_tree$d ?v0) (unfold_tree$ (uvo$ ?v1) (uvp$ ?v2) (uvp$ ?v3) ?v4)) (unfold_tree$ (uvo$ ?v1) (uvp$ ?v2) (uvp$ ?v3) (fun_app$f (comp$b ?v0) ?v4))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$)) (= (fun_app$l (map_tree$ ?v0) (unfold_tree$c (uvw$ ?v1) (uvx$ ?v2) (uvx$ ?v3) ?v4)) (unfold_tree$c (uvw$ ?v1) (uvx$ ?v2) (uvx$ ?v3) (fun_app$g (comp$d ?v0) ?v4))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (= (fun_app$n (map_tree$a ?v0) (unfold_tree$a (uvq$ ?v1) (uvr$ ?v2) (uvr$ ?v3) ?v4)) (unfold_tree$a (uvq$ ?v1) (uvr$ ?v2) (uvr$ ?v3) (fun_app$e (comp$a ?v0) ?v4))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$)) (= (fun_app$l (map_tree$ ?v0) (unfold_tree$b (uvs$ ?v1) (uvt$ ?v2) (uvt$ ?v3) ?v4)) (unfold_tree$b (uvs$ ?v1) (uvt$ ?v2) (uvt$ ?v3) (fun_app$d (comp$ ?v0) ?v4))) ))
(assert (forall ((?v0 Num$)) (= (suc$ (numeral$ ?v0)) (numeral$ (fun_app$ap (plus$a ?v0) one$))) ))
(assert (forall ((?v0 Nat$)) (= (plus$ ?v0 (numeral$ (bit0$ one$))) (suc$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (= (plus$ (numeral$ (bit0$ one$)) ?v0) (suc$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (= (unfold_tree$a ?v0 ?v1 ?v2 ?v3) (node$a (fun_app$k ?v0 ?v3) (unfold_tree$a ?v0 ?v1 ?v2 (fun_app$e ?v1 ?v3)) (unfold_tree$a ?v0 ?v1 ?v2 (fun_app$e ?v2 ?v3)))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree$)) (= (unfold_tree$d ?v0 ?v1 ?v2 ?v3) (node$a (fun_app$l ?v0 ?v3) (unfold_tree$d ?v0 ?v1 ?v2 (fun_app$l ?v1 ?v3)) (unfold_tree$d ?v0 ?v1 ?v2 (fun_app$l ?v2 ?v3)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (= (unfold_tree$b ?v0 ?v1 ?v2 ?v3) (node$ (fun_app$i ?v0 ?v3) (unfold_tree$b ?v0 ?v1 ?v2 (fun_app$d ?v1 ?v3)) (unfold_tree$b ?v0 ?v1 ?v2 (fun_app$d ?v2 ?v3)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod$)) (= (fun_app$aq (fun_app$ar (fun_app$az (unfold_tree$e ?v0) ?v1) ?v2) ?v3) (node$ (fun_app$j ?v0 ?v3) (fun_app$aq (fun_app$ar (fun_app$az (unfold_tree$e ?v0) ?v1) ?v2) (fun_app$j ?v1 ?v3)) (fun_app$aq (fun_app$ar (fun_app$az (unfold_tree$e ?v0) ?v1) ?v2) (fun_app$j ?v2 ?v3)))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$j ?v0 (fun_app$j ?v1 ?v2)) (fun_app$j ?v3 (fun_app$i ?v4 ?v5))) (= (fun_app$j (fun_app$d (comp$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$g (comp$d ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v5 Nat_nat_prod_tree_tree$)) (=> (= (fun_app$n ?v0 (fun_app$n ?v1 ?v2)) (fun_app$n ?v3 (fun_app$n ?v4 ?v5))) (= (fun_app$n (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$n (fun_app$f (comp$b ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod$)) (=> (= (fun_app$j ?v0 (fun_app$i ?v1 ?v2)) (fun_app$j ?v3 (fun_app$j ?v4 ?v5))) (= (fun_app$i (fun_app$g (comp$d ?v0) ?v1) ?v2) (fun_app$j (fun_app$d (comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= (fun_app$j ?v0 (fun_app$i ?v1 ?v2)) (fun_app$j ?v3 (fun_app$i ?v4 ?v5))) (= (fun_app$i (fun_app$g (comp$d ?v0) ?v1) ?v2) (fun_app$i (fun_app$g (comp$d ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v5 Nat_nat_prod_tree$)) (=> (= (fun_app$l ?v0 (fun_app$l ?v1 ?v2)) (fun_app$l ?v3 (fun_app$l ?v4 ?v5))) (= (fun_app$l (fun_app$e (comp$a ?v0) ?v1) ?v2) (fun_app$l (fun_app$e (comp$a ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod$)) (=> (= (fun_app$j ?v0 (fun_app$j ?v1 ?v2)) (fun_app$j ?v3 (fun_app$j ?v4 ?v5))) (= (fun_app$j (fun_app$d (comp$ ?v0) ?v1) ?v2) (fun_app$j (fun_app$d (comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v1 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v2 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v3 Nat_nat_prod_tree_tree_nat_nat_prod_tree_tree_fun$) (?v4 Nat_nat_prod_tree_tree$)) (= (fun_app$at (map_tree$d ?v0) (unfold_tree$f ?v1 ?v2 ?v3 ?v4)) (unfold_tree$f (fun_app$f (comp$b ?v0) ?v1) ?v2 ?v3 ?v4)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun_nat_nat_prod_tree_nat_nat_prod_tree_fun_fun$) (?v4 Nat_nat_prod_tree_nat_nat_prod_tree_fun$)) (= (fun_app$n (map_tree$a ?v0) (unfold_tree$a ?v1 ?v2 ?v3 ?v4)) (unfold_tree$a (fun_app$ba (comp$l ?v0) ?v1) ?v2 ?v3 ?v4)) ))
(assert (forall ((?v0 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v1 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v2 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v3 Nat_nat_prod_tree_nat_nat_prod_tree_fun$) (?v4 Nat_nat_prod_tree$)) (= (fun_app$n (map_tree$a ?v0) (unfold_tree$d ?v1 ?v2 ?v3 ?v4)) (unfold_tree$d (fun_app$e (comp$a ?v0) ?v1) ?v2 ?v3 ?v4)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$)) (= (fun_app$l (map_tree$ ?v0) (unfold_tree$b ?v1 ?v2 ?v3 ?v4)) (unfold_tree$b (fun_app$g (comp$d ?v0) ?v1) ?v2 ?v3 ?v4)) ))
(assert (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod$)) (= (fun_app$l (map_tree$ ?v0) (fun_app$aq (fun_app$ar (fun_app$az (unfold_tree$e ?v1) ?v2) ?v3) ?v4)) (fun_app$aq (fun_app$ar (fun_app$az (unfold_tree$e (fun_app$d (comp$ ?v0) ?v1)) ?v2) ?v3) ?v4)) ))
(assert (forall ((?v0 Num$) (?v1 Nat$)) (= (suc$ (plus$ (numeral$ ?v0) ?v1)) (plus$ (numeral$ (fun_app$ap (plus$a ?v0) one$)) ?v1)) ))
(assert (= (fun_app$t mediant$ fmat$) (pair$ one$a one$a)))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ ?v0 (suc$ ?v1)) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ ?v0 (suc$ ?v1))))))
(assert (= (fun_app$t mediant$ imat$) (pair$ one$a one$a)))
(assert (forall ((?v0 Nat$)) (! (= (suc$ ?v0) (plus$ one$a ?v0)) :pattern ((suc$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (suc$ ?v0) ?v1) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ (suc$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (suc$ ?v0) ?v1) (plus$ ?v0 (suc$ ?v1))) :pattern ((plus$ (suc$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$)) (! (= (suc$ ?v0) (plus$ ?v0 one$a)) :pattern ((suc$ ?v0)))))
(assert (forall ((?v0 Num_bool_fun$) (?v1 Num$)) (=> (and (fun_app$bb ?v0 one$) (forall ((?v2 Num$)) (=> (fun_app$bb ?v0 ?v2) (fun_app$bb ?v0 (inc$ ?v2))) )) (fun_app$bb ?v0 ?v1)) ))
(assert (forall ((?v0 Num$) (?v1 Num$)) (= (fun_app$ap (plus$a ?v0) (inc$ ?v1)) (inc$ (fun_app$ap (plus$a ?v0) ?v1))) ))
(assert (= (inc$ one$) (bit0$ one$)))
(assert (forall ((?v0 Num$)) (! (= (fun_app$ap (plus$a ?v0) one$) (inc$ ?v0)) :pattern ((plus$a ?v0)))))
(assert (forall ((?v0 Num$)) (= (numeral$ (inc$ ?v0)) (plus$ (numeral$ ?v0) one$a)) ))
(assert (= (bitM$ one$) one$))
(assert (forall ((?v0 Num$)) (! (= (numeral$ (bit0$ ?v0)) (suc$ (numeral$ (bitM$ ?v0)))) :pattern ((bit0$ ?v0)))))
(assert (forall ((?v0 Num$)) (= (fun_app$ap (plus$a one$) (bitM$ ?v0)) (bit0$ ?v0)) ))
(assert (forall ((?v0 Num$)) (= (fun_app$ap (plus$a (bitM$ ?v0)) one$) (bit0$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$ (suc$ ?v0) (suc$ ?v1)) (minus$ ?v0 ?v1)) :pattern ((minus$ (suc$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ (suc$ ?v0) ?v1) (suc$ ?v2)) (minus$ (minus$ ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ ?v0 ?v1) ?v2) (minus$ ?v0 (plus$ ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (minus$ (plus$ ?v0 ?v1) ?v0) ?v1) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (minus$ (plus$ ?v0 ?v1) ?v1) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (minus$ ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (minus$ ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$)) (= (minus$ (suc$ ?v0) one$a) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$ ?v0 (suc$ ?v1)) (minus$ (minus$ ?v0 one$a) ?v1)) :pattern ((minus$ ?v0 (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) ?v2) (= ?v0 (minus$ ?v2 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ ?v0 ?v1) ?v2) (minus$ ?v0 (plus$ ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ ?v0 ?v1) ?v2) (minus$ (minus$ ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (minus$ ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (minus$ ?v1 ?v2)) ))
(check-sat)
(exit)

