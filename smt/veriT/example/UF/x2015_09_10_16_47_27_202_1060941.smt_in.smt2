(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_set_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_set_bool_fun$ 0)
(declare-sort A_set_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_set_llist_bool_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_bool_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_bool_fun$ 0)
(declare-sort A_set_llist_a_set_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$ (A_llist_a_llist_prod$) A_llist$)
(declare-fun snd$ (A_llist_a_llist_prod$) A_llist$)
(declare-fun pair$ (A_llist$ A_llist$) A_llist_a_llist_prod$)
(declare-sort A_llist_a_llist_prod_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_set_llist$ 0)
(declare-fun lNil$a () A_llist_a_llist_prod_llist$)
(declare-fun lhd$a (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod$)
(declare-fun ltl$a (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lCons$a (A_llist_a_llist_prod$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lNil$b () A_llist_llist$)
(declare-fun lhd$b (A_llist_llist$) A_llist$)
(declare-fun ltl$b (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$b (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lNil$c () A_set_llist$)
(declare-fun lhd$c (A_set_llist$) A_set$)
(declare-fun ltl$c (A_set_llist$) A_set_llist$)
(declare-fun lCons$c (A_set$ A_set_llist$) A_set_llist$)
(declare-fun uu$ () A_llist_a_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun acc$ () A_llist$)
(declare-fun uua$ () A_llist_a_llist_fun$)
(declare-fun uub$ (A_llist_set$) A_llist_bool_fun$)
(declare-fun uuc$ (A_set$) A_bool_fun$)
(declare-fun uud$ (A_llist_a_llist_prod_set$) A_llist_a_llist_prod_bool_fun$)
(declare-fun uue$ (A$) A_llist_a_llist_fun$)
(declare-fun lset$ (A_llist_llist$) A_llist_set$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun lset$a (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_set$)
(declare-fun lset$b (A_llist$) A_set$)
(declare-fun lset$c (A_set_llist$) A_set_set$)
(declare-fun lnull$a (A_llist_a_llist_prod_llist$) Bool)
(declare-fun lnull$b (A_llist_llist$) Bool)
(declare-fun lnull$c (A_set_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun less_eq$ (A_set$) A_set_bool_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lmirror$ () A_llist_a_llist_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun member$a (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$) Bool)
(declare-fun member$b (A$) A_set_bool_fun$)
(declare-fun member$c (A_llist_a_llist_prod_llist$ A_llist_a_llist_prod_llist_set$) Bool)
(declare-fun member$d (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$e (A_set_llist$ A_set_llist_set$) Bool)
(declare-fun member$f (A_set$ A_set_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun collect$b (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_set$)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$) Bool)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_set_bool_fun$ A_set$) Bool)
(declare-fun fun_app$f (A_llist_a_llist_prod_llist_bool_fun$ A_llist_a_llist_prod_llist$) Bool)
(declare-fun fun_app$g (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$h (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$i (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$j (A_set_llist_bool_fun$ A_set_llist$) Bool)
(declare-fun fun_app$k (A_set_llist_a_set_llist_bool_fun_fun$ A_set_llist$) A_set_llist_bool_fun$)
(declare-fun fun_app$l (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$m (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$n (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$o (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$p (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$q (A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist_a_llist_prod$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$r (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$s (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lappend$b (A_llist_a_llist_prod_llist$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lfinite$a (A_llist_llist$) Bool)
(declare-fun lfinite$b (A_llist_a_llist_prod_llist$) Bool)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A_llist_a_llist_prod$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun lsorted$a (A_set_llist$) Bool)
(declare-fun ldistinct$ (A_llist_llist$) Bool)
(declare-fun ldistinct$a (A_llist_a_llist_prod_llist$) Bool)
(declare-fun ldistinct$b (A_llist$) Bool)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun lmirror_aux$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun ltakeWhile$a (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ltakeWhile$b (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lmirror_aux$a (A_llist_a_llist_prod_llist$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lmirror_aux$b (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lmirror_aux$c (A_set_llist$ A_set_llist$) A_set_llist$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun finite_lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uua$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uue$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uue$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (! (= (fun_app$b (uub$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod$)) (! (= (fun_app$c (uud$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uud$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$d (uuc$ ?v0) ?v1) (fun_app$e (member$b ?v1) ?v0)) :pattern ((fun_app$d (uuc$ ?v0) ?v1)))))
(assert (not (= (ltl$ (fun_app$ (lmirror_aux$ acc$) xs$)) (ite (fun_app$b lnull$ xs$) (ltl$ acc$) (fun_app$ (lmirror_aux$ (lCons$ (lhd$ xs$) acc$)) (ltl$ xs$))))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (! (= (lmirror_aux$a ?v0 (lCons$a ?v1 ?v2)) (lCons$a ?v1 (lmirror_aux$a (lCons$a ?v1 ?v0) ?v2))) :pattern ((lmirror_aux$a ?v0 (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (lmirror_aux$b ?v0 (lCons$b ?v1 ?v2)) (lCons$b ?v1 (lmirror_aux$b (lCons$b ?v1 ?v0) ?v2))) :pattern ((lmirror_aux$b ?v0 (lCons$b ?v1 ?v2))))))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set$) (?v2 A_set_llist$)) (! (= (lmirror_aux$c ?v0 (lCons$c ?v1 ?v2)) (lCons$c ?v1 (lmirror_aux$c (lCons$c ?v1 ?v0) ?v2))) :pattern ((lmirror_aux$c ?v0 (lCons$c ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v1 (fun_app$ (lmirror_aux$ (lCons$ ?v1 ?v0)) ?v2))) :pattern ((fun_app$ (lmirror_aux$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (= (not (lnull$a (lmirror_aux$a ?v0 ?v1))) (or (not (lnull$a ?v1)) (not (lnull$a ?v0)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (not (lnull$b (lmirror_aux$b ?v0 ?v1))) (or (not (lnull$b ?v1)) (not (lnull$b ?v0)))) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (= (not (lnull$c (lmirror_aux$c ?v0 ?v1))) (or (not (lnull$c ?v1)) (not (lnull$c ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1))) (or (not (fun_app$b lnull$ ?v1)) (not (fun_app$b lnull$ ?v0)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (= (lnull$a (lmirror_aux$a ?v0 ?v1)) (and (lnull$a ?v1) (lnull$a ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lnull$b (lmirror_aux$b ?v0 ?v1)) (and (lnull$b ?v1) (lnull$b ?v0))) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (= (lnull$c (lmirror_aux$c ?v0 ?v1)) (and (lnull$c ?v1) (lnull$c ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1)) (and (fun_app$b lnull$ ?v1) (fun_app$b lnull$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (lmirror_aux$a ?v1 ?v0)))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) (not (lnull$b (lmirror_aux$b ?v1 ?v0)))) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) (not (lnull$c (lmirror_aux$c ?v1 ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (not (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v1) ?v0)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (lmirror_aux$a ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (lnull$b ?v0) (lnull$b ?v1)) (lnull$b (lmirror_aux$b ?v1 ?v0))) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (=> (and (lnull$c ?v0) (lnull$c ?v1)) (lnull$c (lmirror_aux$c ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ (fun_app$ (lmirror_aux$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (not (lnull$a ?v0)) (= (lCons$a (lhd$a ?v0) (ltl$a ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (not (lnull$b ?v0)) (= (lCons$b (lhd$b ?v0) (ltl$b ?v0)) ?v0)) ))
(assert (forall ((?v0 A_set_llist$)) (=> (not (lnull$c ?v0)) (= (lCons$c (lhd$c ?v0) (ltl$c ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (= (lnull$a ?v0) (lnull$a ?v1)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (= (lnull$b ?v0) (lnull$b ?v1)) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) (and (= (lhd$b ?v0) (lhd$b ?v1)) (= (ltl$b ?v0) (ltl$b ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (=> (and (= (lnull$c ?v0) (lnull$c ?v1)) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) (and (= (lhd$c ?v0) (lhd$c ?v1)) (= (ltl$c ?v0) (ltl$c ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 A_llist_a_llist_prod_llist$) (?v4 A_llist_a_llist_prod_llist$)) (=> (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$f (fun_app$g ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (and (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 A_llist_llist$) (?v4 A_llist_llist$)) (=> (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (and (= (lnull$b ?v3) (lnull$b ?v4)) (=> (and (not (lnull$b ?v3)) (not (lnull$b ?v4))) (and (= (lhd$b ?v3) (lhd$b ?v4)) (or (fun_app$h (fun_app$i ?v0 (ltl$b ?v3)) (ltl$b ?v4)) (= (ltl$b ?v3) (ltl$b ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_set_llist_a_set_llist_bool_fun_fun$) (?v1 A_set_llist$) (?v2 A_set_llist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_set_llist$) (?v4 A_set_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (and (= (lnull$c ?v3) (lnull$c ?v4)) (=> (and (not (lnull$c ?v3)) (not (lnull$c ?v4))) (and (= (lhd$c ?v3) (lhd$c ?v4)) (or (fun_app$j (fun_app$k ?v0 (ltl$c ?v3)) (ltl$c ?v4)) (= (ltl$c ?v3) (ltl$c ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$l ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 A_llist_a_llist_prod_llist$) (?v4 A_llist_a_llist_prod_llist$)) (=> (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$f (fun_app$g ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (and (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 A_llist_llist$) (?v4 A_llist_llist$)) (=> (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (and (= (lnull$b ?v3) (lnull$b ?v4)) (=> (and (not (lnull$b ?v3)) (not (lnull$b ?v4))) (and (= (lhd$b ?v3) (lhd$b ?v4)) (fun_app$h (fun_app$i ?v0 (ltl$b ?v3)) (ltl$b ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_set_llist_a_set_llist_bool_fun_fun$) (?v1 A_set_llist$) (?v2 A_set_llist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v3 A_set_llist$) (?v4 A_set_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (and (= (lnull$c ?v3) (lnull$c ?v4)) (=> (and (not (lnull$c ?v3)) (not (lnull$c ?v4))) (and (= (lhd$c ?v3) (lhd$c ?v4)) (fun_app$j (fun_app$k ?v0 (ltl$c ?v3)) (ltl$c ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$l ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$b (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_llist$) (?v2 A_set$) (?v3 A_set_llist$)) (= (= (lCons$c ?v0 ?v1) (lCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$c ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$c ?v1 (lhd$a ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (=> (and (=> (or (lnull$b ?v0) (not (fun_app$b ?v1 (lhd$b ?v0)))) false) (=> (and (not (lnull$b ?v0)) (fun_app$b ?v1 (lhd$b ?v0))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_bool_fun$)) (=> (and (=> (or (lnull$c ?v0) (not (fun_app$e ?v1 (lhd$c ?v0)))) false) (=> (and (not (lnull$c ?v0)) (fun_app$e ?v1 (lhd$c ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$b lnull$ ?v0) (not (fun_app$d ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (! (= (lhd$a (lCons$a ?v0 ?v1)) ?v0) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lhd$b (lCons$b ?v0 ?v1)) ?v0) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set_llist$)) (! (= (lhd$c (lCons$c ?v0 ?v1)) ?v0) :pattern ((lCons$c ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0))) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (lnull$b ?v0) (lnull$b (ltl$b ?v0))) ))
(assert (forall ((?v0 A_set_llist$)) (=> (lnull$c ?v0) (lnull$c (ltl$c ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b lnull$ (ltl$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (! (= (ltl$a (lCons$a ?v0 ?v1)) ?v1) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (ltl$b (lCons$b ?v0 ?v1)) ?v1) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set_llist$)) (! (= (ltl$c (lCons$c ?v0 ?v1)) ?v1) :pattern ((lCons$c ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (= (not (lnull$a ?v0)) (exists ((?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist_llist$)) (= (not (lnull$b ?v0)) (exists ((?v1 A_llist$) (?v2 A_llist_llist$)) (= ?v0 (lCons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_set_llist$)) (= (not (lnull$c ?v0)) (exists ((?v1 A_set$) (?v2 A_set_llist$)) (= ?v0 (lCons$c ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$b lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (not (lnull$a ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) (not (lnull$b ?v0))) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set$) (?v2 A_set_llist$)) (=> (= ?v0 (lCons$c ?v1 ?v2)) (not (lnull$c ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$b lnull$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (not (lnull$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (not (lnull$b (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_llist$)) (not (lnull$c (lCons$c ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$b lnull$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 A_set_llist$)) (=> (and (=> (lnull$c ?v0) false) (=> (not (lnull$c ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$b lnull$ ?v0) false) (=> (not (fun_app$b lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_a_llist_prod_llist$)) (=> (member$c ?v1 ?v0) (lnull$a ?v1)) ) false) (=> (not (forall ((?v1 A_llist_a_llist_prod_llist$)) (=> (member$c ?v1 ?v0) (lnull$a ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$d ?v1 ?v0) (lnull$b ?v1)) ) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$d ?v1 ?v0) (lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_set_llist_set$)) (=> (and (=> (forall ((?v1 A_set_llist$)) (=> (member$e ?v1 ?v0) (lnull$c ?v1)) ) false) (=> (not (forall ((?v1 A_set_llist$)) (=> (member$e ?v1 ?v0) (lnull$c ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_set_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$c ?v0) (fun_app$b lnull$ ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ lnull$) uu$) uua$) ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) (lCons$ (lhd$ ?v0) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (and (fun_app$b ?v0 ?v3) (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ (ltl$ ?v3))))) (and (fun_app$d (fun_app$o ?v2 (lhd$ ?v3)) (lhd$ (ltl$ ?v3))) (or (fun_app$b ?v0 (ltl$ ?v3)) (fun_app$b (lsorted$ ?v2) (ltl$ ?v3))))) )) (fun_app$b (lsorted$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (and (fun_app$b (lsorted$ ?v0) ?v1) (and (not (fun_app$b lnull$ ?v1)) (not (fun_app$b lnull$ (ltl$ ?v1))))) (fun_app$d (fun_app$o ?v0 (lhd$ ?v1)) (lhd$ (ltl$ ?v1)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 ?v2)) (=> (not (fun_app$b lnull$ ?v2)) (and (fun_app$d (fun_app$o ?v0 ?v1) (lhd$ ?v2)) (fun_app$b (lsorted$ ?v0) ?v2)))) :pattern ((fun_app$b (lsorted$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v4) ?v5) (not (fun_app$b lnull$ ?v4))) (and (not (fun_app$b lnull$ ?v5)) (=> (not (fun_app$b lnull$ ?v5)) (or (fun_app$d (fun_app$o ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (and (= (lhd$ ?v4) (lhd$ ?v5)) (or (fun_app$b (fun_app$l ?v0 (ltl$ ?v4)) (ltl$ ?v5)) (fun_app$b (fun_app$l (llexord$ ?v3) (ltl$ ?v4)) (ltl$ ?v5)))))))) )) (fun_app$b (fun_app$l (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$b (lmember$ ?v0) ?v2))) :pattern ((fun_app$b (lmember$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$d ?v0 ?v1) (fun_app$b (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$b (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v1) ))
(assert (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ltakeWhile$ ?v0) lNil$) lNil$) :pattern ((ltakeWhile$ ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (or (and (= ?v1 ?v3) (fun_app$b (fun_app$l (llexord$ ?v0) ?v2) ?v4)) (fun_app$d (fun_app$o ?v0 ?v1) ?v3))) :pattern ((fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$b (fun_app$l (llexord$ ?v1) ?v2) ?v0) (fun_app$b lnull$ ?v2))) :pattern ((fun_app$b (fun_app$l (llexord$ ?v1) ?v2) ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$l (llexord$ ?v0) lNil$) ?v1) true) :pattern ((fun_app$b (fun_app$l (llexord$ ?v0) lNil$) ?v1)))))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$) (?v4 A$) (?v5 A_llist$)) (= (= (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) ?v3) (lCons$ ?v4 ?v5)) (and (not (fun_app$b ?v0 ?v3)) (and (= ?v4 (fun_app$a ?v1 ?v3)) (= ?v5 (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3)))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) ?v3))) (not (fun_app$b ?v0 ?v3))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (fun_app$b ?v0 ?v3)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) lNil$) ?v0) :pattern ((lmirror_aux$ ?v0)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (ltakeWhile$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$d ?v0 ?v1) (lCons$ ?v1 (fun_app$ (ltakeWhile$ ?v0) ?v2)) lNil$)) :pattern ((fun_app$ (ltakeWhile$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1))) (and (not (fun_app$b lnull$ ?v1)) (fun_app$d ?v0 (lhd$ ?v1)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (fun_app$b lnull$ ?v1) (not (fun_app$d ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (=> (not (fun_app$b lnull$ ?v1)) (not (fun_app$d ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_llist_set$)) (= (collect$ (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_set$)) (= (collect$a (uuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$)) (= (collect$b (uud$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (fun_app$e (member$b ?v0) (collect$a ?v1)) (fun_app$d ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (! (= (fun_app$b (lsorted$ ?v0) lNil$) true) :pattern ((lsorted$ ?v0)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$b (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (forall ((?v3 A$) (?v4 A$)) (or (fun_app$d (fun_app$o ?v0 ?v3) ?v4) (or (= ?v3 ?v4) (fun_app$d (fun_app$o ?v0 ?v4) ?v3))) ) (or (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$l (llexord$ ?v0) ?v2) ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (and (fun_app$b (fun_app$l (llexord$ ?v0) ?v2) ?v3) (forall ((?v4 A$) (?v5 A$) (?v6 A$)) (=> (and (fun_app$d (fun_app$o ?v0 ?v4) ?v5) (fun_app$d (fun_app$o ?v0 ?v5) ?v6)) (fun_app$d (fun_app$o ?v0 ?v4) ?v6)) ))) (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v3)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (and (fun_app$b (fun_app$l (llexord$ ?v0) ?v2) ?v1) (forall ((?v3 A$) (?v4 A$)) (=> (and (fun_app$d (fun_app$o ?v0 ?v3) ?v4) (fun_app$d (fun_app$o ?v0 ?v4) ?v3)) false) ))) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (! (=> (fun_app$b ?v0 ?v1) (= (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1) lNil$)) :pattern ((fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$b (fun_app$l (llexord$ ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$b (pred_llist$ ?v0) lNil$) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (lsorted$ ?v0) lNil$) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ (ltakeWhile$ ?v0) ?v1) lNil$) (=> (not (= ?v1 lNil$)) (not (fun_app$d ?v0 (lhd$ ?v1))))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$l ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$b (fun_app$l ?v0 ?v6) ?v7) (fun_app$b (fun_app$l (llexord$ ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$d (fun_app$o ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$b (fun_app$l (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$b (fun_app$l (llexord$ ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$d (fun_app$o ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2)) lNil$) false) :pattern ((fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$b (fun_app$l (llexord$ ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$d (fun_app$o ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 lNil$)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$b ?v0 ?v3) (or (= ?v3 lNil$) (or (exists ((?v4 A$)) (= ?v3 (lCons$ ?v4 lNil$)) ) (exists ((?v4 A$) (?v5 A$) (?v6 A_llist$)) (and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6))) (and (fun_app$d (fun_app$o ?v2 ?v4) ?v5) (or (fun_app$b ?v0 (lCons$ ?v5 ?v6)) (fun_app$b (lsorted$ ?v2) (lCons$ ?v5 ?v6))))) )))) )) (fun_app$b (lsorted$ ?v2) ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (and (fun_app$b (lsorted$ ?v0) ?v1) (and (=> (= ?v1 lNil$) false) (and (forall ((?v2 A$)) (=> (= ?v1 (lCons$ ?v2 lNil$)) false) ) (forall ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$d (fun_app$o ?v0 ?v2) ?v3) (fun_app$b (lsorted$ ?v0) (lCons$ ?v3 ?v4)))) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (! (= (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 lNil$)) true) :pattern ((fun_app$b (lsorted$ ?v0) (lCons$ ?v1 lNil$))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (fun_app$b (lsorted$ ?v0) ?v1) (or (= ?v1 lNil$) (or (exists ((?v2 A$)) (= ?v1 (lCons$ ?v2 lNil$)) ) (exists ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$d (fun_app$o ?v0 ?v2) ?v3) (fun_app$b (lsorted$ ?v0) (lCons$ ?v3 ?v4)))) )))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$b ?v0 ?v3) lNil$ (lCons$ (fun_app$a ?v1 ?v3) (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (ltl$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (ite (fun_app$b ?v0 ?v3) lNil$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (or (fun_app$b lnull$ ?v0) (not (fun_app$d ?v1 (lhd$ ?v0)))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (ltakeWhile$ ?v1) ?v0)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (ite (fun_app$d ?v0 (lhd$ ?v1)) (fun_app$ (ltakeWhile$ ?v0) (ltl$ ?v1)) lNil$)) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b lnull$ ?v0) (= ?v0 lNil$)) :pattern ((fun_app$b lnull$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$b lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (= ?v0 lNil$)) ))
(assert (fun_app$b lnull$ lNil$))
(assert (= (ltl$ lNil$) lNil$))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (or (fun_app$d (fun_app$o ?v0 ?v1) ?v3) (and (= ?v1 ?v3) (fun_app$b (fun_app$l (llexord$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (or (and (= ?v1 ?v4) (fun_app$b (fun_app$l (llexord$ ?v0) ?v2) ?v5)) (fun_app$d (fun_app$o ?v0 ?v1) ?v4))) )) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$d (fun_app$o ?v0 ?v1) ?v2) (fun_app$b (fun_app$l (llexord$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b (fun_app$l (llexord$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$d (fun_app$o ?v0 ?v1) ?v2) (fun_app$b (lsorted$ ?v0) (lCons$ ?v2 ?v3)))) :pattern ((fun_app$b (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$d (fun_app$o ?v0 ?v1) ?v2) (fun_app$b (lsorted$ ?v0) (lCons$ ?v2 ?v3))) (fun_app$b (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (fun_app$b (lsorted$ ?v0) ?v1) (fun_app$b (lsorted$ ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$b ?v0 ?v1)) (= (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1) (lCons$ (fun_app$a ?v2 ?v1) (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) (fun_app$ ?v3 ?v1))))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$b ?v0 ?v1)) (not (fun_app$b lnull$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1)))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (fun_app$b ?v0 ?v1) (fun_app$b lnull$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$b ?v0 ?v1)) (= (ltl$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1)) (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) (fun_app$ ?v3 ?v1)))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$b ?v0 ?v1)) (= (lhd$ (fun_app$ (fun_app$m (fun_app$n (unfold_llist$ ?v0) ?v2) ?v3) ?v1)) (fun_app$a ?v2 ?v1))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (ltakeWhile$ ?v0) ?v1) (ite (or (fun_app$b lnull$ ?v1) (not (fun_app$d ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (fun_app$ (ltakeWhile$ ?v0) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (fun_app$b lnull$ ?v0) (not (fun_app$d ?v1 (lhd$ ?v0)))) (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v1) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) (= (lhd$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) (not (fun_app$b lnull$ (fun_app$ (ltakeWhile$ ?v1) ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (= (fun_app$ (lmirror_aux$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (lmirror_aux$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) (= (ltl$ (fun_app$ (ltakeWhile$ ?v1) ?v0)) (fun_app$ (ltakeWhile$ ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (= lmirror$ (lmirror_aux$ lNil$)))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (fun_app$l finite_lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$b (fun_app$l finite_lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$)) (! (= (llast$ (lCons$ ?v0 lNil$)) ?v0) :pattern ((uue$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (=> (not (fun_app$b lnull$ ?v0)) (and (not (fun_app$b lnull$ ?v1)) (and (= (lhd$ ?v0) (lhd$ ?v1)) (fun_app$b (fun_app$l lprefix$ (ltl$ ?v0)) (ltl$ ?v1))))) (fun_app$b (fun_app$l lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$l ?v0 ?v3) ?v4) (and (=> (fun_app$b lnull$ ?v4) (fun_app$b lnull$ ?v3)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$l ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (fun_app$b (fun_app$l lprefix$ (ltl$ ?v3)) (ltl$ ?v4))))))) )) (fun_app$b (fun_app$l lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist_llist$)) (=> (not (lnull$b ?v3)) (fun_app$h (fun_app$p ?v2 (lhd$b ?v3)) ?v3)) ) (forall ((?v3 A_llist_llist$) (?v4 A_llist$)) (=> (and (not (lnull$b ?v3)) (and (member$ ?v4 (lset$ (ltl$b ?v3))) (fun_app$h (fun_app$p ?v2 ?v4) (ltl$b ?v3)))) (fun_app$h (fun_app$p ?v2 ?v4) ?v3)) ))) (fun_app$h (fun_app$p ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod_llist$)) (=> (not (lnull$a ?v3)) (fun_app$f (fun_app$q ?v2 (lhd$a ?v3)) ?v3)) ) (forall ((?v3 A_llist_a_llist_prod_llist$) (?v4 A_llist_a_llist_prod$)) (=> (and (not (lnull$a ?v3)) (and (member$a ?v4 (lset$a (ltl$a ?v3))) (fun_app$f (fun_app$q ?v2 ?v4) (ltl$a ?v3)))) (fun_app$f (fun_app$q ?v2 ?v4) ?v3)) ))) (fun_app$f (fun_app$q ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (and (forall ((?v3 A_llist$)) (=> (not (fun_app$b lnull$ ?v3)) (fun_app$b (fun_app$r ?v2 (lhd$ ?v3)) ?v3)) ) (forall ((?v3 A_llist$) (?v4 A$)) (=> (and (not (fun_app$b lnull$ ?v3)) (and (fun_app$e (member$b ?v4) (lset$b (ltl$ ?v3))) (fun_app$b (fun_app$r ?v2 ?v4) (ltl$ ?v3)))) (fun_app$b (fun_app$r ?v2 ?v4) ?v3)) ))) (fun_app$b (fun_app$r ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$s (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$l lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$l lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (fun_app$l lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (fun_app$l lprefix$ ?v1) ?v3))) :pattern ((fun_app$b (fun_app$l lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$l lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (fun_app$l lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$b (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (= (fun_app$b (lstrict_prefix$ lNil$) lNil$) false))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$l lprefix$ ?v0) lNil$) (fun_app$b lnull$ ?v0)) :pattern ((fun_app$l lprefix$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$l lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$l lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$l lprefix$ ?v0) ?v2) (fun_app$b (fun_app$l lprefix$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$b (lstrict_prefix$ ?v3) ?v2) (fun_app$b ?v0 ?v3)) ) (fun_app$b ?v0 ?v2)) ) (fun_app$b ?v0 ?v1)) ))
(assert (= finite_lprefix$ lprefix$))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (lstrict_prefix$ ?v0) ?v1) (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$b (lstrict_prefix$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (member$ ?v0 (lset$ (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (member$a ?v0 (lset$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$e (member$b ?v0) (lset$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (member$ ?v0 (lset$ (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (member$a ?v0 (lset$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$e (member$b ?v0) (lset$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$)) (=> (member$a ?v0 (lset$a ?v1)) (member$a ?v0 (lset$a (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$e (member$b ?v0) (lset$b ?v1)) (fun_app$e (member$b ?v0) (lset$b (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$)) (=> (member$a ?v0 (lset$a ?v1)) (member$a ?v0 (lset$a (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$e (member$b ?v0) (lset$b ?v1)) (fun_app$e (member$b ?v0) (lset$b (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v2 A_llist_a_llist_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$a ?v0 (lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (fun_app$e (member$b ?v0) (lset$b ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist_llist$)) (fun_app$h ?v2 (lCons$b ?v0 ?v3)) ) (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$h ?v2 ?v4))) (fun_app$h ?v2 (lCons$b ?v3 ?v4))) ))) (fun_app$h ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_bool_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod_llist$)) (fun_app$f ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v4)) (and (not (= ?v0 ?v3)) (fun_app$f ?v2 ?v4))) (fun_app$f ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$f ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$b ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v4)) (and (not (= ?v0 ?v3)) (fun_app$b ?v2 ?v4))) (fun_app$b ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$b ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist_llist$)) (fun_app$h ?v2 (lCons$b ?v0 ?v3)) ) (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 (lCons$b ?v3 ?v4))) ))) (fun_app$h ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_bool_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod_llist$)) (fun_app$f ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v4)) (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$f ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$b ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v4)) (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$b ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v2 A_llist_a_llist_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$a ?v0 (lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (fun_app$e (member$b ?v0) (lset$b ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (fun_app$h (fun_app$p ?v2 ?v3) (lCons$b ?v3 ?v4)) ) (forall ((?v3 A_llist$) (?v4 A_llist_llist$) (?v5 A_llist$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$h (fun_app$p ?v2 ?v5) ?v4)) (fun_app$h (fun_app$p ?v2 ?v5) (lCons$b ?v3 ?v4))) ))) (fun_app$h (fun_app$p ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (fun_app$f (fun_app$q ?v2 ?v3) (lCons$a ?v3 ?v4)) ) (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$) (?v5 A_llist_a_llist_prod$)) (=> (and (member$a ?v5 (lset$a ?v4)) (fun_app$f (fun_app$q ?v2 ?v5) ?v4)) (fun_app$f (fun_app$q ?v2 ?v5) (lCons$a ?v3 ?v4))) ))) (fun_app$f (fun_app$q ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$b (fun_app$r ?v2 ?v3) (lCons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (fun_app$e (member$b ?v5) (lset$b ?v4)) (fun_app$b (fun_app$r ?v2 ?v5) ?v4)) (fun_app$b (fun_app$r ?v2 ?v5) (lCons$ ?v3 ?v4))) ))) (fun_app$b (fun_app$r ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$ ?v0 (lset$ (ltl$b ?v1))) (member$ ?v0 (lset$ ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (member$a ?v0 (lset$a (ltl$a ?v1))) (member$a ?v0 (lset$a ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (fun_app$e (member$b ?v0) (lset$b (ltl$ ?v1))) (fun_app$e (member$b ?v0) (lset$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ (lCons$ ?v2 ?v0)) (lCons$ ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$l lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$b (fun_app$l lprefix$ ?v1) ?v3)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b (fun_app$l lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$b (fun_app$l lprefix$ ?v1) ?v0) (fun_app$b lnull$ ?v1))) :pattern ((fun_app$b (fun_app$l lprefix$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (not (fun_app$b lnull$ ?v0))) (not (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$l lprefix$ lNil$) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$) (?v2 A_llist_llist$)) (=> (member$ ?v0 (lset$ (ltakeWhile$a ?v1 ?v2))) (and (member$ ?v0 (lset$ ?v2)) (fun_app$b ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_bool_fun$) (?v2 A_llist_a_llist_prod_llist$)) (=> (member$a ?v0 (lset$a (ltakeWhile$b ?v1 ?v2))) (and (member$a ?v0 (lset$a ?v2)) (fun_app$c ?v1 ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (fun_app$e (member$b ?v0) (lset$b (fun_app$ (ltakeWhile$ ?v1) ?v2))) (and (fun_app$e (member$b ?v0) (lset$b ?v2)) (fun_app$d ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (! (=> (forall ((?v2 A_llist$)) (=> (member$ ?v2 (lset$ ?v0)) (fun_app$b ?v1 ?v2)) ) (= (ltakeWhile$a ?v1 ?v0) ?v0)) :pattern ((ltakeWhile$a ?v1 ?v0)))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_bool_fun$)) (! (=> (forall ((?v2 A_llist_a_llist_prod$)) (=> (member$a ?v2 (lset$a ?v0)) (fun_app$c ?v1 ?v2)) ) (= (ltakeWhile$b ?v1 ?v0) ?v0)) :pattern ((ltakeWhile$b ?v1 ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (fun_app$e (member$b ?v2) (lset$b ?v0)) (fun_app$d ?v1 ?v2)) ) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) ?v0)) :pattern ((fun_app$ (ltakeWhile$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_bool_fun$) (?v3 A_llist_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 (lset$ ?v1)) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))) )) (= (ltakeWhile$a ?v2 ?v0) (ltakeWhile$a ?v3 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_bool_fun$) (?v3 A_llist_a_llist_prod_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist_a_llist_prod$)) (=> (member$a ?v4 (lset$a ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))) )) (= (ltakeWhile$b ?v2 ?v0) (ltakeWhile$b ?v3 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (fun_app$e (member$b ?v4) (lset$b ?v1)) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))) )) (= (fun_app$ (ltakeWhile$ ?v2) ?v0) (fun_app$ (ltakeWhile$ ?v3) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l lprefix$ (ltl$ ?v0)) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (lsorted$ ?v2) ?v1)) (fun_app$b (lsorted$ ?v2) ?v0)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (fun_app$b (fun_app$l lprefix$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$b (fun_app$l (llexord$ ?v2) ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (member$ ?v0 (lset$ ?v1)) (fun_app$h (lmember$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (= (member$a ?v0 (lset$a ?v1)) (fun_app$f (lmember$b ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$e (member$b ?v0) (lset$b ?v1)) (fun_app$b (lmember$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (lnull$b ?v0)) (member$ ?v1 (lset$ (ltl$b ?v0)))) (member$ ?v1 (lset$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod$)) (=> (and (not (lnull$a ?v0)) (member$a ?v1 (lset$a (ltl$a ?v0)))) (member$a ?v1 (lset$a ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (fun_app$b lnull$ ?v0)) (fun_app$e (member$b ?v1) (lset$b (ltl$ ?v0)))) (fun_app$e (member$b ?v1) (lset$b ?v0))) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (not (lnull$b ?v0)) (member$ (lhd$b ?v0) (lset$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (not (lnull$a ?v0)) (member$a (lhd$a ?v0) (lset$a ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (fun_app$e (member$b (lhd$ ?v0)) (lset$b ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (fun_app$l lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$b (fun_app$l lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2)) ) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$b (fun_app$l lprefix$ ?v2) ?v3))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$l lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (and (forall ((?v2 A_llist$)) (=> (and (= ?v0 lNil$) (= ?v1 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$b (fun_app$l lprefix$ ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$l ?v0 ?v3) ?v4) (or (exists ((?v5 A_llist$)) (and (= ?v3 lNil$) (= ?v4 ?v5)) ) (exists ((?v5 A_llist$) (?v6 A_llist$) (?v7 A$)) (and (= ?v3 (lCons$ ?v7 ?v5)) (and (= ?v4 (lCons$ ?v7 ?v6)) (or (fun_app$b (fun_app$l ?v0 ?v5) ?v6) (fun_app$b (fun_app$l lprefix$ ?v5) ?v6)))) ))) )) (fun_app$b (fun_app$l lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (not (fun_app$b lnull$ ?v0))) (= (lhd$ ?v0) (lhd$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$l finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (fun_app$l finite_lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$l finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((fun_app$l finite_lprefix$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (llast$ (lCons$ ?v0 ?v1)) (ite (fun_app$b lnull$ ?v1) ?v0 (llast$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (=> (and (fun_app$h ?v0 ?v1) (forall ((?v2 A_llist_llist$)) (=> (and (fun_app$h ?v0 ?v2) (not (lnull$b ?v2))) (and (not (member$ (lhd$b ?v2) (lset$ (ltl$b ?v2)))) (or (fun_app$h ?v0 (ltl$b ?v2)) (ldistinct$ (ltl$b ?v2))))) )) (ldistinct$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist_bool_fun$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (fun_app$f ?v0 ?v1) (forall ((?v2 A_llist_a_llist_prod_llist$)) (=> (and (fun_app$f ?v0 ?v2) (not (lnull$a ?v2))) (and (not (member$a (lhd$a ?v2) (lset$a (ltl$a ?v2)))) (or (fun_app$f ?v0 (ltl$a ?v2)) (ldistinct$a (ltl$a ?v2))))) )) (ldistinct$a ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (and (fun_app$b ?v0 ?v2) (not (fun_app$b lnull$ ?v2))) (and (not (fun_app$e (member$b (lhd$ ?v2)) (lset$b (ltl$ ?v2)))) (or (fun_app$b ?v0 (ltl$ ?v2)) (ldistinct$b (ltl$ ?v2))))) )) (ldistinct$b ?v1)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (ldistinct$ ?v0) (not (lnull$b ?v0))) (not (member$ (lhd$b ?v0) (lset$ (ltl$b ?v0))))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (and (ldistinct$a ?v0) (not (lnull$a ?v0))) (not (member$a (lhd$a ?v0) (lset$a (ltl$a ?v0))))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (ldistinct$b ?v0) (not (fun_app$b lnull$ ?v0))) (not (fun_app$e (member$b (lhd$ ?v0)) (lset$b (ltl$ ?v0))))) ))
(assert (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (=> (and (fun_app$h ?v0 ?v1) (forall ((?v2 A_llist_llist$)) (=> (fun_app$h ?v0 ?v2) (or (= ?v2 lNil$b) (exists ((?v3 A_llist$) (?v4 A_llist_llist$)) (and (= ?v2 (lCons$b ?v3 ?v4)) (and (not (member$ ?v3 (lset$ ?v4))) (or (fun_app$h ?v0 ?v4) (ldistinct$ ?v4)))) ))) )) (ldistinct$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist_bool_fun$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (fun_app$f ?v0 ?v1) (forall ((?v2 A_llist_a_llist_prod_llist$)) (=> (fun_app$f ?v0 ?v2) (or (= ?v2 lNil$a) (exists ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (and (= ?v2 (lCons$a ?v3 ?v4)) (and (not (member$a ?v3 (lset$a ?v4))) (or (fun_app$f ?v0 ?v4) (ldistinct$a ?v4)))) ))) )) (ldistinct$a ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (fun_app$b ?v0 ?v2) (or (= ?v2 lNil$) (exists ((?v3 A$) (?v4 A_llist$)) (and (= ?v2 (lCons$ ?v3 ?v4)) (and (not (fun_app$e (member$b ?v3) (lset$b ?v4))) (or (fun_app$b ?v0 ?v4) (ldistinct$b ?v4)))) ))) )) (ldistinct$b ?v1)) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (ldistinct$ ?v0) (and (=> (= ?v0 lNil$b) false) (forall ((?v1 A_llist$) (?v2 A_llist_llist$)) (=> (and (= ?v0 (lCons$b ?v1 ?v2)) (and (not (member$ ?v1 (lset$ ?v2))) (ldistinct$ ?v2))) false) ))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (and (ldistinct$a ?v0) (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (= ?v0 (lCons$a ?v1 ?v2)) (and (not (member$a ?v1 (lset$a ?v2))) (ldistinct$a ?v2))) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (ldistinct$b ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (fun_app$e (member$b ?v1) (lset$b ?v2))) (ldistinct$b ?v2))) false) ))) false) ))
(assert (forall ((?v0 A_llist_llist$)) (= (ldistinct$ ?v0) (or (= ?v0 lNil$b) (exists ((?v1 A_llist$) (?v2 A_llist_llist$)) (and (= ?v0 (lCons$b ?v1 ?v2)) (and (not (member$ ?v1 (lset$ ?v2))) (ldistinct$ ?v2))) ))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (= (ldistinct$a ?v0) (or (= ?v0 lNil$a) (exists ((?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (and (= ?v0 (lCons$a ?v1 ?v2)) (and (not (member$a ?v1 (lset$a ?v2))) (ldistinct$a ?v2))) ))) ))
(assert (forall ((?v0 A_llist$)) (= (ldistinct$b ?v0) (or (= ?v0 lNil$) (exists ((?v1 A$) (?v2 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (fun_app$e (member$b ?v1) (lset$b ?v2))) (ldistinct$b ?v2))) ))) ))
(assert (= (ldistinct$b lNil$) true))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (ldistinct$ (lCons$b ?v0 ?v1)) (and (not (member$ ?v0 (lset$ ?v1))) (ldistinct$ ?v1))) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (! (= (ldistinct$a (lCons$a ?v0 ?v1)) (and (not (member$a ?v0 (lset$a ?v1))) (ldistinct$a ?v1))) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ldistinct$b (lCons$ ?v0 ?v1)) (and (not (fun_app$e (member$b ?v0) (lset$b ?v1))) (ldistinct$b ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (ldistinct$b ?v0) (fun_app$b (fun_app$l lprefix$ ?v1) ?v0)) (ldistinct$b ?v1)) ))
(assert (ldistinct$b lNil$))
(assert (forall ((?v0 A_llist$)) (=> (ldistinct$b ?v0) (ldistinct$b (ltl$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (not (member$ ?v0 (lset$ ?v1))) (ldistinct$ ?v1)) (ldistinct$ (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (not (member$a ?v0 (lset$a ?v1))) (ldistinct$a ?v1)) (ldistinct$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (not (fun_app$e (member$b ?v0) (lset$b ?v1))) (ldistinct$b ?v1)) (ldistinct$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 lNil$) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$ ?v3) (fun_app$b ?v0 ?v3)) (fun_app$b ?v0 (lCons$ ?v2 ?v3))) ) (=> (forall ((?v2 A_llist$)) (=> (fun_app$b (lstrict_prefix$ ?v2) ?v1) (fun_app$b ?v0 ?v2)) ) (fun_app$b ?v0 ?v1)))) (fun_app$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_a_llist_prod_set$)) (=> (and (member$a (pair$ ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (member$a (pair$ ?v3 ?v4) ?v2) (or (fun_app$b lnull$ ?v3) (exists ((?v5 A$) (?v6 A_llist$) (?v7 A_llist$)) (and (= ?v3 (lCons$ ?v5 ?v6)) (and (= ?v4 (lCons$ ?v5 ?v7)) (or (member$a (pair$ ?v6 ?v7) ?v2) (fun_app$b (fun_app$l lprefix$ ?v6) ?v7)))) ))) )) (fun_app$b (fun_app$l lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (= (lfinite$ lNil$) true))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (lstrict_prefix$ ?v0) ?v1) (lfinite$ ?v0)) ))
(assert (lfinite$ lNil$))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (lfinite$ ?v1)) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$b (fun_app$l lprefix$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (forall ((?v2 A_llist$)) (=> (fun_app$b lnull$ ?v2) (fun_app$b ?v1 ?v2)) ) (forall ((?v2 A_llist$)) (=> (and (lfinite$ ?v2) (and (not (fun_app$b lnull$ ?v2)) (fun_app$b ?v1 (ltl$ ?v2)))) (fun_app$b ?v1 ?v2)) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lfinite$a (ltakeWhile$a ?v0 ?v1)) (or (lfinite$a ?v1) (exists ((?v2 A_llist$)) (and (member$ ?v2 (lset$ ?v1)) (not (fun_app$b ?v0 ?v2))) ))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (lfinite$b (ltakeWhile$b ?v0 ?v1)) (or (lfinite$b ?v1) (exists ((?v2 A_llist_a_llist_prod$)) (and (member$a ?v2 (lset$a ?v1)) (not (fun_app$c ?v0 ?v2))) ))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (lfinite$ ?v1) (exists ((?v2 A$)) (and (fun_app$e (member$b ?v2) (lset$b ?v1)) (not (fun_app$d ?v0 ?v2))) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (ite (lfinite$ ?v0) (fun_app$b (fun_app$l finite_lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$b (fun_app$l lprefix$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_set_llist_bool_fun$) (?v1 A_set_llist$)) (=> (and (fun_app$j ?v0 ?v1) (forall ((?v2 A_set_llist$)) (=> (and (fun_app$j ?v0 ?v2) (not (lnull$c ?v2))) (and (forall ((?v3 A_set$)) (=> (member$f ?v3 (lset$c (ltl$c ?v2))) (fun_app$e (less_eq$ (lhd$c ?v2)) ?v3)) ) (or (fun_app$j ?v0 (ltl$c ?v2)) (lsorted$a (ltl$c ?v2))))) )) (lsorted$a ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_llist$)) (! (= (lsorted$a (lCons$c ?v0 (lCons$c ?v1 ?v2))) (and (fun_app$e (less_eq$ ?v0) ?v1) (lsorted$a (lCons$c ?v1 ?v2)))) :pattern ((lCons$c ?v0 (lCons$c ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (fun_app$e (less_eq$ (lset$b ?v0)) (lset$b ?v1))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$e (less_eq$ (lset$b (ltl$ ?v0))) (lset$b ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set_llist$)) (=> (and (fun_app$e (less_eq$ ?v0) ?v1) (lsorted$a (lCons$c ?v1 ?v2))) (lsorted$a (lCons$c ?v0 (lCons$c ?v1 ?v2)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$)) (exists ((?v1 A_llist$) (?v2 A_llist$)) (= ?v0 (pair$ ?v1 ?v2)) ) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod$)) (=> (forall ((?v2 A_llist$) (?v3 A_llist$)) (fun_app$c ?v0 (pair$ ?v2 ?v3)) ) (fun_app$c ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$)) (=> (forall ((?v1 A_llist$) (?v2 A_llist$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false) ) false) ))
(assert (forall ((?v0 A_set_llist_bool_fun$) (?v1 A_set_llist$)) (=> (and (fun_app$j ?v0 ?v1) (forall ((?v2 A_set_llist$)) (=> (fun_app$j ?v0 ?v2) (or (= ?v2 lNil$c) (or (exists ((?v3 A_set$)) (= ?v2 (lCons$c ?v3 lNil$c)) ) (exists ((?v3 A_set$) (?v4 A_set$) (?v5 A_set_llist$)) (and (= ?v2 (lCons$c ?v3 (lCons$c ?v4 ?v5))) (and (fun_app$e (less_eq$ ?v3) ?v4) (or (fun_app$j ?v0 (lCons$c ?v4 ?v5)) (lsorted$a (lCons$c ?v4 ?v5))))) )))) )) (lsorted$a ?v1)) ))
(assert (forall ((?v0 A_set_llist$)) (=> (and (lsorted$a ?v0) (and (=> (= ?v0 lNil$c) false) (and (forall ((?v1 A_set$)) (=> (= ?v0 (lCons$c ?v1 lNil$c)) false) ) (forall ((?v1 A_set$) (?v2 A_set$) (?v3 A_set_llist$)) (=> (and (= ?v0 (lCons$c ?v1 (lCons$c ?v2 ?v3))) (and (fun_app$e (less_eq$ ?v1) ?v2) (lsorted$a (lCons$c ?v2 ?v3)))) false) )))) false) ))
(assert (forall ((?v0 A_set_llist$)) (= (lsorted$a ?v0) (or (= ?v0 lNil$c) (or (exists ((?v1 A_set$)) (= ?v0 (lCons$c ?v1 lNil$c)) ) (exists ((?v1 A_set$) (?v2 A_set$) (?v3 A_set_llist$)) (and (= ?v0 (lCons$c ?v1 (lCons$c ?v2 ?v3))) (and (fun_app$e (less_eq$ ?v1) ?v2) (lsorted$a (lCons$c ?v2 ?v3)))) )))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_llist$)) (= (lsorted$a (lCons$c ?v0 ?v1)) (and (lsorted$a ?v1) (forall ((?v2 A_set$)) (=> (member$f ?v2 (lset$c ?v1)) (fun_app$e (less_eq$ ?v0) ?v2)) ))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set_llist$)) (! (= (lsorted$a (lCons$c ?v0 ?v1)) (=> (not (lnull$c ?v1)) (and (fun_app$e (less_eq$ ?v0) (lhd$c ?v1)) (lsorted$a ?v1)))) :pattern ((lCons$c ?v0 ?v1)))))
(assert (forall ((?v0 A_set_llist_bool_fun$) (?v1 A_set_llist$)) (=> (and (fun_app$j ?v0 ?v1) (forall ((?v2 A_set_llist$)) (=> (and (fun_app$j ?v0 ?v2) (and (not (lnull$c ?v2)) (not (lnull$c (ltl$c ?v2))))) (and (fun_app$e (less_eq$ (lhd$c ?v2)) (lhd$c (ltl$c ?v2))) (or (fun_app$j ?v0 (ltl$c ?v2)) (lsorted$a (ltl$c ?v2))))) )) (lsorted$a ?v1)) ))
(assert (forall ((?v0 A_set_llist$)) (=> (and (lsorted$a ?v0) (and (not (lnull$c ?v0)) (not (lnull$c (ltl$c ?v0))))) (fun_app$e (less_eq$ (lhd$c ?v0)) (lhd$c (ltl$c ?v0)))) ))
(assert (forall ((?v0 A_set_llist$) (?v1 A_set$)) (=> (and (lsorted$a ?v0) (and (not (lnull$c ?v0)) (member$f ?v1 (lset$c (ltl$c ?v0))))) (fun_app$e (less_eq$ (lhd$c ?v0)) ?v1)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (or (= ?v1 ?v2) (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (and (lfinite$ ?v3) (and (= ?v1 (fun_app$ (lappend$ ?v3) ?v4)) (and (= ?v2 (fun_app$ (lappend$ ?v3) (lCons$ ?v5 ?v6))) (or (= ?v4 lNil$) (fun_app$d (fun_app$o ?v0 (lhd$ ?v4)) ?v5))))) ))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (lappend$ ?v0) ?v1))) (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lappend$ ?v0) ?v1)) (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$l lprefix$ (fun_app$ (lappend$ ?v0) ?v1)) (fun_app$ (lappend$ ?v0) ?v2)) (=> (lfinite$ ?v0) (fun_app$b (fun_app$l lprefix$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lappend$ ?v0) ?v1)) (ite (fun_app$b lnull$ ?v0) (ltl$ ?v1) (fun_app$ (lappend$ (ltl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$ (lappend$ ?v0) ?v1)) (ite (fun_app$b lnull$ ?v0) (lhd$ ?v1) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (lfinite$ ?v0) (= (llast$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (fun_app$e (less_eq$ (lset$b ?v0)) (lset$b (fun_app$ (lappend$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_bool_fun$) (?v3 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (not (fun_app$b ?v2 ?v0))) (= (ltakeWhile$a ?v2 (lappend$a ?v1 ?v3)) (ltakeWhile$a ?v2 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_bool_fun$) (?v3 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (not (fun_app$c ?v2 ?v0))) (= (ltakeWhile$b ?v2 (lappend$b ?v1 ?v3)) (ltakeWhile$b ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_bool_fun$) (?v3 A_llist$)) (=> (and (fun_app$e (member$b ?v0) (lset$b ?v1)) (not (fun_app$d ?v2 ?v0))) (= (fun_app$ (ltakeWhile$ ?v2) (fun_app$ (lappend$ ?v1) ?v3)) (fun_app$ (ltakeWhile$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$l (llexord$ ?v0) (fun_app$ (lappend$ ?v3) ?v1)) (fun_app$ (lappend$ ?v3) ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (fun_app$b (fun_app$l (llexord$ ?v0) ?v1) (fun_app$ (lappend$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (= (fun_app$ (lappend$ lNil$) lNil$) lNil$))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (not (fun_app$b lnull$ (fun_app$ (lappend$ ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ (fun_app$ (lappend$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (lappend$ ?v1) ?v0) ?v1)) :pattern ((fun_app$ (lappend$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (lappend$ ?v0) ?v1) ?v1)) :pattern ((fun_app$ (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b (fun_app$l lprefix$ ?v0) ?v1) (exists ((?v2 A_llist$)) (= ?v1 (fun_app$ (lappend$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$l lprefix$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (forall ((?v3 A_llist$)) (=> (= ?v2 (fun_app$ (lappend$ ?v0) ?v3)) false) )) false) ))
(check-sat)
(exit)

