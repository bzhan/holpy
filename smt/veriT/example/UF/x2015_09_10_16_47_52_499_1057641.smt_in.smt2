(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort Nat_natural_fun$ 0)
(declare-sort Natural_nat_fun$ 0)
(declare-sort Natural_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort Natural_natural_fun$ 0)
(declare-sort A_a_stream_a_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_fun_fun$ 0)
(declare-sort Natural_nat_nat_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort Bool_a_fun_bool_a_fun_fun$ 0)
(declare-sort A_a_stream_a_stream_fun_fun$ 0)
(declare-sort Bool_a_fun_bool_bool_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_a_fun_fun$ 0)
(declare-sort Natural_natural_bool_fun_fun$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_bool_fun_fun$ 0)
(declare-sort Natural_nat_fun_natural_nat_fun_fun$ 0)
(declare-sort Natural_nat_nat_fun_fun_natural_nat_fun_fun$ 0)
(declare-sort A_a_stream_a_stream_fun_fun_a_a_stream_a_stream_fun_fun_fun$ 0)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$) A$)
(declare-fun stl$ (A_stream$) A_stream$)
(declare-fun sCons$ (A$ A_stream$) A_stream$)
(declare-sort Natural$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun nat_of_natural$ (Natural$) Nat$)
(declare-fun natural_of_nat$ (Nat$) Natural$)
(declare-fun nibble0$ () Nibble$)
(declare-fun nibble1$ () Nibble$)
(declare-fun nibble2$ () Nibble$)
(declare-fun nibble3$ () Nibble$)
(declare-fun nibble4$ () Nibble$)
(declare-fun nibble5$ () Nibble$)
(declare-fun nibble6$ () Nibble$)
(declare-fun nibble7$ () Nibble$)
(declare-fun nibble8$ () Nibble$)
(declare-fun nibble9$ () Nibble$)
(declare-fun nibbleA$ () Nibble$)
(declare-fun nibbleB$ () Nibble$)
(declare-fun nibbleC$ () Nibble$)
(declare-fun nibbleD$ () Nibble$)
(declare-fun nibbleE$ () Nibble$)
(declare-fun nibbleF$ () Nibble$)
(declare-fun select$ (Char$) Nibble$)
(declare-fun selecta$ (Char$) Nibble$)
(declare-fun char$ (Nibble$ Nibble$) Char$)
(declare-fun m$ () Nat$)
(declare-fun p$ () A_bool_fun$)
(declare-fun s$ () A_stream$)
(declare-fun ma$ () Nat$)
(declare-fun sa$ () A_stream$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (Nat_bool_fun$) Nat_bool_fun$)
(declare-fun uub$ () Bool_bool_fun$)
(declare-fun uuc$ (Natural_nat_fun$) Natural_nat_nat_fun_fun$)
(declare-fun uud$ () Nat_nat_fun$)
(declare-fun uue$ () Bool_bool_fun$)
(declare-fun uuf$ (Bool) Bool_bool_fun$)
(declare-fun uug$ (Bool) A_bool_fun$)
(declare-fun uuh$ () Natural_nat_nat_fun_fun$)
(declare-fun uui$ (A_stream_a_stream_fun$) A_a_stream_a_stream_fun_fun_a_a_stream_a_stream_fun_fun_fun$)
(declare-fun uuj$ () A_a_stream_a_stream_fun_fun$)
(declare-fun uuk$ () A_a_stream_a_fun_fun$)
(declare-fun comp$ (Bool_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun size$ (Char$) Nat$)
(declare-fun smap$ (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun suc$a (Natural$) Natural$)
(declare-fun zero$ () Nat$)
(declare-fun comp$a (Bool_bool_fun$) Bool_bool_fun_bool_bool_fun_fun$)
(declare-fun comp$b (A_bool_fun$) A_a_fun_a_bool_fun_fun$)
(declare-fun comp$c (A_bool_fun$) Bool_a_fun_bool_bool_fun_fun$)
(declare-fun comp$d (Bool_a_fun$) A_bool_fun_a_a_fun_fun$)
(declare-fun comp$e (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$f (A_a_fun$) Bool_a_fun_bool_a_fun_fun$)
(declare-fun comp$g (Bool_a_fun$) Bool_bool_fun_bool_a_fun_fun$)
(declare-fun least$ (Nat_bool_fun$) Nat$)
(declare-fun plus$a (Natural$) Natural_natural_fun$)
(declare-fun sdrop$ (Nat$) A_stream_a_stream_fun$)
(declare-fun size$a () Natural_nat_fun$)
(declare-fun size$b () Bool_nat_fun$)
(declare-fun times$ (Nat$) Nat_nat_fun$)
(declare-fun zero$a () Natural$)
(declare-fun least$a (Natural_bool_fun$) Natural$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun antimono$ (Nat_natural_fun$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$c (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$d (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$e (Natural_nat_nat_fun_fun$ Natural$) Nat_nat_fun$)
(declare-fun fun_app$f (Natural_nat_fun$ Natural$) Nat$)
(declare-fun fun_app$g (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$h (A_a_stream_a_stream_fun_fun$ A$) A_stream_a_stream_fun$)
(declare-fun fun_app$i (A_a_stream_a_stream_fun_fun_a_a_stream_a_stream_fun_fun_fun$ A_a_stream_a_stream_fun_fun$) A_a_stream_a_stream_fun_fun$)
(declare-fun fun_app$j (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$k (A_a_stream_a_fun_fun$ A$) A_stream_a_fun$)
(declare-fun fun_app$l (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$m (Natural_bool_fun$ Natural$) Bool)
(declare-fun fun_app$n (Nat_natural_fun$ Nat$) Natural$)
(declare-fun fun_app$o (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$p (Natural_natural_fun$ Natural$) Natural$)
(declare-fun fun_app$q (Natural_natural_bool_fun_fun$ Natural$) Natural_bool_fun$)
(declare-fun fun_app$r (Natural_nat_fun_natural_nat_fun_fun$ Natural_nat_fun$) Natural_nat_fun$)
(declare-fun fun_app$s (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$t (Nat_bool_fun_nat_fun$ Nat_bool_fun$) Nat$)
(declare-fun fun_app$u (Bool_bool_fun_bool_bool_fun_fun$ Bool_bool_fun$) Bool_bool_fun$)
(declare-fun fun_app$v (A_a_fun_a_bool_fun_fun$ A_a_fun$) A_bool_fun$)
(declare-fun fun_app$w (A_a_fun$ A$) A$)
(declare-fun fun_app$x (Natural_nat_nat_fun_fun_natural_nat_fun_fun$ Natural_nat_nat_fun_fun$) Natural_nat_fun$)
(declare-fun fun_app$y (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$z (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun greatest$ (Natural_bool_fun$) Natural$)
(declare-fun less_eq$a (Natural$) Natural_bool_fun$)
(declare-fun rec_bool$ (Nat$ Nat$) Bool_nat_fun$)
(declare-fun triangle$ (Nat$) Nat$)
(declare-fun antimono$a (Nat_nat_fun$) Bool)
(declare-fun antimono$b (Natural_nat_fun$) Bool)
(declare-fun antimono$c (Natural_natural_fun$) Bool)
(declare-fun fun_app$aa (Bool_a_fun_bool_bool_fun_fun$ Bool_a_fun$) Bool_bool_fun$)
(declare-fun fun_app$ab (A_bool_fun_a_a_fun_fun$ A_bool_fun$) A_a_fun$)
(declare-fun fun_app$ac (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$ad (Bool_a_fun_bool_a_fun_fun$ Bool_a_fun$) Bool_a_fun$)
(declare-fun fun_app$ae (Bool_bool_fun_bool_a_fun_fun$ Bool_bool_fun$) Bool_a_fun$)
(declare-fun greatest$a () Nat_bool_fun_nat_fun$)
(declare-fun greatestM$ (Nat_nat_fun$) Nat_bool_fun_nat_fun$)
(declare-fun size_bool$ () Bool_nat_fun$)
(declare-fun size_char$ (Char$) Nat$)
(declare-fun case_stream$ (A_a_stream_a_stream_fun_fun$) A_stream_a_stream_fun$)
(declare-fun rec_natural$ (Nat$) Natural_nat_nat_fun_fun_natural_nat_fun_fun$)
(declare-fun sdrop_while$ (A_bool_fun$) A_stream_a_stream_fun$)
(declare-fun case_natural$ (Nat$) Natural_nat_fun_natural_nat_fun_fun$)
(declare-fun case_stream$a (A_a_stream_a_fun_fun$ A_stream$) A$)
(declare-fun size_natural$ () Natural_nat_fun$)
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a p$ (fun_app$b (snth$ s$) ?v0))) :pattern ((fun_app$ uu$ ?v0)))))
(assert (forall ((?v0 Bool)) (! (= (fun_app$c uub$ ?v0) (not ?v0)) :pattern ((fun_app$c uub$ ?v0)))))
(assert (forall ((?v0 Natural$) (?v1 Nat$)) (! (= (fun_app$d (fun_app$e uuh$ ?v0) ?v1) (fun_app$d (plus$ ?v1) (suc$ zero$))) :pattern ((fun_app$d (fun_app$e uuh$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (fun_app$ ?v0 (suc$ ?v1))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 Natural_nat_fun$) (?v1 Natural$) (?v2 Nat$)) (! (= (fun_app$d (fun_app$e (uuc$ ?v0) ?v1) ?v2) (fun_app$f ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e (uuc$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_a_stream_a_stream_fun_fun$) (?v2 A$) (?v3 A_stream$)) (! (= (fun_app$g (fun_app$h (fun_app$i (uui$ ?v0) ?v1) ?v2) ?v3) (fun_app$g ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (fun_app$i (uui$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Bool) (?v1 Bool)) (! (= (fun_app$c (uuf$ ?v0) ?v1) ?v0) :pattern ((fun_app$c (uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 Bool) (?v1 A$)) (! (= (fun_app$a (uug$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uug$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_stream$)) (! (= (fun_app$j (fun_app$k uuk$ ?v0) ?v1) ?v0) :pattern ((fun_app$j (fun_app$k uuk$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_stream$)) (! (= (fun_app$g (fun_app$h uuj$ ?v0) ?v1) ?v1) :pattern ((fun_app$g (fun_app$h uuj$ ?v0) ?v1)))))
(assert (forall ((?v0 Bool)) (! (= (fun_app$c uue$ ?v0) ?v0) :pattern ((fun_app$c uue$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d uud$ ?v0) ?v0) :pattern ((fun_app$d uud$ ?v0)))))
(assert (not (not (fun_app$a p$ (fun_app$b (snth$ sa$) zero$)))))
(assert (forall ((?v0 Nat$)) (=> (fun_app$a p$ (fun_app$b (snth$ sa$) ?v0)) (fun_app$ (less_eq$ (suc$ ma$)) ?v0)) ))
(assert (exists ((?v0 Nat$)) (fun_app$a p$ (fun_app$b (snth$ s$) ?v0)) ))
(assert (fun_app$a p$ (fun_app$b (snth$ sa$) (suc$ ma$))))
(assert (fun_app$a p$ (fun_app$b (snth$ s$) m$)))
(assert (forall ((?v0 Nat$)) (=> (fun_app$a p$ (fun_app$b (snth$ s$) ?v0)) (fun_app$ (less_eq$ m$) ?v0)) ))
(assert (= zero$ zero$))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 Natural$)) (= (= zero$a ?v0) (= ?v0 zero$a)) ))
(assert (forall ((?v0 A_stream$)) (! (= (fun_app$b (snth$ ?v0) zero$) (shd$ ?v0)) :pattern ((snth$ ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (less_eq$ ?v0) zero$) (= ?v0 zero$)) :pattern ((less_eq$ ?v0)))))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ zero$) ?v0) ))
(assert (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))))
(assert (= (fun_app$l size_bool$ true) zero$))
(assert (= (fun_app$l size_bool$ false) zero$))
(assert (= (suc$ ma$) (suc$ ma$)))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less_eq$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less_eq$ ?v0) ?v1)) :pattern ((fun_app$ (less_eq$ (suc$ ?v0)) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less_eq$ ?v0) (suc$ ?v1)) (or (fun_app$ (less_eq$ ?v0) ?v1) (= ?v0 (suc$ ?v1)))) :pattern ((fun_app$ (less_eq$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$ (less_eq$ ?v0) ?v1)) (fun_app$ (less_eq$ (suc$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat_natural_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$m (less_eq$a (fun_app$n ?v0 (suc$ ?v3))) (fun_app$n ?v0 ?v3)) ) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$m (less_eq$a (fun_app$n ?v0 ?v2)) (fun_app$n ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less_eq$ (fun_app$d ?v0 (suc$ ?v3))) (fun_app$d ?v0 ?v3)) ) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$d ?v0 ?v2)) (fun_app$d ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_natural_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$m (less_eq$a (fun_app$n ?v0 ?v3)) (fun_app$n ?v0 (suc$ ?v3))) ) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$m (less_eq$a (fun_app$n ?v0 ?v1)) (fun_app$n ?v0 ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less_eq$ (fun_app$d ?v0 ?v3)) (fun_app$d ?v0 (suc$ ?v3))) ) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$d ?v0 ?v1)) (fun_app$d ?v0 ?v2))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$ (less_eq$ (suc$ ?v3)) ?v2) (fun_app$ ?v0 ?v3)) ) (fun_app$ ?v0 ?v2)) ) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less_eq$ (suc$ ?v0)) ?v1) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less_eq$ (suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (= ?v1 (suc$ ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) (suc$ ?v1)) (and (=> (fun_app$ (less_eq$ ?v0) ?v1) false) (=> (= ?v0 (suc$ ?v1)) false))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) (suc$ ?v1))) ))
(assert (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$ (less_eq$ (suc$ ?v0)) ?v0)) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= (suc$ ?v0) zero$)) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v0 (suc$ ?v2))) )) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 (suc$ ?v2)) (fun_app$ ?v0 ?v2)) )) (fun_app$ ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$)) (=> (= zero$ (suc$ ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) (not (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (= (suc$ ?v0) zero$) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$o ?v0 ?v3) zero$) ) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$o ?v0 zero$) (suc$ ?v3)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$o ?v0 ?v3) ?v4) (fun_app$ (fun_app$o ?v0 (suc$ ?v3)) (suc$ ?v4))) ))) (fun_app$ (fun_app$o ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (less_eq$ zero$) ?v0) true) :pattern ((fun_app$ (less_eq$ zero$) ?v0)))))
(assert (forall ((?v0 Natural$)) (fun_app$m (less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (= size_bool$ (rec_bool$ zero$ zero$)))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (fun_app$ (less_eq$ zero$) zero$))
(assert (= (fun_app$f size_natural$ zero$a) zero$))
(assert (forall ((?v0 Char$)) (! (= (size$ ?v0) zero$) :pattern ((size$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shd$ (fun_app$g (sdrop$ ?v0) ?v1)) (fun_app$b (snth$ ?v1) ?v0)) ))
(assert (= (least$ uu$) m$))
(assert (forall ((?v0 Nat_natural_fun$)) (= (antimono$ ?v0) (forall ((?v1 Nat$)) (fun_app$m (less_eq$a (fun_app$n ?v0 (suc$ ?v1))) (fun_app$n ?v0 ?v1)) )) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (antimono$a ?v0) (forall ((?v1 Nat$)) (fun_app$ (less_eq$ (fun_app$d ?v0 (suc$ ?v1))) (fun_app$d ?v0 ?v1)) )) ))
(assert (=> (forall ((?v0 Nat$)) (=> (and (fun_app$a p$ (fun_app$b (snth$ s$) ?v0)) (and (forall ((?v1 Nat$)) (=> (fun_app$a p$ (fun_app$b (snth$ s$) ?v1)) (fun_app$ (less_eq$ ?v0) ?v1)) ) (= (least$ uu$) ?v0))) false) ) false))
(assert (forall ((?v0 Nat_bool_fun$)) (! (=> (fun_app$ ?v0 zero$) (= (least$ ?v0) zero$)) :pattern ((least$ ?v0)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ (less_eq$ (least$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ ?v0 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)) )) (fun_app$ ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$)) (=> (exists ((?v1 Nat$)) (fun_app$ ?v0 ?v1) ) (fun_app$ ?v0 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (=> (and (exists ((?v2 Nat$)) (fun_app$ ?v0 ?v2) ) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) )) (fun_app$ ?v1 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (not (fun_app$ ?v0 zero$))) (= (least$ ?v0) (suc$ (least$ (uua$ ?v0))))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (less_eq$ ?v3) ?v4)) )) (fun_app$ ?v2 ?v3)) )) (fun_app$ ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Natural_bool_fun$) (?v1 Natural$)) (=> (and (fun_app$m ?v0 ?v1) (forall ((?v2 Natural$)) (=> (fun_app$m ?v0 ?v2) (fun_app$m (less_eq$a ?v1) ?v2)) )) (= (least$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (less_eq$ ?v1) ?v2)) )) (= (least$ ?v0) ?v1)) ))
(assert (forall ((?v0 Natural_bool_fun$) (?v1 Natural$) (?v2 Natural_bool_fun$)) (=> (and (fun_app$m ?v0 ?v1) (and (forall ((?v3 Natural$)) (=> (fun_app$m ?v0 ?v3) (fun_app$m (less_eq$a ?v1) ?v3)) ) (forall ((?v3 Natural$)) (=> (and (fun_app$m ?v0 ?v3) (forall ((?v4 Natural$)) (=> (fun_app$m ?v0 ?v4) (fun_app$m (less_eq$a ?v3) ?v4)) )) (fun_app$m ?v2 ?v3)) ))) (fun_app$m ?v2 (least$a ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (and (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ (less_eq$ ?v1) ?v3)) ) (forall ((?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v3) (forall ((?v4 Nat$)) (=> (fun_app$ ?v0 ?v4) (fun_app$ (less_eq$ ?v3) ?v4)) )) (fun_app$ ?v2 ?v3)) ))) (fun_app$ ?v2 (least$ ?v0))) ))
(assert (forall ((?v0 Nat_natural_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$ ?v0) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$m (less_eq$a (fun_app$n ?v0 ?v2)) (fun_app$n ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_nat_fun$) (?v1 Natural$) (?v2 Natural$)) (=> (and (antimono$b ?v0) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$f ?v0 ?v2)) (fun_app$f ?v0 ?v1))) ))
(assert (forall ((?v0 Natural_natural_fun$) (?v1 Natural$) (?v2 Natural$)) (=> (and (antimono$c ?v0) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$m (less_eq$a (fun_app$p ?v0 ?v2)) (fun_app$p ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$a ?v0) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$d ?v0 ?v2)) (fun_app$d ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_natural_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$ ?v0) (and (fun_app$ (less_eq$ ?v1) ?v2) (=> (fun_app$m (less_eq$a (fun_app$n ?v0 ?v2)) (fun_app$n ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Natural_nat_fun$) (?v1 Natural$) (?v2 Natural$)) (=> (and (antimono$b ?v0) (and (fun_app$m (less_eq$a ?v1) ?v2) (=> (fun_app$ (less_eq$ (fun_app$f ?v0 ?v2)) (fun_app$f ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Natural_natural_fun$) (?v1 Natural$) (?v2 Natural$)) (=> (and (antimono$c ?v0) (and (fun_app$m (less_eq$a ?v1) ?v2) (=> (fun_app$m (less_eq$a (fun_app$p ?v0 ?v2)) (fun_app$p ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (antimono$a ?v0) (and (fun_app$ (less_eq$ ?v1) ?v2) (=> (fun_app$ (less_eq$ (fun_app$d ?v0 ?v2)) (fun_app$d ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Nat_natural_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v1) ?v2) (fun_app$m (less_eq$a (fun_app$n ?v0 ?v2)) (fun_app$n ?v0 ?v1))) ) (antimono$ ?v0)) ))
(assert (forall ((?v0 Natural_nat_fun$)) (=> (forall ((?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a ?v1) ?v2) (fun_app$ (less_eq$ (fun_app$f ?v0 ?v2)) (fun_app$f ?v0 ?v1))) ) (antimono$b ?v0)) ))
(assert (forall ((?v0 Natural_natural_fun$)) (=> (forall ((?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a ?v1) ?v2) (fun_app$m (less_eq$a (fun_app$p ?v0 ?v2)) (fun_app$p ?v0 ?v1))) ) (antimono$c ?v0)) ))
(assert (forall ((?v0 Nat_nat_fun$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v1) ?v2) (fun_app$ (less_eq$ (fun_app$d ?v0 ?v2)) (fun_app$d ?v0 ?v1))) ) (antimono$a ?v0)) ))
(assert (forall ((?v0 Nat_natural_fun$)) (= (antimono$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v1) ?v2) (fun_app$m (less_eq$a (fun_app$n ?v0 ?v2)) (fun_app$n ?v0 ?v1))) )) ))
(assert (forall ((?v0 Natural_nat_fun$)) (= (antimono$b ?v0) (forall ((?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a ?v1) ?v2) (fun_app$ (less_eq$ (fun_app$f ?v0 ?v2)) (fun_app$f ?v0 ?v1))) )) ))
(assert (forall ((?v0 Natural_natural_fun$)) (= (antimono$c ?v0) (forall ((?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a ?v1) ?v2) (fun_app$m (less_eq$a (fun_app$p ?v0 ?v2)) (fun_app$p ?v0 ?v1))) )) ))
(assert (forall ((?v0 Nat_nat_fun$)) (= (antimono$a ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v1) ?v2) (fun_app$ (less_eq$ (fun_app$d ?v0 ?v2)) (fun_app$d ?v0 ?v1))) )) ))
(assert (forall ((?v0 A_stream$)) (! (= (fun_app$g (sdrop$ zero$) ?v0) ?v0) :pattern ((fun_app$g (sdrop$ zero$) ?v0)))))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat_bool_fun$) (?v3 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (and (fun_app$ ?v2 ?v3) (and (not (fun_app$ ?v0 zero$)) (forall ((?v4 Nat$)) (= (fun_app$ ?v0 (suc$ ?v4)) (fun_app$ ?v2 ?v4)) )))) (= (least$ ?v0) (suc$ (least$ ?v2)))) ))
(assert (forall ((?v0 Natural$)) (fun_app$m (less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (or (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (! (=> (fun_app$m (less_eq$a ?v0) ?v1) (= (fun_app$m (less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$m (less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (fun_app$ (less_eq$ ?v0) ?v1) (= (fun_app$ (less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$m (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$m (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v2) ?v0)) (fun_app$m (less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v0)) (fun_app$ (less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_fun$) (?v2 Natural$) (?v3 Natural$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$f ?v1 ?v2)) (and (fun_app$m (less_eq$a ?v2) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$f ?v1 ?v4)) (fun_app$f ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$f ?v1 ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Nat_natural_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$m (less_eq$a ?v0) (fun_app$n ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$n ?v1 ?v4)) (fun_app$n ?v1 ?v5))) ))) (fun_app$m (less_eq$a ?v0) (fun_app$n ?v1 ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural_natural_fun$) (?v2 Natural$) (?v3 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) (fun_app$p ?v1 ?v2)) (and (fun_app$m (less_eq$a ?v2) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$p ?v1 ?v4)) (fun_app$p ?v1 ?v5))) ))) (fun_app$m (less_eq$a ?v0) (fun_app$p ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) (fun_app$d ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$d ?v1 ?v4)) (fun_app$d ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$d ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_natural_fun$) (?v3 Natural$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$m (less_eq$a (fun_app$n ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$n ?v2 ?v4)) (fun_app$n ?v2 ?v5))) ))) (fun_app$m (less_eq$a (fun_app$n ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (and (fun_app$ (less_eq$ (fun_app$f ?v2 ?v1)) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$f ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural_natural_fun$) (?v3 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (and (fun_app$m (less_eq$a (fun_app$p ?v2 ?v1)) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$p ?v2 ?v4)) (fun_app$p ?v2 ?v5))) ))) (fun_app$m (less_eq$a (fun_app$p ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (fun_app$ (less_eq$ (fun_app$d ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$d ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$m (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_natural_fun$) (?v3 Natural$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (= (fun_app$n ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$n ?v2 ?v4)) (fun_app$n ?v2 ?v5))) ))) (fun_app$m (less_eq$a (fun_app$n ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (and (= (fun_app$f ?v2 ?v1) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$f ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural_natural_fun$) (?v3 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (and (= (fun_app$p ?v2 ?v1) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$p ?v2 ?v4)) (fun_app$p ?v2 ?v5))) ))) (fun_app$m (less_eq$a (fun_app$p ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (and (= (fun_app$d ?v2 ?v1) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 ?v5))) ))) (fun_app$ (less_eq$ (fun_app$d ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (= ?v0 ?v1) (fun_app$m (less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$ (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (= ?v0 ?v1) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$m (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Nat_natural_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$n ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$n ?v1 ?v4)) (fun_app$n ?v1 ?v5))) ))) (fun_app$m (less_eq$a ?v0) (fun_app$n ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_fun$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (and (fun_app$m (less_eq$a ?v2) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$f ?v1 ?v4)) (fun_app$f ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$f ?v1 ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural_natural_fun$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (and (fun_app$m (less_eq$a ?v2) ?v3) (forall ((?v4 Natural$) (?v5 Natural$)) (=> (fun_app$m (less_eq$a ?v4) ?v5) (fun_app$m (less_eq$a (fun_app$p ?v1 ?v4)) (fun_app$p ?v1 ?v5))) ))) (fun_app$m (less_eq$a ?v0) (fun_app$p ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (and (fun_app$ (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (less_eq$ ?v4) ?v5) (fun_app$ (less_eq$ (fun_app$d ?v1 ?v4)) (fun_app$d ?v1 ?v5))) ))) (fun_app$ (less_eq$ ?v0) (fun_app$d ?v1 ?v3))) ))
(assert (forall ((?v0 Natural_natural_bool_fun_fun$) (?v1 Natural$) (?v2 Natural$)) (=> (and (forall ((?v3 Natural$) (?v4 Natural$)) (=> (fun_app$m (less_eq$a ?v3) ?v4) (fun_app$m (fun_app$q ?v0 ?v3) ?v4)) ) (forall ((?v3 Natural$) (?v4 Natural$)) (=> (fun_app$m (fun_app$q ?v0 ?v4) ?v3) (fun_app$m (fun_app$q ?v0 ?v3) ?v4)) )) (fun_app$m (fun_app$q ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (less_eq$ ?v3) ?v4) (fun_app$ (fun_app$o ?v0 ?v3) ?v4)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$o ?v0 ?v4) ?v3) (fun_app$ (fun_app$o ?v0 ?v3) ?v4)) )) (fun_app$ (fun_app$o ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (=> (fun_app$m (less_eq$a ?v0) ?v1) false) (=> (fun_app$m (less_eq$a ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$ (less_eq$ ?v0) ?v1) false) (=> (fun_app$ (less_eq$ ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (= (= ?v0 ?v1) (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$l (rec_bool$ ?v0 ?v1) false) ?v1) :pattern ((rec_bool$ ?v0 ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$l (rec_bool$ ?v0 ?v1) true) ?v0) :pattern ((rec_bool$ ?v0 ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_fun$)) (! (= (fun_app$f (fun_app$r (case_natural$ ?v0) ?v1) zero$a) ?v0) :pattern ((fun_app$r (case_natural$ ?v0) ?v1)))))
(assert (= (fun_app$f size$a zero$a) zero$))
(assert (= size$b (rec_bool$ zero$ zero$)))
(assert (forall ((?v0 A_stream$)) (=> (and (fun_app$a p$ (fun_app$b (snth$ ?v0) ma$)) (and (forall ((?v1 Nat$)) (=> (fun_app$a p$ (fun_app$b (snth$ ?v0) ?v1)) (fun_app$ (less_eq$ ma$) ?v1)) ) (= ma$ ma$))) (= (fun_app$g (sdrop_while$ (fun_app$s (comp$ uub$) p$)) ?v0) (fun_app$g (sdrop$ ma$) ?v0))) ))
(assert (forall ((?v0 Natural_bool_fun$) (?v1 Natural$)) (=> (and (fun_app$m ?v0 ?v1) (forall ((?v2 Natural$)) (=> (fun_app$m ?v0 ?v2) (fun_app$m (less_eq$a ?v2) ?v1)) )) (= (greatest$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ (less_eq$ ?v2) ?v1)) )) (= (fun_app$t greatest$a ?v0) ?v1)) ))
(assert (= (fun_app$l size$b false) zero$))
(assert (= (fun_app$l size$b true) zero$))
(assert (forall ((?v0 Bool)) (! (= (fun_app$l size$b ?v0) zero$) :pattern ((fun_app$l size$b ?v0)))))
(assert (= (fun_app$g (sdrop_while$ (fun_app$s (comp$ uub$) p$)) (stl$ sa$)) (fun_app$g (sdrop$ ma$) (stl$ sa$))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$c (fun_app$u (comp$a ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$u (comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$v (comp$b ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$w ?v1 ?v2))) :pattern ((fun_app$a (fun_app$v (comp$b ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$s (comp$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$s (comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_fun$)) (= (fun_app$r (case_natural$ ?v0) ?v1) (fun_app$x (rec_natural$ ?v0) (uuc$ ?v1))) ))
(assert (= greatest$a (greatestM$ uud$)))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_nat_fun_fun$)) (! (= (fun_app$f (fun_app$x (rec_natural$ ?v0) ?v1) zero$a) ?v0) :pattern ((fun_app$x (rec_natural$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 A_stream$)) (= (stl$ (fun_app$g (sdrop$ ?v0) ?v1)) (fun_app$g (sdrop$ (suc$ ?v0)) ?v1)) ))
(assert (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$y (fun_app$z ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$y (fun_app$z ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$y (fun_app$z ?v0 (stl$ ?v3)) (stl$ ?v4)))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$y (fun_app$z ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$y (fun_app$z ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$y (fun_app$z ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_stream$) (?v1 A_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 A_stream$)) (= (fun_app$g (sdrop$ ?v0) (stl$ ?v1)) (stl$ (fun_app$g (sdrop$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_stream$) (?v1 Nat$)) (! (= (fun_app$b (snth$ ?v0) (suc$ ?v1)) (fun_app$b (snth$ (stl$ ?v0)) ?v1)) :pattern ((fun_app$b (snth$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 A_stream$)) (! (= (fun_app$g (sdrop$ (suc$ ?v0)) ?v1) (fun_app$g (sdrop$ ?v0) (stl$ ?v1))) :pattern ((fun_app$g (sdrop$ (suc$ ?v0)) ?v1)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$g (sdrop_while$ ?v0) ?v1) (ite (fun_app$a ?v0 (shd$ ?v1)) (fun_app$g (sdrop_while$ ?v0) (stl$ ?v1)) ?v1)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool)) (=> (= (fun_app$u (comp$a ?v0) ?v1) ?v2) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v3)) (fun_app$c ?v2 ?v3))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A$)) (=> (= (fun_app$v (comp$b ?v0) ?v1) ?v2) (= (fun_app$a ?v0 (fun_app$w ?v1 ?v3)) (fun_app$a ?v2 ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A$)) (=> (= (fun_app$s (comp$ ?v0) ?v1) ?v2) (= (fun_app$c ?v0 (fun_app$a ?v1 ?v3)) (fun_app$a ?v2 ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (= (fun_app$c ?v0 (fun_app$a ?v1 ?v4)) (fun_app$a ?v2 (fun_app$w ?v3 ?v4)))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 Bool)) (=> (= (fun_app$u (comp$a ?v0) ?v1) (fun_app$u (comp$a ?v2) ?v3)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v4)) (fun_app$c ?v2 (fun_app$c ?v3 ?v4)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$a ?v0 (fun_app$w ?v1 ?v4)) (fun_app$c ?v2 (fun_app$a ?v3 ?v4)))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (= (fun_app$a ?v0 (fun_app$w ?v1 ?v4)) (fun_app$a ?v2 (fun_app$w ?v3 ?v4)))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$c ?v0 (fun_app$a ?v1 ?v4)) (fun_app$c ?v2 (fun_app$a ?v3 ?v4)))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$c ?v0 (fun_app$a ?v1 ?v4)) (fun_app$a ?v2 (fun_app$w ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (and (= (fun_app$u (comp$a ?v0) ?v1) (fun_app$u (comp$a ?v2) ?v3)) (=> (forall ((?v4 Bool)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v4)) (fun_app$c ?v2 (fun_app$c ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$a ?v0 (fun_app$w ?v1 ?v4)) (fun_app$c ?v2 (fun_app$a ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$a ?v0 (fun_app$w ?v1 ?v4)) (fun_app$a ?v2 (fun_app$w ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$c ?v0 (fun_app$a ?v1 ?v4)) (fun_app$c ?v2 (fun_app$a ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$c (fun_app$u (comp$a ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$u (comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$v (comp$b ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$w ?v1 ?v2))) :pattern ((fun_app$a (fun_app$v (comp$b ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$s (comp$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$s (comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$aa (comp$c (fun_app$s (comp$ ?v0) ?v1)) ?v2) (fun_app$u (comp$a ?v0) (fun_app$aa (comp$c ?v1) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$s (comp$ (fun_app$aa (comp$c ?v0) ?v1)) ?v2) (fun_app$v (comp$b ?v0) (fun_app$ab (comp$d ?v1) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$u (comp$a (fun_app$u (comp$a ?v0) ?v1)) ?v2) (fun_app$u (comp$a ?v0) (fun_app$u (comp$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$v (comp$b (fun_app$v (comp$b ?v0) ?v1)) ?v2) (fun_app$v (comp$b ?v0) (fun_app$ac (comp$e ?v1) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$v (comp$b (fun_app$s (comp$ ?v0) ?v1)) ?v2) (fun_app$s (comp$ ?v0) (fun_app$v (comp$b ?v1) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$s (comp$ (fun_app$u (comp$a ?v0) ?v1)) ?v2) (fun_app$s (comp$ ?v0) (fun_app$s (comp$ ?v1) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$)) (= (fun_app$u (comp$a uue$) ?v0) ?v0) ))
(assert (forall ((?v0 A_bool_fun$)) (= (fun_app$s (comp$ uue$) ?v0) ?v0) ))
(assert (forall ((?v0 Bool) (?v1 Bool_bool_fun$) (?v2 Bool)) (= (fun_app$c (fun_app$u (comp$a (uuf$ ?v0)) ?v1) ?v2) ?v0) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$a (fun_app$v (comp$b (uug$ ?v0)) ?v1) ?v2) ?v0) ))
(assert (forall ((?v0 Bool) (?v1 A_bool_fun$) (?v2 A$)) (= (fun_app$a (fun_app$s (comp$ (uuf$ ?v0)) ?v1) ?v2) ?v0) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$u (comp$a ?v0) (fun_app$aa (comp$c ?v1) ?v2)) (fun_app$aa (comp$c (fun_app$s (comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$u (comp$a ?v0) (fun_app$u (comp$a ?v1) ?v2)) (fun_app$u (comp$a (fun_app$u (comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$v (comp$b ?v0) (fun_app$ab (comp$d ?v1) ?v2)) (fun_app$s (comp$ (fun_app$aa (comp$c ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$v (comp$b ?v0) (fun_app$ac (comp$e ?v1) ?v2)) (fun_app$v (comp$b (fun_app$v (comp$b ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$s (comp$ ?v0) (fun_app$v (comp$b ?v1) ?v2)) (fun_app$v (comp$b (fun_app$s (comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$s (comp$ ?v0) (fun_app$s (comp$ ?v1) ?v2)) (fun_app$s (comp$ (fun_app$u (comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$u (comp$a ?v4) ?v2) ?v5)) (= (fun_app$v (comp$b (fun_app$s (comp$ ?v4) ?v0)) ?v1) (fun_app$s (comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 Bool_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (= (fun_app$s (comp$ ?v4) ?v2) ?v5)) (= (fun_app$s (comp$ (fun_app$u (comp$a ?v4) ?v0)) ?v1) (fun_app$v (comp$b ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$u (comp$a ?v4) ?v2) ?v5)) (= (fun_app$s (comp$ (fun_app$u (comp$a ?v4) ?v0)) ?v1) (fun_app$s (comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 Bool_a_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$ad (comp$f ?v0) ?v1) (fun_app$ae (comp$g ?v2) ?v3)) (= (fun_app$aa (comp$c ?v4) ?v2) ?v5)) (= (fun_app$aa (comp$c (fun_app$v (comp$b ?v4) ?v0)) ?v1) (fun_app$u (comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 Bool_a_fun$) (?v3 A_bool_fun$) (?v4 A_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$ac (comp$e ?v0) ?v1) (fun_app$ab (comp$d ?v2) ?v3)) (= (fun_app$aa (comp$c ?v4) ?v2) ?v5)) (= (fun_app$v (comp$b (fun_app$v (comp$b ?v4) ?v0)) ?v1) (fun_app$s (comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$ab (comp$d ?v0) ?v1) (fun_app$ac (comp$e ?v2) ?v3)) (= (fun_app$v (comp$b ?v4) ?v2) ?v5)) (= (fun_app$s (comp$ (fun_app$aa (comp$c ?v4) ?v0)) ?v1) (fun_app$v (comp$b ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 A_a_fun$) (?v3 Bool_a_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$ae (comp$g ?v0) ?v1) (fun_app$ad (comp$f ?v2) ?v3)) (= (fun_app$v (comp$b ?v4) ?v2) ?v5)) (= (fun_app$u (comp$a (fun_app$aa (comp$c ?v4) ?v0)) ?v1) (fun_app$aa (comp$c ?v5) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$ac (comp$e ?v0) ?v1) (fun_app$ac (comp$e ?v2) ?v3)) (= (fun_app$v (comp$b ?v4) ?v2) ?v5)) (= (fun_app$v (comp$b (fun_app$v (comp$b ?v4) ?v0)) ?v1) (fun_app$v (comp$b ?v5) ?v3))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$aa (comp$c ?v0) ?v1) (fun_app$u (comp$a ?v2) ?v3)) (= (fun_app$u (comp$a ?v4) ?v2) ?v5)) (= (fun_app$aa (comp$c (fun_app$s (comp$ ?v4) ?v0)) ?v1) (fun_app$u (comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$) (?v4 Bool_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$u (comp$a ?v0) ?v1) (fun_app$aa (comp$c ?v2) ?v3)) (= (fun_app$s (comp$ ?v4) ?v2) ?v5)) (= (fun_app$u (comp$a (fun_app$u (comp$a ?v4) ?v0)) ?v1) (fun_app$aa (comp$c ?v5) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$u (comp$a ?v0) ?v1) (fun_app$u (comp$a ?v2) ?v3)) (= (fun_app$s (comp$ ?v3) ?v4) ?v5)) (= (fun_app$s (comp$ ?v0) (fun_app$s (comp$ ?v1) ?v4)) (fun_app$s (comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$v (comp$b ?v3) ?v4) ?v5)) (= (fun_app$s (comp$ ?v0) (fun_app$v (comp$b ?v1) ?v4)) (fun_app$s (comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$aa (comp$c ?v0) ?v1) (fun_app$u (comp$a ?v2) ?v3)) (= (fun_app$s (comp$ ?v3) ?v4) ?v5)) (= (fun_app$v (comp$b ?v0) (fun_app$ab (comp$d ?v1) ?v4)) (fun_app$s (comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_a_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$aa (comp$c ?v3) ?v4) ?v5)) (= (fun_app$u (comp$a ?v0) (fun_app$aa (comp$c ?v1) ?v4)) (fun_app$u (comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (= (fun_app$ac (comp$e ?v3) ?v4) ?v5)) (= (fun_app$s (comp$ ?v0) (fun_app$v (comp$b ?v1) ?v4)) (fun_app$v (comp$b ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 Bool_a_fun$) (?v5 Bool_a_fun$)) (=> (and (= (fun_app$s (comp$ ?v0) ?v1) (fun_app$v (comp$b ?v2) ?v3)) (= (fun_app$ad (comp$f ?v3) ?v4) ?v5)) (= (fun_app$u (comp$a ?v0) (fun_app$aa (comp$c ?v1) ?v4)) (fun_app$aa (comp$c ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$) (?v4 A_bool_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$u (comp$a ?v0) ?v1) (fun_app$aa (comp$c ?v2) ?v3)) (= (fun_app$ab (comp$d ?v3) ?v4) ?v5)) (= (fun_app$s (comp$ ?v0) (fun_app$s (comp$ ?v1) ?v4)) (fun_app$v (comp$b ?v2) ?v5))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$u (comp$a ?v0) ?v1) (fun_app$u (comp$a ?v2) ?v3)) (= (fun_app$u (comp$a ?v3) ?v4) ?v5)) (= (fun_app$u (comp$a ?v0) (fun_app$u (comp$a ?v1) ?v4)) (fun_app$u (comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_a_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$aa (comp$c ?v3) ?v4) ?v5)) (= (fun_app$aa (comp$c ?v0) (fun_app$ad (comp$f ?v1) ?v4)) (fun_app$u (comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$v (comp$b ?v0) ?v1) (fun_app$s (comp$ ?v2) ?v3)) (= (fun_app$v (comp$b ?v3) ?v4) ?v5)) (= (fun_app$v (comp$b ?v0) (fun_app$ac (comp$e ?v1) ?v4)) (fun_app$s (comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$aa (comp$c ?v0) ?v1) ?v2) (= (fun_app$aa (comp$c (fun_app$s (comp$ ?v3) ?v0)) ?v1) (fun_app$u (comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$ab (comp$d ?v0) ?v1) ?v2) (= (fun_app$s (comp$ (fun_app$aa (comp$c ?v3) ?v0)) ?v1) (fun_app$v (comp$b ?v3) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$ac (comp$e ?v0) ?v1) ?v2) (= (fun_app$v (comp$b (fun_app$v (comp$b ?v3) ?v0)) ?v1) (fun_app$v (comp$b ?v3) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$u (comp$a ?v0) ?v1) ?v2) (= (fun_app$u (comp$a (fun_app$u (comp$a ?v3) ?v0)) ?v1) (fun_app$u (comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$v (comp$b ?v0) ?v1) ?v2) (= (fun_app$v (comp$b (fun_app$s (comp$ ?v3) ?v0)) ?v1) (fun_app$s (comp$ ?v3) ?v2))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$s (comp$ ?v0) ?v1) ?v2) (= (fun_app$s (comp$ (fun_app$u (comp$a ?v3) ?v0)) ?v1) (fun_app$s (comp$ ?v3) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$aa (comp$c ?v0) ?v1) ?v2) (= (fun_app$v (comp$b ?v0) (fun_app$ab (comp$d ?v1) ?v3)) (fun_app$s (comp$ ?v2) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$s (comp$ ?v0) ?v1) ?v2) (= (fun_app$u (comp$a ?v0) (fun_app$aa (comp$c ?v1) ?v3)) (fun_app$aa (comp$c ?v2) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$u (comp$a ?v0) ?v1) ?v2) (= (fun_app$u (comp$a ?v0) (fun_app$u (comp$a ?v1) ?v3)) (fun_app$u (comp$a ?v2) ?v3))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$v (comp$b ?v0) ?v1) ?v2) (= (fun_app$v (comp$b ?v0) (fun_app$ac (comp$e ?v1) ?v3)) (fun_app$v (comp$b ?v2) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$u (comp$a ?v0) ?v1) ?v2) (= (fun_app$s (comp$ ?v0) (fun_app$s (comp$ ?v1) ?v3)) (fun_app$s (comp$ ?v2) ?v3))) ))
(assert (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$s (comp$ ?v0) ?v1) ?v2) (= (fun_app$s (comp$ ?v0) (fun_app$v (comp$b ?v1) ?v3)) (fun_app$v (comp$b ?v2) ?v3))) ))
(assert (forall ((?v0 A_a_stream_a_stream_fun_fun$) (?v1 A_stream$)) (! (= (fun_app$g (case_stream$ ?v0) ?v1) (fun_app$g (fun_app$h ?v0 (shd$ ?v1)) (stl$ ?v1))) :pattern ((fun_app$g (case_stream$ ?v0) ?v1)))))
(assert (= size$a (fun_app$x (rec_natural$ zero$) uuh$)))
(assert (= size_natural$ (fun_app$x (rec_natural$ zero$) uuh$)))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_fun$) (?v2 Natural$)) (! (= (fun_app$f (fun_app$r (case_natural$ ?v0) ?v1) (suc$a ?v2)) (fun_app$f ?v1 ?v2)) :pattern ((fun_app$f (fun_app$r (case_natural$ ?v0) ?v1) (suc$a ?v2))))))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (= (fun_app$p (plus$a ?v0) ?v1) (fun_app$p (plus$a ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (= (fun_app$p (plus$a ?v0) ?v1) (fun_app$p (plus$a ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (= (= (suc$a ?v0) (suc$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v1)) (fun_app$p (plus$a ?v2) ?v1)) (fun_app$m (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) (fun_app$d (plus$ ?v2) ?v1)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v1)) (fun_app$p (plus$a ?v0) ?v2)) (fun_app$m (less_eq$a ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) (fun_app$d (plus$ ?v0) ?v2)) (fun_app$ (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$d (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (fun_app$p (plus$a zero$a) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$d (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (fun_app$p (plus$a ?v0) zero$a) ?v0) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (plus$ ?v0) (suc$ ?v1)) (suc$ (fun_app$d (plus$ ?v0) ?v1))) :pattern ((fun_app$d (plus$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) (fun_app$d (plus$ ?v0) ?v2)) (fun_app$ (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_stream$)) (= (fun_app$g (sdrop$ ?v0) (fun_app$g (sdrop$ ?v1) ?v2)) (fun_app$g (sdrop$ (fun_app$d (plus$ ?v1) ?v0)) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Natural_nat_nat_fun_fun$) (?v2 Natural$)) (! (= (fun_app$f (fun_app$x (rec_natural$ ?v0) ?v1) (suc$a ?v2)) (fun_app$d (fun_app$e ?v1 ?v2) (fun_app$f (fun_app$x (rec_natural$ ?v0) ?v1) ?v2))) :pattern ((fun_app$f (fun_app$x (rec_natural$ ?v0) ?v1) (suc$a ?v2))))))
(assert (forall ((?v0 Natural$)) (! (= (fun_app$f size_natural$ (suc$a ?v0)) (fun_app$d (plus$ (fun_app$f size_natural$ ?v0)) (suc$ zero$))) :pattern ((suc$a ?v0)))))
(assert (forall ((?v0 Natural$)) (! (= (fun_app$f size$a (suc$a ?v0)) (fun_app$d (plus$ (fun_app$f size$a ?v0)) (suc$ zero$))) :pattern ((suc$a ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less_eq$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$d (plus$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= ?v0 ?v1) (fun_app$m (less_eq$a ?v2) ?v3)) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v2)) (fun_app$p (plus$a ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (= ?v2 ?v3)) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v2)) (fun_app$p (plus$a ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (= ?v2 ?v3)) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v2) ?v3)) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v2)) (fun_app$p (plus$a ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v1)) (fun_app$p (plus$a ?v2) ?v1)) (fun_app$m (less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) (fun_app$d (plus$ ?v2) ?v1)) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v1)) (fun_app$p (plus$a ?v0) ?v2)) (fun_app$m (less_eq$a ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) (fun_app$d (plus$ ?v0) ?v2)) (fun_app$ (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a ?v2) ?v3)) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v2)) (fun_app$p (plus$a ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v2)) (fun_app$p (plus$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (fun_app$m (less_eq$a ?v0) ?v1) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v2) ?v0)) (fun_app$p (plus$a ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v2) ?v0)) (fun_app$d (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$d (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (fun_app$p (plus$a zero$a) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$d (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (fun_app$p (plus$a ?v0) zero$a) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$d (plus$ ?v0) ?v1) ?v0) (= ?v1 zero$)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (plus$ zero$) ?v0) ?v0) :pattern ((fun_app$d (plus$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (plus$ (suc$ ?v0)) ?v1) (fun_app$d (plus$ ?v0) (suc$ ?v1))) :pattern ((fun_app$d (plus$ (suc$ ?v0)) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (plus$ (suc$ ?v0)) ?v1) (suc$ (fun_app$d (plus$ ?v0) ?v1))) :pattern ((fun_app$d (plus$ (suc$ ?v0)) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less_eq$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$d (plus$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (=> (and (fun_app$ (less_eq$ ?v0) ?v2) (fun_app$ (less_eq$ ?v1) ?v2)) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$ (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$ (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v3)) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v2)) (fun_app$d (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) (fun_app$d (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v0) (fun_app$d (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less_eq$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$d (plus$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$ (less_eq$ ?v0) (fun_app$d (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$ (less_eq$ ?v0) (fun_app$d (plus$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$p (plus$a (fun_app$p (plus$a ?v0) ?v1)) ?v2) (fun_app$p (plus$a ?v0) (fun_app$p (plus$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (plus$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$d (plus$ ?v0) (fun_app$d (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$p (plus$a (fun_app$p (plus$a ?v0) ?v1)) ?v2) (fun_app$p (plus$a ?v0) (fun_app$p (plus$a ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (plus$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$d (plus$ ?v0) (fun_app$d (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (= (fun_app$p (plus$a ?v0) (fun_app$p (plus$a ?v1) ?v2)) (fun_app$p (plus$a ?v1) (fun_app$p (plus$a ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (plus$ ?v0) (fun_app$d (plus$ ?v1) ?v2)) (fun_app$d (plus$ ?v1) (fun_app$d (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (= (fun_app$p (plus$a ?v0) ?v1) (fun_app$p (plus$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (= (fun_app$p (plus$a ?v0) ?v1) (fun_app$p (plus$a ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (= (fun_app$p (plus$a ?v0) ?v1) (fun_app$p (plus$a ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$d (plus$ ?v0) ?v1) (fun_app$d (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$p (plus$a ?v0) ?v2) (fun_app$p (plus$a ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$d (plus$ ?v0) ?v2) (fun_app$d (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_a_stream_a_stream_fun_fun$) (?v2 A_stream$)) (= (fun_app$g ?v0 (fun_app$g (case_stream$ ?v1) ?v2)) (fun_app$g (case_stream$ (fun_app$i (uui$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (fun_app$m (less_eq$a ?v0) zero$a) (fun_app$m (less_eq$a ?v1) zero$a)) (fun_app$m (less_eq$a (fun_app$p (plus$a ?v0) ?v1)) zero$a)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ ?v0) zero$) (fun_app$ (less_eq$ ?v1) zero$)) (fun_app$ (less_eq$ (fun_app$d (plus$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (fun_app$m (less_eq$a zero$a) ?v0) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$m (less_eq$a ?v1) (fun_app$p (plus$a ?v2) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ zero$) ?v0) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v1) (fun_app$d (plus$ ?v2) ?v0))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$)) (=> (and (fun_app$m (less_eq$a zero$a) ?v0) (fun_app$m (less_eq$a ?v1) ?v2)) (fun_app$m (less_eq$a ?v1) (fun_app$p (plus$a ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less_eq$ zero$) ?v0) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v1) (fun_app$d (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (fun_app$m (less_eq$a zero$a) ?v0) (fun_app$m (less_eq$a zero$a) ?v1)) (= (= (fun_app$p (plus$a ?v0) ?v1) zero$a) (and (= ?v0 zero$a) (= ?v1 zero$a)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ zero$) ?v0) (fun_app$ (less_eq$ zero$) ?v1)) (= (= (fun_app$d (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) ))
(assert (forall ((?v0 Natural$) (?v1 Natural$)) (=> (and (fun_app$m (less_eq$a zero$a) ?v0) (fun_app$m (less_eq$a zero$a) ?v1)) (fun_app$m (less_eq$a zero$a) (fun_app$p (plus$a ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less_eq$ zero$) ?v0) (fun_app$ (less_eq$ zero$) ?v1)) (fun_app$ (less_eq$ zero$) (fun_app$d (plus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Natural$)) (=> (and (=> (= ?v0 zero$a) false) (forall ((?v1 Natural$)) (=> (= ?v0 (suc$a ?v1)) false) )) false) ))
(assert (forall ((?v0 Natural$)) (not (= zero$a (suc$a ?v0))) ))
(assert (forall ((?v0 Natural$)) (not (= (suc$a ?v0) zero$a)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$d (plus$ ?v0) ?v1) (suc$ zero$)) (or (and (= ?v0 (suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (suc$ zero$))))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ zero$) (fun_app$d (plus$ ?v0) ?v1)) (or (and (= ?v0 (suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (suc$ zero$))))) ))
(assert (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$b (snth$ (fun_app$g (sdrop$ ?v0) ?v1)) ?v2) (fun_app$b (snth$ ?v1) (fun_app$d (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_stream$)) (= (stl$ ?v0) (fun_app$g (case_stream$ uuj$) ?v0)) ))
(assert (forall ((?v0 A_stream$)) (= (shd$ ?v0) (case_stream$a uuk$ ?v0)) ))
(assert (forall ((?v0 Nat$)) (! (= (triangle$ (suc$ ?v0)) (fun_app$d (plus$ (triangle$ ?v0)) (suc$ ?v0))) :pattern ((suc$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 (fun_app$d (plus$ ?v0) ?v1)) (= ?v1 zero$)) ))
(assert (= (triangle$ zero$) zero$))
(assert (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$g (sdrop_while$ ?v0) (sCons$ ?v1 ?v2)) (ite (fun_app$a ?v0 ?v1) (fun_app$g (sdrop_while$ ?v0) ?v2) (sCons$ ?v1 ?v2))) :pattern ((fun_app$g (sdrop_while$ ?v0) (sCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A_stream$) (?v2 Nat$)) (! (= (fun_app$b (snth$ (sCons$ ?v0 ?v1)) (suc$ ?v2)) (fun_app$b (snth$ ?v1) ?v2)) :pattern ((fun_app$b (snth$ (sCons$ ?v0 ?v1)) (suc$ ?v2))))))
(assert (forall ((?v0 A_stream$)) (=> (=> (= ?v0 (sCons$ (shd$ ?v0) (stl$ ?v0))) false) false) ))
(assert (forall ((?v0 A$) (?v1 A_stream$)) (! (= (stl$ (sCons$ ?v0 ?v1)) ?v1) :pattern ((sCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less_eq$ (suc$ zero$)) (fun_app$d (times$ ?v0) ?v1)) (and (fun_app$ (less_eq$ (suc$ zero$)) ?v0) (fun_app$ (less_eq$ (suc$ zero$)) ?v1))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (times$ ?v0) zero$) zero$) :pattern ((times$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$d (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$d (times$ ?v0) ?v1) (fun_app$d (times$ ?v0) ?v2)) (or (= ?v1 ?v2) (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$d (times$ ?v0) ?v1) (fun_app$d (times$ ?v2) ?v1)) (or (= ?v0 ?v2) (= ?v1 zero$))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$g (smap$ ?v0) ?v1)) (fun_app$g (smap$ ?v0) (stl$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$b (snth$ (fun_app$g (smap$ ?v0) ?v1)) ?v2) (fun_app$w ?v0 (fun_app$b (snth$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$g (sdrop$ ?v0) (fun_app$g (smap$ ?v1) ?v2)) (fun_app$g (smap$ ?v1) (fun_app$g (sdrop$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ zero$) (fun_app$d (times$ ?v0) ?v1)) (and (= ?v0 (suc$ zero$)) (= ?v1 (suc$ zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$d (times$ ?v0) ?v1) (suc$ zero$)) (and (= ?v0 (suc$ zero$)) (= ?v1 (suc$ zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (times$ ?v0) (suc$ ?v1)) (fun_app$d (plus$ ?v0) (fun_app$d (times$ ?v0) ?v1))) :pattern ((fun_app$d (times$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (times$ (fun_app$d (plus$ ?v0) ?v1)) ?v2) (fun_app$d (plus$ (fun_app$d (times$ ?v0) ?v2)) (fun_app$d (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (times$ ?v0) (fun_app$d (plus$ ?v1) ?v2)) (fun_app$d (plus$ (fun_app$d (times$ ?v0) ?v1)) (fun_app$d (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (not (= ?v0 zero$)) (and (= ?v1 ?v2) (not (= ?v3 ?v4)))) (not (= (fun_app$d (plus$ ?v1) (fun_app$d (times$ ?v0) ?v3)) (fun_app$d (plus$ ?v2) (fun_app$d (times$ ?v0) ?v4))))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (times$ (suc$ ?v0)) ?v1) (fun_app$d (plus$ ?v1) (fun_app$d (times$ ?v0) ?v1))) :pattern ((fun_app$d (times$ (suc$ ?v0)) ?v1)))))
(check-sat)
(exit)

