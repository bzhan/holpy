(set-info :smt-lib-version 2.6)
(set-logic UFLIA)
(set-info :source |
    Spec# benchmarks.  Contributed by Leonardo de Moura and Michal Moskal.
  |)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun x (Int Int) Int)
(declare-fun true_1 () Int)
(declare-fun false_1 () Int)
(declare-fun intGreater (Int Int) Int)
(declare-fun intAtLeast (Int Int) Int)
(declare-fun intAtMost (Int Int) Int)
(declare-fun intLess (Int Int) Int)
(declare-fun anyNeq (Int Int) Int)
(declare-fun anyEqual (Int Int) Int)
(declare-fun boolNot (Int) Int)
(declare-fun boolOr (Int Int) Int)
(declare-fun boolAnd (Int Int) Int)
(declare-fun boolImplies (Int Int) Int)
(declare-fun boolIff (Int Int) Int)
(declare-fun select2 (Int Int Int) Int)
(declare-fun store2 (Int Int Int Int) Int)
(declare-fun select1 (Int Int) Int)
(declare-fun store1 (Int Int Int) Int)
(declare-fun r () Int)
(declare-fun result_0 () Int)
(declare-fun l () Int)
(declare-fun A_5 () Int)
(declare-fun A () Int)
(declare-fun j_1 () Int)
(declare-fun j_4 () Int)
(declare-fun i_0 () Int)
(declare-fun i_3 () Int)
(declare-fun tmp_1 () Int)
(declare-fun tmp_3 () Int)
(declare-fun A_2 () Int)
(declare-fun j_3 () Int)
(declare-fun i_1 () Int)
(declare-fun A_4 () Int)
(declare-fun pv_0 () Int)
(declare-fun tmp_2 () Int)
(declare-fun A_3 () Int)
(declare-fun j_2 () Int)
(declare-fun i_2 () Int)
(declare-fun j_0 () Int)
(declare-fun A_1 () Int)
(declare-fun tmp_0 () Int)
(declare-fun A_0 () Int)
(declare-fun N () Int)
(assert (not (or (not (forall ((?A Int) (?i Int) (?v Int)) (= (select1 (store1 ?A ?i ?v) ?i) ?v))) (not (forall ((?A Int) (?i Int) (?j Int) (?v Int)) (=> (not (= ?i ?j)) (= (select1 (store1 ?A ?i ?v) ?j) (select1 ?A ?j))))) (not (forall ((?A Int) (?o Int) (?f Int) (?v Int)) (= (select2 (store2 ?A ?o ?f ?v) ?o ?f) ?v))) (not (forall ((?A Int) (?o Int) (?f Int) (?p Int) (?g Int) (?v Int)) (=> (not (= ?o ?p)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g))))) (not (forall ((?A Int) (?o Int) (?f Int) (?p Int) (?g Int) (?v Int)) (=> (not (= ?f ?g)) (= (select2 (store2 ?A ?o ?f ?v) ?p ?g) (select2 ?A ?p ?g))))) (not (forall ((?x_1 Int) (?y Int)) (= (= (boolIff ?x_1 ?y) true_1) (= (= ?x_1 true_1) (= ?y true_1))))) (not (forall ((?x_1 Int) (?y Int)) (= (= (boolImplies ?x_1 ?y) true_1) (=> (= ?x_1 true_1) (= ?y true_1))))) (not (forall ((?x_1 Int) (?y Int)) (= (= (boolAnd ?x_1 ?y) true_1) (not (or (not (= ?x_1 true_1)) (not (= ?y true_1))))))) (not (forall ((?x_1 Int) (?y Int)) (= (= (boolOr ?x_1 ?y) true_1) (or (= ?x_1 true_1) (= ?y true_1))))) (not (forall ((?x_1 Int)) (! (= (= (boolNot ?x_1) true_1) (not (= ?x_1 true_1))) :pattern ((boolNot ?x_1)) ))) (not (forall ((?x_1 Int) (?y Int)) (= (= (anyEqual ?x_1 ?y) true_1) (= ?x_1 ?y)))) (not (forall ((?x_1 Int) (?y Int)) (! (= (= (anyNeq ?x_1 ?y) true_1) (not (= ?x_1 ?y))) :pattern ((anyNeq ?x_1 ?y)) ))) (not (forall ((?x_1 Int) (?y Int)) (= (= (intLess ?x_1 ?y) true_1) (< ?x_1 ?y)))) (not (forall ((?x_1 Int) (?y Int)) (= (= (intAtMost ?x_1 ?y) true_1) (<= ?x_1 ?y)))) (not (forall ((?x_1 Int) (?y Int)) (= (= (intAtLeast ?x_1 ?y) true_1) (>= ?x_1 ?y)))) (not (forall ((?x_1 Int) (?y Int)) (= (= (intGreater ?x_1 ?y) true_1) (> ?x_1 ?y)))) (not (distinct false_1 true_1)) (not (forall ((?t Int)) (! (= (x ?t ?t) true_1) :pattern ((x ?t ?t)) ))) (not (forall ((?t Int) (?u Int) (?v Int)) (! (=> (not (or (not (= (x ?t ?u) true_1)) (not (= (x ?u ?v) true_1)))) (= (x ?t ?v) true_1)) :pattern ((x ?t ?u) (x ?u ?v)) ))) (not (forall ((?t Int) (?u Int)) (! (=> (not (or (not (= (x ?t ?u) true_1)) (not (= (x ?u ?t) true_1)))) (= ?t ?u)) :pattern ((x ?t ?u) (x ?u ?t)) ))))))
(assert (let ((?v_0 (not true))) (not (or ?v_0 ?v_0))))
(assert (let ((?v_25 (not (or (not (<= l result_0)) (not (< result_0 r))))) (?v_24 (forall ((?k Int) (?j Int)) (=> (not (or (not (<= l ?k)) (not (< ?k result_0)) (not (<= result_0 ?j)) (not (< ?j r)))) (<= (select1 A_5 ?k) (select1 A_5 ?j))))) (?v_0 (select1 A l))) (let ((?v_23 (forall ((?k Int)) (=> (not (or (not (<= l ?k)) (not (< ?k result_0)))) (<= (select1 A_5 ?k) ?v_0)))) (?v_22 (forall ((?k Int)) (=> (not (or (not (<= result_0 ?k)) (not (< ?k r)))) (<= ?v_0 (select1 A_5 ?k))))) (?v_14 (=> true (=> false true))) (?v_21 (not (or (not (<= l i_1)) (not (<= i_1 j_3)) (not (< j_3 r))))) (?v_20 (forall ((?k Int)) (=> (not (or (not (<= j_3 ?k)) (not (< ?k r)))) (<= pv_0 (select1 A_4 ?k))))) (?v_19 (forall ((?k Int)) (=> (not (or (not (<= l ?k)) (not (< ?k i_1)))) (<= (select1 A_4 ?k) pv_0)))) (?v_9 (- j_1 1)) (?v_18 (+ i_0 1))) (let ((?v_17 (not (or (not (< (select1 A_4 i_0) pv_0)) (not (< pv_0 (select1 A_4 ?v_9)))))) (?v_15 (select1 A_2 ?v_9)) (?v_16 (select1 A_2 i_0)) (?v_8 (< i_0 j_1)) (?v_12 (not (<= l i_0)))) (let ((?v_13 (not (or ?v_12 (not (<= i_0 j_2)) (not (< j_2 r))))) (?v_11 (forall ((?k Int)) (=> (not (or (not (<= j_2 ?k)) (not (< ?k r)))) (<= pv_0 (select1 A_2 ?k))))) (?v_10 (forall ((?k Int)) (=> (not (or (not (<= l ?k)) (not (< ?k i_0)))) (<= (select1 A_2 ?k) pv_0)))) (?v_6 (not (< j_1 r)))) (let ((?v_7 (not (or (not (<= l i_2)) (not (<= i_2 j_1)) ?v_6))) (?v_5 (forall ((?k Int)) (=> (not (or (not (<= j_1 ?k)) (not (< ?k r)))) (<= pv_0 (select1 A_2 ?k))))) (?v_4 (forall ((?k Int)) (=> (not (or (not (<= l ?k)) (not (< ?k i_2)))) (<= (select1 A_2 ?k) pv_0)))) (?v_3 (not (or (not (<= l l)) (not (<= l j_0)) (not (< j_0 r))))) (?v_2 (forall ((?k Int)) (=> (not (or (not (<= j_0 ?k)) (not (< ?k r)))) (<= pv_0 (select1 A_1 ?k))))) (?v_1 (forall ((?k Int)) (=> (not (or (not (<= l ?k)) (not (< ?k l)))) (<= (select1 A_1 ?k) pv_0))))) (not (=> true (=> (not (or (not (<= 0 l)) (not (<= (+ l 2) r)) (not (<= r N)))) (=> true (=> (= pv_0 ?v_0) (=> (= j_0 (- r 1)) (=> (= tmp_0 ?v_0) (=> (= A_0 (store1 A l (select1 A j_0))) (=> (= A_1 (store1 A_0 j_0 tmp_0)) (=> true (=> true (not (or (not ?v_1) (not (=> ?v_1 (not (or (not ?v_2) (not (=> ?v_2 (not (or (not ?v_3) (not (=> ?v_3 (=> true (=> true (=> true (=> ?v_10 (=> ?v_5 (=> (not (or ?v_12 (not (<= i_0 j_1)) ?v_6)) (=> true (not (or (not (=> true (=> true (=> ?v_8 (=> (<= ?v_16 pv_0) (=> (= i_2 ?v_18) (=> true (=> true (=> true (not (or (not ?v_4) (not (=> ?v_4 (not (or (not ?v_5) (not (=> ?v_5 (not (or (not ?v_7) (not (=> ?v_7 ?v_14))))))))))))))))))))) (not (=> true (=> true (=> ?v_8 (=> (<= pv_0 ?v_15) (=> (= j_2 ?v_9) (=> true (=> true (=> true (not (or (not ?v_10) (not (=> ?v_10 (not (or (not ?v_11) (not (=> ?v_11 (not (or (not ?v_13) (not (=> ?v_13 ?v_14))))))))))))))))))))) (not (=> true (=> true (=> ?v_8 (=> (not (or (not (< ?v_15 pv_0)) (not (< pv_0 ?v_16)))) (=> (= tmp_2 ?v_16) (=> (= A_3 (store1 A_2 i_0 ?v_15)) (=> (= A_4 (store1 A_3 ?v_9 tmp_2)) (not (or (not ?v_17) (not (=> ?v_17 (=> (= i_1 ?v_18) (=> (= j_3 ?v_9) (=> true (=> true (=> true (not (or (not ?v_19) (not (=> ?v_19 (not (or (not ?v_20) (not (=> ?v_20 (not (or (not ?v_21) (not (=> ?v_21 ?v_14))))))))))))))))))))))))))))) (not (=> true (=> true (=> (= i_0 j_1) (=> true (=> true (=> (= A_5 A_2) (=> (= result_0 i_0) (=> (= tmp_3 tmp_1) (=> (= i_3 i_0) (=> (= j_4 j_1) (=> true (=> true (not (or (not ?v_22) (not (=> ?v_22 (not (or (not ?v_23) (not (=> ?v_23 (not (or (not ?v_24) (not (=> ?v_24 (not (or (not ?v_25) (not (=> ?v_25 true)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
