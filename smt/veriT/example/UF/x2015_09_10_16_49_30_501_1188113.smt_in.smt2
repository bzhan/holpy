(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$) Nat$)
(declare-fun selecta$ (A_tree$) A$)
(declare-fun leaf$ (Nat$ A$) A_tree$)
(declare-fun selectb$ (A_tree$) Nat$)
(declare-fun selectc$ (A_tree$) A_tree$)
(declare-fun selectd$ (A_tree$) A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$) A_tree$)
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun uua$ (A_tree$ A$ A$ Nat$ Nat$) A_nat_fun$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun freq$ (A_tree$) A_nat_fun$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun times$ (Nat$) Nat_nat_fun$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun weight$ (A_tree$) Nat$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun optimum$ (A_tree$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$c (A_a_tree_fun$ A$) A_tree$)
(declare-fun fun_app$d (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun swapSyms$ (A_tree$ A$) A_a_tree_fun$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$) A_a_tree_fun$)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(declare-fun cachedWeight$ (A_tree$) Nat$)
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$) (?v5 A$)) (! (= (fun_app$a (uua$ ?v0 ?v1 ?v2 ?v3 ?v4) ?v5) (ite (= ?v5 ?v1) (ite (member$ ?v2 (alphabet$ ?v0)) ?v3 zero$) (ite (= ?v5 ?v2) (ite (member$ ?v1 (alphabet$ ?v0)) ?v4 zero$) (fun_app$a (freq$ ?v0) ?v5)))) :pattern ((fun_app$a (uua$ ?v0 ?v1 ?v2 ?v3 ?v4) ?v5)))))
(assert (not (= (fun_app$b (plus$ (fun_app$b (plus$ (cost$ (fun_app$c (swapLeaves$ t$ (fun_app$a (freq$ t$) a$) a$ (fun_app$a (freq$ t$) b$)) b$))) (fun_app$b (times$ (fun_app$a (freq$ t$) a$)) (depth$ t$ a$)))) (fun_app$b (times$ (fun_app$a (freq$ t$) b$)) (depth$ t$ b$))) (fun_app$b (plus$ (fun_app$b (plus$ (cost$ t$)) (fun_app$b (times$ (fun_app$a (freq$ t$) a$)) (depth$ t$ b$)))) (fun_app$b (times$ (fun_app$a (freq$ t$) b$)) (depth$ t$ a$))))))
(assert (consistent$ t$))
(assert (not (= a$ b$)))
(assert (member$ a$ (alphabet$ t$)))
(assert (member$ b$ (alphabet$ t$)))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 Nat$) (?v5 Nat$)) (=> (and (consistent$ ?v0) (and (not (= ?v1 ?v2)) (not (= ?v1 ?v3)))) (= (depth$ (fun_app$c (swapLeaves$ ?v0 ?v4 ?v2 ?v5) ?v3) ?v1) (depth$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (fun_app$c (swapLeaves$ ?v0 (fun_app$a (freq$ ?v0) ?v1) ?v1 (fun_app$a (freq$ ?v0) ?v1)) ?v1) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$c (swapLeaves$ ?v1 ?v2 ?v0 ?v3) ?v0) ?v1)) :pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (not (= ?v1 ?v2))) (ite (member$ ?v1 (alphabet$ ?v0)) (ite (member$ ?v2 (alphabet$ ?v0)) (= (fun_app$b (plus$ (fun_app$b (plus$ (cost$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2))) (fun_app$b (times$ (fun_app$a (freq$ ?v0) ?v1)) (depth$ ?v0 ?v1)))) (fun_app$b (times$ (fun_app$a (freq$ ?v0) ?v2)) (depth$ ?v0 ?v2))) (fun_app$b (plus$ (fun_app$b (plus$ (cost$ ?v0)) (fun_app$b (times$ ?v3) (depth$ ?v0 ?v2)))) (fun_app$b (times$ ?v4) (depth$ ?v0 ?v1)))) (= (fun_app$b (plus$ (cost$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2))) (fun_app$b (times$ (fun_app$a (freq$ ?v0) ?v1)) (depth$ ?v0 ?v1))) (fun_app$b (plus$ (cost$ ?v0)) (fun_app$b (times$ ?v4) (depth$ ?v0 ?v1))))) (ite (member$ ?v2 (alphabet$ ?v0)) (= (fun_app$b (plus$ (cost$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2))) (fun_app$b (times$ (fun_app$a (freq$ ?v0) ?v2)) (depth$ ?v0 ?v2))) (fun_app$b (plus$ (cost$ ?v0)) (fun_app$b (times$ ?v3) (depth$ ?v0 ?v2)))) (= (cost$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (cost$ ?v0))))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_tree$) (?v1 Nat$) (?v2 A$) (?v3 Nat$) (?v4 A$)) (=> (consistent$ ?v0) (consistent$ (fun_app$c (swapLeaves$ ?v0 ?v1 ?v2 ?v3) ?v4))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A$)) (= (fun_app$a (freq$ (uniteTrees$ ?v0 ?v1)) ?v2) (fun_app$b (plus$ (fun_app$a (freq$ ?v0) ?v2)) (fun_app$a (freq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (plus$ (fun_app$b (times$ ?v2) ?v1)) ?v3)) (fun_app$b (plus$ (fun_app$b (times$ (fun_app$b (plus$ ?v0) ?v2)) ?v1)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ ?v0) (fun_app$b (plus$ ?v1) ?v2)) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v2) ?v3)) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v3)) (fun_app$b (times$ ?v2) ?v1))) (or (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)) ) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$b (plus$ ?v0) ?v2) (fun_app$b (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (plus$ ?v0) (fun_app$b (plus$ ?v1) ?v2)) (fun_app$b (plus$ ?v1) (fun_app$b (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (plus$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$b (plus$ ?v0) (fun_app$b (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (plus$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$b (plus$ ?v0) (fun_app$b (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ ?v0) (fun_app$b (times$ ?v1) ?v2)) (fun_app$b (times$ ?v1) (fun_app$b (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ (fun_app$b (times$ ?v0) ?v1)) ?v2) (fun_app$b (times$ ?v0) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ (fun_app$b (times$ ?v0) ?v1)) ?v2) (fun_app$b (times$ ?v0) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (plus$ ?v0) ?v1) (fun_app$b (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (and (not (= ?v0 ?v1)) (not (= ?v2 ?v3))) (not (= (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v3)) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v3)) (fun_app$b (times$ ?v1) ?v2))))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (member$ ?v1 (alphabet$ ?v0)) (member$ ?v2 (alphabet$ ?v0)))) (= (freq$ (fun_app$c (swapSyms$ ?v0 ?v1) ?v2)) (freq$ ?v0))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (consistent$ ?v0) (and (not (= ?v1 ?v2)) (not (= ?v1 ?v3)))) (= (depth$ (fun_app$c (swapSyms$ ?v0 ?v2) ?v3) ?v1) (depth$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (not (= ?v1 ?v2))) (ite (member$ ?v1 (alphabet$ ?v0)) (ite (member$ ?v2 (alphabet$ ?v0)) (= (fun_app$b (plus$ (fun_app$b (plus$ (weight$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2))) (fun_app$a (freq$ ?v0) ?v1))) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (plus$ (fun_app$b (plus$ (weight$ ?v0)) ?v3)) ?v4)) (= (fun_app$b (plus$ (weight$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2))) (fun_app$a (freq$ ?v0) ?v1)) (fun_app$b (plus$ (weight$ ?v0)) ?v4))) (ite (member$ ?v2 (alphabet$ ?v0)) (= (fun_app$b (plus$ (weight$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2))) (fun_app$a (freq$ ?v0) ?v2)) (fun_app$b (plus$ (weight$ ?v0)) ?v3)) (= (weight$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (weight$ ?v0))))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ ?v0) (fun_app$b (plus$ ?v1) ?v2)) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$b (times$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$)) (=> (and (member$ ?v0 (alphabet$ ?v1)) (member$ ?v2 (alphabet$ ?v1))) (= (alphabet$ (fun_app$c (swapSyms$ ?v1 ?v0) ?v2)) (alphabet$ ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (! (=> (consistent$ ?v0) (= (fun_app$c (swapSyms$ ?v0 ?v1) ?v1) ?v0)) :pattern ((swapSyms$ ?v0 ?v1)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (consistent$ ?v0) (consistent$ (fun_app$c (swapSyms$ ?v0 ?v1) ?v2))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 A_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (! (= (fun_app$c (swapSyms$ ?v0 ?v1) ?v2) (fun_app$c (swapLeaves$ ?v0 (fun_app$a (freq$ ?v0) ?v1) ?v1 (fun_app$a (freq$ ?v0) ?v2)) ?v2)) :pattern ((fun_app$c (swapSyms$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (fun_app$b (plus$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (plus$ (fun_app$b (times$ ?v2) ?v1)) ?v3)) (fun_app$b (plus$ (fun_app$b (times$ (fun_app$b (plus$ ?v0) ?v2)) ?v1)) ?v3)) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (not (= ?v1 ?v2))) (= (freq$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (uua$ ?v0 ?v1 ?v2 ?v3 ?v4))) ))
(assert (forall ((?v0 A_tree$)) (=> (consistent$ ?v0) (exists ((?v1 A$)) (and (member$ ?v1 (alphabet$ ?v0)) (= (depth$ ?v0 ?v1) (height$ ?v0))) )) ))
(assert (forall ((?v0 A_tree$)) (= (optimum$ ?v0) (forall ((?v1 A_tree$)) (=> (and (consistent$ ?v1) (and (= (alphabet$ ?v0) (alphabet$ ?v1)) (= (freq$ ?v0) (freq$ ?v1)))) (fun_app$d (less_eq$ (cost$ ?v0)) (cost$ ?v1))) )) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (and (not (= (sibling$ ?v0 ?v1) ?v1)) (not (= ?v2 ?v1)))) (= (sibling$ (fun_app$c (swapLeaves$ ?v0 ?v3 ?v2 ?v4) (sibling$ ?v0 ?v1)) ?v2) ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (depth$ ?v0 (sibling$ ?v0 ?v1)) (depth$ ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (cost$ (innerNode$ ?v0 ?v1 ?v2)) (fun_app$b (plus$ (fun_app$b (plus$ (fun_app$b (plus$ (weight$ ?v1)) (cost$ ?v1))) (weight$ ?v2))) (cost$ ?v2))) :pattern ((innerNode$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$a (freq$ ?v1) ?v0) zero$)) :pattern ((fun_app$a (freq$ ?v1) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v0) ?v2)) (fun_app$d (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v2) ?v1)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$b (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$b (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$b (times$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$b (times$ ?v0) zero$) zero$) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v0) ?v2)) (or (= ?v0 zero$) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v2) ?v1)) (or (= ?v1 zero$) (= ?v0 ?v2))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$b (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$b (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$)) (fun_app$d (less_eq$ zero$) ?v0) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (less_eq$ ?v0) zero$) (= ?v0 zero$)) :pattern ((less_eq$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v0) ?v2)) (fun_app$d (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$b (times$ ?v0) zero$) zero$) :pattern ((times$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v0) ?v2)) (or (= ?v1 ?v2) (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v2) ?v1)) (or (= ?v0 ?v2) (= ?v1 zero$))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (sibling$ ?v1 ?v0) ?v0)) :pattern ((sibling$ ?v1 ?v0)))))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (sibling$ ?v0 (sibling$ ?v0 ?v1)) ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 Nat$) (?v2 A$) (?v3 Nat$) (?v4 A$)) (= (height$ (fun_app$c (swapLeaves$ ?v0 ?v1 ?v2 ?v3) ?v4)) (height$ ?v0)) ))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (! (=> (= (height$ ?v0) zero$) (= (sibling$ ?v0 ?v1) ?v1)) :pattern ((sibling$ ?v0 ?v1)))))
(assert (forall ((?v0 A_tree$)) (! (=> (= (height$ ?v0) zero$) (= (cost$ ?v0) zero$)) :pattern ((cost$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (or (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ ?v1) zero$)) (and (fun_app$d (less_eq$ ?v0) zero$) (fun_app$d (less_eq$ zero$) ?v1))) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (and (fun_app$d (less_eq$ ?v2) ?v3) (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ zero$) ?v2)))) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (and (fun_app$d (less_eq$ ?v2) ?v3) (and (fun_app$d (less_eq$ zero$) ?v1) (fun_app$d (less_eq$ zero$) ?v2)))) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ zero$) ?v2)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v2) ?v0)) (fun_app$b (times$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ zero$) ?v2)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ zero$) ?v2)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v2) ?v0)) (fun_app$b (times$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) zero$) (fun_app$d (less_eq$ zero$) ?v1)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ ?v1) zero$)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v1) ?v0)) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ ?v1) zero$)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ zero$) ?v1)) (fun_app$d (less_eq$ zero$) (fun_app$b (times$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ zero$) ?v1)) (fun_app$d (less_eq$ zero$) (fun_app$b (plus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ zero$) ?v1)) (= (= (fun_app$b (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v1) (fun_app$b (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ zero$) ?v0) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v1) (fun_app$b (plus$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) zero$) (fun_app$d (less_eq$ ?v1) zero$)) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 Nat$) (?v3 A_tree$) (?v4 A_tree$) (?v5 A$)) (! (= (sibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4)) ?v5) (ite (member$ ?v5 (alphabet$ ?v1)) (sibling$ ?v1 ?v5) (ite (member$ ?v5 (alphabet$ (innerNode$ ?v2 ?v3 ?v4))) (sibling$ (innerNode$ ?v2 ?v3 ?v4) ?v5) ?v5))) :pattern ((sibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4)) ?v5)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A_tree$) (?v5 A$)) (! (= (sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3) ?v4) ?v5) (ite (member$ ?v5 (alphabet$ (innerNode$ ?v1 ?v2 ?v3))) (sibling$ (innerNode$ ?v1 ?v2 ?v3) ?v5) (ite (member$ ?v5 (alphabet$ ?v4)) (sibling$ ?v4 ?v5) ?v5))) :pattern ((sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3) ?v4) ?v5)))))
(assert (fun_app$d (less_eq$ zero$) zero$))
(assert (forall ((?v0 Nat$)) (fun_app$d (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (less_eq$ zero$) ?v0) true) :pattern ((fun_app$d (less_eq$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (fun_app$d (less_eq$ (depth$ ?v0 ?v1)) (height$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v2) ?v0)) (fun_app$b (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v3)) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v0) ?v2)) (fun_app$d (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v2) ?v1)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v3)) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (= ?v2 ?v3)) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$d (less_eq$ ?v2) ?v3)) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$d (less_eq$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$b (plus$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$d (less_eq$ ?v0) (fun_app$b (plus$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$d (less_eq$ ?v0) (fun_app$b (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$b (plus$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v0) (fun_app$b (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v0) (fun_app$b (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v3)) (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v2)) (fun_app$b (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (fun_app$d (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ (fun_app$b (plus$ ?v0) ?v1)) ?v2) (=> (and (fun_app$d (less_eq$ ?v0) ?v2) (fun_app$d (less_eq$ ?v1) ?v2)) false)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$d (less_eq$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (fun_app$b (plus$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$b (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$b (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 (fun_app$b (plus$ ?v0) ?v1)) (= ?v1 zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (not (= ?v0 zero$)) (= (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (not (= ?v0 zero$)) (= (= (fun_app$b (times$ ?v1) ?v0) (fun_app$b (times$ ?v2) ?v0)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 zero$)) (not (= ?v1 zero$))) (not (= (fun_app$b (times$ ?v0) ?v1) zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (= (fun_app$b (times$ ?v0) ?v1) zero$)) (and (not (= ?v0 zero$)) (not (= ?v1 zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$b (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$)) (fun_app$d (less_eq$ ?v0) (fun_app$b (times$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (fun_app$d (less_eq$ ?v0) (fun_app$b (times$ ?v0) (fun_app$b (times$ ?v0) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ (fun_app$b (times$ ?v2) ?v0)) (fun_app$b (times$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v3)) (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v2)) (fun_app$b (times$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$b (plus$ ?v0) ?v1) ?v0) (= ?v1 zero$)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$b (plus$ zero$) ?v0) ?v0) :pattern ((fun_app$b (plus$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$b (times$ zero$) ?v0) zero$) :pattern ((fun_app$b (times$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$b (times$ ?v0) ?v1) (fun_app$b (times$ ?v0) ?v2)) (or (= ?v0 zero$) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A$) (?v5 Nat$) (?v6 A$)) (! (= (fun_app$c (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5) ?v6) (innerNode$ ?v0 (fun_app$c (swapLeaves$ ?v1 ?v3 ?v4 ?v5) ?v6) (fun_app$c (swapLeaves$ ?v2 ?v3 ?v4 ?v5) ?v6))) :pattern ((fun_app$c (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5) ?v6)))))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (alphabet$ ?v1)) (member$ (sibling$ ?v1 ?v0) (alphabet$ ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (=> (not (= (sibling$ ?v0 ?v1) ?v1)) (member$ (sibling$ ?v0 ?v1) (alphabet$ ?v0))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (= (sibling$ ?v0 ?v1) ?v2)) (= (sibling$ ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$) (?v4 Nat$)) (=> (and (not (= ?v0 zero$)) (and (= ?v1 ?v2) (not (= ?v3 ?v4)))) (not (= (fun_app$b (plus$ ?v1) (fun_app$b (times$ ?v0) ?v3)) (fun_app$b (plus$ ?v2) (fun_app$b (times$ ?v0) ?v4))))) ))
(assert (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$)) (! (= (fun_app$a (freq$ (innerNode$ ?v0 ?v1 ?v2)) ?v3) (fun_app$b (plus$ (fun_app$a (freq$ ?v1) ?v3)) (fun_app$a (freq$ ?v2) ?v3))) :pattern ((fun_app$a (freq$ (innerNode$ ?v0 ?v1 ?v2)) ?v3)))))
(assert (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (weight$ (innerNode$ ?v0 ?v1 ?v2)) (fun_app$b (plus$ (weight$ ?v1)) (weight$ ?v2))) :pattern ((innerNode$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_tree$)) (! (=> (= (height$ ?v0) zero$) (= (cachedWeight$ ?v0) (weight$ ?v0))) :pattern ((cachedWeight$ ?v0)))))
(assert (forall ((?v0 Nat$)) (fun_app$d (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$)) (! (= (uniteTrees$ ?v0 ?v1) (innerNode$ (fun_app$b (plus$ (cachedWeight$ ?v0)) (cachedWeight$ ?v1)) ?v0 ?v1)) :pattern ((uniteTrees$ ?v0 ?v1)))))
(assert (forall ((?v0 A_tree$) (?v1 A$)) (=> (and (consistent$ ?v0) (and (= (depth$ ?v0 ?v1) (height$ ?v0)) (and (fun_app$d (less$ zero$) (height$ ?v0)) (member$ ?v1 (alphabet$ ?v0))))) (not (= (sibling$ ?v0 ?v1) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v2) ?v1)) (fun_app$d (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v0) ?v2)) (fun_app$d (less$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$d (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (= (not (fun_app$d (less$ zero$) ?v0)) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$d (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less$ (fun_app$b (plus$ ?v0) ?v1)) (fun_app$b (plus$ ?v0) ?v2)) (fun_app$d (less$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$d (less$ zero$) (fun_app$b (plus$ ?v0) ?v1)) (or (fun_app$d (less$ zero$) ?v0) (fun_app$d (less$ zero$) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v0) ?v2)) (and (fun_app$d (less$ zero$) ?v0) (fun_app$d (less$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v2) ?v1)) (and (fun_app$d (less$ zero$) ?v1) (fun_app$d (less$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$d (less$ zero$) (fun_app$b (times$ ?v0) ?v1)) (and (fun_app$d (less$ zero$) ?v0) (fun_app$d (less$ zero$) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v0) ?v2)) (=> (fun_app$d (less$ zero$) ?v0) (fun_app$d (less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$d (less_eq$ (fun_app$b (times$ ?v0) ?v1)) (fun_app$b (times$ ?v2) ?v1)) (=> (fun_app$d (less$ zero$) ?v1) (fun_app$d (less_eq$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 Nat$) (?v3 A$)) (! (=> (or (fun_app$d (less$ zero$) (height$ ?v0)) (fun_app$d (less$ zero$) (height$ ?v1))) (= (sibling$ (innerNode$ ?v2 ?v0 ?v1) ?v3) (ite (member$ ?v3 (alphabet$ ?v0)) (sibling$ ?v0 ?v3) (sibling$ ?v1 ?v3)))) :pattern ((sibling$ (innerNode$ ?v2 ?v0 ?v1) ?v3)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 Nat$)) (! (=> (and (fun_app$d (less$ zero$) (height$ ?v0)) (member$ ?v1 (alphabet$ ?v2))) (= (sibling$ (innerNode$ ?v3 ?v2 ?v0) ?v1) (sibling$ ?v2 ?v1))) :pattern ((sibling$ (innerNode$ ?v3 ?v2 ?v0) ?v1)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 Nat$) (?v3 A_tree$)) (! (=> (and (fun_app$d (less$ zero$) (height$ ?v0)) (member$ ?v1 (alphabet$ ?v0))) (= (sibling$ (innerNode$ ?v2 ?v0 ?v3) ?v1) (sibling$ ?v0 ?v1))) :pattern ((sibling$ (innerNode$ ?v2 ?v0 ?v3) ?v1)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 Nat$)) (! (=> (and (fun_app$d (less$ zero$) (height$ ?v0)) (not (member$ ?v1 (alphabet$ ?v2)))) (= (sibling$ (innerNode$ ?v3 ?v2 ?v0) ?v1) (sibling$ ?v0 ?v1))) :pattern ((sibling$ (innerNode$ ?v3 ?v2 ?v0) ?v1)))))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 Nat$) (?v3 A_tree$)) (! (=> (and (fun_app$d (less$ zero$) (height$ ?v0)) (not (member$ ?v1 (alphabet$ ?v0)))) (= (sibling$ (innerNode$ ?v2 ?v0 ?v3) ?v1) (sibling$ ?v3 ?v1))) :pattern ((sibling$ (innerNode$ ?v2 ?v0 ?v3) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less$ ?v0) ?v1) (and (fun_app$d (less_eq$ ?v0) ?v1) (not (= ?v1 ?v0)))) :pattern ((fun_app$d (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less$ ?v0) ?v1) (and (fun_app$d (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$d (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less$ ?v0) ?v1) (and (fun_app$d (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$d (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less$ ?v0) ?v1) (and (fun_app$d (less_eq$ ?v0) ?v1) (not (fun_app$d (less_eq$ ?v1) ?v0)))) :pattern ((fun_app$d (less$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less_eq$ ?v0) ?v1) (or (fun_app$d (less$ ?v0) ?v1) (= ?v1 ?v0))) :pattern ((fun_app$d (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less_eq$ ?v0) ?v1) (or (fun_app$d (less$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$d (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$d (less_eq$ ?v0) ?v1) (or (fun_app$d (less$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$d (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$d (less$ ?v0) ?v1)) (fun_app$d (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$d (less_eq$ ?v0) ?v1)) (fun_app$d (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$d (less$ ?v0) ?v1) (and (fun_app$d (less_eq$ (fun_app$b ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$d (less$ ?v4) ?v5) (fun_app$d (less$ (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5))) ))) (fun_app$d (less$ (fun_app$b ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less$ ?v0) (fun_app$b ?v1 ?v2)) (and (fun_app$d (less_eq$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$d (less_eq$ ?v4) ?v5) (fun_app$d (less_eq$ (fun_app$b ?v1 ?v4)) (fun_app$b ?v1 ?v5))) ))) (fun_app$d (less$ ?v0) (fun_app$b ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v0)) (fun_app$d (less$ ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (and (fun_app$d (less$ (fun_app$b ?v2 ?v1)) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$d (less_eq$ ?v4) ?v5) (fun_app$d (less_eq$ (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5))) ))) (fun_app$d (less$ (fun_app$b ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) (fun_app$b ?v1 ?v2)) (and (fun_app$d (less$ ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$d (less$ ?v4) ?v5) (fun_app$d (less$ (fun_app$b ?v1 ?v4)) (fun_app$b ?v1 ?v5))) ))) (fun_app$d (less$ ?v0) (fun_app$b ?v1 ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less$ ?v2) ?v0)) (fun_app$d (less$ ?v2) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less$ ?v1) ?v2)) (fun_app$d (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less$ ?v1) ?v2)) (fun_app$d (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$d (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (= (not (fun_app$d (less$ ?v0) ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (or (fun_app$d (less$ ?v0) ?v1) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (not (fun_app$d (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (fun_app$d (less_eq$ ?v0) ?v1)) (fun_app$d (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (not (fun_app$d (less$ ?v0) ?v1)) (= (fun_app$d (less_eq$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$d (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$d (less$ ?v0) ?v1)) (fun_app$d (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$d (less_eq$ ?v0) ?v1)) (fun_app$d (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$d (less$ ?v0) ?v1) (fun_app$d (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$d (less$ ?v0) ?v1) (fun_app$d (fun_app$e ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$d (fun_app$e ?v2 ?v1) ?v0)) (=> (fun_app$d (less$ ?v1) ?v0) (fun_app$d (fun_app$e ?v2 ?v1) ?v0)))) (fun_app$d (fun_app$e ?v2 ?v1) ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$d ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$d (less$ ?v3) ?v2) (not (fun_app$d ?v0 ?v3))) )) ) (fun_app$d ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$d (less$ ?v3) ?v2) (fun_app$d ?v0 ?v3)) ) (fun_app$d ?v0 ?v2)) ) (fun_app$d ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$d (less$ ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$d (less$ ?v0) ?v0) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$d (less$ ?v0) ?v1) false) (=> (fun_app$d (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$d (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$d (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$d (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$)) (exists ((?v1 Nat$)) (fun_app$d (less$ ?v0) ?v1) ) ))
(check-sat)
(exit)

