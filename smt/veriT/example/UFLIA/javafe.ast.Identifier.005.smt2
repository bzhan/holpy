(set-info :smt-lib-version 2.6)
(set-logic UFLIA)
(set-info :source | 
  Simplify front end test suite.
  This benchmark was translated by Michal Moskal.
|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun EC_161.16_161.16 () Int)
(declare-fun chars_139.6_0_142.1 () Int)
(declare-fun integralOr (Int Int) Int)
(declare-fun elems_97.11_14.342.17 () Int)
(declare-fun alloc_3_ () Int)
(declare-fun arrayShapeMore (Int Int) Int)
(declare-fun integralAnd (Int Int) Int)
(declare-fun RES_6_ () Int)
(declare-fun T_.TYPE () Int)
(declare-fun index_139.6_0_139.35 () Int)
(declare-fun chain_135.6 () Int)
(declare-fun STRINGLIT_6.44.26 () Int)
(declare-fun elems_153.13_14.342.17 () Int)
(declare-fun intFirst () Int)
(declare-fun alloc_4_ () Int)
(declare-fun INITIAL_CHAIN_SIZE_pre_48.27 () Int)
(declare-fun chars_96.9 () Int)
(declare-fun RES_7_ () Int)
(declare-fun eClosedTime (Int) Int)
(declare-fun int_m9223372036854775808 () Int)
(declare-fun RES_140.21_1_ () Int)
(declare-fun int_m2147483648 () Int)
(declare-fun T_java.lang.Comparable () Int)
(declare-fun tokenType_pre_90.8 () Int)
(declare-fun otherCodes_pre_5.202.27 () Int)
(declare-fun text_170.25 () Int)
(declare-fun noTokens_5.212.27 () Int)
(declare-fun punctuationCodes_pre_5.164.19 () Int)
(declare-fun arrayPosition (Int) Int)
(declare-fun RES_8_ () Int)
(declare-fun RES_95.61_95.61 () Int)
(declare-fun select1 (Int Int) Int)
(declare-fun select2 (Int Int Int) Int)
(declare-fun T_java.util.EscjavaKeyValue () Int)
(declare-fun otherStrings_5.193.30 () Int)
(declare-fun elems_1_ () Int)
(declare-fun T_long () Int)
(declare-fun hashcode_162.8 () Int)
(declare-fun chains_pre_44.34 () Int)
(declare-fun lockLE (Int Int) Bool)
(declare-fun classLiteral (Int) Int)
(declare-fun lockLT (Int Int) Bool)
(declare-fun elems_2_ () Int)
(declare-fun chars_56.17_1_ () Int)
(declare-fun FLOATLIT_6.42.26 () Int)
(declare-fun EC_109.16_109.16 () Int)
(declare-fun LAST_KEYWORD_pre_5.103.26 () Int)
(declare-fun T_float () Int)
(declare-fun chars_56.17 () Int)
(declare-fun STRINGLIT_pre_6.44.26 () Int)
(declare-fun alloc () Int)
(declare-fun after_156.27_156.27 () Int)
(declare-fun elems_3_ () Int)
(declare-fun chain_130.4 () Int)
(declare-fun RES_109.16_109.16 () Int)
(declare-fun asChild (Int Int) Int)
(declare-fun CONCVARSYM (Int) Int)
(declare-fun T_int () Int)
(declare-fun chain_130.17_1_ () Int)
(declare-fun STMTPRAGMA_5.26.26 () Int)
(declare-fun elems_4_ () Int)
(declare-fun hashcode_loopold_171.8 () Int)
(declare-fun int_2147483647 () Int)
(declare-fun int_9223372036854775807 () Int)
(declare-fun T_byte () Int)
(declare-fun T_java.lang.System () Int)
(declare-fun s_105.41 () Int)
(declare-fun T_java.lang.Math () Int)
(declare-fun EC_156.27_156.27 () Int)
(declare-fun store1 (Int Int Int) Int)
(declare-fun store2 (Int Int Int Int) Int)
(declare-fun DOUBLELIT_pre_6.43.26 () Int)
(declare-fun elems_5_ () Int)
(declare-fun after_136.25_136.25 () Int)
(declare-fun RES_loopold () Int)
(declare-fun owner_pre_4.35.28 () Int)
(declare-fun i_loopold_163.12 () Int)
(declare-fun s_160.25 () Int)
(declare-fun max (Int) Int)
(declare-fun HC_71.19 () Int)
(declare-fun CHARLIT_pre_6.41.26 () Int)
(declare-fun elems_6_ () Int)
(declare-fun objectToBeConstructed () Int)
(declare-fun T_java.util.Map () Int)
(declare-fun EC_171.4 () Int)
(declare-fun EC_129.17_129.17 () Int)
(declare-fun punctuationStrings_5.134.22 () Int)
(declare-fun tmp2_chars_97.30 () Int)
(declare-fun EC_136.25_136.25 () Int)
(declare-fun integralDiv (Int Int) Int)
(declare-fun RES_112.30_112.30 () Int)
(declare-fun T_javafe.ast.Identifier () Int)
(declare-fun RES_129.17_129.17 () Int)
(declare-fun RES_161.16_161.16 () Int)
(declare-fun EC_loopold_139.6_0 () Int)
(declare-fun textlen_95.38 () Int)
(declare-fun T_javafe.ast.TagConstants () Int)
(declare-fun chains_44.34 () Int)
(declare-fun T_java.lang.Class () Int)
(declare-fun L_163.4 () Int)
(declare-fun T_java.lang.Number () Int)
(declare-fun k_139.6_0_140.1 () Int)
(declare-fun RES_129.17 () Int)
(declare-fun T_java.lang.Object () Int)
(declare-fun tmp0_new_char___96.17 () Int)
(declare-fun equiv_61.17_1_ () Int)
(declare-fun T_javafe.parser.TagConstants () Int)
(declare-fun longLast () Int)
(declare-fun termConditional (Int Int Int) Int)
(declare-fun tmp0_new_char___110.19 () Int)
(declare-fun punctuationStrings_pre_5.134.22 () Int)
(declare-fun HC_pre_71.19 () Int)
(declare-fun index_133.8 () Int)
(declare-fun TYPEMODIFIERPRAGMA_5.28.26 () Int)
(declare-fun T_java.util.Dictionary () Int)
(declare-fun LONGLIT_pre_6.40.26 () Int)
(declare-fun count_pre_15.99.33 () Int)
(declare-fun T_java.lang.Integer () Int)
(declare-fun bool_false () Int)
(declare-fun Smt.true () Int)
(declare-fun tmp8_new_Identifier___152.14 () Int)
(declare-fun elems_129.17 () Int)
(declare-fun TYPEMODIFIERPRAGMA_pre_5.28.26 () Int)
(declare-fun asLockSet (Int) Int)
(declare-fun integralMod (Int Int) Int)
(declare-fun EC_140.21 () Int)
(declare-fun LONGLIT_6.40.26 () Int)
(declare-fun Smt.false () Int)
(declare-fun value_pre_15.91.31 () Int)
(declare-fun tokenType_90.8 () Int)
(declare-fun EC_97.11_97.11 () Int)
(declare-fun typeof (Int) Int)
(declare-fun int_18446744073709551615 () Int)
(declare-fun hashcode_171.8 () Int)
(declare-fun owner_4.35.28 () Int)
(declare-fun stringCat (Int Int) Int)
(declare-fun TABLE_SIZE_25.27 () Int)
(declare-fun T_boolean () Int)
(declare-fun index_loopold_133.8 () Int)
(declare-fun longFirst () Int)
(declare-fun INTLIT_6.39.26 () Int)
(declare-fun equiv_pre_61.17 () Int)
(declare-fun T_java.util.Hashtable () Int)
(declare-fun RES_156.27_156.27 () Int)
(declare-fun textlen_127.44 () Int)
(declare-fun T_java.util.Properties () Int)
(declare-fun EC_95.61_95.61 () Int)
(declare-fun after_95.61_95.61 () Int)
(declare-fun after_97.11_97.11_14.342.17 () Int)
(declare-fun arrayFresh (Int Int Int Int Int Int Int) Bool)
(declare-fun hashcode_127.57 () Int)
(declare-fun RES () Int)
(declare-fun NULL_pre_5.82.26 () Int)
(declare-fun EC_163.4_0_164.33_164.33 () Int)
(declare-fun RES_163.4_0_164.33_164.33 () Int)
(declare-fun after_153.13_153.13_14.342.17 () Int)
(declare-fun EC_112.11_112.11 () Int)
(declare-fun RES_136.25_136.25 () Int)
(declare-fun C_139.6 () Int)
(declare-fun intLast () Int)
(declare-fun arrayType () Int)
(declare-fun MODIFIERPRAGMA_pre_5.25.26 () Int)
(declare-fun boolEq (Int Int) Bool)
(declare-fun FIRST_KEYWORD_pre_5.51.26 () Int)
(declare-fun CHARLIT_6.41.26 () Int)
(declare-fun arrayLength (Int) Int)
(declare-fun cast (Int Int) Int)
(declare-fun asElems (Int) Int)
(declare-fun L_172.4 () Int)
(declare-fun EC_111.6_111.6 () Int)
(declare-fun T_char () Int)
(declare-fun EC_161.15 () Int)
(declare-fun chars_pre_56.17 () Int)
(declare-fun hashcode_171.8_1_ () Int)
(declare-fun tmp9_153.29 () Int)
(declare-fun divides (Int Int) Int)
(declare-fun TYPEDECLELEMPRAGMA_5.27.26 () Int)
(declare-fun T_javafe.util.Assert () Int)
(declare-fun InRange (Int Int) Bool)
(declare-fun punctuationCodes_5.164.19 () Int)
(declare-fun index_133.8_1_ () Int)
(declare-fun EC_140.21_1_ () Int)
(declare-fun FIRST_KEYWORD_5.51.26 () Int)
(declare-fun BOOLEANLIT_pre_6.38.26 () Int)
(declare-fun index_133.8_2_ () Int)
(declare-fun L_139.6 () Int)
(declare-fun IDENT_6.25.26 () Int)
(declare-fun i_loopold_172.12 () Int)
(declare-fun chain_130.17 () Int)
(declare-fun noTokens_pre_5.212.27 () Int)
(declare-fun refEQ (Int Int) Int)
(declare-fun T_javafe.ast.OperatorTags () Int)
(declare-fun EC_loopold () Int)
(declare-fun C_144.3 () Int)
(declare-fun h_129.4 () Int)
(declare-fun INTLIT_pre_6.39.26 () Int)
(declare-fun index_133.8_3_ () Int)
(declare-fun EC_153.13_153.13 () Int)
(declare-fun RES_140.21 () Int)
(declare-fun keywordStrings_5.181.30 () Int)
(declare-fun T_javafe.ast.GeneratedTags () Int)
(declare-fun is (Int Int) Int)
(declare-fun i_172.4_0_172.32 () Int)
(declare-fun hashcode_95.51 () Int)
(declare-fun integralEQ (Int Int) Int)
(declare-fun text_95.28 () Int)
(declare-fun value_15.91.31 () Int)
(declare-fun STMTPRAGMA_pre_5.26.26 () Int)
(declare-fun count_15.99.33 () Int)
(declare-fun boolNE (Int Int) Bool)
(declare-fun TABLE_SIZE_pre_25.27 () Int)
(declare-fun LAST_KEYWORD_5.103.26 () Int)
(declare-fun isNewArray (Int) Int)
(declare-fun INITIAL_CHAIN_SIZE_48.27 () Int)
(declare-fun elems_pre () Int)
(declare-fun intShiftL (Int Int) Int)
(declare-fun textlen_170.35 () Int)
(declare-fun nonnullelements (Int Int) Bool)
(declare-fun multiply (Int Int) Int)
(declare-fun text_127.34 () Int)
(declare-fun EC_145.13 () Int)
(declare-fun integralGE (Int Int) Int)
(declare-fun T_short () Int)
(declare-fun BOOLEANLIT_6.38.26 () Int)
(declare-fun alloc_pre () Int)
(declare-fun integralGT (Int Int) Int)
(declare-fun EC () Int)
(declare-fun hashcode_172.4_0_173.6 () Int)
(declare-fun RES_112.11_112.11 () Int)
(declare-fun boolAnd (Int Int) Bool)
(declare-fun NULL_5.82.26 () Int)
(declare-fun j_139.6_0_144.3_0_144.31 () Int)
(declare-fun EC_1_ () Int)
(declare-fun j_loopold_139.6_0_144.11 () Int)
(declare-fun arrayShapeOne (Int) Int)
(declare-fun T_double () Int)
(declare-fun longShiftL (Int Int) Int)
(declare-fun T_java.io.Serializable () Int)
(declare-fun boolOr (Int Int) Bool)
(declare-fun hashcode_162.8_1_ () Int)
(declare-fun int_4294967295 () Int)
(declare-fun i_163.4_0_163.28 () Int)
(declare-fun modulo (Int Int) Int)
(declare-fun EC_2_ () Int)
(declare-fun MODIFIERPRAGMA_5.25.26 () Int)
(declare-fun LEXICALPRAGMA_pre_5.24.26 () Int)
(declare-fun EC_3_ () Int)
(declare-fun null () Int)
(declare-fun tmp2_new_Identifier___135.26 () Int)
(declare-fun hashcode_loopold_162.8 () Int)
(declare-fun otherStrings_pre_5.193.30 () Int)
(declare-fun T_java.lang.String () Int)
(declare-fun EC_4_ () Int)
(declare-fun asField (Int Int) Int)
(declare-fun keywordStrings_pre_5.181.30 () Int)
(declare-fun L_144.3 () Int)
(declare-fun TYPEDECLELEMPRAGMA_pre_5.27.26 () Int)
(declare-fun boolImplies (Int Int) Bool)
(declare-fun EC_5_ () Int)
(declare-fun integralLE (Int Int) Int)
(declare-fun RES_1_ () Int)
(declare-fun integralLT (Int Int) Int)
(declare-fun LEXICALPRAGMA_5.24.26 () Int)
(declare-fun vAllocTime (Int) Int)
(declare-fun EC_6_ () Int)
(declare-fun T_java.lang.Cloneable () Int)
(declare-fun RES_2_ () Int)
(declare-fun boolNot (Int) Bool)
(declare-fun refNE (Int Int) Int)
(declare-fun integralXor (Int Int) Int)
(declare-fun classDown (Int Int) Int)
(declare-fun EC_129.17 () Int)
(declare-fun EC_7_ () Int)
(declare-fun integralNE (Int Int) Int)
(declare-fun RES_3_ () Int)
(declare-fun equiv_61.17 () Int)
(declare-fun arrayParent (Int) Int)
(declare-fun elemtype (Int) Int)
(declare-fun hashcode_163.4_0_164.6 () Int)
(declare-fun IDENT_pre_6.25.26 () Int)
(declare-fun fClosedTime (Int) Int)
(declare-fun alloc_1_ () Int)
(declare-fun tmp0_163.4_0_164.17 () Int)
(declare-fun DOUBLELIT_6.43.26 () Int)
(declare-fun tokenType_90.8_1_ () Int)
(declare-fun array (Int) Int)
(declare-fun EC_8_ () Int)
(declare-fun EC_112.30_112.30 () Int)
(declare-fun LS () Int)
(declare-fun RES_4_ () Int)
(declare-fun ecReturn () Int)
(declare-fun isAllocated (Int Int) Bool)
(declare-fun otherCodes_5.202.27 () Int)
(declare-fun alloc_2_ () Int)
(declare-fun elems () Int)
(declare-fun subtypes (Int Int) Bool)
(declare-fun tokenType_90.8_2_ () Int)
(declare-fun EC_9_ () Int)
(declare-fun RES_153.13_153.13 () Int)
(declare-fun RES_5_ () Int)
(declare-fun FLOATLIT_pre_6.42.26 () Int)
(assert (subtypes T_javafe.util.Assert T_java.lang.Object))
(assert (= T_javafe.util.Assert (asChild T_javafe.util.Assert T_java.lang.Object)))
(assert (subtypes T_java.io.Serializable T_java.lang.Object))
(assert (subtypes T_java.lang.Integer T_java.lang.Number))
(assert (= T_java.lang.Integer (asChild T_java.lang.Integer T_java.lang.Number)))
(assert (forall ((?t Int)) (! (= (subtypes ?t T_java.lang.Integer) (= ?t T_java.lang.Integer)) :pattern ((subtypes ?t T_java.lang.Integer)) )))
(assert (subtypes T_java.lang.Integer T_java.lang.Comparable))
(assert (subtypes T_javafe.ast.GeneratedTags T_java.lang.Object))
(assert (subtypes T_java.lang.Comparable T_java.lang.Object))
(assert (subtypes T_javafe.parser.TagConstants T_javafe.ast.TagConstants))
(assert (= T_javafe.parser.TagConstants (asChild T_javafe.parser.TagConstants T_javafe.ast.TagConstants)))
(assert (subtypes T_java.lang.Number T_java.lang.Object))
(assert (= T_java.lang.Number (asChild T_java.lang.Number T_java.lang.Object)))
(assert (subtypes T_java.lang.Number T_java.io.Serializable))
(assert (subtypes T_java.util.Hashtable T_java.util.Dictionary))
(assert (= T_java.util.Hashtable (asChild T_java.util.Hashtable T_java.util.Dictionary)))
(assert (subtypes T_java.util.Hashtable T_java.util.Map))
(assert (subtypes T_java.util.Hashtable T_java.lang.Cloneable))
(assert (subtypes T_java.util.Hashtable T_java.io.Serializable))
(assert (subtypes T_java.lang.Math T_java.lang.Object))
(assert (= T_java.lang.Math (asChild T_java.lang.Math T_java.lang.Object)))
(assert (forall ((?t Int)) (! (= (subtypes ?t T_java.lang.Math) (= ?t T_java.lang.Math)) :pattern ((subtypes ?t T_java.lang.Math)) )))
(assert (subtypes T_java.util.Dictionary T_java.lang.Object))
(assert (= T_java.util.Dictionary (asChild T_java.util.Dictionary T_java.lang.Object)))
(assert (subtypes T_java.util.Dictionary T_java.util.EscjavaKeyValue))
(assert (subtypes T_java.util.Properties T_java.util.Hashtable))
(assert (= T_java.util.Properties (asChild T_java.util.Properties T_java.util.Hashtable)))
(assert (subtypes T_java.lang.System T_java.lang.Object))
(assert (= T_java.lang.System (asChild T_java.lang.System T_java.lang.Object)))
(assert (forall ((?t Int)) (! (= (subtypes ?t T_java.lang.System) (= ?t T_java.lang.System)) :pattern ((subtypes ?t T_java.lang.System)) )))
(assert (subtypes T_javafe.ast.OperatorTags T_java.lang.Object))
(assert (= T_javafe.ast.OperatorTags (asChild T_javafe.ast.OperatorTags T_java.lang.Object)))
(assert (subtypes T_javafe.ast.OperatorTags T_javafe.ast.GeneratedTags))
(assert (subtypes T_javafe.ast.TagConstants T_javafe.ast.OperatorTags))
(assert (= T_javafe.ast.TagConstants (asChild T_javafe.ast.TagConstants T_javafe.ast.OperatorTags)))
(assert (subtypes T_java.lang.Cloneable T_java.lang.Object))
(assert (subtypes T_java.util.Map T_java.lang.Object))
(assert (subtypes T_java.util.Map T_java.util.EscjavaKeyValue))
(assert (subtypes T_javafe.ast.Identifier T_java.lang.Object))
(assert (= T_javafe.ast.Identifier (asChild T_javafe.ast.Identifier T_java.lang.Object)))
(assert (forall ((?t Int)) (! (= (subtypes ?t T_javafe.ast.Identifier) (= ?t T_javafe.ast.Identifier)) :pattern ((subtypes ?t T_javafe.ast.Identifier)) )))
(assert (subtypes T_java.util.EscjavaKeyValue T_java.lang.Object))
(assert (subtypes T_java.lang.String T_java.lang.Object))
(assert (= T_java.lang.String (asChild T_java.lang.String T_java.lang.Object)))
(assert (forall ((?t Int)) (! (= (subtypes ?t T_java.lang.String) (= ?t T_java.lang.String)) :pattern ((subtypes ?t T_java.lang.String)) )))
(assert (subtypes T_java.lang.String T_java.io.Serializable))
(assert (subtypes T_java.lang.String T_java.lang.Comparable))
(assert (distinct arrayType T_boolean T_char T_byte T_short T_int T_long T_float T_double T_.TYPE T_javafe.util.Assert T_java.io.Serializable T_java.lang.Integer T_javafe.ast.GeneratedTags T_java.lang.Comparable T_javafe.parser.TagConstants T_java.lang.Number T_java.util.Hashtable T_java.lang.Math T_java.util.Dictionary T_java.util.Properties T_java.lang.System T_javafe.ast.OperatorTags T_javafe.ast.TagConstants T_java.lang.Object T_java.lang.Cloneable T_java.util.Map T_javafe.ast.Identifier T_java.util.EscjavaKeyValue T_java.lang.String))
(assert (= Smt.true (is FLOATLIT_6.42.26 T_int)))
(assert (= FLOATLIT_6.42.26 108))
(assert (= Smt.true (is FIRST_KEYWORD_5.51.26 T_int)))
(assert (= FIRST_KEYWORD_5.51.26 133))
(assert (= Smt.true (is HC_71.19 T_int)))
(assert (= HC_71.19 31))
(assert (= Smt.true (is TYPEMODIFIERPRAGMA_5.28.26 T_int)))
(assert (= TYPEMODIFIERPRAGMA_5.28.26 118))
(assert (= Smt.true (is keywordStrings_5.181.30 (array T_java.lang.String))))
(assert (not (= keywordStrings_5.181.30 null)))
(assert (= (typeof keywordStrings_5.181.30) (array T_java.lang.String)))
(assert (= (arrayLength keywordStrings_5.181.30) 51))
(assert (= Smt.true (is LONGLIT_6.40.26 T_int)))
(assert (= LONGLIT_6.40.26 106))
(assert (= Smt.true (is otherCodes_5.202.27 (array T_int))))
(assert (not (= otherCodes_5.202.27 null)))
(assert (= (typeof otherCodes_5.202.27) (array T_int)))
(assert (= (arrayLength otherCodes_5.202.27) 15))
(assert (= Smt.true (is otherStrings_5.193.30 (array T_java.lang.String))))
(assert (not (= otherStrings_5.193.30 null)))
(assert (= (typeof otherStrings_5.193.30) (array T_java.lang.String)))
(assert (= (arrayLength otherStrings_5.193.30) 15))
(assert (= Smt.true (is STMTPRAGMA_5.26.26 T_int)))
(assert (= STMTPRAGMA_5.26.26 116))
(assert (= Smt.true (is noTokens_5.212.27 T_int)))
(assert (= Smt.true (is punctuationStrings_5.134.22 (array T_java.lang.String))))
(assert (not (= punctuationStrings_5.134.22 null)))
(assert (= (typeof punctuationStrings_5.134.22) (array T_java.lang.String)))
(assert (= (arrayLength punctuationStrings_5.134.22) 48))
(assert (= Smt.true (is BOOLEANLIT_6.38.26 T_int)))
(assert (= BOOLEANLIT_6.38.26 104))
(assert (= Smt.true (is punctuationCodes_5.164.19 (array T_int))))
(assert (not (= punctuationCodes_5.164.19 null)))
(assert (= (typeof punctuationCodes_5.164.19) (array T_int)))
(assert (= (arrayLength punctuationCodes_5.164.19) 48))
(assert (= Smt.true (is DOUBLELIT_6.43.26 T_int)))
(assert (= DOUBLELIT_6.43.26 109))
(assert (= Smt.true (is LEXICALPRAGMA_5.24.26 T_int)))
(assert (= LEXICALPRAGMA_5.24.26 114))
(assert (= Smt.true (is CHARLIT_6.41.26 T_int)))
(assert (= CHARLIT_6.41.26 107))
(assert (= Smt.true (is IDENT_6.25.26 T_int)))
(assert (= IDENT_6.25.26 93))
(assert (= Smt.true (is TYPEDECLELEMPRAGMA_5.27.26 T_int)))
(assert (= TYPEDECLELEMPRAGMA_5.27.26 117))
(assert (= Smt.true (is INTLIT_6.39.26 T_int)))
(assert (= INTLIT_6.39.26 105))
(assert (= Smt.true (is STRINGLIT_6.44.26 T_int)))
(assert (= STRINGLIT_6.44.26 110))
(assert (= Smt.true (is chains_44.34 (array (array T_javafe.ast.Identifier)))))
(assert (not (= chains_44.34 null)))
(assert (= (typeof chains_44.34) (array (array T_javafe.ast.Identifier))))
(assert (= (arrayLength chains_44.34) 128))
(assert (= Smt.true (is TABLE_SIZE_25.27 T_int)))
(assert (= TABLE_SIZE_25.27 128))
(assert (= Smt.true (is MODIFIERPRAGMA_5.25.26 T_int)))
(assert (= MODIFIERPRAGMA_5.25.26 115))
(assert (= Smt.true (is LAST_KEYWORD_5.103.26 T_int)))
(assert (= LAST_KEYWORD_5.103.26 183))
(assert (= Smt.true (is INITIAL_CHAIN_SIZE_48.27 T_int)))
(assert (= INITIAL_CHAIN_SIZE_48.27 4))
(assert (= Smt.true (is NULL_5.82.26 T_int)))
(assert (= NULL_5.82.26 163))
(assert (forall ((?n Int)) (! (=> (and (<= 0 ?n) (< ?n 63)) (<= 1 (longShiftL 1 ?n))) :pattern ((longShiftL 1 ?n)) )))
(assert (forall ((?n Int)) (! (=> (and (<= 0 ?n) (< ?n 31)) (<= 1 (intShiftL 1 ?n))) :pattern ((intShiftL 1 ?n)) )))
(assert (forall ((?x Int) (?y Int)) (! (=> (and (<= 0 ?x) (<= 0 ?y)) (<= 0 (integralXor ?x ?y))) :pattern ((integralXor ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (let ((?v_0 (integralDiv ?x ?y))) (=> (and (<= 0 ?x) (< 0 ?y)) (and (<= 0 ?v_0) (<= ?v_0 ?x)))) :pattern ((integralDiv ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (let ((?v_0 (integralOr ?x ?y))) (=> (and (<= 0 ?x) (<= 0 ?y)) (and (<= ?x ?v_0) (<= ?y ?v_0)))) :pattern ((integralOr ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (=> (<= 0 ?y) (<= (integralAnd ?x ?y) ?y)) :pattern ((integralAnd ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (=> (<= 0 ?x) (<= (integralAnd ?x ?y) ?x)) :pattern ((integralAnd ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (=> (or (<= 0 ?x) (<= 0 ?y)) (<= 0 (integralAnd ?x ?y))) :pattern ((integralAnd ?x ?y)) )))
(assert (forall ((?t Int)) (! (let ((?v_0 (classLiteral ?t))) (and (not (= ?v_0 null)) (= Smt.true (is ?v_0 T_java.lang.Class)) (isAllocated ?v_0 alloc))) :pattern ((classLiteral ?t)) )))
(assert (forall ((?x Int) (?e Int)) (= (nonnullelements ?x ?e) (and (not (= ?x null)) (forall ((?i Int)) (=> (and (<= 0 ?i) (< ?i (arrayLength ?x))) (not (= (select1 (select1 ?e ?x) ?i) null))))))))
(assert (forall ((?b Int) (?x Int) (?y Int)) (! (=> (not (= ?b Smt.true)) (= (termConditional ?b ?x ?y) ?y)) :pattern ((termConditional ?b ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (termConditional Smt.true ?x ?y) ?x) :pattern ((termConditional Smt.true ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (refNE ?x ?y) Smt.true) (not (= ?x ?y))) :pattern ((refNE ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (refEQ ?x ?y) Smt.true) (= ?x ?y)) :pattern ((refEQ ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (integralNE ?x ?y) Smt.true) (not (= ?x ?y))) :pattern ((integralNE ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (integralLT ?x ?y) Smt.true) (< ?x ?y)) :pattern ((integralLT ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (integralLE ?x ?y) Smt.true) (<= ?x ?y)) :pattern ((integralLE ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (integralGT ?x ?y) Smt.true) (> ?x ?y)) :pattern ((integralGT ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (integralGE ?x ?y) Smt.true) (>= ?x ?y)) :pattern ((integralGE ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (let ((?v_0 (stringCat ?x ?y))) (and (not (= ?v_0 null)) (subtypes (typeof ?v_0) T_java.lang.String))) :pattern ((stringCat ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (integralEQ ?x ?y) Smt.true) (= ?x ?y)) :pattern ((integralEQ ?x ?y)) )))
(assert (forall ((?a Int) (?b Int)) (= (boolOr ?a ?b) (or (= ?a Smt.true) (= ?b Smt.true)))))
(assert (forall ((?a Int)) (= (boolNot ?a) (not (= ?a Smt.true)))))
(assert (forall ((?a Int) (?b Int)) (= (boolNE ?a ?b) (not (= (= ?a Smt.true) (= ?b Smt.true))))))
(assert (forall ((?a Int) (?b Int)) (= (boolImplies ?a ?b) (=> (= ?a Smt.true) (= ?b Smt.true)))))
(assert (forall ((?a Int) (?b Int)) (= (boolEq ?a ?b) (= (= ?a Smt.true) (= ?b Smt.true)))))
(assert (forall ((?a Int) (?b Int)) (= (boolAnd ?a ?b) (and (= ?a Smt.true) (= ?b Smt.true)))))
(assert (forall ((?x Int) (?y Int)) (let ((?v_0 (multiply ?x ?y))) (= (multiply (integralDiv ?v_0 ?y) ?y) ?v_0))))
(assert (forall ((?i Int) (?j Int)) (= (integralMod (+ ?j ?i) ?j) (integralMod ?i ?j))))
(assert (forall ((?i Int) (?j Int)) (= (integralMod (+ ?i ?j) ?j) (integralMod ?i ?j))))
(assert (forall ((?i Int) (?j Int)) (! (let ((?v_0 (integralMod ?i ?j))) (=> (< ?j 0) (and (< ?j ?v_0) (<= ?v_0 0)))) :pattern ((integralMod ?i ?j)) )))
(assert (forall ((?i Int) (?j Int)) (! (let ((?v_0 (integralMod ?i ?j))) (=> (< 0 ?j) (and (<= 0 ?v_0) (< ?v_0 ?j)))) :pattern ((integralMod ?i ?j)) )))
(assert (forall ((?i Int) (?j Int)) (! (= (+ (multiply (integralDiv ?i ?j) ?j) (integralMod ?i ?j)) ?i) :pattern ((integralMod ?i ?j))  :pattern ((integralDiv ?i ?j)) )))
(assert (forall ((?s Int)) (! (=> (= Smt.true (isNewArray ?s)) (subtypes (typeof ?s) arrayType)) :pattern ((isNewArray ?s)) )))
(assert (forall ((?t Int)) (! (subtypes (array ?t) arrayType) :pattern ((array ?t)) )))
(assert (= arrayType (asChild arrayType T_java.lang.Object)))
(assert (forall ((?a Int) (?a0 Int) (?b0 Int) (?e Int) (?n Int) (?T Int) (?v Int)) (! (= (arrayFresh ?a ?a0 ?b0 ?e (arrayShapeOne ?n) ?T ?v) (and (<= ?a0 (vAllocTime ?a)) (isAllocated ?a ?b0) (not (= ?a null)) (= (typeof ?a) ?T) (= (arrayLength ?a) ?n) (forall ((?i Int)) (! (= (select1 (select1 ?e ?a) ?i) ?v) :pattern ((select1 (select1 ?e ?a) ?i)) )))) :pattern ((arrayFresh ?a ?a0 ?b0 ?e (arrayShapeOne ?n) ?T ?v)) )))
(assert (forall ((?a Int) (?a0 Int) (?b0 Int) (?e Int) (?n Int) (?s Int) (?T Int) (?v Int)) (! (= (arrayFresh ?a ?a0 ?b0 ?e (arrayShapeMore ?n ?s) ?T ?v) (and (<= ?a0 (vAllocTime ?a)) (isAllocated ?a ?b0) (not (= ?a null)) (= (typeof ?a) ?T) (= (arrayLength ?a) ?n) (forall ((?i Int)) (! (let ((?v_0 (select1 (select1 ?e ?a) ?i))) (and (arrayFresh ?v_0 ?a0 ?b0 ?e ?s (elemtype ?T) ?v) (= (arrayParent ?v_0) ?a) (= (arrayPosition ?v_0) ?i))) :pattern ((select1 (select1 ?e ?a) ?i)) )))) :pattern ((arrayFresh ?a ?a0 ?b0 ?e (arrayShapeMore ?n ?s) ?T ?v)) )))
(assert (forall ((?a Int)) (! (let ((?v_0 (arrayLength ?a))) (and (<= 0 ?v_0) (= Smt.true (is ?v_0 T_int)))) :pattern ((arrayLength ?a)) )))
(assert (forall ((?x Int)) (! (=> (subtypes (typeof ?x) T_java.lang.Object) (lockLE null ?x)) :pattern ((lockLE null ?x))  :pattern ((lockLT null ?x))  :pattern ((lockLE ?x null))  :pattern ((lockLT ?x null)) )))
(assert (forall ((?S Int) (?mu Int)) (let ((?v_0 (asLockSet ?S))) (=> (= (select1 ?v_0 ?mu) Smt.true) (lockLE ?mu (max ?v_0))))))
(assert (forall ((?x Int) (?y Int)) (= (lockLT ?x ?y) (< ?x ?y))))
(assert (forall ((?x Int) (?y Int)) (= (lockLE ?x ?y) (<= ?x ?y))))
(assert (forall ((?S Int)) (! (= (select1 (asLockSet ?S) null) Smt.true) :pattern ((asLockSet ?S)) )))
(assert (forall ((?S Int)) (let ((?v_0 (asLockSet ?S))) (= (select1 ?v_0 (max ?v_0)) Smt.true))))
(assert (forall ((?a Int) (?e Int) (?i Int) (?a0 Int)) (! (=> (and (< (eClosedTime ?e) ?a0) (isAllocated ?a ?a0)) (isAllocated (select1 (select1 ?e ?a) ?i) ?a0)) :pattern ((isAllocated (select1 (select1 ?e ?a) ?i) ?a0)) )))
(assert (forall ((?x Int) (?f Int) (?a0 Int)) (! (=> (and (< (fClosedTime ?f) ?a0) (isAllocated ?x ?a0)) (isAllocated (select1 ?f ?x) ?a0)) :pattern ((isAllocated (select1 ?f ?x) ?a0)) )))
(assert (forall ((?x Int) (?a0 Int)) (= (isAllocated ?x ?a0) (< (vAllocTime ?x) ?a0))))
(assert (forall ((?e Int) (?a Int) (?i Int)) (! (= Smt.true (is (select1 (select1 (asElems ?e) ?a) ?i) (elemtype (typeof ?a)))) :pattern ((select1 (select1 (asElems ?e) ?a) ?i)) )))
(assert (forall ((?f Int) (?t Int) (?x Int)) (! (= Smt.true (is (select1 (asField ?f ?t) ?x) ?t)) :pattern ((select1 (asField ?f ?t) ?x)) )))
(assert (forall ((?x Int) (?t Int)) (! (=> (subtypes ?t T_java.lang.Object) (= (= Smt.true (is ?x ?t)) (or (= ?x null) (subtypes (typeof ?x) ?t)))) :pattern ((subtypes ?t T_java.lang.Object) (is ?x ?t)) )))
(assert (< intLast longLast))
(assert (< 1000000 intLast))
(assert (< intFirst (- 1000000)))
(assert (< longFirst intFirst))
(assert (forall ((?x Int)) (! (= (= Smt.true (is ?x T_long)) (and (<= longFirst ?x) (<= ?x longLast))) :pattern ((is ?x T_long)) )))
(assert (forall ((?x Int)) (! (= (= Smt.true (is ?x T_int)) (and (<= intFirst ?x) (<= ?x intLast))) :pattern ((is ?x T_int)) )))
(assert (forall ((?x Int)) (= (= Smt.true (is ?x T_short)) (and (<= (- 32768) ?x) (<= ?x 32767)))))
(assert (forall ((?x Int)) (= (= Smt.true (is ?x T_byte)) (and (<= (- 128) ?x) (<= ?x 127)))))
(assert (forall ((?x Int)) (! (= (= Smt.true (is ?x T_char)) (and (<= 0 ?x) (<= ?x 65535))) :pattern ((is ?x T_char)) )))
(assert (distinct bool_false Smt.true))
(assert (forall ((?x Int) (?t Int)) (! (=> (= Smt.true (is ?x ?t)) (= (cast ?x ?t) ?x)) :pattern ((cast ?x ?t)) )))
(assert (forall ((?x Int) (?t Int)) (! (= Smt.true (is (cast ?x ?t) ?t)) :pattern ((cast ?x ?t)) )))
(assert (forall ((?t0 Int) (?t1 Int)) (! (let ((?v_0 (elemtype ?t0))) (= (subtypes ?t0 (array ?t1)) (and (= ?t0 (array ?v_0)) (subtypes ?v_0 ?t1)))) :pattern ((subtypes ?t0 (array ?t1))) )))
(assert (forall ((?t Int)) (! (= (elemtype (array ?t)) ?t) :pattern ((elemtype (array ?t))) )))
(assert (forall ((?t Int)) (! (subtypes (array ?t) T_java.lang.Cloneable) :pattern ((array ?t)) )))
(assert (subtypes T_java.lang.Cloneable T_java.lang.Object))
(assert (forall ((?t0 Int) (?t1 Int) (?t2 Int)) (let ((?v_0 (asChild ?t1 ?t2))) (=> (subtypes ?t0 ?v_0) (= (classDown ?t2 ?t0) ?v_0)))))
(assert (forall ((?t Int)) (! (=> (subtypes T_double ?t) (= ?t T_double)) :pattern ((subtypes T_double ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_float ?t) (= ?t T_float)) :pattern ((subtypes T_float ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_long ?t) (= ?t T_long)) :pattern ((subtypes T_long ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_int ?t) (= ?t T_int)) :pattern ((subtypes T_int ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_short ?t) (= ?t T_short)) :pattern ((subtypes T_short ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_byte ?t) (= ?t T_byte)) :pattern ((subtypes T_byte ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_char ?t) (= ?t T_char)) :pattern ((subtypes T_char ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes T_boolean ?t) (= ?t T_boolean)) :pattern ((subtypes T_boolean ?t)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_double) (= ?t T_double)) :pattern ((subtypes ?t T_double)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_float) (= ?t T_float)) :pattern ((subtypes ?t T_float)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_long) (= ?t T_long)) :pattern ((subtypes ?t T_long)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_int) (= ?t T_int)) :pattern ((subtypes ?t T_int)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_short) (= ?t T_short)) :pattern ((subtypes ?t T_short)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_byte) (= ?t T_byte)) :pattern ((subtypes ?t T_byte)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_char) (= ?t T_char)) :pattern ((subtypes ?t T_char)) )))
(assert (forall ((?t Int)) (! (=> (subtypes ?t T_boolean) (= ?t T_boolean)) :pattern ((subtypes ?t T_boolean)) )))
(assert (forall ((?t0 Int) (?t1 Int)) (! (=> (and (subtypes ?t0 ?t1) (subtypes ?t1 ?t0)) (= ?t0 ?t1)) :pattern ((subtypes ?t0 ?t1) (subtypes ?t1 ?t0)) )))
(assert (forall ((?t0 Int) (?t1 Int) (?t2 Int)) (! (=> (and (subtypes ?t0 ?t1) (subtypes ?t1 ?t2)) (subtypes ?t0 ?t2)) :pattern ((subtypes ?t0 ?t1) (subtypes ?t1 ?t2)) )))
(assert (subtypes T_java.lang.Object T_java.lang.Object))
(assert (forall ((?t Int)) (! (subtypes ?t ?t) :pattern ((subtypes ?t ?t)) )))
(assert (forall ((?m Int) (?i Int) (?j Int) (?x Int)) (=> (not (= ?i ?j)) (= (select1 (store1 ?m ?i ?x) ?j) (select1 ?m ?j)))))
(assert (forall ((?m Int) (?i Int) (?x Int)) (= (select1 (store1 ?m ?i ?x) ?i) ?x)))
(assert (let ((?v_0 (array T_java.lang.String)) (?v_1 (array T_int)) (?v_2 (array T_char)) (?v_3 (not (= text_170.25 null))) (?v_5 (arrayLength text_170.25)) (?v_6 (= 0 hashcode_loopold_171.8)) (?v_7 (= EC EC_loopold)) (?v_8 (= 0 i_loopold_172.12)) (?v_9 (= Smt.true Smt.true)) (?v_10 (< 0 textlen_170.35)) (?v_4 (<= 0 0))) (let ((?v_11 (< 0 ?v_5))) (let ((?v_12 (or (and ?v_9 (not ?v_10) (= hashcode_171.8 0)) (and ?v_9 ?v_10 ?v_3 ?v_4 ?v_11 (= hashcode_172.4_0_173.6 (+ (* HC_71.19 0) (select1 (select1 elems text_170.25) 0))) (= i_172.4_0_172.32 (+ 0 1)) ?v_9 (not (< i_172.4_0_172.32 textlen_170.35)) (= hashcode_171.8 hashcode_172.4_0_173.6)))) (?v_13 (= L_172.4 L_172.4)) (?v_14 (= EC_171.4 ecReturn))) (not (=> (distinct ecReturn L_172.4) (=> (and (= FLOATLIT_pre_6.42.26 FLOATLIT_6.42.26) (= Smt.true (is FLOATLIT_6.42.26 T_int)) (= FIRST_KEYWORD_pre_5.51.26 FIRST_KEYWORD_5.51.26) (= Smt.true (is FIRST_KEYWORD_5.51.26 T_int)) (= HC_pre_71.19 HC_71.19) (= Smt.true (is HC_71.19 T_int)) (= TYPEMODIFIERPRAGMA_pre_5.28.26 TYPEMODIFIERPRAGMA_5.28.26) (= Smt.true (is TYPEMODIFIERPRAGMA_5.28.26 T_int)) (= keywordStrings_pre_5.181.30 keywordStrings_5.181.30) (= Smt.true (is keywordStrings_5.181.30 ?v_0)) (isAllocated keywordStrings_5.181.30 alloc) (= count_pre_15.99.33 count_15.99.33) (= count_15.99.33 (asField count_15.99.33 T_int)) (= LONGLIT_pre_6.40.26 LONGLIT_6.40.26) (= Smt.true (is LONGLIT_6.40.26 T_int)) (= otherCodes_pre_5.202.27 otherCodes_5.202.27) (= Smt.true (is otherCodes_5.202.27 ?v_1)) (isAllocated otherCodes_5.202.27 alloc) (= value_pre_15.91.31 value_15.91.31) (= value_15.91.31 (asField value_15.91.31 ?v_2)) (< (fClosedTime value_15.91.31) alloc) (forall ((?s Int)) (=> (not (= ?s null)) (not (= (select1 value_15.91.31 ?s) null)))) (= otherStrings_pre_5.193.30 otherStrings_5.193.30) (= Smt.true (is otherStrings_5.193.30 ?v_0)) (isAllocated otherStrings_5.193.30 alloc) (= STMTPRAGMA_pre_5.26.26 STMTPRAGMA_5.26.26) (= Smt.true (is STMTPRAGMA_5.26.26 T_int)) (= noTokens_pre_5.212.27 noTokens_5.212.27) (= Smt.true (is noTokens_5.212.27 T_int)) (= punctuationStrings_pre_5.134.22 punctuationStrings_5.134.22) (= Smt.true (is punctuationStrings_5.134.22 ?v_0)) (isAllocated punctuationStrings_5.134.22 alloc) (= BOOLEANLIT_pre_6.38.26 BOOLEANLIT_6.38.26) (= Smt.true (is BOOLEANLIT_6.38.26 T_int)) (= punctuationCodes_pre_5.164.19 punctuationCodes_5.164.19) (= Smt.true (is punctuationCodes_5.164.19 ?v_1)) (isAllocated punctuationCodes_5.164.19 alloc) (= DOUBLELIT_pre_6.43.26 DOUBLELIT_6.43.26) (= Smt.true (is DOUBLELIT_6.43.26 T_int)) (= tokenType_pre_90.8 tokenType_90.8) (= tokenType_90.8 (asField tokenType_90.8 T_int)) (= LEXICALPRAGMA_pre_5.24.26 LEXICALPRAGMA_5.24.26) (= Smt.true (is LEXICALPRAGMA_5.24.26 T_int)) (= owner_pre_4.35.28 owner_4.35.28) (= owner_4.35.28 (asField owner_4.35.28 T_java.lang.Object)) (< (fClosedTime owner_4.35.28) alloc) (= CHARLIT_pre_6.41.26 CHARLIT_6.41.26) (= Smt.true (is CHARLIT_6.41.26 T_int)) (= equiv_pre_61.17 equiv_61.17) (= equiv_61.17 (asField equiv_61.17 T_java.lang.String)) (< (fClosedTime equiv_61.17) alloc) (= IDENT_pre_6.25.26 IDENT_6.25.26) (= Smt.true (is IDENT_6.25.26 T_int)) (= TYPEDECLELEMPRAGMA_pre_5.27.26 TYPEDECLELEMPRAGMA_5.27.26) (= Smt.true (is TYPEDECLELEMPRAGMA_5.27.26 T_int)) (= INTLIT_pre_6.39.26 INTLIT_6.39.26) (= Smt.true (is INTLIT_6.39.26 T_int)) (= STRINGLIT_pre_6.44.26 STRINGLIT_6.44.26) (= Smt.true (is STRINGLIT_6.44.26 T_int)) (= chains_pre_44.34 chains_44.34) (= Smt.true (is chains_44.34 (array (array T_javafe.ast.Identifier)))) (isAllocated chains_44.34 alloc) (= chars_pre_56.17 chars_56.17) (= chars_56.17 (asField chars_56.17 ?v_2)) (< (fClosedTime chars_56.17) alloc) (= TABLE_SIZE_pre_25.27 TABLE_SIZE_25.27) (= Smt.true (is TABLE_SIZE_25.27 T_int)) (= MODIFIERPRAGMA_pre_5.25.26 MODIFIERPRAGMA_5.25.26) (= Smt.true (is MODIFIERPRAGMA_5.25.26 T_int)) (= LAST_KEYWORD_pre_5.103.26 LAST_KEYWORD_5.103.26) (= Smt.true (is LAST_KEYWORD_5.103.26 T_int)) (= INITIAL_CHAIN_SIZE_pre_48.27 INITIAL_CHAIN_SIZE_48.27) (= Smt.true (is INITIAL_CHAIN_SIZE_48.27 T_int)) (= NULL_pre_5.82.26 NULL_5.82.26) (= Smt.true (is NULL_5.82.26 T_int)) (= elems_pre elems) (= elems (asElems elems)) (< (eClosedTime elems) alloc) (= LS (asLockSet LS)) (= alloc_pre alloc)) (not (and (= Smt.true (is text_170.25 ?v_2)) (isAllocated text_170.25 alloc) (= Smt.true (is textlen_170.35 T_int)) ?v_3 (<= 0 textlen_170.35) (<= textlen_170.35 ?v_5) (or (and ?v_6 ?v_7 ?v_8 ?v_9 ?v_10 (or (not ?v_3) (and ?v_3 (or (not ?v_4) (and ?v_4 (not ?v_11)))))) (and (or (and ?v_6 ?v_7 ?v_8 ?v_12 (not ?v_13) (= EC_171.4 L_172.4)) (and ?v_6 ?v_7 ?v_8 ?v_12 ?v_13 (= hashcode_171.8_1_ hashcode_171.8) (= EC_1_ L_172.4) ?v_9 ?v_14)) (not ?v_14))))))))))))
(check-sat)
(exit)
