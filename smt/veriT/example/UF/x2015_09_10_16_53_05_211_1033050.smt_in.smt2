(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort Ref$ 0)
(declare-sort Ref_set$ 0)
(declare-sort Dag_dag_fun$ 0)
(declare-sort Ref_ref_fun$ 0)
(declare-sort Ref_set_set$ 0)
(declare-sort Dag_bool_fun$ 0)
(declare-sort Ref_bool_fun$ 0)
(declare-sort Dag_ref_set_fun$ 0)
(declare-sort Ref_set_dag_fun$ 0)
(declare-sort Ref_set_bool_fun$ 0)
(declare-sort Dag_ref_set_set_fun$ 0)
(declare-sort Ref_ref_ref_fun_fun$ 0)
(declare-sort Ref_set_ref_set_fun$ 0)
(declare-sort Ref_set_set_dag_fun$ 0)
(declare-sort Dag_ref_bool_fun_fun$ 0)
(declare-sort Ref_bool_fun_dag_fun$ 0)
(declare-sort Ref_set_ref_set_set_fun$ 0)
(declare-sort Ref_set_ref_bool_fun_fun$ 0)
(declare-sort Ref_ref_fun_ref_ref_fun_fun$ 0)
(declare-sort Ref_ref_ref_ref_fun_fun_fun$ 0)
(declare-sort Ref_set_set_ref_set_set_fun$ 0)
(declare-sort Ref_set_set_ref_bool_fun_fun$ 0)
(declare-sort Ref_ref_ref_fun_ref_ref_fun_fun_fun$ 0)
(declare-sort Dag$ 0)
(declare-fun tip$ () Dag$)
(declare-fun select$ (Dag$) Dag$)
(declare-fun selecta$ (Dag$) Ref$)
(declare-fun selectb$ (Dag$) Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$) Dag$)
(declare-fun l$ () Ref_ref_fun$)
(declare-fun p$ () Ref$)
(declare-fun r$ () Ref_ref_fun$)
(declare-fun uu$ (Ref_set_set$) Ref_set_bool_fun$)
(declare-fun bot$ () Ref_set$)
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$) Dag_bool_fun$)
(declare-fun uua$ (Ref_set$) Ref_bool_fun$)
(declare-fun bot$a () Ref_set_set$)
(declare-fun bot$b () Ref_set_bool_fun$)
(declare-fun bot$c () Bool)
(declare-fun bot$d () Ref_bool_fun$)
(declare-fun dag$a (Dag$) Bool)
(declare-fun less$ (Dag$ Dag$) Bool)
(declare-fun null$ () Ref$)
(declare-fun swap$ (Ref$) Ref_ref_ref_fun_ref_ref_fun_fun_fun$)
(declare-fun less$a (Bool Bool) Bool)
(declare-fun less$b (Ref_set_bool_fun$ Ref_set_bool_fun$) Bool)
(declare-fun less$c (Ref_set_set$ Ref_set_set$) Bool)
(declare-fun less$d (Ref_bool_fun$ Ref_bool_fun$) Bool)
(declare-fun less$e (Ref_set$) Ref_set_bool_fun$)
(declare-fun member$ (Ref$) Ref_set_bool_fun$)
(declare-fun set_of$ (Dag$) Ref_set$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun collect$ (Ref_set_bool_fun$) Ref_set_set$)
(declare-fun fun_app$ (Ref_bool_fun$ Ref$) Bool)
(declare-fun fun_upd$ (Ref_ref_fun$) Ref_ref_ref_ref_fun_fun_fun$)
(declare-fun less_eq$ (Ref_set$) Ref_set_bool_fun$)
(declare-fun member$a (Ref_set$ Ref_set_set$) Bool)
(declare-fun antimono$ (Ref_set_ref_set_fun$) Bool)
(declare-fun collect$a (Ref_bool_fun$) Ref_set$)
(declare-fun fun_app$a (Ref_set_bool_fun$ Ref_set$) Bool)
(declare-fun fun_app$b (Dag_bool_fun$ Dag$) Bool)
(declare-fun fun_app$c (Ref_ref_ref_fun_fun$ Ref$) Ref_ref_fun$)
(declare-fun fun_app$d (Ref_ref_ref_ref_fun_fun_fun$ Ref$) Ref_ref_ref_fun_fun$)
(declare-fun fun_app$e (Ref_ref_fun$ Ref$) Ref$)
(declare-fun fun_app$f (Ref_ref_fun_ref_ref_fun_fun$ Ref_ref_fun$) Ref_ref_fun$)
(declare-fun fun_app$g (Ref_ref_ref_fun_ref_ref_fun_fun_fun$ Ref$) Ref_ref_fun_ref_ref_fun_fun$)
(declare-fun fun_app$h (Dag_dag_fun$ Dag$) Dag$)
(declare-fun fun_app$i (Dag_ref_set_fun$ Dag$) Ref_set$)
(declare-fun fun_app$j (Ref_set_dag_fun$ Ref_set$) Dag$)
(declare-fun fun_app$k (Ref_set_ref_set_fun$ Ref_set$) Ref_set$)
(declare-fun fun_app$l (Dag_ref_bool_fun_fun$ Dag$) Ref_bool_fun$)
(declare-fun fun_app$m (Dag_ref_set_set_fun$ Dag$) Ref_set_set$)
(declare-fun fun_app$n (Ref_bool_fun_dag_fun$ Ref_bool_fun$) Dag$)
(declare-fun fun_app$o (Ref_set_set_dag_fun$ Ref_set_set$) Dag$)
(declare-fun fun_app$p (Ref_set_ref_bool_fun_fun$ Ref_set$) Ref_bool_fun$)
(declare-fun fun_app$q (Ref_set_ref_set_set_fun$ Ref_set$) Ref_set_set$)
(declare-fun fun_app$r (Ref_set_set_ref_bool_fun_fun$ Ref_set_set$) Ref_bool_fun$)
(declare-fun fun_app$s (Ref_set_set_ref_set_set_fun$ Ref_set_set$) Ref_set_set$)
(declare-fun is_empty$ (Ref_set$) Bool)
(declare-fun less_eq$a (Dag$ Dag$) Bool)
(declare-fun less_eq$b (Ref_set_set$ Ref_set_set$) Bool)
(declare-fun less_eq$c (Ref_bool_fun$ Ref_bool_fun$) Bool)
(declare-fun antimono$a (Ref_set_dag_fun$) Bool)
(declare-fun antimono$b (Dag_ref_set_fun$) Bool)
(declare-fun antimono$c (Dag_dag_fun$) Bool)
(declare-fun chain_subset$ (Ref_set_set$) Bool)
(assert (forall ((?v0 Ref_set$) (?v1 Ref$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (fun_app$a (member$ ?v1) ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uu$ ?v0) ?v1)))))
(assert (not (not (fun_app$b (dag$ p$ (fun_app$c (fun_app$d (fun_upd$ l$) p$) p$) r$) tip$))))
(assert (not (= p$ null$)))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref_ref_fun$) (?v2 Dag$)) (= (fun_app$b (dag$ null$ ?v0 ?v1) ?v2) (= ?v2 tip$)) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$)) (! (= (fun_app$b (dag$ ?v0 ?v1 ?v2) tip$) (= ?v0 null$)) :pattern ((dag$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref$) (?v3 Ref$)) (! (= (fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v3) (ite (= ?v3 ?v1) ?v2 (fun_app$e ?v0 ?v3))) :pattern ((fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref$) (?v3 Ref$)) (= (fun_app$c (fun_app$d (fun_upd$ (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2)) ?v1) ?v3) (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v3)) ))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$)) (= (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) (fun_app$e ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 Ref$) (?v1 Dag$) (?v2 Ref$) (?v3 Ref_ref_fun$) (?v4 Ref$) (?v5 Ref_ref_fun$)) (=> (not (fun_app$a (member$ ?v0) (set_of$ ?v1))) (= (fun_app$b (dag$ ?v2 (fun_app$c (fun_app$d (fun_upd$ ?v3) ?v0) ?v4) ?v5) ?v1) (fun_app$b (dag$ ?v2 ?v3 ?v5) ?v1))) ))
(assert (forall ((?v0 Ref$) (?v1 Dag$) (?v2 Ref$) (?v3 Ref_ref_fun$) (?v4 Ref_ref_fun$) (?v5 Ref$)) (=> (not (fun_app$a (member$ ?v0) (set_of$ ?v1))) (= (fun_app$b (dag$ ?v2 ?v3 (fun_app$c (fun_app$d (fun_upd$ ?v4) ?v0) ?v5)) ?v1) (fun_app$b (dag$ ?v2 ?v3 ?v4) ?v1))) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (fun_app$b (dag$ ?v0 ?v1 ?v2) ?v3) (not (fun_app$a (member$ null$) (set_of$ ?v3)))) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (not (= ?v0 null$)) (= (fun_app$b (dag$ ?v0 ?v1 ?v2) ?v3) (exists ((?v4 Dag$) (?v5 Dag$)) (and (= ?v3 (node$ ?v4 ?v0 ?v5)) (and (fun_app$b (dag$ (fun_app$e ?v1 ?v0) ?v1 ?v2) ?v4) (fun_app$b (dag$ (fun_app$e ?v2 ?v0) ?v1 ?v2) ?v5))) ))) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (! (= (fun_app$b (dag$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v4) (and (not (= ?v0 null$)) (and (fun_app$b (dag$ (fun_app$e ?v1 ?v0) ?v1 ?v2) ?v3) (fun_app$b (dag$ (fun_app$e ?v2 ?v0) ?v1 ?v2) ?v5))))) :pattern ((fun_app$b (dag$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref$)) (= (= (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v0) (= (fun_app$e ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref$)) (! (= (fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v1) ?v2) :pattern ((fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref$) (?v3 Ref$)) (! (= (fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v3) (ite (= ?v3 ?v1) ?v2 (fun_app$e ?v0 ?v3))) :pattern ((fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v3)))))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$)) (not (= tip$ (node$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 Dag$)) (=> (and (=> (= ?v0 tip$) false) (forall ((?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false) )) false) ))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$) (?v3 Ref$) (?v4 Ref$)) (=> (not (= ?v0 ?v1)) (= (fun_app$c (fun_app$d (fun_upd$ (fun_app$c (fun_app$d (fun_upd$ ?v2) ?v0) ?v3)) ?v1) ?v4) (fun_app$c (fun_app$d (fun_upd$ (fun_app$c (fun_app$d (fun_upd$ ?v2) ?v1) ?v4)) ?v0) ?v3))) ))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$) (?v3 Ref$)) (! (=> (not (= ?v0 ?v1)) (= (fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v2) ?v1) ?v3) ?v0) (fun_app$e ?v2 ?v0))) :pattern ((fun_app$e (fun_app$c (fun_app$d (fun_upd$ ?v2) ?v1) ?v3) ?v0)))))
(assert (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref$)) (! (=> (= (fun_app$e ?v0 ?v1) ?v2) (= (fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2) ?v0)) :pattern ((fun_app$c (fun_app$d (fun_upd$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$)) (! (= (dag$a (node$ ?v0 ?v1 ?v2)) (and (not (fun_app$a (member$ ?v1) (set_of$ ?v0))) (and (not (fun_app$a (member$ ?v1) (set_of$ ?v2))) (and (dag$a ?v0) (dag$a ?v2))))) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 Ref$) (?v1 Dag$)) (= (fun_app$a (member$ ?v0) (set_of$ ?v1)) (exists ((?v2 Dag$) (?v3 Dag$)) (or (= ?v1 (node$ ?v2 ?v0 ?v3)) (subdag$ ?v1 (node$ ?v2 ?v0 ?v3))) )) ))
(assert (= (dag$a tip$) true))
(assert (= (set_of$ tip$) bot$))
(assert (forall ((?v0 Dag$)) (! (= (subdag$ tip$ ?v0) false) :pattern ((subdag$ tip$ ?v0)))))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$)) (! (= (subdag$ (node$ ?v0 ?v1 ?v2) ?v3) (or (= ?v3 ?v0) (or (= ?v3 ?v2) (or (subdag$ ?v0 ?v3) (subdag$ ?v2 ?v3))))) :pattern ((subdag$ (node$ ?v0 ?v1 ?v2) ?v3)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (subdag$ ?v0 (node$ ?v1 ?v2 ?v3)) (and (subdag$ ?v0 ?v1) (subdag$ ?v0 ?v3))) ))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$)) (! (= (fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2) (fun_app$c (fun_app$d (fun_upd$ (fun_app$c (fun_app$d (fun_upd$ ?v2) ?v0) (fun_app$e ?v2 ?v1))) ?v1) (fun_app$e ?v2 ?v0))) :pattern ((fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Dag$)) (not (less$ ?v0 tip$)) ))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$)) (! (= (fun_app$e (fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2) ?v0) (fun_app$e ?v2 ?v1)) :pattern ((fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$)) (! (= (fun_app$e (fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2) ?v1) (fun_app$e ?v2 ?v0)) :pattern ((fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$)) (= (fun_app$f (fun_app$g (swap$ ?v0) ?v1) (fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2)) ?v2) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_ref_fun$)) (! (= (fun_app$f (fun_app$g (swap$ ?v0) ?v0) ?v1) ?v1) :pattern ((fun_app$f (fun_app$g (swap$ ?v0) ?v0) ?v1)))))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref$) (?v3 Ref_ref_fun$)) (! (=> (and (not (= ?v0 ?v1)) (not (= ?v0 ?v2))) (= (fun_app$e (fun_app$f (fun_app$g (swap$ ?v1) ?v2) ?v3) ?v0) (fun_app$e ?v3 ?v0))) :pattern ((fun_app$e (fun_app$f (fun_app$g (swap$ ?v1) ?v2) ?v3) ?v0)))))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref_ref_fun$)) (= (fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$g (swap$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 Ref$) (?v1 Ref$) (?v2 Ref$) (?v3 Ref_ref_fun$)) (=> (and (not (= ?v0 ?v1)) (not (= ?v2 ?v1))) (= (fun_app$f (fun_app$g (swap$ ?v0) ?v2) (fun_app$f (fun_app$g (swap$ ?v2) ?v1) (fun_app$f (fun_app$g (swap$ ?v0) ?v2) ?v3))) (fun_app$f (fun_app$g (swap$ ?v0) ?v1) ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (dag$a ?v0) (less$ ?v1 ?v0)) (dag$a ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (subdag$ ?v0 ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v0)) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v2)) (subdag$ ?v0 ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (subdag$ ?v1 ?v0)) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$)) (=> (less$ (node$ ?v0 ?v1 ?v2) ?v3) (and (less$ ?v0 ?v3) (less$ ?v2 ?v3))) ))
(assert (forall ((?v0 Ref_set_bool_fun$) (?v1 Ref_set_bool_fun$)) (=> (forall ((?v2 Ref_set$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$)) (=> (forall ((?v2 Ref$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 Ref_set_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 Ref_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_bool_fun$)) (= (fun_app$a (member$ ?v0) (collect$a ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (! (= (less$ ?v0 (node$ ?v1 ?v2 ?v3)) (or (= ?v0 ?v1) (or (= ?v0 ?v3) (or (less$ ?v0 ?v1) (less$ ?v0 ?v3))))) :pattern ((less$ ?v0 (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 Ref_set$)) (= (member$a ?v0 bot$a) false) ))
(assert (forall ((?v0 Ref$)) (= (fun_app$a (member$ ?v0) bot$) false) ))
(assert (forall ((?v0 Ref_set_bool_fun$)) (= (= bot$a (collect$ ?v0)) (forall ((?v1 Ref_set$)) (not (fun_app$a ?v0 ?v1)) )) ))
(assert (forall ((?v0 Ref_bool_fun$)) (= (= bot$ (collect$a ?v0)) (forall ((?v1 Ref$)) (not (fun_app$ ?v0 ?v1)) )) ))
(assert (forall ((?v0 Ref_set_set$)) (= (forall ((?v1 Ref_set$)) (not (member$a ?v1 ?v0)) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 Ref_set$)) (= (forall ((?v1 Ref$)) (not (fun_app$a (member$ ?v1) ?v0)) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 Ref_set_bool_fun$)) (= (= (collect$ ?v0) bot$a) (forall ((?v1 Ref_set$)) (not (fun_app$a ?v0 ?v1)) )) ))
(assert (forall ((?v0 Ref_bool_fun$)) (= (= (collect$a ?v0) bot$) (forall ((?v1 Ref$)) (not (fun_app$ ?v0 ?v1)) )) ))
(assert (forall ((?v0 Ref_set$)) (! (= (fun_app$a bot$b ?v0) bot$c) :pattern ((fun_app$a bot$b ?v0)))))
(assert (forall ((?v0 Ref$)) (! (= (fun_app$ bot$d ?v0) bot$c) :pattern ((fun_app$ bot$d ?v0)))))
(assert (forall ((?v0 Bool)) (not (less$a ?v0 bot$c)) ))
(assert (forall ((?v0 Ref_set_bool_fun$)) (not (less$b ?v0 bot$b)) ))
(assert (forall ((?v0 Ref_set_set$)) (not (less$c ?v0 bot$a)) ))
(assert (forall ((?v0 Ref_bool_fun$)) (not (less$d ?v0 bot$d)) ))
(assert (forall ((?v0 Ref_set$)) (not (fun_app$a (less$e ?v0) bot$)) ))
(assert (forall ((?v0 Bool)) (= (not (= ?v0 bot$c)) (less$a bot$c ?v0)) ))
(assert (forall ((?v0 Ref_set_bool_fun$)) (= (not (= ?v0 bot$b)) (less$b bot$b ?v0)) ))
(assert (forall ((?v0 Ref_set_set$)) (= (not (= ?v0 bot$a)) (less$c bot$a ?v0)) ))
(assert (forall ((?v0 Ref_bool_fun$)) (= (not (= ?v0 bot$d)) (less$d bot$d ?v0)) ))
(assert (forall ((?v0 Ref_set$)) (= (not (= ?v0 bot$)) (fun_app$a (less$e bot$) ?v0)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less$ ?v0 ?v1) (dag$a ?v1)) (fun_app$a (less$e (set_of$ ?v0)) (set_of$ ?v1))) ))
(assert (forall ((?v0 Ref_set_set$)) (not (less$c ?v0 bot$a)) ))
(assert (forall ((?v0 Ref_set$)) (not (fun_app$a (less$e ?v0) bot$)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set$)) (=> (and (less$c ?v0 ?v1) (less$c ?v1 ?v2)) (less$c ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set$)) (=> (and (less$c ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (member$ ?v2) ?v0)) (fun_app$a (member$ ?v2) ?v1)) ))
(assert (= bot$a (collect$ bot$b)))
(assert (= bot$ (collect$a bot$d)))
(assert (forall ((?v0 Dag$) (?v1 Dag_dag_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5))) ))) (less$ ?v0 (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Dag_ref_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$e (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_dag_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$ (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less$ ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_ref_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (fun_app$a (less$e (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Dag_ref_bool_fun_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$d (fun_app$l ?v1 ?v4) (fun_app$l ?v1 ?v5))) ))) (less$d ?v0 (fun_app$l ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Dag_ref_set_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$c (fun_app$m ?v1 ?v4) (fun_app$m ?v1 ?v5))) ))) (less$c ?v0 (fun_app$m ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_bool_fun_dag_fun$) (?v2 Ref_bool_fun$) (?v3 Ref_bool_fun$)) (=> (and (= ?v0 (fun_app$n ?v1 ?v2)) (and (less$d ?v2 ?v3) (forall ((?v4 Ref_bool_fun$) (?v5 Ref_bool_fun$)) (=> (less$d ?v4 ?v5) (less$ (fun_app$n ?v1 ?v4) (fun_app$n ?v1 ?v5))) ))) (less$ ?v0 (fun_app$n ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_set_dag_fun$) (?v2 Ref_set_set$) (?v3 Ref_set_set$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (and (less$c ?v2 ?v3) (forall ((?v4 Ref_set_set$) (?v5 Ref_set_set$)) (=> (less$c ?v4 ?v5) (less$ (fun_app$o ?v1 ?v4) (fun_app$o ?v1 ?v5))) ))) (less$ ?v0 (fun_app$o ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_set_ref_bool_fun_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$d (fun_app$p ?v1 ?v4) (fun_app$p ?v1 ?v5))) ))) (less$d ?v0 (fun_app$p ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_ref_set_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$c (fun_app$q ?v1 ?v4) (fun_app$q ?v1 ?v5))) ))) (less$c ?v0 (fun_app$q ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$) (?v2 Ref_bool_fun$)) (=> (and (= ?v0 ?v1) (less$d ?v1 ?v2)) (less$d ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set$)) (=> (and (= ?v0 ?v1) (less$c ?v1 ?v2)) (less$c ?v0 ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (= ?v0 ?v1) (less$ ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (= ?v0 ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$)) (=> (and (less$d ?v0 ?v1) (=> (not false) (less$d ?v1 ?v0))) false) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$)) (=> (and (less$c ?v0 ?v1) (=> (not false) (less$c ?v1 ?v0))) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less$ ?v0 ?v1) (=> (not false) (less$ ?v1 ?v0))) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (=> (not false) (fun_app$a (less$e ?v1) ?v0))) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_dag_fun$) (?v3 Dag$)) (=> (and (less$ ?v0 ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$h ?v2 ?v4) (fun_app$h ?v2 ?v5))) ))) (less$ (fun_app$h ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_fun$) (?v3 Ref_set$)) (=> (and (less$ ?v0 ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$e (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_dag_fun$) (?v3 Dag$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$ (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5))) ))) (less$ (fun_app$j ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_fun$) (?v3 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (fun_app$a (less$e (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_bool_fun_fun$) (?v3 Ref_bool_fun$)) (=> (and (less$ ?v0 ?v1) (and (= (fun_app$l ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$d (fun_app$l ?v2 ?v4) (fun_app$l ?v2 ?v5))) ))) (less$d (fun_app$l ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_set_fun$) (?v3 Ref_set_set$)) (=> (and (less$ ?v0 ?v1) (and (= (fun_app$m ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$c (fun_app$m ?v2 ?v4) (fun_app$m ?v2 ?v5))) ))) (less$c (fun_app$m ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$) (?v2 Ref_bool_fun_dag_fun$) (?v3 Dag$)) (=> (and (less$d ?v0 ?v1) (and (= (fun_app$n ?v2 ?v1) ?v3) (forall ((?v4 Ref_bool_fun$) (?v5 Ref_bool_fun$)) (=> (less$d ?v4 ?v5) (less$ (fun_app$n ?v2 ?v4) (fun_app$n ?v2 ?v5))) ))) (less$ (fun_app$n ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set_dag_fun$) (?v3 Dag$)) (=> (and (less$c ?v0 ?v1) (and (= (fun_app$o ?v2 ?v1) ?v3) (forall ((?v4 Ref_set_set$) (?v5 Ref_set_set$)) (=> (less$c ?v4 ?v5) (less$ (fun_app$o ?v2 ?v4) (fun_app$o ?v2 ?v5))) ))) (less$ (fun_app$o ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_bool_fun_fun$) (?v3 Ref_bool_fun$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (= (fun_app$p ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$d (fun_app$p ?v2 ?v4) (fun_app$p ?v2 ?v5))) ))) (less$d (fun_app$p ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_set_fun$) (?v3 Ref_set_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (= (fun_app$q ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$c (fun_app$q ?v2 ?v4) (fun_app$q ?v2 ?v5))) ))) (less$c (fun_app$q ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$) (?v2 Ref_bool_fun$)) (=> (and (less$d ?v0 ?v1) (= ?v1 ?v2)) (less$d ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set$)) (=> (and (less$c ?v0 ?v1) (= ?v1 ?v2)) (less$c ?v0 ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (= ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set_ref_bool_fun_fun$) (?v3 Ref_bool_fun$)) (=> (and (less$c ?v0 ?v1) (and (less$d (fun_app$r ?v2 ?v1) ?v3) (forall ((?v4 Ref_set_set$) (?v5 Ref_set_set$)) (=> (less$c ?v4 ?v5) (less$d (fun_app$r ?v2 ?v4) (fun_app$r ?v2 ?v5))) ))) (less$d (fun_app$r ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set_ref_set_set_fun$) (?v3 Ref_set_set$)) (=> (and (less$c ?v0 ?v1) (and (less$c (fun_app$s ?v2 ?v1) ?v3) (forall ((?v4 Ref_set_set$) (?v5 Ref_set_set$)) (=> (less$c ?v4 ?v5) (less$c (fun_app$s ?v2 ?v4) (fun_app$s ?v2 ?v5))) ))) (less$c (fun_app$s ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_dag_fun$) (?v3 Dag$)) (=> (and (less$ ?v0 ?v1) (and (less$ (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$h ?v2 ?v4) (fun_app$h ?v2 ?v5))) ))) (less$ (fun_app$h ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_fun$) (?v3 Ref_set$)) (=> (and (less$ ?v0 ?v1) (and (fun_app$a (less$e (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$e (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_dag_fun$) (?v3 Dag$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (less$ (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$ (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5))) ))) (less$ (fun_app$j ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_fun$) (?v3 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less$e (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (fun_app$a (less$e (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag_dag_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (less$ ?v0 (fun_app$h ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5))) ))) (less$ ?v0 (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_dag_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (less$ ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$ (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less$ ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Dag_ref_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (fun_app$a (less$e ?v0) (fun_app$i ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$e (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_ref_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (fun_app$a (less$e (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (less$ ?v2 ?v0)) (less$ ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v2) ?v0)) (fun_app$a (less$e ?v2) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (less$ ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (less$ ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less$ ?v0 ?v1) (less$ ?v1 ?v0)) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v1) ?v0)) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less$ ?v0 ?v1) (less$ ?v1 ?v0)) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v1) ?v0)) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less$ ?v0 ?v1) (less$ ?v1 ?v0)) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less$e ?v1) ?v0)) false) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (= (= ?v1 ?v0) false)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (= (= ?v1 ?v0) false)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (= (= ?v0 ?v1) false)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (= (= ?v0 ?v1) false)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Bool)) (=> (less$ ?v0 ?v1) (= (=> (less$ ?v1 ?v0) ?v2) true)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Bool)) (=> (fun_app$a (less$e ?v0) ?v1) (= (=> (fun_app$a (less$e ?v1) ?v0) ?v2) true)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (= (not (less$ ?v1 ?v0)) true)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (= (not (fun_app$a (less$e ?v1) ?v0)) true)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (not (less$ ?v1 ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (not (fun_app$a (less$e ?v1) ?v0))) ))
(assert (forall ((?v0 Dag$)) (not (less$ ?v0 ?v0)) ))
(assert (forall ((?v0 Ref_set$)) (not (fun_app$a (less$e ?v0) ?v0)) ))
(assert (forall ((?v0 Dag$)) (not (less$ ?v0 ?v0)) ))
(assert (forall ((?v0 Ref_set$)) (not (fun_app$a (less$e ?v0) ?v0)) ))
(assert (forall ((?v0 Ref$)) (! (= (fun_app$ bot$d ?v0) bot$c) :pattern ((fun_app$ bot$d ?v0)))))
(assert (forall ((?v0 Ref_set_set$)) (= (exists ((?v1 Ref_set$)) (member$a ?v1 ?v0) ) (not (= ?v0 bot$a))) ))
(assert (forall ((?v0 Ref_set$)) (= (exists ((?v1 Ref$)) (fun_app$a (member$ ?v1) ?v0) ) (not (= ?v0 bot$))) ))
(assert (forall ((?v0 Ref_set_set$)) (=> (forall ((?v1 Ref_set$)) (=> (member$a ?v1 ?v0) false) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 Ref_set$)) (=> (forall ((?v1 Ref$)) (=> (fun_app$a (member$ ?v1) ?v0) false) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set$)) (=> (= ?v0 bot$a) (not (member$a ?v1 ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref$)) (=> (= ?v0 bot$) (not (fun_app$a (member$ ?v1) ?v0))) ))
(assert (forall ((?v0 Ref_set$)) (=> (member$a ?v0 bot$a) false) ))
(assert (forall ((?v0 Ref$)) (=> (fun_app$a (member$ ?v0) bot$) false) ))
(assert (forall ((?v0 Ref_set$)) (! (= (is_empty$ ?v0) (= ?v0 bot$)) :pattern ((is_empty$ ?v0)))))
(assert (forall ((?v0 Ref_set$)) (! (= (fun_app$a bot$b ?v0) (member$a ?v0 bot$a)) :pattern ((fun_app$a bot$b ?v0)))))
(assert (forall ((?v0 Ref$)) (! (= (fun_app$ bot$d ?v0) (fun_app$a (member$ ?v0) bot$)) :pattern ((fun_app$ bot$d ?v0)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (fun_app$a (less_eq$ (set_of$ ?v0)) (set_of$ ?v1))) ))
(assert (forall ((?v0 Ref_set$)) (fun_app$a (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Dag$)) (less_eq$a ?v0 ?v0) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$)) (=> (forall ((?v2 Ref_set$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1)) ) (less_eq$b ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (forall ((?v2 Ref$)) (=> (fun_app$a (member$ ?v2) ?v0) (fun_app$a (member$ ?v2) ?v1)) ) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Ref_set$)) (= (fun_app$a (less_eq$ ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Ref_set$)) (fun_app$a (less_eq$ bot$) ?v0) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$a (less$e ?v0) ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (not (= ?v1 ?v0)))) :pattern ((fun_app$a (less$e ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (not (= ?v1 ?v0)))) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$a (less$e ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$a (less$e ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (not (fun_app$a (less_eq$ ?v1) ?v0)))) :pattern ((fun_app$a (less$e ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (not (less_eq$a ?v1 ?v0)))) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less_eq$ ?v0) ?v1) (or (fun_app$a (less$e ?v0) ?v1) (= ?v1 ?v0))) :pattern ((fun_app$a (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less_eq$a ?v0 ?v1) (or (less$ ?v0 ?v1) (= ?v1 ?v0))) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less_eq$ ?v0) ?v1) (or (fun_app$a (less$e ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$a (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less_eq$a ?v0 ?v1) (or (less$ ?v0 ?v1) (= ?v0 ?v1))) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less_eq$ ?v0) ?v1) (or (fun_app$a (less$e ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$a (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less_eq$a ?v0 ?v1) (or (less$ ?v0 ?v1) (= ?v0 ?v1))) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_fun$) (?v3 Ref_set$)) (=> (and (less$ ?v0 ?v1) (and (fun_app$a (less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$e (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_fun$) (?v3 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (fun_app$a (less$e (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_dag_fun$) (?v3 Dag$)) (=> (and (less$ ?v0 ?v1) (and (less_eq$a (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$h ?v2 ?v4) (fun_app$h ?v2 ?v5))) ))) (less$ (fun_app$h ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_dag_fun$) (?v3 Dag$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (and (less_eq$a (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$ (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5))) ))) (less$ (fun_app$j ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_ref_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$a (less_eq$ ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (fun_app$a (less_eq$ (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_dag_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (less$ ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$a (less_eq$ ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (less_eq$a (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less$ ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Dag_ref_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (fun_app$a (less$e ?v0) (fun_app$i ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (fun_app$a (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag_dag_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (less$ ?v0 (fun_app$h ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5))) ))) (less$ ?v0 (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v2) ?v0)) (fun_app$a (less$e ?v2) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (less_eq$a ?v2 ?v0)) (less$ ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less$ ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (less_eq$a ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (less_eq$a ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less$ ?v0 ?v1) (less_eq$a ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_fun$) (?v3 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (fun_app$a (less$e (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (fun_app$a (less_eq$ (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_dag_fun$) (?v3 Dag$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (less$ (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (less_eq$a (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5))) ))) (less$ (fun_app$j ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_fun$) (?v3 Ref_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (fun_app$a (less$e (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (fun_app$a (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$a (less$e (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_dag_fun$) (?v3 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (and (less$ (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$h ?v2 ?v4) (fun_app$h ?v2 ?v5))) ))) (less$ (fun_app$h ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Dag_ref_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (fun_app$a (less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$e (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_ref_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (fun_app$a (less$e (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$a (less$e ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag_dag_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (less_eq$a ?v0 (fun_app$h ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5))) ))) (less$ ?v0 (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_dag_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (less_eq$a ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$a (less$e ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less$e ?v4) ?v5) (less$ (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less$ ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less$e ?v2) ?v0)) (fun_app$a (less$e ?v2) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less$ ?v2 ?v0)) (less$ ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less$ ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less$ ?v1 ?v2)) (less$ ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1))) (fun_app$a (less$e ?v0) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (not (= ?v0 ?v1))) (less$ ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less_eq$ ?v0) ?v1) (or (fun_app$a (less$e ?v0) ?v1) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less_eq$a ?v0 ?v1) (or (less$ ?v0 ?v1) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (not (= ?v0 ?v1)) (fun_app$a (less_eq$ ?v0) ?v1)) (fun_app$a (less$e ?v0) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (not (= ?v0 ?v1)) (less_eq$a ?v0 ?v1)) (less$ ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_bool_fun$)) (= (less_eq$c ?v0 bot$d) (= ?v0 bot$d)) ))
(assert (forall ((?v0 Ref_set$)) (= (fun_app$a (less_eq$ ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Ref_bool_fun$)) (=> (less_eq$c ?v0 bot$d) (= ?v0 bot$d)) ))
(assert (forall ((?v0 Ref_set$)) (=> (fun_app$a (less_eq$ ?v0) bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 Ref_bool_fun$)) (less_eq$c bot$d ?v0) ))
(assert (forall ((?v0 Ref_set$)) (fun_app$a (less_eq$ bot$) ?v0) ))
(assert (forall ((?v0 Ref_set$)) (fun_app$a (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Ref_set$)) (fun_app$a (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Dag$)) (less_eq$a ?v0 ?v0) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set$)) (=> (and (less_eq$b ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (member$ ?v2) ?v0)) (fun_app$a (member$ ?v2) ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (=> (fun_app$a (less_eq$ ?v0) ?v1) (= (fun_app$a (less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$a (less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (=> (less_eq$a ?v0 ?v1) (= (less_eq$a ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$a ?v1 ?v0)))))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set$)) (=> (and (less_eq$b ?v0 ?v1) (not (member$a ?v2 ?v1))) (not (member$a ?v2 ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (not (fun_app$a (member$ ?v2) ?v1))) (not (fun_app$a (member$ ?v2) ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v2) ?v0)) (fun_app$a (less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v0)) (less_eq$a ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_ref_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$a (less_eq$ ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (fun_app$a (less_eq$ (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$a (less_eq$ ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Dag_ref_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (fun_app$a (less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (fun_app$a (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$a (less_eq$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_dag_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (less_eq$a ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$a (less_eq$ ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (less_eq$a (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less_eq$a ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag_dag_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (less_eq$a ?v0 (fun_app$h ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5))) ))) (less_eq$a ?v0 (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_fun$) (?v3 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (fun_app$a (less_eq$ (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (fun_app$a (less_eq$ (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$a (less_eq$ (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_dag_fun$) (?v3 Dag$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (less_eq$a (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (less_eq$a (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5))) ))) (less_eq$a (fun_app$j ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_fun$) (?v3 Ref_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (fun_app$a (less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (fun_app$a (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$a (less_eq$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_dag_fun$) (?v3 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (and (less_eq$a (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$h ?v2 ?v4) (fun_app$h ?v2 ?v5))) ))) (less_eq$a (fun_app$h ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set$)) (=> (and (less_eq$b ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (member$ ?v2) ?v0)) (fun_app$a (member$ ?v2) ?v1)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set$)) (=> (and (less_eq$b ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (member$ ?v2) ?v0)) (fun_app$a (member$ ?v2) ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (= ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_ref_set_fun$) (?v3 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (fun_app$a (less_eq$ (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$a (less_eq$ (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set_dag_fun$) (?v3 Dag$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (less_eq$a (fun_app$j ?v2 ?v4) (fun_app$j ?v2 ?v5))) ))) (less_eq$a (fun_app$j ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_ref_set_fun$) (?v3 Ref_set$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (fun_app$a (less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$a (less_eq$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag_dag_fun$) (?v3 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$h ?v2 ?v4) (fun_app$h ?v2 ?v5))) ))) (less_eq$a (fun_app$h ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$) (?v2 Ref_set$)) (=> (and (less_eq$b ?v0 ?v1) (and (=> (not (member$a ?v2 ?v0)) false) (=> (member$a ?v2 ?v1) false))) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (and (=> (not (fun_app$a (member$ ?v2) ?v0)) false) (=> (fun_app$a (member$ ?v2) ?v1) false))) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$b ?v1 ?v2)) (member$a ?v0 ?v2)) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (member$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (member$ ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_set$) (?v2 Ref_set_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$b ?v1 ?v2)) (member$a ?v0 ?v2)) ))
(assert (forall ((?v0 Ref$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (member$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (member$ ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (= ?v0 ?v1) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (= ?v0 ?v1) (fun_app$a (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (= ?v0 ?v1) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (= ?v0 ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (= ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set_ref_set_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$a (less_eq$ ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (fun_app$a (less_eq$ (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$a (less_eq$ ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Ref_set_dag_fun$) (?v2 Ref_set$) (?v3 Ref_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$a (less_eq$ ?v2) ?v3) (forall ((?v4 Ref_set$) (?v5 Ref_set$)) (=> (fun_app$a (less_eq$ ?v4) ?v5) (less_eq$a (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less_eq$a ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Dag_ref_set_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (fun_app$a (less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$a (less_eq$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag_dag_fun$) (?v2 Dag$) (?v3 Dag$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 Dag$) (?v5 Dag$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5))) ))) (less_eq$a ?v0 (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (= ?v0 ?v1) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0)) false)) false) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$)) (=> (forall ((?v2 Ref$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (fun_app$a (less_eq$ (collect$a ?v0)) (collect$a ?v1))) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$)) (= (less_eq$b ?v0 ?v1) (forall ((?v2 Ref_set$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1)) )) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (= (fun_app$a (less_eq$ ?v0) ?v1) (forall ((?v2 Ref$)) (=> (fun_app$a (member$ ?v2) ?v0) (fun_app$a (member$ ?v2) ?v1)) )) ))
(assert (forall ((?v0 Ref_bool_fun$) (?v1 Ref_bool_fun$)) (= (fun_app$a (less_eq$ (collect$a ?v0)) (collect$a ?v1)) (forall ((?v2 Ref$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 Ref_set_set$) (?v1 Ref_set_set$)) (= (less_eq$b ?v0 ?v1) (forall ((?v2 Ref_set$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1)) )) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (= (fun_app$a (less_eq$ ?v0) ?v1) (forall ((?v2 Ref$)) (=> (fun_app$a (member$ ?v2) ?v0) (fun_app$a (member$ ?v2) ?v1)) )) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (= (= ?v0 ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (= (= ?v0 ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0))) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (fun_app$a (less$e ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less$e ?v0) ?v2)) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (=> (and (fun_app$a (less$e ?v0) ?v1) (=> (and (fun_app$a (less_eq$ ?v0) ?v1) (not (fun_app$a (less_eq$ ?v1) ?v0))) false)) false) ))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less_eq$ ?v0) ?v1) (or (fun_app$a (less$e ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$a (less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (not (fun_app$a (less_eq$ ?v1) ?v0)))) :pattern ((fun_app$a (less$e ?v0) ?v1)))))
(assert (forall ((?v0 Ref_set$) (?v1 Ref_set$)) (! (= (fun_app$a (less$e ?v0) ?v1) (and (fun_app$a (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((fun_app$a (less$e ?v0) ?v1)))))
(assert (forall ((?v0 Ref_set_set$)) (=> (forall ((?v1 Ref_set$)) (=> (member$a ?v1 ?v0) false) ) (less_eq$b ?v0 bot$a)) ))
(assert (forall ((?v0 Ref_set$)) (=> (forall ((?v1 Ref$)) (=> (fun_app$a (member$ ?v1) ?v0) false) ) (fun_app$a (less_eq$ ?v0) bot$)) ))
(assert (forall ((?v0 Ref_set_set$)) (= (chain_subset$ ?v0) (forall ((?v1 Ref_set$)) (=> (member$a ?v1 ?v0) (forall ((?v2 Ref_set$)) (=> (member$a ?v2 ?v0) (or (fun_app$a (less_eq$ ?v1) ?v2) (fun_app$a (less_eq$ ?v2) ?v1))) )) )) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (less_eq$a ?v0 ?v1) (fun_app$a (less_eq$ (set_of$ ?v0)) (set_of$ ?v1))) ))
(assert (forall ((?v0 Ref_set_ref_set_fun$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (antimono$ ?v0) (fun_app$a (less_eq$ ?v1) ?v2)) (fun_app$a (less_eq$ (fun_app$k ?v0 ?v2)) (fun_app$k ?v0 ?v1))) ))
(assert (forall ((?v0 Ref_set_dag_fun$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (antimono$a ?v0) (fun_app$a (less_eq$ ?v1) ?v2)) (less_eq$a (fun_app$j ?v0 ?v2) (fun_app$j ?v0 ?v1))) ))
(assert (forall ((?v0 Dag_ref_set_fun$) (?v1 Dag$) (?v2 Dag$)) (=> (and (antimono$b ?v0) (less_eq$a ?v1 ?v2)) (fun_app$a (less_eq$ (fun_app$i ?v0 ?v2)) (fun_app$i ?v0 ?v1))) ))
(assert (forall ((?v0 Dag_dag_fun$) (?v1 Dag$) (?v2 Dag$)) (=> (and (antimono$c ?v0) (less_eq$a ?v1 ?v2)) (less_eq$a (fun_app$h ?v0 ?v2) (fun_app$h ?v0 ?v1))) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 Dag$)) (less_eq$a ?v0 ?v0) ))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less_eq$a ?v0 ?v1) (or (= ?v0 ?v1) (less$ ?v0 ?v1))) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$)) (! (= (less$ ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((less$ ?v0 ?v1)))))
(assert (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (! (= (less$ ?v0 (node$ ?v1 ?v2 ?v3)) (or (less_eq$a ?v0 ?v1) (less_eq$a ?v0 ?v3))) :pattern ((less$ ?v0 (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 Ref_set_ref_set_fun$)) (= (antimono$ ?v0) (forall ((?v1 Ref_set$) (?v2 Ref_set$)) (=> (fun_app$a (less_eq$ ?v1) ?v2) (fun_app$a (less_eq$ (fun_app$k ?v0 ?v2)) (fun_app$k ?v0 ?v1))) )) ))
(assert (forall ((?v0 Ref_set_dag_fun$)) (= (antimono$a ?v0) (forall ((?v1 Ref_set$) (?v2 Ref_set$)) (=> (fun_app$a (less_eq$ ?v1) ?v2) (less_eq$a (fun_app$j ?v0 ?v2) (fun_app$j ?v0 ?v1))) )) ))
(assert (forall ((?v0 Dag_ref_set_fun$)) (= (antimono$b ?v0) (forall ((?v1 Dag$) (?v2 Dag$)) (=> (less_eq$a ?v1 ?v2) (fun_app$a (less_eq$ (fun_app$i ?v0 ?v2)) (fun_app$i ?v0 ?v1))) )) ))
(assert (forall ((?v0 Dag_dag_fun$)) (= (antimono$c ?v0) (forall ((?v1 Dag$) (?v2 Dag$)) (=> (less_eq$a ?v1 ?v2) (less_eq$a (fun_app$h ?v0 ?v2) (fun_app$h ?v0 ?v1))) )) ))
(assert (forall ((?v0 Ref_set_ref_set_fun$)) (=> (forall ((?v1 Ref_set$) (?v2 Ref_set$)) (=> (fun_app$a (less_eq$ ?v1) ?v2) (fun_app$a (less_eq$ (fun_app$k ?v0 ?v2)) (fun_app$k ?v0 ?v1))) ) (antimono$ ?v0)) ))
(assert (forall ((?v0 Ref_set_dag_fun$)) (=> (forall ((?v1 Ref_set$) (?v2 Ref_set$)) (=> (fun_app$a (less_eq$ ?v1) ?v2) (less_eq$a (fun_app$j ?v0 ?v2) (fun_app$j ?v0 ?v1))) ) (antimono$a ?v0)) ))
(assert (forall ((?v0 Dag_ref_set_fun$)) (=> (forall ((?v1 Dag$) (?v2 Dag$)) (=> (less_eq$a ?v1 ?v2) (fun_app$a (less_eq$ (fun_app$i ?v0 ?v2)) (fun_app$i ?v0 ?v1))) ) (antimono$b ?v0)) ))
(assert (forall ((?v0 Dag_dag_fun$)) (=> (forall ((?v1 Dag$) (?v2 Dag$)) (=> (less_eq$a ?v1 ?v2) (less_eq$a (fun_app$h ?v0 ?v2) (fun_app$h ?v0 ?v1))) ) (antimono$c ?v0)) ))
(assert (forall ((?v0 Ref_set_ref_set_fun$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (antimono$ ?v0) (and (fun_app$a (less_eq$ ?v1) ?v2) (=> (fun_app$a (less_eq$ (fun_app$k ?v0 ?v2)) (fun_app$k ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Ref_set_dag_fun$) (?v1 Ref_set$) (?v2 Ref_set$)) (=> (and (antimono$a ?v0) (and (fun_app$a (less_eq$ ?v1) ?v2) (=> (less_eq$a (fun_app$j ?v0 ?v2) (fun_app$j ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Dag_ref_set_fun$) (?v1 Dag$) (?v2 Dag$)) (=> (and (antimono$b ?v0) (and (less_eq$a ?v1 ?v2) (=> (fun_app$a (less_eq$ (fun_app$i ?v0 ?v2)) (fun_app$i ?v0 ?v1)) false))) false) ))
(assert (forall ((?v0 Dag_dag_fun$) (?v1 Dag$) (?v2 Dag$)) (=> (and (antimono$c ?v0) (and (less_eq$a ?v1 ?v2) (=> (less_eq$a (fun_app$h ?v0 ?v2) (fun_app$h ?v0 ?v1)) false))) false) ))
(check-sat)
(exit)

