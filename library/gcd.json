{
    "content": [
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides",
            "prop": "divides m n ⟷ (∃k. n = m * k)",
            "ty": "def",
            "type": "nat ⇒ nat ⇒ bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃k. x = 0 * k) ⟶ x = 0"
                },
                {
                    "args": "∃k. x = 0 * k",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃k. x = 0 * k ⊢ ∃k. x = 0 * k"
                },
                {
                    "args": "k, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "x = 0 * k",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 * k ⊢ x = 0 * k"
                },
                {
                    "args": "nat_times_def_1",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0 * k ⊢ x = 0"
                },
                {
                    "args": "∃k. x = 0 * k",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃k. x = 0 * k) ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ (∃k. x = 0 * k)"
                },
                {
                    "args": "x = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "mult_0_right, x = 0 * 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ x = 0 * 0"
                },
                {
                    "args": "exI, {P: λk. x = 0 * k, a: (0::nat)}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ⊢ ∃a1. x = 0 * a1"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ (∃k. x = 0 * k)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃k. x = 0 * k) ⟷ x = 0"
                },
                {
                    "args": "divides_def, divides 0 x ⟷ x = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides 0 x ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides 0 x ⟷ x = 0"
                }
            ],
            "prop": "divides 0 x ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_left, x = 1 * x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x = 1 * x"
                },
                {
                    "args": "exI, {P: λk. x = 1 * k, a: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. x = 1 * a1"
                },
                {
                    "args": "divides_def, divides 1 x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides 1 x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides 1 x"
                }
            ],
            "prop": "divides 1 x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_self",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_right, n = n * 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n = n * 1"
                },
                {
                    "args": "exI, {P: λk. n = n * k, a: (1::nat)}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. n = n * a1"
                },
                {
                    "args": "divides_def, divides n n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n n"
                }
            ],
            "prop": "divides n n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "divides m n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k m ⊢ ∃k1. m = k * k1"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = k * p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k * p ⊢ m = k * p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "n = m * q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * q ⊢ n = m * q"
                },
                {
                    "args": "mult_assoc, k * p * q = k * (p * q)",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * p * q = k * (p * q)"
                },
                {
                    "args": "m * q = k * (p * q)",
                    "id": "9",
                    "prevs": [
                        "5",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = k * p, divides k m, divides m n, n = m * q ⊢ m * q = k * (p * q)"
                },
                {
                    "args": "n = k * (p * q)",
                    "id": "10",
                    "prevs": [
                        "7",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m * q, divides k m, divides m n, m = k * p ⊢ n = k * (p * q)"
                },
                {
                    "args": "exI, {P: λk1. n = k * k1, a: p * q}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides k m, divides m n, m = k * p, n = m * q ⊢ ∃a1. n = k * a1"
                },
                {
                    "args": "divides_def, divides k n",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides k m, divides m n, m = k * p, n = m * q ⊢ divides k n"
                },
                {
                    "args": "∃k. n = m * k, ∃k1. m = k * k1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k m ⟶ divides m n ⟶ divides k n"
                }
            ],
            "prop": "divides k m ⟶ divides m n ⟶ divides k n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "p * q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "divides_antisym",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides n m",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides n m ⊢ ∃k. m = n * k"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m * p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * p ⊢ n = m * p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "m = n * q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * q ⊢ m = n * q"
                },
                {
                    "args": "mult_1_right, m = m * 1",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m = m * 1"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8",
                        "7"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = n * q ⊢ m * 1 = n * q"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = n * q, n = m * p ⊢ m * 1 = m * p * q"
                },
                {
                    "args": "mult_assoc",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = n * q, n = m * p ⊢ m * 1 = m * (p * q)"
                },
                {
                    "args": "eq_mult_lcancel",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = n * q, n = m * p ⊢ m = 0 ∨ 1 = p * q"
                },
                {
                    "args": "",
                    "id": "13",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ m = 0 ⟶ m = n"
                },
                {
                    "args": "m = 0",
                    "id": "13.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "13.1",
                    "prevs": [
                        "13.0",
                        "5"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, n = m * p ⊢ n = 0 * p"
                },
                {
                    "args": "nat_times_def_1",
                    "id": "13.2",
                    "prevs": [
                        "13.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = 0, n = m * p ⊢ n = 0"
                },
                {
                    "args": "0 = n",
                    "id": "13.3",
                    "prevs": [
                        "13.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, n = m * p ⊢ 0 = n"
                },
                {
                    "args": "m = n",
                    "id": "13.4",
                    "prevs": [
                        "13.0",
                        "13.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides m n, divides n m, m = 0, m = n * q, n = m * p ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "13.5",
                    "prevs": [
                        "13.0",
                        "13.4"
                    ],
                    "rule": "intros",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ m = 0 ⟶ m = n"
                },
                {
                    "args": "",
                    "id": "14",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ 1 = p * q ⟶ m = n"
                },
                {
                    "args": "1 = p * q",
                    "id": "14.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 = p * q ⊢ 1 = p * q"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "14.1",
                    "prevs": [
                        "14.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "1 = p * q ⊢ p * q = 1"
                },
                {
                    "args": "mult_eq_1",
                    "id": "14.2",
                    "prevs": [
                        "14.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "1 = p * q ⊢ p = 1 ∧ q = 1"
                },
                {
                    "args": "conjD1",
                    "id": "14.3",
                    "prevs": [
                        "14.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 = p * q ⊢ p = 1"
                },
                {
                    "args": "",
                    "id": "14.4",
                    "prevs": [
                        "14.3",
                        "5"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "n = m * p, 1 = p * q ⊢ n = m * 1"
                },
                {
                    "args": "mult_1_right",
                    "id": "14.5",
                    "prevs": [
                        "14.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n = m * p, 1 = p * q ⊢ n = m"
                },
                {
                    "args": "eq_sym_eq, m = n",
                    "id": "14.6",
                    "prevs": [
                        "14.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, divides n m, m = n * q, n = m * p, 1 = p * q ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "14.7",
                    "prevs": [
                        "14.0",
                        "14.6"
                    ],
                    "rule": "intros",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ 1 = p * q ⟶ m = n"
                },
                {
                    "args": "disjE",
                    "id": "15",
                    "prevs": [
                        "12",
                        "13",
                        "14"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ m = n"
                },
                {
                    "args": "∃k. m = n * k, ∃k. n = m * k",
                    "id": "16",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "15"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ divides n m ⟶ m = n"
                }
            ],
            "prop": "divides m n ⟶ divides n m ⟶ m = n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal": "m = m * 1",
                    "goal_id": "8",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "fact_ids": [
                        "8",
                        "7"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "5",
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "10"
                    ],
                    "goal_id": "11",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "11"
                    ],
                    "goal_id": "12",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "fact_ids": [
                        "12"
                    ],
                    "goal_id": "13",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "13",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "13.0",
                        "5"
                    ],
                    "goal_id": "13.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "13.1"
                    ],
                    "goal_id": "13.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "fact_ids": [
                        "13.0"
                    ],
                    "goal_id": "13.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "13.2"
                    ],
                    "goal_id": "13.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "14",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "14.0"
                    ],
                    "goal_id": "14.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "14.1"
                    ],
                    "goal_id": "14.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_eq_1"
                },
                {
                    "fact_ids": [
                        "14.2"
                    ],
                    "goal_id": "14.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "14.3",
                        "5"
                    ],
                    "goal_id": "14.4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "14.4"
                    ],
                    "goal_id": "14.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "14.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_0_right, 0 = n * 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = n * 0"
                },
                {
                    "args": "exI, {P: λk. 0 = n * k, a: (0::nat)}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. 0 = n * a1"
                },
                {
                    "args": "divides_def, divides n 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides n 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n 0"
                }
            ],
            "prop": "divides n 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_sum",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "divides k n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k n ⊢ divides k n"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k m ⊢ ∃k1. m = k * k1"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k n ⊢ ∃k1. n = k * k1"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = k * p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k * p ⊢ m = k * p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "n = k * q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = k * q ⊢ n = k * q"
                },
                {
                    "args": "distrib_l, k * p + k * q = k * (p + q)",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * p + k * q = k * (p + q)"
                },
                {
                    "args": "m + k * q = k * (p + q)",
                    "id": "9",
                    "prevs": [
                        "5",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = k * p, divides k m, divides k n, n = k * q ⊢ m + k * q = k * (p + q)"
                },
                {
                    "args": "m + n = k * (p + q)",
                    "id": "10",
                    "prevs": [
                        "7",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = k * q, divides k m, divides k n, m = k * p ⊢ m + n = k * (p + q)"
                },
                {
                    "args": "exI, {P: λk1. m + n = k * k1, a: p + q}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides k m, divides k n, m = k * p, n = k * q ⊢ ∃a1. m + n = k * a1"
                },
                {
                    "args": "divides_def, divides k (m + n)",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides k m, divides k n, m = k * p, n = k * q ⊢ divides k (m + n)"
                },
                {
                    "args": "∃k1. n = k * k1, ∃k1. m = k * k1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k m ⟶ divides k n ⟶ divides k (m + n)"
                }
            ],
            "prop": "divides k m ⟶ divides k n ⟶ divides k (m + n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "p + q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_l"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "divides k n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k n ⊢ divides k n"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k m ⊢ ∃k1. m = k * k1"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k n ⊢ ∃k1. n = k * k1"
                },
                {
                    "args": "k1, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k1"
                },
                {
                    "args": "m = k * k1",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k * k1 ⊢ m = k * k1"
                },
                {
                    "args": "k2, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k2"
                },
                {
                    "args": "n = k * k2",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = k * k2 ⊢ n = k * k2"
                },
                {
                    "args": "left_sub_distrib, k * k1 - k * k2 = k * (k1 - k2)",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * k1 - k * k2 = k * (k1 - k2)"
                },
                {
                    "args": "k * k1 - n = k * (k1 - k2)",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ k * k1 - n = k * (k1 - k2)"
                },
                {
                    "args": "m - n = k * (k1 - k2)",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ m - n = k * (k1 - k2)"
                },
                {
                    "args": "exI, {P: λk1. m - n = k * k1, a: k1 - k2}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ ∃a1. m - n = k * a1"
                },
                {
                    "args": "divides_def, divides k (m - n)",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ divides k (m - n)"
                },
                {
                    "args": "∃k1. n = k * k1, ∃k1. m = k * k1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k m ⟶ divides k n ⟶ divides k (m - n)"
                }
            ],
            "prop": "divides k m ⟶ divides k n ⟶ divides k (m - n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "k1"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "k2"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "k1-k2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "left_sub_distrib"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_forward"
            ],
            "name": "divides_sum2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k (m + n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k (m + n) ⊢ divides k (m + n)"
                },
                {
                    "args": "divides k m",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "nat_plus_minus_2, n = m + n - m",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n = m + n - m"
                },
                {
                    "args": "divides_sub",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides k m, divides k (m + n) ⊢ divides k (m + n - m)"
                },
                {
                    "args": "divides k n",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides k m, divides k (m + n) ⊢ divides k n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k (m + n) ⟶ divides k m ⟶ divides k n"
                }
            ],
            "prop": "divides k (m + n) ⟶ divides k m ⟶ divides k n",
            "steps": [
                {
                    "goal": "n = m + n - m",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_minus_2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_sub"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lmul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides d a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d a ⊢ divides d a"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides d a ⊢ ∃k. a = d * k"
                },
                {
                    "args": "k, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "a = d * k",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = d * k ⊢ a = d * k"
                },
                {
                    "args": "x * (d * k) = d * (x * k)",
                    "id": "4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x * (d * k) = d * (x * k)"
                },
                {
                    "args": "x * a = d * (x * k)",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides d a, a = d * k ⊢ x * a = d * (x * k)"
                },
                {
                    "args": "exI, {P: λk. x * a = d * k, a: x * k}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides d a, a = d * k ⊢ ∃a1. x * a = d * a1"
                },
                {
                    "args": "divides_def, divides d (x * a)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides d a, a = d * k ⊢ divides d (x * a)"
                },
                {
                    "args": "∃k. a = d * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d a ⟶ divides d (x * a)"
                }
            ],
            "prop": "divides d a ⟶ divides d (x * a)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "x * k"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rmul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides d a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d a ⊢ divides d a"
                },
                {
                    "args": "divides_lmul, {a: a, d: d, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides d a ⊢ divides d (x * a)"
                },
                {
                    "args": "mult_comm, divides d (a * x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides d a ⊢ divides d (a * x)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d a ⟶ divides d (a * x)"
                }
            ],
            "prop": "divides d a ⟶ divides d (a * x)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lmul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides (x * d) a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (x * d) a ⊢ divides (x * d) a"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (x * d) a ⊢ ∃k. a = x * d * k"
                },
                {
                    "args": "k, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "a = x * d * k",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = x * d * k ⊢ a = x * d * k"
                },
                {
                    "args": "x * d * k = d * (x * k)",
                    "id": "4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x * d * k = d * (x * k)"
                },
                {
                    "args": "a = d * (x * k)",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides (x * d) a, a = x * d * k ⊢ a = d * (x * k)"
                },
                {
                    "args": "exI, {P: λk. a = d * k, a: x * k}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides (x * d) a, a = x * d * k ⊢ ∃a1. a = d * a1"
                },
                {
                    "args": "divides_def, divides d a",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides (x * d) a, a = x * d * k ⊢ divides d a"
                },
                {
                    "args": "∃k. a = x * d * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (x * d) a ⟶ divides d a"
                }
            ],
            "prop": "divides (x * d) a ⟶ divides d a",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "x * k"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rmul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides (d * x) a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (d * x) a ⊢ divides (d * x) a"
                },
                {
                    "args": "mult_comm",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (d * x) a ⊢ divides (x * d) a"
                },
                {
                    "args": "divides_lmul2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (d * x) a ⊢ divides d a"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (d * x) a ⟶ divides d a"
                }
            ],
            "prop": "divides (d * x) a ⟶ divides d a",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_x": "x",
                    "theorem": "divides_lmul2"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_mult_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "p, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m * p",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * p ⊢ n = m * p"
                },
                {
                    "args": "mult_assoc, k * (m * p) = k * m * p",
                    "id": "4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * (m * p) = k * m * p"
                },
                {
                    "args": "k * n = k * m * p",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m * p, divides m n ⊢ k * n = k * m * p"
                },
                {
                    "args": "exI, {P: λk1. k * n = k * m * k1, a: p}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, n = m * p ⊢ ∃a1. k * n = k * m * a1"
                },
                {
                    "args": "divides_def, divides (k * m) (k * n)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, n = m * p ⊢ divides (k * m) (k * n)"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ divides (k * m) (k * n)"
                }
            ],
            "prop": "divides m n ⟶ divides (k * m) (k * n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_mult_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "p, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m * p",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * p ⊢ n = m * p"
                },
                {
                    "args": "m * p * k = m * k * p",
                    "id": "4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * p * k = m * k * p"
                },
                {
                    "args": "n * k = m * k * p",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m * p, divides m n ⊢ n * k = m * k * p"
                },
                {
                    "args": "exI, {P: λk1. n * k = m * k * k1, a: p}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, n = m * p ⊢ ∃a1. n * k = m * k * a1"
                },
                {
                    "args": "divides_def, divides (m * k) (n * k)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, n = m * p ⊢ divides (m * k) (n * k)"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ divides (m * k) (n * k)"
                }
            ],
            "prop": "divides m n ⟶ divides (m * k) (n * k)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_cmul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides (c * a) (c * b)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (c * a) (c * b) ⊢ divides (c * a) (c * b)"
                },
                {
                    "args": "¬(c = 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (c * a) (c * b) ⊢ ∃k. c * b = c * a * k"
                },
                {
                    "args": "k, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "c * b = c * a * k",
                    "id": "4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "c * b = c * a * k ⊢ c * b = c * a * k"
                },
                {
                    "args": "mult_assoc",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "c * b = c * a * k ⊢ c * b = c * (a * k)"
                },
                {
                    "args": "eq_mult_lcancel",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "c * b = c * a * k ⊢ c = 0 ∨ b = a * k"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ c = 0 ⟶ (∃k. b = a * k)"
                },
                {
                    "args": "c = 0",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "c = 0 ⊢ c = 0"
                },
                {
                    "args": "negE_gen, {A: c = 0, C: ∃k. b = a * k}",
                    "id": "7.1",
                    "prevs": [
                        "1",
                        "7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "c = 0, ¬(c = 0) ⊢ ∃k. b = a * k"
                },
                {
                    "args": "",
                    "id": "7.2",
                    "prevs": [
                        "7.0",
                        "7.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ c = 0 ⟶ (∃k. b = a * k)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ b = a * k ⟶ (∃k1. b = a * k1)"
                },
                {
                    "args": "b = a * k",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b = a * k ⊢ b = a * k"
                },
                {
                    "args": "exI, {P: λk. b = a * k, a: k}",
                    "id": "8.1",
                    "prevs": [
                        "8.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(c = 0), b = a * k, divides (c * a) (c * b), c * b = c * a * k ⊢ ∃a1. b = a * a1"
                },
                {
                    "args": "",
                    "id": "8.2",
                    "prevs": [
                        "8.0",
                        "8.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ b = a * k ⟶ (∃k1. b = a * k1)"
                },
                {
                    "args": "disjE",
                    "id": "9",
                    "prevs": [
                        "6",
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ ∃k. b = a * k"
                },
                {
                    "args": "divides_def, divides a b",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ divides a b"
                },
                {
                    "args": "∃k. c * b = c * a * k",
                    "id": "11",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (c * a) (c * b) ⟶ ¬(c = 0) ⟶ divides a b"
                }
            ],
            "prop": "divides (c * a) (c * b) ⟶ ¬(c = 0) ⟶ divides a b",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1",
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "inst_exists_goal",
                    "s": "k"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lmul2_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(c = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟶ divides a b"
                },
                {
                    "args": "divides (c * a) (c * b)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (c * a) (c * b) ⊢ divides (c * a) (c * b)"
                },
                {
                    "args": "divides_cmul2",
                    "id": "1.1",
                    "prevs": [
                        "1.0",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(c = 0), divides (c * a) (c * b) ⊢ divides a b"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟶ divides a b"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0) ⊢ divides a b ⟶ divides (c * a) (c * b)"
                },
                {
                    "args": "divides a b",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides a b ⊢ divides a b"
                },
                {
                    "args": "divides_mult_left, {k: c, m: a, n: b}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides a b ⊢ divides (c * a) (c * b)"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0) ⊢ divides a b ⟶ divides (c * a) (c * b)"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟷ divides a b"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(c = 0) ⟶ divides (c * a) (c * b) ⟷ divides a b"
                }
            ],
            "prop": "¬(c = 0) ⟶ divides (c * a) (c * b) ⟷ divides a b",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_cmul2"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rmul2_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(c = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "divides_lmul2_eq, {a: a, b: b, c: c}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟷ divides a b"
                },
                {
                    "args": "mult_comm, divides (a * c) (b * c) ⟷ divides a b",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(c = 0) ⊢ divides (a * c) (b * c) ⟷ divides a b"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(c = 0) ⟶ divides (a * c) (b * c) ⟷ divides a b"
                }
            ],
            "prop": "¬(c = 0) ⟶ divides (a * c) (b * c) ⟷ divides a b",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul2_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides n m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "m = n ∨ 2 * n ≤ m ⟷ m = n * 1 ∨ n * 2 ≤ m",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ m = n ∨ 2 * n ≤ m ⟷ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides n m ⊢ ∃k. m = n * k"
                },
                {
                    "args": "k, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m ⊢ m = n * 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = n * 0",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * 0 ⊢ m = n * 0"
                },
                {
                    "args": "mult_0_right, n * 0 = 0",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n * 0 = 0"
                },
                {
                    "args": "m = 0",
                    "id": "4.2",
                    "prevs": [
                        "4.0",
                        "4.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides n m, m = n * 0 ⊢ m = 0"
                },
                {
                    "args": "disjI1, {A: m = 0, B: m = n * 1 ∨ n * 2 ≤ m}",
                    "id": "4.3",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, m = n * 0 ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "divides n m ⊢ m = n * 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m ⊢ ∀n1. (m = n * n1 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m) ⟶ m = n * Suc n1 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = n * Suc k",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * Suc k ⊢ m = n * Suc k"
                },
                {
                    "args": "mult_Suc_right",
                    "id": "5.2",
                    "prevs": [
                        "5.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = n * Suc k ⊢ m = n + n * k"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ k = 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "k = 0",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k = 0 ⊢ k = 0"
                },
                {
                    "args": "",
                    "id": "5.3.1",
                    "prevs": [
                        "5.3.0",
                        "5.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "k = 0, m = n * Suc k ⊢ m = n + n * 0"
                },
                {
                    "args": "mult_0_right",
                    "id": "5.3.2",
                    "prevs": [
                        "5.3.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "k = 0, m = n * Suc k ⊢ m = n + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "5.3.3",
                    "prevs": [
                        "5.3.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "k = 0, m = n * Suc k ⊢ m = n"
                },
                {
                    "args": "mult_1_right, m = n * 1",
                    "id": "5.3.4",
                    "prevs": [
                        "5.3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, k = 0, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * 1"
                },
                {
                    "args": "disjI1, {A: m = n * 1, B: n * 2 ≤ m}",
                    "id": "5.3.5",
                    "prevs": [
                        "5.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, k = 0, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "disjI2, {A: m = 0, B: m = n * 1 ∨ n * 2 ≤ m}",
                    "id": "5.3.6",
                    "prevs": [
                        "5.3.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, k = 0, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.3.7",
                    "prevs": [
                        "5.3.0",
                        "5.3.6"
                    ],
                    "rule": "intros",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ k = 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ ¬(k = 0) ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "¬(k = 0)",
                    "id": "5.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(k = 0) ⊢ ¬(k = 0)"
                },
                {
                    "args": "le_1_2",
                    "id": "5.4.1",
                    "prevs": [
                        "5.4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(k = 0) ⊢ 1 ≤ k"
                },
                {
                    "args": "less_eq_refl, {n: n + n}",
                    "id": "5.4.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n + n ≤ n + n"
                },
                {
                    "args": "mult_2, 2 * n ≤ n + n",
                    "id": "5.4.3",
                    "prevs": [
                        "5.4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ 2 * n ≤ n + n"
                },
                {
                    "args": "mult_comm, n * 2 ≤ n + n",
                    "id": "5.4.4",
                    "prevs": [
                        "5.4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ n + n"
                },
                {
                    "args": "mult_1_right, n * 2 ≤ n + n * 1",
                    "id": "5.4.5",
                    "prevs": [
                        "5.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ n + n * 1"
                },
                {
                    "args": "n + n * 1 ≤ n + n * k",
                    "id": "5.4.6",
                    "prevs": [
                        "5.4.1"
                    ],
                    "rule": "z3",
                    "th": "¬(k = 0) ⊢ n + n * 1 ≤ n + n * k"
                },
                {
                    "args": "less_eq_trans",
                    "id": "5.4.7",
                    "prevs": [
                        "5.4.5",
                        "5.4.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ n + n * k"
                },
                {
                    "args": "n * 2 ≤ m",
                    "id": "5.4.8",
                    "prevs": [
                        "5.2",
                        "5.4.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ m"
                },
                {
                    "args": "disjI2, {A: m = n * 1, B: n * 2 ≤ m}",
                    "id": "5.4.9",
                    "prevs": [
                        "5.4.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "disjI2, {A: m = 0, B: m = n * 1 ∨ n * 2 ≤ m}",
                    "id": "5.4.10",
                    "prevs": [
                        "5.4.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.4.11",
                    "prevs": [
                        "5.4.0",
                        "5.4.10"
                    ],
                    "rule": "intros",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ ¬(k = 0) ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "classical_cases",
                    "id": "5.5",
                    "prevs": [
                        "5.3",
                        "5.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "3",
                        "5.0",
                        "5.1",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "divides n m ⊢ ∀k. (m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m) ⟶ m = n * Suc k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "nat_induct, {P: λk. m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m, x: k}",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m ⊢ m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = 0 ∨ m = n ∨ 2 * n ≤ m",
                    "id": "7",
                    "prevs": [
                        "1",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides n m, m = n * k ⊢ m = 0 ∨ m = n ∨ 2 * n ≤ m"
                },
                {
                    "args": "∃k. m = n * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "2",
                        "3",
                        "6",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n m ⟶ m = 0 ∨ m = n ∨ 2 * n ≤ m"
                }
            ],
            "prop": "divides n m ⟶ m = 0 ∨ m = n ∨ 2 * n ≤ m",
            "steps": [
                {
                    "goal": "m = n | 2 * n <= m <--> m = n * 1 | n * 2 <= m",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "4",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "case": "k=0",
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.0",
                        "5.2"
                    ],
                    "goal_id": "5.3.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "5.3.1"
                    ],
                    "goal_id": "5.3.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "fact_ids": [
                        "5.3.2"
                    ],
                    "goal_id": "5.3.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "5.3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "5.3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "5.3.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "5.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.4.0"
                    ],
                    "goal_id": "5.4.1",
                    "method_name": "apply_forward_step",
                    "theorem": "le_1_2"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "param_m": "n + n * 1",
                    "theorem": "less_eq_trans"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_2"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "fact_ids": [
                        "5.4.1"
                    ],
                    "goal_id": "5.4.6",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_div_not",
            "prop": "x = q * n + r ⟶ 0 < r ⟶ r < n ⟶ ¬(divides n x)",
            "ty": "thm",
            "vars": {
                "n": "nat",
                "q": "nat",
                "r": "nat",
                "x": "nat"
            }
        },
        {
            "name": "gcd",
            "prop": [
                "gcd m n = ",
                "(THE k. divides k m ∧ divides k n ∧ (∀a. a divides m ∧ a divides n ⟶ a divides k))"
            ],
            "ty": "def",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_divide1",
            "prop": "divides (gcd m n) m",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_divides2",
            "prop": "divides (gcd m n) n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_is_max",
            "prop": "divides a m ⟶ divides a n ⟶ divides a (gcd m n)",
            "ty": "thm",
            "vars": {
                "a": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_equals",
            "prop": [
                "divides a m ",
                "⟶ divides a n ⟶ (∀b. divides b m ⟶ divides b n ⟶ divides b a) ⟶ gcd m n = a"
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_comm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_divides2, {m: n, n: m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd n m) m"
                },
                {
                    "args": "gcd_divide1, {m: n, n: m}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd n m) n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b (gcd n m)"
                },
                {
                    "args": "b, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b m",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b m ⊢ divides b m"
                },
                {
                    "args": "divides b n",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b n ⊢ divides b n"
                },
                {
                    "args": "gcd_is_max",
                    "id": "2.3",
                    "prevs": [
                        "2.2",
                        "2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b m, divides b n ⊢ divides b (gcd n m)"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b (gcd n m)"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd m n = gcd n m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd m n = gcd n m"
                }
            ],
            "prop": "gcd m n = gcd n m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "gcd_zero_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides_zero, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n 0"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "∀b. divides b 0 ⟶ divides b n ⟶ divides b n",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀b. divides b 0 ⟶ divides b n ⟶ divides b n"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd 0 n = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd 0 n = n"
                }
            ],
            "prop": "gcd 0 n = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "gcd_zero_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_zero_left, gcd 0 n = n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ gcd 0 n = n"
                },
                {
                    "args": "gcd_comm, gcd n 0 = n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ gcd n 0 = n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd n 0 = n"
                }
            ],
            "prop": "gcd n 0 = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "gcd_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_zero_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "gcd_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_divide1, {m: k, n: gcd m n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k (gcd m n)) k"
                },
                {
                    "args": "gcd_divides2, {m: k, n: gcd m n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k (gcd m n)) (gcd m n)"
                },
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "divides_trans",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd k (gcd m n)) m"
                },
                {
                    "args": "gcd_is_max",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd k (gcd m n)) (gcd k m)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_trans",
                    "id": "6",
                    "prevs": [
                        "1",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd k (gcd m n)) n"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b (gcd k m) ⟶ divides b n ⟶ divides b (gcd k (gcd m n))"
                },
                {
                    "args": "b, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b (gcd k m)",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (gcd k m) ⊢ divides b (gcd k m)"
                },
                {
                    "args": "divides b n",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b n ⊢ divides b n"
                },
                {
                    "args": "gcd_divide1, {m: k, n: m}",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k m) k"
                },
                {
                    "args": "divides_trans",
                    "id": "7.4",
                    "prevs": [
                        "7.1",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b k"
                },
                {
                    "args": "gcd_divides2, {m: k, n: m}",
                    "id": "7.5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k m) m"
                },
                {
                    "args": "divides_trans",
                    "id": "7.6",
                    "prevs": [
                        "7.1",
                        "7.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b m"
                },
                {
                    "args": "gcd_is_max",
                    "id": "7.7",
                    "prevs": [
                        "7.6",
                        "7.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b (gcd m n)"
                },
                {
                    "args": "gcd_is_max",
                    "id": "7.8",
                    "prevs": [
                        "7.4",
                        "7.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b (gcd k (gcd m n))"
                },
                {
                    "args": "",
                    "id": "7.9",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.2",
                        "7.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b (gcd k m) ⟶ divides b n ⟶ divides b (gcd k (gcd m n))"
                },
                {
                    "args": "gcd_equals",
                    "id": "8",
                    "prevs": [
                        "4",
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd (gcd k m) n = gcd k (gcd m n)"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd (gcd k m) n = gcd k (gcd m n)"
                }
            ],
            "prop": "gcd (gcd k m) n = gcd k (gcd m n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "param_m": "gcd m n",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "param_m": "gcd m n",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "7.5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.5",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "7.5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_equal_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "∀b. divides b m ⟶ divides b n ⟶ divides b m",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b m"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "1",
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n ⊢ gcd m n = m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ gcd m n = m"
                }
            ],
            "prop": "divides m n ⟶ gcd m n = m",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_equal_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides n m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "∀b. divides b m ⟶ divides b n ⟶ divides b n",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b n"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m ⊢ gcd m n = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n m ⟶ gcd m n = n"
                }
            ],
            "prop": "divides n m ⟶ gcd m n = n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_mult_left",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "divides_mult_left, {k: k, m: gcd m n, n: m}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (k * gcd m n) (k * m)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_mult_left, {k: k, m: gcd m n, n: n}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (k * gcd m n) (k * n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b (k * m) ⟶ divides b (k * n) ⟶ divides b (k * gcd m n)"
                },
                {
                    "args": "b, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b (k * m)",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (k * m) ⊢ divides b (k * m)"
                },
                {
                    "args": "divides b (k * n)",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (k * n) ⊢ divides b (k * n)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "divides b (k * m), divides b (k * n) ⊢ divides b (k * gcd m n)"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.2",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b (k * m) ⟶ divides b (k * n) ⟶ divides b (k * gcd m n)"
                },
                {
                    "args": "gcd_equals",
                    "id": "5",
                    "prevs": [
                        "1",
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd (k * m) (k * n) = k * gcd m n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd (k * m) (k * n) = k * gcd m n"
                }
            ],
            "prop": "gcd (k * m) (k * n) = k * gcd m n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "b"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_add_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_sum",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd m n) (m + n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b m ⟶ divides b (m + n) ⟶ divides b (gcd m n)"
                },
                {
                    "args": "b, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b m",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b m ⊢ divides b m"
                },
                {
                    "args": "divides b (m + n)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (m + n) ⊢ divides b (m + n)"
                },
                {
                    "args": "divides_sum2, {k: b, m: m, n: n}",
                    "id": "3.3",
                    "prevs": [
                        "3.2",
                        "3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides b (m + n), divides b m ⊢ divides b n"
                },
                {
                    "args": "gcd_is_max",
                    "id": "3.4",
                    "prevs": [
                        "3.1",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b m, divides b (m + n) ⊢ divides b (gcd m n)"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b m ⟶ divides b (m + n) ⟶ divides b (gcd m n)"
                },
                {
                    "args": "gcd_equals",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd m (m + n) = gcd m n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd m (m + n) = gcd m n"
                }
            ],
            "prop": "gcd m (m + n) = gcd m n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_sum"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "3.2",
                        "3.1"
                    ],
                    "goal_id": "3.3",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_sum2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        }
    ],
    "description": "Greatest common divisors",
    "imports": [
        "nat"
    ],
    "name": "gcd"
}