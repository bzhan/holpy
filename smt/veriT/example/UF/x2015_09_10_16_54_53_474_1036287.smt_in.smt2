(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Bool_tree$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort Dir_dir_fun$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort A_tree_a_fun$ 0)
(declare-sort Dir_bool_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort A_a_fun_bool_fun$ 0)
(declare-sort Dir_dir_list_fun$ 0)
(declare-sort A_a_tree_tree_fun$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-sort Dir_list_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort Dir_dir_dir_fun_fun$ 0)
(declare-sort Dir_dir_bool_fun_fun$ 0)
(declare-sort A_a_fun_tree_bool_fun$ 0)
(declare-sort A_a_tree_bool_fun_fun$ 0)
(declare-sort Dir_list_dir_list_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun$ 0)
(declare-sort A_a_fun_a_a_tree_fun_fun$ 0)
(declare-sort Dir_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_tree_bool_fun_fun$ 0)
(declare-sort A_tree_tree_a_tree_tree_fun$ 0)
(declare-sort A_a_fun_a_a_tree_tree_fun_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_tree_fun$ 0)
(declare-sort A_a_tree_fun_a_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_fun_a_tree_a_fun_fun$ 0)
(declare-sort Dir_dir_list_dir_list_fun_fun$ 0)
(declare-sort Dir_list_dir_list_bool_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_tree_bool_fun_fun$ 0)
(declare-sort A_tree_a_fun_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_tree_tree_fun_a_a_tree_tree_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_dir_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun_a_tree_a_tree_tree_fun_fun$ 0)
(declare-sort A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ 0)
(declare-sort Dir_list_dir_list_sum_dir_list_dir_list_sum_bool_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-fun root$ (A_tree$) A$)
(declare-fun left$ (A_tree$) A_tree$)
(declare-fun right$ (A_tree$) A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$) A_tree$)
(declare-fun select$ (A_a_fun_tree$) A_a_fun$)
(declare-fun selecta$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun selectb$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun node$a (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ () Dir$)
(declare-fun r$ () Dir$)
(declare-fun nil$ () Dir_list$)
(declare-fun hd$ (Dir_list$) Dir$)
(declare-fun tl$ (Dir_list$) Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$) Dir_list$)
(declare-sort A_tree_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_tree_a_tree_fun_tree$ 0)
(declare-sort A_a_tree_fun_tree$ 0)
(declare-sort A_a_tree_fun_a_a_tree_fun_fun_tree$ 0)
(declare-sort A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_bool_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-fun root$a (A_tree_tree$) A_tree$)
(declare-fun left$a (A_tree_tree$) A_tree_tree$)
(declare-fun right$a (A_tree_tree$) A_tree_tree$)
(declare-fun node$b (A_tree$ A_tree_tree$ A_tree_tree$) A_tree_tree$)
(declare-fun selectc$ (A_a_a_fun_fun_tree$) A_a_a_fun_fun$)
(declare-fun selectd$ (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun selecte$ (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun node$c (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun selectf$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun$)
(declare-fun selectg$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun selecth$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun node$d (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun selecti$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun selectj$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectk$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$e (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectl$ (A_tree_a_tree_fun_tree$) A_tree_a_tree_fun$)
(declare-fun selectm$ (A_tree_a_tree_fun_tree$) A_tree_a_tree_fun_tree$)
(declare-fun selectn$ (A_tree_a_tree_fun_tree$) A_tree_a_tree_fun_tree$)
(declare-fun node$f (A_tree_a_tree_fun$ A_tree_a_tree_fun_tree$ A_tree_a_tree_fun_tree$) A_tree_a_tree_fun_tree$)
(declare-fun selecto$ (A_a_tree_fun_tree$) A_a_tree_fun$)
(declare-fun selectp$ (A_a_tree_fun_tree$) A_a_tree_fun_tree$)
(declare-fun selectq$ (A_a_tree_fun_tree$) A_a_tree_fun_tree$)
(declare-fun node$g (A_a_tree_fun$ A_a_tree_fun_tree$ A_a_tree_fun_tree$) A_a_tree_fun_tree$)
(declare-fun selectr$ (A_a_tree_fun_a_a_tree_fun_fun_tree$) A_a_tree_fun_a_a_tree_fun_fun$)
(declare-fun selects$ (A_a_tree_fun_a_a_tree_fun_fun_tree$) A_a_tree_fun_a_a_tree_fun_fun_tree$)
(declare-fun selectt$ (A_a_tree_fun_a_a_tree_fun_fun_tree$) A_a_tree_fun_a_a_tree_fun_fun_tree$)
(declare-fun node$h (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun_a_a_tree_fun_fun_tree$ A_a_tree_fun_a_a_tree_fun_fun_tree$) A_a_tree_fun_a_a_tree_fun_fun_tree$)
(declare-fun selectu$ (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun$)
(declare-fun selectv$ (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$)
(declare-fun selectw$ (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$)
(declare-fun node$i (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun$ A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$ A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$)
(declare-fun selectx$ (A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun selecty$ (A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$)
(declare-fun selectz$ (A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$)
(declare-fun node$j (A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$ A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$)
(declare-fun selecua$ (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$)
(declare-fun selecub$ (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$)
(declare-fun selecuc$ (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$)
(declare-fun node$k (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$ A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$)
(declare-fun selecud$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecue$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecuf$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$l (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecug$ (A_bool_fun_tree$) A_bool_fun$)
(declare-fun selecuh$ (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun selecui$ (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun node$m (A_bool_fun$ A_bool_fun_tree$ A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun selecuj$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun selecuk$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selecul$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun node$n (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selecum$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecun$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecuo$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$o (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-sort Dir_list_list$ 0)
(declare-sort Dir_list_dir_list_sum$ 0)
(declare-fun nil$a () Dir_list_list$)
(declare-fun hd$a (Dir_list_list$) Dir_list$)
(declare-fun tl$a (Dir_list_list$) Dir_list_list$)
(declare-fun cons$a (Dir_list$ Dir_list_list$) Dir_list_list$)
(declare-fun projl$ (Dir_list_dir_list_sum$) Dir_list$)
(declare-fun inl$ (Dir_list$) Dir_list_dir_list_sum$)
(declare-fun projr$ (Dir_list_dir_list_sum$) Dir_list$)
(declare-fun inr$ (Dir_list$) Dir_list_dir_list_sum$)
(declare-fun t$ () A_tree$)
(declare-fun x$ () A$)
(declare-fun y$ () A$)
(declare-fun z$ () A$)
(declare-fun ll$ () A_a_fun$)
(declare-fun lr$ () A_a_fun$)
(declare-fun rl$ () A_a_fun$)
(declare-fun rr$ () A_a_fun$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun rev$ (Dir_list$) Dir_list$)
(declare-fun uua$ () A_tree_a_tree_fun$)
(declare-fun uub$ () A_tree_a_tree_fun$)
(declare-fun uuc$ () Dir_dir_list_dir_list_fun_fun$)
(declare-fun accp$ (Dir_list_dir_list_sum_dir_list_dir_list_sum_bool_fun_fun$ Dir_list_dir_list_sum$) Bool)
(declare-fun bind$ (Dir_list$ Dir_dir_list_fun$) Dir_list$)
(declare-fun comp$ () A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun$)
(declare-fun fold$ (Dir_dir_list_dir_list_fun_fun$ Dir_list$ Dir_list$) Dir_list$)
(declare-fun comp$a () A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$)
(declare-fun comp$b (A_a_tree_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun comp$c () A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun comp$d (A_tree_tree_a_tree_tree_fun$) A_tree_a_tree_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun comp$e (A_tree_tree_a_tree_tree_fun$ A_tree_tree_a_tree_tree_fun$) A_tree_tree_a_tree_tree_fun$)
(declare-fun comp$f (A_tree_tree_a_tree_tree_fun$) A_a_tree_tree_fun_a_a_tree_tree_fun_fun$)
(declare-fun comp$g (A_a_fun$) A_tree_a_fun_a_tree_a_fun_fun$)
(declare-fun comp$h (A_a_tree_fun$) A_tree_a_fun_a_tree_a_tree_fun_fun$)
(declare-fun comp$i (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree_a_a_fun_tree_fun$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun left$b () A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun left$c (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun left$d (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun left$e (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun root$b (A_a_fun_tree$) A_a_fun$)
(declare-fun root$c (A_a_a_fun_fun_tree$) A_a_a_fun_fun$)
(declare-fun root$d (A_a_fun_a_fun_tree$) A_a_fun_a_fun$)
(declare-fun root$e (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun append$ (Dir_list$) Dir_list_dir_list_fun$)
(declare-fun c_tree$ () A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun i_tree$ () A_a_fun_tree$)
(declare-fun insert$ (Dir$) Dir_list_dir_list_fun$)
(declare-fun k_tree$ () A_a_a_fun_fun_tree$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun mirror$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun right$b () A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun right$c (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun right$d (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun right$e (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun s_tree$ () A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun splice$ (Dir_list$) Dir_list_dir_list_fun$)
(declare-fun ap_tree$ (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun member$a (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun mirror$a (A_tree$) A_tree$)
(declare-fun ap_tree$a (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun ap_tree$b (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun ap_tree$c (A_a_fun_tree$) A_tree_a_tree_fun$)
(declare-fun ap_tree$d (A_a_tree_fun_tree$) A_tree_a_tree_tree_fun$)
(declare-fun ap_tree$e (A_a_tree_fun_a_a_tree_fun_fun_tree$ A_a_tree_fun_tree$) A_a_tree_fun_tree$)
(declare-fun ap_tree$f (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$ A_tree_a_tree_fun_tree$) A_a_tree_fun_a_a_tree_fun_fun_tree$)
(declare-fun ap_tree$g (A_tree_a_tree_fun_tree$ A_tree_tree$) A_tree_tree$)
(declare-fun ap_tree$h (A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$ A_tree_a_tree_fun_tree$) A_tree_a_tree_fun_tree$)
(declare-fun ap_tree$i (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$ A_tree_a_tree_fun_tree$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun_tree$)
(declare-fun ap_tree$j (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun ap_tree$k (A_bool_fun_tree$ A_tree$) Bool_tree$)
(declare-fun ap_tree$l (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun ap_tree$m (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun case_dir$ (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree_a_a_fun_tree_fun$ Dir$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun fun_app$a (Dir_list_dir_list_fun$ Dir_list$) Dir_list$)
(declare-fun fun_app$b (Dir_dir_list_dir_list_fun_fun$ Dir$) Dir_list_dir_list_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_a_tree_fun$ A$) A_tree$)
(declare-fun fun_app$e (A_a_fun_a_a_tree_fun_fun$ A_a_fun$) A_a_tree_fun$)
(declare-fun fun_app$f (A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$g (A_a_fun$ A$) A$)
(declare-fun fun_app$h (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$i (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$j (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$k (A_a_fun_bool_fun$ A_a_fun$) Bool)
(declare-fun fun_app$l (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$m (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun$) A_a_tree_fun$)
(declare-fun fun_app$n (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun$ A_tree_a_tree_fun$) A_a_tree_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$o (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun fun_app$p (A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun$)
(declare-fun fun_app$q (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$r (A_tree_tree_a_tree_tree_fun$ A_tree_tree$) A_tree_tree$)
(declare-fun fun_app$s (A_tree_a_tree_tree_fun$ A_tree$) A_tree_tree$)
(declare-fun fun_app$t (A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_tree_fun$)
(declare-fun fun_app$u (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$v (A_tree_a_tree_tree_fun_a_tree_a_tree_tree_fun_fun$ A_tree_a_tree_tree_fun$) A_tree_a_tree_tree_fun$)
(declare-fun fun_app$w (A_a_fun_tree_bool_fun$ A_a_fun_tree$) Bool)
(declare-fun fun_app$x (A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ A_a_fun_tree$) A_a_fun_tree_bool_fun$)
(declare-fun fun_app$y (A_tree_a_tree_bool_fun_fun$ A_tree$) A_tree_bool_fun$)
(declare-fun fun_app$z (A_a_tree_tree_fun_a_a_tree_tree_fun_fun$ A_a_tree_tree_fun$) A_a_tree_tree_fun$)
(declare-fun list_ex1$ (Dir_bool_fun$) Dir_list_bool_fun$)
(declare-fun listrelp$ (Dir_dir_bool_fun_fun$) Dir_list_dir_list_bool_fun_fun$)
(declare-fun map_tree$ (A_a_fun$) A_tree_a_tree_fun$)
(declare-fun set_tree$ (A_a_fun_tree$) A_a_fun_set$)
(declare-fun sublists$ (Dir_list$) Dir_list_list$)
(declare-fun wit_tree$ (A$) A_tree$)
(declare-fun case_dir$a (A_tree_a_tree_fun$) A_tree_a_tree_fun_dir_a_tree_a_tree_fun_fun_fun$)
(declare-fun case_dir$b (Dir$) Dir_dir_dir_fun_fun$)
(declare-fun fun_app$aa (A_a_fun_a_a_tree_tree_fun_fun$ A_a_fun$) A_a_tree_tree_fun$)
(declare-fun fun_app$ab (A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ A_a_tree_tree_fun$) A_a_fun_a_a_tree_tree_fun_fun$)
(declare-fun fun_app$ac (A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$)
(declare-fun fun_app$ad (A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$)
(declare-fun fun_app$ae (A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_tree_fun$) A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$af (A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ag (A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$ A_tree_a_tree_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun fun_app$ah (A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$)
(declare-fun fun_app$ai (A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun$)
(declare-fun fun_app$aj (A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun$ A_tree_a_tree_tree_fun$) A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ak (A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$al (A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_tree_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$am (A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$)
(declare-fun fun_app$an (A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$)
(declare-fun fun_app$ao (A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_fun$) A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ap (A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$aq (A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$)
(declare-fun fun_app$ar (A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun$)
(declare-fun fun_app$as (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$at (A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$au (A_tree_a_fun_a_tree_a_fun_fun$ A_tree_a_fun$) A_tree_a_fun$)
(declare-fun fun_app$av (A_a_tree_tree_fun$ A$) A_tree_tree$)
(declare-fun fun_app$aw (A_a_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_tree_tree_fun_fun$)
(declare-fun fun_app$ax (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun fun_app$ay (A_a_fun_a_a_fun_tree_bool_fun_fun$ A_a_fun$) A_a_fun_tree_bool_fun$)
(declare-fun fun_app$az (A_a_tree_bool_fun_fun$ A$) A_tree_bool_fun$)
(declare-fun fun_app$ba (A_tree_a_fun_a_tree_a_tree_fun_fun$ A_tree_a_fun$) A_tree_a_tree_fun$)
(declare-fun fun_app$bb (Dir_a_tree_a_tree_fun_fun$ Dir$) A_tree_a_tree_fun$)
(declare-fun fun_app$bc (A_tree_a_tree_fun_dir_a_tree_a_tree_fun_fun_fun$ A_tree_a_tree_fun$) Dir_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$bd (Dir_dir_fun$ Dir$) Dir$)
(declare-fun fun_app$be (Dir_dir_dir_fun_fun$ Dir$) Dir_dir_fun$)
(declare-fun fun_app$bf (A_tree_a_fun$ A_tree$) A$)
(declare-fun fun_app$bg (Dir_list_bool_fun$ Dir_list$) Bool)
(declare-fun fun_app$bh (Dir_list_dir_list_bool_fun_fun$ Dir_list$) Dir_list_bool_fun$)
(declare-fun fun_app$bi (Dir_bool_fun$ Dir$) Bool)
(declare-fun fun_app$bj (Dir_dir_bool_fun_fun$ Dir$) Dir_bool_fun$)
(declare-fun map_tree$a (A_a_fun_a_fun$ A_a_fun_tree$) A_tree$)
(declare-fun map_tree$b (A_a_a_fun_fun$ A_tree$) A_a_fun_tree$)
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$d (A_tree_a_tree_fun$) A_tree_tree_a_tree_tree_fun$)
(declare-fun map_tree$e (A_a_tree_fun$) A_tree_a_tree_tree_fun$)
(declare-fun pred_tree$ (A_a_fun_bool_fun$ A_a_fun_tree$) Bool)
(declare-fun pure_tree$ (A_a_fun$) A_a_fun_tree$)
(declare-fun set_tree$a (A_tree$) A_set$)
(declare-fun tree_chop$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun corec_tree$ (A_a_tree_fun$) A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun lexordp_eq$ (Dir_dir_bool_fun_fun$) Dir_list_dir_list_bool_fun_fun$)
(declare-fun odd_mirror$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun pred_tree$a (A_bool_fun$) A_tree_bool_fun$)
(declare-fun pure_tree$a (A$) A_tree$)
(declare-fun pure_tree$b (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun pure_tree$c (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun pure_tree$d (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun pure_tree$e (A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun$) A_tree_a_tree_fun_a_a_tree_fun_a_a_tree_fun_fun_fun_tree$)
(declare-fun pure_tree$f (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_tree$)
(declare-fun pure_tree$g (A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun pure_tree$h (A_bool_fun$) A_bool_fun_tree$)
(declare-fun pure_tree$i (Bool) Bool_tree$)
(declare-fun tree_chop$a (A_tree$) A_tree$)
(declare-fun corec_tree$a (A_tree_a_tree_fun$) A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tree$b (A_a_fun$) A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tree$c (A_tree_a_fun$) A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun even_mirror$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun odd_mirror$a () A_tree_a_tree_fun$)
(declare-fun unfold_tree$ (A_a_fun$) A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$)
(declare-fun even_mirror$a () A_tree_a_tree_fun$)
(declare-fun tree_iterate$ (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_tree$)
(declare-fun tree_recurse$ (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_tree$)
(declare-fun unfold_tree$a (A_a_tree_fun$) A_a_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$)
(declare-fun unfold_tree$b (A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$)
(declare-fun product_lists$ (Dir_list_list$) Dir_list_list$)
(declare-fun traverse_tree$ (Dir_list$) A_tree_a_tree_fun$)
(declare-fun tree_iterate$a (A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun tree_iterate$b (A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun tree_recurse$a (A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun tree_recurse$b (A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun traverse_tree$a (Dir_list$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun even_odd_mirror$ (Bool A_a_fun_tree$) A_a_fun_tree$)
(declare-fun map_tailrec_rev$ (Dir_dir_fun$ Dir_list$ Dir_list$) Dir_list$)
(declare-fun odd_mirror_path$ (Dir_list$) Dir_list$)
(declare-fun even_mirror_path$ (Dir_list$) Dir_list$)
(declare-fun even_odd_mirror$a (Bool) A_tree_a_tree_fun$)
(declare-fun even_mirror_path_odd_mirror_path_rel$ () Dir_list_dir_list_sum_dir_list_dir_list_sum_bool_fun_fun$)
(assert (forall ((?v0 A_tree$)) (! (= (fun_app$ uub$ ?v0) (right$ ?v0)) :pattern ((fun_app$ uub$ ?v0)))))
(assert (forall ((?v0 A_tree$)) (! (= (fun_app$ uua$ ?v0) (left$ ?v0)) :pattern ((fun_app$ uua$ ?v0)))))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (! (= (fun_app$a (fun_app$b uuc$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$a (fun_app$b uuc$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$c (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$c (uu$ ?v0) ?v1)))))
(assert (not (= (root$ t$) x$)))
(assert (= t$ (node$ x$ (node$ y$ (fun_app$ (map_tree$ ll$) t$) (fun_app$ (map_tree$ lr$) t$)) (node$ z$ (fun_app$ (map_tree$ rl$) t$) (fun_app$ (map_tree$ rr$) t$)))))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$b (odd_mirror$ ?v0)) (root$b ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (root$ (fun_app$ odd_mirror$a ?v0)) (root$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$b (even_mirror$ ?v0)) (root$b ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (root$ (fun_app$ even_mirror$a ?v0)) (root$ ?v0)) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (root$b (even_odd_mirror$ ?v0 ?v1)) (root$b ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (root$ (fun_app$ (even_odd_mirror$a ?v0) ?v1)) (root$ ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (root$ (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) ?v3)) (fun_app$g ?v0 ?v3)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$b (mirror$ ?v0)) (root$b ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (root$ (mirror$a ?v0)) (root$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (root$b (tree_iterate$ ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (root$ (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (root$b (tree_recurse$ ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (root$ (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun$)) (= (root$b (pure_tree$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$)) (= (root$ (pure_tree$a ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$h ?v0 (root$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$b ?v0 ?v1)) (fun_app$i ?v0 (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (root$b (map_tree$c ?v0 ?v1)) (fun_app$j ?v0 (root$b ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (fun_app$ (map_tree$ ?v0) ?v1)) (fun_app$g ?v0 (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (root$b (node$a ?v0 ?v1 ?v2)) ?v0) :pattern ((node$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (root$ (node$ ?v0 ?v1 ?v2)) ?v0) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (map_tree$b ?v0 (pure_tree$a ?v1)) (pure_tree$ (fun_app$i ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (map_tree$a ?v0 (pure_tree$ ?v1)) (pure_tree$a (fun_app$h ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (map_tree$c ?v0 (pure_tree$ ?v1)) (pure_tree$ (fun_app$j ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ (map_tree$ ?v0) (pure_tree$a ?v1)) (pure_tree$a (fun_app$g ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) ?v3) (node$ (fun_app$g ?v0 ?v3) (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$g ?v1 ?v3)) (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$g ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (tree_iterate$ ?v0 ?v1 ?v2) (node$a ?v2 (tree_iterate$ ?v0 ?v1 (fun_app$j ?v0 ?v2)) (tree_iterate$ ?v0 ?v1 (fun_app$j ?v1 ?v2)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) ?v2) (node$ ?v2 (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) (fun_app$g ?v0 ?v2)) (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) (fun_app$g ?v1 ?v2)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (! (= (tree_recurse$ ?v0 ?v1 ?v2) (node$a ?v2 (map_tree$c ?v0 (tree_recurse$ ?v0 ?v1 ?v2)) (map_tree$c ?v1 (tree_recurse$ ?v0 ?v1 ?v2)))) :pattern ((tree_recurse$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2) (node$ ?v2 (fun_app$ (map_tree$ ?v0) (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2)) (fun_app$ (map_tree$ ?v1) (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2)))) :pattern ((fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (map_tree$b ?v0 (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$i ?v0 ?v1) (map_tree$b ?v0 ?v2) (map_tree$b ?v0 ?v3))) :pattern ((map_tree$b ?v0 (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (map_tree$a ?v0 (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$h ?v0 ?v1) (map_tree$a ?v0 ?v2) (map_tree$a ?v0 ?v3))) :pattern ((map_tree$a ?v0 (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (map_tree$c ?v0 (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$j ?v0 ?v1) (map_tree$c ?v0 ?v2) (map_tree$c ?v0 ?v3))) :pattern ((map_tree$c ?v0 (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$ (map_tree$ ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$g ?v0 ?v1) (fun_app$ (map_tree$ ?v0) ?v2) (fun_app$ (map_tree$ ?v0) ?v3))) :pattern ((fun_app$ (map_tree$ ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun$) (?v1 Bool) (?v2 A_tree$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$ (even_odd_mirror$a ?v1) ?v2)) (fun_app$ (even_odd_mirror$a ?v1) (fun_app$ (map_tree$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (= (mirror$ (node$a ?v0 ?v1 ?v2)) (node$a ?v0 (mirror$ ?v2) (mirror$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (= (mirror$a (node$ ?v0 ?v1 ?v2)) (node$ ?v0 (mirror$a ?v2) (mirror$a ?v1))) ))
(assert (forall ((?v0 A_a_fun$)) (! (= (pure_tree$ ?v0) (node$a ?v0 (pure_tree$ ?v0) (pure_tree$ ?v0))) :pattern ((pure_tree$ ?v0)))))
(assert (forall ((?v0 A$)) (! (= (pure_tree$a ?v0) (node$ ?v0 (pure_tree$a ?v0) (pure_tree$a ?v0))) :pattern ((pure_tree$a ?v0)))))
(assert (forall ((?v0 Bool) (?v1 A_a_fun$)) (= (even_odd_mirror$ ?v0 (pure_tree$ ?v1)) (pure_tree$ ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A$)) (= (fun_app$ (even_odd_mirror$a ?v0) (pure_tree$a ?v1)) (pure_tree$a ?v1)) ))
(assert (forall ((?v0 A$)) (= (mirror$a (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (mirror$ (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (odd_mirror$ (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A$)) (= (fun_app$ odd_mirror$a (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (even_mirror$ (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A$)) (= (fun_app$ even_mirror$a (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$ odd_mirror$a ?v1)) (fun_app$ odd_mirror$a (fun_app$ (map_tree$ ?v0) ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$ even_mirror$a ?v1)) (fun_app$ even_mirror$a (fun_app$ (map_tree$ ?v0) ?v1))) ))
(assert (= odd_mirror$a (even_odd_mirror$a false)))
(assert (= even_mirror$a (even_odd_mirror$a true)))
(assert (forall ((?v0 A_a_fun_tree$)) (=> (forall ((?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (=> (= ?v0 (node$a ?v1 ?v2 ?v3)) false) ) false) ))
(assert (forall ((?v0 A_tree$)) (=> (forall ((?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false) ) false) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun_a_a_fun_fun$)) (=> (= ?v0 (node$a ?v1 (map_tree$c ?v2 ?v0) (map_tree$c ?v3 ?v0))) (= ?v0 (tree_recurse$ ?v2 ?v3 ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (= ?v0 (node$ ?v1 (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v0))) (= ?v0 (fun_app$d (fun_app$e (tree_recurse$a ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 A_a_fun_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3)) (and (fun_app$k ?v0 ?v1) (and (pred_tree$ ?v0 ?v2) (pred_tree$ ?v0 ?v3)))) :pattern ((pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$l (pred_tree$a ?v0) (node$ ?v1 ?v2 ?v3)) (and (fun_app$c ?v0 ?v1) (and (fun_app$l (pred_tree$a ?v0) ?v2) (fun_app$l (pred_tree$a ?v0) ?v3)))) :pattern ((fun_app$l (pred_tree$a ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A$)) (= (= (pure_tree$a ?v0) (pure_tree$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (pure_tree$ ?v0) (pure_tree$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (! (= (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$m (fun_app$n comp$ (map_tree$ ?v0)) (fun_app$e (tree_iterate$a ?v1) ?v2))) :pattern ((fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o right$b (odd_mirror$ ?v0)) (even_mirror$ (fun_app$o right$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (right$ (fun_app$ odd_mirror$a ?v0)) (fun_app$ even_mirror$a (right$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o left$b (odd_mirror$ ?v0)) (even_mirror$ (fun_app$o left$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (left$ (fun_app$ odd_mirror$a ?v0)) (fun_app$ even_mirror$a (left$ ?v0))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun$) (?v2 A_tree$)) (= (fun_app$ (traverse_tree$ ?v0) (fun_app$ (map_tree$ ?v1) ?v2)) (fun_app$ (map_tree$ ?v1) (fun_app$ (traverse_tree$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (fun_app$o right$b (tree_recurse$ ?v0 ?v1 ?v2)) (map_tree$c ?v1 (tree_recurse$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (right$ (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2)) (fun_app$ (map_tree$ ?v1) (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun$)) (= (fun_app$o (traverse_tree$a ?v0) (pure_tree$ ?v1)) (pure_tree$ ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A$)) (= (fun_app$ (traverse_tree$ ?v0) (pure_tree$a ?v1)) (pure_tree$a ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (fun_app$o left$b (tree_recurse$ ?v0 ?v1 ?v2)) (map_tree$c ?v0 (tree_recurse$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (left$ (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2)) (fun_app$ (map_tree$ ?v0) (fun_app$d (fun_app$e (tree_recurse$a ?v0) ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree$)) (=> (and (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) (fun_app$p (fun_app$q comp$a ?v2) ?v0)) (= (fun_app$p (fun_app$q comp$a ?v0) ?v3) (fun_app$p (fun_app$q comp$a ?v4) ?v0))) (= (fun_app$r (map_tree$d ?v0) (fun_app$s (fun_app$t (tree_iterate$b ?v1) ?v3) ?v5)) (fun_app$s (fun_app$t (tree_iterate$b ?v2) ?v4) (fun_app$ ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_tree_fun$) (?v1 A_a_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_a_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A$)) (=> (and (= (fun_app$e (comp$b ?v0) ?v1) (fun_app$m (fun_app$n comp$ ?v2) ?v0)) (= (fun_app$e (comp$b ?v0) ?v3) (fun_app$m (fun_app$n comp$ ?v4) ?v0))) (= (fun_app$s (map_tree$e ?v0) (fun_app$d (fun_app$e (tree_iterate$a ?v1) ?v3) ?v5)) (fun_app$s (fun_app$t (tree_iterate$b ?v2) ?v4) (fun_app$d ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A$)) (=> (and (= (fun_app$j (fun_app$u comp$c ?v0) ?v1) (fun_app$j (fun_app$u comp$c ?v2) ?v0)) (= (fun_app$j (fun_app$u comp$c ?v0) ?v3) (fun_app$j (fun_app$u comp$c ?v4) ?v0))) (= (fun_app$ (map_tree$ ?v0) (fun_app$d (fun_app$e (tree_iterate$a ?v1) ?v3) ?v5)) (fun_app$d (fun_app$e (tree_iterate$a ?v2) ?v4) (fun_app$g ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (left$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (fun_app$o left$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (fun_app$o left$b (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (left$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (fun_app$o left$b (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (fun_app$o left$b ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (left$ (fun_app$ (map_tree$ ?v0) ?v1)) (fun_app$ (map_tree$ ?v0) (left$ ?v1))) ))
(assert (forall ((?v0 A_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (right$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (fun_app$o right$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (fun_app$o right$b (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (fun_app$o right$b (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (fun_app$o right$b ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (right$ (fun_app$ (map_tree$ ?v0) ?v1)) (fun_app$ (map_tree$ ?v0) (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (node$a (root$b ?v0) (fun_app$o left$b ?v0) (fun_app$o right$b ?v0)) ?v0) ))
(assert (forall ((?v0 A_tree$)) (= (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$)) (= (map_tree$e (fun_app$m (fun_app$n comp$ ?v0) ?v1)) (fun_app$v (comp$d (map_tree$d ?v0)) (map_tree$e ?v1))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$)) (= (map_tree$d (fun_app$p (fun_app$q comp$a ?v0) ?v1)) (comp$e (map_tree$d ?v0) (map_tree$d ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (map_tree$ (fun_app$j (fun_app$u comp$c ?v0) ?v1)) (fun_app$p (fun_app$q comp$a (map_tree$ ?v0)) (map_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree_a_a_fun_tree_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (=> (and (fun_app$w (fun_app$x ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (fun_app$w (fun_app$x ?v0 ?v3) ?v4) (and (= (root$b ?v3) (root$b ?v4)) (and (fun_app$w (fun_app$x ?v0 (fun_app$o left$b ?v3)) (fun_app$o left$b ?v4)) (fun_app$w (fun_app$x ?v0 (fun_app$o right$b ?v3)) (fun_app$o right$b ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (and (fun_app$l (fun_app$y ?v0 ?v1) ?v2) (forall ((?v3 A_tree$) (?v4 A_tree$)) (=> (fun_app$l (fun_app$y ?v0 ?v3) ?v4) (and (= (root$ ?v3) (root$ ?v4)) (and (fun_app$l (fun_app$y ?v0 (left$ ?v3)) (left$ ?v4)) (fun_app$l (fun_app$y ?v0 (right$ ?v3)) (right$ ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_tree_a_a_fun_tree_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (=> (and (fun_app$w (fun_app$x ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (fun_app$w (fun_app$x ?v0 ?v3) ?v4) (and (= (root$b ?v3) (root$b ?v4)) (and (or (fun_app$w (fun_app$x ?v0 (fun_app$o left$b ?v3)) (fun_app$o left$b ?v4)) (= (fun_app$o left$b ?v3) (fun_app$o left$b ?v4))) (or (fun_app$w (fun_app$x ?v0 (fun_app$o right$b ?v3)) (fun_app$o right$b ?v4)) (= (fun_app$o right$b ?v3) (fun_app$o right$b ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (and (fun_app$l (fun_app$y ?v0 ?v1) ?v2) (forall ((?v3 A_tree$) (?v4 A_tree$)) (=> (fun_app$l (fun_app$y ?v0 ?v3) ?v4) (and (= (root$ ?v3) (root$ ?v4)) (and (or (fun_app$l (fun_app$y ?v0 (left$ ?v3)) (left$ ?v4)) (= (left$ ?v3) (left$ ?v4))) (or (fun_app$l (fun_app$y ?v0 (right$ ?v3)) (right$ ?v4)) (= (right$ ?v3) (right$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (and (= (root$b ?v0) (root$b ?v1)) (and (= (fun_app$o left$b ?v0) (fun_app$o left$b ?v1)) (= (fun_app$o right$b ?v0) (fun_app$o right$b ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (and (= (left$ ?v0) (left$ ?v1)) (= (right$ ?v0) (right$ ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (fun_app$o right$b (even_odd_mirror$ ?v0 ?v1)) (even_odd_mirror$ (ite (not ?v0) true false) (ite ?v0 (fun_app$o left$b ?v1) (fun_app$o right$b ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (right$ (fun_app$ (even_odd_mirror$a ?v0) ?v1)) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (left$ ?v1) (right$ ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (fun_app$o left$b (even_odd_mirror$ ?v0 ?v1)) (even_odd_mirror$ (ite (not ?v0) true false) (ite ?v0 (fun_app$o right$b ?v1) (fun_app$o left$b ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (left$ (fun_app$ (even_odd_mirror$a ?v0) ?v1)) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (right$ ?v1) (left$ ?v1)))) ))
(assert (forall ((?v0 A_tree$)) (= (left$ (mirror$a ?v0)) (mirror$a (right$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o left$b (mirror$ ?v0)) (mirror$ (fun_app$o right$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (right$ (mirror$a ?v0)) (mirror$a (left$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o right$b (mirror$ ?v0)) (mirror$ (fun_app$o left$b ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (=> (=> (= ?v0 (node$a (root$b ?v0) (fun_app$o left$b ?v0) (fun_app$o right$b ?v0))) false) false) ))
(assert (forall ((?v0 A_tree$)) (=> (=> (= ?v0 (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0))) false) false) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_bool_fun$) (?v3 A_a_tree_tree_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$) (?v6 A_a_tree_tree_fun$) (?v7 A_a_fun$)) (= (fun_app$z (comp$f (map_tree$d ?v0)) (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af (corec_tree$ ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af (corec_tree$ (fun_app$m (fun_app$n comp$ ?v0) ?v1)) ?v2) (fun_app$z (comp$f (map_tree$d ?v0)) ?v3)) ?v4) ?v5) (fun_app$z (comp$f (map_tree$d ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_bool_fun$) (?v3 A_tree_a_tree_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree_bool_fun$) (?v6 A_tree_a_tree_tree_fun$) (?v7 A_tree_a_tree_fun$)) (= (fun_app$v (comp$d (map_tree$d ?v0)) (fun_app$t (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$a ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$t (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$a (fun_app$p (fun_app$q comp$a ?v0) ?v1)) ?v2) (fun_app$v (comp$d (map_tree$d ?v0)) ?v3)) ?v4) ?v5) (fun_app$v (comp$d (map_tree$d ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_tree_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$) (?v6 A_a_tree_fun$) (?v7 A_a_fun$)) (= (fun_app$m (fun_app$n comp$ (map_tree$ ?v0)) (fun_app$e (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (corec_tree$b ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$e (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (corec_tree$b (fun_app$j (fun_app$u comp$c ?v0) ?v1)) ?v2) (fun_app$m (fun_app$n comp$ (map_tree$ ?v0)) ?v3)) ?v4) ?v5) (fun_app$m (fun_app$n comp$ (map_tree$ ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree_a_fun$) (?v2 A_tree_bool_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree_bool_fun$) (?v6 A_tree_a_tree_fun$) (?v7 A_tree_a_tree_fun$)) (= (fun_app$p (fun_app$q comp$a (map_tree$ ?v0)) (fun_app$p (fun_app$q (fun_app$aq (fun_app$ar (fun_app$as (fun_app$at (corec_tree$c ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$p (fun_app$q (fun_app$aq (fun_app$ar (fun_app$as (fun_app$at (corec_tree$c (fun_app$au (comp$g ?v0) ?v1)) ?v2) (fun_app$p (fun_app$q comp$a (map_tree$ ?v0)) ?v3)) ?v4) ?v5) (fun_app$p (fun_app$q comp$a (map_tree$ ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_tree$)) (= (fun_app$r (map_tree$d ?v0) (fun_app$s (map_tree$e ?v1) ?v2)) (fun_app$s (map_tree$e (fun_app$m (fun_app$n comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_tree$)) (= (fun_app$r (map_tree$d ?v0) (fun_app$r (map_tree$d ?v1) ?v2)) (fun_app$r (map_tree$d (fun_app$p (fun_app$q comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_tree$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$ (map_tree$ ?v1) ?v2)) (fun_app$ (map_tree$ (fun_app$j (fun_app$u comp$c ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A$)) (= (left$ (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (fun_app$o left$b (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A$)) (= (right$ (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (fun_app$o right$b (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (fun_app$o left$b (node$a ?v0 ?v1 ?v2)) ?v1) :pattern ((node$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (left$ (node$ ?v0 ?v1 ?v2)) ?v1) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (fun_app$o right$b (node$a ?v0 ?v1 ?v2)) ?v2) :pattern ((node$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (right$ (node$ ?v0 ?v1 ?v2)) ?v2) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o right$b (even_mirror$ ?v0)) (odd_mirror$ (fun_app$o left$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (right$ (fun_app$ even_mirror$a ?v0)) (fun_app$ odd_mirror$a (left$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o left$b (even_mirror$ ?v0)) (odd_mirror$ (fun_app$o right$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (left$ (fun_app$ even_mirror$a ?v0)) (fun_app$ odd_mirror$a (right$ ?v0))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (left$ (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) ?v3)) (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$g ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (right$ (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) ?v3)) (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$g ?v2 ?v3))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (fun_app$o left$b (tree_iterate$ ?v0 ?v1 ?v2)) (tree_iterate$ ?v0 ?v1 (fun_app$j ?v0 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (left$ (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) ?v2)) (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) (fun_app$g ?v0 ?v2))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (fun_app$o right$b (tree_iterate$ ?v0 ?v1 ?v2)) (tree_iterate$ ?v0 ?v1 (fun_app$j ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (right$ (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) ?v2)) (fun_app$d (fun_app$e (tree_iterate$a ?v0) ?v1) (fun_app$g ?v1 ?v2))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (even_odd_mirror$ ?v0 ?v1) (node$a (root$b ?v1) (even_odd_mirror$ (ite (not ?v0) true false) (ite ?v0 (fun_app$o right$b ?v1) (fun_app$o left$b ?v1))) (even_odd_mirror$ (ite (not ?v0) true false) (ite ?v0 (fun_app$o left$b ?v1) (fun_app$o right$b ?v1))))) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (fun_app$ (even_odd_mirror$a ?v0) ?v1) (node$ (root$ ?v1) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (right$ ?v1) (left$ ?v1))) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (left$ ?v1) (right$ ?v1))))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (mirror$ ?v0) (node$a (root$b ?v0) (mirror$ (fun_app$o right$b ?v0)) (mirror$ (fun_app$o left$b ?v0)))) ))
(assert (forall ((?v0 A_tree$)) (= (mirror$a ?v0) (node$ (root$ ?v0) (mirror$a (right$ ?v0)) (mirror$a (left$ ?v0)))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A$)) (= (fun_app$r (map_tree$d ?v0) (fun_app$av (fun_app$aa (fun_app$aw (unfold_tree$a ?v1) ?v2) ?v3) ?v4)) (fun_app$av (fun_app$aa (fun_app$aw (unfold_tree$a (fun_app$m (fun_app$n comp$ ?v0) ?v1)) ?v2) ?v3) ?v4)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree$)) (= (fun_app$r (map_tree$d ?v0) (fun_app$s (fun_app$t (fun_app$ax (unfold_tree$b ?v1) ?v2) ?v3) ?v4)) (fun_app$s (fun_app$t (fun_app$ax (unfold_tree$b (fun_app$p (fun_app$q comp$a ?v0) ?v1)) ?v2) ?v3) ?v4)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ ?v1) ?v2) ?v3) ?v4)) (fun_app$d (fun_app$e (fun_app$f (unfold_tree$ (fun_app$j (fun_app$u comp$c ?v0) ?v1)) ?v2) ?v3) ?v4)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree$)) (=> (and (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) (fun_app$p (fun_app$q comp$a ?v2) ?v0)) (= (fun_app$p (fun_app$q comp$a ?v0) ?v3) (fun_app$p (fun_app$q comp$a ?v4) ?v0))) (= (fun_app$r (map_tree$d ?v0) (fun_app$s (fun_app$t (tree_recurse$b ?v1) ?v3) ?v5)) (fun_app$s (fun_app$t (tree_recurse$b ?v2) ?v4) (fun_app$ ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_tree_fun$) (?v1 A_a_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_a_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A$)) (=> (and (= (fun_app$e (comp$b ?v0) ?v1) (fun_app$m (fun_app$n comp$ ?v2) ?v0)) (= (fun_app$e (comp$b ?v0) ?v3) (fun_app$m (fun_app$n comp$ ?v4) ?v0))) (= (fun_app$s (map_tree$e ?v0) (fun_app$d (fun_app$e (tree_recurse$a ?v1) ?v3) ?v5)) (fun_app$s (fun_app$t (tree_recurse$b ?v2) ?v4) (fun_app$d ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A$)) (=> (and (= (fun_app$j (fun_app$u comp$c ?v0) ?v1) (fun_app$j (fun_app$u comp$c ?v2) ?v0)) (= (fun_app$j (fun_app$u comp$c ?v0) ?v3) (fun_app$j (fun_app$u comp$c ?v4) ?v0))) (= (fun_app$ (map_tree$ ?v0) (fun_app$d (fun_app$e (tree_recurse$a ?v1) ?v3) ?v5)) (fun_app$d (fun_app$e (tree_recurse$a ?v2) ?v4) (fun_app$g ?v0 ?v5)))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$g (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$g (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$)) (! (= (fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_tree$)) (= (root$b (fun_app$o (traverse_tree$a ?v0) (odd_mirror$ ?v1))) (root$b (fun_app$o (traverse_tree$a (odd_mirror_path$ ?v0)) ?v1))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_tree$)) (= (root$ (fun_app$ (traverse_tree$ ?v0) (fun_app$ odd_mirror$a ?v1))) (root$ (fun_app$ (traverse_tree$ (odd_mirror_path$ ?v0)) ?v1))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_tree$)) (= (root$b (fun_app$o (traverse_tree$a ?v0) (even_mirror$ ?v1))) (root$b (fun_app$o (traverse_tree$a (even_mirror_path$ ?v0)) ?v1))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_tree$)) (= (root$ (fun_app$ (traverse_tree$ ?v0) (fun_app$ even_mirror$a ?v1))) (root$ (fun_app$ (traverse_tree$ (even_mirror_path$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (tree_chop$ ?v0) (node$a (root$b (fun_app$o left$b ?v0)) (fun_app$o right$b ?v0) (tree_chop$ (fun_app$o left$b ?v0)))) ))
(assert (forall ((?v0 A_tree$)) (= (tree_chop$a ?v0) (node$ (root$ (left$ ?v0)) (right$ ?v0) (tree_chop$a (left$ ?v0)))) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (ap_tree$ ?v0 ?v1) (node$a (fun_app$i (root$c ?v0) (root$ ?v1)) (ap_tree$ (left$c ?v0) (left$ ?v1)) (ap_tree$ (right$c ?v0) (right$ ?v1)))) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (ap_tree$a ?v0 ?v1) (node$ (fun_app$h (root$d ?v0) (root$b ?v1)) (ap_tree$a (left$d ?v0) (fun_app$o left$b ?v1)) (ap_tree$a (right$d ?v0) (fun_app$o right$b ?v1)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (ap_tree$b ?v0 ?v1) (node$a (fun_app$j (root$e ?v0) (root$b ?v1)) (ap_tree$b (left$e ?v0) (fun_app$o left$b ?v1)) (ap_tree$b (right$e ?v0) (fun_app$o right$b ?v1)))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$c ?v0) ?v1) (node$ (fun_app$g (root$b ?v0) (root$ ?v1)) (fun_app$ (ap_tree$c (fun_app$o left$b ?v0)) (left$ ?v1)) (fun_app$ (ap_tree$c (fun_app$o right$b ?v0)) (right$ ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_tree_bool_fun_fun$)) (=> (and (member$a ?v0 (set_tree$ ?v1)) (and (forall ((?v3 A_a_fun_tree$)) (fun_app$w (fun_app$ay ?v2 (root$b ?v3)) ?v3) ) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$)) (=> (and (member$a ?v3 (set_tree$ (fun_app$o left$b ?v4))) (fun_app$w (fun_app$ay ?v2 ?v3) (fun_app$o left$b ?v4))) (fun_app$w (fun_app$ay ?v2 ?v3) ?v4)) ) (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$)) (=> (and (member$a ?v3 (set_tree$ (fun_app$o right$b ?v4))) (fun_app$w (fun_app$ay ?v2 ?v3) (fun_app$o right$b ?v4))) (fun_app$w (fun_app$ay ?v2 ?v3) ?v4)) )))) (fun_app$w (fun_app$ay ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_a_tree_bool_fun_fun$)) (=> (and (member$ ?v0 (set_tree$a ?v1)) (and (forall ((?v3 A_tree$)) (fun_app$l (fun_app$az ?v2 (root$ ?v3)) ?v3) ) (and (forall ((?v3 A$) (?v4 A_tree$)) (=> (and (member$ ?v3 (set_tree$a (left$ ?v4))) (fun_app$l (fun_app$az ?v2 ?v3) (left$ ?v4))) (fun_app$l (fun_app$az ?v2 ?v3) ?v4)) ) (forall ((?v3 A$) (?v4 A_tree$)) (=> (and (member$ ?v3 (set_tree$a (right$ ?v4))) (fun_app$l (fun_app$az ?v2 ?v3) (right$ ?v4))) (fun_app$l (fun_app$az ?v2 ?v3) ?v4)) )))) (fun_app$l (fun_app$az ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$) (?v3 A_tree_a_tree_fun$) (?v4 A_a_tree_fun$) (?v5 A$)) (=> (= (fun_app$ ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$m (fun_app$n comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree$)) (=> (= (fun_app$ ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ ?v3 (fun_app$ ?v4 ?v5))) (= (fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$p (fun_app$q comp$a ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A$)) (=> (= (fun_app$g ?v0 (fun_app$g ?v1 ?v2)) (fun_app$g ?v3 (fun_app$g ?v4 ?v5))) (= (fun_app$g (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2) (fun_app$g (fun_app$j (fun_app$u comp$c ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$) (?v3 A_tree_a_tree_fun$) (?v4 A_a_tree_fun$) (?v5 A$)) (=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2)) (fun_app$ ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (fun_app$d (fun_app$m (fun_app$n comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree$)) (=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2)) (fun_app$ ?v3 (fun_app$ ?v4 ?v5))) (= (fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (fun_app$ (fun_app$p (fun_app$q comp$a ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$) (?v3 A_tree_a_tree_fun$) (?v4 A_a_tree_fun$)) (=> (= (fun_app$ ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$m (fun_app$n comp$ ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_a_fun$) (?v4 A_a_fun$)) (=> (= (fun_app$g ?v0 (fun_app$g ?v1 ?v2)) (fun_app$g ?v3 (fun_app$g ?v4 ?v2))) (= (fun_app$g (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2) (fun_app$g (fun_app$j (fun_app$u comp$c ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$)) (=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2)) (fun_app$ ?v3 (fun_app$ ?v4 ?v2))) (= (fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (fun_app$ (fun_app$p (fun_app$q comp$a ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (ap_tree$ (pure_tree$b ?v0) (pure_tree$a ?v1)) (pure_tree$ (fun_app$i ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (ap_tree$a (pure_tree$c ?v0) (pure_tree$ ?v1)) (pure_tree$a (fun_app$h ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (ap_tree$b (pure_tree$d ?v0) (pure_tree$ ?v1)) (pure_tree$ (fun_app$j ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ (ap_tree$c (pure_tree$ ?v0)) (pure_tree$a ?v1)) (pure_tree$a (fun_app$g ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (ap_tree$ (node$c ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (node$a (fun_app$i ?v0 ?v3) (ap_tree$ ?v1 ?v4) (ap_tree$ ?v2 ?v5))) :pattern ((ap_tree$ (node$c ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (! (= (ap_tree$a (node$d ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$ (fun_app$h ?v0 ?v3) (ap_tree$a ?v1 ?v4) (ap_tree$a ?v2 ?v5))) :pattern ((ap_tree$a (node$d ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (! (= (ap_tree$b (node$e ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$a (fun_app$j ?v0 ?v3) (ap_tree$b ?v1 ?v4) (ap_tree$b ?v2 ?v5))) :pattern ((ap_tree$b (node$e ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (fun_app$ (ap_tree$c (node$a ?v0 ?v1 ?v2)) (node$ ?v3 ?v4 ?v5)) (node$ (fun_app$g ?v0 ?v3) (fun_app$ (ap_tree$c ?v1) ?v4) (fun_app$ (ap_tree$c ?v2) ?v5))) :pattern ((fun_app$ (ap_tree$c (node$a ?v0 ?v1 ?v2)) (node$ ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (ap_tree$ (pure_tree$b ?v0) (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$i ?v0 ?v1) (ap_tree$ (pure_tree$b ?v0) ?v2) (ap_tree$ (pure_tree$b ?v0) ?v3))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (ap_tree$a (pure_tree$c ?v0) (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$h ?v0 ?v1) (ap_tree$a (pure_tree$c ?v0) ?v2) (ap_tree$a (pure_tree$c ?v0) ?v3))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (ap_tree$b (pure_tree$d ?v0) (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$j ?v0 ?v1) (ap_tree$b (pure_tree$d ?v0) ?v2) (ap_tree$b (pure_tree$d ?v0) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (fun_app$ (ap_tree$c (pure_tree$ ?v0)) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$g ?v0 ?v1) (fun_app$ (ap_tree$c (pure_tree$ ?v0)) ?v2) (fun_app$ (ap_tree$c (pure_tree$ ?v0)) ?v3))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (traverse_tree$ ?v0) (fun_app$ (ap_tree$c ?v1) ?v2)) (fun_app$ (ap_tree$c (fun_app$o (traverse_tree$a ?v0) ?v1)) (fun_app$ (traverse_tree$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (tree_chop$a (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$ (ap_tree$c (tree_chop$ ?v0)) (tree_chop$a ?v1))) ))
(assert (forall ((?v0 A_a_fun$)) (= (tree_chop$ (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A$)) (= (tree_chop$a (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_tree_a_tree_fun_tree$) (?v1 A_a_tree_fun_tree$) (?v2 A_tree$)) (= (fun_app$s (ap_tree$d (ap_tree$e (ap_tree$f (pure_tree$e comp$) ?v0) ?v1)) ?v2) (ap_tree$g ?v0 (fun_app$s (ap_tree$d ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun_tree$) (?v1 A_tree_a_tree_fun_tree$) (?v2 A_tree_tree$)) (= (ap_tree$g (ap_tree$h (ap_tree$i (pure_tree$f comp$a) ?v0) ?v1) ?v2) (ap_tree$g ?v0 (ap_tree$g ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (ap_tree$c (ap_tree$b (ap_tree$j (pure_tree$g comp$c) ?v0) ?v1)) ?v2) (fun_app$ (ap_tree$c ?v0) (fun_app$ (ap_tree$c ?v1) ?v2))) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (odd_mirror_path$ ?v0) (odd_mirror_path$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (even_mirror_path$ ?v0) (even_mirror_path$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dir_list$)) (= (odd_mirror_path$ (odd_mirror_path$ ?v0)) ?v0) ))
(assert (forall ((?v0 Dir_list$)) (= (even_mirror_path$ (even_mirror_path$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (fun_app$ (ap_tree$c ?v0) ?v2) (fun_app$ (ap_tree$c ?v1) ?v2)) ) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 (set_tree$a ?v0)) (fun_app$c ?v1 ?v2)) ) (= (ap_tree$k (pure_tree$h ?v1) ?v0) (pure_tree$i true))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (fun_app$ (ap_tree$c ?v0) (pure_tree$a ?v2)) (fun_app$ (ap_tree$c ?v1) (pure_tree$a ?v2))) ) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (root$ (ap_tree$a ?v0 ?v1)) (fun_app$h (root$d ?v0) (root$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (root$b (ap_tree$ ?v0 ?v1)) (fun_app$i (root$c ?v0) (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (root$b (ap_tree$b ?v0 ?v1)) (fun_app$j (root$e ?v0) (root$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (root$ (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$g (root$b ?v0) (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (left$ (ap_tree$a ?v0 ?v1)) (ap_tree$a (left$d ?v0) (fun_app$o left$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (left$ (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$ (ap_tree$c (fun_app$o left$b ?v0)) (left$ ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (fun_app$o left$b (ap_tree$ ?v0 ?v1)) (ap_tree$ (left$c ?v0) (left$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (fun_app$o left$b (ap_tree$b ?v0 ?v1)) (ap_tree$b (left$e ?v0) (fun_app$o left$b ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$c (pure_tree$ ?v0)) ?v1) (fun_app$ (map_tree$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (right$ (ap_tree$a ?v0 ?v1)) (ap_tree$a (right$d ?v0) (fun_app$o right$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (right$ (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$ (ap_tree$c (fun_app$o right$b ?v0)) (right$ ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (fun_app$o right$b (ap_tree$ ?v0 ?v1)) (ap_tree$ (right$c ?v0) (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (fun_app$o right$b (ap_tree$b ?v0 ?v1)) (ap_tree$b (right$e ?v0) (fun_app$o right$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (member$a (root$b ?v0) (set_tree$ ?v0)) ))
(assert (forall ((?v0 A_tree$)) (member$ (root$ ?v0) (set_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (member$a (root$b ?v0) (set_tree$ ?v0)) ))
(assert (forall ((?v0 A_tree$)) (member$ (root$ ?v0) (set_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ (fun_app$o left$b ?v1))) (member$a ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (set_tree$a (left$ ?v1))) (member$ ?v0 (set_tree$a ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ (fun_app$o left$b ?v1))) (member$a ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (set_tree$a (left$ ?v1))) (member$ ?v0 (set_tree$a ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (set_tree$a ?v0)) (and (member$ ?v5 (set_tree$a ?v1)) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (set_tree$a ?v0)) (= (fun_app$g ?v1 ?v3) (fun_app$g ?v2 ?v3))) ) (= (fun_app$ (map_tree$ ?v1) ?v0) (fun_app$ (map_tree$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (set_tree$a ?v1)) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))) )) (= (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ (fun_app$o right$b ?v1))) (member$a ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (set_tree$a (right$ ?v1))) (member$ ?v0 (set_tree$a ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ (fun_app$o right$b ?v1))) (member$a ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (set_tree$a (right$ ?v1))) (member$ ?v0 (set_tree$a ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_tree_bool_fun_fun$)) (=> (and (member$a ?v0 (set_tree$ ?v1)) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (fun_app$w (fun_app$ay ?v2 ?v3) (node$a ?v3 ?v4 ?v5)) ) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$) (?v6 A_a_fun$)) (=> (and (member$a ?v6 (set_tree$ ?v4)) (fun_app$w (fun_app$ay ?v2 ?v6) ?v4)) (fun_app$w (fun_app$ay ?v2 ?v6) (node$a ?v3 ?v4 ?v5))) ) (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$) (?v6 A_a_fun$)) (=> (and (member$a ?v6 (set_tree$ ?v5)) (fun_app$w (fun_app$ay ?v2 ?v6) ?v5)) (fun_app$w (fun_app$ay ?v2 ?v6) (node$a ?v3 ?v4 ?v5))) )))) (fun_app$w (fun_app$ay ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_a_tree_bool_fun_fun$)) (=> (and (member$ ?v0 (set_tree$a ?v1)) (and (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (fun_app$l (fun_app$az ?v2 ?v3) (node$ ?v3 ?v4 ?v5)) ) (and (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$) (?v6 A$)) (=> (and (member$ ?v6 (set_tree$a ?v4)) (fun_app$l (fun_app$az ?v2 ?v6) ?v4)) (fun_app$l (fun_app$az ?v2 ?v6) (node$ ?v3 ?v4 ?v5))) ) (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$) (?v6 A$)) (=> (and (member$ ?v6 (set_tree$a ?v5)) (fun_app$l (fun_app$az ?v2 ?v6) ?v5)) (fun_app$l (fun_app$az ?v2 ?v6) (node$ ?v3 ?v4 ?v5))) )))) (fun_app$l (fun_app$az ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (and (member$a ?v0 (set_tree$ ?v1)) (and (forall ((?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (=> (= ?v1 (node$a ?v0 ?v2 ?v3)) false) ) (and (forall ((?v2 A_a_fun$) (?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$ ?v3))) false) ) (forall ((?v2 A_a_fun$) (?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$ ?v4))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (and (member$ ?v0 (set_tree$a ?v1)) (and (forall ((?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v1 (node$ ?v0 ?v2 ?v3)) false) ) (and (forall ((?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$a ?v3))) false) ) (forall ((?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$a ?v4))) false) )))) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun$) (?v3 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ ?v1)) (member$a ?v0 (set_tree$ (node$a ?v2 ?v1 ?v3)))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$ ?v0 (set_tree$a ?v1)) (member$ ?v0 (set_tree$a (node$ ?v2 ?v1 ?v3)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun$) (?v3 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ ?v1)) (member$a ?v0 (set_tree$ (node$a ?v2 ?v3 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$ ?v0 (set_tree$a ?v1)) (member$ ?v0 (set_tree$a (node$ ?v2 ?v3 ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (member$a ?v0 (set_tree$ (node$a ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (member$ ?v0 (set_tree$a (node$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (even_odd_mirror$a ?v0) (fun_app$ (ap_tree$c ?v1) ?v2)) (fun_app$ (ap_tree$c (even_odd_mirror$ ?v0 ?v1)) (fun_app$ (even_odd_mirror$a ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (mirror$a (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$ (ap_tree$c (mirror$ ?v0)) (mirror$a ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (fun_app$ odd_mirror$a (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$ (ap_tree$c (odd_mirror$ ?v0)) (fun_app$ odd_mirror$a ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (fun_app$ even_mirror$a (fun_app$ (ap_tree$c ?v0) ?v1)) (fun_app$ (ap_tree$c (even_mirror$ ?v0)) (fun_app$ even_mirror$a ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$a ?v0 (set_tree$ ?v1)) (exists ((?v2 Dir_list$)) (= ?v0 (root$b (fun_app$o (traverse_tree$a ?v2) ?v1))) )) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (set_tree$a ?v1)) (exists ((?v2 Dir_list$)) (= ?v0 (root$ (fun_app$ (traverse_tree$ ?v2) ?v1))) )) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$b (tree_chop$ ?v0)) (root$b (fun_app$o left$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (root$ (tree_chop$a ?v0)) (root$ (left$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o right$b (tree_chop$ ?v0)) (tree_chop$ (fun_app$o left$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (right$ (tree_chop$a ?v0)) (tree_chop$a (left$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (fun_app$o left$b (tree_chop$ ?v0)) (fun_app$o right$b ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (left$ (tree_chop$a ?v0)) (right$ ?v0)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$b (fun_app$m (fun_app$n comp$ ?v0) ?v1)) ?v2) (fun_app$m (fun_app$n comp$ ?v0) (fun_app$e (comp$b ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_tree_a_fun$)) (= (fun_app$ba (comp$h (fun_app$m (fun_app$n comp$ ?v0) ?v1)) ?v2) (fun_app$p (fun_app$q comp$a ?v0) (fun_app$ba (comp$h ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_a_tree_fun$)) (= (fun_app$m (fun_app$n comp$ (fun_app$p (fun_app$q comp$a ?v0) ?v1)) ?v2) (fun_app$m (fun_app$n comp$ ?v0) (fun_app$m (fun_app$n comp$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$j (fun_app$u comp$c (fun_app$j (fun_app$u comp$c ?v0) ?v1)) ?v2) (fun_app$j (fun_app$u comp$c ?v0) (fun_app$j (fun_app$u comp$c ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$)) (= (fun_app$p (fun_app$q comp$a (fun_app$p (fun_app$q comp$a ?v0) ?v1)) ?v2) (fun_app$p (fun_app$q comp$a ?v0) (fun_app$p (fun_app$q comp$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$g (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$g (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$)) (! (= (fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_a_tree_fun$)) (=> (and (= (fun_app$m (fun_app$n comp$ ?v0) ?v1) (fun_app$m (fun_app$n comp$ ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$ ?v0 (fun_app$d ?v1 ?v4)) (fun_app$ ?v2 (fun_app$d ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$j (fun_app$u comp$c ?v0) ?v1) (fun_app$j (fun_app$u comp$c ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$g ?v0 (fun_app$g ?v1 ?v4)) (fun_app$g ?v2 (fun_app$g ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$)) (=> (and (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) (fun_app$p (fun_app$q comp$a ?v2) ?v3)) (=> (forall ((?v4 A_tree$)) (= (fun_app$ ?v0 (fun_app$ ?v1 ?v4)) (fun_app$ ?v2 (fun_app$ ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_a_tree_fun$) (?v4 A$)) (=> (= (fun_app$m (fun_app$n comp$ ?v0) ?v1) (fun_app$m (fun_app$n comp$ ?v2) ?v3)) (= (fun_app$ ?v0 (fun_app$d ?v1 ?v4)) (fun_app$ ?v2 (fun_app$d ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$j (fun_app$u comp$c ?v0) ?v1) (fun_app$j (fun_app$u comp$c ?v2) ?v3)) (= (fun_app$g ?v0 (fun_app$g ?v1 ?v4)) (fun_app$g ?v2 (fun_app$g ?v3 ?v4)))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree$)) (=> (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) (fun_app$p (fun_app$q comp$a ?v2) ?v3)) (= (fun_app$ ?v0 (fun_app$ ?v1 ?v4)) (fun_app$ ?v2 (fun_app$ ?v3 ?v4)))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_a_tree_fun$) (?v3 A$)) (=> (= (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (= (fun_app$ ?v0 (fun_app$d ?v1 ?v3)) (fun_app$d ?v2 ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (=> (= (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2) (= (fun_app$g ?v0 (fun_app$g ?v1 ?v3)) (fun_app$g ?v2 ?v3))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree$)) (=> (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (= (fun_app$ ?v0 (fun_app$ ?v1 ?v3)) (fun_app$ ?v2 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (member$ ?v0 (set_tree$a (wit_tree$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (fun_app$ (ap_tree$c (ap_tree$ (ap_tree$l c_tree$ ?v0) ?v1)) ?v2) (fun_app$ (ap_tree$c (ap_tree$ ?v0 ?v2)) ?v1)) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (! (= (traverse_tree$a (cons$ ?v0 ?v1)) (comp$i (traverse_tree$a ?v1) (case_dir$ left$b right$b ?v0))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (! (= (traverse_tree$ (cons$ ?v0 ?v1)) (fun_app$p (fun_app$q comp$a (traverse_tree$ ?v1)) (fun_app$bb (fun_app$bc (case_dir$a uua$) uub$) ?v0))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (ap_tree$c (ap_tree$b (ap_tree$m s_tree$ ?v0) ?v1)) ?v2) (fun_app$ (ap_tree$c (ap_tree$ ?v0 ?v2)) (fun_app$ (ap_tree$c ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree$)) (= (fun_app$ (ap_tree$c i_tree$) ?v0) ?v0) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$c (ap_tree$ k_tree$ ?v0)) ?v1) ?v0) ))
(assert (forall ((?v0 Dir_dir_fun$) (?v1 Dir$) (?v2 Dir$) (?v3 Dir$)) (= (fun_app$bd ?v0 (fun_app$bd (fun_app$be (case_dir$b ?v1) ?v2) ?v3)) (fun_app$bd (fun_app$be (case_dir$b (fun_app$bd ?v0 ?v1)) (fun_app$bd ?v0 ?v2)) ?v3)) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (= (odd_mirror_path$ (cons$ ?v0 ?v1)) (cons$ ?v0 (even_mirror_path$ ?v1))) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list_list$) (?v2 Dir_list$) (?v3 Dir_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir$) (?v3 Dir_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (= (odd_mirror_path$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (= ?v1 (cons$ ?v2 (even_mirror_path$ ?v3)))) false) ))) false) ))
(assert (forall ((?v0 A_a_tree_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_tree_a_tree_fun$) (?v4 A_a_tree_fun$) (?v5 A_tree_a_tree_fun$)) (=> (= (fun_app$d ?v0 (fun_app$g ?v1 ?v2)) (fun_app$ ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$d (fun_app$e (comp$b (fun_app$m (fun_app$n comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$d (fun_app$m (fun_app$n comp$ (fun_app$p (fun_app$q comp$a ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_tree_fun$) (?v1 A_tree_a_fun$) (?v2 A_tree$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree_a_tree_fun$)) (=> (= (fun_app$d ?v0 (fun_app$bf ?v1 ?v2)) (fun_app$ ?v3 (fun_app$ ?v4 ?v2))) (= (fun_app$ (fun_app$ba (comp$h (fun_app$m (fun_app$n comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$ (fun_app$p (fun_app$q comp$a (fun_app$p (fun_app$q comp$a ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$) (?v3 A_a_tree_fun$) (?v4 A_a_fun$) (?v5 A_tree_a_tree_fun$)) (=> (= (fun_app$ ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$g ?v4 ?v2))) (= (fun_app$d (fun_app$m (fun_app$n comp$ (fun_app$p (fun_app$q comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$d (fun_app$e (comp$b (fun_app$m (fun_app$n comp$ ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A$) (?v3 A_tree_a_tree_fun$) (?v4 A_a_tree_fun$) (?v5 A_tree_a_tree_fun$)) (=> (= (fun_app$ ?v0 (fun_app$d ?v1 ?v2)) (fun_app$ ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$d (fun_app$m (fun_app$n comp$ (fun_app$p (fun_app$q comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$d (fun_app$m (fun_app$n comp$ (fun_app$p (fun_app$q comp$a ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A_a_fun$)) (=> (= (fun_app$g ?v0 (fun_app$g ?v1 ?v2)) (fun_app$g ?v3 (fun_app$g ?v4 ?v2))) (= (fun_app$g (fun_app$j (fun_app$u comp$c (fun_app$j (fun_app$u comp$c ?v5) ?v0)) ?v1) ?v2) (fun_app$g (fun_app$j (fun_app$u comp$c (fun_app$j (fun_app$u comp$c ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$) (?v3 A_a_tree_fun$) (?v4 A_tree_a_fun$) (?v5 A_tree_a_tree_fun$)) (=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2)) (fun_app$d ?v3 (fun_app$bf ?v4 ?v2))) (= (fun_app$ (fun_app$p (fun_app$q comp$a (fun_app$p (fun_app$q comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$ (fun_app$ba (comp$h (fun_app$m (fun_app$n comp$ ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree_a_tree_fun$)) (=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2)) (fun_app$ ?v3 (fun_app$ ?v4 ?v2))) (= (fun_app$ (fun_app$p (fun_app$q comp$a (fun_app$p (fun_app$q comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$ (fun_app$p (fun_app$q comp$a (fun_app$p (fun_app$q comp$a ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_a_tree_fun$) (?v3 A_tree_a_fun$)) (=> (= (fun_app$m (fun_app$n comp$ ?v0) ?v1) ?v2) (= (fun_app$p (fun_app$q comp$a ?v0) (fun_app$ba (comp$h ?v1) ?v3)) (fun_app$ba (comp$h ?v2) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$j (fun_app$u comp$c ?v0) ?v1) ?v2) (= (fun_app$j (fun_app$u comp$c ?v0) (fun_app$j (fun_app$u comp$c ?v1) ?v3)) (fun_app$j (fun_app$u comp$c ?v2) ?v3))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_a_tree_fun$)) (=> (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (= (fun_app$m (fun_app$n comp$ ?v0) (fun_app$m (fun_app$n comp$ ?v1) ?v3)) (fun_app$m (fun_app$n comp$ ?v2) ?v3))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$)) (=> (= (fun_app$p (fun_app$q comp$a ?v0) ?v1) ?v2) (= (fun_app$p (fun_app$q comp$a ?v0) (fun_app$p (fun_app$q comp$a ?v1) ?v3)) (fun_app$p (fun_app$q comp$a ?v2) ?v3))) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Dir_list_dir_list_bool_fun_fun$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (fun_app$bg (fun_app$bh ?v0 nil$) nil$) (and (forall ((?v3 Dir$) (?v4 Dir_list$)) (fun_app$bg (fun_app$bh ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 Dir$) (?v4 Dir_list$)) (fun_app$bg (fun_app$bh ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 Dir$) (?v4 Dir_list$) (?v5 Dir$) (?v6 Dir_list$)) (=> (fun_app$bg (fun_app$bh ?v0 ?v4) ?v6) (fun_app$bg (fun_app$bh ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$bg (fun_app$bh ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 Dir$)) (fun_app$bg ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$bg ?v1 ?v3)) (fun_app$bg ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$bg ?v1 ?v0)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir$) (?v2 Dir_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 Dir$) (?v2 Dir_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 Dir$) (?v2 Dir_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Dir_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 Dir_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false) ) (forall ((?v1 Dir$) (?v2 Dir_list$) (?v3 Dir_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 Dir$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 Dir$) (?v2 Dir$) (?v3 Dir_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 Dir_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 Dir$) (?v2 Dir_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (= (even_mirror_path$ nil$) nil$))
(assert (= (odd_mirror_path$ nil$) nil$))
(assert (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 Dir_dir_list_fun$)) (! (= (bind$ nil$ ?v0) nil$) :pattern ((bind$ nil$ ?v0)))))
(assert (forall ((?v0 Dir$)) (! (= (fun_app$a (insert$ ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 Dir_bool_fun$)) (! (= (fun_app$bg (list_ex1$ ?v0) nil$) false) :pattern ((list_ex1$ ?v0)))))
(assert (= (sublists$ nil$) (cons$a nil$ nil$a)))
(assert (= (product_lists$ nil$a) (cons$a nil$ nil$a)))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (= (even_mirror_path$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (= ?v1 (cons$ (fun_app$bd (fun_app$be (case_dir$b r$) l$) ?v2) (odd_mirror_path$ ?v3)))) false) ))) false) ))
(assert (not (= l$ r$)))
(assert (forall ((?v0 Dir$)) (=> (and (=> (= ?v0 l$) false) (=> (= ?v0 r$) false)) false) ))
(assert (forall ((?v0 Dir$) (?v1 Dir$)) (! (= (fun_app$bd (fun_app$be (case_dir$b ?v0) ?v1) r$) ?v1) :pattern ((fun_app$be (case_dir$b ?v0) ?v1)))))
(assert (forall ((?v0 Dir$) (?v1 Dir$)) (! (= (fun_app$bd (fun_app$be (case_dir$b ?v0) ?v1) l$) ?v0) :pattern ((fun_app$be (case_dir$b ?v0) ?v1)))))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (= (even_mirror_path$ (cons$ ?v0 ?v1)) (cons$ (fun_app$bd (fun_app$be (case_dir$b r$) l$) ?v0) (odd_mirror_path$ ?v1))) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir$) (?v2 Dir_list$)) (! (= (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) nil$) false) :pattern ((fun_app$bh (lexordp_eq$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir$) (?v2 Dir_list$) (?v3 Dir$) (?v4 Dir_list$)) (! (= (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$bi (fun_app$bj ?v0 ?v1) ?v3) (and (not (fun_app$bi (fun_app$bj ?v0 ?v3) ?v1)) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$)) (! (= (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) nil$) ?v1) true) :pattern ((fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$)) (! (= (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$bh (lexordp_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$)) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) nil$) ?v1) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir$) (?v2 Dir$) (?v3 Dir_list$) (?v4 Dir_list$)) (=> (fun_app$bi (fun_app$bj ?v0 ?v1) ?v2) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir$) (?v2 Dir$) (?v3 Dir_list$) (?v4 Dir_list$)) (=> (and (not (fun_app$bi (fun_app$bj ?v0 ?v1) ?v2)) (and (not (fun_app$bi (fun_app$bj ?v0 ?v2) ?v1)) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$) (?v2 Dir_list$)) (= (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dir_list$)) (and (= ?v1 nil$) (= ?v2 ?v3)) ) (or (exists ((?v3 Dir$) (?v4 Dir$) (?v5 Dir_list$) (?v6 Dir_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4))) ) (exists ((?v3 Dir$) (?v4 Dir$) (?v5 Dir_list$) (?v6 Dir_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4)) (and (not (fun_app$bi (fun_app$bj ?v0 ?v4) ?v3)) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dir_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false) ) (and (forall ((?v3 Dir$) (?v4 Dir$) (?v5 Dir_list$) (?v6 Dir_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4))) false) ) (forall ((?v3 Dir$) (?v4 Dir$) (?v5 Dir_list$) (?v6 Dir_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4)) (and (not (fun_app$bi (fun_app$bj ?v0 ?v4) ?v3)) (fun_app$bg (fun_app$bh (lexordp_eq$ ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (fun_app$bg (fun_app$bh (listrelp$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$)) false) (forall ((?v3 Dir$) (?v4 Dir$) (?v5 Dir_list$) (?v6 Dir_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4) (fun_app$bg (fun_app$bh (listrelp$ ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir_list$) (?v2 Dir_list$)) (= (fun_app$bg (fun_app$bh (listrelp$ ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$)) (exists ((?v3 Dir$) (?v4 Dir$) (?v5 Dir_list$) (?v6 Dir_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4) (fun_app$bg (fun_app$bh (listrelp$ ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$) (?v1 Dir$) (?v2 Dir$) (?v3 Dir_list$) (?v4 Dir_list$)) (=> (and (fun_app$bi (fun_app$bj ?v0 ?v1) ?v2) (fun_app$bg (fun_app$bh (listrelp$ ?v0) ?v3) ?v4)) (fun_app$bg (fun_app$bh (listrelp$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 Dir_dir_bool_fun_fun$)) (fun_app$bg (fun_app$bh (listrelp$ ?v0) nil$) nil$) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (= (even_mirror_path$ ?v0) ?v1) (and (accp$ even_mirror_path_odd_mirror_path_rel$ (inl$ ?v0)) (and (=> (and (= ?v0 nil$) (and (= ?v1 nil$) (accp$ even_mirror_path_odd_mirror_path_rel$ (inl$ nil$)))) false) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ (fun_app$bd (fun_app$be (case_dir$b r$) l$) ?v2) (odd_mirror_path$ ?v3))) (accp$ even_mirror_path_odd_mirror_path_rel$ (inl$ (cons$ ?v2 ?v3))))) false) )))) false) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (= (odd_mirror_path$ ?v0) ?v1) (and (accp$ even_mirror_path_odd_mirror_path_rel$ (inr$ ?v0)) (and (=> (and (= ?v0 nil$) (and (= ?v1 nil$) (accp$ even_mirror_path_odd_mirror_path_rel$ (inr$ nil$)))) false) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (and (= ?v1 (cons$ ?v2 (even_mirror_path$ ?v3))) (accp$ even_mirror_path_odd_mirror_path_rel$ (inr$ (cons$ ?v2 ?v3))))) false) )))) false) ))
(assert (forall ((?v0 Dir_dir_fun$) (?v1 Dir_list$) (?v2 Dir_list$) (?v3 Dir_list$)) (=> (and (= (map_tailrec_rev$ ?v0 ?v1 ?v2) ?v3) (and (forall ((?v4 Dir_dir_fun$) (?v5 Dir_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 Dir_dir_fun$) (?v5 Dir$) (?v6 Dir_list$) (?v7 Dir_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$ ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (map_tailrec_rev$ ?v4 ?v6 (cons$ (fun_app$bd ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (inr$ ?v0) (inl$ ?v1)) false) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (inl$ ?v0) (inr$ ?v1)) false) ))
(assert (forall ((?v0 Dir_dir_fun$) (?v1 Dir$) (?v2 Dir_list$) (?v3 Dir_list$)) (! (= (map_tailrec_rev$ ?v0 (cons$ ?v1 ?v2) ?v3) (map_tailrec_rev$ ?v0 ?v2 (cons$ (fun_app$bd ?v0 ?v1) ?v3))) :pattern ((map_tailrec_rev$ ?v0 (cons$ ?v1 ?v2) ?v3)))))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (! (= (fun_app$a (splice$ (cons$ ?v0 ?v1)) nil$) (cons$ ?v0 ?v1)) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (= (fun_app$a (splice$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dir_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (and (forall ((?v3 Dir$) (?v4 Dir_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4)))) false) ) (forall ((?v3 Dir$) (?v4 Dir_list$) (?v5 Dir$) (?v6 Dir_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (cons$ ?v3 (cons$ ?v5 (fun_app$a (splice$ ?v4) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 Dir_list$)) (! (= (fun_app$a (splice$ ?v0) nil$) ?v0) :pattern ((splice$ ?v0)))))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir$) (?v3 Dir_list$)) (! (= (fun_app$a (splice$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (cons$ ?v0 (cons$ ?v2 (fun_app$a (splice$ ?v1) ?v3)))) :pattern ((fun_app$a (splice$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 Dir_list$)) (! (= (fun_app$a (splice$ nil$) ?v0) ?v0) :pattern ((fun_app$a (splice$ nil$) ?v0)))))
(assert (forall ((?v0 Dir_list$)) (! (= (rev$ ?v0) (fold$ uuc$ ?v0 nil$)) :pattern ((rev$ ?v0)))))
(assert (forall ((?v0 Dir_list$)) (= (= nil$ (rev$ ?v0)) (= ?v0 nil$)) ))
(assert (forall ((?v0 Dir_list$)) (= (= (rev$ ?v0) nil$) (= ?v0 nil$)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir$)) (= (= (rev$ ?v0) (cons$ ?v1 nil$)) (= ?v0 (cons$ ?v1 nil$))) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (= (= (cons$ ?v0 nil$) (rev$ ?v1)) (= ?v1 (cons$ ?v0 nil$))) ))
(assert (= (rev$ nil$) nil$))
(assert (forall ((?v0 Dir_list$) (?v1 Dir$) (?v2 Dir_list$)) (= (= (rev$ ?v0) (cons$ ?v1 ?v2)) (= ?v0 (fun_app$a (append$ (rev$ ?v2)) (cons$ ?v1 nil$)))) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (fun_app$a (append$ ?v0) ?v1) ?v1) (= ?v0 nil$)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (fun_app$a (append$ ?v0) ?v1) ?v0) (= ?v1 nil$)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= ?v0 (fun_app$a (append$ ?v1) ?v0)) (= ?v1 nil$)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= ?v0 (fun_app$a (append$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= nil$ (fun_app$a (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (= (= (fun_app$a (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 Dir_list$)) (! (= (fun_app$a (append$ ?v0) nil$) ?v0) :pattern ((append$ ?v0)))))
(assert (forall ((?v0 Dir_list$) (?v1 Dir$) (?v2 Dir_list$) (?v3 Dir$)) (= (= (fun_app$a (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$a (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir$) (?v3 Dir_list$)) (= (= (fun_app$a (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 Dir_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$a (append$ ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir_list$) (?v3 Dir_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$a (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 Dir_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$a (append$ ?v4) ?v3))) ))) ))
(assert (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 Dir_list$) (?v2 Dir$)) (=> (= ?v0 (fun_app$a (append$ ?v1) (cons$ ?v2 nil$))) false) )) false) ))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 Dir$)) (fun_app$bg ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$bg ?v1 ?v3)) (fun_app$bg ?v1 (fun_app$a (append$ ?v3) (cons$ ?v2 nil$)))) ))) (fun_app$bg ?v1 ?v0)) ))
(assert (forall ((?v0 Dir_list_bool_fun$) (?v1 Dir_list$)) (=> (and (fun_app$bg ?v0 nil$) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (fun_app$bg ?v0 ?v3) (fun_app$bg ?v0 (fun_app$a (append$ ?v3) (cons$ ?v2 nil$)))) )) (fun_app$bg ?v0 ?v1)) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir_list$) (?v3 Dir_list$) (?v4 Dir_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$a (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$a (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir_list$)) (! (= (fun_app$a (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$a (append$ ?v1) ?v2))) :pattern ((fun_app$a (append$ (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 Dir_list$)) (! (= (fun_app$a (append$ nil$) ?v0) ?v0) :pattern ((fun_app$a (append$ nil$) ?v0)))))
(assert (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$a (append$ nil$) ?v1))) ))
(check-sat)
(exit)

