(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort C_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_c_fun$ 0)
(declare-sort B_a_llist_fun$ 0)
(declare-sort B_b_llist_fun$ 0)
(declare-sort B_llist_a_fun$ 0)
(declare-sort B_llist_b_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort C_a_llist_fun$ 0)
(declare-sort C_b_llist_fun$ 0)
(declare-sort C_c_llist_fun$ 0)
(declare-sort B_a_a_prod_fun$ 0)
(declare-sort C_a_a_prod_fun$ 0)
(declare-sort C_b_b_prod_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_a_fun_bool_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort C_c_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_b_fun_fun$ 0)
(declare-sort A_a_fun_c_a_fun_fun$ 0)
(declare-sort A_a_fun_c_b_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort A_b_fun_b_a_fun_fun$ 0)
(declare-sort A_b_fun_c_a_fun_fun$ 0)
(declare-sort A_c_fun_a_a_fun_fun$ 0)
(declare-sort A_c_fun_a_b_fun_fun$ 0)
(declare-sort A_c_fun_b_a_fun_fun$ 0)
(declare-sort A_c_fun_b_b_fun_fun$ 0)
(declare-sort A_c_fun_c_a_fun_fun$ 0)
(declare-sort A_c_fun_c_b_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_b_llist_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_a_fun_c_a_fun_fun$ 0)
(declare-sort B_a_fun_c_b_fun_fun$ 0)
(declare-sort B_a_llist_llist_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_c_a_fun_fun$ 0)
(declare-sort B_c_fun_a_a_fun_fun$ 0)
(declare-sort B_c_fun_a_b_fun_fun$ 0)
(declare-sort B_c_fun_b_a_fun_fun$ 0)
(declare-sort B_c_fun_b_b_fun_fun$ 0)
(declare-sort B_c_fun_c_a_fun_fun$ 0)
(declare-sort B_c_fun_c_b_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort C_a_fun_c_a_fun_fun$ 0)
(declare-sort C_a_fun_c_b_fun_fun$ 0)
(declare-sort C_a_llist_llist_fun$ 0)
(declare-sort C_b_fun_c_a_fun_fun$ 0)
(declare-sort C_b_fun_c_b_fun_fun$ 0)
(declare-sort C_b_llist_llist_fun$ 0)
(declare-sort C_c_fun_c_a_fun_fun$ 0)
(declare-sort C_c_fun_c_b_fun_fun$ 0)
(declare-sort C_llist_a_llist_fun$ 0)
(declare-sort C_llist_b_llist_fun$ 0)
(declare-sort C_a_a_llist_prod_fun$ 0)
(declare-sort C_a_llist_a_prod_fun$ 0)
(declare-sort C_b_b_llist_prod_fun$ 0)
(declare-sort C_b_llist_b_prod_fun$ 0)
(declare-sort B_b_prod_a_a_prod_fun$ 0)
(declare-sort C_c_prod_a_a_prod_fun$ 0)
(declare-sort C_c_prod_b_b_prod_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort B_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_bool_fun_fun$ 0)
(declare-sort Bool_bool_bool_fun_fun$ 0)
(declare-sort A_c_fun_b_b_llist_fun_fun$ 0)
(declare-sort A_c_fun_c_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist_c_fun_c_a_fun_fun$ 0)
(declare-sort B_a_fun_b_a_llist_fun_fun$ 0)
(declare-sort B_a_llist_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_a_llist_fun_fun$ 0)
(declare-sort B_llist_b_fun_c_a_fun_fun$ 0)
(declare-sort B_llist_b_llist_llist_fun$ 0)
(declare-sort C_a_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_a_fun_fun$ 0)
(declare-sort C_b_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_b_fun_c_b_llist_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_a_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_b_fun_fun$ 0)
(declare-sort C_c_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_c_fun_c_b_llist_fun_fun$ 0)
(declare-sort C_c_fun_c_c_llist_fun_fun$ 0)
(declare-sort C_a_llist_a_llist_prod_fun$ 0)
(declare-sort C_b_llist_b_llist_prod_fun$ 0)
(declare-sort C_c_prod_a_a_llist_prod_fun$ 0)
(declare-sort C_c_prod_a_llist_a_prod_fun$ 0)
(declare-sort C_c_prod_b_b_llist_prod_fun$ 0)
(declare-sort C_c_prod_b_llist_b_prod_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_bool_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort C_a_fun_c_a_fun_bool_fun_fun$ 0)
(declare-sort C_a_fun_c_b_fun_bool_fun_fun$ 0)
(declare-sort C_b_fun_c_a_fun_bool_fun_fun$ 0)
(declare-sort C_b_fun_c_b_fun_bool_fun_fun$ 0)
(declare-sort C_c_fun_c_c_fun_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_c_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_b_a_fun_c_a_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_c_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_b_a_fun_c_b_fun_fun_fun$ 0)
(declare-sort A_llist_c_fun_b_llist_b_fun_fun$ 0)
(declare-sort A_llist_c_fun_c_a_llist_fun_fun$ 0)
(declare-sort B_a_fun_a_b_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_a_b_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_llist_a_llist_fun_fun$ 0)
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_a_llist_fun_b_a_llist_fun_fun$ 0)
(declare-sort B_b_llist_fun_b_a_llist_fun_fun$ 0)
(declare-sort B_b_llist_fun_c_a_llist_fun_fun$ 0)
(declare-sort B_llist_b_fun_b_llist_a_fun_fun$ 0)
(declare-sort B_llist_llist_a_llist_llist_fun$ 0)
(declare-sort C_a_fun_a_c_fun_a_a_fun_fun_fun$ 0)
(declare-sort C_a_fun_a_c_fun_b_a_fun_fun_fun$ 0)
(declare-sort C_a_fun_a_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort C_a_fun_b_c_fun_a_a_fun_fun_fun$ 0)
(declare-sort C_a_fun_b_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_b_llist_fun_fun$ 0)
(declare-sort C_b_fun_a_c_fun_b_b_fun_fun_fun$ 0)
(declare-sort C_b_fun_a_c_fun_c_b_fun_fun_fun$ 0)
(declare-sort C_b_fun_b_c_fun_a_b_fun_fun_fun$ 0)
(declare-sort C_b_fun_b_c_fun_c_b_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_b_llist_fun_fun$ 0)
(declare-sort C_c_fun_c_a_llist_llist_fun_fun$ 0)
(declare-sort C_c_fun_c_b_llist_llist_fun_fun$ 0)
(declare-sort C_c_llist_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_c_llist_fun_c_b_llist_fun_fun$ 0)
(declare-sort B_llist_a_llist_a_llist_prod_fun$ 0)
(declare-sort B_b_llist_prod_a_a_llist_prod_fun$ 0)
(declare-sort B_llist_b_prod_a_llist_a_prod_fun$ 0)
(declare-sort C_c_prod_a_llist_a_llist_prod_fun$ 0)
(declare-sort C_c_prod_b_llist_b_llist_prod_fun$ 0)
(declare-sort C_a_fun_c_a_llist_fun_bool_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_a_fun_bool_fun_fun$ 0)
(declare-sort C_b_fun_c_b_llist_fun_bool_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_b_fun_bool_fun_fun$ 0)
(declare-sort C_bool_fun_c_bool_fun_bool_fun_fun$ 0)
(declare-sort A_llist_c_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_llist_b_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_llist_a_fun_b_llist_a_llist_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_b_llist_a_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_c_a_llist_fun_fun$ 0)
(declare-sort C_a_fun_a_llist_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_c_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_b_llist_llist_fun_fun$ 0)
(declare-sort C_c_fun_c_c_fun_c_c_llist_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_b_a_fun_bool_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_a_llist_fun_bool_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_b_llist_fun_bool_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_a_llist_fun_bool_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_b_llist_fun_bool_fun_fun$ 0)
(declare-sort A_b_fun_b_a_fun_fun_a_b_fun_c_a_fun_fun_fun$ 0)
(declare-sort A_c_fun_a_a_fun_fun_a_c_fun_c_b_fun_fun_fun$ 0)
(declare-sort A_c_fun_b_a_fun_fun_a_c_fun_c_b_fun_fun_fun$ 0)
(declare-sort A_c_fun_b_b_fun_fun_a_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0)
(declare-sort B_c_fun_a_a_fun_fun_b_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_c_fun_a_a_fun_fun_b_c_fun_c_b_fun_fun_fun$ 0)
(declare-sort B_c_fun_a_b_fun_fun_b_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort C_a_llist_fun_a_c_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort C_b_fun_a_llist_c_fun_b_llist_b_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_a_c_fun_b_b_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_llist_fun_c_a_llist_llist_fun_fun$ 0)
(declare-sort C_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun$ 0)
(declare-sort B_llist_b_llist_prod_a_llist_a_llist_prod_fun$ 0)
(declare-sort C_a_llist_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_b_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort C_b_fun_c_a_fun_fun_c_b_fun_c_a_fun_fun_bool_fun_fun$ 0)
(declare-sort A_c_fun_b_b_llist_fun_fun_a_c_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_b_b_llist_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort C_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_a_llist_c_fun_b_llist_b_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ 0)
(declare-sort B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun$ 0)
(declare-sort A_llist_c_fun_b_llist_b_fun_fun_a_llist_c_fun_c_a_fun_fun_fun$ 0)
(declare-sort B_llist_a_fun_b_llist_b_llist_fun_b_llist_a_llist_fun_fun_fun$ 0)
(declare-sort B_llist_a_llist_fun_b_llist_b_llist_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort B_llist_b_fun_b_llist_b_llist_fun_b_llist_b_llist_fun_fun_fun$ 0)
(declare-sort C_b_fun_c_a_fun_fun_c_b_llist_fun_c_a_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_a_llist_fun_fun_c_b_fun_c_a_fun_fun_bool_fun_fun$ 0)
(declare-sort C_c_fun_c_a_llist_fun_fun_c_c_fun_c_a_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort C_c_fun_c_a_llist_fun_fun_c_c_fun_c_b_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort C_c_fun_c_b_llist_fun_fun_c_c_fun_c_a_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort C_c_fun_c_b_llist_fun_fun_c_c_fun_c_b_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun$ 0)
(declare-sort C_c_fun_c_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort A_llist_c_fun_b_llist_b_llist_fun_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_a_llist_fun_fun_c_b_llist_fun_c_a_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_bool_fun_c_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort B_llist_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun lNil$a () B_llist$)
(declare-fun lhd$a (B_llist$) B$)
(declare-fun ltl$a (B_llist$) B_llist$)
(declare-fun lCons$a (B$ B_llist$) B_llist$)
(declare-fun lNil$b () B_llist_llist$)
(declare-fun lhd$b (B_llist_llist$) B_llist$)
(declare-fun ltl$b (B_llist_llist$) B_llist_llist$)
(declare-fun lCons$b (B_llist$ B_llist_llist$) B_llist_llist$)
(declare-fun lNil$c () A_llist_llist$)
(declare-fun lhd$c (A_llist_llist$) A_llist$)
(declare-fun ltl$c (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$c (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lNil$d () C_llist$)
(declare-fun lhd$d (C_llist$) C$)
(declare-fun ltl$d (C_llist$) C_llist$)
(declare-fun lCons$d (C$ C_llist$) C_llist$)
(declare-sort B_b_llist_prod$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort A_a_llist_prod$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-sort A_llist_a_prod$ 0)
(declare-sort B_llist_b_prod$ 0)
(declare-sort B_llist_b_llist_prod$ 0)
(declare-sort C_c_prod$ 0)
(declare-fun fst$ (B_b_llist_prod$) B$)
(declare-fun snd$ (B_b_llist_prod$) B_llist$)
(declare-fun pair$ (B$ B_llist$) B_b_llist_prod$)
(declare-fun fst$a (B_b_prod$) B$)
(declare-fun snd$a (B_b_prod$) B$)
(declare-fun pair$a (B$ B$) B_b_prod$)
(declare-fun fst$b (A_a_llist_prod$) A$)
(declare-fun snd$b (A_a_llist_prod$) A_llist$)
(declare-fun pair$b (A$ A_llist$) A_a_llist_prod$)
(declare-fun fst$c (A_a_prod$) A$)
(declare-fun snd$c (A_a_prod$) A$)
(declare-fun pair$c (A$ A$) A_a_prod$)
(declare-fun fst$d (A_llist_a_llist_prod$) A_llist$)
(declare-fun snd$d (A_llist_a_llist_prod$) A_llist$)
(declare-fun pair$d (A_llist$ A_llist$) A_llist_a_llist_prod$)
(declare-fun fst$e (A_llist_a_prod$) A_llist$)
(declare-fun snd$e (A_llist_a_prod$) A$)
(declare-fun pair$e (A_llist$ A$) A_llist_a_prod$)
(declare-fun fst$f (B_llist_b_prod$) B_llist$)
(declare-fun snd$f (B_llist_b_prod$) B$)
(declare-fun pair$f (B_llist$ B$) B_llist_b_prod$)
(declare-fun fst$g (B_llist_b_llist_prod$) B_llist$)
(declare-fun snd$g (B_llist_b_llist_prod$) B_llist$)
(declare-fun pair$g (B_llist$ B_llist$) B_llist_b_llist_prod$)
(declare-fun fst$h (C_c_prod$) C$)
(declare-fun snd$h (C_c_prod$) C$)
(declare-fun pair$h (C$ C$) C_c_prod$)
(declare-fun b$ () C$)
(declare-fun f$ () B_a_fun$)
(declare-fun id$ () A_a_fun$)
(declare-fun uu$ (B_set$) B_bool_fun$)
(declare-fun id$a () A_llist_a_llist_fun$)
(declare-fun uua$ () B_llist_bool_fun$)
(declare-fun uub$ () B_llist_b_fun$)
(declare-fun uuc$ () B_llist_b_llist_fun$)
(declare-fun uud$ () C_c_bool_fun_fun$)
(declare-fun uue$ () Bool_bool_bool_fun_fun$)
(declare-fun uuf$ () C_bool_fun$)
(declare-fun uug$ () B_a_fun_b_a_fun_bool_fun_fun$)
(declare-fun uuh$ () B_b_bool_fun_fun$)
(declare-fun uui$ () A_a_bool_fun_fun$)
(declare-fun uuj$ () B_llist_a_llist_fun_b_llist_a_llist_fun_bool_fun_fun$)
(declare-fun uuk$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uul$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uum$ (A$) B_a_fun$)
(declare-fun uun$ (A_llist$) B_llist_a_llist_fun$)
(declare-fun comp$ () B_a_fun_c_b_fun_c_a_fun_fun_fun$)
(declare-fun lhd$e () C_b_fun$)
(declare-fun lmap$ () B_a_fun_b_llist_a_llist_fun_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun comp$a () B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$)
(declare-fun comp$b (B_llist_b_llist_fun$) C_b_llist_fun_c_b_llist_fun_fun$)
(declare-fun comp$c (B_b_fun$) C_b_fun_c_b_fun_fun$)
(declare-fun comp$d (A_llist_b_llist_fun$) C_a_llist_fun_c_b_llist_fun_fun$)
(declare-fun comp$e (A_b_fun$) C_a_fun_c_b_fun_fun$)
(declare-fun comp$f (A_llist_a_llist_fun$) C_a_llist_fun_c_a_llist_fun_fun$)
(declare-fun comp$g (A_a_fun$) C_a_fun_c_a_fun_fun$)
(declare-fun comp$h (B_llist_llist_a_llist_llist_fun$) C_b_llist_llist_fun_c_a_llist_llist_fun_fun$)
(declare-fun comp$i (A_llist_a_llist_fun$) B_a_llist_fun_b_a_llist_fun_fun$)
(declare-fun comp$j (A_a_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun comp$k (C_llist_b_llist_fun$) C_c_llist_fun_c_b_llist_fun_fun$)
(declare-fun comp$l (C_b_fun$) C_c_fun_c_b_fun_fun$)
(declare-fun comp$m (C_llist_a_llist_fun$) C_c_llist_fun_c_a_llist_fun_fun$)
(declare-fun comp$n (C_a_fun$) C_c_fun_c_a_fun_fun$)
(declare-fun comp$o (A_llist_a_llist_llist_fun$ B_a_llist_fun$) B_a_llist_llist_fun$)
(declare-fun comp$p (A_a_llist_fun$) B_a_fun_b_a_llist_fun_fun$)
(declare-fun comp$q (B_llist_b_llist_llist_fun$) C_b_llist_fun_c_b_llist_llist_fun_fun$)
(declare-fun comp$r (B_b_llist_fun$) C_b_fun_c_b_llist_fun_fun$)
(declare-fun comp$s (B_a_fun$) B_b_fun_b_a_fun_fun$)
(declare-fun comp$t (B_a_fun$) A_b_fun_a_a_fun_fun$)
(declare-fun comp$u (C_b_fun$) B_c_fun_b_b_fun_fun$)
(declare-fun comp$v (C_b_fun$) A_c_fun_a_b_fun_fun$)
(declare-fun comp$w (C_a_fun$) B_c_fun_b_a_fun_fun$)
(declare-fun comp$x (A_a_llist_fun$) C_a_fun_c_a_llist_fun_fun$)
(declare-fun comp$y (B_a_fun$) B_llist_b_fun_b_llist_a_fun_fun$)
(declare-fun comp$z (C_b_llist_fun$) C_c_fun_c_b_llist_fun_fun$)
(declare-fun image$ (B_a_fun$ B_set$) A_set$)
(declare-fun lmap$a (B_b_fun$) B_llist_b_llist_fun$)
(declare-fun lmap$b (A_b_fun$) A_llist_b_llist_fun$)
(declare-fun lmap$c (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lmap$d (B_llist_a_llist_fun$) B_llist_llist_a_llist_llist_fun$)
(declare-fun lmap$e (C_b_fun$) C_llist_b_llist_fun$)
(declare-fun lmap$f (C_a_fun$) C_llist_a_llist_fun$)
(declare-fun lmap$g (A_a_llist_fun$) A_llist_a_llist_llist_fun$)
(declare-fun lmap$h (B_b_llist_fun$) B_llist_b_llist_llist_fun$)
(declare-fun lmap$i (C_b_llist_fun$ C_llist$) B_llist_llist$)
(declare-fun lmap$j (C_a_llist_fun$ C_llist$) A_llist_llist$)
(declare-fun lmap$k (C_c_fun$ C_llist$) C_llist$)
(declare-fun lmap$l (B_c_fun$ B_llist$) C_llist$)
(declare-fun lmap$m (A_c_fun$ A_llist$) C_llist$)
(declare-fun lnull$ (B_llist$) Bool)
(declare-fun lset$a (B_llist$) B_set$)
(declare-fun comp$aa (C_a_llist_fun$) C_c_fun_c_a_llist_fun_fun$)
(declare-fun comp$ab (A_llist_a_llist_fun$) B_llist_a_llist_fun_b_llist_a_llist_fun_fun$)
(declare-fun comp$ac (B_llist_a_llist_fun$) B_llist_b_llist_fun_b_llist_a_llist_fun_fun$)
(declare-fun comp$ad (B_b_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun comp$ae (A_b_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun comp$af (B_llist_a_fun$) C_b_llist_fun_c_a_fun_fun$)
(declare-fun comp$ag (A_a_llist_fun$) B_llist_a_fun_b_llist_a_llist_fun_fun$)
(declare-fun comp$ah (B_a_llist_fun$) C_b_fun_c_a_llist_fun_fun$)
(declare-fun comp$ai (A_llist_a_fun$) B_llist_a_llist_fun_b_llist_a_fun_fun$)
(declare-fun comp$aj (A_llist_a_fun$) B_a_llist_fun_b_a_fun_fun$)
(declare-fun comp$ak (B_llist_a_llist_fun$) B_b_llist_fun_b_a_llist_fun_fun$)
(declare-fun comp$al (B_llist_b_fun$) C_b_llist_fun_c_b_fun_fun$)
(declare-fun comp$am (A_llist_a_fun$) C_a_llist_fun_c_a_fun_fun$)
(declare-fun comp$an (A_b_fun$) A_a_fun_a_b_fun_fun$)
(declare-fun comp$ao (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$ap (B_b_fun_c_a_fun_fun$) A_c_fun_b_b_fun_fun_a_c_fun_c_a_fun_fun_fun$)
(declare-fun comp$aq (B_b_llist_fun_c_a_llist_fun_fun$) A_c_fun_b_b_llist_fun_fun_a_c_fun_c_a_llist_fun_fun_fun$)
(declare-fun comp$ar (B_llist_b_fun_c_a_fun_fun$) A_llist_c_fun_b_llist_b_fun_fun_a_llist_c_fun_c_a_fun_fun_fun$)
(declare-fun comp$as (B_llist_b_llist_fun_c_a_llist_fun_fun$) A_llist_c_fun_b_llist_b_llist_fun_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$)
(declare-fun comp$at (B_a_fun_c_b_fun_fun$) A_c_fun_b_a_fun_fun_a_c_fun_c_b_fun_fun_fun$)
(declare-fun comp$au (B_a_fun_c_a_fun_fun$) A_b_fun_b_a_fun_fun_a_b_fun_c_a_fun_fun_fun$)
(declare-fun comp$av (A_b_fun_c_a_fun_fun$) B_c_fun_a_b_fun_fun_b_c_fun_c_a_fun_fun_fun$)
(declare-fun comp$aw (A_a_fun_c_b_fun_fun$) B_c_fun_a_a_fun_fun_b_c_fun_c_b_fun_fun_fun$)
(declare-fun comp$ax (A_a_fun_c_a_fun_fun$) B_c_fun_a_a_fun_fun_b_c_fun_c_a_fun_fun_fun$)
(declare-fun comp$ay (A_a_fun_c_b_fun_fun$) A_c_fun_a_a_fun_fun_a_c_fun_c_b_fun_fun_fun$)
(declare-fun comp$az (C_b_b_llist_prod_fun$ C_c_fun$) C_b_b_llist_prod_fun$)
(declare-fun comp$ba (C_b_b_prod_fun$ C_c_fun$) C_b_b_prod_fun$)
(declare-fun comp$bb (C_a_a_llist_prod_fun$ C_c_fun$) C_a_a_llist_prod_fun$)
(declare-fun comp$bc (C_a_a_prod_fun$ C_c_fun$) C_a_a_prod_fun$)
(declare-fun comp$bd (C_a_a_prod_fun$ B_c_fun$) B_a_a_prod_fun$)
(declare-fun comp$be (B_a_a_prod_fun$ B_b_fun$) B_a_a_prod_fun$)
(declare-fun comp$bf (B_a_a_prod_fun$ C_b_fun$) C_a_a_prod_fun$)
(declare-fun comp$bg (B_llist_a_llist_a_llist_prod_fun$ C_b_llist_fun$) C_a_llist_a_llist_prod_fun$)
(declare-fun comp$bh (B_b_prod_a_a_prod_fun$ C_b_b_prod_fun$) C_a_a_prod_fun$)
(declare-fun comp$bi (B_b_llist_prod_a_a_llist_prod_fun$ C_b_b_llist_prod_fun$) C_a_a_llist_prod_fun$)
(declare-fun comp$bj (B_llist_b_prod_a_llist_a_prod_fun$ C_b_llist_b_prod_fun$) C_a_llist_a_prod_fun$)
(declare-fun comp$bk (B_llist_b_llist_prod_a_llist_a_llist_prod_fun$ C_b_llist_b_llist_prod_fun$) C_a_llist_a_llist_prod_fun$)
(declare-fun comp$bl (B_b_prod_a_a_prod_fun$ C_c_prod_b_b_prod_fun$) C_c_prod_a_a_prod_fun$)
(declare-fun comp$bm (B_b_llist_prod_a_a_llist_prod_fun$ C_c_prod_b_b_llist_prod_fun$) C_c_prod_a_a_llist_prod_fun$)
(declare-fun comp$bn (B_llist_b_prod_a_llist_a_prod_fun$ C_c_prod_b_llist_b_prod_fun$) C_c_prod_a_llist_a_prod_fun$)
(declare-fun comp$bo (B_llist_b_llist_prod_a_llist_a_llist_prod_fun$ C_c_prod_b_llist_b_llist_prod_fun$) C_c_prod_a_llist_a_llist_prod_fun$)
(declare-fun convol$ (C_b_fun$ C_b_llist_fun$) C_b_b_llist_prod_fun$)
(declare-fun image$a (C_b_fun$ C_set$) B_set$)
(declare-fun image$b (C_a_fun$ C_set$) A_set$)
(declare-fun image$c (B_llist_a_llist_fun$ B_llist_set$) A_llist_set$)
(declare-fun image$d (C_b_llist_fun$ C_set$) B_llist_set$)
(declare-fun image$e (C_a_llist_fun$ C_set$) A_llist_set$)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun lnull$b (B_llist_llist$) Bool)
(declare-fun lnull$c (A_llist_llist$) Bool)
(declare-fun lnull$d (C_llist$) Bool)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun collect$ (B_bool_fun$) B_set$)
(declare-fun convol$a (C_b_fun$ C_b_fun$) C_b_b_prod_fun$)
(declare-fun convol$b (C_a_fun$ C_a_llist_fun$) C_a_a_llist_prod_fun$)
(declare-fun convol$c (C_a_fun$ C_a_fun$) C_a_a_prod_fun$)
(declare-fun convol$d (B_a_fun$ B_a_fun$) B_a_a_prod_fun$)
(declare-fun convol$e (B_llist_a_llist_fun$ B_llist_a_llist_fun$) B_llist_a_llist_a_llist_prod_fun$)
(declare-fun convol$f (C_a_llist_fun$ C_a_llist_fun$) C_a_llist_a_llist_prod_fun$)
(declare-fun convol$g (C_b_llist_fun$ C_b_fun$) C_b_llist_b_prod_fun$)
(declare-fun convol$h (C_a_llist_fun$ C_a_fun$) C_a_llist_a_prod_fun$)
(declare-fun convol$i (C_b_llist_fun$ C_b_llist_fun$) C_b_llist_b_llist_prod_fun$)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun iS_LNIL$ () C_bool_fun$)
(declare-fun map_fun$ (C_b_fun$) B_a_fun_b_b_fun_c_a_fun_fun_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun rel_fun$ (B_a_fun_b_a_fun_bool_fun_fun$ C_b_fun_c_a_fun_fun_c_b_fun_c_a_fun_fun_bool_fun_fun$ B_a_fun_c_b_fun_c_a_fun_fun_fun$ B_a_fun_c_b_fun_c_a_fun_fun_fun$) Bool)
(declare-fun tTL_end$ () C_b_llist_fun$)
(declare-fun fun_app$a (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$b (B_llist_b_fun$ B_llist$) B$)
(declare-fun fun_app$c (B_bool_fun$ B$) Bool)
(declare-fun fun_app$d (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$g (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$h (Bool_bool_bool_fun_fun$ Bool) Bool_bool_fun$)
(declare-fun fun_app$i (B_llist_a_llist_fun_bool_fun$ B_llist_a_llist_fun$) Bool)
(declare-fun fun_app$j (B_llist_a_llist_fun_b_llist_a_llist_fun_bool_fun_fun$ B_llist_a_llist_fun$) B_llist_a_llist_fun_bool_fun$)
(declare-fun fun_app$k (B_a_fun_bool_fun$ B_a_fun$) Bool)
(declare-fun fun_app$l (B_a_fun_b_a_fun_bool_fun_fun$ B_a_fun$) B_a_fun_bool_fun$)
(declare-fun fun_app$m (C_bool_fun$ C$) Bool)
(declare-fun fun_app$n (C_c_bool_fun_fun$ C$) C_bool_fun$)
(declare-fun fun_app$o (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$p (A_bool_fun$ A$) Bool)
(declare-fun fun_app$q (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$r (B_llist_a_llist_fun$ B_llist$) A_llist$)
(declare-fun fun_app$s (B_a_fun$ B$) A$)
(declare-fun fun_app$t (B_a_fun_b_llist_a_llist_fun_fun$ B_a_fun$) B_llist_a_llist_fun$)
(declare-fun fun_app$u (C_b_llist_fun$ C$) B_llist$)
(declare-fun fun_app$v (C_c_fun_c_b_llist_fun_fun$ C_c_fun$) C_b_llist_fun$)
(declare-fun fun_app$w (C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ C_b_llist_fun$) C_c_fun_c_b_llist_fun_fun$)
(declare-fun fun_app$x (C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ C_bool_fun$) C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$)
(declare-fun fun_app$y (C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ C_b_fun$) C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$)
(declare-fun fun_app$z (C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$ C_bool_fun$) C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$)
(declare-fun map_fun$a (B_a_fun$) C_b_fun_a_c_fun_b_b_fun_fun_fun$)
(declare-fun map_fun$b (C_a_fun$) C_a_fun_a_c_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$c (C_b_fun$) B_llist_a_llist_fun_b_b_llist_fun_c_a_llist_fun_fun_fun$)
(declare-fun map_fun$d (B_a_fun$) C_b_llist_fun_a_c_fun_b_b_llist_fun_fun_fun$)
(declare-fun map_fun$e (C_a_fun$) C_a_llist_fun_a_c_fun_c_a_llist_fun_fun_fun$)
(declare-fun map_fun$f (C_b_llist_fun$) B_a_fun_b_llist_b_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$g (B_llist_a_llist_fun$) C_b_fun_a_llist_c_fun_b_llist_b_fun_fun_fun$)
(declare-fun map_fun$h (C_a_llist_fun$) C_a_fun_a_llist_c_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$i (C_b_llist_fun$) B_llist_a_llist_fun_b_llist_b_llist_fun_c_a_llist_fun_fun_fun$)
(declare-fun map_fun$j (B_llist_a_llist_fun$) C_b_llist_fun_a_llist_c_fun_b_llist_b_llist_fun_fun_fun$)
(declare-fun map_fun$k (C_a_llist_fun$) C_a_llist_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$)
(declare-fun map_fun$l (C_b_fun$) A_b_fun_b_a_fun_c_b_fun_fun_fun$)
(declare-fun map_fun$m (B_a_fun$) C_a_fun_a_c_fun_b_a_fun_fun_fun$)
(declare-fun map_fun$n (C_a_fun$) C_b_fun_a_c_fun_c_b_fun_fun_fun$)
(declare-fun map_fun$o (C_b_fun$) A_a_fun_b_a_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$p (B_a_fun$) B_a_fun_a_b_fun_b_a_fun_fun_fun$)
(declare-fun map_fun$q (C_a_fun$) B_a_fun_a_b_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$r (A_b_fun$) C_b_fun_b_c_fun_a_b_fun_fun_fun$)
(declare-fun map_fun$s (C_b_fun$) C_a_fun_b_c_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$t (C_a_fun$) A_b_fun_a_a_fun_c_b_fun_fun_fun$)
(declare-fun map_fun$u (A_b_fun$) C_a_fun_b_c_fun_a_a_fun_fun_fun$)
(declare-fun map_fun$v (C_b_fun$) C_b_fun_b_c_fun_c_b_fun_fun_fun$)
(declare-fun map_fun$w (C_a_fun$) A_a_fun_a_a_fun_c_a_fun_fun_fun$)
(declare-fun map_fun$x (A_a_fun$) C_a_fun_a_c_fun_a_a_fun_fun_fun$)
(declare-fun map_prod$ (B_a_fun$ B_a_fun$) B_b_prod_a_a_prod_fun$)
(declare-fun rel_fun$a (B_b_bool_fun_fun$ A_a_bool_fun_fun$) B_a_fun_b_a_fun_bool_fun_fun$)
(declare-fun rel_fun$b (C_b_fun_c_b_fun_bool_fun_fun$ C_a_fun_c_a_fun_bool_fun_fun$) C_b_fun_c_a_fun_fun_c_b_fun_c_a_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$c (C_c_bool_fun_fun$ B_b_bool_fun_fun$) C_b_fun_c_b_fun_bool_fun_fun$)
(declare-fun rel_fun$d (C_c_bool_fun_fun$ A_a_bool_fun_fun$) C_a_fun_c_a_fun_bool_fun_fun$)
(declare-fun rel_fun$e (B_a_fun_b_llist_a_llist_fun_bool_fun_fun$ C_b_fun_c_a_fun_fun_c_b_llist_fun_c_a_llist_fun_fun_bool_fun_fun$ B_a_fun_c_b_fun_c_a_fun_fun_fun$ B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$) Bool)
(declare-fun rel_fun$f (B_b_llist_bool_fun_fun$ A_a_llist_bool_fun_fun$) B_a_fun_b_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$g (C_b_fun_c_b_llist_fun_bool_fun_fun$ C_a_fun_c_a_llist_fun_bool_fun_fun$) C_b_fun_c_a_fun_fun_c_b_llist_fun_c_a_llist_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$h (C_c_bool_fun_fun$ B_b_llist_bool_fun_fun$) C_b_fun_c_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$i (C_c_bool_fun_fun$ A_a_llist_bool_fun_fun$) C_a_fun_c_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$j (B_llist_a_llist_fun_b_a_fun_bool_fun_fun$ C_b_llist_fun_c_a_llist_fun_fun_c_b_fun_c_a_fun_fun_bool_fun_fun$ B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$ B_a_fun_c_b_fun_c_a_fun_fun_fun$) Bool)
(declare-fun rel_fun$k (B_llist_b_bool_fun_fun$ A_llist_a_bool_fun_fun$) B_llist_a_llist_fun_b_a_fun_bool_fun_fun$)
(declare-fun rel_fun$l (C_b_llist_fun_c_b_fun_bool_fun_fun$ C_a_llist_fun_c_a_fun_bool_fun_fun$) C_b_llist_fun_c_a_llist_fun_fun_c_b_fun_c_a_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$m (C_c_bool_fun_fun$ B_llist_b_bool_fun_fun$) C_b_llist_fun_c_b_fun_bool_fun_fun$)
(declare-fun rel_fun$n (C_c_bool_fun_fun$ A_llist_a_bool_fun_fun$) C_a_llist_fun_c_a_fun_bool_fun_fun$)
(declare-fun rel_fun$o (B_llist_a_llist_fun_b_llist_a_llist_fun_bool_fun_fun$ C_b_llist_fun_c_a_llist_fun_fun_c_b_llist_fun_c_a_llist_fun_fun_bool_fun_fun$ B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$ B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$) Bool)
(declare-fun rel_fun$p (B_llist_b_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) B_llist_a_llist_fun_b_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$q (C_b_llist_fun_c_b_llist_fun_bool_fun_fun$ C_a_llist_fun_c_a_llist_fun_bool_fun_fun$) C_b_llist_fun_c_a_llist_fun_fun_c_b_llist_fun_c_a_llist_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$r (C_c_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$) C_b_llist_fun_c_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$s (C_c_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) C_a_llist_fun_c_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$t (C_bool_fun_c_bool_fun_bool_fun_fun$ C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_bool_fun_fun$ C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$ C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$) Bool)
(declare-fun rel_fun$u (C_c_bool_fun_fun$ Bool_bool_bool_fun_fun$) C_bool_fun_c_bool_fun_bool_fun_fun$)
(declare-fun rel_fun$v (C_b_fun_c_b_fun_bool_fun_fun$ C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_bool_fun_fun$) C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$w (C_bool_fun_c_bool_fun_bool_fun_fun$ C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_bool_fun_fun$) C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$x (C_b_llist_fun_c_b_llist_fun_bool_fun_fun$ C_c_fun_c_b_llist_fun_fun_c_c_fun_c_b_llist_fun_fun_bool_fun_fun$) C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$y (C_c_fun_c_c_fun_bool_fun_fun$ C_b_llist_fun_c_b_llist_fun_bool_fun_fun$) C_c_fun_c_b_llist_fun_fun_c_c_fun_c_b_llist_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$z (C_c_bool_fun_fun$ C_c_bool_fun_fun$) C_c_fun_c_c_fun_bool_fun_fun$)
(declare-fun tTL_more$ () C_c_fun$)
(declare-fun endORmore$ () C_bool_fun$)
(declare-fun fun_app$aa (C_a_llist_fun$ C$) A_llist$)
(declare-fun fun_app$ab (C_c_fun_c_a_llist_fun_fun$ C_c_fun$) C_a_llist_fun$)
(declare-fun fun_app$ac (C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun$ C_a_llist_fun$) C_c_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$ad (C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun$ C_bool_fun$) C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun$)
(declare-fun fun_app$ae (C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun$ C_a_fun$) C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun$)
(declare-fun fun_app$af (C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$ C_bool_fun$) C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ag (C_b_fun_c_a_fun_fun$ C_b_fun$) C_a_fun$)
(declare-fun fun_app$ah (B_a_fun_c_b_fun_c_a_fun_fun_fun$ B_a_fun$) C_b_fun_c_a_fun_fun$)
(declare-fun fun_app$ai (C_b_llist_fun_c_a_llist_fun_fun$ C_b_llist_fun$) C_a_llist_fun$)
(declare-fun fun_app$aj (B_llist_a_llist_fun_c_b_llist_fun_c_a_llist_fun_fun_fun$ B_llist_a_llist_fun$) C_b_llist_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$ak (C_b_llist_fun_c_b_llist_fun_fun$ C_b_llist_fun$) C_b_llist_fun$)
(declare-fun fun_app$al (C_b_fun_c_b_fun_fun$ C_b_fun$) C_b_fun$)
(declare-fun fun_app$am (C_a_llist_fun_c_b_llist_fun_fun$ C_a_llist_fun$) C_b_llist_fun$)
(declare-fun fun_app$an (C_a_fun_c_b_fun_fun$ C_a_fun$) C_b_fun$)
(declare-fun fun_app$ao (C_a_llist_fun_c_a_llist_fun_fun$ C_a_llist_fun$) C_a_llist_fun$)
(declare-fun fun_app$ap (C_a_fun_c_a_fun_fun$ C_a_fun$) C_a_fun$)
(declare-fun fun_app$aq (C_b_llist_llist_fun_c_a_llist_llist_fun_fun$ C_b_llist_llist_fun$) C_a_llist_llist_fun$)
(declare-fun fun_app$ar (C_c_fun_c_b_llist_llist_fun_fun$ C_c_fun$) C_b_llist_llist_fun$)
(declare-fun fun_app$as (C_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ C_b_llist_llist_fun$) C_c_fun_c_b_llist_llist_fun_fun$)
(declare-fun fun_app$at (C_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun$ C_bool_fun$) C_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$)
(declare-fun fun_app$au (C_b_llist_fun_c_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun_fun$ C_b_llist_fun$) C_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun$)
(declare-fun fun_app$av (C_c_fun_c_a_llist_llist_fun_fun$ C_c_fun$) C_a_llist_llist_fun$)
(declare-fun fun_app$aw (C_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun$ C_a_llist_llist_fun$) C_c_fun_c_a_llist_llist_fun_fun$)
(declare-fun fun_app$ax (C_bool_fun_c_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun_fun$ C_bool_fun$) C_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun$)
(declare-fun fun_app$ay (C_a_llist_fun_c_bool_fun_c_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun_fun_fun$ C_a_llist_fun$) C_bool_fun_c_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun_fun$)
(declare-fun fun_app$az (B_a_llist_fun_b_a_llist_fun_fun$ B_a_llist_fun$) B_a_llist_fun$)
(declare-fun fun_app$ba (B_b_fun_b_a_llist_fun_fun$ B_b_fun$) B_a_llist_fun$)
(declare-fun fun_app$bb (B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_llist_fun$) B_b_fun_b_a_llist_fun_fun$)
(declare-fun fun_app$bc (B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ B_bool_fun$) B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$)
(declare-fun fun_app$bd (B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ B_a_fun$) B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$)
(declare-fun fun_app$be (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$bf (C_c_llist_fun_c_b_llist_fun_fun$ C_c_llist_fun$) C_b_llist_fun$)
(declare-fun fun_app$bg (C_c_fun_c_c_llist_fun_fun$ C_c_fun$) C_c_llist_fun$)
(declare-fun fun_app$bh (C_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun$ C_c_llist_fun$) C_c_fun_c_c_llist_fun_fun$)
(declare-fun fun_app$bi (C_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun$ C_bool_fun$) C_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun$)
(declare-fun fun_app$bj (C_c_fun_c_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun_fun$ C_c_fun$) C_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun$)
(declare-fun fun_app$bk (C_c_fun_c_b_fun_fun$ C_c_fun$) C_b_fun$)
(declare-fun fun_app$bl (C_c_llist_fun_c_a_llist_fun_fun$ C_c_llist_fun$) C_a_llist_fun$)
(declare-fun fun_app$bm (C_c_fun_c_a_fun_fun$ C_c_fun$) C_a_fun$)
(declare-fun fun_app$bn (B_a_fun_b_a_llist_fun_fun$ B_a_fun$) B_a_llist_fun$)
(declare-fun fun_app$bo (C_b_llist_fun_c_b_llist_llist_fun_fun$ C_b_llist_fun$) C_b_llist_llist_fun$)
(declare-fun fun_app$bp (C_b_fun_c_b_llist_fun_fun$ C_b_fun$) C_b_llist_fun$)
(declare-fun fun_app$bq (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$br (C_llist_b_llist_fun$ C_llist$) B_llist$)
(declare-fun fun_app$bs (C_llist_a_llist_fun$ C_llist$) A_llist$)
(declare-fun fun_app$bt (B_b_fun_b_a_fun_fun$ B_b_fun$) B_a_fun$)
(declare-fun fun_app$bu (B_llist_llist_a_llist_llist_fun$ B_llist_llist$) A_llist_llist$)
(declare-fun fun_app$bv (A_llist_b_llist_fun$ A_llist$) B_llist$)
(declare-fun fun_app$bw (A_b_fun_a_a_fun_fun$ A_b_fun$) A_a_fun$)
(declare-fun fun_app$bx (B_c_fun_b_b_fun_fun$ B_c_fun$) B_b_fun$)
(declare-fun fun_app$by (A_c_fun_a_b_fun_fun$ A_c_fun$) A_b_fun$)
(declare-fun fun_app$bz (B_c_fun_b_a_fun_fun$ B_c_fun$) B_a_fun$)
(declare-fun fun_app$ca (C_a_fun_c_a_llist_fun_fun$ C_a_fun$) C_a_llist_fun$)
(declare-fun fun_app$cb (A_a_llist_fun$ A$) A_llist$)
(declare-fun fun_app$cc (C_a_fun$ C$) A$)
(declare-fun fun_app$cd (B_a_llist_fun$ B$) A_llist$)
(declare-fun fun_app$ce (C_b_fun$ C$) B$)
(declare-fun fun_app$cf (A_b_fun$ A$) B$)
(declare-fun fun_app$cg (A_a_fun$ A$) A$)
(declare-fun fun_app$ch (C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ C_b_fun$) C_c_fun_c_b_llist_fun_fun$)
(declare-fun fun_app$ci (C_a_fun_c_c_fun_c_a_llist_fun_fun_fun$ C_a_fun$) C_c_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$cj (C_b_llist_llist_fun$ C$) B_llist_llist$)
(declare-fun fun_app$ck (C_b_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ C_b_llist_fun$) C_c_fun_c_b_llist_llist_fun_fun$)
(declare-fun fun_app$cl (C_a_llist_llist_fun$ C$) A_llist_llist$)
(declare-fun fun_app$cm (C_a_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun$ C_a_llist_fun$) C_c_fun_c_a_llist_llist_fun_fun$)
(declare-fun fun_app$cn (B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_fun$) B_b_fun_b_a_llist_fun_fun$)
(declare-fun fun_app$co (C_c_llist_fun$ C$) C_llist$)
(declare-fun fun_app$cp (C_c_fun_c_c_fun_c_c_llist_fun_fun_fun$ C_c_fun$) C_c_fun_c_c_llist_fun_fun$)
(declare-fun fun_app$cq (A_llist_a_llist_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun fun_app$cr (B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ B_llist_b_llist_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$cs (B_llist_b_fun_b_llist_b_llist_fun_b_llist_b_llist_fun_fun_fun$ B_llist_b_fun$) B_llist_b_llist_fun_b_llist_b_llist_fun_fun$)
(declare-fun fun_app$ct (B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ B_llist_b_llist_fun$) B_llist_a_llist_fun$)
(declare-fun fun_app$cu (B_llist_a_fun_b_llist_b_llist_fun_b_llist_a_llist_fun_fun_fun$ B_llist_a_fun$) B_llist_b_llist_fun_b_llist_a_llist_fun_fun$)
(declare-fun fun_app$cv (B_llist_b_fun_b_llist_a_fun_fun$ B_llist_b_fun$) B_llist_a_fun$)
(declare-fun fun_app$cw (B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ B_llist_a_llist_fun$) B_llist_a_llist_fun$)
(declare-fun fun_app$cx (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$cy (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$cz (C_b_llist_fun_c_a_fun_fun$ C_b_llist_fun$) C_a_fun$)
(declare-fun fun_app$da (B_llist_a_fun_b_llist_a_llist_fun_fun$ B_llist_a_fun$) B_llist_a_llist_fun$)
(declare-fun fun_app$db (C_b_fun_c_a_llist_fun_fun$ C_b_fun$) C_a_llist_fun$)
(declare-fun fun_app$dc (B_llist_a_llist_fun_b_llist_a_fun_fun$ B_llist_a_llist_fun$) B_llist_a_fun$)
(declare-fun fun_app$dd (B_a_llist_fun_b_a_fun_fun$ B_a_llist_fun$) B_a_fun$)
(declare-fun fun_app$de (B_b_llist_fun_b_a_llist_fun_fun$ B_b_llist_fun$) B_a_llist_fun$)
(declare-fun fun_app$df (C_b_llist_fun_c_b_fun_fun$ C_b_llist_fun$) C_b_fun$)
(declare-fun fun_app$dg (C_a_llist_fun_c_a_fun_fun$ C_a_llist_fun$) C_a_fun$)
(declare-fun fun_app$dh (A_a_fun_a_b_fun_fun$ A_a_fun$) A_b_fun$)
(declare-fun fun_app$di (C_c_fun$ C$) C$)
(declare-fun fun_app$dj (B_b_fun$ B$) B$)
(declare-fun fun_app$dk (B_c_fun$ B$) C$)
(declare-fun fun_app$dl (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$dm (B_llist_a_fun$ B_llist$) A$)
(declare-fun fun_app$dn (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$do (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$dp (B_llist_a_llist_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun fun_app$dq (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$dr (A_c_fun_b_b_fun_fun_a_c_fun_c_a_fun_fun_fun$ A_c_fun_b_b_fun_fun$) A_c_fun_c_a_fun_fun$)
(declare-fun fun_app$ds (B_a_fun_b_b_fun_c_a_fun_fun_fun$ B_a_fun$) B_b_fun_c_a_fun_fun$)
(declare-fun fun_app$dt (C_b_fun_a_c_fun_b_b_fun_fun_fun$ C_b_fun$) A_c_fun_b_b_fun_fun$)
(declare-fun fun_app$du (C_a_fun_a_c_fun_c_a_fun_fun_fun$ C_a_fun$) A_c_fun_c_a_fun_fun$)
(declare-fun fun_app$dv (A_c_fun_b_b_llist_fun_fun_a_c_fun_c_a_llist_fun_fun_fun$ A_c_fun_b_b_llist_fun_fun$) A_c_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$dw (B_llist_a_llist_fun_b_b_llist_fun_c_a_llist_fun_fun_fun$ B_llist_a_llist_fun$) B_b_llist_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$dx (C_b_llist_fun_a_c_fun_b_b_llist_fun_fun_fun$ C_b_llist_fun$) A_c_fun_b_b_llist_fun_fun$)
(declare-fun fun_app$dy (C_a_llist_fun_a_c_fun_c_a_llist_fun_fun_fun$ C_a_llist_fun$) A_c_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$dz (A_llist_c_fun_b_llist_b_fun_fun_a_llist_c_fun_c_a_fun_fun_fun$ A_llist_c_fun_b_llist_b_fun_fun$) A_llist_c_fun_c_a_fun_fun$)
(declare-fun fun_app$ea (B_a_fun_b_llist_b_fun_c_a_fun_fun_fun$ B_a_fun$) B_llist_b_fun_c_a_fun_fun$)
(declare-fun fun_app$eb (C_b_fun_a_llist_c_fun_b_llist_b_fun_fun_fun$ C_b_fun$) A_llist_c_fun_b_llist_b_fun_fun$)
(declare-fun fun_app$ec (C_a_fun_a_llist_c_fun_c_a_fun_fun_fun$ C_a_fun$) A_llist_c_fun_c_a_fun_fun$)
(declare-fun fun_app$ed (A_llist_c_fun_b_llist_b_llist_fun_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ A_llist_c_fun_b_llist_b_llist_fun_fun$) A_llist_c_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$ee (B_llist_a_llist_fun_b_llist_b_llist_fun_c_a_llist_fun_fun_fun$ B_llist_a_llist_fun$) B_llist_b_llist_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$ef (C_b_llist_fun_a_llist_c_fun_b_llist_b_llist_fun_fun_fun$ C_b_llist_fun$) A_llist_c_fun_b_llist_b_llist_fun_fun$)
(declare-fun fun_app$eg (C_a_llist_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ C_a_llist_fun$) A_llist_c_fun_c_a_llist_fun_fun$)
(declare-fun fun_app$eh (A_c_fun_b_a_fun_fun_a_c_fun_c_b_fun_fun_fun$ A_c_fun_b_a_fun_fun$) A_c_fun_c_b_fun_fun$)
(declare-fun fun_app$ei (A_b_fun_b_a_fun_c_b_fun_fun_fun$ A_b_fun$) B_a_fun_c_b_fun_fun$)
(declare-fun fun_app$ej (C_a_fun_a_c_fun_b_a_fun_fun_fun$ C_a_fun$) A_c_fun_b_a_fun_fun$)
(declare-fun fun_app$ek (C_b_fun_a_c_fun_c_b_fun_fun_fun$ C_b_fun$) A_c_fun_c_b_fun_fun$)
(declare-fun fun_app$el (A_b_fun_b_a_fun_fun_a_b_fun_c_a_fun_fun_fun$ A_b_fun_b_a_fun_fun$) A_b_fun_c_a_fun_fun$)
(declare-fun fun_app$em (A_a_fun_b_a_fun_c_a_fun_fun_fun$ A_a_fun$) B_a_fun_c_a_fun_fun$)
(declare-fun fun_app$en (B_a_fun_a_b_fun_b_a_fun_fun_fun$ B_a_fun$) A_b_fun_b_a_fun_fun$)
(declare-fun fun_app$eo (B_a_fun_a_b_fun_c_a_fun_fun_fun$ B_a_fun$) A_b_fun_c_a_fun_fun$)
(declare-fun fun_app$ep (B_c_fun_a_b_fun_fun_b_c_fun_c_a_fun_fun_fun$ B_c_fun_a_b_fun_fun$) B_c_fun_c_a_fun_fun$)
(declare-fun fun_app$eq (C_b_fun_b_c_fun_a_b_fun_fun_fun$ C_b_fun$) B_c_fun_a_b_fun_fun$)
(declare-fun fun_app$er (C_a_fun_b_c_fun_c_a_fun_fun_fun$ C_a_fun$) B_c_fun_c_a_fun_fun$)
(declare-fun fun_app$es (B_c_fun_a_a_fun_fun_b_c_fun_c_b_fun_fun_fun$ B_c_fun_a_a_fun_fun$) B_c_fun_c_b_fun_fun$)
(declare-fun fun_app$et (A_b_fun_a_a_fun_c_b_fun_fun_fun$ A_b_fun$) A_a_fun_c_b_fun_fun$)
(declare-fun fun_app$eu (C_a_fun_b_c_fun_a_a_fun_fun_fun$ C_a_fun$) B_c_fun_a_a_fun_fun$)
(declare-fun fun_app$ev (C_b_fun_b_c_fun_c_b_fun_fun_fun$ C_b_fun$) B_c_fun_c_b_fun_fun$)
(declare-fun fun_app$ew (B_c_fun_a_a_fun_fun_b_c_fun_c_a_fun_fun_fun$ B_c_fun_a_a_fun_fun$) B_c_fun_c_a_fun_fun$)
(declare-fun fun_app$ex (A_a_fun_a_a_fun_c_a_fun_fun_fun$ A_a_fun$) A_a_fun_c_a_fun_fun$)
(declare-fun fun_app$ey (A_c_fun_a_a_fun_fun_a_c_fun_c_b_fun_fun_fun$ A_c_fun_a_a_fun_fun$) A_c_fun_c_b_fun_fun$)
(declare-fun fun_app$ez (C_a_fun_a_c_fun_a_a_fun_fun_fun$ C_a_fun$) A_c_fun_a_a_fun_fun$)
(declare-fun fun_app$fa (B_b_fun_c_a_fun_fun$ B_b_fun$) C_a_fun$)
(declare-fun fun_app$fb (A_c_fun_b_b_fun_fun$ A_c_fun$) B_b_fun$)
(declare-fun fun_app$fc (A_c_fun_c_a_fun_fun$ A_c_fun$) C_a_fun$)
(declare-fun fun_app$fd (B_b_llist_fun_c_a_llist_fun_fun$ B_b_llist_fun$) C_a_llist_fun$)
(declare-fun fun_app$fe (A_c_fun_b_b_llist_fun_fun$ A_c_fun$) B_b_llist_fun$)
(declare-fun fun_app$ff (A_c_fun_c_a_llist_fun_fun$ A_c_fun$) C_a_llist_fun$)
(declare-fun fun_app$fg (B_llist_b_fun_c_a_fun_fun$ B_llist_b_fun$) C_a_fun$)
(declare-fun fun_app$fh (A_llist_c_fun_b_llist_b_fun_fun$ A_llist_c_fun$) B_llist_b_fun$)
(declare-fun fun_app$fi (A_llist_c_fun_c_a_fun_fun$ A_llist_c_fun$) C_a_fun$)
(declare-fun fun_app$fj (B_llist_b_llist_fun_c_a_llist_fun_fun$ B_llist_b_llist_fun$) C_a_llist_fun$)
(declare-fun fun_app$fk (A_llist_c_fun_b_llist_b_llist_fun_fun$ A_llist_c_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$fl (A_llist_c_fun_c_a_llist_fun_fun$ A_llist_c_fun$) C_a_llist_fun$)
(declare-fun fun_app$fm (B_b_prod_a_a_prod_fun$ B_b_prod$) A_a_prod$)
(declare-fun fun_app$fn (C_c_prod_b_b_prod_fun$ C_c_prod$) B_b_prod$)
(declare-fun fun_app$fo (C_c_prod_a_a_prod_fun$ C_c_prod$) A_a_prod$)
(declare-fun fun_app$fp (B_b_llist_prod_a_a_llist_prod_fun$ B_b_llist_prod$) A_a_llist_prod$)
(declare-fun fun_app$fq (C_c_prod_b_b_llist_prod_fun$ C_c_prod$) B_b_llist_prod$)
(declare-fun fun_app$fr (C_c_prod_a_a_llist_prod_fun$ C_c_prod$) A_a_llist_prod$)
(declare-fun fun_app$fs (B_llist_b_prod_a_llist_a_prod_fun$ B_llist_b_prod$) A_llist_a_prod$)
(declare-fun fun_app$ft (C_c_prod_b_llist_b_prod_fun$ C_c_prod$) B_llist_b_prod$)
(declare-fun fun_app$fu (C_c_prod_a_llist_a_prod_fun$ C_c_prod$) A_llist_a_prod$)
(declare-fun fun_app$fv (B_llist_b_llist_prod_a_llist_a_llist_prod_fun$ B_llist_b_llist_prod$) A_llist_a_llist_prod$)
(declare-fun fun_app$fw (C_c_prod_b_llist_b_llist_prod_fun$ C_c_prod$) B_llist_b_llist_prod$)
(declare-fun fun_app$fx (C_c_prod_a_llist_a_llist_prod_fun$ C_c_prod$) A_llist_a_llist_prod$)
(declare-fun map_prod$a (B_a_fun$ B_llist_a_llist_fun$) B_b_llist_prod_a_a_llist_prod_fun$)
(declare-fun map_prod$b (B_llist_a_llist_fun$ B_a_fun$) B_llist_b_prod_a_llist_a_prod_fun$)
(declare-fun map_prod$c (B_llist_a_llist_fun$ B_llist_a_llist_fun$) B_llist_b_llist_prod_a_llist_a_llist_prod_fun$)
(declare-fun map_prod$d (C_b_fun$ C_b_fun$) C_c_prod_b_b_prod_fun$)
(declare-fun map_prod$e (C_a_fun$ C_a_fun$) C_c_prod_a_a_prod_fun$)
(declare-fun map_prod$f (C_b_fun$ C_b_llist_fun$) C_c_prod_b_b_llist_prod_fun$)
(declare-fun map_prod$g (C_a_fun$ C_a_llist_fun$) C_c_prod_a_a_llist_prod_fun$)
(declare-fun map_prod$h (C_b_llist_fun$ C_b_fun$) C_c_prod_b_llist_b_prod_fun$)
(declare-fun map_prod$i (C_a_llist_fun$ C_a_fun$) C_c_prod_a_llist_a_prod_fun$)
(declare-fun map_prod$j (C_b_llist_fun$ C_b_llist_fun$) C_c_prod_b_llist_b_llist_prod_fun$)
(declare-fun map_prod$k (C_a_llist_fun$ C_a_llist_fun$) C_c_prod_a_llist_a_llist_prod_fun$)
(declare-fun rel_fun$aa (C_bool_fun_c_bool_fun_bool_fun_fun$ C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_bool_fun_fun$ C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$ C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$) Bool)
(declare-fun rel_fun$ab (C_b_fun_c_a_fun_bool_fun_fun$ C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_bool_fun_fun$) C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$ac (C_c_bool_fun_fun$ B_a_bool_fun_fun$) C_b_fun_c_a_fun_bool_fun_fun$)
(declare-fun rel_fun$ad (C_bool_fun_c_bool_fun_bool_fun_fun$ C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_bool_fun_fun$) C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$ae (C_b_llist_fun_c_a_llist_fun_bool_fun_fun$ C_c_fun_c_b_llist_fun_fun_c_c_fun_c_a_llist_fun_fun_bool_fun_fun$) C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$af (C_c_bool_fun_fun$ B_llist_a_llist_bool_fun_fun$) C_b_llist_fun_c_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ag (C_c_fun_c_c_fun_bool_fun_fun$ C_b_llist_fun_c_a_llist_fun_bool_fun_fun$) C_c_fun_c_b_llist_fun_fun_c_c_fun_c_a_llist_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$ah (C_bool_fun_c_bool_fun_bool_fun_fun$ C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_bool_fun_fun$ C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$ C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$) Bool)
(declare-fun rel_fun$ai (C_a_fun_c_b_fun_bool_fun_fun$ C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_bool_fun_fun$) C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$aj (C_c_bool_fun_fun$ A_b_bool_fun_fun$) C_a_fun_c_b_fun_bool_fun_fun$)
(declare-fun rel_fun$ak (C_bool_fun_c_bool_fun_bool_fun_fun$ C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_bool_fun_fun$) C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$al (C_a_llist_fun_c_b_llist_fun_bool_fun_fun$ C_c_fun_c_a_llist_fun_fun_c_c_fun_c_b_llist_fun_fun_bool_fun_fun$) C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$am (C_c_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) C_a_llist_fun_c_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$an (C_c_fun_c_c_fun_bool_fun_fun$ C_a_llist_fun_c_b_llist_fun_bool_fun_fun$) C_c_fun_c_a_llist_fun_fun_c_c_fun_c_b_llist_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$ao (C_bool_fun_c_bool_fun_bool_fun_fun$ C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_bool_fun_fun$ C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$ C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$) Bool)
(declare-fun rel_fun$ap (C_a_fun_c_a_fun_bool_fun_fun$ C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_bool_fun_fun$) C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$aq (C_bool_fun_c_bool_fun_bool_fun_fun$ C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_bool_fun_fun$) C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$ar (C_a_llist_fun_c_a_llist_fun_bool_fun_fun$ C_c_fun_c_a_llist_fun_fun_c_c_fun_c_a_llist_fun_fun_bool_fun_fun$) C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$as (C_c_fun_c_c_fun_bool_fun_fun$ C_a_llist_fun_c_a_llist_fun_bool_fun_fun$) C_c_fun_c_a_llist_fun_fun_c_c_fun_c_a_llist_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$at (B_a_fun_b_a_fun_bool_fun_fun$ B_llist_a_llist_fun_b_llist_a_llist_fun_bool_fun_fun$ B_a_fun_b_llist_a_llist_fun_fun$ B_a_fun_b_llist_a_llist_fun_fun$) Bool)
(declare-fun llist_all2$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun corec_llist$ () C_bool_fun_c_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun_fun$)
(declare-fun llist_all2$a (A_b_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$b (B_a_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun corec_llist$a () C_bool_fun_c_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_llist$b (C_bool_fun$) C_b_llist_fun_c_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun_fun$)
(declare-fun corec_llist$c (C_bool_fun$) C_a_llist_fun_c_bool_fun_c_a_llist_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun_fun_fun$)
(declare-fun corec_llist$d (B_bool_fun$) B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$)
(declare-fun corec_llist$e (C_bool_fun$) C_c_fun_c_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun_fun$)
(declare-fun corec_llist$f (B_bool_fun$ B_a_llist_fun$ B_bool_fun$ B_a_llist_llist_fun$ B_b_fun$) B_a_llist_llist_fun$)
(declare-fun unfold_llist$ (C_bool_fun$) C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$)
(declare-fun unfold_llist$a (C_bool_fun$) C_a_fun_c_c_fun_c_a_llist_fun_fun_fun$)
(declare-fun unfold_llist$b (C_bool_fun$) C_b_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$)
(declare-fun unfold_llist$c (C_bool_fun$) C_a_llist_fun_c_c_fun_c_a_llist_llist_fun_fun_fun$)
(declare-fun unfold_llist$d (B_bool_fun$) B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$)
(declare-fun unfold_llist$e (C_bool_fun$) C_c_fun_c_c_fun_c_c_llist_fun_fun_fun$)
(declare-fun unfold_llist$f (B_bool_fun$ B_a_llist_fun$ B_b_fun$ B$) A_llist_llist$)
(declare-fun unfold_llist$g (B_llist_bool_fun$) B_llist_b_fun_b_llist_b_llist_fun_b_llist_b_llist_fun_fun_fun$)
(declare-fun unfold_llist$h (B_llist_bool_fun$) B_llist_a_fun_b_llist_b_llist_fun_b_llist_a_llist_fun_fun_fun$)
(assert (forall ((?v0 B_llist$)) (! (= (fun_app$ uua$ ?v0) (= ?v0 lNil$a)) :pattern ((fun_app$ uua$ ?v0)))))
(assert (forall ((?v0 B_llist$)) (! (= (fun_app$a uuc$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$a uuc$ ?v0)))))
(assert (forall ((?v0 B_llist$)) (! (= (fun_app$b uub$ ?v0) (lhd$a ?v0)) :pattern ((fun_app$b uub$ ?v0)))))
(assert (forall ((?v0 B_set$) (?v1 B$)) (! (= (fun_app$c (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$c (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$d uuk$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$d uuk$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$e (fun_app$f uul$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$e (fun_app$f uul$ ?v0) ?v1)))))
(assert (forall ((?v0 Bool) (?v1 Bool)) (! (= (fun_app$g (fun_app$h uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$g (fun_app$h uue$ ?v0) ?v1)))))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$)) (! (= (fun_app$i (fun_app$j uuj$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$i (fun_app$j uuj$ ?v0) ?v1)))))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$)) (! (= (fun_app$k (fun_app$l uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$k (fun_app$l uug$ ?v0) ?v1)))))
(assert (forall ((?v0 C$) (?v1 C$)) (! (= (fun_app$m (fun_app$n uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$m (fun_app$n uud$ ?v0) ?v1)))))
(assert (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$c (fun_app$o uuh$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (fun_app$o uuh$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$p (fun_app$q uui$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$p (fun_app$q uui$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 B_llist$)) (! (= (fun_app$r (uun$ ?v0) ?v1) ?v0) :pattern ((fun_app$r (uun$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$s (uum$ ?v0) ?v1) ?v0) :pattern ((fun_app$s (uum$ ?v0) ?v1)))))
(assert (forall ((?v0 C$)) (! (= (fun_app$m uuf$ ?v0) false) :pattern ((fun_app$m uuf$ ?v0)))))
(assert (not (= (fun_app$r (fun_app$t lmap$ f$) (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ iS_LNIL$) lhd$e) endORmore$) tTL_end$) tTL_more$) b$)) (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a iS_LNIL$) (fun_app$ag (fun_app$ah comp$ f$) lhd$e)) endORmore$) (fun_app$ai (fun_app$aj comp$a (fun_app$t lmap$ f$)) tTL_end$)) tTL_more$) b$))))
(assert (forall ((?v0 B_b_fun$) (?v1 C_bool_fun$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$ak (comp$b (lmap$a ?v0)) (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v1) (fun_app$al (comp$c ?v0) ?v2)) ?v3) (fun_app$ak (comp$b (lmap$a ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_bool_fun$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$ai (fun_app$aj comp$a (fun_app$t lmap$ ?v0)) (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v1) (fun_app$ag (fun_app$ah comp$ ?v0) ?v2)) ?v3) (fun_app$ai (fun_app$aj comp$a (fun_app$t lmap$ ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_bool_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$am (comp$d (lmap$b ?v0)) (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v1) (fun_app$an (comp$e ?v0) ?v2)) ?v3) (fun_app$am (comp$d (lmap$b ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_bool_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$ao (comp$f (lmap$c ?v0)) (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v1) (fun_app$ap (comp$g ?v0) ?v2)) ?v3) (fun_app$ao (comp$f (lmap$c ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_bool_fun$) (?v2 C_b_llist_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$aq (comp$h (lmap$d ?v0)) (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v1) (fun_app$ai (fun_app$aj comp$a ?v0) ?v2)) ?v3) (fun_app$aq (comp$h (lmap$d ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_bool_fun$) (?v2 B_a_fun$) (?v3 B_bool_fun$) (?v4 B_a_llist_fun$) (?v5 B_b_fun$)) (= (fun_app$az (comp$i (lmap$c ?v0)) (fun_app$ba (fun_app$bb (fun_app$bc (fun_app$bd (corec_llist$d ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$ba (fun_app$bb (fun_app$bc (fun_app$bd (corec_llist$d ?v1) (fun_app$be (comp$j ?v0) ?v2)) ?v3) (fun_app$az (comp$i (lmap$c ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_bool_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$bf (comp$k (lmap$e ?v0)) (fun_app$bg (fun_app$bh (fun_app$bi (fun_app$bj (corec_llist$e ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v1) (fun_app$bk (comp$l ?v0) ?v2)) ?v3) (fun_app$bf (comp$k (lmap$e ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_bool_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$bl (comp$m (lmap$f ?v0)) (fun_app$bg (fun_app$bh (fun_app$bi (fun_app$bj (corec_llist$e ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v1) (fun_app$bm (comp$n ?v0) ?v2)) ?v3) (fun_app$bl (comp$m (lmap$f ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_bool_fun$) (?v2 B_a_fun$) (?v3 B_bool_fun$) (?v4 B_a_llist_fun$) (?v5 B_b_fun$)) (= (comp$o (lmap$g ?v0) (fun_app$ba (fun_app$bb (fun_app$bc (fun_app$bd (corec_llist$d ?v1) ?v2) ?v3) ?v4) ?v5)) (corec_llist$f ?v1 (fun_app$bn (comp$p ?v0) ?v2) ?v3 (comp$o (lmap$g ?v0) ?v4) ?v5)) ))
(assert (forall ((?v0 B_b_llist_fun$) (?v1 C_bool_fun$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (= (fun_app$bo (comp$q (lmap$h ?v0)) (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v1) (fun_app$bp (comp$r ?v0) ?v2)) ?v3) (fun_app$bo (comp$q (lmap$h ?v0)) ?v4)) ?v5)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (fun_app$bq (lmap$c ?v0) (fun_app$r (fun_app$t lmap$ ?v1) ?v2)) (fun_app$r (fun_app$t lmap$ (fun_app$be (comp$j ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_llist$)) (= (fun_app$r (fun_app$t lmap$ ?v0) (fun_app$br (lmap$e ?v1) ?v2)) (fun_app$bs (lmap$f (fun_app$ag (fun_app$ah comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (fun_app$r (fun_app$t lmap$ ?v0) (fun_app$a (lmap$a ?v1) ?v2)) (fun_app$r (fun_app$t lmap$ (fun_app$bt (comp$s ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_llist$)) (= (fun_app$bu (lmap$d ?v0) (lmap$i ?v1 ?v2)) (lmap$j (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (fun_app$r (fun_app$t lmap$ ?v0) (fun_app$bv (lmap$b ?v1) ?v2)) (fun_app$bq (lmap$c (fun_app$bw (comp$t ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_llist$)) (= (fun_app$br (lmap$e ?v0) (lmap$k ?v1 ?v2)) (fun_app$br (lmap$e (fun_app$bk (comp$l ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 B_llist$)) (= (fun_app$br (lmap$e ?v0) (lmap$l ?v1 ?v2)) (fun_app$a (lmap$a (fun_app$bx (comp$u ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 A_c_fun$) (?v2 A_llist$)) (= (fun_app$br (lmap$e ?v0) (lmap$m ?v1 ?v2)) (fun_app$bv (lmap$b (fun_app$by (comp$v ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 C_a_fun$) (?v1 B_c_fun$) (?v2 B_llist$)) (= (fun_app$bs (lmap$f ?v0) (lmap$l ?v1 ?v2)) (fun_app$r (fun_app$t lmap$ (fun_app$bz (comp$w ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_llist$)) (= (fun_app$bs (lmap$f ?v0) (lmap$k ?v1 ?v2)) (fun_app$bs (lmap$f (fun_app$bm (comp$n ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$aa (fun_app$ca (comp$x ?v0) ?v1) ?v2) (fun_app$cb ?v0 (fun_app$cc ?v1 ?v2))) :pattern ((fun_app$aa (fun_app$ca (comp$x ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$cd (fun_app$bn (comp$p ?v0) ?v1) ?v2) (fun_app$cb ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$cd (fun_app$bn (comp$p ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$ce (fun_app$an (comp$e ?v0) ?v1) ?v2) (fun_app$cf ?v0 (fun_app$cc ?v1 ?v2))) :pattern ((fun_app$ce (fun_app$an (comp$e ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2))) :pattern ((fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2) (fun_app$cg ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (fun_app$ce ?v1 ?v2))) :pattern ((fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C$)) (! (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$u ?v1 ?v2))) :pattern ((fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 B_a_fun$) (?v1 C_bool_fun$) (?v2 C_b_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$r (fun_app$t lmap$ ?v0) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v1) ?v2) ?v3) ?v4)) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v1) (fun_app$ag (fun_app$ah comp$ ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_bool_fun$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$bu (lmap$d ?v0) (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v1) ?v2) ?v3) ?v4)) (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v1) (fun_app$ai (fun_app$aj comp$a ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_bool_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 B$)) (= (fun_app$bq (lmap$c ?v0) (fun_app$cd (fun_app$ba (fun_app$cn (unfold_llist$d ?v1) ?v2) ?v3) ?v4)) (fun_app$cd (fun_app$ba (fun_app$cn (unfold_llist$d ?v1) (fun_app$be (comp$j ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_bool_fun$) (?v2 C_c_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$br (lmap$e ?v0) (fun_app$co (fun_app$bg (fun_app$cp (unfold_llist$e ?v1) ?v2) ?v3) ?v4)) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v1) (fun_app$bk (comp$l ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_bool_fun$) (?v2 C_c_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$bs (lmap$f ?v0) (fun_app$co (fun_app$bg (fun_app$cp (unfold_llist$e ?v1) ?v2) ?v3) ?v4)) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v1) (fun_app$bm (comp$n ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 B_b_fun$) (?v1 C_bool_fun$) (?v2 C_b_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$a (lmap$a ?v0) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v1) ?v2) ?v3) ?v4)) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v1) (fun_app$al (comp$c ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_bool_fun$) (?v2 C_a_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$bv (lmap$b ?v0) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v1) ?v2) ?v3) ?v4)) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v1) (fun_app$an (comp$e ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_bool_fun$) (?v2 C_a_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$bq (lmap$c ?v0) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v1) ?v2) ?v3) ?v4)) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v1) (fun_app$ap (comp$g ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_bool_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 B$)) (= (fun_app$cq (lmap$g ?v0) (fun_app$cd (fun_app$ba (fun_app$cn (unfold_llist$d ?v1) ?v2) ?v3) ?v4)) (unfold_llist$f ?v1 (fun_app$bn (comp$p ?v0) ?v2) ?v3 ?v4)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist_bool_fun$) (?v2 B_llist_b_fun$) (?v3 B_llist_b_llist_fun$) (?v4 B_llist$)) (= (fun_app$r (fun_app$t lmap$ ?v0) (fun_app$a (fun_app$cr (fun_app$cs (unfold_llist$g ?v1) ?v2) ?v3) ?v4)) (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v1) (fun_app$cv (comp$y ?v0) ?v2)) ?v3) ?v4)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$ap (comp$g ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v2)) (fun_app$ag (fun_app$ah comp$ (fun_app$be (comp$j ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$bk (comp$l ?v1) ?v2)) (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$al (comp$c ?v1) ?v2)) (fun_app$ag (fun_app$ah comp$ (fun_app$bt (comp$s ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_c_fun$)) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$v (comp$z ?v1) ?v2)) (fun_app$ab (comp$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$)) (= (fun_app$ao (comp$f ?v0) (fun_app$ai (fun_app$aj comp$a ?v1) ?v2)) (fun_app$ai (fun_app$aj comp$a (fun_app$cw (comp$ab ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_b_llist_fun$) (?v2 C_b_llist_fun$)) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$ak (comp$b ?v1) ?v2)) (fun_app$ai (fun_app$aj comp$a (fun_app$ct (comp$ac ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_b_fun$) (?v1 A_b_fun$) (?v2 C_a_fun$)) (= (fun_app$al (comp$c ?v0) (fun_app$an (comp$e ?v1) ?v2)) (fun_app$an (comp$e (fun_app$cx (comp$ad ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 C_a_fun$)) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$an (comp$e ?v1) ?v2)) (fun_app$ap (comp$g (fun_app$bw (comp$t ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$an (comp$e ?v0) (fun_app$bm (comp$n ?v1) ?v2)) (fun_app$bk (comp$l (fun_app$an (comp$e ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$an (comp$e ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v2)) (fun_app$al (comp$c (fun_app$cy (comp$ae ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v0) ?v1)) ?v2) (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$bk (comp$l ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$ag (fun_app$ah comp$ (fun_app$be (comp$j ?v0) ?v1)) ?v2) (fun_app$ap (comp$g ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v2))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$ag (fun_app$ah comp$ (fun_app$bt (comp$s ?v0) ?v1)) ?v2) (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$al (comp$c ?v1) ?v2))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_c_fun$)) (= (fun_app$ab (comp$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1)) ?v2) (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$v (comp$z ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$)) (= (fun_app$ai (fun_app$aj comp$a (fun_app$cw (comp$ab ?v0) ?v1)) ?v2) (fun_app$ao (comp$f ?v0) (fun_app$ai (fun_app$aj comp$a ?v1) ?v2))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_b_llist_fun$) (?v2 C_b_llist_fun$)) (= (fun_app$ai (fun_app$aj comp$a (fun_app$ct (comp$ac ?v0) ?v1)) ?v2) (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$ak (comp$b ?v1) ?v2))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$al (comp$c (fun_app$cy (comp$ae ?v0) ?v1)) ?v2) (fun_app$an (comp$e ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$bk (comp$l (fun_app$an (comp$e ?v0) ?v1)) ?v2) (fun_app$an (comp$e ?v0) (fun_app$bm (comp$n ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$bm (comp$n (fun_app$ap (comp$g ?v0) ?v1)) ?v2) (fun_app$ap (comp$g ?v0) (fun_app$bm (comp$n ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_c_fun$)) (= (fun_app$bz (comp$w (fun_app$ap (comp$g ?v0) ?v1)) ?v2) (fun_app$be (comp$j ?v0) (fun_app$bz (comp$w ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$aa (fun_app$ca (comp$x ?v0) ?v1) ?v2) (fun_app$cb ?v0 (fun_app$cc ?v1 ?v2))) :pattern ((fun_app$aa (fun_app$ca (comp$x ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$cd (fun_app$bn (comp$p ?v0) ?v1) ?v2) (fun_app$cb ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$cd (fun_app$bn (comp$p ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$ce (fun_app$an (comp$e ?v0) ?v1) ?v2) (fun_app$cf ?v0 (fun_app$cc ?v1 ?v2))) :pattern ((fun_app$ce (fun_app$an (comp$e ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2))) :pattern ((fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2) (fun_app$cg ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (fun_app$ce ?v1 ?v2))) :pattern ((fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C$)) (! (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$u ?v1 ?v2))) :pattern ((fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v4)) (fun_app$s ?v2 (fun_app$ce ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$)) (=> (and (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$r ?v0 (fun_app$u ?v1 ?v4)) (fun_app$r ?v2 (fun_app$u ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ap (comp$g ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v4)) (fun_app$cg ?v2 (fun_app$cc ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$an (comp$e ?v0) ?v1) (fun_app$an (comp$e ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$cf ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$cf ?v2 (fun_app$cc ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$ap (comp$g ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$s ?v2 (fun_app$ce ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$ap (comp$g ?v0) ?v1) (fun_app$ap (comp$g ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$cg ?v2 (fun_app$cc ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$be (comp$j ?v0) ?v1) (fun_app$be (comp$j ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$cg ?v0 (fun_app$s ?v1 ?v4)) (fun_app$cg ?v2 (fun_app$s ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 C_a_fun$) (?v2 A_a_llist_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$ca (comp$x ?v0) ?v1) (fun_app$ca (comp$x ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$cb ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$cc ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 A_a_llist_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$bn (comp$p ?v0) ?v1) (fun_app$bn (comp$p ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$cb ?v0 (fun_app$s ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$s ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 A_a_llist_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ca (comp$x ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$r ?v0 (fun_app$u ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$cc ?v3 ?v4))) ) false)) false) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$bk (comp$l ?v0) ?v1) (fun_app$al (comp$c ?v2) ?v3)) (= (fun_app$bt (comp$s ?v4) ?v2) ?v5)) (= (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v4) ?v0)) ?v1) (fun_app$ag (fun_app$ah comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 C_c_fun$) (?v4 B_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$al (comp$c ?v0) ?v1) (fun_app$bk (comp$l ?v2) ?v3)) (= (fun_app$ag (fun_app$ah comp$ ?v4) ?v2) ?v5)) (= (fun_app$ag (fun_app$ah comp$ (fun_app$bt (comp$s ?v4) ?v0)) ?v1) (fun_app$bm (comp$n ?v5) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 A_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (= (fun_app$be (comp$j ?v4) ?v2) ?v5)) (= (fun_app$ag (fun_app$ah comp$ (fun_app$be (comp$j ?v4) ?v0)) ?v1) (fun_app$ag (fun_app$ah comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 B_llist_a_fun$) (?v1 C_b_llist_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 A_a_llist_fun$) (?v5 B_a_llist_fun$)) (=> (and (= (fun_app$cz (comp$af ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (= (fun_app$bn (comp$p ?v4) ?v2) ?v5)) (= (fun_app$ai (fun_app$aj comp$a (fun_app$da (comp$ag ?v4) ?v0)) ?v1) (fun_app$db (comp$ah ?v5) ?v3))) ))
(assert (forall ((?v0 B_a_llist_fun$) (?v1 C_b_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$) (?v4 A_llist_a_fun$) (?v5 B_llist_a_fun$)) (=> (and (= (fun_app$db (comp$ah ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (= (fun_app$dc (comp$ai ?v4) ?v2) ?v5)) (= (fun_app$ag (fun_app$ah comp$ (fun_app$dd (comp$aj ?v4) ?v0)) ?v1) (fun_app$cz (comp$af ?v5) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_llist_a_fun$) (?v3 C_b_llist_fun$) (?v4 A_a_llist_fun$) (?v5 B_llist_a_llist_fun$)) (=> (and (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$cz (comp$af ?v2) ?v3)) (= (fun_app$da (comp$ag ?v4) ?v2) ?v5)) (= (fun_app$db (comp$ah (fun_app$bn (comp$p ?v4) ?v0)) ?v1) (fun_app$ai (fun_app$aj comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_a_llist_fun$) (?v3 C_b_fun$) (?v4 A_llist_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$db (comp$ah ?v2) ?v3)) (= (fun_app$dd (comp$aj ?v4) ?v2) ?v5)) (= (fun_app$cz (comp$af (fun_app$dc (comp$ai ?v4) ?v0)) ?v1) (fun_app$ag (fun_app$ah comp$ ?v5) ?v3))) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 C_c_fun$) (?v2 B_llist_b_llist_fun$) (?v3 C_b_llist_fun$) (?v4 B_llist_a_llist_fun$) (?v5 B_llist_a_llist_fun$)) (=> (and (= (fun_app$v (comp$z ?v0) ?v1) (fun_app$ak (comp$b ?v2) ?v3)) (= (fun_app$ct (comp$ac ?v4) ?v2) ?v5)) (= (fun_app$ab (comp$aa (fun_app$ai (fun_app$aj comp$a ?v4) ?v0)) ?v1) (fun_app$ai (fun_app$aj comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 B_llist_b_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$) (?v4 B_llist_a_llist_fun$) (?v5 C_a_llist_fun$)) (=> (and (= (fun_app$ak (comp$b ?v0) ?v1) (fun_app$v (comp$z ?v2) ?v3)) (= (fun_app$ai (fun_app$aj comp$a ?v4) ?v2) ?v5)) (= (fun_app$ai (fun_app$aj comp$a (fun_app$ct (comp$ac ?v4) ?v0)) ?v1) (fun_app$ab (comp$aa ?v5) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$) (?v4 A_llist_a_llist_fun$) (?v5 B_llist_a_llist_fun$)) (=> (and (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (= (fun_app$cw (comp$ab ?v4) ?v2) ?v5)) (= (fun_app$ai (fun_app$aj comp$a (fun_app$cw (comp$ab ?v4) ?v0)) ?v1) (fun_app$ai (fun_app$aj comp$a ?v5) ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$be (comp$j ?v0) ?v1) (fun_app$bt (comp$s ?v2) ?v3)) (= (fun_app$al (comp$c ?v3) ?v4) ?v5)) (= (fun_app$ap (comp$g ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v4)) (fun_app$ag (fun_app$ah comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$bt (comp$s ?v0) ?v1) (fun_app$be (comp$j ?v2) ?v3)) (= (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v5)) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$al (comp$c ?v1) ?v4)) (fun_app$ap (comp$g ?v2) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C_c_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (= (fun_app$bk (comp$l ?v3) ?v4) ?v5)) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$bk (comp$l ?v1) ?v4)) (fun_app$ag (fun_app$ah comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 B_llist_a_llist_fun$) (?v3 B_b_llist_fun$) (?v4 C_b_fun$) (?v5 C_b_llist_fun$)) (=> (and (= (fun_app$bn (comp$p ?v0) ?v1) (fun_app$de (comp$ak ?v2) ?v3)) (= (fun_app$bp (comp$r ?v3) ?v4) ?v5)) (= (fun_app$ca (comp$x ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v4)) (fun_app$ai (fun_app$aj comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_a_fun$) (?v3 B_llist_b_fun$) (?v4 C_b_llist_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$dc (comp$ai ?v0) ?v1) (fun_app$cv (comp$y ?v2) ?v3)) (= (fun_app$df (comp$al ?v3) ?v4) ?v5)) (= (fun_app$dg (comp$am ?v0) (fun_app$ai (fun_app$aj comp$a ?v1) ?v4)) (fun_app$ag (fun_app$ah comp$ ?v2) ?v5))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_b_llist_fun$) (?v2 A_a_llist_fun$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$de (comp$ak ?v0) ?v1) (fun_app$bn (comp$p ?v2) ?v3)) (= (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v5)) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$bp (comp$r ?v1) ?v4)) (fun_app$ca (comp$x ?v2) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist_b_fun$) (?v2 A_llist_a_fun$) (?v3 B_llist_a_llist_fun$) (?v4 C_b_llist_fun$) (?v5 C_a_llist_fun$)) (=> (and (= (fun_app$cv (comp$y ?v0) ?v1) (fun_app$dc (comp$ai ?v2) ?v3)) (= (fun_app$ai (fun_app$aj comp$a ?v3) ?v4) ?v5)) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$df (comp$al ?v1) ?v4)) (fun_app$dg (comp$am ?v2) ?v5))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_fun$) (?v5 C_b_llist_fun$)) (=> (and (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (= (fun_app$v (comp$z ?v3) ?v4) ?v5)) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$v (comp$z ?v1) ?v4)) (fun_app$ai (fun_app$aj comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 B_llist_b_llist_fun$) (?v4 C_b_llist_fun$) (?v5 C_b_llist_fun$)) (=> (and (= (fun_app$cw (comp$ab ?v0) ?v1) (fun_app$ct (comp$ac ?v2) ?v3)) (= (fun_app$ak (comp$b ?v3) ?v4) ?v5)) (= (fun_app$ao (comp$f ?v0) (fun_app$ai (fun_app$aj comp$a ?v1) ?v4)) (fun_app$ai (fun_app$aj comp$a ?v2) ?v5))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_b_llist_fun$) (?v2 A_llist_a_llist_fun$) (?v3 B_llist_a_llist_fun$) (?v4 C_b_llist_fun$) (?v5 C_a_llist_fun$)) (=> (and (= (fun_app$ct (comp$ac ?v0) ?v1) (fun_app$cw (comp$ab ?v2) ?v3)) (= (fun_app$ai (fun_app$aj comp$a ?v3) ?v4) ?v5)) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$ak (comp$b ?v1) ?v4)) (fun_app$ao (comp$f ?v2) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v4)) (fun_app$s ?v2 (fun_app$ce ?v3 ?v4)))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$) (?v4 C$)) (=> (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (= (fun_app$r ?v0 (fun_app$u ?v1 ?v4)) (fun_app$r ?v2 (fun_app$u ?v3 ?v4)))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ap (comp$g ?v2) ?v3)) (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v4)) (fun_app$cg ?v2 (fun_app$cc ?v3 ?v4)))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$an (comp$e ?v0) ?v1) (fun_app$an (comp$e ?v2) ?v3)) (= (fun_app$cf ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$cf ?v2 (fun_app$cc ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$ap (comp$g ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$s ?v2 (fun_app$ce ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$ap (comp$g ?v0) ?v1) (fun_app$ap (comp$g ?v2) ?v3)) (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$cg ?v2 (fun_app$cc ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$be (comp$j ?v0) ?v1) (fun_app$be (comp$j ?v2) ?v3)) (= (fun_app$cg ?v0 (fun_app$s ?v1 ?v4)) (fun_app$cg ?v2 (fun_app$s ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 C_a_fun$) (?v2 A_a_llist_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$ca (comp$x ?v0) ?v1) (fun_app$ca (comp$x ?v2) ?v3)) (= (fun_app$cb ?v0 (fun_app$cc ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$cc ?v3 ?v4)))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 A_a_llist_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$bn (comp$p ?v0) ?v1) (fun_app$bn (comp$p ?v2) ?v3)) (= (fun_app$cb ?v0 (fun_app$s ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$s ?v3 ?v4)))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 A_a_llist_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ca (comp$x ?v2) ?v3)) (= (fun_app$r ?v0 (fun_app$u ?v1 ?v4)) (fun_app$cb ?v2 (fun_app$cc ?v3 ?v4)))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$bk (comp$l ?v0) ?v1) ?v2) (= (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v3) ?v0)) ?v1) (fun_app$ag (fun_app$ah comp$ ?v3) ?v2))) ))
(assert (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$al (comp$c ?v0) ?v1) ?v2) (= (fun_app$ag (fun_app$ah comp$ (fun_app$bt (comp$s ?v3) ?v0)) ?v1) (fun_app$ag (fun_app$ah comp$ ?v3) ?v2))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (= (fun_app$ag (fun_app$ah comp$ (fun_app$be (comp$j ?v3) ?v0)) ?v1) (fun_app$ap (comp$g ?v3) ?v2))) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 C_c_fun$) (?v2 C_b_llist_fun$) (?v3 B_llist_a_llist_fun$)) (=> (= (fun_app$v (comp$z ?v0) ?v1) ?v2) (= (fun_app$ab (comp$aa (fun_app$ai (fun_app$aj comp$a ?v3) ?v0)) ?v1) (fun_app$ai (fun_app$aj comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 B_llist_b_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_b_llist_fun$) (?v3 B_llist_a_llist_fun$)) (=> (= (fun_app$ak (comp$b ?v0) ?v1) ?v2) (= (fun_app$ai (fun_app$aj comp$a (fun_app$ct (comp$ac ?v3) ?v0)) ?v1) (fun_app$ai (fun_app$aj comp$a ?v3) ?v2))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_a_llist_fun$) (?v3 A_llist_a_llist_fun$)) (=> (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (= (fun_app$ai (fun_app$aj comp$a (fun_app$cw (comp$ab ?v3) ?v0)) ?v1) (fun_app$ao (comp$f ?v3) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_a_fun$) (?v3 A_b_fun$)) (=> (= (fun_app$bm (comp$n ?v0) ?v1) ?v2) (= (fun_app$bk (comp$l (fun_app$an (comp$e ?v3) ?v0)) ?v1) (fun_app$an (comp$e ?v3) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$bm (comp$n ?v0) ?v1) ?v2) (= (fun_app$bm (comp$n (fun_app$ap (comp$g ?v3) ?v0)) ?v1) (fun_app$ap (comp$g ?v3) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 B_c_fun$) (?v2 B_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$bz (comp$w ?v0) ?v1) ?v2) (= (fun_app$bz (comp$w (fun_app$ap (comp$g ?v3) ?v0)) ?v1) (fun_app$be (comp$j ?v3) ?v2))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$bt (comp$s ?v0) ?v1) ?v2) (= (fun_app$bt (comp$s (fun_app$be (comp$j ?v3) ?v0)) ?v1) (fun_app$be (comp$j ?v3) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$be (comp$j ?v0) ?v1) ?v2) (= (fun_app$ap (comp$g ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$bt (comp$s ?v0) ?v1) ?v2) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$al (comp$c ?v1) ?v3)) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$bk (comp$l ?v1) ?v3)) (fun_app$bm (comp$n ?v2) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$)) (=> (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$v (comp$z ?v1) ?v3)) (fun_app$ab (comp$aa ?v2) ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$)) (=> (= (fun_app$cw (comp$ab ?v0) ?v1) ?v2) (= (fun_app$ao (comp$f ?v0) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_b_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$)) (=> (= (fun_app$ct (comp$ac ?v0) ?v1) ?v2) (= (fun_app$ai (fun_app$aj comp$a ?v0) (fun_app$ak (comp$b ?v1) ?v3)) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3))) ))
(assert (forall ((?v0 B_b_fun$) (?v1 A_b_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$)) (=> (= (fun_app$cx (comp$ad ?v0) ?v1) ?v2) (= (fun_app$al (comp$c ?v0) (fun_app$an (comp$e ?v1) ?v3)) (fun_app$an (comp$e ?v2) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (= (fun_app$bw (comp$t ?v0) ?v1) ?v2) (= (fun_app$ag (fun_app$ah comp$ ?v0) (fun_app$an (comp$e ?v1) ?v3)) (fun_app$ap (comp$g ?v2) ?v3))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$cy (comp$ae ?v0) ?v1) ?v2) (= (fun_app$an (comp$e ?v0) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) (fun_app$al (comp$c ?v2) ?v3))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 A_a_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$)) (=> (= (fun_app$dh (comp$an ?v0) ?v1) ?v2) (= (fun_app$an (comp$e ?v0) (fun_app$ap (comp$g ?v1) ?v3)) (fun_app$an (comp$e ?v2) ?v3))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 C_a_fun$) (?v2 C_a_llist_fun$) (?v3 C$)) (=> (= (fun_app$ca (comp$x ?v0) ?v1) ?v2) (= (fun_app$cb ?v0 (fun_app$cc ?v1 ?v3)) (fun_app$aa ?v2 ?v3))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 B_a_llist_fun$) (?v3 B$)) (=> (= (fun_app$bn (comp$p ?v0) ?v1) ?v2) (= (fun_app$cb ?v0 (fun_app$s ?v1 ?v3)) (fun_app$cd ?v2 ?v3))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_b_fun$) (?v3 C$)) (=> (= (fun_app$an (comp$e ?v0) ?v1) ?v2) (= (fun_app$cf ?v0 (fun_app$cc ?v1 ?v3)) (fun_app$ce ?v2 ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_a_fun$) (?v3 C$)) (=> (= (fun_app$ap (comp$g ?v0) ?v1) ?v2) (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v3)) (fun_app$cc ?v2 ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B$)) (=> (= (fun_app$be (comp$j ?v0) ?v1) ?v2) (= (fun_app$cg ?v0 (fun_app$s ?v1 ?v3)) (fun_app$s ?v2 ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C$)) (=> (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v3)) (fun_app$cc ?v2 ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_a_llist_fun$) (?v3 C$)) (=> (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (= (fun_app$r ?v0 (fun_app$u ?v1 ?v3)) (fun_app$aa ?v2 ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C$)) (=> (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v2)) (fun_app$s ?v3 (fun_app$ce ?v4 ?v5))) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C$) (?v3 B_llist_a_llist_fun$) (?v4 C_b_llist_fun$) (?v5 C$)) (=> (= (fun_app$r ?v0 (fun_app$u ?v1 ?v2)) (fun_app$r ?v3 (fun_app$u ?v4 ?v5))) (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 C_a_fun$) (?v5 C$)) (=> (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v5))) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 B_a_fun$) (?v5 B$)) (=> (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$s ?v4 ?v5))) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$s (fun_app$be (comp$j ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 A_b_fun$) (?v4 C_a_fun$) (?v5 C$)) (=> (= (fun_app$cf ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cf ?v3 (fun_app$cc ?v4 ?v5))) (= (fun_app$ce (fun_app$an (comp$e ?v0) ?v1) ?v2) (fun_app$ce (fun_app$an (comp$e ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C$)) (=> (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$s ?v3 (fun_app$ce ?v4 ?v5))) (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 C_a_fun$) (?v5 C$)) (=> (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v5))) (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 B_a_fun$) (?v5 B$)) (=> (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$s ?v4 ?v5))) (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$s (fun_app$be (comp$j ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C$)) (=> (= (fun_app$cg ?v0 (fun_app$s ?v1 ?v2)) (fun_app$s ?v3 (fun_app$ce ?v4 ?v5))) (= (fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 A_a_fun$) (?v4 C_a_fun$) (?v5 C$)) (=> (= (fun_app$cg ?v0 (fun_app$s ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v5))) (= (fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g ?v3) ?v4) ?v5))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$)) (=> (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v2)) (fun_app$s ?v3 (fun_app$ce ?v4 ?v2))) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C$) (?v3 B_llist_a_llist_fun$) (?v4 C_b_llist_fun$)) (=> (= (fun_app$r ?v0 (fun_app$u ?v1 ?v2)) (fun_app$r ?v3 (fun_app$u ?v4 ?v2))) (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 C_a_fun$)) (=> (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 A_b_fun$) (?v4 C_a_fun$)) (=> (= (fun_app$cf ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cf ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$ce (fun_app$an (comp$e ?v0) ?v1) ?v2) (fun_app$ce (fun_app$an (comp$e ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$)) (=> (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$s ?v3 (fun_app$ce ?v4 ?v2))) (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 C_a_fun$)) (=> (= (fun_app$cg ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$cc (fun_app$ap (comp$g ?v0) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 A_a_fun$) (?v4 B_a_fun$)) (=> (= (fun_app$cg ?v0 (fun_app$s ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$s ?v4 ?v2))) (= (fun_app$s (fun_app$be (comp$j ?v0) ?v1) ?v2) (fun_app$s (fun_app$be (comp$j ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 A_a_llist_fun$) (?v4 C_a_fun$)) (=> (= (fun_app$cb ?v0 (fun_app$cc ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$aa (fun_app$ca (comp$x ?v0) ?v1) ?v2) (fun_app$aa (fun_app$ca (comp$x ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 A_a_llist_fun$) (?v4 B_a_fun$)) (=> (= (fun_app$cb ?v0 (fun_app$s ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$s ?v4 ?v2))) (= (fun_app$cd (fun_app$bn (comp$p ?v0) ?v1) ?v2) (fun_app$cd (fun_app$bn (comp$p ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C$) (?v3 A_a_llist_fun$) (?v4 C_a_fun$)) (=> (= (fun_app$r ?v0 (fun_app$u ?v1 ?v2)) (fun_app$cb ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2) (fun_app$aa (fun_app$ca (comp$x ?v3) ?v4) ?v2))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$ce ?v0 (fun_app$di ?v1 ?v2)) (fun_app$dj ?v3 (fun_app$ce ?v4 ?v2))) (= (fun_app$cc (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ (fun_app$bt (comp$s ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 C_b_fun$) (?v4 C_c_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$dj ?v0 (fun_app$ce ?v1 ?v2)) (fun_app$ce ?v3 (fun_app$di ?v4 ?v2))) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ (fun_app$bt (comp$s ?v5) ?v0)) ?v1) ?v2) (fun_app$cc (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 B_llist_b_llist_fun$) (?v4 C_b_llist_fun$) (?v5 B_llist_a_llist_fun$)) (=> (= (fun_app$u ?v0 (fun_app$di ?v1 ?v2)) (fun_app$a ?v3 (fun_app$u ?v4 ?v2))) (= (fun_app$aa (fun_app$ab (comp$aa (fun_app$ai (fun_app$aj comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$aa (fun_app$ai (fun_app$aj comp$a (fun_app$ct (comp$ac ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 B_llist_b_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C$) (?v3 C_b_llist_fun$) (?v4 C_c_fun$) (?v5 B_llist_a_llist_fun$)) (=> (= (fun_app$a ?v0 (fun_app$u ?v1 ?v2)) (fun_app$u ?v3 (fun_app$di ?v4 ?v2))) (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a (fun_app$ct (comp$ac ?v5) ?v0)) ?v1) ?v2) (fun_app$aa (fun_app$ab (comp$aa (fun_app$ai (fun_app$aj comp$a ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 A_b_fun$) (?v4 C_a_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$ce ?v0 (fun_app$di ?v1 ?v2)) (fun_app$cf ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$cc (fun_app$bm (comp$n (fun_app$ag (fun_app$ah comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g (fun_app$bw (comp$t ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 B$) (?v3 A_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$ce ?v0 (fun_app$dk ?v1 ?v2)) (fun_app$cf ?v3 (fun_app$s ?v4 ?v2))) (= (fun_app$s (fun_app$bz (comp$w (fun_app$ag (fun_app$ah comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$s (fun_app$be (comp$j (fun_app$bw (comp$t ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 C_a_fun$) (?v5 A_b_fun$)) (=> (= (fun_app$cc ?v0 (fun_app$di ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$ce (fun_app$bk (comp$l (fun_app$an (comp$e ?v5) ?v0)) ?v1) ?v2) (fun_app$ce (fun_app$an (comp$e (fun_app$dh (comp$an ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 A_a_fun$)) (=> (= (fun_app$cc ?v0 (fun_app$di ?v1 ?v2)) (fun_app$s ?v3 (fun_app$ce ?v4 ?v2))) (= (fun_app$cc (fun_app$bm (comp$n (fun_app$ap (comp$g ?v5) ?v0)) ?v1) ?v2) (fun_app$cc (fun_app$ag (fun_app$ah comp$ (fun_app$be (comp$j ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 A_a_fun$) (?v4 C_a_fun$) (?v5 A_a_fun$)) (=> (= (fun_app$cc ?v0 (fun_app$di ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$cc ?v4 ?v2))) (= (fun_app$cc (fun_app$bm (comp$n (fun_app$ap (comp$g ?v5) ?v0)) ?v1) ?v2) (fun_app$cc (fun_app$ap (comp$g (fun_app$dl (comp$ao ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 B_c_fun$) (?v2 B$) (?v3 A_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (= (fun_app$cc ?v0 (fun_app$dk ?v1 ?v2)) (fun_app$cg ?v3 (fun_app$s ?v4 ?v2))) (= (fun_app$s (fun_app$bz (comp$w (fun_app$ap (comp$g ?v5) ?v0)) ?v1) ?v2) (fun_app$s (fun_app$be (comp$j (fun_app$dl (comp$ao ?v5) ?v3)) ?v4) ?v2))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_llist$)) (= (ltl$a (fun_app$br (lmap$e ?v0) ?v1)) (fun_app$br (lmap$e ?v0) (ltl$d ?v1))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_llist$)) (= (ltl$ (fun_app$bs (lmap$f ?v0) ?v1)) (fun_app$bs (lmap$f ?v0) (ltl$d ?v1))) ))
(assert (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (ltl$a (fun_app$a (lmap$a ?v0) ?v1)) (fun_app$a (lmap$a ?v0) (ltl$a ?v1))) ))
(assert (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (ltl$a (fun_app$bv (lmap$b ?v0) ?v1)) (fun_app$bv (lmap$b ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (ltl$ (fun_app$bq (lmap$c ?v0) ?v1)) (fun_app$bq (lmap$c ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (ltl$ (fun_app$r (fun_app$t lmap$ ?v0) ?v1)) (fun_app$r (fun_app$t lmap$ ?v0) (ltl$a ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (not (lnull$ (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v1) ?v2) ?v3))) (not (fun_app$m ?v0 ?v3))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (not (lnull$a (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v1) ?v2) ?v3))) (not (fun_app$m ?v0 ?v3))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_llist_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (not (lnull$b (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v1) ?v2) ?v3))) (not (fun_app$m ?v0 ?v3))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_llist_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (not (lnull$c (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v1) ?v2) ?v3))) (not (fun_app$m ?v0 ?v3))) ))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist_a_fun$) (?v2 B_llist_b_llist_fun$) (?v3 B_llist$)) (= (not (lnull$a (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v1) ?v2) ?v3))) (not (fun_app$ ?v0 ?v3))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (lnull$ (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (fun_app$m ?v0 ?v3)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (lnull$a (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v1) ?v2) ?v3)) (fun_app$m ?v0 ?v3)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_llist_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (lnull$b (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v1) ?v2) ?v3)) (fun_app$m ?v0 ?v3)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_llist_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (lnull$c (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v1) ?v2) ?v3)) (fun_app$m ?v0 ?v3)) ))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist_a_fun$) (?v2 B_llist_b_llist_fun$) (?v3 B_llist$)) (= (lnull$a (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v1) ?v2) ?v3)) (fun_app$ ?v0 ?v3)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_llist_fun$) (?v2 C_bool_fun$) (?v3 C_b_llist_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (lnull$b (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$m ?v0 ?v5)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_llist_fun$) (?v2 C_bool_fun$) (?v3 C_a_llist_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (lnull$c (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$m ?v0 ?v5)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (lnull$ (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$m ?v0 ?v5)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (lnull$a (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$m ?v0 ?v5)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_llist_fun$) (?v2 C_bool_fun$) (?v3 C_b_llist_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (not (lnull$b (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v1) ?v2) ?v3) ?v4) ?v5))) (not (fun_app$m ?v0 ?v5))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_llist_fun$) (?v2 C_bool_fun$) (?v3 C_a_llist_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (not (lnull$c (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v1) ?v2) ?v3) ?v4) ?v5))) (not (fun_app$m ?v0 ?v5))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (not (lnull$ (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5))) (not (fun_app$m ?v0 ?v5))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (not (lnull$a (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5))) (not (fun_app$m ?v0 ?v5))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$a (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) ?v1)) (fun_app$ce ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$ (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) ?v1)) (fun_app$cc ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$b (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) ?v1)) (fun_app$u ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$c (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) ?v1)) (fun_app$aa ?v2 ?v1))) ))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist$) (?v2 B_llist_a_fun$) (?v3 B_llist_b_llist_fun$)) (=> (not (fun_app$ ?v0 ?v1)) (= (lhd$ (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) ?v1)) (fun_app$dm ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$b (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (fun_app$u ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$c (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (fun_app$aa ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$a (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (fun_app$ce ?v2 ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (lhd$ (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (fun_app$cc ?v2 ?v1))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_llist$)) (= (lnull$a (fun_app$bs (lmap$f ?v0) ?v1)) (lnull$d ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$a (fun_app$bq (lmap$c ?v0) ?v1)) (lnull$a ?v1)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_llist$)) (= (lnull$ (fun_app$br (lmap$e ?v0) ?v1)) (lnull$d ?v1)) ))
(assert (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$bv (lmap$b ?v0) ?v1)) (lnull$a ?v1)) ))
(assert (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$ (fun_app$a (lmap$a ?v0) ?v1)) (lnull$ ?v1)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$a (fun_app$r (fun_app$t lmap$ ?v0) ?v1)) (lnull$ ?v1)) ))
(assert (forall ((?v0 C_llist$) (?v1 C_b_fun$)) (=> (not (lnull$d ?v0)) (= (lhd$a (fun_app$br (lmap$e ?v1) ?v0)) (fun_app$ce ?v1 (lhd$d ?v0)))) ))
(assert (forall ((?v0 C_llist$) (?v1 C_a_fun$)) (=> (not (lnull$d ?v0)) (= (lhd$ (fun_app$bs (lmap$f ?v1) ?v0)) (fun_app$cc ?v1 (lhd$d ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_b_fun$)) (=> (not (lnull$a ?v0)) (= (lhd$a (fun_app$bv (lmap$b ?v1) ?v0)) (fun_app$cf ?v1 (lhd$ ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (lnull$a ?v0)) (= (lhd$ (fun_app$bq (lmap$c ?v1) ?v0)) (fun_app$cg ?v1 (lhd$ ?v0)))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_b_fun$)) (=> (not (lnull$ ?v0)) (= (lhd$a (fun_app$a (lmap$a ?v1) ?v0)) (fun_app$dj ?v1 (lhd$a ?v0)))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_a_fun$)) (=> (not (lnull$ ?v0)) (= (lhd$ (fun_app$r (fun_app$t lmap$ ?v1) ?v0)) (fun_app$s ?v1 (lhd$a ?v0)))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$e (fun_app$f ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$e (fun_app$f ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$d ?v0 ?v1) ?v2) (forall ((?v3 B_llist$) (?v4 B_llist$)) (=> (fun_app$ (fun_app$d ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$ (fun_app$d ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$e (fun_app$f ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$e (fun_app$f ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$d ?v0 ?v1) ?v2) (forall ((?v3 B_llist$) (?v4 B_llist$)) (=> (fun_app$ (fun_app$d ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$ (fun_app$d ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$a ?v0) (lnull$a ?v1)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 B_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 C_llist$) (?v1 C_b_fun$)) (=> (not (lnull$d ?v0)) (= (ltl$a (fun_app$br (lmap$e ?v1) ?v0)) (fun_app$br (lmap$e ?v1) (ltl$d ?v0)))) ))
(assert (forall ((?v0 C_llist$) (?v1 C_a_fun$)) (=> (not (lnull$d ?v0)) (= (ltl$ (fun_app$bs (lmap$f ?v1) ?v0)) (fun_app$bs (lmap$f ?v1) (ltl$d ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_b_fun$)) (=> (not (lnull$a ?v0)) (= (ltl$a (fun_app$bv (lmap$b ?v1) ?v0)) (fun_app$bv (lmap$b ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (lnull$a ?v0)) (= (ltl$ (fun_app$bq (lmap$c ?v1) ?v0)) (fun_app$bq (lmap$c ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_b_fun$)) (=> (not (lnull$ ?v0)) (= (ltl$a (fun_app$a (lmap$a ?v1) ?v0)) (fun_app$a (lmap$a ?v1) (ltl$a ?v0)))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_a_fun$)) (=> (not (lnull$ ?v0)) (= (ltl$ (fun_app$r (fun_app$t lmap$ ?v1) ?v0)) (fun_app$r (fun_app$t lmap$ ?v1) (ltl$a ?v0)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$b (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$c (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$ (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$a (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_llist_fun$) (?v5 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$b (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_llist_fun$) (?v5 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$c (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$ (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$a (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$ (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$a (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$b (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$)) (=> (fun_app$m ?v0 ?v1) (lnull$c (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist$) (?v2 B_llist_a_fun$) (?v3 B_llist_b_llist_fun$)) (=> (fun_app$ ?v0 ?v1) (lnull$a (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$ (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$a (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$b (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (not (lnull$c (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) ?v1)))) ))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist$) (?v2 B_llist_a_fun$) (?v3 B_llist_b_llist_fun$)) (=> (not (fun_app$ ?v0 ?v1)) (not (lnull$a (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$b (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (ite (fun_app$m ?v3 ?v1) (fun_app$cj ?v4 ?v1) (fun_app$cj (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_llist$b ?v0) ?v2) ?v3) ?v4) ?v5) (fun_app$di ?v5 ?v1))))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$c (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (ite (fun_app$m ?v3 ?v1) (fun_app$cl ?v4 ?v1) (fun_app$cl (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (corec_llist$c ?v0) ?v2) ?v3) ?v4) ?v5) (fun_app$di ?v5 ?v1))))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$a (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (ite (fun_app$m ?v3 ?v1) (fun_app$u ?v4 ?v1) (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) (fun_app$di ?v5 ?v1))))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$ (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)) (ite (fun_app$m ?v3 ?v1) (fun_app$aa ?v4 ?v1) (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) (fun_app$di ?v5 ?v1))))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$a (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) ?v1)) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) (fun_app$di ?v3 ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$ (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) ?v1)) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) (fun_app$di ?v3 ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$b (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) ?v1)) (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) (fun_app$di ?v3 ?v1)))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (ltl$c (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) ?v1)) (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) (fun_app$di ?v3 ?v1)))) ))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist$) (?v2 B_llist_a_fun$) (?v3 B_llist_b_llist_fun$)) (=> (not (fun_app$ ?v0 ?v1)) (= (ltl$ (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) ?v1)) (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) (fun_app$a ?v3 ?v1)))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (lnull$a ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 B_llist$)) (=> (not (lnull$ ?v0)) (= (lCons$a (lhd$a ?v0) (ltl$a ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$e (fun_app$f ?v0 ?v4) ?v5) (and (= (lnull$a ?v4) (lnull$a ?v5)) (=> (and (not (lnull$a ?v4)) (not (lnull$a ?v5))) (and (fun_app$p (fun_app$q ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (fun_app$e (fun_app$f ?v0 (ltl$ ?v4)) (ltl$ ?v5)))))) )) (fun_app$e (fun_app$f (llist_all2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$dn ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$dn ?v0 ?v4) ?v5) (and (= (lnull$a ?v4) (lnull$ ?v5)) (=> (and (not (lnull$a ?v4)) (not (lnull$ ?v5))) (and (fun_app$c (fun_app$do ?v3 (lhd$ ?v4)) (lhd$a ?v5)) (fun_app$ (fun_app$dn ?v0 (ltl$ ?v4)) (ltl$a ?v5)))))) )) (fun_app$ (fun_app$dn (llist_all2$a ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 B_llist_a_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$e (fun_app$dp ?v0 ?v1) ?v2) (forall ((?v4 B_llist$) (?v5 A_llist$)) (=> (fun_app$e (fun_app$dp ?v0 ?v4) ?v5) (and (= (lnull$ ?v4) (lnull$a ?v5)) (=> (and (not (lnull$ ?v4)) (not (lnull$a ?v5))) (and (fun_app$p (fun_app$dq ?v3 (lhd$a ?v4)) (lhd$ ?v5)) (fun_app$e (fun_app$dp ?v0 (ltl$a ?v4)) (ltl$ ?v5)))))) )) (fun_app$e (fun_app$dp (llist_all2$b ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$d ?v0 ?v1) ?v2) (forall ((?v4 B_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$d ?v0 ?v4) ?v5) (and (= (lnull$ ?v4) (lnull$ ?v5)) (=> (and (not (lnull$ ?v4)) (not (lnull$ ?v5))) (and (fun_app$c (fun_app$o ?v3 (lhd$a ?v4)) (lhd$a ?v5)) (fun_app$ (fun_app$d ?v0 (ltl$a ?v4)) (ltl$a ?v5)))))) )) (fun_app$ (fun_app$d (llist_all2$c ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$e (fun_app$f (llist_all2$ ?v0) ?v1) ?v2) (and (= (lnull$a ?v1) (lnull$a ?v2)) (=> (and (not (lnull$a ?v1)) (not (lnull$a ?v2))) (and (fun_app$p (fun_app$q ?v0 (lhd$ ?v1)) (lhd$ ?v2)) (fun_app$e (fun_app$f (llist_all2$ ?v0) (ltl$ ?v1)) (ltl$ ?v2)))))) ))
(assert (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (= (fun_app$ (fun_app$dn (llist_all2$a ?v0) ?v1) ?v2) (and (= (lnull$a ?v1) (lnull$ ?v2)) (=> (and (not (lnull$a ?v1)) (not (lnull$ ?v2))) (and (fun_app$c (fun_app$do ?v0 (lhd$ ?v1)) (lhd$a ?v2)) (fun_app$ (fun_app$dn (llist_all2$a ?v0) (ltl$ ?v1)) (ltl$a ?v2)))))) ))
(assert (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (= (fun_app$e (fun_app$dp (llist_all2$b ?v0) ?v1) ?v2) (and (= (lnull$ ?v1) (lnull$a ?v2)) (=> (and (not (lnull$ ?v1)) (not (lnull$a ?v2))) (and (fun_app$p (fun_app$dq ?v0 (lhd$a ?v1)) (lhd$ ?v2)) (fun_app$e (fun_app$dp (llist_all2$b ?v0) (ltl$a ?v1)) (ltl$ ?v2)))))) ))
(assert (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$ (fun_app$d (llist_all2$c ?v0) ?v1) ?v2) (and (= (lnull$ ?v1) (lnull$ ?v2)) (=> (and (not (lnull$ ?v1)) (not (lnull$ ?v2))) (and (fun_app$c (fun_app$o ?v0 (lhd$a ?v1)) (lhd$a ?v2)) (fun_app$ (fun_app$d (llist_all2$c ?v0) (ltl$a ?v1)) (ltl$a ?v2)))))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (lnull$a ?v0)) (member$a (lhd$ ?v0) (lset$ ?v0))) ))
(assert (forall ((?v0 B_llist$)) (=> (not (lnull$ ?v0)) (member$ (lhd$a ?v0) (lset$a ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (lnull$a ?v0)) (member$a ?v1 (lset$ (ltl$ ?v0)))) (member$a ?v1 (lset$ ?v0))) ))
(assert (forall ((?v0 B_llist$) (?v1 B$)) (=> (and (not (lnull$ ?v0)) (member$ ?v1 (lset$a (ltl$a ?v0)))) (member$ ?v1 (lset$a ?v0))) ))
(assert (forall ((?v0 B_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 B$) (?v1 B_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (= (fun_app$dr (comp$ap (fun_app$ds (map_fun$ ?v0) ?v1)) (fun_app$dt (map_fun$a ?v2) ?v3)) (fun_app$du (map_fun$b (fun_app$ag (fun_app$ah comp$ ?v2) ?v0)) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_a_fun$) (?v3 C_b_llist_fun$)) (= (fun_app$dv (comp$aq (fun_app$dw (map_fun$c ?v0) ?v1)) (fun_app$dx (map_fun$d ?v2) ?v3)) (fun_app$dy (map_fun$e (fun_app$ag (fun_app$ah comp$ ?v2) ?v0)) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3))) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 B_a_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_fun$)) (= (fun_app$dz (comp$ar (fun_app$ea (map_fun$f ?v0) ?v1)) (fun_app$eb (map_fun$g ?v2) ?v3)) (fun_app$ec (map_fun$h (fun_app$ai (fun_app$aj comp$a ?v2) ?v0)) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$)) (= (fun_app$ed (comp$as (fun_app$ee (map_fun$i ?v0) ?v1)) (fun_app$ef (map_fun$j ?v2) ?v3)) (fun_app$eg (map_fun$k (fun_app$ai (fun_app$aj comp$a ?v2) ?v0)) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 A_b_fun$) (?v2 B_a_fun$) (?v3 C_a_fun$)) (= (fun_app$eh (comp$at (fun_app$ei (map_fun$l ?v0) ?v1)) (fun_app$ej (map_fun$m ?v2) ?v3)) (fun_app$ek (map_fun$n (fun_app$ag (fun_app$ah comp$ ?v2) ?v0)) (fun_app$an (comp$e ?v1) ?v3))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 A_a_fun$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (= (fun_app$el (comp$au (fun_app$em (map_fun$o ?v0) ?v1)) (fun_app$en (map_fun$p ?v2) ?v3)) (fun_app$eo (map_fun$q (fun_app$ag (fun_app$ah comp$ ?v2) ?v0)) (fun_app$be (comp$j ?v1) ?v3))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 B_a_fun$) (?v2 A_b_fun$) (?v3 C_b_fun$)) (= (fun_app$ep (comp$av (fun_app$eo (map_fun$q ?v0) ?v1)) (fun_app$eq (map_fun$r ?v2) ?v3)) (fun_app$er (map_fun$s (fun_app$an (comp$e ?v2) ?v0)) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 A_b_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$)) (= (fun_app$es (comp$aw (fun_app$et (map_fun$t ?v0) ?v1)) (fun_app$eu (map_fun$u ?v2) ?v3)) (fun_app$ev (map_fun$v (fun_app$an (comp$e ?v2) ?v0)) (fun_app$an (comp$e ?v1) ?v3))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 A_a_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$)) (= (fun_app$ew (comp$ax (fun_app$ex (map_fun$w ?v0) ?v1)) (fun_app$eu (map_fun$u ?v2) ?v3)) (fun_app$er (map_fun$s (fun_app$an (comp$e ?v2) ?v0)) (fun_app$ap (comp$g ?v1) ?v3))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 A_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (= (fun_app$ey (comp$ay (fun_app$et (map_fun$t ?v0) ?v1)) (fun_app$ez (map_fun$x ?v2) ?v3)) (fun_app$ek (map_fun$n (fun_app$ap (comp$g ?v2) ?v0)) (fun_app$an (comp$e ?v1) ?v3))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_c_fun$)) (! (=> (fun_app$m ?v0 ?v1) (= (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) ?v1) lNil$a)) :pattern ((fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v2) ?v3) ?v1)))))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (! (=> (fun_app$m ?v0 ?v1) (= (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) ?v1) lNil$)) :pattern ((fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v2) ?v3) ?v1)))))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$)) (! (=> (fun_app$m ?v0 ?v1) (= (fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) ?v1) lNil$b)) :pattern ((fun_app$cj (fun_app$ar (fun_app$ck (unfold_llist$b ?v0) ?v2) ?v3) ?v1)))))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$)) (! (=> (fun_app$m ?v0 ?v1) (= (fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) ?v1) lNil$c)) :pattern ((fun_app$cl (fun_app$av (fun_app$cm (unfold_llist$c ?v0) ?v2) ?v3) ?v1)))))
(assert (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist$) (?v2 B_llist_a_fun$) (?v3 B_llist_b_llist_fun$)) (! (=> (fun_app$ ?v0 ?v1) (= (fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) ?v1) lNil$)) :pattern ((fun_app$r (fun_app$ct (fun_app$cu (unfold_llist$h ?v0) ?v2) ?v3) ?v1)))))
(assert (forall ((?v0 C_b_fun$) (?v1 C_b_llist_fun$) (?v2 C_c_fun$)) (= (comp$az (convol$ ?v0 ?v1) ?v2) (convol$ (fun_app$bk (comp$l ?v0) ?v2) (fun_app$v (comp$z ?v1) ?v2))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (comp$ba (convol$a ?v0 ?v1) ?v2) (convol$a (fun_app$bk (comp$l ?v0) ?v2) (fun_app$bk (comp$l ?v1) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_a_llist_fun$) (?v2 C_c_fun$)) (= (comp$bb (convol$b ?v0 ?v1) ?v2) (convol$b (fun_app$bm (comp$n ?v0) ?v2) (fun_app$ab (comp$aa ?v1) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (comp$bc (convol$c ?v0 ?v1) ?v2) (convol$c (fun_app$bm (comp$n ?v0) ?v2) (fun_app$bm (comp$n ?v1) ?v2))) ))
(assert (forall ((?v0 C_a_fun$) (?v1 C_a_fun$) (?v2 B_c_fun$)) (= (comp$bd (convol$c ?v0 ?v1) ?v2) (convol$d (fun_app$bz (comp$w ?v0) ?v2) (fun_app$bz (comp$w ?v1) ?v2))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$)) (= (comp$be (convol$d ?v0 ?v1) ?v2) (convol$d (fun_app$bt (comp$s ?v0) ?v2) (fun_app$bt (comp$s ?v1) ?v2))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (comp$bf (convol$d ?v0 ?v1) ?v2) (convol$c (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v2))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$)) (= (comp$bg (convol$e ?v0 ?v1) ?v2) (convol$f (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v2))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (! (=> (fun_app$m ?v0 ?v1) (= (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1) lNil$a)) :pattern ((fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)))))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (! (=> (fun_app$m ?v0 ?v1) (= (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1) lNil$)) :pattern ((fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1)))))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (ite (fun_app$m ?v0 ?v5) lNil$a (lCons$a (fun_app$ce ?v1 ?v5) (ite (fun_app$m ?v2 ?v5) (fun_app$u ?v3 ?v5) (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$di ?v4 ?v5)))))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_llist_fun$) (?v4 C_c_fun$) (?v5 C$)) (= (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (ite (fun_app$m ?v0 ?v5) lNil$ (lCons$ (fun_app$cc ?v1 ?v5) (ite (fun_app$m ?v2 ?v5) (fun_app$aa ?v3 ?v5) (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$di ?v4 ?v5)))))) ))
(assert (forall ((?v0 C_b_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 A_c_fun$)) (= (fun_app$fa (fun_app$ds (map_fun$ ?v0) ?v1) (fun_app$fb (fun_app$dt (map_fun$a ?v2) ?v3) ?v4)) (fun_app$fc (fun_app$du (map_fun$b (fun_app$ag (fun_app$ah comp$ ?v2) ?v0)) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_a_fun$) (?v3 C_b_llist_fun$) (?v4 A_c_fun$)) (= (fun_app$fd (fun_app$dw (map_fun$c ?v0) ?v1) (fun_app$fe (fun_app$dx (map_fun$d ?v2) ?v3) ?v4)) (fun_app$ff (fun_app$dy (map_fun$e (fun_app$ag (fun_app$ah comp$ ?v2) ?v0)) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 B_a_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_fun$) (?v4 A_llist_c_fun$)) (= (fun_app$fg (fun_app$ea (map_fun$f ?v0) ?v1) (fun_app$fh (fun_app$eb (map_fun$g ?v2) ?v3) ?v4)) (fun_app$fi (fun_app$ec (map_fun$h (fun_app$ai (fun_app$aj comp$a ?v2) ?v0)) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$) (?v4 A_llist_c_fun$)) (= (fun_app$fj (fun_app$ee (map_fun$i ?v0) ?v1) (fun_app$fk (fun_app$ef (map_fun$j ?v2) ?v3) ?v4)) (fun_app$fl (fun_app$eg (map_fun$k (fun_app$ai (fun_app$aj comp$a ?v2) ?v0)) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (fun_app$r (fun_app$t lmap$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$s ?v0 ?v4)) (= ?v3 (fun_app$r (fun_app$t lmap$ ?v0) ?v5)))) )) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_llist$)) (! (= (fun_app$r (fun_app$t lmap$ ?v0) (lCons$a ?v1 ?v2)) (lCons$ (fun_app$s ?v0 ?v1) (fun_app$r (fun_app$t lmap$ ?v0) ?v2))) :pattern ((fun_app$r (fun_app$t lmap$ ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_bool_fun$) (?v4 C_b_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v1) (lCons$a (fun_app$ce ?v2 ?v1) (ite (fun_app$m ?v3 ?v1) (fun_app$u ?v4 ?v1) (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v2) ?v3) ?v4) ?v5) (fun_app$di ?v5 ?v1)))))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_llist_fun$) (?v5 C_c_fun$)) (=> (not (fun_app$m ?v0 ?v1)) (= (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v1) (lCons$ (fun_app$cc ?v2 ?v1) (ite (fun_app$m ?v3 ?v1) (fun_app$aa ?v4 ?v1) (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v2) ?v3) ?v4) ?v5) (fun_app$di ?v5 ?v1)))))) ))
(assert (forall ((?v0 B_a_fun$)) (! (= (fun_app$r (fun_app$t lmap$ ?v0) lNil$a) lNil$) :pattern ((fun_app$t lmap$ ?v0)))))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (= lNil$ (fun_app$r (fun_app$t lmap$ ?v0) ?v1)) (= ?v1 lNil$a)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (= (fun_app$r (fun_app$t lmap$ ?v0) ?v1) lNil$) (= ?v1 lNil$a)) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$ ?v4 (lset$a ?v1)) (= (fun_app$s ?v2 ?v4) (fun_app$s ?v3 ?v4))) )) (= (fun_app$r (fun_app$t lmap$ ?v2) ?v0) (fun_app$r (fun_app$t lmap$ ?v3) ?v1))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_a_fun$) (?v2 B_a_fun$)) (=> (forall ((?v3 B$)) (=> (member$ ?v3 (lset$a ?v0)) (= (fun_app$s ?v1 ?v3) (fun_app$s ?v2 ?v3))) ) (= (fun_app$r (fun_app$t lmap$ ?v1) ?v0) (fun_app$r (fun_app$t lmap$ ?v2) ?v0))) ))
(assert (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$ ?v4 (lset$a ?v0)) (and (member$ ?v5 (lset$a ?v1)) (= (fun_app$s ?v2 ?v4) (fun_app$s ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$r (fun_app$t lmap$ ?v2) ?v0) (fun_app$r (fun_app$t lmap$ ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$) (?v3 C_b_fun$)) (= (comp$bh (map_prod$ ?v0 ?v1) (convol$a ?v2 ?v3)) (convol$c (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_fun$) (?v3 C_b_llist_fun$)) (= (comp$bi (map_prod$a ?v0 ?v1) (convol$ ?v2 ?v3)) (convol$b (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_a_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_fun$)) (= (comp$bj (map_prod$b ?v0 ?v1) (convol$g ?v2 ?v3)) (convol$h (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_llist_fun$)) (= (comp$bk (map_prod$c ?v0 ?v1) (convol$i ?v2 ?v3)) (convol$f (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lset$ (fun_app$r (fun_app$t lmap$ ?v0) ?v1)) (image$ ?v0 (lset$a ?v1))) ))
(assert (forall ((?v0 B_a_fun$)) (= (fun_app$t lmap$ ?v0) (fun_app$ct (fun_app$cu (unfold_llist$h uua$) (fun_app$cv (comp$y ?v0) uub$)) uuc$)) ))
(assert (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$ (rel_fun$a ?v0 ?v1) (rel_fun$b (rel_fun$c ?v2 ?v0) (rel_fun$d ?v2 ?v1)) comp$ comp$) ))
(assert (forall ((?v0 B_b_llist_bool_fun_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$e (rel_fun$f ?v0 ?v1) (rel_fun$g (rel_fun$h ?v2 ?v0) (rel_fun$i ?v2 ?v1)) comp$ comp$a) ))
(assert (forall ((?v0 B_llist_b_bool_fun_fun$) (?v1 A_llist_a_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$j (rel_fun$k ?v0 ?v1) (rel_fun$l (rel_fun$m ?v2 ?v0) (rel_fun$n ?v2 ?v1)) comp$a comp$) ))
(assert (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$o (rel_fun$p ?v0 ?v1) (rel_fun$q (rel_fun$r ?v2 ?v0) (rel_fun$s ?v2 ?v1)) comp$a comp$a) ))
(assert (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$ (rel_fun$a ?v0 ?v1) (rel_fun$b (rel_fun$c uud$ ?v0) (rel_fun$d uud$ ?v1)) comp$ comp$) ))
(assert (forall ((?v0 B_b_llist_bool_fun_fun$) (?v1 A_a_llist_bool_fun_fun$)) (rel_fun$e (rel_fun$f ?v0 ?v1) (rel_fun$g (rel_fun$h uud$ ?v0) (rel_fun$i uud$ ?v1)) comp$ comp$a) ))
(assert (forall ((?v0 B_llist_b_bool_fun_fun$) (?v1 A_llist_a_bool_fun_fun$)) (rel_fun$j (rel_fun$k ?v0 ?v1) (rel_fun$l (rel_fun$m uud$ ?v0) (rel_fun$n uud$ ?v1)) comp$a comp$) ))
(assert (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$)) (rel_fun$o (rel_fun$p ?v0 ?v1) (rel_fun$q (rel_fun$r uud$ ?v0) (rel_fun$s uud$ ?v1)) comp$a comp$a) ))
(assert (forall ((?v0 C_c_bool_fun_fun$) (?v1 B_b_bool_fun_fun$)) (rel_fun$t (rel_fun$u ?v0 uue$) (rel_fun$v (rel_fun$c ?v0 ?v1) (rel_fun$w (rel_fun$u ?v0 uue$) (rel_fun$x (rel_fun$r ?v0 (llist_all2$c ?v1)) (rel_fun$y (rel_fun$z ?v0 ?v0) (rel_fun$r ?v0 (llist_all2$c ?v1)))))) corec_llist$ corec_llist$) ))
(assert (forall ((?v0 C_c_bool_fun_fun$) (?v1 B_a_bool_fun_fun$)) (rel_fun$aa (rel_fun$u ?v0 uue$) (rel_fun$ab (rel_fun$ac ?v0 ?v1) (rel_fun$ad (rel_fun$u ?v0 uue$) (rel_fun$ae (rel_fun$af ?v0 (llist_all2$b ?v1)) (rel_fun$ag (rel_fun$z ?v0 ?v0) (rel_fun$af ?v0 (llist_all2$b ?v1)))))) corec_llist$ corec_llist$a) ))
(assert (forall ((?v0 C_c_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$ah (rel_fun$u ?v0 uue$) (rel_fun$ai (rel_fun$aj ?v0 ?v1) (rel_fun$ak (rel_fun$u ?v0 uue$) (rel_fun$al (rel_fun$am ?v0 (llist_all2$a ?v1)) (rel_fun$an (rel_fun$z ?v0 ?v0) (rel_fun$am ?v0 (llist_all2$a ?v1)))))) corec_llist$a corec_llist$) ))
(assert (forall ((?v0 C_c_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$ao (rel_fun$u ?v0 uue$) (rel_fun$ap (rel_fun$d ?v0 ?v1) (rel_fun$aq (rel_fun$u ?v0 uue$) (rel_fun$ar (rel_fun$s ?v0 (llist_all2$ ?v1)) (rel_fun$as (rel_fun$z ?v0 ?v0) (rel_fun$s ?v0 (llist_all2$ ?v1)))))) corec_llist$a corec_llist$a) ))
(assert (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$at (rel_fun$a ?v0 ?v1) (rel_fun$p (llist_all2$c ?v0) (llist_all2$ ?v1)) lmap$ lmap$) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_set$)) (= (image$ ?v0 (image$a ?v1 ?v2)) (image$b (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_set$)) (= (image$c ?v0 (image$d ?v1 ?v2)) (image$e (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 C_b_fun$) (?v1 C_set$) (?v2 C_b_fun$) (?v3 C_set$) (?v4 B_a_fun$)) (=> (= (image$a ?v0 ?v1) (image$a ?v2 ?v3)) (= (image$b (fun_app$ag (fun_app$ah comp$ ?v4) ?v0) ?v1) (image$b (fun_app$ag (fun_app$ah comp$ ?v4) ?v2) ?v3))) ))
(assert (forall ((?v0 C_b_llist_fun$) (?v1 C_set$) (?v2 C_b_llist_fun$) (?v3 C_set$) (?v4 B_llist_a_llist_fun$)) (=> (= (image$d ?v0 ?v1) (image$d ?v2 ?v3)) (= (image$e (fun_app$ai (fun_app$aj comp$a ?v4) ?v0) ?v1) (image$e (fun_app$ai (fun_app$aj comp$a ?v4) ?v2) ?v3))) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_b_llist_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z corec_llist$ ?v0) ?v1) uuf$) ?v2) ?v3) ?v4) (fun_app$u (fun_app$v (fun_app$ch (unfold_llist$ ?v0) ?v1) ?v3) ?v4)) ))
(assert (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_a_llist_fun$) (?v3 C_c_fun$) (?v4 C$)) (= (fun_app$aa (fun_app$ab (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af corec_llist$a ?v0) ?v1) uuf$) ?v2) ?v3) ?v4) (fun_app$aa (fun_app$ab (fun_app$ci (unfold_llist$a ?v0) ?v1) ?v3) ?v4)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$) (?v3 C_b_fun$) (?v4 C_c_prod$)) (= (fun_app$fm (map_prod$ ?v0 ?v1) (fun_app$fn (map_prod$d ?v2 ?v3) ?v4)) (fun_app$fo (map_prod$e (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_prod$)) (= (fun_app$fp (map_prod$a ?v0 ?v1) (fun_app$fq (map_prod$f ?v2 ?v3) ?v4)) (fun_app$fr (map_prod$g (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_a_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_fun$) (?v4 C_c_prod$)) (= (fun_app$fs (map_prod$b ?v0 ?v1) (fun_app$ft (map_prod$h ?v2 ?v3) ?v4)) (fun_app$fu (map_prod$i (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_prod$)) (= (fun_app$fv (map_prod$c ?v0 ?v1) (fun_app$fw (map_prod$j ?v2 ?v3) ?v4)) (fun_app$fx (map_prod$k (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 C_c_bool_fun_fun$)) (rel_fun$ uug$ (rel_fun$b (rel_fun$c ?v0 uuh$) (rel_fun$d ?v0 uui$)) comp$ comp$) ))
(assert (forall ((?v0 C_c_bool_fun_fun$)) (rel_fun$o uuj$ (rel_fun$q (rel_fun$r ?v0 uuk$) (rel_fun$s ?v0 uul$)) comp$a comp$a) ))
(assert (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$ (rel_fun$a ?v0 ?v1) (rel_fun$b (rel_fun$c ?v2 ?v0) (rel_fun$d ?v2 ?v1)) comp$ comp$) ))
(assert (forall ((?v0 B_b_llist_bool_fun_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$e (rel_fun$f ?v0 ?v1) (rel_fun$g (rel_fun$h ?v2 ?v0) (rel_fun$i ?v2 ?v1)) comp$ comp$a) ))
(assert (forall ((?v0 B_llist_b_bool_fun_fun$) (?v1 A_llist_a_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$j (rel_fun$k ?v0 ?v1) (rel_fun$l (rel_fun$m ?v2 ?v0) (rel_fun$n ?v2 ?v1)) comp$a comp$) ))
(assert (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 C_c_bool_fun_fun$)) (rel_fun$o (rel_fun$p ?v0 ?v1) (rel_fun$q (rel_fun$r ?v2 ?v0) (rel_fun$s ?v2 ?v1)) comp$a comp$a) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$) (?v3 C_b_fun$)) (= (comp$bl (map_prod$ ?v0 ?v1) (map_prod$d ?v2 ?v3)) (map_prod$e (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_fun$) (?v3 C_b_llist_fun$)) (= (comp$bm (map_prod$a ?v0 ?v1) (map_prod$f ?v2 ?v3)) (map_prod$g (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_a_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_fun$)) (= (comp$bn (map_prod$b ?v0 ?v1) (map_prod$h ?v2 ?v3)) (map_prod$i (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_llist_fun$)) (= (comp$bo (map_prod$c ?v0 ?v1) (map_prod$j ?v2 ?v3)) (map_prod$k (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (= (map_prod$e (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (comp$bl (map_prod$ ?v0 ?v2) (map_prod$d ?v1 ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$)) (= (map_prod$g (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (comp$bm (map_prod$a ?v0 ?v2) (map_prod$f ?v1 ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (= (map_prod$i (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ag (fun_app$ah comp$ ?v2) ?v3)) (comp$bn (map_prod$b ?v0 ?v2) (map_prod$h ?v1 ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 B_llist_a_llist_fun$) (?v3 C_b_llist_fun$)) (= (map_prod$k (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ai (fun_app$aj comp$a ?v2) ?v3)) (comp$bo (map_prod$c ?v0 ?v2) (map_prod$j ?v1 ?v3))) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$) (?v3 C_b_fun$) (?v4 C_c_prod$)) (= (fun_app$fm (map_prod$ ?v0 ?v1) (fun_app$fn (map_prod$d ?v2 ?v3) ?v4)) (fun_app$fo (map_prod$e (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_a_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_prod$)) (= (fun_app$fp (map_prod$a ?v0 ?v1) (fun_app$fq (map_prod$f ?v2 ?v3) ?v4)) (fun_app$fr (map_prod$g (fun_app$ag (fun_app$ah comp$ ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_a_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_fun$) (?v4 C_c_prod$)) (= (fun_app$fs (map_prod$b ?v0 ?v1) (fun_app$ft (map_prod$h ?v2 ?v3) ?v4)) (fun_app$fu (map_prod$i (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ag (fun_app$ah comp$ ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 B_llist_a_llist_fun$) (?v2 C_b_llist_fun$) (?v3 C_b_llist_fun$) (?v4 C_c_prod$)) (= (fun_app$fv (map_prod$c ?v0 ?v1) (fun_app$fw (map_prod$j ?v2 ?v3) ?v4)) (fun_app$fx (map_prod$k (fun_app$ai (fun_app$aj comp$a ?v0) ?v2) (fun_app$ai (fun_app$aj comp$a ?v1) ?v3)) ?v4)) ))
(assert (forall ((?v0 A$) (?v1 C_b_fun$) (?v2 C$)) (= (fun_app$cc (fun_app$ag (fun_app$ah comp$ (uum$ ?v0)) ?v1) ?v2) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 C_b_llist_fun$) (?v2 C$)) (= (fun_app$aa (fun_app$ai (fun_app$aj comp$a (uun$ ?v0)) ?v1) ?v2) ?v0) ))
(assert (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C$)) (=> (= (fun_app$ag (fun_app$ah comp$ ?v0) ?v1) (fun_app$ap (comp$g id$) ?v2)) (= (fun_app$s ?v0 (fun_app$ce ?v1 ?v3)) (fun_app$cc ?v2 ?v3))) ))
(assert (forall ((?v0 B_llist_a_llist_fun$) (?v1 C_b_llist_fun$) (?v2 C_a_llist_fun$) (?v3 C$)) (=> (= (fun_app$ai (fun_app$aj comp$a ?v0) ?v1) (fun_app$ao (comp$f id$a) ?v2)) (= (fun_app$r ?v0 (fun_app$u ?v1 ?v3)) (fun_app$aa ?v2 ?v3))) ))
(check-sat)
(exit)

