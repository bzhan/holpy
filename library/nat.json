{
    "content": [
        {
            "args": [],
            "constrs": [
                {
                    "args": [],
                    "name": "zero",
                    "type": "nat"
                },
                {
                    "args": [
                        "n"
                    ],
                    "name": "Suc",
                    "type": "nat => nat"
                }
            ],
            "name": "nat",
            "ty": "type.ind"
        },
        {
            "ascii_op": "+",
            "name": "plus",
            "rules": [
                {
                    "prop": "0 + n = n",
                    "vars": {
                        "n": "nat"
                    }
                },
                {
                    "prop": "Suc m + n = Suc (m + n)",
                    "vars": {
                        "m": "nat",
                        "n": "nat"
                    }
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "ascii_op": "*",
            "name": "times",
            "rules": [
                {
                    "prop": "0 * n = 0",
                    "vars": {
                        "n": "nat"
                    }
                },
                {
                    "prop": "Suc m * n = n + m * n",
                    "vars": {
                        "m": "nat",
                        "n": "nat"
                    }
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
                "Select S1 as goal, use Ctrl+R with plus_def_1.",
                "Set sorry on S1 to reflexive 0.",
                "Select S3 as goal, use Ctrl+I with n as variable name.",
                "Select S4 as goal, use Ctrl+R with plus_def_2.",
                "Set sorry on S4 to arg_combination Suc from S3."
            ],
            "name": "add_0_right",
            "prop": "x + 0 = x",
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "add_1_right",
            "prop": "Suc x = x + Suc 0",
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "add_comm",
            "prop": "x + y = y + x",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_assoc",
            "prop": "x + y + z = x + (y + z)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
                "Select S1 as goal, use Ctrl+R with times_def_1.",
                "Set sorry on S1 to reflexive 0.",
                "Select S3 as goal, use Ctrl+I with n as variable name.",
                "Select S4 as goal, use Ctrl+R with times_def_2.",
                "Select S4 as goal, use Ctrl+R with plus_def_1"
            ],
            "name": "mult_0_right",
            "prop": "x * 0 = 0",
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "mult_1_right",
            "prop": "x * Suc 0 = x",
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "distrib_l",
            "prop": "x * (y + z) = x * z + y * z",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "distrib_r",
            "prop": "(x + y) * z = x * z + y * z",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "mult_assoc",
            "prop": "x * y * z = x * (y * z)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "mult_Suc_right",
            "prop": "x * Suc y = x + x * y",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "mult_comm",
            "prop": "x * y = y * x",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_cancel_left",
            "prop": "x + y = x + z --> y = z",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "add_cancel_right",
            "prop": "x + z = y + z --> x = y",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "add_right_eq_zero",
            "prop": "x + y = x --> y = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_left_eq_zero",
            "prop": "x + y = y --> x = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_is_zero",
            "prop": "x + y = 0 --> x = 0 & y = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "mult_nonzero",
            "prop": "x * y = 0 --> x = 0 | y = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        }
    ],
    "imports": [
        "logic"
    ],
    "name": "nat"
}