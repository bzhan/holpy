(set-info :smt-lib-version 2.6)
(set-logic UFLIA)
(set-info :source |
      Tokeneer case study <http://www.adacore.com/home/products/gnatpro/tokeneer/>
  |)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun field.classstringt.text () Int)
(declare-fun field.classstringt.length () Int)
(declare-fun character__base__first () Int)
(declare-fun character__base__last () Int)
(declare-fun character__first () Int)
(declare-fun character__last () Int)
(declare-fun character__size () Int)
(declare-fun classstringlookup () Int)
(declare-fun classtexti__base__first () Int)
(declare-fun classtexti__base__last () Int)
(declare-fun classtexti__first () Int)
(declare-fun classtexti__last () Int)
(declare-fun classtexti__size () Int)
(declare-fun integer__base__first () Int)
(declare-fun integer__base__last () Int)
(declare-fun integer__first () Int)
(declare-fun integer__last () Int)
(declare-fun integer__size () Int)
(declare-fun natural__base__first () Int)
(declare-fun natural__base__last () Int)
(declare-fun natural__first () Int)
(declare-fun natural__last () Int)
(declare-fun natural__size () Int)
(declare-fun null__string () Int)
(declare-fun positive__base__first () Int)
(declare-fun positive__base__last () Int)
(declare-fun positive__first () Int)
(declare-fun positive__last () Int)
(declare-fun positive__size () Int)
(declare-fun privtypes__classt__base__first () Int)
(declare-fun privtypes__classt__base__last () Int)
(declare-fun privtypes__classt__first () Int)
(declare-fun privtypes__classt__last () Int)
(declare-fun privtypes__classt__size () Int)
(declare-fun privtypes__confidential () Int)
(declare-fun privtypes__restricted () Int)
(declare-fun privtypes__secret () Int)
(declare-fun privtypes__topsecret () Int)
(declare-fun privtypes__unclassified () Int)
(declare-fun privtypes__unmarked () Int)
(declare-fun loop__1__c () Int)
(declare-fun init.loop__1__c () Int)
(declare-fun loop__2__i () Int)
(declare-fun init.loop__2__i () Int)
(declare-fun rawclass () Int)
(declare-fun rawclass__1 () Int)
(declare-fun init.rawclass__1 () Int)
(declare-fun init.rawclass () Int)
(declare-fun stop () Int)
(declare-fun stop__1 () Int)
(declare-fun init.stop__1 () Int)
(declare-fun stop__entry__loop__2 () Int)
(declare-fun init.stop__entry__loop__2 () Int)
(declare-fun init.stop () Int)
(declare-fun bit__and (Int Int) Int)
(declare-fun bit__not (Int Int) Int)
(declare-fun bit__or (Int Int) Int)
(declare-fun bit__xor (Int Int) Int)
(declare-fun character__pos (Int) Int)
(declare-fun character__val (Int) Int)
(declare-fun integer__pred (Int) Int)
(declare-fun integer__succ (Int) Int)
(declare-fun privtypes__classt__pos (Int) Int)
(declare-fun privtypes__classt__pred (Int) Int)
(declare-fun privtypes__classt__succ (Int) Int)
(declare-fun privtypes__classt__val (Int) Int)
(declare-fun round__ (Int) Int)
(declare-fun i.div (Int Int) Int)
(declare-fun i.mod (Int Int) Int)
(declare-fun i.mult (Int Int) Int)
(declare-fun i.exp (Int Int) Int)
(declare-fun tm.true () Int)
(declare-fun tm.false () Int)
(declare-fun tm.not (Int) Int)
(declare-fun tm.and (Int Int) Int)
(declare-fun tm.or (Int Int) Int)
(declare-fun tm.iff (Int Int) Int)
(declare-fun tm.eq (Int Int) Int)
(declare-fun tm.ne (Int Int) Int)
(declare-fun tm.lt (Int Int) Int)
(declare-fun tm.le (Int Int) Int)
(declare-fun tuple.2 (Int Int) Int)
(declare-fun a.store (Int Int Int) Int)
(declare-fun a.select (Int Int) Int)
(declare-fun a.mk_const_array (Int) Int)
(declare-fun a.default_array () Int)
(declare-fun r.default_record () Int)
(declare-fun matched () Bool)
(declare-fun init.matched () Bool)
(declare-fun privtypes__classt__LE (Int Int) Bool)
(declare-fun privtypes__classt__LT (Int Int) Bool)
(assert (forall ((?i Int)) (=> (and (<= 0 ?i) (< ?i 6)) (= (privtypes__classt__pos ?i) ?i))))
(assert (forall ((?i Int)) (=> (and (<= 0 ?i) (< ?i 6)) (= (privtypes__classt__val ?i) ?i))))
(assert (forall ((?i Int)) (=> (and (<= 0 ?i) (< ?i 5)) (= (privtypes__classt__succ ?i) (+ ?i 1)))))
(assert (forall ((?i Int)) (=> (and (<= 1 ?i) (< ?i 6)) (= (privtypes__classt__pred ?i) (- ?i 1)))))
(assert (= privtypes__unmarked 0))
(assert (= privtypes__unclassified 1))
(assert (= privtypes__restricted 2))
(assert (= privtypes__confidential 3))
(assert (= privtypes__secret 4))
(assert (= privtypes__topsecret 5))
(assert (forall ((?I Int) (?J Int)) (=> (and (<= privtypes__unmarked ?I) (<= ?I privtypes__topsecret) (<= 1 ?J) (<= ?J 12)) (<= character__first (a.select (a.select (a.select classstringlookup ?I) field.classstringt.text) ?J)))))
(assert (forall ((?I Int) (?J Int)) (=> (and (<= privtypes__unmarked ?I) (<= ?I privtypes__topsecret) (<= 1 ?J) (<= ?J 12)) (<= (a.select (a.select (a.select classstringlookup ?I) field.classstringt.text) ?J) character__last))))
(assert (forall ((?I Int)) (=> (and (<= privtypes__unmarked ?I) (<= ?I privtypes__topsecret)) (<= classtexti__first (a.select (a.select classstringlookup ?I) field.classstringt.length)))))
(assert (forall ((?I Int)) (=> (and (<= privtypes__unmarked ?I) (<= ?I privtypes__topsecret)) (<= (a.select (a.select classstringlookup ?I) field.classstringt.length) classtexti__last))))
(assert (<= 0 integer__size))
(assert (= integer__first (- 2147483648)))
(assert (= integer__last 2147483647))
(assert (= integer__base__first (- 2147483648)))
(assert (= integer__base__last 2147483647))
(assert (<= 0 character__size))
(assert (= character__first 0))
(assert (= character__last 255))
(assert (= character__base__first 0))
(assert (= character__base__last 255))
(assert (<= 0 natural__size))
(assert (= natural__first 0))
(assert (= natural__last 2147483647))
(assert (= natural__base__first (- 2147483648)))
(assert (= natural__base__last 2147483647))
(assert (<= 0 positive__size))
(assert (= positive__first 1))
(assert (= positive__last 2147483647))
(assert (= positive__base__first (- 2147483648)))
(assert (= positive__base__last 2147483647))
(assert (<= 0 privtypes__classt__size))
(assert (= privtypes__classt__first privtypes__unmarked))
(assert (= privtypes__classt__last privtypes__topsecret))
(assert (= privtypes__classt__base__first privtypes__unmarked))
(assert (= privtypes__classt__base__last privtypes__topsecret))
(assert (<= 0 classtexti__size))
(assert (= classtexti__first 1))
(assert (= classtexti__last 12))
(assert (= classtexti__base__first (- 2147483648)))
(assert (= classtexti__base__last 2147483647))
(assert (forall ((?X Int) (?Y Int)) (=> (< 0 ?Y) (<= 0 (i.mod ?X ?Y)))))
(assert (forall ((?X Int) (?Y Int)) (=> (< 0 ?Y) (< (i.mod ?X ?Y) ?Y))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= 0 ?X) (< 0 ?Y)) (<= (i.mult ?Y (i.div ?X ?Y)) ?X))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= 0 ?X) (< 0 ?Y)) (< (- ?X ?Y) (i.mult ?Y (i.div ?X ?Y))))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= ?X 0) (< 0 ?Y)) (<= ?X (i.mult ?Y (i.div ?X ?Y))))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= ?X 0) (< 0 ?Y)) (< (i.mult ?Y (i.div ?X ?Y)) (+ ?X ?Y)))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= 0 ?X) (<= 0 ?Y)) (<= 0 (bit__or ?X ?Y)))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= 0 ?X) (<= 0 ?Y)) (<= ?X (bit__or ?X ?Y)))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= 0 ?X) (<= 0 ?Y)) (<= ?Y (bit__or ?X ?Y)))))
(assert (forall ((?X Int) (?Y Int)) (=> (and (<= 0 ?X) (<= 0 ?Y)) (<= (bit__or ?X ?Y) (+ ?X ?Y)))))
(assert (distinct field.classstringt.text field.classstringt.length))
(assert (distinct tm.true tm.false))
(assert (forall ((?x Int)) (! (= (= (tm.not ?x) tm.true) (not (= ?x tm.true))) :pattern ((tm.not ?x)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.and ?x ?y) tm.true) (and (= ?x tm.true) (= ?y tm.true))) :pattern ((tm.and ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.or ?x ?y) tm.true) (or (= ?x tm.true) (= ?y tm.true))) :pattern ((tm.or ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.iff ?x ?y) tm.true) (= (= ?x tm.true) (= ?y tm.true))) :pattern ((tm.iff ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.eq ?x ?y) tm.true) (= ?x ?y)) :pattern ((tm.eq ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.ne ?x ?y) tm.true) (not (= ?x ?y))) :pattern ((tm.ne ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.lt ?x ?y) tm.true) (< ?x ?y)) :pattern ((tm.lt ?x ?y)) )))
(assert (forall ((?x Int) (?y Int)) (! (= (= (tm.le ?x ?y) tm.true) (<= ?x ?y)) :pattern ((tm.le ?x ?y)) )))
(assert (forall ((?a Int) (?i Int) (?v Int)) (! (= (a.select (a.store ?a ?i ?v) ?i) ?v) :pattern ((a.select (a.store ?a ?i ?v) ?i)) )))
(assert (forall ((?a Int) (?i Int) (?v Int) (?j Int)) (! (or (= ?i ?j) (= (a.select (a.store ?a ?i ?v) ?j) (a.select ?a ?j))) :pattern ((a.select (a.store ?a ?i ?v) ?j)) )))
(assert (forall ((?i Int) (?v Int)) (! (= (a.select (a.mk_const_array ?v) ?i) ?v) :pattern ((a.select (a.mk_const_array ?v) ?i)) )))
(assert (<= classtexti__first stop))
(assert (<= stop classtexti__last))
(assert (<= privtypes__classt__first loop__1__c))
(assert (<= loop__1__c privtypes__classt__last))
(assert (<= privtypes__classt__first loop__1__c))
(assert (<= loop__1__c privtypes__classt__last))
(assert (<= loop__1__c privtypes__classt__last))
(assert (<= natural__first stop))
(assert (<= stop natural__last))
(assert (<= integer__first stop))
(assert (<= stop integer__last))
(assert (<= integer__first 1))
(assert (<= 1 integer__last))
(assert (=> (<= 1 stop) (and (<= classtexti__first stop) (<= stop classtexti__last))))
(assert (=> (<= 1 stop) (and (<= classtexti__first 1) (<= 1 classtexti__last))))
(assert (<= natural__first stop))
(assert (<= stop natural__last))
(assert (not (<= 1 stop)))
(assert true)
(assert (not true))
(assert (not (= loop__1__c privtypes__classt__last)))
(assert (let ((?v_0 (privtypes__classt__succ loop__1__c))) (let ((?v_1 (<= privtypes__classt__first ?v_0)) (?v_2 (<= ?v_0 privtypes__classt__last))) (not (and ?v_1 ?v_2 ?v_1 ?v_2 ?v_2)))))
(check-sat)
(exit)
