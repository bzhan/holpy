(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort N_set_N_set_N_set_fun_fun$ 0)
(declare-sort N_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_sum_set_N_set_fun$ 0)
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_T_dtree_sum_set_fun_fun$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$) T$)
(declare-fun inl$ (T$) T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$) Dtree$)
(declare-fun inr$ (Dtree$) T_dtree_sum$)
(declare-fun ns$ () N_set$)
(declare-fun uu$ (N_set$) N_bool_fun$)
(declare-fun bot$ () N_set$)
(declare-fun sup$ (N_set$) N_set_N_set_fun$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun tr3$ () Dtree$)
(declare-fun uua$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun bot$a () T_dtree_sum_set$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun root$ (Dtree$) N$)
(declare-fun sup$a (T_dtree_sum_set$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun inFr2$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun finite$ (T_dtree_sum_set$) Bool)
(declare-fun insert$ (N$) N_set_N_set_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun subtr2$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun finite$a (N_set$) Bool)
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun insert$a (T_dtree_sum$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun collect$a (N_bool_fun$) N_set$)
(declare-fun fun_app$a (N_bool_fun$ N$) Bool)
(declare-fun fun_app$b (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$c (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$d (T_dtree_sum_set_T_dtree_sum_set_T_dtree_sum_set_fun_fun$ T_dtree_sum_set$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun fun_app$e (N_set_N_set_N_set_fun_fun$ N_set$) N_set_N_set_fun$)
(declare-fun fun_app$f (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(declare-fun fun_app$g (T_bool_fun$ T$) Bool)
(declare-fun fun_app$h (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$i (N_set_dtree_T_bool_fun_fun_fun$ N_set$) Dtree_T_bool_fun_fun$)
(declare-fun fun_app$j (N_set_T_dtree_sum_set_fun$ N_set$) T_dtree_sum_set$)
(declare-fun fun_app$k (T_dtree_sum_set_N_set_fun$ T_dtree_sum_set$) N_set$)
(declare-fun less_eq$a (T_dtree_sum_set$ T_dtree_sum_set$) Bool)
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uu$ ?v0) ?v1)))))
(assert (not (subtr2$ ns$ tr2$ tr3$)))
(assert (subtr2$ ns$ tr1$ tr2$))
(assert (member$a (root$ tr3$) ns$))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr2$ ?v0 ?v1 ?v2) (subtr2$ ?v0 ?v2 ?v3)) (subtr2$ ?v0 ?v1 ?v3)) ))
(assert (member$ (inr$ tr2$) (cont$ tr3$)))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$)) (=> (and (subtr2$ ?v0 ?v1 ?v2) (less_eq$ ?v0 ?v3)) (subtr2$ ?v3 ?v1 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$) (?v4 Dtree$)) (=> (and (subtr2$ ?v0 ?v1 ?v2) (subtr2$ ?v3 ?v2 ?v4)) (subtr2$ (fun_app$b (sup$ ?v0) ?v3) ?v1 ?v4)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr2$ ?v0 ?v1 ?v2) (member$a (root$ ?v2) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr2$ ?v0 ?v1 ?v2) (member$a (root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$a (root$ ?v0) ?v1) (subtr2$ ?v1 ?v0 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (subtr2$ ?v0 ?v1 ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (subtr2$ ?v4 ?v5 ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (subtr2$ ?v0 ?v1 ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (subtr2$ ?v4 ?v5 ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (subtr2$ ?v1 ?v2 ?v3))) (subtr2$ ?v1 ?v0 ?v3)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (less_eq$a (fun_app$c (sup$a ?v0) ?v1) ?v2) (and (less_eq$a ?v0 ?v2) (less_eq$a ?v1 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (fun_app$b (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (less_eq$a (fun_app$c (sup$a ?v0) ?v1) ?v2) (and (less_eq$a ?v0 ?v2) (less_eq$a ?v1 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (fun_app$b (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (less_eq$a (fun_app$c (sup$a ?v0) ?v1) ?v2) (and (less_eq$a ?v0 ?v2) (less_eq$a ?v1 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (fun_app$b (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (fun_app$c (sup$a ?v1) ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (= (member$a ?v0 (fun_app$b (sup$ ?v1) ?v2)) (or (member$a ?v0 ?v1) (member$a ?v0 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (=> (not (member$ ?v0 ?v1)) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$c (sup$a ?v2) ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (=> (not (member$a ?v0 ?v1)) (member$a ?v0 ?v2)) (member$a ?v0 (fun_app$b (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a (fun_app$c (sup$a ?v0) ?v1)) ?v1) (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ (fun_app$b (sup$ ?v0) ?v1)) ?v1) (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v0) ?v1)) (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v0) ?v1)) (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v0) ?v1)) (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v0) ?v1)) (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) ) (less_eq$a ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (forall ((?v2 N$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1)) ) (less_eq$ ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$c (sup$a ?v0) ?v0) ?v0) :pattern ((sup$a ?v0)))))
(assert (forall ((?v0 N_set$)) (! (= (fun_app$b (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$c (sup$a ?v0) ?v0) ?v0) :pattern ((sup$a ?v0)))))
(assert (forall ((?v0 N_set$)) (! (= (fun_app$b (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$)) (less_eq$a ?v0 ?v0) ))
(assert (forall ((?v0 N_set$)) (less_eq$ ?v0 ?v0) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$a ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (less_eq$ ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$a ?v0 ?v1) (not (member$ ?v2 ?v1))) (not (member$ ?v2 ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (less_eq$ ?v0 ?v1) (not (member$a ?v2 ?v1))) (not (member$a ?v2 ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$a ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (less_eq$ ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$a ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (less_eq$ ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$a ?v0 ?v1) (and (=> (not (member$ ?v2 ?v0)) false) (=> (member$ ?v2 ?v1) false))) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (less_eq$ ?v0 ?v1) (and (=> (not (member$a ?v2 ?v0)) false) (=> (member$a ?v2 ?v1) false))) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$a ?v1 ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$a ?v0 ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$a ?v1 ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$a ?v0 ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v1 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) false)) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) false)) false) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (less_eq$a (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (less_eq$ (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 N$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1)) )) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (= (less_eq$a (collect$ ?v0) (collect$ ?v1)) (forall ((?v2 T_dtree_sum$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (= (less_eq$ (collect$a ?v0) (collect$a ?v1)) (forall ((?v2 N$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 N$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1)) )) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (= (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 N_set$)) (= (collect$a (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (= (collect$ (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$a ?v0 (collect$a ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) ?v1) (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) ?v1) (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) ?v1) (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) ?v1) (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) ?v1) (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) ?v1) (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v0) ?v1)) (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v0) ?v1)) (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2)) (fun_app$c (sup$a ?v1) (fun_app$c (sup$a ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2)) (fun_app$b (sup$ ?v1) (fun_app$b (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2)) (fun_app$c (sup$a ?v1) (fun_app$c (sup$a ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2)) (fun_app$b (sup$ ?v1) (fun_app$b (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2)) (fun_app$c (sup$a ?v1) (fun_app$c (sup$a ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2)) (fun_app$b (sup$ ?v1) (fun_app$b (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a (fun_app$c (sup$a ?v0) ?v1)) ?v2) (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ (fun_app$b (sup$ ?v0) ?v1)) ?v2) (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a (fun_app$c (sup$a ?v0) ?v1)) ?v2) (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ (fun_app$b (sup$ ?v0) ?v1)) ?v2) (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a (fun_app$c (sup$a ?v0) ?v1)) ?v2) (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ (fun_app$b (sup$ ?v0) ?v1)) ?v2) (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (fun_app$c (sup$a ?v2) ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (fun_app$b (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (fun_app$c (sup$a ?v1) ?v2)) (and (=> (member$ ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (member$a ?v0 (fun_app$b (sup$ ?v1) ?v2)) (and (=> (member$a ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$c (sup$a ?v0) ?v0) ?v0) :pattern ((sup$a ?v0)))))
(assert (forall ((?v0 N_set$)) (! (= (fun_app$b (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) ?v1) (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) ?v1) (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v0) ?v1)) (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v0) ?v1)) (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2)) (fun_app$c (sup$a ?v1) (fun_app$c (sup$a ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2)) (fun_app$b (sup$ ?v1) (fun_app$b (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (fun_app$c (sup$a (fun_app$c (sup$a ?v0) ?v1)) ?v2) (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ (fun_app$b (sup$ ?v0) ?v1)) ?v2) (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (= (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (fun_app$c (sup$a ?v0) ?v1)) (fun_app$ ?v2 ?v3)) ) (and (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3)) ) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$ ?v2 ?v3)) ))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_bool_fun$)) (= (forall ((?v3 N$)) (=> (member$a ?v3 (fun_app$b (sup$ ?v0) ?v1)) (fun_app$a ?v2 ?v3)) ) (and (forall ((?v3 N$)) (=> (member$a ?v3 ?v0) (fun_app$a ?v2 ?v3)) ) (forall ((?v3 N$)) (=> (member$a ?v3 ?v1) (fun_app$a ?v2 ?v3)) ))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (= (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (fun_app$c (sup$a ?v0) ?v1)) (fun_app$ ?v2 ?v3)) ) (or (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3)) ) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$ ?v2 ?v3)) ))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_bool_fun$)) (= (exists ((?v3 N$)) (and (member$a ?v3 (fun_app$b (sup$ ?v0) ?v1)) (fun_app$a ?v2 ?v3)) ) (or (exists ((?v3 N$)) (and (member$a ?v3 ?v0) (fun_app$a ?v2 ?v3)) ) (exists ((?v3 N$)) (and (member$a ?v3 ?v1) (fun_app$a ?v2 ?v3)) ))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a ?v0 (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a ?v0 (fun_app$c (sup$a ?v2) ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$b (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a ?v0 (fun_app$c (sup$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (less_eq$a ?v0 ?v1) (less_eq$a ?v0 (fun_app$c (sup$a ?v2) ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$b (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v1) ?v0) ?v1)) :pattern ((fun_app$c (sup$a ?v1) ?v0)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v1) ?v0) ?v1)) :pattern ((fun_app$b (sup$ ?v1) ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v0) ?v1) ?v1)) :pattern ((fun_app$c (sup$a ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v0) ?v1) ?v1)) :pattern ((fun_app$b (sup$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v1) ?v0) ?v1)) :pattern ((fun_app$c (sup$a ?v1) ?v0)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v1) ?v0) ?v1)) :pattern ((fun_app$b (sup$ ?v1) ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v0) ?v1) ?v1)) :pattern ((fun_app$c (sup$a ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v0) ?v1) ?v1)) :pattern ((fun_app$b (sup$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v1)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v1)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v1)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$) (?v3 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v3)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) (fun_app$c (sup$a ?v1) ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$) (?v3 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v3)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) (fun_app$b (sup$ ?v1) ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$) (?v3 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v3)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) (fun_app$c (sup$a ?v1) ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$) (?v3 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v3)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) (fun_app$b (sup$ ?v1) ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (=> (= ?v1 (fun_app$c (sup$a ?v1) ?v0)) false)) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (=> (= ?v1 (fun_app$b (sup$ ?v1) ?v0)) false)) false) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a (fun_app$c (sup$a ?v0) ?v1) ?v2) (=> (and (less_eq$a ?v0 ?v2) (less_eq$a ?v1 ?v2)) false)) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ (fun_app$b (sup$ ?v0) ?v1) ?v2) (=> (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)) false)) false) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a (fun_app$c (sup$a ?v0) ?v1) ?v2) (=> (and (less_eq$a ?v0 ?v2) (less_eq$a ?v1 ?v2)) false)) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ (fun_app$b (sup$ ?v0) ?v1) ?v2) (=> (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)) false)) false) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (= ?v0 (fun_app$c (sup$a ?v0) ?v1)) (less_eq$a ?v1 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 (fun_app$b (sup$ ?v0) ?v1)) (less_eq$ ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set_T_dtree_sum_set_T_dtree_sum_set_fun_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (forall ((?v3 T_dtree_sum_set$) (?v4 T_dtree_sum_set$)) (less_eq$a ?v3 (fun_app$c (fun_app$d ?v0 ?v3) ?v4)) ) (and (forall ((?v3 T_dtree_sum_set$) (?v4 T_dtree_sum_set$)) (less_eq$a ?v4 (fun_app$c (fun_app$d ?v0 ?v3) ?v4)) ) (forall ((?v3 T_dtree_sum_set$) (?v4 T_dtree_sum_set$) (?v5 T_dtree_sum_set$)) (=> (and (less_eq$a ?v4 ?v3) (less_eq$a ?v5 ?v3)) (less_eq$a (fun_app$c (fun_app$d ?v0 ?v4) ?v5) ?v3)) ))) (= (fun_app$c (sup$a ?v1) ?v2) (fun_app$c (fun_app$d ?v0 ?v1) ?v2))) ))
(assert (forall ((?v0 N_set_N_set_N_set_fun_fun$) (?v1 N_set$) (?v2 N_set$)) (=> (and (forall ((?v3 N_set$) (?v4 N_set$)) (less_eq$ ?v3 (fun_app$b (fun_app$e ?v0 ?v3) ?v4)) ) (and (forall ((?v3 N_set$) (?v4 N_set$)) (less_eq$ ?v4 (fun_app$b (fun_app$e ?v0 ?v3) ?v4)) ) (forall ((?v3 N_set$) (?v4 N_set$) (?v5 N_set$)) (=> (and (less_eq$ ?v4 ?v3) (less_eq$ ?v5 ?v3)) (less_eq$ (fun_app$b (fun_app$e ?v0 ?v4) ?v5) ?v3)) ))) (= (fun_app$b (sup$ ?v1) ?v2) (fun_app$b (fun_app$e ?v0 ?v1) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (less_eq$a ?v0 ?v1) (= ?v1 (fun_app$c (sup$a ?v1) ?v0))) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (less_eq$ ?v0 ?v1) (= ?v1 (fun_app$b (sup$ ?v1) ?v0))) :pattern ((less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v0) ?v1) ?v1)) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v0) ?v1) ?v1)) :pattern ((less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v1) ?v0) ?v1)) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v1) ?v0) ?v1)) :pattern ((less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v0) ?v1) ?v1)) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v0) ?v1) ?v1)) :pattern ((less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (less_eq$a ?v0 (fun_app$c (sup$a ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (less_eq$ ?v0 (fun_app$b (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v0) ?v1) ?v1)) :pattern ((fun_app$c (sup$a ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v0) ?v1) ?v1)) :pattern ((fun_app$b (sup$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v1) ?v0) ?v1)) :pattern ((fun_app$c (sup$a ?v1) ?v0)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v1) ?v0) ?v1)) :pattern ((fun_app$b (sup$ ?v1) ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v1)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$) (?v3 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v2 ?v3)) (less_eq$a (fun_app$c (sup$a ?v0) ?v2) (fun_app$c (sup$a ?v1) ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$) (?v3 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v3)) (less_eq$ (fun_app$b (sup$ ?v0) ?v2) (fun_app$b (sup$ ?v1) ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (less_eq$a ?v0 ?v1) (= (fun_app$c (sup$a ?v0) ?v1) ?v1)) :pattern ((less_eq$a ?v0 ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (less_eq$ ?v0 ?v1) (= (fun_app$b (sup$ ?v0) ?v1) ?v1)) :pattern ((less_eq$ ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$)) (less_eq$a ?v0 ?v0) ))
(assert (forall ((?v0 N_set$)) (less_eq$ ?v0 ?v0) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$a (fun_app$f (inItr$ ?v1) ?v2) ?v3))) (fun_app$a (fun_app$f (inItr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (fun_app$a (fun_app$f (inItr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$a (fun_app$f (inItr$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (fun_app$a (fun_app$f (inItr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$a (fun_app$f (inItr$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v0) ?v1) ?v2) (and (member$a (root$ ?v3) ?v0) (member$ (inr$ ?v1) (cont$ ?v3)))) (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$g (fun_app$h (fun_app$i inFr$ ?v1) ?v2) ?v3))) (fun_app$g (fun_app$h (fun_app$i inFr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (subtr$ ?v1 ?v2 ?v3))) (subtr$ ?v1 ?v0 ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (subtr$ ?v1 ?v2 ?v3) (member$ (inr$ ?v3) (cont$ ?v0)))) (subtr$ ?v1 ?v2 ?v0)) ))
(assert (= inFr$ inFr2$))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v0 ?v2 ?v3)) (subtr$ ?v0 ?v1 ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$a (root$ ?v2) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$a (root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$a (root$ ?v0) ?v1) (subtr$ ?v1 ?v0 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$g (fun_app$h (fun_app$i inFr$ ?v0) ?v1) ?v2) (member$a (root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$a (root$ ?v0) ?v1)) (not (fun_app$g (fun_app$h (fun_app$i inFr$ ?v1) ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v0) ?v1) ?v2) (member$a (root$ ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$a (fun_app$f (inItr$ ?v0) ?v1) ?v2) (member$a (root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$a (root$ ?v0) ?v1) (fun_app$a (fun_app$f (inItr$ ?v1) ?v0) (root$ ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (less_eq$ ?v0 ?v3)) (subtr$ ?v3 ?v1 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 N_set$)) (=> (and (fun_app$g (fun_app$h (fun_app$i inFr$ ?v0) ?v1) ?v2) (less_eq$ ?v0 ?v3)) (fun_app$g (fun_app$h (fun_app$i inFr$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 N_set$)) (=> (and (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v0) ?v1) ?v2) (less_eq$ ?v0 ?v3)) (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 N_set$)) (=> (and (fun_app$a (fun_app$f (inItr$ ?v0) ?v1) ?v2) (less_eq$ ?v0 ?v3)) (fun_app$a (fun_app$f (inItr$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 N_set_T_dtree_sum_set_fun$) (?v2 N_set$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$a (fun_app$j ?v1 ?v4) (fun_app$j ?v1 ?v5))) ))) (less_eq$a ?v0 (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 T_dtree_sum_set_N_set_fun$) (?v2 T_dtree_sum_set$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 T_dtree_sum_set$) (?v5 T_dtree_sum_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$ (fun_app$k ?v1 ?v4) (fun_app$k ?v1 ?v5))) ))) (less_eq$ ?v0 (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_dtree_sum_set$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (and (less_eq$a ?v2 ?v3) (forall ((?v4 T_dtree_sum_set$) (?v5 T_dtree_sum_set$)) (=> (less_eq$a ?v4 ?v5) (less_eq$a (fun_app$c ?v1 ?v4) (fun_app$c ?v1 ?v5))) ))) (less_eq$a ?v0 (fun_app$c ?v1 ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set_N_set_fun$) (?v2 N_set$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (fun_app$b ?v1 ?v4) (fun_app$b ?v1 ?v5))) ))) (less_eq$ ?v0 (fun_app$b ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (= ?v0 ?v1) (less_eq$a ?v1 ?v2)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (= ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set_N_set_fun$) (?v3 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (and (= (fun_app$b ?v2 ?v1) ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (fun_app$b ?v2 ?v4) (fun_app$b ?v2 ?v5))) ))) (less_eq$ (fun_app$b ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (= ?v1 ?v2)) (less_eq$ ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set_N_set_fun$) (?v3 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (and (less_eq$ (fun_app$b ?v2 ?v1) ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (fun_app$b ?v2 ?v4) (fun_app$b ?v2 ?v5))) ))) (less_eq$ (fun_app$b ?v2 ?v0) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set_N_set_fun$) (?v2 N_set$) (?v3 N_set$)) (=> (and (less_eq$ ?v0 (fun_app$b ?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (fun_app$b ?v1 ?v4) (fun_app$b ?v1 ?v5))) ))) (less_eq$ ?v0 (fun_app$b ?v1 ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v0)) (less_eq$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (less_eq$ ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$ ?v1 ?v0)))))
(assert (forall ((?v0 N_set$)) (less_eq$ ?v0 ?v0) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$) (?v4 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v3 ?v2 ?v4)) (subtr$ (fun_app$b (sup$ ?v0) ?v3) ?v1 ?v4)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (subtr$ ?v0 ?v1 ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$a (root$ ?v3) ?v4) (and (subtr$ ?v4 ?v5 ?v6) (member$ (inr$ ?v6) (cont$ ?v3))))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$a (root$ ?v3) ?v4) (and (subtr$ ?v4 ?v5 ?v6) (member$ (inr$ ?v6) (cont$ ?v3))))))) false) ))) false) ))
(assert (forall ((?v0 Dtree$)) (= (node$ (root$ ?v0) (cont$ ?v0)) ?v0) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 N_set$) (?v3 T$)) (=> (and (member$ (inr$ ?v0) (cont$ ?v1)) (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v2) ?v0) ?v3)) (fun_app$g (fun_app$h (fun_app$i inFr2$ (fun_app$b (insert$ (root$ ?v1)) ?v2)) ?v1) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$g (fun_app$h (fun_app$i inFr$ ?v0) ?v1) ?v2) (member$ (inr$ ?v1) (cont$ ?v3))) (fun_app$g (fun_app$h (fun_app$i inFr$ (fun_app$b (insert$ (root$ ?v3)) ?v0)) ?v3) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$g (fun_app$h (fun_app$i inFr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$a (root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$g (fun_app$h (fun_app$i inFr$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (= (fun_app$b (insert$ ?v0) (fun_app$b (insert$ ?v0) ?v1)) (fun_app$b (insert$ ?v0) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (member$a ?v0 (fun_app$b (insert$ ?v1) ?v2)) (or (= ?v0 ?v1) (member$a ?v0 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (fun_app$c (insert$a ?v1) ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (=> (not (member$a ?v0 ?v1)) (= ?v0 ?v2)) (member$a ?v0 (fun_app$b (insert$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (fun_app$c (insert$a ?v2) ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (less_eq$a (fun_app$c (insert$a ?v0) ?v1) ?v2) (and (member$ ?v0 ?v2) (less_eq$a ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (fun_app$b (insert$ ?v0) ?v1) ?v2) (and (member$a ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N$) (?v2 N_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (insert$ ?v1) ?v2)) (fun_app$b (insert$ ?v1) (fun_app$b (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$b (sup$ (fun_app$b (insert$ ?v0) ?v1)) ?v2) (fun_app$b (insert$ ?v0) (fun_app$b (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 N$) (?v1 T_dtree_sum_set$)) (= (root$ (node$ ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ (fun_app$b (insert$ ?v2) ?v0) (fun_app$b (insert$ ?v2) ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$b (insert$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (not (member$ ?v0 ?v1)) (= (less_eq$a ?v1 (fun_app$c (insert$a ?v0) ?v2)) (less_eq$a ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (not (member$a ?v0 ?v1)) (= (less_eq$ ?v1 (fun_app$b (insert$ ?v0) ?v2)) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N$)) (less_eq$ ?v0 (fun_app$b (insert$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (= (exists ((?v1 T_dtree_sum$)) (fun_app$ ?v0 ?v1) ) (or (exists ((?v1 T$)) (fun_app$ ?v0 (inl$ ?v1)) ) (exists ((?v1 Dtree$)) (fun_app$ ?v0 (inr$ ?v1)) ))) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (= (forall ((?v1 T_dtree_sum$)) (fun_app$ ?v0 ?v1) ) (and (forall ((?v1 T$)) (fun_app$ ?v0 (inl$ ?v1)) ) (forall ((?v1 Dtree$)) (fun_app$ ?v0 (inr$ ?v1)) ))) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (not (= (inr$ ?v0) (inl$ ?v1))) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (not (= (inl$ ?v0) (inr$ ?v1))) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (not (= (inr$ ?v0) (inl$ ?v1))) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (not (= (inl$ ?v0) (inr$ ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (fun_app$b (insert$ ?v0) (fun_app$b (insert$ ?v1) ?v2)) (fun_app$b (insert$ ?v1) (fun_app$b (insert$ ?v0) ?v2))) ))
(assert (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (=> (and (member$a ?v0 (fun_app$b (insert$ ?v1) ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (fun_app$c (insert$a ?v1) ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (=> (and (member$a ?v0 ?v1) (forall ((?v2 N_set$)) (=> (and (= ?v1 (fun_app$b (insert$ ?v0) ?v2)) (not (member$a ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v2 T_dtree_sum_set$)) (=> (and (= ?v1 (fun_app$c (insert$a ?v0) ?v2)) (not (member$ ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (! (=> (member$a ?v0 ?v1) (= (fun_app$b (insert$ ?v0) ?v1) ?v1)) :pattern ((fun_app$b (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (! (=> (member$ ?v0 ?v1) (= (fun_app$c (insert$a ?v0) ?v1) ?v1)) :pattern ((fun_app$c (insert$a ?v0) ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (fun_app$b (insert$ ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (fun_app$c (insert$a ?v2) ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (=> (member$a ?v0 ?v1) (exists ((?v2 N_set$)) (and (= ?v1 (fun_app$b (insert$ ?v0) ?v2)) (not (member$a ?v0 ?v2))) )) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (=> (member$ ?v0 ?v1) (exists ((?v2 T_dtree_sum_set$)) (and (= ?v1 (fun_app$c (insert$a ?v0) ?v2)) (not (member$ ?v0 ?v2))) )) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$) (?v3 N_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v2 ?v3))) (= (= (fun_app$b (insert$ ?v0) ?v1) (fun_app$b (insert$ ?v2) ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 N_set$)) (and (= ?v1 (fun_app$b (insert$ ?v2) ?v4)) (and (not (member$a ?v2 ?v4)) (and (= ?v3 (fun_app$b (insert$ ?v0) ?v4)) (not (member$a ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v2 ?v3))) (= (= (fun_app$c (insert$a ?v0) ?v1) (fun_app$c (insert$a ?v2) ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 T_dtree_sum_set$)) (and (= ?v1 (fun_app$c (insert$a ?v2) ?v4)) (and (not (member$ ?v2 ?v4)) (and (= ?v3 (fun_app$c (insert$a ?v0) ?v4)) (not (member$ ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v0 ?v2))) (= (= (fun_app$b (insert$ ?v0) ?v1) (fun_app$b (insert$ ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v0 ?v2))) (= (= (fun_app$c (insert$a ?v0) ?v1) (fun_app$c (insert$a ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (member$a ?v0 (fun_app$b (insert$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (member$ ?v0 (fun_app$c (insert$a ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$a (root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) false) ) (forall ((?v3 Dtree$) (?v4 Dtree$) (?v5 N_set$) (?v6 T$)) (=> (and (= ?v0 (fun_app$b (insert$ (root$ ?v4)) ?v5)) (and (= ?v1 ?v4) (and (= ?v2 ?v6) (and (member$ (inr$ ?v3) (cont$ ?v4)) (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v5) ?v3) ?v6))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$a (root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) ) (exists ((?v3 Dtree$) (?v4 Dtree$) (?v5 N_set$) (?v6 T$)) (and (= ?v0 (fun_app$b (insert$ (root$ ?v4)) ?v5)) (and (= ?v1 ?v4) (and (= ?v2 ?v6) (and (member$ (inr$ ?v3) (cont$ ?v4)) (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v5) ?v3) ?v6))))) ))) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$a (root$ ?v0) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$g (fun_app$h (fun_app$i inFr$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$a (root$ ?v0) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$g (fun_app$h (fun_app$i inFr2$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$g (fun_app$h (fun_app$i inFr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$a (root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$g (fun_app$h (fun_app$i inFr$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (= (= (inl$ ?v0) (inr$ ?v1)) false) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (= (= (inr$ ?v0) (inl$ ?v1)) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$a ?v2 ?v1)) (less_eq$a (fun_app$c (insert$a ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$b (insert$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 N$)) (=> (finite$ ?v0) (= (cont$ (node$ ?v1 ?v0)) ?v0)) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (= (fun_app$b (insert$ ?v0) bot$) (fun_app$b (insert$ ?v1) ?v2)) (and (= ?v1 ?v0) (less_eq$ ?v2 (fun_app$b (insert$ ?v0) bot$)))) ))
(assert (forall ((?v0 N$)) (= (member$a ?v0 bot$) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (= (member$ ?v0 bot$a) false) ))
(assert (forall ((?v0 N_set$)) (= (forall ((?v1 N$)) (not (member$a ?v1 ?v0)) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (= (forall ((?v1 T_dtree_sum$)) (not (member$ ?v1 ?v0)) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 N_set$)) (= (fun_app$b (sup$ bot$) ?v0) ?v0) ))
(assert (forall ((?v0 N_set$)) (= (fun_app$b (sup$ ?v0) bot$) ?v0) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= (fun_app$b (sup$ ?v0) ?v1) bot$) (and (= ?v0 bot$) (= ?v1 bot$))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= bot$ (fun_app$b (sup$ ?v0) ?v1)) (and (= ?v0 bot$) (= ?v1 bot$))) ))
(assert (forall ((?v0 N_set$)) (less_eq$ bot$ ?v0) ))
(assert (forall ((?v0 N_set$)) (= (less_eq$ ?v0 bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 N$)) (member$a ?v0 (fun_app$b (insert$ ?v0) bot$)) ))
(assert (forall ((?v0 T_dtree_sum$)) (member$ ?v0 (fun_app$c (insert$a ?v0) bot$a)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= (fun_app$b (sup$ ?v0) ?v1) bot$) (and (= ?v0 bot$) (= ?v1 bot$))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (= (= (fun_app$b (insert$ ?v0) ?v1) (fun_app$b (insert$ ?v2) bot$)) (and (= ?v0 ?v2) (less_eq$ ?v1 (fun_app$b (insert$ ?v2) bot$)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 N$) (?v3 N$)) (=> (and (finite$ ?v0) (finite$ ?v1)) (= (= (node$ ?v2 ?v0) (node$ ?v3 ?v1)) (and (= ?v2 ?v3) (= ?v0 ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (=> (forall ((?v1 T_dtree_sum$)) (=> (member$ ?v1 ?v0) false) ) (less_eq$a ?v0 bot$a)) ))
(assert (forall ((?v0 N_set$)) (=> (forall ((?v1 N$)) (=> (member$a ?v1 ?v0) false) ) (less_eq$ ?v0 bot$)) ))
(assert (forall ((?v0 Dtree$)) (=> (forall ((?v1 N$) (?v2 T_dtree_sum_set$)) (=> (and (finite$ ?v2) (= ?v0 (node$ ?v1 ?v2))) false) ) false) ))
(assert (forall ((?v0 N_set$)) (= (less_eq$ ?v0 bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 N_set$)) (=> (less_eq$ ?v0 bot$) (= ?v0 bot$)) ))
(assert (forall ((?v0 N_set$)) (less_eq$ bot$ ?v0) ))
(assert (forall ((?v0 Dtree$)) (finite$ (cont$ ?v0)) ))
(assert (forall ((?v0 N$)) (=> (member$a ?v0 bot$) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (member$ ?v0 bot$a) false) ))
(assert (forall ((?v0 N_set$) (?v1 N$)) (=> (= ?v0 bot$) (not (member$a ?v1 ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (=> (= ?v0 bot$a) (not (member$ ?v1 ?v0))) ))
(assert (forall ((?v0 N_set$)) (=> (forall ((?v1 N$)) (=> (member$a ?v1 ?v0) false) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (=> (forall ((?v1 T_dtree_sum$)) (=> (member$ ?v1 ?v0) false) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 N_set$)) (= (exists ((?v1 N$)) (member$a ?v1 ?v0) ) (not (= ?v0 bot$))) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (= (exists ((?v1 T_dtree_sum$)) (member$ ?v1 ?v0) ) (not (= ?v0 bot$a))) ))
(assert (forall ((?v0 N_set$)) (= (fun_app$b (sup$ bot$) ?v0) ?v0) ))
(assert (forall ((?v0 N_set$)) (= (fun_app$b (sup$ ?v0) bot$) ?v0) ))
(assert (forall ((?v0 N_set$)) (= (fun_app$b (sup$ bot$) ?v0) ?v0) ))
(assert (forall ((?v0 N_set$)) (= (fun_app$b (sup$ ?v0) bot$) ?v0) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (= (fun_app$b (insert$ ?v0) ?v1) (fun_app$b (sup$ (fun_app$b (insert$ ?v0) bot$)) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (= (= (fun_app$b (sup$ ?v0) ?v1) (fun_app$b (insert$ ?v2) bot$)) (or (and (= ?v0 bot$) (= ?v1 (fun_app$b (insert$ ?v2) bot$))) (or (and (= ?v0 (fun_app$b (insert$ ?v2) bot$)) (= ?v1 bot$)) (and (= ?v0 (fun_app$b (insert$ ?v2) bot$)) (= ?v1 (fun_app$b (insert$ ?v2) bot$)))))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (= (= (fun_app$b (insert$ ?v0) bot$) (fun_app$b (sup$ ?v1) ?v2)) (or (and (= ?v1 bot$) (= ?v2 (fun_app$b (insert$ ?v0) bot$))) (or (and (= ?v1 (fun_app$b (insert$ ?v0) bot$)) (= ?v2 bot$)) (and (= ?v1 (fun_app$b (insert$ ?v0) bot$)) (= ?v2 (fun_app$b (insert$ ?v0) bot$)))))) ))
(assert (forall ((?v0 N_set$) (?v1 N$)) (=> (less_eq$ ?v0 (fun_app$b (insert$ ?v1) bot$)) (or (= ?v0 bot$) (= ?v0 (fun_app$b (insert$ ?v1) bot$)))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (not (= (fun_app$b (insert$ ?v0) ?v1) bot$)) ))
(assert (forall ((?v0 N$) (?v1 N$)) (=> (member$a ?v0 (fun_app$b (insert$ ?v1) bot$)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (=> (member$ ?v0 (fun_app$c (insert$a ?v1) bot$a)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$)) (=> (= (fun_app$b (insert$ ?v0) bot$) (fun_app$b (insert$ ?v1) bot$)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$)) (= (member$a ?v0 (fun_app$b (insert$ ?v1) bot$)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (= (member$ ?v0 (fun_app$c (insert$a ?v1) bot$a)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N$) (?v3 N$)) (= (= (fun_app$b (insert$ ?v0) (fun_app$b (insert$ ?v1) bot$)) (fun_app$b (insert$ ?v2) (fun_app$b (insert$ ?v3) bot$))) (or (and (= ?v0 ?v2) (= ?v1 ?v3)) (and (= ?v0 ?v3) (= ?v1 ?v2)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (finite$ (fun_app$c (sup$a ?v0) ?v1)) (and (finite$ ?v0) (finite$ ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (finite$a (fun_app$b (sup$ ?v0) ?v1)) (and (finite$a ?v0) (finite$a ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (= (finite$a (fun_app$b (insert$ ?v0) ?v1)) (finite$a ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (= (finite$ (fun_app$c (insert$a ?v0) ?v1)) (finite$ ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (finite$ ?v0) (less_eq$a ?v1 ?v0)) (finite$ ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (finite$a ?v0) (less_eq$ ?v1 ?v0)) (finite$a ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (less_eq$a ?v0 ?v1) (finite$ ?v1)) (finite$ ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (finite$a ?v1)) (finite$a ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N$)) (=> (finite$a ?v0) (finite$a (fun_app$b (insert$ ?v1) ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (=> (finite$ ?v0) (finite$ (fun_app$c (insert$a ?v1) ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (finite$ ?v0) (finite$ ?v1)) (finite$ (fun_app$c (sup$a ?v0) ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (finite$a ?v0) (finite$a ?v1)) (finite$a (fun_app$b (sup$ ?v0) ?v1))) ))
(check-sat)
(exit)

