{
    "content": [
        {
            "depth": 0,
            "name": "Basic definitions",
            "ty": "header"
        },
        {
            "name": "zero",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a"
        },
        {
            "name": "one",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a"
        },
        {
            "args": [],
            "constrs": [
                {
                    "args": [],
                    "name": "zero",
                    "type": "nat"
                },
                {
                    "args": [
                        "n"
                    ],
                    "name": "Suc",
                    "type": "nat => nat"
                }
            ],
            "name": "nat",
            "ty": "type.ind"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "one",
            "prop": "1 = Suc 0",
            "ty": "def",
            "type": "nat"
        },
        {
            "name": "of_nat",
            "overloaded": true,
            "ty": "def.ax",
            "type": "nat ⇒ 'a"
        },
        {
            "name": "of_nat",
            "prop": "of_nat n = n",
            "ty": "def",
            "type": "nat ⇒ nat"
        },
        {
            "name": "Pre",
            "rules": [
                {
                    "prop": "Pre 0 = 0"
                },
                {
                    "prop": "Pre (Suc n) = n"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat"
        },
        {
            "name": "plus",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a ⇒ 'a ⇒ 'a"
        },
        {
            "name": "minus",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a ⇒ 'a ⇒ 'a"
        },
        {
            "name": "times",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a ⇒ 'a ⇒ 'a"
        },
        {
            "name": "power",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a ⇒ 'b ⇒ 'a"
        },
        {
            "name": "plus",
            "rules": [
                {
                    "prop": "0 + n = n"
                },
                {
                    "prop": "Suc m + n = Suc (m + n)"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "name": "times",
            "rules": [
                {
                    "prop": "0 * n = 0"
                },
                {
                    "prop": "Suc m * n = n + m * n"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "name": "power",
            "rules": [
                {
                    "prop": "n ^ (0::nat) = 1"
                },
                {
                    "prop": "n ^ Suc m = n * n ^ m"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "add_0_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, (0::nat) + 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) + 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + 0 = n ⟶ Suc n + 0 = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + 0 = n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + 0 = n ⊢ n + 0 = n"
                },
                {
                    "args": "Suc (n + 0) = Suc n",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n + 0 = n ⊢ Suc (n + 0) = Suc n"
                },
                {
                    "args": "nat_plus_def_2, Suc n + 0 = Suc n",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + 0 = n ⊢ Suc n + 0 = Suc n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n + 0 = n ⟶ Suc n + 0 = Suc n"
                },
                {
                    "args": "nat_induct, {P: λx::nat. x + 0 = x, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + 0 = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + 0 = x"
                }
            ],
            "prop": "x + 0 = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "add_1_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, Suc (0 + x) = Suc x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (0 + x) = Suc x"
                },
                {
                    "args": "nat_plus_def_2, Suc 0 + x = Suc x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 0 + x = Suc x"
                },
                {
                    "args": "nat_one_def, 1 + x = Suc x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 + x = Suc x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 + x = Suc x"
                }
            ],
            "prop": "1 + x = Suc x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "add_1_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_one_def, 1 = Suc 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 = Suc 0"
                },
                {
                    "args": "nat_plus_def_1, 0 + 1 = Suc 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + 1 = Suc 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + 1 = Suc n ⟶ Suc n + 1 = Suc (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + 1 = Suc n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + 1 = Suc n ⊢ n + 1 = Suc n"
                },
                {
                    "args": "Suc (n + 1) = Suc (Suc n)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n + 1 = Suc n ⊢ Suc (n + 1) = Suc (Suc n)"
                },
                {
                    "args": "nat_plus_def_2, Suc n + 1 = Suc (Suc n)",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + 1 = Suc n ⊢ Suc n + 1 = Suc (Suc n)"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n + 1 = Suc n ⟶ Suc n + 1 = Suc (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λx. x + 1 = Suc x, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + 1 = Suc x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + 1 = Suc x"
                }
            ],
            "prop": "x + 1 = Suc x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "add_Suc_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + Suc y = Suc (0 + y)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + Suc y = Suc (0 + y)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + Suc y = Suc (n + y) ⟶ Suc n + Suc y = Suc (Suc n + y)"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + Suc y = Suc (n + y)",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + Suc y = Suc (n + y) ⊢ n + Suc y = Suc (n + y)"
                },
                {
                    "args": "Suc (n + Suc y) = Suc (Suc (n + y))",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n + Suc y = Suc (n + y) ⊢ Suc (n + Suc y) = Suc (Suc (n + y))"
                },
                {
                    "args": "nat_plus_def_2, Suc n + Suc y = Suc (Suc n + y)",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + Suc y = Suc (n + y) ⊢ Suc n + Suc y = Suc (Suc n + y)"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n + Suc y = Suc (n + y) ⟶ Suc n + Suc y = Suc (Suc n + y)"
                },
                {
                    "args": "nat_induct, {P: λx. x + Suc y = Suc (x + y), x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + Suc y = Suc (x + y)"
                }
            ],
            "prop": "x + Suc y = Suc (x + y)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "add_comm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + y = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + y = y"
                },
                {
                    "args": "add_0_right, 0 + y = y + 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + y = y + 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + y = y + n ⟶ Suc n + y = y + Suc n"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x + y = y + x",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = y + x ⊢ x + y = y + x"
                },
                {
                    "args": "Suc (x + y) = Suc (y + x)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x + y = y + x ⊢ Suc (x + y) = Suc (y + x)"
                },
                {
                    "args": "add_Suc_right, Suc (x + y) = y + Suc x",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = y + x ⊢ Suc (x + y) = y + Suc x"
                },
                {
                    "args": "nat_plus_def_2, Suc x + y = y + Suc x",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = y + x ⊢ Suc x + y = y + Suc x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x + y = y + x ⟶ Suc x + y = y + Suc x"
                },
                {
                    "args": "nat_induct, {P: λx. x + y = y + x, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y = y + x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = y + x"
                }
            ],
            "prop": "x + y = y + x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "add_Suc_right"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "add_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + y + z = 0 + (y + z)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + y + z = 0 + (y + z)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + y + z = n + (y + z) ⟶ Suc n + y + z = Suc n + (y + z)"
                },
                {
                    "args": "x, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x + y + z = x + (y + z)",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y + z = x + (y + z) ⊢ x + y + z = x + (y + z)"
                },
                {
                    "args": "Suc (x + y + z) = Suc (x + (y + z))",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x + y + z = x + (y + z) ⊢ Suc (x + y + z) = Suc (x + (y + z))"
                },
                {
                    "args": "nat_plus_def_2, Suc (x + y) + z = Suc (x + (y + z))",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y + z = x + (y + z) ⊢ Suc (x + y) + z = Suc (x + (y + z))"
                },
                {
                    "args": "nat_plus_def_2, Suc x + y + z = Suc x + (y + z)",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y + z = x + (y + z) ⊢ Suc x + y + z = Suc x + (y + z)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x + y + z = x + (y + z) ⟶ Suc x + y + z = Suc x + (y + z)"
                },
                {
                    "args": "nat_induct, {P: λx. x + y + z = x + (y + z), x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y + z = x + (y + z)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y + z = x + (y + z)"
                }
            ],
            "prop": "x + y + z = x + (y + z)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_0_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, (0::nat) * 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * 0 = 0 ⟶ Suc n * 0 = 0"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * 0 = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * 0 = 0 ⊢ n * 0 = 0"
                },
                {
                    "args": "nat_plus_def_1, 0 + n * 0 = 0",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * 0 = 0 ⊢ 0 + n * 0 = 0"
                },
                {
                    "args": "nat_times_def_2, Suc n * 0 = 0",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * 0 = 0 ⊢ Suc n * 0 = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n * 0 = 0 ⟶ Suc n * 0 = 0"
                },
                {
                    "args": "nat_induct, {P: λx::nat. x * 0 = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * 0 = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x * 0 = 0"
                }
            ],
            "prop": "x * 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_1_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + 0 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x + 0 = x"
                },
                {
                    "args": "nat_times_def_1, x + 0 * x = x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x + 0 * x = x"
                },
                {
                    "args": "nat_times_def_2, Suc 0 * x = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 0 * x = x"
                },
                {
                    "args": "nat_one_def, 1 * x = x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * x = x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 * x = x"
                }
            ],
            "prop": "1 * x = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_1_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, (0::nat) * 1 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 1 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * 1 = n ⟶ Suc n * 1 = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * 1 = n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * 1 = n ⊢ n * 1 = n"
                },
                {
                    "args": "1 + n = Suc n",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 1 + n = Suc n"
                },
                {
                    "args": "1 + n * 1 = Suc n",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n * 1 = n ⊢ 1 + n * 1 = Suc n"
                },
                {
                    "args": "nat_times_def_2, Suc n * 1 = Suc n",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * 1 = n ⊢ Suc n * 1 = Suc n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n * 1 = n ⟶ Suc n * 1 = Suc n"
                },
                {
                    "args": "nat_induct, {P: λx::nat. x * 1 = x, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * 1 = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x * 1 = x"
                }
            ],
            "prop": "x * 1 = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_Suc_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * Suc y = 0 * y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * Suc y = 0 * y"
                },
                {
                    "args": "nat_plus_def_1, 0 * Suc y = 0 + 0 * y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * Suc y = 0 + 0 * y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * Suc y = n + n * y ⟶ Suc n * Suc y = Suc n + Suc n * y"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * Suc y = n + n * y",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * Suc y = n + n * y ⊢ n * Suc y = n + n * y"
                },
                {
                    "args": "Suc (y + (n + n * y)) = Suc (n + (y + n * y))",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (y + (n + n * y)) = Suc (n + (y + n * y))"
                },
                {
                    "args": "Suc (y + n * Suc y) = Suc (n + (y + n * y))",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n * Suc y = n + n * y ⊢ Suc (y + n * Suc y) = Suc (n + (y + n * y))"
                },
                {
                    "args": "nat_plus_def_2, Suc y + n * Suc y = Suc n + (y + n * y)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * Suc y = n + n * y ⊢ Suc y + n * Suc y = Suc n + (y + n * y)"
                },
                {
                    "args": "nat_times_def_2, Suc n * Suc y = Suc n + Suc n * y",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * Suc y = n + n * y ⊢ Suc n * Suc y = Suc n + Suc n * y"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n * Suc y = n + n * y ⟶ Suc n * Suc y = Suc n + Suc n * y"
                },
                {
                    "args": "nat_induct, {P: λx. x * Suc y = x + x * y, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * Suc y = x + x * y"
                }
            ],
            "prop": "x * Suc y = x + x * y",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "distrib_l",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_0_right, (0::nat) = 0 + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) = 0 + 0"
                },
                {
                    "args": "nat_times_def_1, 0 * (y + z) = 0 * y + 0 * z",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * (y + z) = 0 * y + 0 * z"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * (y + z) = n * y + n * z ⟶ Suc n * (y + z) = Suc n * y + Suc n * z"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * (y + z) = x * y + x * z",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * (y + z) = x * y + x * z ⊢ x * (y + z) = x * y + x * z"
                },
                {
                    "args": "y + z + (x * y + x * z) = y + x * y + (z + x * z)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ y + z + (x * y + x * z) = y + x * y + (z + x * z)"
                },
                {
                    "args": "y + z + x * (y + z) = y + x * y + (z + x * z)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x * (y + z) = x * y + x * z ⊢ y + z + x * (y + z) = y + x * y + (z + x * z)"
                },
                {
                    "args": "nat_times_def_2, Suc x * (y + z) = Suc x * y + Suc x * z",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * (y + z) = x * y + x * z ⊢ Suc x * (y + z) = Suc x * y + Suc x * z"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x * (y + z) = x * y + x * z ⟶ Suc x * (y + z) = Suc x * y + Suc x * z"
                },
                {
                    "args": "nat_induct, {P: λx. x * (y + z) = x * y + x * z, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * (y + z) = x * y + x * z"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x * (y + z) = x * y + x * z"
                }
            ],
            "prop": "x * (y + z) = x * y + x * z",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "distrib_r",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_0_right, (0::nat) = 0 + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) = 0 + 0"
                },
                {
                    "args": "mult_0_right, (x + y) * 0 = x * 0 + y * 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (x + y) * 0 = x * 0 + y * 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (x + y) * n = x * n + y * n ⟶ (x + y) * Suc n = x * Suc n + y * Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "(x + y) * n = x * n + y * n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(x + y) * n = x * n + y * n ⊢ (x + y) * n = x * n + y * n"
                },
                {
                    "args": "x + y + (x * n + y * n) = x + x * n + (y + y * n)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x + y + (x * n + y * n) = x + x * n + (y + y * n)"
                },
                {
                    "args": "x + y + (x + y) * n = x + x * n + (y + y * n)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "(x + y) * n = x * n + y * n ⊢ x + y + (x + y) * n = x + x * n + (y + y * n)"
                },
                {
                    "args": "mult_Suc_right, (x + y) * Suc n = x * Suc n + y * Suc n",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(x + y) * n = x * n + y * n ⊢ (x + y) * Suc n = x * Suc n + y * Suc n"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (x + y) * n = x * n + y * n ⟶ (x + y) * Suc n = x * Suc n + y * Suc n"
                },
                {
                    "args": "nat_induct, {P: λz. (x + y) * z = x * z + y * z, x: z}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (x + y) * z = x * z + y * z"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (x + y) * z = x * z + y * z"
                }
            ],
            "prop": "(x + y) * z = x * z + y * z",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "z"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "mult_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * z = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * z = 0"
                },
                {
                    "args": "nat_times_def_1, 0 * y * z = 0 * (y * z)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * y * z = 0 * (y * z)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * y * z = n * (y * z) ⟶ Suc n * y * z = Suc n * (y * z)"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * y * z = x * (y * z)",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * y * z = x * (y * z) ⊢ x * y * z = x * (y * z)"
                },
                {
                    "args": "y * z + x * y * z = y * z + x * (y * z)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x * y * z = x * (y * z) ⊢ y * z + x * y * z = y * z + x * (y * z)"
                },
                {
                    "args": "distrib_r, (y + x * y) * z = y * z + x * (y * z)",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * y * z = x * (y * z) ⊢ (y + x * y) * z = y * z + x * (y * z)"
                },
                {
                    "args": "nat_times_def_2, Suc x * y * z = Suc x * (y * z)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * y * z = x * (y * z) ⊢ Suc x * y * z = Suc x * (y * z)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x * y * z = x * (y * z) ⟶ Suc x * y * z = Suc x * (y * z)"
                },
                {
                    "args": "nat_induct, {P: λx. x * y * z = x * (y * z), x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * y * z = x * (y * z)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x * y * z = x * (y * z)"
                }
            ],
            "prop": "x * y * z = x * (y * z)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "distrib_r"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_comm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * y = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * y = 0"
                },
                {
                    "args": "mult_0_right, 0 * y = y * 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * y = y * 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * y = y * n ⟶ Suc n * y = y * Suc n"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * y = y * x",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * y = y * x ⊢ x * y = y * x"
                },
                {
                    "args": "mult_Suc_right, y + y * x = y * Suc x",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ y + y * x = y * Suc x"
                },
                {
                    "args": "y + x * y = y * Suc x",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x * y = y * x ⊢ y + x * y = y * Suc x"
                },
                {
                    "args": "nat_times_def_2, Suc x * y = y * Suc x",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * y = y * x ⊢ Suc x * y = y * Suc x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x * y = y * x ⟶ Suc x * y = y * Suc x"
                },
                {
                    "args": "nat_induct, {P: λx. x * y = y * x, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * y = y * x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x * y = y * x"
                }
            ],
            "prop": "x * y = y * x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "mult_Suc_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "add_cancel_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 + y = 0 + z ⟶ y = z"
                },
                {
                    "args": "0 + y = 0 + z",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 + y = 0 + z ⊢ 0 + y = 0 + z"
                },
                {
                    "args": "nat_plus_def_1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 + y = 0 + z ⊢ y = z"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 + y = 0 + z ⟶ y = z"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (n + y = n + z ⟶ y = z) ⟶ Suc n + y = Suc n + z ⟶ y = z"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + y = n + z ⟶ y = z",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + y = n + z ⟶ y = z ⊢ n + y = n + z ⟶ y = z"
                },
                {
                    "args": "Suc n + y = Suc n + z",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n + y = Suc n + z ⊢ Suc n + y = Suc n + z"
                },
                {
                    "args": "nat_plus_def_2",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n + y = Suc n + z ⊢ Suc (n + y) = Suc (n + z)"
                },
                {
                    "args": "nat_Suc_inject",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "n + y = n + z ⟶ y = z, Suc n + y = Suc n + z ⊢ n + y = n + z"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.1",
                        "1.4"
                    ],
                    "rule": "apply_fact",
                    "th": "n + y = n + z ⟶ y = z, Suc n + y = Suc n + z ⊢ y = z"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (n + y = n + z ⟶ y = z) ⟶ Suc n + y = Suc n + z ⟶ y = z"
                },
                {
                    "args": "nat_induct, {P: λx. x + y = x + z ⟶ y = z, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y = x + z ⟶ y = z"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = x + z ⟶ y = z"
                }
            ],
            "prop": "x + y = x + z ⟶ y = z",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.3",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_Suc_inject"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "add_cancel_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + z = y + z",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + z = y + z ⊢ x + z = y + z"
                },
                {
                    "args": "add_comm",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x + z = y + z ⊢ z + x = z + y"
                },
                {
                    "args": "add_cancel_left",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x + z = y + z ⊢ x = y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + z = y + z ⟶ x = y"
                }
            ],
            "prop": "x + z = y + z ⟶ x = y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "add_right_eq_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = x ⊢ x + y = x"
                },
                {
                    "args": "add_0_right, x + y = x + 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = x ⊢ x + y = x + 0"
                },
                {
                    "args": "add_cancel_left",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x + y = x ⊢ y = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = x ⟶ y = 0"
                }
            ],
            "prop": "x + y = x ⟶ y = 0",
            "steps": [
                {
                    "goal": "x + y = x + 0",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "add_left_eq_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = y ⊢ x + y = y"
                },
                {
                    "args": "nat_plus_def_1, x + y = 0 + y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = y ⊢ x + y = 0 + y"
                },
                {
                    "args": "add_cancel_right",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x + y = y ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = y ⟶ x = 0"
                }
            ],
            "prop": "x + y = y ⟶ x = 0",
            "steps": [
                {
                    "goal": "x + y = 0 + y",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1",
                "hint_forward"
            ],
            "name": "add_is_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 + y = 0 ⟶ (0::nat) = 0 ∧ y = 0"
                },
                {
                    "args": "0 + y = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 + y = 0 ⊢ 0 + y = 0"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "add_right_eq_zero",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 + y = 0 ⊢ y = 0"
                },
                {
                    "args": "conjI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 + y = 0 ⊢ (0::nat) = 0 ∧ y = 0"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 + y = 0 ⟶ (0::nat) = 0 ∧ y = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (n + y = 0 ⟶ n = 0 ∧ y = 0) ⟶ Suc n + y = 0 ⟶ Suc n = 0 ∧ y = 0"
                },
                {
                    "args": "x, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x + y = 0 ⟶ x = 0 ∧ y = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = 0 ⟶ x = 0 ∧ y = 0 ⊢ x + y = 0 ⟶ x = 0 ∧ y = 0"
                },
                {
                    "args": "Suc x + y = 0",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc x + y = 0 ⊢ Suc x + y = 0"
                },
                {
                    "args": "nat_plus_def_2",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc x + y = 0 ⊢ Suc (x + y) = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc x + y = 0, x + y = 0 ⟶ x = 0 ∧ y = 0 ⊢ ¬(Suc x = 0 ∧ y = 0) ⟶ ¬(Suc (x + y) = 0)"
                },
                {
                    "args": "¬(Suc x = 0 ∧ y = 0)",
                    "id": "1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc x = 0 ∧ y = 0) ⊢ ¬(Suc x = 0 ∧ y = 0)"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: x + y}",
                    "id": "1.4.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc (x + y))"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc (x + y) = 0)",
                    "id": "1.4.2",
                    "prevs": [
                        "1.4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc x + y = 0, ¬(Suc x = 0 ∧ y = 0), x + y = 0 ⟶ x = 0 ∧ y = 0 ⊢ ¬(Suc (x + y) = 0)"
                },
                {
                    "args": "",
                    "id": "1.4.3",
                    "prevs": [
                        "1.4.0",
                        "1.4.2"
                    ],
                    "rule": "intros",
                    "th": "Suc x + y = 0, x + y = 0 ⟶ x = 0 ∧ y = 0 ⊢ ¬(Suc x = 0 ∧ y = 0) ⟶ ¬(Suc (x + y) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc x + y = 0, x + y = 0 ⟶ x = 0 ∧ y = 0 ⊢ Suc x = 0 ∧ y = 0"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. (x + y = 0 ⟶ x = 0 ∧ y = 0) ⟶ Suc x + y = 0 ⟶ Suc x = 0 ∧ y = 0"
                },
                {
                    "args": "nat_induct, {P: λx. x + y = 0 ⟶ x = 0 ∧ y = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y = 0 ⟶ x = 0 ∧ y = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = 0 ⟶ x = 0 ∧ y = 0"
                }
            ],
            "prop": "x + y = 0 ⟶ x = 0 ∧ y = 0",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_right_eq_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "mult_nonzero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 * y = 0 ⟶ (0::nat) = 0 ∨ y = 0"
                },
                {
                    "args": "0 * y = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 * y = 0 ⊢ 0 * y = 0"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "disjI1, {A: (0::nat) = 0, B: y = 0}",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 * y = 0 ⊢ (0::nat) = 0 ∨ y = 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 * y = 0 ⟶ (0::nat) = 0 ∨ y = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (n * y = 0 ⟶ n = 0 ∨ y = 0) ⟶ Suc n * y = 0 ⟶ Suc n = 0 ∨ y = 0"
                },
                {
                    "args": "x, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * y = 0 ⟶ x = 0 ∨ y = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * y = 0 ⟶ x = 0 ∨ y = 0 ⊢ x * y = 0 ⟶ x = 0 ∨ y = 0"
                },
                {
                    "args": "Suc x * y = 0",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc x * y = 0 ⊢ Suc x * y = 0"
                },
                {
                    "args": "nat_times_def_2",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc x * y = 0 ⊢ y + x * y = 0"
                },
                {
                    "args": "add_is_zero",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc x * y = 0 ⊢ y = 0 ∧ x * y = 0"
                },
                {
                    "args": "conjD1",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc x * y = 0 ⊢ y = 0"
                },
                {
                    "args": "disjI2, {A: Suc x = 0, B: y = 0}",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc x * y = 0, x * y = 0 ⟶ x = 0 ∨ y = 0 ⊢ Suc x = 0 ∨ y = 0"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. (x * y = 0 ⟶ x = 0 ∨ y = 0) ⟶ Suc x * y = 0 ⟶ Suc x = 0 ∨ y = 0"
                },
                {
                    "args": "nat_induct, {P: λx. x * y = 0 ⟶ x = 0 ∨ y = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * y = 0 ⟶ x = 0 ∨ y = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x * y = 0 ⟶ x = 0 ∨ y = 0"
                }
            ],
            "prop": "x * y = 0 ⟶ x = 0 ∨ y = 0",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "1.6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "eq_mult_lcancel",
            "num_gaps": 2,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (0::nat) = 0 ⟶ (0::nat) = 0 ∨ n = p"
                },
                {
                    "args": "(0::nat) = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 0 ⊢ (0::nat) = 0"
                },
                {
                    "args": "disjI1, {A: (0::nat) = 0, B: n = p}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(0::nat) = 0 ⊢ (0::nat) = 0 ∨ n = p"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ (0::nat) = 0 ⟶ (0::nat) = 0 ∨ n = p"
                },
                {
                    "args": "nat_times_def_1, 0 * n = 0 * p ⟶ (0::nat) = 0 ∨ n = p",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * n = 0 * p ⟶ (0::nat) = 0 ∨ n = p"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (0::nat) = 0 ∨ n = p ⟶ 0 * n = 0 * p"
                },
                {
                    "args": "(0::nat) = 0 ∨ n = p",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 0 ∨ n = p ⊢ (0::nat) = 0 ∨ n = p"
                },
                {
                    "args": "nat_times_def_1, 0 * n = 0 * p",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * n = 0 * p"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ (0::nat) = 0 ∨ n = p ⟶ 0 * n = 0 * p"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 * n = 0 * p ⟷ (0::nat) = 0 ∨ n = p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * 0 = n * p ⟷ n = 0 ∨ 0 = p ⟶ Suc n * 0 = Suc n * p ⟷ Suc n = 0 ∨ 0 = p"
                },
                {
                    "args": "m, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ m * 0 = m * p ⟷ m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = Suc m * p ⟶ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "0 = Suc m * p",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = Suc m * p ⊢ 0 = Suc m * p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = Suc m * p ⊢ Suc m * p = 0"
                },
                {
                    "args": "mult_nonzero",
                    "id": "4.2.2",
                    "prevs": [
                        "4.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = Suc m * p ⊢ Suc m = 0 ∨ p = 0"
                },
                {
                    "args": "",
                    "id": "4.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ⟶ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "Suc m = 0",
                    "id": "4.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = 0 ⊢ Suc m = 0"
                },
                {
                    "args": "disjI1, {A: Suc m = 0, B: 0 = p}",
                    "id": "4.2.3.1",
                    "prevs": [
                        "4.2.3.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc m = 0, 0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.2.3.2",
                    "prevs": [
                        "4.2.3.0",
                        "4.2.3.1"
                    ],
                    "rule": "intros",
                    "th": "0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ⟶ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ p = 0 ⟶ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "p = 0",
                    "id": "4.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 0 ⊢ p = 0"
                },
                {
                    "args": "eq_sym_eq, 0 = p",
                    "id": "4.2.4.1",
                    "prevs": [
                        "4.2.4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "p = 0, 0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = p"
                },
                {
                    "args": "disjI2, {A: Suc m = 0, B: 0 = p}",
                    "id": "4.2.4.2",
                    "prevs": [
                        "4.2.4.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "p = 0, 0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.2.4.3",
                    "prevs": [
                        "4.2.4.0",
                        "4.2.4.2"
                    ],
                    "rule": "intros",
                    "th": "0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ p = 0 ⟶ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "disjE",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.2",
                        "4.2.3",
                        "4.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = Suc m * p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.2.6",
                    "prevs": [
                        "4.2.0",
                        "4.2.5"
                    ],
                    "rule": "intros",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = Suc m * p ⟶ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ∨ 0 = p ⟶ 0 = Suc m * p"
                },
                {
                    "args": "Suc m = 0 ∨ 0 = p",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = 0 ∨ 0 = p ⊢ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ⟶ 0 = Suc m * p"
                },
                {
                    "args": "Suc m = 0",
                    "id": "4.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = 0 ⊢ Suc m = 0"
                },
                {
                    "args": "nat_times_def_1, 0 = 0 * p",
                    "id": "4.3.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 * p"
                },
                {
                    "args": "0 = Suc m * p",
                    "id": "4.3.1.2",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Suc m = 0, Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = Suc m * p"
                },
                {
                    "args": "",
                    "id": "4.3.1.3",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.2"
                    ],
                    "rule": "intros",
                    "th": "Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ⟶ 0 = Suc m * p"
                },
                {
                    "args": "",
                    "id": "4.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = p ⟶ 0 = Suc m * p"
                },
                {
                    "args": "0 = p",
                    "id": "4.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = p ⊢ 0 = p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "4.3.2.1",
                    "prevs": [
                        "4.3.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = p ⊢ p = 0"
                },
                {
                    "args": "mult_0_right, 0 = Suc m * 0",
                    "id": "4.3.2.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = Suc m * 0"
                },
                {
                    "args": "0 = Suc m * p",
                    "id": "4.3.2.3",
                    "prevs": [
                        "4.3.2.1",
                        "4.3.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = p, Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = Suc m * p"
                },
                {
                    "args": "",
                    "id": "4.3.2.4",
                    "prevs": [
                        "4.3.2.0",
                        "4.3.2.3"
                    ],
                    "rule": "intros",
                    "th": "Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = p ⟶ 0 = Suc m * p"
                },
                {
                    "args": "disjE",
                    "id": "4.3.3",
                    "prevs": [
                        "4.3.0",
                        "4.3.1",
                        "4.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc m = 0 ∨ 0 = p, m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = Suc m * p"
                },
                {
                    "args": "",
                    "id": "4.3.4",
                    "prevs": [
                        "4.3.0",
                        "4.3.3"
                    ],
                    "rule": "intros",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m = 0 ∨ 0 = p ⟶ 0 = Suc m * p"
                },
                {
                    "args": "iffI",
                    "id": "4.4",
                    "prevs": [
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ 0 = Suc m * p ⟷ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "mult_0_right, Suc m * 0 = Suc m * p ⟷ Suc m = 0 ∨ 0 = p",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⊢ Suc m * 0 = Suc m * p ⟷ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "4.6",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. m * 0 = m * p ⟷ m = 0 ∨ 0 = p ⟶ Suc m * 0 = Suc m * p ⟷ Suc m = 0 ∨ 0 = p"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (∀n1. n1 * n = n1 * 0 ⟷ n1 = 0 ∨ n = 0 ⟶ Suc n1 * n = Suc n1 * 0 ⟷ Suc n1 = 0 ∨ n = 0) ⟶ (∀n1. n1 * Suc n = n1 * 0 ⟷ n1 = 0 ∨ Suc n = 0 ⟶ Suc n1 * Suc n = Suc n1 * 0 ⟷ Suc n1 = 0 ∨ Suc n = 0)"
                },
                {
                    "args": "m, nat",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ ∀n. n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0 ⟶ Suc n * Suc m = Suc n * 0 ⟷ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "n, nat",
                    "id": "5.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0",
                    "id": "5.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0 ⊢ n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = 0 ⟶ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "Suc n * Suc m = 0",
                    "id": "5.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n * Suc m = 0 ⊢ Suc n * Suc m = 0"
                },
                {
                    "args": "mult_nonzero",
                    "id": "5.2.2.1",
                    "prevs": [
                        "5.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n * Suc m = 0 ⊢ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.2.2",
                    "prevs": [
                        "5.2.2.0",
                        "5.2.2.1"
                    ],
                    "rule": "intros",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = 0 ⟶ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n = 0 ∨ Suc m = 0 ⟶ Suc n * Suc m = 0"
                },
                {
                    "args": "Suc n = 0 ∨ Suc m = 0",
                    "id": "5.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = 0 ∨ Suc m = 0 ⊢ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n = 0 ⟶ Suc n * Suc m = 0"
                },
                {
                    "args": "Suc n = 0",
                    "id": "5.2.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = 0 ⊢ Suc n = 0"
                },
                {
                    "args": "nat_times_def_1, 0 * Suc m = 0",
                    "id": "5.2.3.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * Suc m = 0"
                },
                {
                    "args": "Suc n * Suc m = 0",
                    "id": "5.2.3.1.2",
                    "prevs": [
                        "5.2.3.1.0",
                        "5.2.3.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Suc n = 0, Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.3.1.3",
                    "prevs": [
                        "5.2.3.1.0",
                        "5.2.3.1.2"
                    ],
                    "rule": "intros",
                    "th": "Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n = 0 ⟶ Suc n * Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc m = 0 ⟶ Suc n * Suc m = 0"
                },
                {
                    "args": "Suc m = 0",
                    "id": "5.2.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = 0 ⊢ Suc m = 0"
                },
                {
                    "args": "mult_0_right, Suc n * 0 = 0",
                    "id": "5.2.3.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc n * 0 = 0"
                },
                {
                    "args": "Suc n * Suc m = 0",
                    "id": "5.2.3.2.2",
                    "prevs": [
                        "5.2.3.2.0",
                        "5.2.3.2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Suc m = 0, Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.3.2.3",
                    "prevs": [
                        "5.2.3.2.0",
                        "5.2.3.2.2"
                    ],
                    "rule": "intros",
                    "th": "Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc m = 0 ⟶ Suc n * Suc m = 0"
                },
                {
                    "args": "disjE",
                    "id": "5.2.3.3",
                    "prevs": [
                        "5.2.3.0",
                        "5.2.3.1",
                        "5.2.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = 0 ∨ Suc m = 0, n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.3.4",
                    "prevs": [
                        "5.2.3.0",
                        "5.2.3.3"
                    ],
                    "rule": "intros",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n = 0 ∨ Suc m = 0 ⟶ Suc n * Suc m = 0"
                },
                {
                    "args": "iffI",
                    "id": "5.2.4",
                    "prevs": [
                        "5.2.2",
                        "5.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = 0 ⟷ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "mult_0_right, Suc n * Suc m = Suc n * 0 ⟷ Suc n = 0 ∨ Suc m = 0",
                    "id": "5.2.5",
                    "prevs": [
                        "5.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0, ∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ Suc n * Suc m = Suc n * 0 ⟷ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.2.6",
                    "prevs": [
                        "5.2.0",
                        "5.2.1",
                        "5.2.5"
                    ],
                    "rule": "intros",
                    "th": "∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0 ⊢ ∀n. n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0 ⟶ Suc n * Suc m = Suc n * 0 ⟷ Suc n = 0 ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. (∀n. n * m = n * 0 ⟷ n = 0 ∨ m = 0 ⟶ Suc n * m = Suc n * 0 ⟷ Suc n = 0 ∨ m = 0) ⟶ (∀n. n * Suc m = n * 0 ⟷ n = 0 ∨ Suc m = 0 ⟶ Suc n * Suc m = Suc n * 0 ⟷ Suc n = 0 ∨ Suc m = 0)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (∀n1. (∀n2. n2 * n1 = n2 * n ⟷ n2 = 0 ∨ n1 = n ⟶ Suc n2 * n1 = Suc n2 * n ⟷ Suc n2 = 0 ∨ n1 = n) ⟶ (∀n2. n2 * Suc n1 = n2 * n ⟷ n2 = 0 ∨ Suc n1 = n ⟶ Suc n2 * Suc n1 = Suc n2 * n ⟷ Suc n2 = 0 ∨ Suc n1 = n)) ⟶ (∀n1. (∀n2. n2 * n1 = n2 * Suc n ⟷ n2 = 0 ∨ n1 = Suc n ⟶ Suc n2 * n1 = Suc n2 * Suc n ⟷ Suc n2 = 0 ∨ n1 = Suc n) ⟶ (∀n2. n2 * Suc n1 = n2 * Suc n ⟷ n2 = 0 ∨ Suc n1 = Suc n ⟶ Suc n2 * Suc n1 = Suc n2 * Suc n ⟷ Suc n2 = 0 ∨ Suc n1 = Suc n))"
                },
                {
                    "args": "m, nat",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m)",
                    "id": "6.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m)"
                },
                {
                    "args": "",
                    "id": "6.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ ∀n. (∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m) ⟶ (∀n1. n1 * Suc n = n1 * Suc m ⟷ n1 = 0 ∨ Suc n = Suc m ⟶ Suc n1 * Suc n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ Suc n = Suc m)"
                },
                {
                    "args": "n, nat",
                    "id": "6.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m",
                    "id": "6.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m ⊢ ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ ∀n1. n1 * Suc n = n1 * Suc m ⟷ n1 = 0 ∨ Suc n = Suc m ⟶ Suc n1 * Suc n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "p, nat",
                    "id": "6.2.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m",
                    "id": "6.2.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m ⊢ p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m, ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ Suc p * Suc n = Suc p * Suc m ⟶ Suc p = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "Suc p * Suc n = Suc p * Suc m",
                    "id": "6.2.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc p * Suc n = Suc p * Suc m ⊢ Suc p * Suc n = Suc p * Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.2.2.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "Suc p * Suc n = Suc p * Suc m, p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m, ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ Suc n = Suc m"
                },
                {
                    "args": "disjI2, {A: Suc p = 0, B: Suc n = Suc m}",
                    "id": "6.2.2.2.2",
                    "prevs": [
                        "6.2.2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc p * Suc n = Suc p * Suc m, p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m, ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ Suc p = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.2.2.3",
                    "prevs": [
                        "6.2.2.2.0",
                        "6.2.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m, ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ Suc p * Suc n = Suc p * Suc m ⟶ Suc p = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.2.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m, ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ Suc p = 0 ∨ Suc n = Suc m ⟶ Suc p * Suc n = Suc p * Suc m"
                },
                {
                    "args": "iffI",
                    "id": "6.2.2.4",
                    "prevs": [
                        "6.2.2.2",
                        "6.2.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m, ∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ Suc p * Suc n = Suc p * Suc m ⟷ Suc p = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.2.5",
                    "prevs": [
                        "6.2.2.0",
                        "6.2.2.1",
                        "6.2.2.4"
                    ],
                    "rule": "intros",
                    "th": "∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m, ∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ ∀p. p * Suc n = p * Suc m ⟷ p = 0 ∨ Suc n = Suc m ⟶ Suc p * Suc n = Suc p * Suc m ⟷ Suc p = 0 ∨ Suc n = Suc m"
                },
                {
                    "args": "",
                    "id": "6.2.3",
                    "prevs": [
                        "6.2.0",
                        "6.2.1",
                        "6.2.2"
                    ],
                    "rule": "intros",
                    "th": "∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m) ⊢ ∀n. (∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m) ⟶ (∀n1. n1 * Suc n = n1 * Suc m ⟷ n1 = 0 ∨ Suc n = Suc m ⟶ Suc n1 * Suc n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ Suc n = Suc m)"
                },
                {
                    "args": "",
                    "id": "6.3",
                    "prevs": [
                        "6.0",
                        "6.1",
                        "6.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. (∀n. (∀n1. n1 * n = n1 * m ⟷ n1 = 0 ∨ n = m ⟶ Suc n1 * n = Suc n1 * m ⟷ Suc n1 = 0 ∨ n = m) ⟶ (∀n1. n1 * Suc n = n1 * m ⟷ n1 = 0 ∨ Suc n = m ⟶ Suc n1 * Suc n = Suc n1 * m ⟷ Suc n1 = 0 ∨ Suc n = m)) ⟶ (∀n. (∀n1. n1 * n = n1 * Suc m ⟷ n1 = 0 ∨ n = Suc m ⟶ Suc n1 * n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ n = Suc m) ⟶ (∀n1. n1 * Suc n = n1 * Suc m ⟷ n1 = 0 ∨ Suc n = Suc m ⟶ Suc n1 * Suc n = Suc n1 * Suc m ⟷ Suc n1 = 0 ∨ Suc n = Suc m))"
                },
                {
                    "args": "nat_induct, {P: λp. ∀n. (∀n1. n1 * n = n1 * p ⟷ n1 = 0 ∨ n = p ⟶ Suc n1 * n = Suc n1 * p ⟷ Suc n1 = 0 ∨ n = p) ⟶ (∀n1. n1 * Suc n = n1 * p ⟷ n1 = 0 ∨ Suc n = p ⟶ Suc n1 * Suc n = Suc n1 * p ⟷ Suc n1 = 0 ∨ Suc n = p), x: p}",
                    "id": "7",
                    "prevs": [
                        "5",
                        "6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∀n. (∀n1. n1 * n = n1 * p ⟷ n1 = 0 ∨ n = p ⟶ Suc n1 * n = Suc n1 * p ⟷ Suc n1 = 0 ∨ n = p) ⟶ (∀n1. n1 * Suc n = n1 * p ⟷ n1 = 0 ∨ Suc n = p ⟶ Suc n1 * Suc n = Suc n1 * p ⟷ Suc n1 = 0 ∨ Suc n = p)"
                },
                {
                    "args": "nat_induct, {P: λn. ∀n1. n1 * n = n1 * p ⟷ n1 = 0 ∨ n = p ⟶ Suc n1 * n = Suc n1 * p ⟷ Suc n1 = 0 ∨ n = p, x: n}",
                    "id": "8",
                    "prevs": [
                        "4",
                        "7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∀n1. n1 * n = n1 * p ⟷ n1 = 0 ∨ n = p ⟶ Suc n1 * n = Suc n1 * p ⟷ Suc n1 = 0 ∨ n = p"
                },
                {
                    "args": "nat_induct, {P: λm. m * n = m * p ⟷ m = 0 ∨ n = p, x: m}",
                    "id": "9",
                    "prevs": [
                        "3",
                        "8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m * n = m * p ⟷ m = 0 ∨ n = p"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = m * p ⟷ m = 0 ∨ n = p"
                }
            ],
            "prop": "m * n = m * p ⟷ m = 0 ∨ n = p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "4",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "4.2.1"
                    ],
                    "goal_id": "4.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "mult_nonzero"
                },
                {
                    "fact_ids": [
                        "4.2.2"
                    ],
                    "goal_id": "4.2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "4.2.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "4.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.1.0"
                    ],
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "4.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.2.0"
                    ],
                    "goal_id": "4.3.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "4.3.2.1"
                    ],
                    "goal_id": "4.3.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "5",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "p"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "5.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "5.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.2.0"
                    ],
                    "goal_id": "5.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "mult_nonzero"
                },
                {
                    "goal_id": "5.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.3.0"
                    ],
                    "goal_id": "5.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "5.2.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.3.1.0"
                    ],
                    "goal_id": "5.2.3.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "5.2.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.3.2.0"
                    ],
                    "goal_id": "5.2.3.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "6.2.2",
                    "method_name": "introduction",
                    "names": "p"
                },
                {
                    "goal_id": "6.2.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "6.2.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.2.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "eq_mult_rcancel",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "eq_mult_lcancel, m * n = m * p ⟷ m = 0 ∨ n = p",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m * n = m * p ⟷ m = 0 ∨ n = p"
                },
                {
                    "args": "mult_comm, n * m = p * m ⟷ m = 0 ∨ n = p",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n * m = p * m ⟷ m = 0 ∨ n = p"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ n * m = p * m ⟷ m = 0 ∨ n = p"
                }
            ],
            "prop": "n * m = p * m ⟷ m = 0 ∨ n = p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "name": "one_nonzero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_zero_Suc_neq, {n: (0::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc 0)"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc 0 = 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(Suc 0 = 0)"
                },
                {
                    "args": "nat_one_def, ¬((1::nat) = 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬((1::nat) = 0)"
                }
            ],
            "prop": "¬((1::nat) = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_n": "(0::nat)",
                    "theorem": "nat_zero_Suc_neq"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_eq_1",
            "num_gaps": 2,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m * 0 = 1 ⟶ m = 1 ∧ (0::nat) = 1"
                },
                {
                    "args": "m * 0 = 1",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * 0 = 1 ⊢ m * 0 = 1"
                },
                {
                    "args": "mult_0_right",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m * 0 = 1 ⊢ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * 0 = 1 ⊢ ¬(m = 1 ∧ (0::nat) = 1) ⟶ ¬((0::nat) = 1)"
                },
                {
                    "args": "¬(m = 1 ∧ (0::nat) = 1)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 1 ∧ (0::nat) = 1) ⊢ ¬(m = 1 ∧ (0::nat) = 1)"
                },
                {
                    "args": "one_nonzero",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "eq_sym_eq, ¬((0::nat) = 1)",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * 0 = 1, ¬(m = 1 ∧ (0::nat) = 1) ⊢ ¬((0::nat) = 1)"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.0",
                        "0.2.2"
                    ],
                    "rule": "intros",
                    "th": "m * 0 = 1 ⊢ ¬(m = 1 ∧ (0::nat) = 1) ⟶ ¬((0::nat) = 1)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * 0 = 1 ⊢ m = 1 ∧ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * 0 = 1 ⟶ m = 1 ∧ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 1 ∧ (0::nat) = 1 ⟶ m * 0 = 1"
                },
                {
                    "args": "m = 1 ∧ (0::nat) = 1",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 1 ∧ (0::nat) = 1 ⊢ m = 1 ∧ (0::nat) = 1"
                },
                {
                    "args": "conjD2",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 1 ∧ (0::nat) = 1 ⊢ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 1 ∧ (0::nat) = 1 ⊢ ¬(m * 0 = 1) ⟶ ¬((0::nat) = 1)"
                },
                {
                    "args": "¬(m * 0 = 1)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * 0 = 1) ⊢ ¬(m * 0 = 1)"
                },
                {
                    "args": "one_nonzero",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "eq_sym_eq, ¬((0::nat) = 1)",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * 0 = 1), m = 1 ∧ (0::nat) = 1 ⊢ ¬((0::nat) = 1)"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.2"
                    ],
                    "rule": "intros",
                    "th": "m = 1 ∧ (0::nat) = 1 ⊢ ¬(m * 0 = 1) ⟶ ¬((0::nat) = 1)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 1 ∧ (0::nat) = 1 ⊢ m * 0 = 1"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 1 ∧ (0::nat) = 1 ⟶ m * 0 = 1"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m * 0 = 1 ⟷ m = 1 ∧ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 * n = 1 ⟷ (0::nat) = 1 ∧ n = 1 ⟶ 0 * Suc n = 1 ⟷ (0::nat) = 1 ∧ Suc n = 1"
                },
                {
                    "args": "m, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ 0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ (0::nat) = 1 ⟶ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "(0::nat) = 1",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 1 ⊢ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(0::nat) = 1, 0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ ¬((0::nat) = 1 ∧ Suc m = 1) ⟶ ¬((0::nat) = 1)"
                },
                {
                    "args": "¬((0::nat) = 1 ∧ Suc m = 1)",
                    "id": "3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 1 ∧ Suc m = 1) ⊢ ¬((0::nat) = 1 ∧ Suc m = 1)"
                },
                {
                    "args": "one_nonzero",
                    "id": "3.2.1.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "eq_sym_eq, ¬((0::nat) = 1)",
                    "id": "3.2.1.2",
                    "prevs": [
                        "3.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(0::nat) = 1, ¬((0::nat) = 1 ∧ Suc m = 1), 0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ ¬((0::nat) = 1)"
                },
                {
                    "args": "",
                    "id": "3.2.1.3",
                    "prevs": [
                        "3.2.1.0",
                        "3.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "(0::nat) = 1, 0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ ¬((0::nat) = 1 ∧ Suc m = 1) ⟶ ¬((0::nat) = 1)"
                },
                {
                    "args": "contrapositive",
                    "id": "3.2.2",
                    "prevs": [
                        "3.2.0",
                        "3.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "(0::nat) = 1, 0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "3.2.3",
                    "prevs": [
                        "3.2.0",
                        "3.2.2"
                    ],
                    "rule": "intros",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ (0::nat) = 1 ⟶ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ (0::nat) = 1 ∧ Suc m = 1 ⟶ (0::nat) = 1"
                },
                {
                    "args": "(0::nat) = 1 ∧ Suc m = 1",
                    "id": "3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 1 ∧ Suc m = 1 ⊢ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "conjD1",
                    "id": "3.3.1",
                    "prevs": [
                        "3.3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(0::nat) = 1 ∧ Suc m = 1 ⊢ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "3.3.2",
                    "prevs": [
                        "3.3.0",
                        "3.3.1"
                    ],
                    "rule": "intros",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ (0::nat) = 1 ∧ Suc m = 1 ⟶ (0::nat) = 1"
                },
                {
                    "args": "iffI",
                    "id": "3.4",
                    "prevs": [
                        "3.2",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ (0::nat) = 1 ⟷ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "nat_times_def_1, 0 * Suc m = 1 ⟷ (0::nat) = 1 ∧ Suc m = 1",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⊢ 0 * Suc m = 1 ⟷ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. 0 * m = 1 ⟷ (0::nat) = 1 ∧ m = 1 ⟶ 0 * Suc m = 1 ⟷ (0::nat) = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1) ⟶ (∀n1. Suc n * n1 = 1 ⟷ Suc n = 1 ∧ n1 = 1 ⟶ Suc n * Suc n1 = 1 ⟷ Suc n = 1 ∧ Suc n1 = 1)"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ ∀n1. Suc n * n1 = 1 ⟷ Suc n = 1 ∧ n1 = 1 ⟶ Suc n * Suc n1 = 1 ⟷ Suc n = 1 ∧ Suc n1 = 1"
                },
                {
                    "args": "m, nat",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1",
                    "id": "4.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1 ⊢ Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n * Suc m = 1 ⟶ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "Suc n * Suc m = 1",
                    "id": "4.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n * Suc m = 1 ⊢ Suc n * Suc m = 1"
                },
                {
                    "args": "mult_Suc_right",
                    "id": "4.2.2.1",
                    "prevs": [
                        "4.2.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n * Suc m = 1 ⊢ Suc n + Suc n * m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n = 1 ⟶ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "Suc n = 1",
                    "id": "4.2.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = 1 ⊢ Suc n = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2.2.1",
                    "prevs": [
                        "4.2.2.2.0",
                        "4.2.2.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "Suc n = 1, Suc n * Suc m = 1 ⊢ 1 * Suc m = 1"
                },
                {
                    "args": "mult_1_left",
                    "id": "4.2.2.2.2",
                    "prevs": [
                        "4.2.2.2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n = 1, Suc n * Suc m = 1 ⊢ Suc m = 1"
                },
                {
                    "args": "conjI",
                    "id": "4.2.2.2.3",
                    "prevs": [
                        "4.2.2.2.0",
                        "4.2.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = 1, Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2.2.4",
                    "prevs": [
                        "4.2.2.2.0",
                        "4.2.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n = 1 ⟶ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ ¬(Suc n = 1) ⟶ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "¬(Suc n = 1)",
                    "id": "4.2.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n = 1) ⊢ ¬(Suc n = 1)"
                },
                {
                    "args": "",
                    "id": "4.2.2.3.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "¬(Suc n = 1), Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2.3.2",
                    "prevs": [
                        "4.2.2.3.0",
                        "4.2.2.3.1"
                    ],
                    "rule": "intros",
                    "th": "Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ ¬(Suc n = 1) ⟶ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "classical_cases",
                    "id": "4.2.2.4",
                    "prevs": [
                        "4.2.2.2",
                        "4.2.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n * Suc m = 1, Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.2.5",
                    "prevs": [
                        "4.2.2.0",
                        "4.2.2.4"
                    ],
                    "rule": "intros",
                    "th": "Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n * Suc m = 1 ⟶ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n = 1 ∧ Suc m = 1 ⟶ Suc n * Suc m = 1"
                },
                {
                    "args": "iffI",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.2",
                        "4.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1, ∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ Suc n * Suc m = 1 ⟷ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.0",
                        "4.2.1",
                        "4.2.4"
                    ],
                    "rule": "intros",
                    "th": "∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1 ⊢ ∀m. Suc n * m = 1 ⟷ Suc n = 1 ∧ m = 1 ⟶ Suc n * Suc m = 1 ⟷ Suc n = 1 ∧ Suc m = 1"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (∀n1. n * n1 = 1 ⟷ n = 1 ∧ n1 = 1 ⟶ n * Suc n1 = 1 ⟷ n = 1 ∧ Suc n1 = 1) ⟶ (∀n1. Suc n * n1 = 1 ⟷ Suc n = 1 ∧ n1 = 1 ⟶ Suc n * Suc n1 = 1 ⟷ Suc n = 1 ∧ Suc n1 = 1)"
                },
                {
                    "args": "nat_induct, {P: λm. ∀n. m * n = 1 ⟷ m = 1 ∧ n = 1 ⟶ m * Suc n = 1 ⟷ m = 1 ∧ Suc n = 1, x: m}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∀n. m * n = 1 ⟷ m = 1 ∧ n = 1 ⟶ m * Suc n = 1 ⟷ m = 1 ∧ Suc n = 1"
                },
                {
                    "args": "nat_induct, {P: λn. m * n = 1 ⟷ m = 1 ∧ n = 1, x: n}",
                    "id": "6",
                    "prevs": [
                        "2",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m * n = 1 ⟷ m = 1 ∧ n = 1"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = 1 ⟷ m = 1 ∧ n = 1"
                }
            ],
            "prop": "m * n = 1 ⟷ m = 1 ∧ n = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "one_nonzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "one_nonzero"
                },
                {
                    "goal_id": "3",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "3.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "one_nonzero"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.3.0"
                    ],
                    "goal_id": "3.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.2.0"
                    ],
                    "goal_id": "4.2.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "case": "Suc n = 1",
                    "goal_id": "4.2.2.2",
                    "method_name": "cases"
                },
                {
                    "goal_id": "4.2.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "4.2.2.2.0",
                        "4.2.2.0"
                    ],
                    "goal_id": "4.2.2.2.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "4.2.2.2.1"
                    ],
                    "goal_id": "4.2.2.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "4.2.2.3",
                    "method_name": "introduction"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "depth": 0,
            "name": "Binary representation",
            "ty": "header"
        },
        {
            "name": "bit0",
            "prop": "bit0 n = n + n",
            "ty": "def",
            "type": "nat ⇒ nat"
        },
        {
            "name": "bit1",
            "prop": "bit1 n = n + n + 1",
            "ty": "def",
            "type": "nat ⇒ nat"
        },
        {
            "name": "one_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Suc 1 = 1 + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc 1 = 1 + 1"
                },
                {
                    "args": "bit0_def, Suc 1 = bit0 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 1 = bit0 1"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc 1 = bit0 1"
                }
            ],
            "prop": "Suc 1 = bit0 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "bit0_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "bit0_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Suc (n + n) = n + n + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (n + n) = n + n + 1"
                },
                {
                    "args": "bit1_def, Suc (n + n) = bit1 n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (n + n) = bit1 n"
                },
                {
                    "args": "bit0_def, Suc (bit0 n) = bit1 n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (bit0 n) = bit1 n"
                }
            ],
            "prop": "Suc (bit0 n) = bit1 n",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "bit1_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Suc (n + n + 1) = Suc n + Suc n",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (n + n + 1) = Suc n + Suc n"
                },
                {
                    "args": "bit1_def, Suc (bit1 n) = Suc n + Suc n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (bit1 n) = Suc n + Suc n"
                },
                {
                    "args": "bit0_def, Suc (bit1 n) = bit0 (Suc n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (bit1 n) = bit0 (Suc n)"
                }
            ],
            "prop": "Suc (bit1 n) = bit0 (Suc n)",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit0_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + (n + n) = m + n + (m + n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + (n + n) = m + n + (m + n)"
                },
                {
                    "args": "bit0_def, bit0 m + bit0 n = bit0 (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m + bit0 n = bit0 (m + n)"
                }
            ],
            "prop": "bit0 m + bit0 n = bit0 (m + n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit1_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + (n + n + 1) = m + n + (m + n) + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + (n + n + 1) = m + n + (m + n) + 1"
                },
                {
                    "args": "bit1_def, m + m + bit1 n = bit1 (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m + m + bit1 n = bit1 (m + n)"
                },
                {
                    "args": "bit0_def, bit0 m + bit1 n = bit1 (m + n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m + bit1 n = bit1 (m + n)"
                }
            ],
            "prop": "bit0 m + bit1 n = bit1 (m + n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit0_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + 1 + (n + n) = m + n + (m + n) + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + 1 + (n + n) = m + n + (m + n) + 1"
                },
                {
                    "args": "bit1_def, bit1 m + (n + n) = bit1 (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + (n + n) = bit1 (m + n)"
                },
                {
                    "args": "bit0_def, bit1 m + bit0 n = bit1 (m + n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + bit0 n = bit1 (m + n)"
                }
            ],
            "prop": "bit1 m + bit0 n = bit1 (m + n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit1_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + 1 + (n + n + 1) = Suc (m + n) + Suc (m + n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + 1 + (n + n + 1) = Suc (m + n) + Suc (m + n)"
                },
                {
                    "args": "bit1_def, bit1 m + bit1 n = Suc (m + n) + Suc (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + bit1 n = Suc (m + n) + Suc (m + n)"
                },
                {
                    "args": "bit0_def, bit1 m + bit1 n = bit0 (Suc (m + n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + bit1 n = bit0 (Suc (m + n))"
                }
            ],
            "prop": "bit1 m + bit1 n = bit0 (Suc (m + n))",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit0_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m) * (n + n) = m * n + m * n + (m * n + m * n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m) * (n + n) = m * n + m * n + (m * n + m * n)"
                },
                {
                    "args": "bit0_def, (m + m) * (n + n) = bit0 (m * n) + bit0 (m * n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (m + m) * (n + n) = bit0 (m * n) + bit0 (m * n)"
                },
                {
                    "args": "bit0_def, bit0 m * bit0 n = bit0 (bit0 (m * n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m * bit0 n = bit0 (bit0 (m * n))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ bit0 m * bit0 n = bit0 (bit0 (m * n))"
                }
            ],
            "prop": "bit0 m * bit0 n = bit0 (bit0 (m * n))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "bit0_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "bit0_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit1_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m) * (n + n + 1) = m * (n + n + 1) + m * (n + n + 1)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m) * (n + n + 1) = m * (n + n + 1) + m * (n + n + 1)"
                },
                {
                    "args": "bit1_def, (m + m) * bit1 n = m * bit1 n + m * bit1 n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (m + m) * bit1 n = m * bit1 n + m * bit1 n"
                },
                {
                    "args": "bit0_def, bit0 m * bit1 n = bit0 (m * bit1 n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m * bit1 n = bit0 (m * bit1 n)"
                }
            ],
            "prop": "bit0 m * bit1 n = bit0 (m * bit1 n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit0_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m + 1) * (n + n) = (m + m + 1) * n + (m + m + 1) * n",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m + 1) * (n + n) = (m + m + 1) * n + (m + m + 1) * n"
                },
                {
                    "args": "bit1_def, bit1 m * (n + n) = bit1 m * n + bit1 m * n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * (n + n) = bit1 m * n + bit1 m * n"
                },
                {
                    "args": "bit0_def, bit1 m * bit0 n = bit0 (bit1 m * n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * bit0 n = bit0 (bit1 m * n)"
                }
            ],
            "prop": "bit1 m * bit0 n = bit0 (bit1 m * n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit1_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m + 1) * (n + n + 1) = m + n + (m * n + m * n) + (m + n + (m * n + m * n)) + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m + 1) * (n + n + 1) = m + n + (m * n + m * n) + (m + n + (m * n + m * n)) + 1"
                },
                {
                    "args": "bit1_def, bit1 m * bit1 n = bit1 (m + n + (m * n + m * n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * bit1 n = bit1 (m + n + (m * n + m * n))"
                },
                {
                    "args": "bit0_def, bit1 m * bit1 n = bit1 (m + n + bit0 (m * n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * bit1 n = bit1 (m + n + bit0 (m * n))"
                }
            ],
            "prop": "bit1 m * bit1 n = bit1 (m + n + bit0 (m * n))",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_nonzero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(m = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0) ⊢ bit0 m = 0 ⟶ m = 0"
                },
                {
                    "args": "bit0 m = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "bit0 m = 0 ⊢ bit0 m = 0"
                },
                {
                    "args": "bit0_def",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "bit0 m = 0 ⊢ m + m = 0"
                },
                {
                    "args": "add_is_zero",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "bit0 m = 0 ⊢ m = 0 ∧ m = 0"
                },
                {
                    "args": "conjD1",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "bit0 m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0) ⊢ bit0 m = 0 ⟶ m = 0"
                },
                {
                    "args": "double_neg, ¬¬(bit0 m = 0) ⟶ ¬¬(m = 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0) ⊢ ¬¬(bit0 m = 0) ⟶ ¬¬(m = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ ¬(bit0 m = 0)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ ¬(bit0 m = 0)"
                }
            ],
            "prop": "¬(m = 0) ⟶ ¬(bit0 m = 0)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "bit0_def"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "bit1_nonzero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_zero_Suc_neq, {n: m + m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc (m + m))"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc (m + m) = 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(Suc (m + m) = 0)"
                },
                {
                    "args": "add_1_right, ¬(m + m + 1 = 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(m + m + 1 = 0)"
                },
                {
                    "args": "bit1_def, ¬(bit1 m = 0)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(bit1 m = 0)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(bit1 m = 0)"
                }
            ],
            "prop": "¬(bit1 m = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "bit1_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "bit0_neq",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m = 0) ⟶ ¬(bit0 m = bit0 0)"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "add_0_right, (0::nat) + 0 = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) + 0 = 0"
                },
                {
                    "args": "bit0_def, bit0 0 = 0",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0) ⊢ bit0 0 = 0"
                },
                {
                    "args": "bit0_nonzero",
                    "id": "0.3",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ ¬(bit0 m = 0)"
                },
                {
                    "args": "¬(bit0 m = bit0 0)",
                    "id": "0.4",
                    "prevs": [
                        "0.2",
                        "0.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0) ⊢ ¬(bit0 m = bit0 0)"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ ¬(bit0 m = bit0 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (¬(m = n) ⟶ ¬(bit0 m = bit0 n)) ⟶ ¬(m = Suc n) ⟶ ¬(bit0 m = bit0 (Suc n))"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(m = n) ⟶ ¬(bit0 m = bit0 n)",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = n) ⟶ ¬(bit0 m = bit0 n) ⊢ ¬(m = n) ⟶ ¬(bit0 m = bit0 n)"
                },
                {
                    "args": "¬(m = Suc n)",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = Suc n) ⊢ ¬(m = Suc n)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "¬(m = Suc n), ¬(m = n) ⟶ ¬(bit0 m = bit0 n) ⊢ ¬(bit0 m = bit0 (Suc n))"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (¬(m = n) ⟶ ¬(bit0 m = bit0 n)) ⟶ ¬(m = Suc n) ⟶ ¬(bit0 m = bit0 (Suc n))"
                },
                {
                    "args": "nat_induct, {P: λn. ¬(m = n) ⟶ ¬(bit0 m = bit0 n), x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(m = n) ⟶ ¬(bit0 m = bit0 n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = n) ⟶ ¬(bit0 m = bit0 n)"
                }
            ],
            "prop": "¬(m = n) ⟶ ¬(bit0 m = bit0 n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal": "bit0 0 = 0",
                    "goal_id": "0.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "bit0_def"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "apply_backward_step",
                    "theorem": "bit0_nonzero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_neq",
            "prop": "¬(m = n) ⟶ ¬(bit1 m = bit1 n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit1_neq",
            "prop": "¬(bit0 m = bit1 n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_neq_one",
            "prop": "¬(bit0 m = 1)",
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "bit1_neq_one",
            "prop": "¬(m = 0) ⟶ ¬(bit1 m = 1)",
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "depth": 0,
            "name": "Test of macros",
            "ty": "header"
        },
        {
            "name": "nat_norm_test1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y + (y + z) = y * 2 + (x + z)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x + y + (y + z) = y * 2 + (x + z)"
                }
            ],
            "prop": "x + y + (y + z) = y * 2 + (x + z)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "nat_const_ineq_test1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬((12::nat) = 13)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((12::nat) = 13)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬((12::nat) = 13)"
                }
            ],
            "prop": "¬((12::nat) = 13)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "nat_const_ineq"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "mult_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_left, 1 * n + 1 * n = n + n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * n + 1 * n = n + n"
                },
                {
                    "args": "distrib_r, (1 + 1) * n = n + n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1 + 1) * n = n + n"
                },
                {
                    "args": "nat_of_nat_def, of_nat (1 + 1) * n = n + n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ of_nat (1 + 1) * n = n + n"
                },
                {
                    "args": "bit0_def, 2 * n = n + n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 2 * n = n + n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 2 * n = n + n"
                }
            ],
            "prop": "2 * n = n + n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "bit0_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "nat_of_nat_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_r"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "Sigma",
            "rules": [
                {
                    "prop": "Sigma f 0 = 0"
                },
                {
                    "prop": "Sigma f (Suc n) = Sigma f n + f n"
                }
            ],
            "ty": "def.ind",
            "type": "(nat ⇒ nat) ⇒ nat ⇒ nat"
        },
        {
            "name": "Sigma_plus",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_0_right, (0::nat) = 0 + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) = 0 + 0"
                },
                {
                    "args": "Sigma_def_1, Sigma (λx. f x + g x) 0 = Sigma f 0 + Sigma g 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sigma (λx. f x + g x) 0 = Sigma f 0 + Sigma g 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⟶ Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⊢ Sigma (λx. f x + g x) n = Sigma f n + Sigma g n"
                },
                {
                    "args": "Sigma f n + Sigma g n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Sigma f n + Sigma g n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)"
                },
                {
                    "args": "Sigma (λx. f x + g x) n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⊢ Sigma (λx. f x + g x) n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)"
                },
                {
                    "args": "Sigma_def_2, Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⊢ Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⟶ Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. Sigma (λx. f x + g x) n = Sigma f n + Sigma g n, x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Sigma (λx. f x + g x) n = Sigma f n + Sigma g n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ Sigma (λx. f x + g x) n = Sigma f n + Sigma g n"
                }
            ],
            "prop": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "Sigma_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "Sigma_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "f": "nat ⇒ nat",
                "g": "nat ⇒ nat",
                "n": "nat"
            }
        },
        {
            "name": "less_eq",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a ⇒ 'a ⇒ bool"
        },
        {
            "name": "less",
            "overloaded": true,
            "ty": "def.ax",
            "type": "'a ⇒ 'a ⇒ bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "greater_eq",
            "prop": "m ≥ n ⟷ n ≤ m",
            "ty": "def",
            "type": "'a ⇒ 'a ⇒ bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "greater",
            "prop": "m > n ⟷ n < m",
            "ty": "def",
            "type": "'a ⇒ 'a ⇒ bool"
        },
        {
            "name": "less_eq",
            "rules": [
                {
                    "prop": "m ≤ 0 ⟷ m = 0"
                },
                {
                    "prop": "m ≤ Suc n ⟷ m = Suc n ∨ m ≤ n"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat ⇒ bool"
        },
        {
            "name": "less",
            "rules": [
                {
                    "prop": "m < 0 ⟷ false"
                },
                {
                    "prop": "m < Suc n ⟷ m = n ∨ m < n"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat ⇒ bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lesseq_Suc_less",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ Suc m = 0 ⟶ false"
                },
                {
                    "args": "Suc m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = 0 ⊢ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m = 0 ⊢ ¬false ⟶ ¬(Suc m = 0)"
                },
                {
                    "args": "¬false",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: m}",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc m)"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc m = 0)",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬false, Suc m = 0 ⊢ ¬(Suc m = 0)"
                },
                {
                    "args": "",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.0",
                        "0.1.2"
                    ],
                    "rule": "intros",
                    "th": "Suc m = 0 ⊢ ¬false ⟶ ¬(Suc m = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc m = 0 ⊢ false"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc m = 0 ⟶ false"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ false ⟶ Suc m = 0"
                },
                {
                    "args": "false",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "false ⊢ false"
                },
                {
                    "args": "not_false_res, Suc m = 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "resolve_theorem",
                    "th": "false ⊢ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ false ⟶ Suc m = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ Suc m = 0 ⟷ false"
                },
                {
                    "args": "nat_less_eq_def_1, Suc m ≤ 0 ⟷ false",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc m ≤ 0 ⟷ false"
                },
                {
                    "args": "nat_less_def_1, Suc m ≤ 0 ⟷ m < 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc m ≤ 0 ⟷ m < 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. Suc m ≤ n ⟷ m < n ⟶ Suc m ≤ Suc n ⟷ m < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "Suc m ≤ n ⟷ m < n",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ Suc m ≤ n ⟷ m < n"
                },
                {
                    "args": "",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ Suc m = Suc n ∨ Suc m ≤ n ⟶ m = n ∨ m < n"
                },
                {
                    "args": "Suc m = Suc n ∨ Suc m ≤ n",
                    "id": "5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = Suc n ∨ Suc m ≤ n ⊢ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ Suc m = Suc n ⟶ m = n ∨ m < n"
                },
                {
                    "args": "Suc m = Suc n",
                    "id": "5.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m = Suc n ⊢ Suc m = Suc n"
                },
                {
                    "args": "nat_Suc_inject",
                    "id": "5.2.1.1",
                    "prevs": [
                        "5.2.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc m = Suc n, Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ m = n"
                },
                {
                    "args": "disjI1, {A: m = n, B: m < n}",
                    "id": "5.2.1.2",
                    "prevs": [
                        "5.2.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc m = Suc n, Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "5.2.1.3",
                    "prevs": [
                        "5.2.1.0",
                        "5.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ Suc m = Suc n ⟶ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "5.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ Suc m ≤ n ⟶ m = n ∨ m < n"
                },
                {
                    "args": "Suc m ≤ n",
                    "id": "5.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc m ≤ n ⊢ Suc m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.2.2.1",
                    "prevs": [
                        "5.1",
                        "5.2.2.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "Suc m ≤ n, Suc m ≤ n ⟷ m < n ⊢ m < n"
                },
                {
                    "args": "disjI2, {A: m = n, B: m < n}",
                    "id": "5.2.2.2",
                    "prevs": [
                        "5.2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc m ≤ n, Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "5.2.2.3",
                    "prevs": [
                        "5.2.2.0",
                        "5.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ Suc m ≤ n ⟶ m = n ∨ m < n"
                },
                {
                    "args": "disjE",
                    "id": "5.2.3",
                    "prevs": [
                        "5.2.0",
                        "5.2.1",
                        "5.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc m ≤ n ⟷ m < n, Suc m = Suc n ∨ Suc m ≤ n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "5.2.4",
                    "prevs": [
                        "5.2.0",
                        "5.2.3"
                    ],
                    "rule": "intros",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ Suc m = Suc n ∨ Suc m ≤ n ⟶ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ m = n ∨ m < n ⟶ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "m = n ∨ m < n",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ∨ m < n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "5.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ m = n ⟶ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "m = n",
                    "id": "5.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "Suc m = Suc n",
                    "id": "5.3.1.1",
                    "prevs": [
                        "5.3.1.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n ⊢ Suc m = Suc n"
                },
                {
                    "args": "disjI1, {A: Suc m = Suc n, B: Suc m ≤ n}",
                    "id": "5.3.1.2",
                    "prevs": [
                        "5.3.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = n, m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3.1.3",
                    "prevs": [
                        "5.3.1.0",
                        "5.3.1.2"
                    ],
                    "rule": "intros",
                    "th": "m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ m = n ⟶ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ m < n ⟶ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "m < n",
                    "id": "5.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "Suc m ≤ n",
                    "id": "5.3.2.1",
                    "prevs": [
                        "5.1",
                        "5.3.2.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < n, m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ Suc m ≤ n"
                },
                {
                    "args": "disjI2, {A: Suc m = Suc n, B: Suc m ≤ n}",
                    "id": "5.3.2.2",
                    "prevs": [
                        "5.3.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < n, m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3.2.3",
                    "prevs": [
                        "5.3.2.0",
                        "5.3.2.2"
                    ],
                    "rule": "intros",
                    "th": "m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ m < n ⟶ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "5.3.3",
                    "prevs": [
                        "5.3.0",
                        "5.3.1",
                        "5.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = n ∨ m < n, Suc m ≤ n ⟷ m < n ⊢ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3.4",
                    "prevs": [
                        "5.3.0",
                        "5.3.3"
                    ],
                    "rule": "intros",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ m = n ∨ m < n ⟶ Suc m = Suc n ∨ Suc m ≤ n"
                },
                {
                    "args": "iffI",
                    "id": "5.4",
                    "prevs": [
                        "5.2",
                        "5.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ Suc m = Suc n ∨ Suc m ≤ n ⟷ m = n ∨ m < n"
                },
                {
                    "args": "nat_less_eq_def_2, Suc m ≤ Suc n ⟷ m = n ∨ m < n",
                    "id": "5.5",
                    "prevs": [
                        "5.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ Suc m ≤ Suc n ⟷ m = n ∨ m < n"
                },
                {
                    "args": "nat_less_def_2, Suc m ≤ Suc n ⟷ m < Suc n",
                    "id": "5.6",
                    "prevs": [
                        "5.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc m ≤ n ⟷ m < n ⊢ Suc m ≤ Suc n ⟷ m < Suc n"
                },
                {
                    "args": "",
                    "id": "5.7",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. Suc m ≤ n ⟷ m < n ⟶ Suc m ≤ Suc n ⟷ m < Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. Suc m ≤ n ⟷ m < n, x: n}",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Suc m ≤ n ⟷ m < n"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc m ≤ n ⟷ m < n"
                }
            ],
            "prop": "Suc m ≤ n ⟷ m < n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.0"
                    ],
                    "goal_id": "5.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "5.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "5.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_Suc_inject"
                },
                {
                    "goal_id": "5.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "5.1",
                        "5.2.2.0"
                    ],
                    "goal_id": "5.2.2.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.0"
                    ],
                    "goal_id": "5.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "5.3.1.0"
                    ],
                    "goal_id": "5.3.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.3.2.1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "less_Suc_lesseq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ∨ false ⟶ m = 0"
                },
                {
                    "args": "m = 0 ∨ false",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ false ⊢ m = 0 ∨ false"
                },
                {
                    "args": "m = 0 ⟶ m = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m = 0 ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ∨ false ⊢ false ⟶ m = 0"
                },
                {
                    "args": "false",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "false ⊢ false"
                },
                {
                    "args": "not_false_res, m = 0",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "resolve_theorem",
                    "th": "false ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.0",
                        "0.2.1"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ∨ false ⊢ false ⟶ m = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ∨ false ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ∨ false ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ m = 0 ∨ false"
                },
                {
                    "args": "m = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "disjI1, {A: m = 0, B: false}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0 ⊢ m = 0 ∨ false"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ m = 0 ∨ false"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m = 0 ∨ false ⟷ m = 0"
                },
                {
                    "args": "nat_less_def_1, m = 0 ∨ m < 0 ⟷ m = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m = 0 ∨ m < 0 ⟷ m = 0"
                },
                {
                    "args": "nat_less_def_2, m < Suc 0 ⟷ m = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m < Suc 0 ⟷ m = 0"
                },
                {
                    "args": "nat_less_eq_def_1, m < Suc 0 ⟷ m ≤ 0",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m < Suc 0 ⟷ m ≤ 0"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m < Suc n ⟷ m ≤ n ⟶ m < Suc (Suc n) ⟷ m ≤ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m < Suc n ⟷ m ≤ n",
                    "id": "6.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m < Suc n ⟷ m ≤ n"
                },
                {
                    "args": "",
                    "id": "6.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m = Suc n ∨ m < Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "m = Suc n ∨ m < Suc n",
                    "id": "6.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ∨ m < Suc n ⊢ m = Suc n ∨ m < Suc n"
                },
                {
                    "args": "",
                    "id": "6.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m = Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "m = Suc n",
                    "id": "6.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "disjI1, {A: m = Suc n, B: m ≤ n}",
                    "id": "6.2.1.1",
                    "prevs": [
                        "6.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n",
                    "id": "6.2.1.2",
                    "prevs": [
                        "6.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = Suc n, m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "6.2.1.3",
                    "prevs": [
                        "6.2.1.0",
                        "6.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m = Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "6.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m ≤ n ⟶ m ≤ Suc n"
                },
                {
                    "args": "m ≤ n",
                    "id": "6.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "disjI2, {A: m = Suc n, B: m ≤ n}",
                    "id": "6.2.2.1",
                    "prevs": [
                        "6.2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n",
                    "id": "6.2.2.2",
                    "prevs": [
                        "6.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "6.2.2.3",
                    "prevs": [
                        "6.2.2.0",
                        "6.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m ≤ n ⟶ m ≤ Suc n"
                },
                {
                    "args": "m < Suc n ⟶ m ≤ Suc n",
                    "id": "6.2.3",
                    "prevs": [
                        "6.1",
                        "6.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m < Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "disjE",
                    "id": "6.2.4",
                    "prevs": [
                        "6.2.0",
                        "6.2.1",
                        "6.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < Suc n ⟷ m ≤ n, m = Suc n ∨ m < Suc n ⊢ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "6.2.5",
                    "prevs": [
                        "6.2.0",
                        "6.2.4"
                    ],
                    "rule": "intros",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m = Suc n ∨ m < Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "m = Suc n ∨ m ≤ n ⟶ m = Suc n ∨ m ≤ n",
                    "id": "6.3",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m = Suc n ∨ m ≤ n ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "m = Suc n ∨ m ≤ n ⟶ m = Suc n ∨ m < Suc n",
                    "id": "6.4",
                    "prevs": [
                        "6.1",
                        "6.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m = Suc n ∨ m ≤ n ⟶ m = Suc n ∨ m < Suc n"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n ⟶ m = Suc n ∨ m < Suc n",
                    "id": "6.5",
                    "prevs": [
                        "6.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m ≤ Suc n ⟶ m = Suc n ∨ m < Suc n"
                },
                {
                    "args": "iffI",
                    "id": "6.6",
                    "prevs": [
                        "6.2",
                        "6.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m = Suc n ∨ m < Suc n ⟷ m ≤ Suc n"
                },
                {
                    "args": "nat_less_def_2, m < Suc (Suc n) ⟷ m ≤ Suc n",
                    "id": "6.7",
                    "prevs": [
                        "6.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < Suc n ⟷ m ≤ n ⊢ m < Suc (Suc n) ⟷ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "6.8",
                    "prevs": [
                        "6.0",
                        "6.1",
                        "6.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m < Suc n ⟷ m ≤ n ⟶ m < Suc (Suc n) ⟷ m ≤ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m < Suc n ⟷ m ≤ n, x: n}",
                    "id": "7",
                    "prevs": [
                        "5",
                        "6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m < Suc n ⟷ m ≤ n"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < Suc n ⟷ m ≤ n"
                }
            ],
            "prop": "m < Suc n ⟷ m ≤ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.2.0"
                    ],
                    "goal_id": "6.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "6.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "6.1"
                    ],
                    "goal_id": "6.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "6.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "6.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "6.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "fact_ids": [
                        "6.1"
                    ],
                    "goal_id": "6.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "less_Suc_lesseq, m < Suc n ⟷ m ≤ n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m < Suc n ⟷ m ≤ n"
                },
                {
                    "args": "lesseq_Suc_less, Suc m ≤ Suc n ⟷ m ≤ n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc m ≤ Suc n ⟷ m ≤ n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc m ≤ Suc n ⟷ m ≤ n"
                }
            ],
            "prop": "Suc m ≤ Suc n ⟷ m ≤ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lt_suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "lesseq_Suc_less, Suc m ≤ n ⟷ m < n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc m ≤ n ⟷ m < n"
                },
                {
                    "args": "less_Suc_lesseq, Suc m < Suc n ⟷ m < n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc m < Suc n ⟷ m < n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc m < Suc n ⟷ m < n"
                }
            ],
            "prop": "Suc m < Suc n ⟷ m < n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "lt_imp_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m < 0 ⟶ m ≤ 0"
                },
                {
                    "args": "m < 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < 0 ⊢ m < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < 0 ⊢ false"
                },
                {
                    "args": "not_false_res, m ≤ 0",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "resolve_theorem",
                    "th": "m < 0 ⊢ m ≤ 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < 0 ⟶ m ≤ 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (m < n ⟶ m ≤ n) ⟶ m < Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m < n ⟶ m ≤ n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⟶ m ≤ n ⊢ m < n ⟶ m ≤ n"
                },
                {
                    "args": "m < Suc n",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ⊢ m < Suc n"
                },
                {
                    "args": "less_Suc_lesseq",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < Suc n ⊢ m ≤ n"
                },
                {
                    "args": "disjI2, {A: m = Suc n, B: m ≤ n}",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < Suc n, m < n ⟶ m ≤ n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < Suc n, m < n ⟶ m ≤ n ⊢ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (m < n ⟶ m ≤ n) ⟶ m < Suc n ⟶ m ≤ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m < n ⟶ m ≤ n, x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m < n ⟶ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ⟶ m ≤ n"
                }
            ],
            "prop": "m < n ⟶ m ≤ n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "le_1_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ (0::nat) < 0"
                },
                {
                    "args": "¬((0::nat) = 0)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "negE_gen, {A: (0::nat) = 0, C: (0::nat) < 0}",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬((0::nat) = 0) ⊢ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (¬(n = 0) ⟶ 0 < n) ⟶ ¬(Suc n = 0) ⟶ 0 < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(n = 0) ⟶ 0 < n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⟶ 0 < n ⊢ ¬(n = 0) ⟶ 0 < n"
                },
                {
                    "args": "¬(Suc n = 0)",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ n = 0 ⟶ 0 ≤ n"
                },
                {
                    "args": "n = 0",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "nat_less_eq_def_1, (0::nat) ≤ 0",
                    "id": "1.3.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) ≤ 0"
                },
                {
                    "args": "0 ≤ n",
                    "id": "1.3.2",
                    "prevs": [
                        "1.3.0",
                        "1.3.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, ¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ 0 ≤ n"
                },
                {
                    "args": "",
                    "id": "1.3.3",
                    "prevs": [
                        "1.3.0",
                        "1.3.2"
                    ],
                    "rule": "intros",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ n = 0 ⟶ 0 ≤ n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ ¬(n = 0) ⟶ 0 ≤ n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1.4.1",
                    "prevs": [
                        "1.1",
                        "1.4.0"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(n = 0), ¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ 0 < n"
                },
                {
                    "args": "lt_imp_le",
                    "id": "1.4.2",
                    "prevs": [
                        "1.4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ 0 ≤ n"
                },
                {
                    "args": "",
                    "id": "1.4.3",
                    "prevs": [
                        "1.4.0",
                        "1.4.2"
                    ],
                    "rule": "intros",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ ¬(n = 0) ⟶ 0 ≤ n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ 0 ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, 0 < Suc n",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ 0 < n ⊢ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (¬(n = 0) ⟶ 0 < n) ⟶ ¬(Suc n = 0) ⟶ 0 < Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. ¬(n = 0) ⟶ 0 < n, x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(n = 0) ⟶ 0 < n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 < n"
                }
            ],
            "prop": "¬(n = 0) ⟶ 0 < n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "case": "n = 0",
                    "goal_id": "1.3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.3.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.4.1",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "le_1_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 0 < n"
                },
                {
                    "args": "lesseq_Suc_less, Suc 0 ≤ n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ Suc 0 ≤ n"
                },
                {
                    "args": "nat_one_def, 1 ≤ n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ 1 ≤ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 1 ≤ n"
                }
            ],
            "prop": "¬(n = 0) ⟶ 1 ≤ n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "less_eq_exist",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ (∃p. 0 = m + p)"
                },
                {
                    "args": "m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "nat_plus_def_1, (0::nat) = 0 + 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) = 0 + 0"
                },
                {
                    "args": "0 = m + 0",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0 ⊢ 0 = m + 0"
                },
                {
                    "args": "exI, {P: λp. 0 = m + p, a: (0::nat)}",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0 ⊢ ∃a1. 0 = m + a1"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ (∃p. 0 = m + p)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃p. 0 = m + p) ⟶ m = 0"
                },
                {
                    "args": "∃p. 0 = m + p",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃p. 0 = m + p ⊢ ∃p. 0 = m + p"
                },
                {
                    "args": "p, nat",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "0 = m + p",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = m + p ⊢ 0 = m + p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = m + p ⊢ m + p = 0"
                },
                {
                    "args": "add_is_zero",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = m + p ⊢ m = 0 ∧ p = 0"
                },
                {
                    "args": "conjD1",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = m + p ⊢ m = 0"
                },
                {
                    "args": "∃p. 0 = m + p",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃p. 0 = m + p) ⟶ m = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m = 0 ⟷ (∃p. 0 = m + p)"
                },
                {
                    "args": "nat_less_eq_def_1, m ≤ 0 ⟷ (∃p. 0 = m + p)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ≤ 0 ⟷ (∃p. 0 = m + p)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ≤ n ⟷ (∃p. n = m + p) ⟶ m ≤ Suc n ⟷ (∃p. Suc n = m + p)"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ≤ n ⟷ (∃p. n = m + p)",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ m ≤ n ⟷ (∃p. n = m + p)"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n ∨ m ≤ n ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "m = Suc n ∨ m ≤ n",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ∨ m ≤ n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "m = Suc n",
                    "id": "4.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "add_0_right, Suc n = Suc n + 0",
                    "id": "4.2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc n = Suc n + 0"
                },
                {
                    "args": "Suc n = m + 0",
                    "id": "4.2.1.2",
                    "prevs": [
                        "4.2.1.0",
                        "4.2.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = Suc n, m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ Suc n = m + 0"
                },
                {
                    "args": "exI, {P: λp. Suc n = m + p, a: (0::nat)}",
                    "id": "4.2.1.3",
                    "prevs": [
                        "4.2.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ ∃a1. Suc n = m + a1"
                },
                {
                    "args": "",
                    "id": "4.2.1.4",
                    "prevs": [
                        "4.2.1.0",
                        "4.2.1.3"
                    ],
                    "rule": "intros",
                    "th": "m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ (∃p. n = m + p) ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "∃p. n = m + p",
                    "id": "4.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃p. n = m + p ⊢ ∃p. n = m + p"
                },
                {
                    "args": "p, nat",
                    "id": "4.2.2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m + p",
                    "id": "4.2.2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + p ⊢ n = m + p"
                },
                {
                    "args": "add_Suc_right, Suc (m + p) = m + Suc p",
                    "id": "4.2.2.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (m + p) = m + Suc p"
                },
                {
                    "args": "Suc n = m + Suc p",
                    "id": "4.2.2.4",
                    "prevs": [
                        "4.2.2.2",
                        "4.2.2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m + p, ∃p. n = m + p, m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ Suc n = m + Suc p"
                },
                {
                    "args": "exI, {P: λp. Suc n = m + p, a: Suc p}",
                    "id": "4.2.2.5",
                    "prevs": [
                        "4.2.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = m + p, ∃p. n = m + p, m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ ∃a1. Suc n = m + a1"
                },
                {
                    "args": "∃p. n = m + p",
                    "id": "4.2.2.6",
                    "prevs": [
                        "4.2.2.0",
                        "4.2.2.0",
                        "4.2.2.1",
                        "4.2.2.2",
                        "4.2.2.5"
                    ],
                    "rule": "intros",
                    "th": "m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ (∃p. n = m + p) ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "m ≤ n ⟶ (∃p. Suc n = m + p)",
                    "id": "4.2.3",
                    "prevs": [
                        "4.1",
                        "4.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ m ≤ n ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "disjE",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.0",
                        "4.2.1",
                        "4.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = Suc n ∨ m ≤ n, m ≤ n ⟷ (∃p. n = m + p) ⊢ ∃p. Suc n = m + p"
                },
                {
                    "args": "",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.0",
                        "4.2.4"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n ∨ m ≤ n ⟶ (∃p. Suc n = m + p)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ (∃p. Suc n = m + p) ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "∃p. Suc n = m + p",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃p. Suc n = m + p ⊢ ∃p. Suc n = m + p"
                },
                {
                    "args": "p, nat",
                    "id": "4.3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "",
                    "id": "4.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ Suc n = m + 0 ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "Suc n = m + 0",
                    "id": "4.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = m + 0 ⊢ Suc n = m + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "4.3.2.1",
                    "prevs": [
                        "4.3.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n = m + 0 ⊢ Suc n = m"
                },
                {
                    "args": "eq_sym_eq, m = Suc n",
                    "id": "4.3.2.2",
                    "prevs": [
                        "4.3.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc n = m + 0, ∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n"
                },
                {
                    "args": "disjI1, {A: m = Suc n, B: m ≤ n}",
                    "id": "4.3.2.3",
                    "prevs": [
                        "4.3.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = m + 0, ∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4.3.2.4",
                    "prevs": [
                        "4.3.2.0",
                        "4.3.2.3"
                    ],
                    "rule": "intros",
                    "th": "∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ Suc n = m + 0 ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4.3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ ∀n1. (Suc n = m + n1 ⟶ m = Suc n ∨ m ≤ n) ⟶ Suc n = m + Suc n1 ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "Suc n = m + p ⟶ m = Suc n ∨ m ≤ n",
                    "id": "4.3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = m + p ⟶ m = Suc n ∨ m ≤ n ⊢ Suc n = m + p ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "Suc n = m + Suc p",
                    "id": "4.3.3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = m + Suc p ⊢ Suc n = m + Suc p"
                },
                {
                    "args": "add_Suc_right",
                    "id": "4.3.3.2",
                    "prevs": [
                        "4.3.3.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n = m + Suc p ⊢ Suc n = Suc (m + p)"
                },
                {
                    "args": "nat_Suc_inject",
                    "id": "4.3.3.3",
                    "prevs": [
                        "4.3.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = m + Suc p, ∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p), Suc n = m + p ⟶ m = Suc n ∨ m ≤ n ⊢ n = m + p"
                },
                {
                    "args": "exI, {P: λp. n = m + p, a: p}",
                    "id": "4.3.3.4",
                    "prevs": [
                        "4.3.3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = m + Suc p, ∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p), Suc n = m + p ⟶ m = Suc n ∨ m ≤ n ⊢ ∃a1. n = m + a1"
                },
                {
                    "args": "m ≤ n",
                    "id": "4.3.3.5",
                    "prevs": [
                        "4.1",
                        "4.3.3.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Suc n = m + Suc p, ∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p), Suc n = m + p ⟶ m = Suc n ∨ m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "disjI2, {A: m = Suc n, B: m ≤ n}",
                    "id": "4.3.3.6",
                    "prevs": [
                        "4.3.3.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = m + Suc p, ∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p), Suc n = m + p ⟶ m = Suc n ∨ m ≤ n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4.3.3.7",
                    "prevs": [
                        "4.3.1",
                        "4.3.3.0",
                        "4.3.3.1",
                        "4.3.3.6"
                    ],
                    "rule": "intros",
                    "th": "∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ ∀p. (Suc n = m + p ⟶ m = Suc n ∨ m ≤ n) ⟶ Suc n = m + Suc p ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "nat_induct, {P: λp. Suc n = m + p ⟶ m = Suc n ∨ m ≤ n, x: p}",
                    "id": "4.3.4",
                    "prevs": [
                        "4.3.2",
                        "4.3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "∃p. Suc n = m + p, m ≤ n ⟷ (∃p. n = m + p) ⊢ Suc n = m + p ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "∃p. Suc n = m + p",
                    "id": "4.3.5",
                    "prevs": [
                        "4.3.0",
                        "4.3.0",
                        "4.3.1",
                        "4.3.4"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ (∃p. Suc n = m + p) ⟶ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "iffI",
                    "id": "4.4",
                    "prevs": [
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ m = Suc n ∨ m ≤ n ⟷ (∃p. Suc n = m + p)"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n ⟷ (∃p. Suc n = m + p)",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ⟷ (∃p. n = m + p) ⊢ m ≤ Suc n ⟷ (∃p. Suc n = m + p)"
                },
                {
                    "args": "",
                    "id": "4.6",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ≤ n ⟷ (∃p. n = m + p) ⟶ m ≤ Suc n ⟷ (∃p. Suc n = m + p)"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ n ⟷ (∃p. n = m + p), x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ n ⟷ (∃p. n = m + p)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟷ (∃p. n = m + p)"
                }
            ],
            "prop": "m ≤ n ⟷ (∃p. n = m + p)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "fact_ids": [
                        "4.2.1.0"
                    ],
                    "goal_id": "4.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.2.0"
                    ],
                    "goal_id": "4.2.2.1",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "goal_id": "4.2.2.3",
                    "method_name": "inst_exists_goal",
                    "s": "Suc p"
                },
                {
                    "fact_ids": [
                        "4.2.2.2"
                    ],
                    "goal_id": "4.2.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2.2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "4.3.2"
                    ],
                    "goal_id": "4.3.3",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "4.3.2",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "p"
                },
                {
                    "goal_id": "4.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "4.3.2.0"
                    ],
                    "goal_id": "4.3.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "4.3.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4.3.3",
                    "method_name": "introduction",
                    "names": "p"
                },
                {
                    "goal_id": "4.3.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "4.3.3.1"
                    ],
                    "goal_id": "4.3.3.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.3.3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.3.3",
                    "method_name": "inst_exists_goal",
                    "s": "p"
                },
                {
                    "goal_id": "4.3.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_Suc_inject"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "less_exist",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m < 0 ⟶ (∃d. 0 = m + Suc d)"
                },
                {
                    "args": "m < 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < 0 ⊢ m < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < 0 ⊢ false"
                },
                {
                    "args": "not_false_res, ∃d. 0 = m + Suc d",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "resolve_theorem",
                    "th": "m < 0 ⊢ ∃d. 0 = m + Suc d"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < 0 ⟶ (∃d. 0 = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃d. 0 = m + Suc d) ⟶ m < 0"
                },
                {
                    "args": "∃d. 0 = m + Suc d",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. 0 = m + Suc d ⊢ ∃d. 0 = m + Suc d"
                },
                {
                    "args": "d, nat",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "0 = m + Suc d",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = m + Suc d ⊢ 0 = m + Suc d"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = m + Suc d ⊢ m + Suc d = 0"
                },
                {
                    "args": "add_is_zero",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = m + Suc d ⊢ m = 0 ∧ Suc d = 0"
                },
                {
                    "args": "conjD2",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = m + Suc d ⊢ Suc d = 0"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 = m + Suc d, ∃d. 0 = m + Suc d ⊢ ¬(m < 0) ⟶ ¬(Suc d = 0)"
                },
                {
                    "args": "¬(m < 0)",
                    "id": "1.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m < 0) ⊢ ¬(m < 0)"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: d}",
                    "id": "1.6.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc d)"
                },
                {
                    "args": "ineq_sym",
                    "id": "1.6.2",
                    "prevs": [
                        "1.6.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m < 0), 0 = m + Suc d, ∃d. 0 = m + Suc d ⊢ ¬(Suc d = 0)"
                },
                {
                    "args": "",
                    "id": "1.6.3",
                    "prevs": [
                        "1.6.0",
                        "1.6.2"
                    ],
                    "rule": "intros",
                    "th": "0 = m + Suc d, ∃d. 0 = m + Suc d ⊢ ¬(m < 0) ⟶ ¬(Suc d = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.7",
                    "prevs": [
                        "1.5",
                        "1.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = m + Suc d, ∃d. 0 = m + Suc d ⊢ m < 0"
                },
                {
                    "args": "∃d. 0 = m + Suc d",
                    "id": "1.8",
                    "prevs": [
                        "1.0",
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃d. 0 = m + Suc d) ⟶ m < 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m < 0 ⟷ (∃d. 0 = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m < n ⟷ (∃d. n = m + Suc d) ⟶ m < Suc n ⟷ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m < n ⟷ (∃d. n = m + Suc d)",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ m < n ⟷ (∃d. n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ∨ (∃d. n = m + Suc d) ⟶ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "m = n ∨ (∃d. n = m + Suc d)",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ∨ (∃d. n = m + Suc d) ⊢ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ⟶ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "m = n",
                    "id": "3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "add_0_right, Suc n = Suc (n + 0)",
                    "id": "3.2.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc n = Suc (n + 0)"
                },
                {
                    "args": "add_Suc_right, Suc n = n + Suc 0",
                    "id": "3.2.1.2",
                    "prevs": [
                        "3.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = n, m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ Suc n = n + Suc 0"
                },
                {
                    "args": "exI, {P: λd. Suc n = n + Suc d, a: (0::nat)}",
                    "id": "3.2.1.3",
                    "prevs": [
                        "3.2.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = n, m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ ∃a1. Suc n = n + Suc a1"
                },
                {
                    "args": "∃d. Suc n = m + Suc d",
                    "id": "3.2.1.4",
                    "prevs": [
                        "3.2.1.0",
                        "3.2.1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n, m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ ∃d. Suc n = m + Suc d"
                },
                {
                    "args": "",
                    "id": "3.2.1.5",
                    "prevs": [
                        "3.2.1.0",
                        "3.2.1.4"
                    ],
                    "rule": "intros",
                    "th": "m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ⟶ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ (∃d. n = m + Suc d) ⟶ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "∃d. n = m + Suc d",
                    "id": "3.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. n = m + Suc d ⊢ ∃d. n = m + Suc d"
                },
                {
                    "args": "d, nat",
                    "id": "3.2.2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "n = m + Suc d",
                    "id": "3.2.2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + Suc d ⊢ n = m + Suc d"
                },
                {
                    "args": "Suc (m + Suc d) = m + Suc (Suc d)",
                    "id": "3.2.2.3",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (m + Suc d) = m + Suc (Suc d)"
                },
                {
                    "args": "Suc n = m + Suc (Suc d)",
                    "id": "3.2.2.4",
                    "prevs": [
                        "3.2.2.2",
                        "3.2.2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m + Suc d, ∃d. n = m + Suc d, m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ Suc n = m + Suc (Suc d)"
                },
                {
                    "args": "exI, {P: λd. Suc n = m + Suc d, a: Suc d}",
                    "id": "3.2.2.5",
                    "prevs": [
                        "3.2.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = m + Suc d, ∃d. n = m + Suc d, m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ ∃a1. Suc n = m + Suc a1"
                },
                {
                    "args": "∃d. n = m + Suc d",
                    "id": "3.2.2.6",
                    "prevs": [
                        "3.2.2.0",
                        "3.2.2.0",
                        "3.2.2.1",
                        "3.2.2.2",
                        "3.2.2.5"
                    ],
                    "rule": "intros",
                    "th": "m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ (∃d. n = m + Suc d) ⟶ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "disjE",
                    "id": "3.2.3",
                    "prevs": [
                        "3.2.0",
                        "3.2.1",
                        "3.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = n ∨ (∃d. n = m + Suc d), m < n ⟷ (∃d. n = m + Suc d) ⊢ ∃d. Suc n = m + Suc d"
                },
                {
                    "args": "",
                    "id": "3.2.4",
                    "prevs": [
                        "3.2.0",
                        "3.2.3"
                    ],
                    "rule": "intros",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ∨ (∃d. n = m + Suc d) ⟶ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ (∃d. Suc n = m + Suc d) ⟶ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "∃d. Suc n = m + Suc d",
                    "id": "3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. Suc n = m + Suc d ⊢ ∃d. Suc n = m + Suc d"
                },
                {
                    "args": "d, nat",
                    "id": "3.3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "",
                    "id": "3.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ Suc n = m + Suc 0 ⟶ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "Suc n = m + Suc 0",
                    "id": "3.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = m + Suc 0 ⊢ Suc n = m + Suc 0"
                },
                {
                    "args": "add_Suc_right",
                    "id": "3.3.2.1",
                    "prevs": [
                        "3.3.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n = m + Suc 0 ⊢ Suc n = Suc (m + 0)"
                },
                {
                    "args": "add_0_right",
                    "id": "3.3.2.2",
                    "prevs": [
                        "3.3.2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n = m + Suc 0 ⊢ Suc n = Suc m"
                },
                {
                    "args": "eq_sym_eq, Suc m = Suc n",
                    "id": "3.3.2.3",
                    "prevs": [
                        "3.3.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc n = m + Suc 0, ∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ Suc m = Suc n"
                },
                {
                    "args": "nat_Suc_inject",
                    "id": "3.3.2.4",
                    "prevs": [
                        "3.3.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = m + Suc 0, ∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n"
                },
                {
                    "args": "disjI1, {A: m = n, B: ∃d. n = m + Suc d}",
                    "id": "3.3.2.5",
                    "prevs": [
                        "3.3.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = m + Suc 0, ∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.3.2.6",
                    "prevs": [
                        "3.3.2.0",
                        "3.3.2.5"
                    ],
                    "rule": "intros",
                    "th": "∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ Suc n = m + Suc 0 ⟶ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ ∀n1. (Suc n = m + Suc n1 ⟶ m = n ∨ (∃d. n = m + Suc d)) ⟶ Suc n = m + Suc (Suc n1) ⟶ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1)",
                    "id": "3.3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1) ⊢ Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1)"
                },
                {
                    "args": "Suc n = m + Suc (Suc d)",
                    "id": "3.3.3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = m + Suc (Suc d) ⊢ Suc n = m + Suc (Suc d)"
                },
                {
                    "args": "add_Suc_right",
                    "id": "3.3.3.2",
                    "prevs": [
                        "3.3.3.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Suc n = m + Suc (Suc d) ⊢ Suc n = Suc (m + Suc d)"
                },
                {
                    "args": "nat_Suc_inject",
                    "id": "3.3.3.3",
                    "prevs": [
                        "3.3.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = m + Suc (Suc d), ∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d), Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1) ⊢ n = m + Suc d"
                },
                {
                    "args": "exI, {P: λd. n = m + Suc d, a: d}",
                    "id": "3.3.3.4",
                    "prevs": [
                        "3.3.3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = m + Suc (Suc d), ∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d), Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1) ⊢ ∃a1. n = m + Suc a1"
                },
                {
                    "args": "disjI2, {A: m = n, B: ∃d. n = m + Suc d}",
                    "id": "3.3.3.5",
                    "prevs": [
                        "3.3.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = m + Suc (Suc d), ∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d), Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1) ⊢ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.3.3.6",
                    "prevs": [
                        "3.3.1",
                        "3.3.3.0",
                        "3.3.3.1",
                        "3.3.3.5"
                    ],
                    "rule": "intros",
                    "th": "∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ ∀d. (Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1)) ⟶ Suc n = m + Suc (Suc d) ⟶ m = n ∨ (∃d1. n = m + Suc d1)"
                },
                {
                    "args": "nat_induct, {P: λd. Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1), x: d}",
                    "id": "3.3.4",
                    "prevs": [
                        "3.3.2",
                        "3.3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "∃d. Suc n = m + Suc d, m < n ⟷ (∃d. n = m + Suc d) ⊢ Suc n = m + Suc d ⟶ m = n ∨ (∃d1. n = m + Suc d1)"
                },
                {
                    "args": "∃d. Suc n = m + Suc d",
                    "id": "3.3.5",
                    "prevs": [
                        "3.3.0",
                        "3.3.0",
                        "3.3.1",
                        "3.3.4"
                    ],
                    "rule": "intros",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ (∃d. Suc n = m + Suc d) ⟶ m = n ∨ (∃d. n = m + Suc d)"
                },
                {
                    "args": "iffI",
                    "id": "3.4",
                    "prevs": [
                        "3.2",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ∨ (∃d. n = m + Suc d) ⟷ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "m = n ∨ m < n ⟷ (∃d. Suc n = m + Suc d)",
                    "id": "3.5",
                    "prevs": [
                        "3.1",
                        "3.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ m = n ∨ m < n ⟷ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "nat_less_def_2, m < Suc n ⟷ (∃d. Suc n = m + Suc d)",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n ⟷ (∃d. n = m + Suc d) ⊢ m < Suc n ⟷ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m < n ⟷ (∃d. n = m + Suc d) ⟶ m < Suc n ⟷ (∃d. Suc n = m + Suc d)"
                },
                {
                    "args": "nat_induct, {P: λn. m < n ⟷ (∃d. n = m + Suc d), x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m < n ⟷ (∃d. n = m + Suc d)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ⟷ (∃d. n = m + Suc d)"
                }
            ],
            "prop": "m < n ⟷ (∃d. n = m + Suc d)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.5"
                    ],
                    "goal_id": "1.6",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.6",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.6.1",
                    "method_name": "apply_backward_step",
                    "theorem": "ineq_sym"
                },
                {
                    "goal_id": "1.6.1",
                    "method_name": "apply_forward_step",
                    "param_n": "d",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.1.0"
                    ],
                    "goal_id": "3.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.1.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "3.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "3.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "3.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.2.0"
                    ],
                    "goal_id": "3.2.2.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "goal_id": "3.2.2.3",
                    "method_name": "inst_exists_goal",
                    "s": "Suc d"
                },
                {
                    "fact_ids": [
                        "3.2.2.2"
                    ],
                    "goal_id": "3.2.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.2.3",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.3.0"
                    ],
                    "goal_id": "3.3.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "3.3.2"
                    ],
                    "goal_id": "3.3.3",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "3.3.2",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "d"
                },
                {
                    "goal_id": "3.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "3.3.2.0"
                    ],
                    "goal_id": "3.3.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "fact_ids": [
                        "3.3.2.1"
                    ],
                    "goal_id": "3.3.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "3.3.2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_Suc_inject"
                },
                {
                    "goal_id": "3.3.2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "3.3.3",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "goal_id": "3.3.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "3.3.3.2",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "fact_ids": [
                        "3.3.3.1"
                    ],
                    "goal_id": "3.3.3.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "3.3.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_Suc_inject"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "less_lesseq",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m < n ⟶ m ≤ n ∧ ¬(m = n)"
                },
                {
                    "args": "m < n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "lt_imp_le",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n ⊢ ¬¬(m = n) ⟶ ¬(m < n)"
                },
                {
                    "args": "¬¬(m = n)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(m = n) ⊢ ¬¬(m = n)"
                },
                {
                    "args": "double_neg",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(m = n) ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n, ¬¬(m = n) ⊢ n < n ⟶ false"
                },
                {
                    "args": "n < n",
                    "id": "0.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < n ⊢ n < n"
                },
                {
                    "args": "false",
                    "id": "0.2.2.1",
                    "prevs": [
                        "0.2.2.0"
                    ],
                    "rule": "z3",
                    "th": "n < n ⊢ false"
                },
                {
                    "args": "",
                    "id": "0.2.2.2",
                    "prevs": [
                        "0.2.2.0",
                        "0.2.2.1"
                    ],
                    "rule": "intros",
                    "th": "m < n, ¬¬(m = n) ⊢ n < n ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, ¬¬(m = n) ⊢ ¬(n < n)"
                },
                {
                    "args": "¬(m < n)",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.1",
                        "0.2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < n, ¬¬(m = n) ⊢ ¬(m < n)"
                },
                {
                    "args": "",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.0",
                        "0.2.4"
                    ],
                    "rule": "intros",
                    "th": "m < n ⊢ ¬¬(m = n) ⟶ ¬(m < n)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n ⊢ ¬(m = n)"
                },
                {
                    "args": "conjI",
                    "id": "0.4",
                    "prevs": [
                        "0.1",
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n ⊢ m ≤ n ∧ ¬(m = n)"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ⟶ m ≤ n ∧ ¬(m = n)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m ≤ n ∧ ¬(m = n) ⟶ m < n"
                },
                {
                    "args": "m ≤ n ∧ ¬(m = n)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ∧ ¬(m = n) ⊢ m ≤ n ∧ ¬(m = n)"
                },
                {
                    "args": "conjD1",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ∧ ¬(m = n) ⊢ m ≤ n"
                },
                {
                    "args": "conjD2",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ∧ ¬(m = n) ⊢ ¬(m = n)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "m ≤ n ∧ ¬(m = n) ⊢ m < n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ∧ ¬(m = n) ⟶ m < n"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m < n ⟷ m ≤ n ∧ ¬(m = n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ⟷ m ≤ n ∧ ¬(m = n)"
                }
            ],
            "prop": "m < n ⟷ m ≤ n ∧ ¬(m = n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.2.0"
                    ],
                    "goal_id": "0.2.2.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "less_lesseqI",
            "prop": "m ≤ n ⟶ ¬(m = n) ⟶ m < n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_resolve",
                "hint_rewrite",
                "hint_backward"
            ],
            "name": "le_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_less_eq_def_1, (0::nat) ≤ 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) ≤ 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 ≤ n ⟶ 0 ≤ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "0 ≤ n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ n ⊢ 0 ≤ n"
                },
                {
                    "args": "disjI2, {A: 0 = Suc n, B: 0 ≤ n}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ n ⊢ 0 = Suc n ∨ 0 ≤ n"
                },
                {
                    "args": "nat_less_eq_def_2, 0 ≤ Suc n",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 ≤ n ⊢ 0 ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. 0 ≤ n ⟶ 0 ≤ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. 0 ≤ n, x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 ≤ n"
                }
            ],
            "prop": "0 ≤ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "less_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_0, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, 0 < Suc n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < Suc n"
                }
            ],
            "prop": "0 < Suc n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "less_eq_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "n = n + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ n = n + 0"
                },
                {
                    "args": "exI, {P: λp. n = n + p, a: (0::nat)}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. n = n + a1"
                },
                {
                    "args": "less_eq_exist, n ≤ n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ≤ n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ n ≤ n"
                }
            ],
            "prop": "n ≤ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_antisym",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m ≤ 0 ∧ 0 ≤ m ⟶ m = 0"
                },
                {
                    "args": "m ≤ 0 ∧ 0 ≤ m",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ 0 ∧ 0 ≤ m ⊢ m ≤ 0 ∧ 0 ≤ m"
                },
                {
                    "args": "conjD1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ 0 ∧ 0 ≤ m ⊢ m ≤ 0"
                },
                {
                    "args": "nat_less_eq_def_1",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ 0 ∧ 0 ≤ m ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ 0 ∧ 0 ≤ m ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ m ≤ 0 ∧ 0 ≤ m"
                },
                {
                    "args": "m = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "le_0, {n: (0::nat)}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 0"
                },
                {
                    "args": "m ≤ 0",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0 ⊢ m ≤ 0"
                },
                {
                    "args": "le_0, {n: m}",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ m"
                },
                {
                    "args": "conjI",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ⊢ m ≤ 0 ∧ 0 ≤ m"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ m ≤ 0 ∧ 0 ≤ m"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m ≤ 0 ∧ 0 ≤ m ⟷ m = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ≤ n ∧ n ≤ m ⟷ m = n ⟶ m ≤ Suc n ∧ Suc n ≤ m ⟷ m = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ≤ n ∧ n ≤ m ⟷ m = n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ m ≤ n ∧ n ≤ m ⟷ m = n"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ 0 ≤ Suc n ∧ Suc n ≤ 0 ⟶ 0 = Suc n"
                },
                {
                    "args": "0 ≤ Suc n ∧ Suc n ≤ 0",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ Suc n ∧ Suc n ≤ 0 ⊢ 0 ≤ Suc n ∧ Suc n ≤ 0"
                },
                {
                    "args": "conjD2",
                    "id": "3.2.1",
                    "prevs": [
                        "3.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 ≤ Suc n ∧ Suc n ≤ 0 ⊢ Suc n ≤ 0"
                },
                {
                    "args": "lesseq_Suc_less",
                    "id": "3.2.2",
                    "prevs": [
                        "3.2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ Suc n ∧ Suc n ≤ 0 ⊢ n < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "3.2.3",
                    "prevs": [
                        "3.2.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 ≤ Suc n ∧ Suc n ≤ 0 ⊢ false"
                },
                {
                    "args": "not_false_res, 0 = Suc n",
                    "id": "3.2.4",
                    "prevs": [
                        "3.2.3"
                    ],
                    "rule": "resolve_theorem",
                    "th": "0 ≤ Suc n ∧ Suc n ≤ 0 ⊢ 0 = Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.5",
                    "prevs": [
                        "3.2.0",
                        "3.2.4"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ 0 ≤ Suc n ∧ Suc n ≤ 0 ⟶ 0 = Suc n"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ 0 = Suc n ⟶ 0 ≤ Suc n ∧ Suc n ≤ 0"
                },
                {
                    "args": "0 = Suc n",
                    "id": "3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = Suc n ⊢ 0 = Suc n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.3.1",
                    "prevs": [
                        "3.3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = Suc n ⊢ Suc n = 0"
                },
                {
                    "args": "le_0, {n: (0::nat)}",
                    "id": "3.3.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 0"
                },
                {
                    "args": "conjI",
                    "id": "3.3.3",
                    "prevs": [
                        "3.3.2",
                        "3.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = Suc n, m ≤ n ∧ n ≤ m ⟷ m = n ⊢ (0::nat) ≤ 0 ∧ (0::nat) ≤ 0"
                },
                {
                    "args": "0 ≤ Suc n ∧ Suc n ≤ 0",
                    "id": "3.3.4",
                    "prevs": [
                        "3.3.1",
                        "3.3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 = Suc n, m ≤ n ∧ n ≤ m ⟷ m = n ⊢ 0 ≤ Suc n ∧ Suc n ≤ 0"
                },
                {
                    "args": "",
                    "id": "3.3.5",
                    "prevs": [
                        "3.3.0",
                        "3.3.4"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ 0 = Suc n ⟶ 0 ≤ Suc n ∧ Suc n ≤ 0"
                },
                {
                    "args": "iffI",
                    "id": "3.4",
                    "prevs": [
                        "3.2",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ 0 ≤ Suc n ∧ Suc n ≤ 0 ⟷ 0 = Suc n"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ ∀n1. n1 ≤ Suc n ∧ Suc n ≤ n1 ⟷ n1 = Suc n ⟶ Suc n1 ≤ Suc n ∧ Suc n ≤ Suc n1 ⟷ Suc n1 = Suc n"
                },
                {
                    "args": "p, nat",
                    "id": "3.5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "p ≤ Suc n ∧ Suc n ≤ p ⟷ p = Suc n",
                    "id": "3.5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ≤ Suc n ∧ Suc n ≤ p ⟷ p = Suc n ⊢ p ≤ Suc n ∧ Suc n ≤ p ⟷ p = Suc n"
                },
                {
                    "args": "",
                    "id": "3.5.2",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n, p ≤ Suc n ∧ Suc n ≤ p ⟷ p = Suc n ⊢ p ≤ n ∧ n ≤ p ⟷ Suc p = Suc n"
                },
                {
                    "args": "le_suc, Suc p ≤ Suc n ∧ Suc n ≤ Suc p ⟷ Suc p = Suc n",
                    "id": "3.5.3",
                    "prevs": [
                        "3.5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n, p ≤ Suc n ∧ Suc n ≤ p ⟷ p = Suc n ⊢ Suc p ≤ Suc n ∧ Suc n ≤ Suc p ⟷ Suc p = Suc n"
                },
                {
                    "args": "",
                    "id": "3.5.4",
                    "prevs": [
                        "3.5.0",
                        "3.5.1",
                        "3.5.3"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ ∀p. p ≤ Suc n ∧ Suc n ≤ p ⟷ p = Suc n ⟶ Suc p ≤ Suc n ∧ Suc n ≤ Suc p ⟷ Suc p = Suc n"
                },
                {
                    "args": "nat_induct, {P: λm. m ≤ Suc n ∧ Suc n ≤ m ⟷ m = Suc n, x: m}",
                    "id": "3.6",
                    "prevs": [
                        "3.4",
                        "3.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n ∧ n ≤ m ⟷ m = n ⊢ m ≤ Suc n ∧ Suc n ≤ m ⟷ m = Suc n"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ≤ n ∧ n ≤ m ⟷ m = n ⟶ m ≤ Suc n ∧ Suc n ≤ m ⟷ m = Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ n ∧ n ≤ m ⟷ m = n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ n ∧ n ≤ m ⟷ m = n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ∧ n ≤ m ⟷ m = n"
                }
            ],
            "prop": "m ≤ n ∧ n ≤ m ⟷ m = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "3.2.1"
                    ],
                    "goal_id": "3.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                },
                {
                    "fact_ids": [
                        "3.2.2"
                    ],
                    "goal_id": "3.2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "3.2.3"
                    ],
                    "goal_id": "3.2.4",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.3.0"
                    ],
                    "goal_id": "3.3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.3.1"
                    ],
                    "goal_id": "3.3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "3.5",
                    "method_name": "introduction",
                    "names": "p"
                },
                {
                    "goal_id": "3.5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lt_antisym",
            "prop": "¬(m < n ∧ n < m)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "let_antisym",
            "prop": "¬(m ≤ n ∧ n < m)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "less_eq_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "k ≤ m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ m ⊢ k ≤ m"
                },
                {
                    "args": "m ≤ n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "less_eq_exist",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "k ≤ m ⊢ ∃p. m = k + p"
                },
                {
                    "args": "less_eq_exist",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ n ⊢ ∃p. n = m + p"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = k + p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k + p ⊢ m = k + p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "n = m + q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + q ⊢ n = m + q"
                },
                {
                    "args": "k + p + q = k + (p + q)",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ k + p + q = k + (p + q)"
                },
                {
                    "args": "m + q = k + (p + q)",
                    "id": "9",
                    "prevs": [
                        "5",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = k + p, k ≤ m, m ≤ n, n = m + q ⊢ m + q = k + (p + q)"
                },
                {
                    "args": "n = k + (p + q)",
                    "id": "10",
                    "prevs": [
                        "7",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m + q, k ≤ m, m ≤ n, m = k + p ⊢ n = k + (p + q)"
                },
                {
                    "args": "exI, {P: λp. n = k + p, a: p + q}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "k ≤ m, m ≤ n, m = k + p, n = m + q ⊢ ∃a1. n = k + a1"
                },
                {
                    "args": "less_eq_exist, k ≤ n",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k ≤ m, m ≤ n, m = k + p, n = m + q ⊢ k ≤ n"
                },
                {
                    "args": "∃p. n = m + p, ∃p. m = k + p",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ k ≤ m ⟶ m ≤ n ⟶ k ≤ n"
                }
            ],
            "prop": "k ≤ m ⟶ m ≤ n ⟶ k ≤ n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "p + q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "lt_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "k < m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k < m ⊢ k < m"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m ⊢ m < 0 ⟶ k < 0"
                },
                {
                    "args": "m < 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < 0 ⊢ m < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < 0 ⊢ false"
                },
                {
                    "args": "not_false_res, k < 0",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "resolve_theorem",
                    "th": "m < 0 ⊢ k < 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "k < m ⊢ m < 0 ⟶ k < 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m ⊢ ∀n. (m < n ⟶ k < n) ⟶ m < Suc n ⟶ k < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m < n ⟶ k < n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⟶ k < n ⊢ m < n ⟶ k < n"
                },
                {
                    "args": "m < Suc n",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ⊢ m < Suc n"
                },
                {
                    "args": "nat_less_def_2",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < Suc n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m, m < Suc n, m < n ⟶ k < n ⊢ m = n ⟶ k ≤ n"
                },
                {
                    "args": "m = n",
                    "id": "2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "2.4.1",
                    "prevs": [
                        "2.4.0",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = n, k < m ⊢ k < n"
                },
                {
                    "args": "lt_imp_le",
                    "id": "2.4.2",
                    "prevs": [
                        "2.4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = n, k < m, m < Suc n, m < n ⟶ k < n ⊢ k ≤ n"
                },
                {
                    "args": "",
                    "id": "2.4.3",
                    "prevs": [
                        "2.4.0",
                        "2.4.2"
                    ],
                    "rule": "intros",
                    "th": "k < m, m < Suc n, m < n ⟶ k < n ⊢ m = n ⟶ k ≤ n"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m, m < Suc n, m < n ⟶ k < n ⊢ m < n ⟶ k ≤ n"
                },
                {
                    "args": "m < n",
                    "id": "2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "",
                    "id": "2.5.1",
                    "prevs": [
                        "2.1",
                        "2.5.0"
                    ],
                    "rule": "apply_fact",
                    "th": "m < n, m < n ⟶ k < n ⊢ k < n"
                },
                {
                    "args": "lt_imp_le",
                    "id": "2.5.2",
                    "prevs": [
                        "2.5.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "k < m, m < n, m < Suc n, m < n ⟶ k < n ⊢ k ≤ n"
                },
                {
                    "args": "",
                    "id": "2.5.3",
                    "prevs": [
                        "2.5.0",
                        "2.5.2"
                    ],
                    "rule": "intros",
                    "th": "k < m, m < Suc n, m < n ⟶ k < n ⊢ m < n ⟶ k ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "2.6",
                    "prevs": [
                        "2.3",
                        "2.4",
                        "2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "k < m, m < Suc n, m < n ⟶ k < n ⊢ k ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, k < Suc n",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k < m, m < Suc n, m < n ⟶ k < n ⊢ k < Suc n"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "k < m ⊢ ∀n. (m < n ⟶ k < n) ⟶ m < Suc n ⟶ k < Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m < n ⟶ k < n, x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "k < m ⊢ m < n ⟶ k < n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ k < m ⟶ m < n ⟶ k < n"
                }
            ],
            "prop": "k < m ⟶ m < n ⟶ k < n",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "fact_ids": [
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.0",
                        "0"
                    ],
                    "goal_id": "2.4.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "2.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "goal_id": "2.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.1",
                        "2.5.0"
                    ],
                    "goal_id": "2.5.1",
                    "method_name": "apply_fact"
                },
                {
                    "goal_id": "2.5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "let_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "k ≤ m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ m ⊢ k ≤ m"
                },
                {
                    "args": "false ⟶ false",
                    "id": "1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "nat_less_def_1, m < 0 ⟶ k < 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k ≤ m ⊢ m < 0 ⟶ k < 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k ≤ m ⊢ ∀n. (m < n ⟶ k < n) ⟶ m < Suc n ⟶ k < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m < n ⟶ k < n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⟶ k < n ⊢ m < n ⟶ k < n"
                },
                {
                    "args": "m < Suc n",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ⊢ m < Suc n"
                },
                {
                    "args": "less_Suc_lesseq",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < Suc n ⊢ m ≤ n"
                },
                {
                    "args": "less_eq_trans",
                    "id": "3.4",
                    "prevs": [
                        "0",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "k ≤ m, m < Suc n ⊢ k ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, k < Suc n",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k ≤ m, m < Suc n, m < n ⟶ k < n ⊢ k < Suc n"
                },
                {
                    "args": "",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "k ≤ m ⊢ ∀n. (m < n ⟶ k < n) ⟶ m < Suc n ⟶ k < Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m < n ⟶ k < n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "k ≤ m ⊢ m < n ⟶ k < n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ k ≤ m ⟶ m < n ⟶ k < n"
                }
            ],
            "prop": "k ≤ m ⟶ m < n ⟶ k < n",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "fact_ids": [
                        "0",
                        "3.3"
                    ],
                    "goal_id": "3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_trans"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "lte_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "k < m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k < m ⊢ k < m"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m ⊢ m = 0 ⟶ k < 0"
                },
                {
                    "args": "m = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [
                        "1.0",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, k < m ⊢ k < 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "k < m ⊢ m = 0 ⟶ k < 0"
                },
                {
                    "args": "nat_less_eq_def_1, m ≤ 0 ⟶ k < 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k < m ⊢ m ≤ 0 ⟶ k < 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m ⊢ ∀n. (m ≤ n ⟶ k < n) ⟶ m ≤ Suc n ⟶ k < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ≤ n ⟶ k < n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⟶ k < n ⊢ m ≤ n ⟶ k < n"
                },
                {
                    "args": "m ≤ Suc n",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ Suc n ⊢ m ≤ Suc n"
                },
                {
                    "args": "nat_less_eq_def_2",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ Suc n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m, m ≤ Suc n, m ≤ n ⟶ k < n ⊢ m = Suc n ⟶ k < Suc n"
                },
                {
                    "args": "m = Suc n",
                    "id": "3.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "",
                    "id": "3.4.1",
                    "prevs": [
                        "3.4.0",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "k < m, m = Suc n ⊢ k < Suc n"
                },
                {
                    "args": "",
                    "id": "3.4.2",
                    "prevs": [
                        "3.4.0",
                        "3.4.1"
                    ],
                    "rule": "intros",
                    "th": "k < m, m ≤ Suc n, m ≤ n ⟶ k < n ⊢ m = Suc n ⟶ k < Suc n"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "k < m, m ≤ Suc n, m ≤ n ⟶ k < n ⊢ m ≤ n ⟶ k < Suc n"
                },
                {
                    "args": "m ≤ n",
                    "id": "3.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.5.1",
                    "prevs": [
                        "3.1",
                        "3.5.0"
                    ],
                    "rule": "apply_fact",
                    "th": "m ≤ n, m ≤ n ⟶ k < n ⊢ k < n"
                },
                {
                    "args": "lt_imp_le",
                    "id": "3.5.2",
                    "prevs": [
                        "3.5.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n, m ≤ n ⟶ k < n ⊢ k ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, k < Suc n",
                    "id": "3.5.3",
                    "prevs": [
                        "3.5.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k < m, m ≤ n, m ≤ Suc n, m ≤ n ⟶ k < n ⊢ k < Suc n"
                },
                {
                    "args": "",
                    "id": "3.5.4",
                    "prevs": [
                        "3.5.0",
                        "3.5.3"
                    ],
                    "rule": "intros",
                    "th": "k < m, m ≤ Suc n, m ≤ n ⟶ k < n ⊢ m ≤ n ⟶ k < Suc n"
                },
                {
                    "args": "disjE",
                    "id": "3.6",
                    "prevs": [
                        "3.3",
                        "3.4",
                        "3.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "k < m, m ≤ Suc n, m ≤ n ⟶ k < n ⊢ k < Suc n"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "k < m ⊢ ∀n. (m ≤ n ⟶ k < n) ⟶ m ≤ Suc n ⟶ k < Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ n ⟶ k < n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "k < m ⊢ m ≤ n ⟶ k < n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ k < m ⟶ m ≤ n ⟶ k < n"
                }
            ],
            "prop": "k < m ⟶ m ≤ n ⟶ k < n",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "fact_ids": [
                        "3.3"
                    ],
                    "goal_id": "3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.4.0",
                        "0"
                    ],
                    "goal_id": "3.4.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.1",
                        "3.5.0"
                    ],
                    "goal_id": "3.5.1",
                    "method_name": "apply_fact"
                },
                {
                    "goal_id": "3.5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "fact_ids": [
                        "3.5.1"
                    ],
                    "goal_id": "3.5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ m < 0 ∨ m = 0"
                },
                {
                    "args": "m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "disjI2, {A: m < 0, B: m = 0}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0 ⊢ m < 0 ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ m < 0 ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m < 0 ∨ m = 0 ⟶ m = 0"
                },
                {
                    "args": "m < 0 ∨ m = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < 0 ∨ m = 0 ⊢ m < 0 ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < 0 ∨ m = 0 ⊢ m < 0 ⟶ m = 0"
                },
                {
                    "args": "m < 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < 0 ⊢ m < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < 0 ⊢ false"
                },
                {
                    "args": "not_false_res, m = 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "resolve_theorem",
                    "th": "m < 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "intros",
                    "th": "m < 0 ∨ m = 0 ⊢ m < 0 ⟶ m = 0"
                },
                {
                    "args": "m = 0 ⟶ m = 0",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m = 0 ⟶ m = 0"
                },
                {
                    "args": "disjE",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < 0 ∨ m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < 0 ∨ m = 0 ⟶ m = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m = 0 ⟷ m < 0 ∨ m = 0"
                },
                {
                    "args": "nat_less_eq_def_1, m ≤ 0 ⟷ m < 0 ∨ m = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ≤ 0 ⟷ m < 0 ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ≤ n ⟷ m < n ∨ m = n ⟶ m ≤ Suc n ⟷ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ≤ n ⟷ m < n ∨ m = n",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m ≤ n ⟷ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n ⟶ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "m = Suc n ∨ m < n ∨ m = n",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ∨ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "4.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m = Suc n ⟶ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "m = Suc n",
                    "id": "4.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "disjI2, {A: m < Suc n, B: m = Suc n}",
                    "id": "4.2.1.1",
                    "prevs": [
                        "4.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.2.1.2",
                    "prevs": [
                        "4.2.1.0",
                        "4.2.1.1"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m = Suc n ⟶ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m < n ∨ m = n ⟶ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "m < n ∨ m = n",
                    "id": "4.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ∨ m = n ⊢ m < n ∨ m = n"
                },
                {
                    "args": "disj_comm, m = n ∨ m < n",
                    "id": "4.2.2.1",
                    "prevs": [
                        "4.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n ∨ m = n, m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "nat_less_def_2, m < Suc n",
                    "id": "4.2.2.2",
                    "prevs": [
                        "4.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n ∨ m = n, m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m < Suc n"
                },
                {
                    "args": "disjI1, {A: m < Suc n, B: m = Suc n}",
                    "id": "4.2.2.3",
                    "prevs": [
                        "4.2.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < n ∨ m = n, m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.2.2.4",
                    "prevs": [
                        "4.2.2.0",
                        "4.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m < n ∨ m = n ⟶ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "disjE",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.0",
                        "4.2.1",
                        "4.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ⟷ m < n ∨ m = n, m = Suc n ∨ m < n ∨ m = n ⊢ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.0",
                        "4.2.3"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n ⟶ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m < Suc n ∨ m = Suc n ⟶ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "m < Suc n ∨ m = Suc n",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ∨ m = Suc n ⊢ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m < Suc n ⟶ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "m < Suc n",
                    "id": "4.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ⊢ m < Suc n"
                },
                {
                    "args": "nat_less_def_2",
                    "id": "4.3.1.1",
                    "prevs": [
                        "4.3.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < Suc n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "disj_comm, m < n ∨ m = n",
                    "id": "4.3.1.2",
                    "prevs": [
                        "4.3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < Suc n, m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m < n ∨ m = n"
                },
                {
                    "args": "disjI2, {A: m = Suc n, B: m < n ∨ m = n}",
                    "id": "4.3.1.3",
                    "prevs": [
                        "4.3.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < Suc n, m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "4.3.1.4",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.3"
                    ],
                    "rule": "intros",
                    "th": "m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m < Suc n ⟶ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "4.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ⟶ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "m = Suc n",
                    "id": "4.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "disjI1, {A: m = Suc n, B: m < n ∨ m = n}",
                    "id": "4.3.2.1",
                    "prevs": [
                        "4.3.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "4.3.2.2",
                    "prevs": [
                        "4.3.2.0",
                        "4.3.2.1"
                    ],
                    "rule": "intros",
                    "th": "m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ⟶ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "disjE",
                    "id": "4.3.3",
                    "prevs": [
                        "4.3.0",
                        "4.3.1",
                        "4.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < Suc n ∨ m = Suc n, m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "4.3.4",
                    "prevs": [
                        "4.3.0",
                        "4.3.3"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m < Suc n ∨ m = Suc n ⟶ m = Suc n ∨ m < n ∨ m = n"
                },
                {
                    "args": "iffI",
                    "id": "4.4",
                    "prevs": [
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m < n ∨ m = n ⟷ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "m = Suc n ∨ m ≤ n ⟷ m < Suc n ∨ m = Suc n",
                    "id": "4.5",
                    "prevs": [
                        "4.1",
                        "4.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m = Suc n ∨ m ≤ n ⟷ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n ⟷ m < Suc n ∨ m = Suc n",
                    "id": "4.6",
                    "prevs": [
                        "4.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ⟷ m < n ∨ m = n ⊢ m ≤ Suc n ⟷ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "4.7",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ≤ n ⟷ m < n ∨ m = n ⟶ m ≤ Suc n ⟷ m < Suc n ∨ m = Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ n ⟷ m < n ∨ m = n, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ n ⟷ m < n ∨ m = n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟷ m < n ∨ m = n"
                }
            ],
            "prop": "m ≤ n ⟷ m < n ∨ m = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "1.1.1"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "4.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "goal_id": "4.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_comm"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "4.3.1.0"
                    ],
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "goal_id": "4.3.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_comm"
                },
                {
                    "goal_id": "4.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "not_le",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ false"
                },
                {
                    "args": "¬((0::nat) = 0)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "negE",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬((0::nat) = 0) ⊢ false"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ false"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ false ⟶ ¬((0::nat) = 0)"
                },
                {
                    "args": "false",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "false ⊢ false"
                },
                {
                    "args": "not_false_res, ¬((0::nat) = 0)",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "resolve_theorem",
                    "th": "false ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ false ⟶ ¬((0::nat) = 0)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬((0::nat) = 0) ⟷ false"
                },
                {
                    "args": "nat_less_def_1, ¬((0::nat) = 0) ⟷ (0::nat) < 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬((0::nat) = 0) ⟷ (0::nat) < 0"
                },
                {
                    "args": "nat_less_eq_def_1, ¬((0::nat) ≤ 0) ⟷ (0::nat) < 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬((0::nat) ≤ 0) ⟷ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. ¬(n ≤ 0) ⟷ 0 < n ⟶ ¬(Suc n ≤ 0) ⟷ 0 < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(n ≤ 0) ⟷ 0 < n",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬(n ≤ 0) ⟷ 0 < n"
                },
                {
                    "args": "",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬false ⟶ 0 ≤ n"
                },
                {
                    "args": "¬false",
                    "id": "5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "le_0, {n: n}",
                    "id": "5.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "",
                    "id": "5.2.2",
                    "prevs": [
                        "5.2.0",
                        "5.2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬false ⟶ 0 ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ 0 ≤ n ⟶ ¬false"
                },
                {
                    "args": "0 ≤ n",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ n ⊢ 0 ≤ n"
                },
                {
                    "args": "false ⟶ false",
                    "id": "5.3.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "5.3.2",
                    "prevs": [
                        "5.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n ≤ 0) ⟷ 0 < n, 0 ≤ n ⊢ ¬false"
                },
                {
                    "args": "",
                    "id": "5.3.3",
                    "prevs": [
                        "5.3.0",
                        "5.3.2"
                    ],
                    "rule": "intros",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ 0 ≤ n ⟶ ¬false"
                },
                {
                    "args": "iffI",
                    "id": "5.4",
                    "prevs": [
                        "5.2",
                        "5.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬false ⟷ 0 ≤ n"
                },
                {
                    "args": "nat_less_def_1, ¬(n < 0) ⟷ 0 ≤ n",
                    "id": "5.5",
                    "prevs": [
                        "5.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬(n < 0) ⟷ 0 ≤ n"
                },
                {
                    "args": "lesseq_Suc_less, ¬(Suc n ≤ 0) ⟷ 0 ≤ n",
                    "id": "5.6",
                    "prevs": [
                        "5.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬(Suc n ≤ 0) ⟷ 0 ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, ¬(Suc n ≤ 0) ⟷ 0 < Suc n",
                    "id": "5.7",
                    "prevs": [
                        "5.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n ≤ 0) ⟷ 0 < n ⊢ ¬(Suc n ≤ 0) ⟷ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "5.8",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. ¬(n ≤ 0) ⟷ 0 < n ⟶ ¬(Suc n ≤ 0) ⟷ 0 < Suc n"
                },
                {
                    "args": "nat_induct, {P: λm::nat. ¬(m ≤ 0) ⟷ 0 < m, x: m}",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(m ≤ 0) ⟷ 0 < m"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. ¬(0 ≤ n) ⟷ n < 0 ⟶ ¬(0 ≤ Suc n) ⟷ Suc n < 0"
                },
                {
                    "args": "n, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(0 ≤ n) ⟷ n < 0",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ ¬(0 ≤ n) ⟷ n < 0"
                },
                {
                    "args": "",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ ¬(0 ≤ Suc n) ⟶ false"
                },
                {
                    "args": "¬(0 ≤ Suc n)",
                    "id": "7.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(0 ≤ Suc n) ⊢ ¬(0 ≤ Suc n)"
                },
                {
                    "args": "le_0, {n: Suc n}",
                    "id": "7.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ Suc n"
                },
                {
                    "args": "negE",
                    "id": "7.2.2",
                    "prevs": [
                        "7.2.0",
                        "7.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 ≤ Suc n), ¬(0 ≤ n) ⟷ n < 0 ⊢ false"
                },
                {
                    "args": "",
                    "id": "7.2.3",
                    "prevs": [
                        "7.2.0",
                        "7.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ ¬(0 ≤ Suc n) ⟶ false"
                },
                {
                    "args": "",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ false ⟶ ¬(0 ≤ Suc n)"
                },
                {
                    "args": "false",
                    "id": "7.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "false ⊢ false"
                },
                {
                    "args": "not_false_res, ¬(0 ≤ Suc n)",
                    "id": "7.3.1",
                    "prevs": [
                        "7.3.0"
                    ],
                    "rule": "resolve_theorem",
                    "th": "false ⊢ ¬(0 ≤ Suc n)"
                },
                {
                    "args": "",
                    "id": "7.3.2",
                    "prevs": [
                        "7.3.0",
                        "7.3.1"
                    ],
                    "rule": "intros",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ false ⟶ ¬(0 ≤ Suc n)"
                },
                {
                    "args": "iffI",
                    "id": "7.4",
                    "prevs": [
                        "7.2",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ ¬(0 ≤ Suc n) ⟷ false"
                },
                {
                    "args": "nat_less_def_1, ¬(0 ≤ Suc n) ⟷ Suc n < 0",
                    "id": "7.5",
                    "prevs": [
                        "7.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(0 ≤ n) ⟷ n < 0 ⊢ ¬(0 ≤ Suc n) ⟷ Suc n < 0"
                },
                {
                    "args": "",
                    "id": "7.6",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. ¬(0 ≤ n) ⟷ n < 0 ⟶ ¬(0 ≤ Suc n) ⟷ Suc n < 0"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n) ⟶ (∀n1. ¬(Suc n ≤ n1) ⟷ n1 < Suc n ⟶ ¬(Suc n ≤ Suc n1) ⟷ Suc n1 < Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n",
                    "id": "8.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n ⊢ ∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n"
                },
                {
                    "args": "",
                    "id": "8.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n ⊢ ∀n1. ¬(Suc n ≤ n1) ⟷ n1 < Suc n ⟶ ¬(Suc n ≤ Suc n1) ⟷ Suc n1 < Suc n"
                },
                {
                    "args": "m, nat",
                    "id": "8.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "¬(Suc n ≤ m) ⟷ m < Suc n",
                    "id": "8.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n ≤ m) ⟷ m < Suc n ⊢ ¬(Suc n ≤ m) ⟷ m < Suc n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "8.2.2",
                    "prevs": [
                        "8.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n ⊢ ∀n1. n1 < n ⟷ ¬(n ≤ n1) ⟶ Suc n1 < n ⟷ ¬(n ≤ Suc n1)"
                },
                {
                    "args": "",
                    "id": "8.2.3",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n, ¬(Suc n ≤ m) ⟷ m < Suc n ⊢ ¬(Suc n ≤ Suc m) ⟷ Suc m < Suc n"
                },
                {
                    "args": "",
                    "id": "8.2.4",
                    "prevs": [
                        "8.2.0",
                        "8.2.1",
                        "8.2.3"
                    ],
                    "rule": "intros",
                    "th": "∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n ⊢ ∀m. ¬(Suc n ≤ m) ⟷ m < Suc n ⟶ ¬(Suc n ≤ Suc m) ⟷ Suc m < Suc n"
                },
                {
                    "args": "",
                    "id": "8.3",
                    "prevs": [
                        "8.0",
                        "8.1",
                        "8.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (∀n1. ¬(n ≤ n1) ⟷ n1 < n ⟶ ¬(n ≤ Suc n1) ⟷ Suc n1 < n) ⟶ (∀n1. ¬(Suc n ≤ n1) ⟷ n1 < Suc n ⟶ ¬(Suc n ≤ Suc n1) ⟷ Suc n1 < Suc n)"
                },
                {
                    "args": "nat_induct, {P: λm. ∀n. ¬(m ≤ n) ⟷ n < m ⟶ ¬(m ≤ Suc n) ⟷ Suc n < m, x: m}",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∀n. ¬(m ≤ n) ⟷ n < m ⟶ ¬(m ≤ Suc n) ⟷ Suc n < m"
                },
                {
                    "args": "nat_induct, {P: λn. ¬(m ≤ n) ⟷ n < m, x: n}",
                    "id": "10",
                    "prevs": [
                        "6",
                        "9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(m ≤ n) ⟷ n < m"
                },
                {
                    "args": "",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m ≤ n) ⟷ n < m"
                }
            ],
            "prop": "¬(m ≤ n) ⟷ n < m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "7",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.2.0"
                    ],
                    "goal_id": "7.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE"
                },
                {
                    "goal_id": "7.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.3.0"
                    ],
                    "goal_id": "7.3.1",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "8.2",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "fact_ids": [
                        "8.1"
                    ],
                    "goal_id": "8.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "not_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "double_neg, ¬¬(n ≤ m) ⟷ n ≤ m",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬¬(n ≤ m) ⟷ n ≤ m"
                },
                {
                    "args": "not_le, ¬(m < n) ⟷ n ≤ m",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ ¬(m < n) ⟷ n ≤ m"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m < n) ⟷ n ≤ m"
                }
            ],
            "prop": "¬(m < n) ⟷ n ≤ m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "le_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "less_eq_refl, {n: m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ m"
                },
                {
                    "args": "add_0_right, m ≤ m + 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ≤ m + 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ≤ m + n ⟶ m ≤ m + Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ≤ m + n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ m + n ⊢ m ≤ m + n"
                },
                {
                    "args": "add_comm, m ≤ n + m",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ m + n ⊢ m ≤ n + m"
                },
                {
                    "args": "disjI2, {A: m = Suc (n + m), B: m ≤ n + m}",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ m + n ⊢ m = Suc (n + m) ∨ m ≤ n + m"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc (n + m)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ m + n ⊢ m ≤ Suc (n + m)"
                },
                {
                    "args": "nat_plus_def_2, m ≤ Suc n + m",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ m + n ⊢ m ≤ Suc n + m"
                },
                {
                    "args": "add_comm, m ≤ m + Suc n",
                    "id": "2.6",
                    "prevs": [
                        "2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ m + n ⊢ m ≤ m + Suc n"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ≤ m + n ⟶ m ≤ m + Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ m + n, x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ m + n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ m + n"
                }
            ],
            "prop": "m ≤ m + n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "lt_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 < 0 + n ⟷ 0 < n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < 0 + n ⟷ 0 < n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n1. n1 < n1 + n ⟷ 0 < n ⟶ Suc n1 < Suc n1 + n ⟷ 0 < n"
                },
                {
                    "args": "m, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "m < m + n ⟷ 0 < n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < m + n ⟷ 0 < n ⊢ m < m + n ⟷ 0 < n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < m + n ⟷ 0 < n ⊢ 0 < n ⟷ m < m + n"
                },
                {
                    "args": "lesseq_Suc_less, Suc m ≤ m + n ⟷ m < m + n",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc m ≤ m + n ⟷ m < m + n"
                },
                {
                    "args": "less_Suc_lesseq, Suc m < Suc (m + n) ⟷ m < m + n",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < m + n ⟷ 0 < n ⊢ Suc m < Suc (m + n) ⟷ m < m + n"
                },
                {
                    "args": "Suc m < Suc (m + n) ⟷ 0 < n",
                    "id": "1.5",
                    "prevs": [
                        "1.2",
                        "1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < m + n ⟷ 0 < n ⊢ Suc m < Suc (m + n) ⟷ 0 < n"
                },
                {
                    "args": "nat_plus_def_2, Suc m < Suc m + n ⟷ 0 < n",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < m + n ⟷ 0 < n ⊢ Suc m < Suc m + n ⟷ 0 < n"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. m < m + n ⟷ 0 < n ⟶ Suc m < Suc m + n ⟷ 0 < n"
                },
                {
                    "args": "nat_induct, {P: λm. m < m + n ⟷ 0 < n, x: m}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m < m + n ⟷ 0 < n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < m + n ⟷ 0 < n"
                }
            ],
            "prop": "m < m + n ⟷ 0 < n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_add_lcancel",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃p1. m + p = m + n + p1) ⟶ (∃p1. p = n + p1)"
                },
                {
                    "args": "∃p1. m + p = m + n + p1",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃p1. m + p = m + n + p1 ⊢ ∃p1. m + p = m + n + p1"
                },
                {
                    "args": "d, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "m + p = m + n + d",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m + p = m + n + d ⊢ m + p = m + n + d"
                },
                {
                    "args": "add_assoc",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m + p = m + n + d ⊢ m + p = m + (n + d)"
                },
                {
                    "args": "add_cancel_left",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m + p = m + n + d ⊢ p = n + d"
                },
                {
                    "args": "exI, {P: λp1. p = n + p1, a: d}",
                    "id": "0.5",
                    "prevs": [
                        "0.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m + p = m + n + d, ∃p1. m + p = m + n + p1 ⊢ ∃a1. p = n + a1"
                },
                {
                    "args": "∃p1. m + p = m + n + p1",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃p1. m + p = m + n + p1) ⟶ (∃p1. p = n + p1)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃p1. p = n + p1) ⟶ (∃p1. m + p = m + n + p1)"
                },
                {
                    "args": "∃p1. p = n + p1",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃p1. p = n + p1 ⊢ ∃p1. p = n + p1"
                },
                {
                    "args": "d, nat",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "p = n + d",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = n + d ⊢ p = n + d"
                },
                {
                    "args": "add_assoc, m + (n + d) = m + n + d",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m + (n + d) = m + n + d"
                },
                {
                    "args": "m + p = m + n + d",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "p = n + d, ∃p1. p = n + p1 ⊢ m + p = m + n + d"
                },
                {
                    "args": "exI, {P: λp1. m + p = m + n + p1, a: d}",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "p = n + d, ∃p1. p = n + p1 ⊢ ∃a1. m + p = m + n + a1"
                },
                {
                    "args": "∃p1. p = n + p1",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃p1. p = n + p1) ⟶ (∃p1. m + p = m + n + p1)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃p1. m + p = m + n + p1) ⟷ (∃p1. p = n + p1)"
                },
                {
                    "args": "less_eq_exist, m + n ≤ m + p ⟷ n ≤ p",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m + n ≤ m + p ⟷ n ≤ p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m + n ≤ m + p ⟷ n ≤ p"
                }
            ],
            "prop": "m + n ≤ m + p ⟷ n ≤ p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lt_add_lcancel",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃d. m + p = m + n + Suc d) ⟶ (∃d. p = n + Suc d)"
                },
                {
                    "args": "∃d. m + p = m + n + Suc d",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. m + p = m + n + Suc d ⊢ ∃d. m + p = m + n + Suc d"
                },
                {
                    "args": "d, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "m + p = m + n + Suc d",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m + p = m + n + Suc d ⊢ m + p = m + n + Suc d"
                },
                {
                    "args": "add_assoc",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m + p = m + n + Suc d ⊢ m + p = m + (n + Suc d)"
                },
                {
                    "args": "add_cancel_left",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m + p = m + n + Suc d ⊢ p = n + Suc d"
                },
                {
                    "args": "exI, {P: λd. p = n + Suc d, a: d}",
                    "id": "0.5",
                    "prevs": [
                        "0.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m + p = m + n + Suc d, ∃d. m + p = m + n + Suc d ⊢ ∃a1. p = n + Suc a1"
                },
                {
                    "args": "∃d. m + p = m + n + Suc d",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃d. m + p = m + n + Suc d) ⟶ (∃d. p = n + Suc d)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃d. p = n + Suc d) ⟶ (∃d. m + p = m + n + Suc d)"
                },
                {
                    "args": "∃d. p = n + Suc d",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. p = n + Suc d ⊢ ∃d. p = n + Suc d"
                },
                {
                    "args": "d, nat",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "p = n + Suc d",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = n + Suc d ⊢ p = n + Suc d"
                },
                {
                    "args": "add_assoc, m + (n + Suc d) = m + n + Suc d",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m + (n + Suc d) = m + n + Suc d"
                },
                {
                    "args": "m + p = m + n + Suc d",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "p = n + Suc d, ∃d. p = n + Suc d ⊢ m + p = m + n + Suc d"
                },
                {
                    "args": "exI, {P: λd. m + p = m + n + Suc d, a: d}",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "p = n + Suc d, ∃d. p = n + Suc d ⊢ ∃a1. m + p = m + n + Suc a1"
                },
                {
                    "args": "∃d. p = n + Suc d",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃d. p = n + Suc d) ⟶ (∃d. m + p = m + n + Suc d)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃d. m + p = m + n + Suc d) ⟷ (∃d. p = n + Suc d)"
                },
                {
                    "args": "less_exist, m + n < m + p ⟷ n < p",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m + n < m + p ⟷ n < p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m + n < m + p ⟷ n < p"
                }
            ],
            "prop": "m + n < m + p ⟷ n < p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_exist"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "le_add2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m ≤ p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ p ⊢ m ≤ p"
                },
                {
                    "args": "n ≤ q",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n ≤ q ⊢ n ≤ q"
                },
                {
                    "args": "less_eq_exist",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ p ⊢ ∃p1. p = m + p1"
                },
                {
                    "args": "less_eq_exist",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n ≤ q ⊢ ∃p. q = n + p"
                },
                {
                    "args": "a, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "p = m + a",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = m + a ⊢ p = m + a"
                },
                {
                    "args": "b, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "q = n + b",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q = n + b ⊢ q = n + b"
                },
                {
                    "args": "m + a + (n + b) = m + n + (a + b)",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + a + (n + b) = m + n + (a + b)"
                },
                {
                    "args": "m + a + q = m + n + (a + b)",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ p, n ≤ q, p = m + a, q = n + b ⊢ m + a + q = m + n + (a + b)"
                },
                {
                    "args": "p + q = m + n + (a + b)",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ p, n ≤ q, p = m + a, q = n + b ⊢ p + q = m + n + (a + b)"
                },
                {
                    "args": "exI, {P: λp1. p + q = m + n + p1, a: a + b}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ p, n ≤ q, p = m + a, q = n + b ⊢ ∃a1. p + q = m + n + a1"
                },
                {
                    "args": "less_eq_exist, m + n ≤ p + q",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ p, n ≤ q, p = m + a, q = n + b ⊢ m + n ≤ p + q"
                },
                {
                    "args": "∃p. q = n + p, ∃p1. p = m + p1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ p ⟶ n ≤ q ⟶ m + n ≤ p + q"
                }
            ],
            "prop": "m ≤ p ⟶ n ≤ q ⟶ m + n ≤ p + q",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "a"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "b"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "a+b"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "let_add2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m ≤ p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ p ⊢ m ≤ p"
                },
                {
                    "args": "n < q",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < q ⊢ n < q"
                },
                {
                    "args": "less_eq_exist",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ p ⊢ ∃p1. p = m + p1"
                },
                {
                    "args": "less_exist",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n < q ⊢ ∃d. q = n + Suc d"
                },
                {
                    "args": "a, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "p = m + a",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = m + a ⊢ p = m + a"
                },
                {
                    "args": "b, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "q = n + Suc b",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q = n + Suc b ⊢ q = n + Suc b"
                },
                {
                    "args": "m + a + (n + Suc b) = m + n + Suc (a + b)",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + a + (n + Suc b) = m + n + Suc (a + b)"
                },
                {
                    "args": "m + a + q = m + n + Suc (a + b)",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n < q, m ≤ p, p = m + a, q = n + Suc b ⊢ m + a + q = m + n + Suc (a + b)"
                },
                {
                    "args": "p + q = m + n + Suc (a + b)",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n < q, m ≤ p, p = m + a, q = n + Suc b ⊢ p + q = m + n + Suc (a + b)"
                },
                {
                    "args": "exI, {P: λd. p + q = m + n + Suc d, a: a + b}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n < q, m ≤ p, p = m + a, q = n + Suc b ⊢ ∃a1. p + q = m + n + Suc a1"
                },
                {
                    "args": "less_exist, m + n < p + q",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < q, m ≤ p, p = m + a, q = n + Suc b ⊢ m + n < p + q"
                },
                {
                    "args": "∃d. q = n + Suc d, ∃p1. p = m + p1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ p ⟶ n < q ⟶ m + n < p + q"
                }
            ],
            "prop": "m ≤ p ⟶ n < q ⟶ m + n < p + q",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_exist"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "a"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "b"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_exist"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "a+b"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "lt_add2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m < p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < p ⊢ m < p"
                },
                {
                    "args": "n < q",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < q ⊢ n < q"
                },
                {
                    "args": "lt_imp_le",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < p, n < q ⊢ m ≤ p"
                },
                {
                    "args": "let_add2",
                    "id": "3",
                    "prevs": [
                        "2",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < p, n < q ⊢ m + n < p + q"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < p ⟶ n < q ⟶ m + n < p + q"
                }
            ],
            "prop": "m < p ⟶ n < q ⟶ m + n < p + q",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "let_add2"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "le_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_0, {n: m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ m"
                },
                {
                    "args": "disjI2, {A: m ≤ 0, B: 0 ≤ m}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ 0 ∨ 0 ≤ m"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 ≤ n ∨ n ≤ 0 ⟶ 0 ≤ Suc n ∨ Suc n ≤ 0"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "0 ≤ n ∨ n ≤ 0",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ n ∨ n ≤ 0 ⊢ 0 ≤ n ∨ n ≤ 0"
                },
                {
                    "args": "le_0, {n: Suc n}",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ Suc n"
                },
                {
                    "args": "disjI1, {A: 0 ≤ Suc n, B: Suc n ≤ 0}",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 ≤ n ∨ n ≤ 0 ⊢ 0 ≤ Suc n ∨ Suc n ≤ 0"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. 0 ≤ n ∨ n ≤ 0 ⟶ 0 ≤ Suc n ∨ Suc n ≤ 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n) ⟶ (∀n1. Suc n ≤ n1 ∨ n1 ≤ Suc n ⟶ Suc n ≤ Suc n1 ∨ Suc n1 ≤ Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ ∀n1. Suc n ≤ n1 ∨ n1 ≤ Suc n ⟶ Suc n ≤ Suc n1 ∨ Suc n1 ≤ Suc n"
                },
                {
                    "args": "m, nat",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "Suc n ≤ m ∨ m ≤ Suc n",
                    "id": "3.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n ≤ m ∨ m ≤ Suc n ⊢ Suc n ≤ m ∨ m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ m ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "Suc n ≤ m",
                    "id": "3.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n ≤ m ⊢ Suc n ≤ m"
                },
                {
                    "args": "disjI2, {A: Suc n = Suc m, B: Suc n ≤ m}",
                    "id": "3.2.2.1",
                    "prevs": [
                        "3.2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n ≤ m, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n = Suc m ∨ Suc n ≤ m"
                },
                {
                    "args": "nat_less_eq_def_2, Suc n ≤ Suc m",
                    "id": "3.2.2.2",
                    "prevs": [
                        "3.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc n ≤ m, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ Suc m"
                },
                {
                    "args": "disjI1, {A: Suc n ≤ Suc m, B: Suc m ≤ Suc n}",
                    "id": "3.2.2.3",
                    "prevs": [
                        "3.2.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n ≤ m, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.2.4",
                    "prevs": [
                        "3.2.2.0",
                        "3.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ m ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m ≤ Suc n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "m ≤ Suc n",
                    "id": "3.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ Suc n ⊢ m ≤ Suc n"
                },
                {
                    "args": "nat_less_eq_def_2",
                    "id": "3.2.3.1",
                    "prevs": [
                        "3.2.3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ Suc n ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.2.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m = Suc n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "m = Suc n",
                    "id": "3.2.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.2.3.2.1",
                    "prevs": [
                        "3.2.3.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = Suc n ⊢ Suc n = m"
                },
                {
                    "args": "less_eq_refl, {n: m}",
                    "id": "3.2.3.2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ m"
                },
                {
                    "args": "disjI2, {A: m = Suc m, B: m ≤ m}",
                    "id": "3.2.3.2.3",
                    "prevs": [
                        "3.2.3.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m = Suc m ∨ m ≤ m"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc m",
                    "id": "3.2.3.2.4",
                    "prevs": [
                        "3.2.3.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = Suc n, m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m ≤ Suc m"
                },
                {
                    "args": "Suc n ≤ Suc m",
                    "id": "3.2.3.2.5",
                    "prevs": [
                        "3.2.3.2.1",
                        "3.2.3.2.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = Suc n, m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ Suc m"
                },
                {
                    "args": "disjI1, {A: Suc n ≤ Suc m, B: Suc m ≤ Suc n}",
                    "id": "3.2.3.2.6",
                    "prevs": [
                        "3.2.3.2.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.3.2.7",
                    "prevs": [
                        "3.2.3.2.0",
                        "3.2.3.2.6"
                    ],
                    "rule": "intros",
                    "th": "m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m = Suc n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m ≤ n ⟶ n ≤ m ∨ m ≤ n"
                },
                {
                    "args": "m ≤ n",
                    "id": "3.2.3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "disjI2, {A: n ≤ m, B: m ≤ n}",
                    "id": "3.2.3.3.1",
                    "prevs": [
                        "3.2.3.3.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ n ≤ m ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.2.3.3.2",
                    "prevs": [
                        "3.2.3.3.0",
                        "3.2.3.3.1"
                    ],
                    "rule": "intros",
                    "th": "m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m ≤ n ⟶ n ≤ m ∨ m ≤ n"
                },
                {
                    "args": "le_suc, m ≤ n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n",
                    "id": "3.2.3.4",
                    "prevs": [
                        "3.2.3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m ≤ n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "disjE",
                    "id": "3.2.3.5",
                    "prevs": [
                        "3.2.3.1",
                        "3.2.3.2",
                        "3.2.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ Suc n, Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.3.6",
                    "prevs": [
                        "3.2.3.0",
                        "3.2.3.5"
                    ],
                    "rule": "intros",
                    "th": "Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ m ≤ Suc n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "disjE",
                    "id": "3.2.4",
                    "prevs": [
                        "3.2.1",
                        "3.2.2",
                        "3.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n ≤ m ∨ m ≤ Suc n, ∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.2.5",
                    "prevs": [
                        "3.2.0",
                        "3.2.1",
                        "3.2.4"
                    ],
                    "rule": "intros",
                    "th": "∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n ⊢ ∀m. Suc n ≤ m ∨ m ≤ Suc n ⟶ Suc n ≤ Suc m ∨ Suc m ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (∀n1. n ≤ n1 ∨ n1 ≤ n ⟶ n ≤ Suc n1 ∨ Suc n1 ≤ n) ⟶ (∀n1. Suc n ≤ n1 ∨ n1 ≤ Suc n ⟶ Suc n ≤ Suc n1 ∨ Suc n1 ≤ Suc n)"
                },
                {
                    "args": "nat_induct, {P: λm. ∀n. m ≤ n ∨ n ≤ m ⟶ m ≤ Suc n ∨ Suc n ≤ m, x: m}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∀n. m ≤ n ∨ n ≤ m ⟶ m ≤ Suc n ∨ Suc n ≤ m"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ n ∨ n ≤ m, x: n}",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ n ∨ n ≤ m"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ∨ n ≤ m"
                }
            ],
            "prop": "m ≤ n ∨ n ≤ m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "2",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "fact_ids": [
                        "3.2.1"
                    ],
                    "goal_id": "3.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "3.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "3.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "3.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.3.0"
                    ],
                    "goal_id": "3.2.3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "fact_ids": [
                        "3.2.3.1"
                    ],
                    "goal_id": "3.2.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "3.2.3.2.0"
                    ],
                    "goal_id": "3.2.3.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.2.3.2.1"
                    ],
                    "goal_id": "3.2.3.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.3.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "3.2.3.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "3.2.3.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "3.2.3.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_suc"
                },
                {
                    "goal_id": "3.2.3.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.3.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lt_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "disjI2, {A: (0::nat) < 0, B: (0::nat) = 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) < 0 ∨ (0::nat) = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 < n ∨ n = 0 ⟶ 0 < Suc n ∨ Suc n = 0"
                },
                {
                    "args": "m, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "0 < m ∨ m = 0",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < m ∨ m = 0 ⊢ 0 < m ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < m ∨ m = 0 ⊢ 0 < m ⟶ 0 = m ∨ 0 < m"
                },
                {
                    "args": "0 < m",
                    "id": "2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < m ⊢ 0 < m"
                },
                {
                    "args": "disjI2, {A: 0 = m, B: 0 < m}",
                    "id": "2.2.1",
                    "prevs": [
                        "2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < m, 0 < m ∨ m = 0 ⊢ 0 = m ∨ 0 < m"
                },
                {
                    "args": "",
                    "id": "2.2.2",
                    "prevs": [
                        "2.2.0",
                        "2.2.1"
                    ],
                    "rule": "intros",
                    "th": "0 < m ∨ m = 0 ⊢ 0 < m ⟶ 0 = m ∨ 0 < m"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < m ∨ m = 0 ⊢ m = 0 ⟶ 0 = m ∨ 0 < m"
                },
                {
                    "args": "m = 0",
                    "id": "2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "eq_sym_eq, 0 = m",
                    "id": "2.3.1",
                    "prevs": [
                        "2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, 0 < m ∨ m = 0 ⊢ 0 = m"
                },
                {
                    "args": "disjI1, {A: 0 = m, B: 0 < m}",
                    "id": "2.3.2",
                    "prevs": [
                        "2.3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0, 0 < m ∨ m = 0 ⊢ 0 = m ∨ 0 < m"
                },
                {
                    "args": "",
                    "id": "2.3.3",
                    "prevs": [
                        "2.3.0",
                        "2.3.2"
                    ],
                    "rule": "intros",
                    "th": "0 < m ∨ m = 0 ⊢ m = 0 ⟶ 0 = m ∨ 0 < m"
                },
                {
                    "args": "disjE",
                    "id": "2.4",
                    "prevs": [
                        "2.1",
                        "2.2",
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m ∨ m = 0 ⊢ 0 = m ∨ 0 < m"
                },
                {
                    "args": "disjI1, {A: 0 = m ∨ 0 < m, B: Suc m = 0}",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 < m ∨ m = 0 ⊢ (0 = m ∨ 0 < m) ∨ Suc m = 0"
                },
                {
                    "args": "nat_less_def_2, 0 < Suc m ∨ Suc m = 0",
                    "id": "2.6",
                    "prevs": [
                        "2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < m ∨ m = 0 ⊢ 0 < Suc m ∨ Suc m = 0"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. 0 < m ∨ m = 0 ⟶ 0 < Suc m ∨ Suc m = 0"
                },
                {
                    "args": "nat_induct, {P: λm::nat. 0 < m ∨ m = 0, x: m}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < m ∨ m = 0"
                },
                {
                    "args": "disjI2, {A: m < 0, B: 0 < m ∨ m = 0}",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m < 0 ∨ 0 < m ∨ m = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m < n ∨ n < m ∨ m = n ⟶ m < Suc n ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m < n ∨ n < m ∨ m = n",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ m < n ∨ n < m ∨ m = n"
                },
                {
                    "args": "",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ m < n ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "m < n",
                    "id": "5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "disjI2, {A: m = n, B: m < n}",
                    "id": "5.2.1",
                    "prevs": [
                        "5.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < n, m < n ∨ n < m ∨ m = n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "disjI1, {A: m = n ∨ m < n, B: Suc n < m ∨ m = Suc n}",
                    "id": "5.2.2",
                    "prevs": [
                        "5.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < n, m < n ∨ n < m ∨ m = n ⊢ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.2.3",
                    "prevs": [
                        "5.2.0",
                        "5.2.2"
                    ],
                    "rule": "intros",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ m < n ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ n < m ∨ m = n ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "n < m ∨ m = n",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < m ∨ m = n ⊢ n < m ∨ m = n"
                },
                {
                    "args": "",
                    "id": "5.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ n < m ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "n < m",
                    "id": "5.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < m ⊢ n < m"
                },
                {
                    "args": "",
                    "id": "5.3.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < m, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ m ≤ Suc n ∧ ¬(m = Suc n) ⟶ m ≤ n"
                },
                {
                    "args": "m ≤ Suc n ∧ ¬(m = Suc n)",
                    "id": "5.3.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ Suc n ∧ ¬(m = Suc n) ⊢ m ≤ Suc n ∧ ¬(m = Suc n)"
                },
                {
                    "args": "conjD1",
                    "id": "5.3.1.1.1",
                    "prevs": [
                        "5.3.1.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ Suc n ∧ ¬(m = Suc n) ⊢ m ≤ Suc n"
                },
                {
                    "args": "nat_less_eq_def_2",
                    "id": "5.3.1.1.2",
                    "prevs": [
                        "5.3.1.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ Suc n ∧ ¬(m = Suc n) ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "conjD2",
                    "id": "5.3.1.1.3",
                    "prevs": [
                        "5.3.1.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ Suc n ∧ ¬(m = Suc n) ⊢ ¬(m = Suc n)"
                },
                {
                    "args": "",
                    "id": "5.3.1.1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < m, n < m ∨ m = n, m ≤ Suc n ∧ ¬(m = Suc n), m < n ∨ n < m ∨ m = n ⊢ m = Suc n ⟶ m ≤ n"
                },
                {
                    "args": "m = Suc n",
                    "id": "5.3.1.1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = Suc n ⊢ m = Suc n"
                },
                {
                    "args": "negE_gen, {A: m = Suc n, C: m ≤ n}",
                    "id": "5.3.1.1.4.1",
                    "prevs": [
                        "5.3.1.1.3",
                        "5.3.1.1.4.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = Suc n, m ≤ Suc n ∧ ¬(m = Suc n) ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3.1.1.4.2",
                    "prevs": [
                        "5.3.1.1.4.0",
                        "5.3.1.1.4.1"
                    ],
                    "rule": "intros",
                    "th": "n < m, n < m ∨ m = n, m ≤ Suc n ∧ ¬(m = Suc n), m < n ∨ n < m ∨ m = n ⊢ m = Suc n ⟶ m ≤ n"
                },
                {
                    "args": "m ≤ n ⟶ m ≤ n",
                    "id": "5.3.1.1.5",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m ≤ n ⟶ m ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "5.3.1.1.6",
                    "prevs": [
                        "5.3.1.1.2",
                        "5.3.1.1.4",
                        "5.3.1.1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < m, n < m ∨ m = n, m ≤ Suc n ∧ ¬(m = Suc n), m < n ∨ n < m ∨ m = n ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "5.3.1.1.7",
                    "prevs": [
                        "5.3.1.1.0",
                        "5.3.1.1.6"
                    ],
                    "rule": "intros",
                    "th": "n < m, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ m ≤ Suc n ∧ ¬(m = Suc n) ⟶ m ≤ n"
                },
                {
                    "args": "not_lt, ¬(Suc n < m) ∧ ¬(m = Suc n) ⟶ ¬(n < m)",
                    "id": "5.3.1.2",
                    "prevs": [
                        "5.3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < m, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ ¬(Suc n < m) ∧ ¬(m = Suc n) ⟶ ¬(n < m)"
                },
                {
                    "args": "de_morgan_thm2, ¬(Suc n < m ∨ m = Suc n) ⟶ ¬(n < m)",
                    "id": "5.3.1.3",
                    "prevs": [
                        "5.3.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < m, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ ¬(Suc n < m ∨ m = Suc n) ⟶ ¬(n < m)"
                },
                {
                    "args": "contrapositive",
                    "id": "5.3.1.4",
                    "prevs": [
                        "5.3.1.0",
                        "5.3.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < m, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "disjI2, {A: m = n ∨ m < n, B: Suc n < m ∨ m = Suc n}",
                    "id": "5.3.1.5",
                    "prevs": [
                        "5.3.1.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n < m, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.3.1.6",
                    "prevs": [
                        "5.3.1.0",
                        "5.3.1.5"
                    ],
                    "rule": "intros",
                    "th": "n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ n < m ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ m = n ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "m = n",
                    "id": "5.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "disjI1, {A: m = n, B: m < n}",
                    "id": "5.3.2.1",
                    "prevs": [
                        "5.3.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = n, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "disjI1, {A: m = n ∨ m < n, B: Suc n < m ∨ m = Suc n}",
                    "id": "5.3.2.2",
                    "prevs": [
                        "5.3.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = n, n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.3.2.3",
                    "prevs": [
                        "5.3.2.0",
                        "5.3.2.2"
                    ],
                    "rule": "intros",
                    "th": "n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ m = n ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "disjE",
                    "id": "5.3.3",
                    "prevs": [
                        "5.3.0",
                        "5.3.1",
                        "5.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < m ∨ m = n, m < n ∨ n < m ∨ m = n ⊢ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.3.4",
                    "prevs": [
                        "5.3.0",
                        "5.3.3"
                    ],
                    "rule": "intros",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ n < m ∨ m = n ⟶ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "disjE",
                    "id": "5.4",
                    "prevs": [
                        "5.1",
                        "5.2",
                        "5.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ (m = n ∨ m < n) ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "nat_less_def_2, m < Suc n ∨ Suc n < m ∨ m = Suc n",
                    "id": "5.5",
                    "prevs": [
                        "5.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n ∨ n < m ∨ m = n ⊢ m < Suc n ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m < n ∨ n < m ∨ m = n ⟶ m < Suc n ∨ Suc n < m ∨ m = Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. m < n ∨ n < m ∨ m = n, x: n}",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m < n ∨ n < m ∨ m = n"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ∨ n < m ∨ m = n"
                }
            ],
            "prop": "m < n ∨ n < m ∨ m = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "5.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.0"
                    ],
                    "goal_id": "5.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "5.3.1.0"
                    ],
                    "goal_id": "5.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "5.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_lt"
                },
                {
                    "goal_id": "5.3.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.1.1.0"
                    ],
                    "goal_id": "5.3.1.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "5.3.1.1.1"
                    ],
                    "goal_id": "5.3.1.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "fact_ids": [
                        "5.3.1.1.0"
                    ],
                    "goal_id": "5.3.1.1.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "5.3.1.1.2"
                    ],
                    "goal_id": "5.3.1.1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "5.3.1.1.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.1.1.3",
                        "5.3.1.1.4.0"
                    ],
                    "goal_id": "5.3.1.1.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "5.3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "5.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "let_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "less_eq_refl, {n: (0::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 0"
                },
                {
                    "args": "disjI1, {A: (0::nat) ≤ 0, B: (0::nat) < 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 0 ∨ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n ≤ 0 ∨ 0 < n ⟶ Suc n ≤ 0 ∨ 0 < Suc n"
                },
                {
                    "args": "m, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "m ≤ 0 ∨ 0 < m",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ 0 ∨ 0 < m ⊢ m ≤ 0 ∨ 0 < m"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: m}",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc m)"
                },
                {
                    "args": "ineq_sym",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ 0 ∨ 0 < m ⊢ ¬(Suc m = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ 0 ∨ 0 < m ⊢ 0 < Suc m"
                },
                {
                    "args": "disjI2, {A: Suc m ≤ 0, B: 0 < Suc m}",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ 0 ∨ 0 < m ⊢ Suc m ≤ 0 ∨ 0 < Suc m"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀m. m ≤ 0 ∨ 0 < m ⟶ Suc m ≤ 0 ∨ 0 < Suc m"
                },
                {
                    "args": "nat_induct, {P: λm::nat. m ≤ 0 ∨ 0 < m, x: m}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ 0 ∨ 0 < m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ≤ n ∨ n < m ⟶ m ≤ Suc n ∨ Suc n < m"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ≤ n ∨ n < m",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ∨ n < m ⊢ m ≤ n ∨ n < m"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ∨ n < m ⊢ m ≤ n ⟶ (m = Suc n ∨ m ≤ n) ∨ Suc n < m"
                },
                {
                    "args": "m ≤ n",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "disjI2, {A: m = Suc n, B: m ≤ n}",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, m ≤ n ∨ n < m ⊢ m = Suc n ∨ m ≤ n"
                },
                {
                    "args": "disjI1, {A: m = Suc n ∨ m ≤ n, B: Suc n < m}",
                    "id": "4.2.2",
                    "prevs": [
                        "4.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, m ≤ n ∨ n < m ⊢ (m = Suc n ∨ m ≤ n) ∨ Suc n < m"
                },
                {
                    "args": "",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.0",
                        "4.2.2"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ∨ n < m ⊢ m ≤ n ⟶ (m = Suc n ∨ m ≤ n) ∨ Suc n < m"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ∨ n < m ⊢ n < 0 ⟶ (0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0"
                },
                {
                    "args": "n < 0",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < 0 ⊢ n < 0"
                },
                {
                    "args": "",
                    "id": "4.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < 0, m ≤ n ∨ n < m ⊢ ¬((0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0) ⟶ ¬(n < 0)"
                },
                {
                    "args": "¬((0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0)",
                    "id": "4.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0) ⊢ ¬((0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0)"
                },
                {
                    "args": "le_0, {n: n}",
                    "id": "4.3.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "not_lt, ¬(n < 0)",
                    "id": "4.3.1.2",
                    "prevs": [
                        "4.3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < 0, m ≤ n ∨ n < m, ¬((0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0) ⊢ ¬(n < 0)"
                },
                {
                    "args": "",
                    "id": "4.3.1.3",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.2"
                    ],
                    "rule": "intros",
                    "th": "n < 0, m ≤ n ∨ n < m ⊢ ¬((0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0) ⟶ ¬(n < 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "4.3.2",
                    "prevs": [
                        "4.3.0",
                        "4.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < 0, m ≤ n ∨ n < m ⊢ (0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0"
                },
                {
                    "args": "",
                    "id": "4.3.3",
                    "prevs": [
                        "4.3.0",
                        "4.3.2"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ∨ n < m ⊢ n < 0 ⟶ (0 = Suc n ∨ 0 ≤ n) ∨ Suc n < 0"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ∨ n < m ⊢ ∀n1. (n < n1 ⟶ (n1 = Suc n ∨ n1 ≤ n) ∨ Suc n < n1) ⟶ n < Suc n1 ⟶ (Suc n1 = Suc n ∨ Suc n1 ≤ n) ∨ Suc n < Suc n1"
                },
                {
                    "args": "m1, nat",
                    "id": "4.4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m1"
                },
                {
                    "args": "n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1",
                    "id": "4.4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1"
                },
                {
                    "args": "n < Suc m1",
                    "id": "4.4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < Suc m1 ⊢ n < Suc m1"
                },
                {
                    "args": "nat_less_def_2",
                    "id": "4.4.3",
                    "prevs": [
                        "4.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n < Suc m1 ⊢ n = m1 ∨ n < m1"
                },
                {
                    "args": "",
                    "id": "4.4.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ n = m1 ⟶ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "n = m1",
                    "id": "4.4.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m1 ⊢ n = m1"
                },
                {
                    "args": "Suc m1 = Suc n",
                    "id": "4.4.4.1",
                    "prevs": [
                        "4.4.4.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m1 ⊢ Suc m1 = Suc n"
                },
                {
                    "args": "disjI1, {A: Suc m1 = Suc n, B: Suc m1 ≤ n}",
                    "id": "4.4.4.2",
                    "prevs": [
                        "4.4.4.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = m1, n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ Suc m1 = Suc n ∨ Suc m1 ≤ n"
                },
                {
                    "args": "disjI1, {A: Suc m1 = Suc n ∨ Suc m1 ≤ n, B: Suc n < Suc m1}",
                    "id": "4.4.4.3",
                    "prevs": [
                        "4.4.4.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = m1, n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "",
                    "id": "4.4.4.4",
                    "prevs": [
                        "4.4.4.0",
                        "4.4.4.3"
                    ],
                    "rule": "intros",
                    "th": "n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ n = m1 ⟶ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "",
                    "id": "4.4.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ n < m1 ⟶ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "n < m1",
                    "id": "4.4.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < m1 ⊢ n < m1"
                },
                {
                    "args": "lt_suc, Suc n < Suc m1",
                    "id": "4.4.5.1",
                    "prevs": [
                        "4.4.5.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < m1, n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ Suc n < Suc m1"
                },
                {
                    "args": "disjI2, {A: Suc m1 = Suc n ∨ Suc m1 ≤ n, B: Suc n < Suc m1}",
                    "id": "4.4.5.2",
                    "prevs": [
                        "4.4.5.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n < m1, n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "",
                    "id": "4.4.5.3",
                    "prevs": [
                        "4.4.5.0",
                        "4.4.5.2"
                    ],
                    "rule": "intros",
                    "th": "n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ n < m1 ⟶ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "disjE",
                    "id": "4.4.6",
                    "prevs": [
                        "4.4.3",
                        "4.4.4",
                        "4.4.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < Suc m1, m ≤ n ∨ n < m, n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1 ⊢ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "",
                    "id": "4.4.7",
                    "prevs": [
                        "4.4.0",
                        "4.4.1",
                        "4.4.2",
                        "4.4.6"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ∨ n < m ⊢ ∀m1. (n < m1 ⟶ (m1 = Suc n ∨ m1 ≤ n) ∨ Suc n < m1) ⟶ n < Suc m1 ⟶ (Suc m1 = Suc n ∨ Suc m1 ≤ n) ∨ Suc n < Suc m1"
                },
                {
                    "args": "nat_induct, {P: λm. n < m ⟶ (m = Suc n ∨ m ≤ n) ∨ Suc n < m, x: m}",
                    "id": "4.5",
                    "prevs": [
                        "4.3",
                        "4.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n ∨ n < m ⊢ n < m ⟶ (m = Suc n ∨ m ≤ n) ∨ Suc n < m"
                },
                {
                    "args": "disjE",
                    "id": "4.6",
                    "prevs": [
                        "4.1",
                        "4.2",
                        "4.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ∨ n < m ⊢ (m = Suc n ∨ m ≤ n) ∨ Suc n < m"
                },
                {
                    "args": "nat_less_eq_def_2, m ≤ Suc n ∨ Suc n < m",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ∨ n < m ⊢ m ≤ Suc n ∨ Suc n < m"
                },
                {
                    "args": "",
                    "id": "4.8",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ≤ n ∨ n < m ⟶ m ≤ Suc n ∨ Suc n < m"
                },
                {
                    "args": "nat_induct, {P: λn. m ≤ n ∨ n < m, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ≤ n ∨ n < m"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ∨ n < m"
                }
            ],
            "prop": "m ≤ n ∨ n < m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "ineq_sym"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "4.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_lt"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "4.4",
                    "method_name": "introduction",
                    "names": "m1"
                },
                {
                    "fact_ids": [
                        "4.4.2"
                    ],
                    "goal_id": "4.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "fact_ids": [
                        "4.4.3"
                    ],
                    "goal_id": "4.4.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.4.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.4.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "4.4.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "4.4.4.0"
                    ],
                    "goal_id": "4.4.4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.4.5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.4.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "4.4.5.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lt_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (0::nat) < 0 ⟶ 0 < m ∧ (0::nat) < 0"
                },
                {
                    "args": "(0::nat) < 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) < 0 ⊢ (0::nat) < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "(0::nat) < 0 ⊢ false"
                },
                {
                    "args": "not_false_res, 0 < m ∧ (0::nat) < 0",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "resolve_theorem",
                    "th": "(0::nat) < 0 ⊢ 0 < m ∧ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (0::nat) < 0 ⟶ 0 < m ∧ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < m ∧ (0::nat) < 0 ⟶ (0::nat) < 0"
                },
                {
                    "args": "0 < m ∧ (0::nat) < 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < m ∧ (0::nat) < 0 ⊢ 0 < m ∧ (0::nat) < 0"
                },
                {
                    "args": "conjD2",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m ∧ (0::nat) < 0 ⊢ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < m ∧ (0::nat) < 0 ⟶ (0::nat) < 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (0::nat) < 0 ⟷ 0 < m ∧ (0::nat) < 0"
                },
                {
                    "args": "mult_0_right, 0 < m * 0 ⟷ 0 < m ∧ (0::nat) < 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < m * 0 ⟷ 0 < m ∧ (0::nat) < 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 < m * n ⟷ 0 < m ∧ 0 < n ⟶ 0 < m * Suc n ⟷ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "0 < m * n ⟷ 0 < m ∧ 0 < n",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m * n ⟷ 0 < m ∧ 0 < n"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m * Suc n ⟶ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "0 < m * Suc n",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < m * Suc n ⊢ 0 < m * Suc n"
                },
                {
                    "args": "",
                    "id": "4.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬¬(m = 0) ⟶ ¬(0 < m * Suc n)"
                },
                {
                    "args": "¬¬(m = 0)",
                    "id": "4.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(m = 0) ⊢ ¬¬(m = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "4.2.1.1",
                    "prevs": [
                        "4.2.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(m = 0) ⊢ m = 0"
                },
                {
                    "args": "false ⟶ false",
                    "id": "4.2.1.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "4.2.1.3",
                    "prevs": [
                        "4.2.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬¬(m = 0), 0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬((0::nat) < 0)",
                    "id": "4.2.1.4",
                    "prevs": [
                        "4.2.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬¬(m = 0), 0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬((0::nat) < 0)"
                },
                {
                    "args": "nat_times_def_1, ¬(0 < 0 * Suc n)",
                    "id": "4.2.1.5",
                    "prevs": [
                        "4.2.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬¬(m = 0), 0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < 0 * Suc n)"
                },
                {
                    "args": "¬(0 < m * Suc n)",
                    "id": "4.2.1.6",
                    "prevs": [
                        "4.2.1.1",
                        "4.2.1.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬¬(m = 0), 0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < m * Suc n)"
                },
                {
                    "args": "",
                    "id": "4.2.1.7",
                    "prevs": [
                        "4.2.1.0",
                        "4.2.1.6"
                    ],
                    "rule": "intros",
                    "th": "0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬¬(m = 0) ⟶ ¬(0 < m * Suc n)"
                },
                {
                    "args": "contrapositive",
                    "id": "4.2.2",
                    "prevs": [
                        "4.2.0",
                        "4.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(m = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m"
                },
                {
                    "args": "le_0, {n: n}",
                    "id": "4.2.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, 0 < Suc n",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < Suc n"
                },
                {
                    "args": "conjI",
                    "id": "4.2.6",
                    "prevs": [
                        "4.2.3",
                        "4.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m * Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "4.2.7",
                    "prevs": [
                        "4.2.0",
                        "4.2.6"
                    ],
                    "rule": "intros",
                    "th": "0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m * Suc n ⟶ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m ∧ 0 < Suc n ⟶ 0 < m * Suc n"
                },
                {
                    "args": "0 < m ∧ 0 < Suc n",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < m ∧ 0 < Suc n ⊢ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "4.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬¬(m * Suc n = 0) ⟶ ¬(0 < m ∧ 0 < Suc n)"
                },
                {
                    "args": "¬¬(m * Suc n = 0)",
                    "id": "4.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(m * Suc n = 0) ⊢ ¬¬(m * Suc n = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "4.3.1.1",
                    "prevs": [
                        "4.3.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(m * Suc n = 0) ⊢ m * Suc n = 0"
                },
                {
                    "args": "mult_nonzero",
                    "id": "4.3.1.2",
                    "prevs": [
                        "4.3.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬¬(m * Suc n = 0) ⊢ m = 0 ∨ Suc n = 0"
                },
                {
                    "args": "",
                    "id": "4.3.1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ m = 0 ⟶ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "m = 0",
                    "id": "4.3.1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "false ⟶ false",
                    "id": "4.3.1.3.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "4.3.1.3.2",
                    "prevs": [
                        "4.3.1.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬((0::nat) < 0)",
                    "id": "4.3.1.3.3",
                    "prevs": [
                        "4.3.1.3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬((0::nat) < 0)"
                },
                {
                    "args": "¬(0 < m)",
                    "id": "4.3.1.3.4",
                    "prevs": [
                        "4.3.1.3.0",
                        "4.3.1.3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < m)"
                },
                {
                    "args": "disjI1, {A: ¬(0 < m), B: ¬(0 < Suc n)}",
                    "id": "4.3.1.3.5",
                    "prevs": [
                        "4.3.1.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "",
                    "id": "4.3.1.3.6",
                    "prevs": [
                        "4.3.1.3.0",
                        "4.3.1.3.5"
                    ],
                    "rule": "intros",
                    "th": "¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ m = 0 ⟶ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "",
                    "id": "4.3.1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ Suc n = 0 ⟶ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "Suc n = 0",
                    "id": "4.3.1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = 0 ⊢ Suc n = 0"
                },
                {
                    "args": "false ⟶ false",
                    "id": "4.3.1.4.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "4.3.1.4.2",
                    "prevs": [
                        "4.3.1.4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬((0::nat) < 0)",
                    "id": "4.3.1.4.3",
                    "prevs": [
                        "4.3.1.4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc n = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬((0::nat) < 0)"
                },
                {
                    "args": "¬(0 < Suc n)",
                    "id": "4.3.1.4.4",
                    "prevs": [
                        "4.3.1.4.0",
                        "4.3.1.4.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Suc n = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < Suc n)"
                },
                {
                    "args": "disjI2, {A: ¬(0 < m), B: ¬(0 < Suc n)}",
                    "id": "4.3.1.4.5",
                    "prevs": [
                        "4.3.1.4.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "Suc n = 0, ¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "",
                    "id": "4.3.1.4.6",
                    "prevs": [
                        "4.3.1.4.0",
                        "4.3.1.4.5"
                    ],
                    "rule": "intros",
                    "th": "¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ Suc n = 0 ⟶ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "disjE",
                    "id": "4.3.1.5",
                    "prevs": [
                        "4.3.1.2",
                        "4.3.1.3",
                        "4.3.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < m) ∨ ¬(0 < Suc n)"
                },
                {
                    "args": "de_morgan_thm1, ¬(0 < m ∧ 0 < Suc n)",
                    "id": "4.3.1.6",
                    "prevs": [
                        "4.3.1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬¬(m * Suc n = 0), 0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(0 < m ∧ 0 < Suc n)"
                },
                {
                    "args": "",
                    "id": "4.3.1.7",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.6"
                    ],
                    "rule": "intros",
                    "th": "0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬¬(m * Suc n = 0) ⟶ ¬(0 < m ∧ 0 < Suc n)"
                },
                {
                    "args": "contrapositive",
                    "id": "4.3.2",
                    "prevs": [
                        "4.3.0",
                        "4.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ ¬(m * Suc n = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "4.3.3",
                    "prevs": [
                        "4.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m ∧ 0 < Suc n, 0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m * Suc n"
                },
                {
                    "args": "",
                    "id": "4.3.4",
                    "prevs": [
                        "4.3.0",
                        "4.3.3"
                    ],
                    "rule": "intros",
                    "th": "0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m ∧ 0 < Suc n ⟶ 0 < m * Suc n"
                },
                {
                    "args": "iffI",
                    "id": "4.4",
                    "prevs": [
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < m * n ⟷ 0 < m ∧ 0 < n ⊢ 0 < m * Suc n ⟷ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "",
                    "id": "4.5",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. 0 < m * n ⟷ 0 < m ∧ 0 < n ⟶ 0 < m * Suc n ⟷ 0 < m ∧ 0 < Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. 0 < m * n ⟷ 0 < m ∧ 0 < n, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < m * n ⟷ 0 < m ∧ 0 < n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < m * n ⟷ 0 < m ∧ 0 < n"
                }
            ],
            "prop": "0 < m * n ⟷ 0 < m ∧ 0 < n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.1.0"
                    ],
                    "goal_id": "4.2.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "4.2.1.1"
                    ],
                    "goal_id": "4.2.1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "4.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "4.2.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "4.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "4.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "4.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.1.0"
                    ],
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "4.3.1.1"
                    ],
                    "goal_id": "4.3.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "mult_nonzero"
                },
                {
                    "goal_id": "4.3.1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "4.3.1.2"
                    ],
                    "goal_id": "4.3.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.3.1.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "4.3.1.3.0"
                    ],
                    "goal_id": "4.3.1.3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "4.3.1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "4.3.1.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.1.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "4.3.1.4.0"
                    ],
                    "goal_id": "4.3.1.4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.1.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "4.3.1.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "le_mult2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m ≤ n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "p ≤ q",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ≤ q ⊢ p ≤ q"
                },
                {
                    "args": "less_eq_exist",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ n ⊢ ∃p. n = m + p"
                },
                {
                    "args": "less_eq_exist",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "p ≤ q ⊢ ∃p1. q = p + p1"
                },
                {
                    "args": "a, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "n = m + a",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + a ⊢ n = m + a"
                },
                {
                    "args": "b, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "q = p + b",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q = p + b ⊢ q = p + b"
                },
                {
                    "args": "(m + a) * (p + b) = m * p + (a * p + m * b + a * b)",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + a) * (p + b) = m * p + (a * p + m * b + a * b)"
                },
                {
                    "args": "(m + a) * q = m * p + (a * p + m * b + a * b)",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ n, p ≤ q, n = m + a, q = p + b ⊢ (m + a) * q = m * p + (a * p + m * b + a * b)"
                },
                {
                    "args": "n * q = m * p + (a * p + m * b + a * b)",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ n, p ≤ q, n = m + a, q = p + b ⊢ n * q = m * p + (a * p + m * b + a * b)"
                },
                {
                    "args": "exI, {P: λp1. n * q = m * p + p1, a: a * p + m * b + a * b}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, p ≤ q, n = m + a, q = p + b ⊢ ∃a1. n * q = m * p + a1"
                },
                {
                    "args": "less_eq_exist, m * p ≤ n * q",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, p ≤ q, n = m + a, q = p + b ⊢ m * p ≤ n * q"
                },
                {
                    "args": "∃p1. q = p + p1, ∃p. n = m + p",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟶ p ≤ q ⟶ m * p ≤ n * q"
                }
            ],
            "prop": "m ≤ n ⟶ p ≤ q ⟶ m * p ≤ n * q",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "a"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "b"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "a * p + m * b + a * b"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_mult_rcancel",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m * p ≤ n * p ⟷ m ≤ n ∨ p = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ m * p ≤ n * p ⟷ m ≤ n ∨ p = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * p ≤ n * p ⟷ m ≤ n ∨ p = 0"
                }
            ],
            "prop": "m * p ≤ n * p ⟷ m ≤ n ∨ p = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lt_mult_rcancel",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m * p < n * p ⟷ m < n ∧ ¬(p = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ m * p < n * p ⟷ m < n ∧ ¬(p = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * p < n * p ⟷ m < n ∧ ¬(p = 0)"
                }
            ],
            "prop": "m * p < n * p ⟷ m < n ∧ ¬(p = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "lt_mult2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m < n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "p < q",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p < q ⊢ p < q"
                },
                {
                    "args": "lt_imp_le",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, p < q ⊢ m ≤ n"
                },
                {
                    "args": "disjI1, {A: m ≤ n, B: p = 0}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m < n, p < q ⊢ m ≤ n ∨ p = 0"
                },
                {
                    "args": "le_mult_rcancel, m * p ≤ n * p",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n, p < q ⊢ m * p ≤ n * p"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < n, p < q ⊢ ¬¬(n = 0) ⟶ ¬(m < n)"
                },
                {
                    "args": "¬¬(n = 0)",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(n = 0) ⊢ ¬¬(n = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "5.1",
                    "prevs": [
                        "5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(n = 0) ⊢ n = 0"
                },
                {
                    "args": "false ⟶ false",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "5.3",
                    "prevs": [
                        "5.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, p < q, ¬¬(n = 0) ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬(m < 0)",
                    "id": "5.4",
                    "prevs": [
                        "5.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n, p < q, ¬¬(n = 0) ⊢ ¬(m < 0)"
                },
                {
                    "args": "¬(m < n)",
                    "id": "5.5",
                    "prevs": [
                        "5.1",
                        "5.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m < n, p < q, ¬¬(n = 0) ⊢ ¬(m < n)"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "5.0",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "m < n, p < q ⊢ ¬¬(n = 0) ⟶ ¬(m < n)"
                },
                {
                    "args": "contrapositive",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, p < q ⊢ ¬(n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "7",
                    "prevs": [
                        "1",
                        "6"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, p < q ⊢ p < q ∧ ¬(n = 0)"
                },
                {
                    "args": "lt_mult_rcancel, p * n < q * n",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n, p < q ⊢ p * n < q * n"
                },
                {
                    "args": "mult_comm, n * p < n * q",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < n, p < q ⊢ n * p < n * q"
                },
                {
                    "args": "let_trans",
                    "id": "10",
                    "prevs": [
                        "4",
                        "9"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, p < q ⊢ m * p < n * q"
                },
                {
                    "args": "",
                    "id": "11",
                    "prevs": [
                        "0",
                        "1",
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ⟶ p < q ⟶ m * p < n * q"
                }
            ],
            "prop": "m < n ⟶ p < q ⟶ m * p < n * q",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_m": "n * p",
                    "theorem": "let_trans"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_mult_rcancel"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_mult_rcancel"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.0"
                    ],
                    "goal_id": "5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "le_square_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_0, {n: (0::nat) * 0}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 0 * 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n ≤ n * n ⟶ Suc n ≤ Suc n * Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n ≤ n * n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n ≤ n * n ⊢ n ≤ n * n"
                },
                {
                    "args": "le_add, {m: Suc n, n: Suc n * n}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Suc n ≤ Suc n + Suc n * n"
                },
                {
                    "args": "mult_Suc_right, Suc n ≤ Suc n * Suc n",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n ≤ n * n ⊢ Suc n ≤ Suc n * Suc n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n ≤ n * n ⟶ Suc n ≤ Suc n * Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. n ≤ n * n, x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n ≤ n * n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ n ≤ n * n"
                }
            ],
            "prop": "n ≤ n * n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_add"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "minus",
            "rules": [
                {
                    "prop": "n - 0 = n"
                },
                {
                    "prop": "n - Suc m = Pre (n - m)"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "nat_minus_l0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, (0::nat) - 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) - 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 - n = 0 ⟶ 0 - Suc n = 0"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "0 - n = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 - n = 0 ⊢ 0 - n = 0"
                },
                {
                    "args": "Pre_def_1, Pre 0 = 0",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre 0 = 0"
                },
                {
                    "args": "Pre (0 - n) = 0",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "0 - n = 0 ⊢ Pre (0 - n) = 0"
                },
                {
                    "args": "nat_minus_def_2, 0 - Suc n = 0",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 - n = 0 ⊢ 0 - Suc n = 0"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. 0 - n = 0 ⟶ 0 - Suc n = 0"
                },
                {
                    "args": "nat_induct, {P: λx::nat. 0 - x = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 - x = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 - x = 0"
                }
            ],
            "prop": "0 - x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "Pre_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "nat_minus_presuc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Pre_def_2, Pre (Suc x) = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Suc x) = x"
                },
                {
                    "args": "nat_minus_def_1, Pre (Suc x - 0) = x - 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Suc x - 0) = x - 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. Pre (Suc x - n) = x - n ⟶ Pre (Suc x - Suc n) = x - Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "Pre (Suc x - n) = x - n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Pre (Suc x - n) = x - n ⊢ Pre (Suc x - n) = x - n"
                },
                {
                    "args": "Pre (Pre (Suc x - n)) = Pre (x - n)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Pre (Suc x - n) = x - n ⊢ Pre (Pre (Suc x - n)) = Pre (x - n)"
                },
                {
                    "args": "nat_minus_def_2, Pre (Suc x - Suc n) = x - Suc n",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Pre (Suc x - n) = x - n ⊢ Pre (Suc x - Suc n) = x - Suc n"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. Pre (Suc x - n) = x - n ⟶ Pre (Suc x - Suc n) = x - Suc n"
                },
                {
                    "args": "nat_induct, {P: λy. Pre (Suc x - y) = x - y, x: y}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Pre (Suc x - y) = x - y"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ Pre (Suc x - y) = x - y"
                }
            ],
            "prop": "Pre (Suc x - y) = x - y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "Pre_def_2"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "nat_minus_suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Pre_def_2, Pre (Suc x) = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Suc x) = x"
                },
                {
                    "args": "nat_minus_def_1, Pre (Suc x - 0) = x - 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Suc x - 0) = x - 0"
                },
                {
                    "args": "nat_minus_def_2, Suc x - Suc 0 = x - 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc x - Suc 0 = x - 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. Suc x - Suc n = x - n ⟶ Suc x - Suc (Suc n) = x - Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "Suc x - Suc n = x - n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc x - Suc n = x - n ⊢ Suc x - Suc n = x - n"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "Suc x - Suc n = x - n ⊢ x - Suc n = Pre (x - n)"
                },
                {
                    "args": "nat_minus_presuc, Pre (Suc x - Suc n) = Pre (x - n)",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc x - Suc n = x - n ⊢ Pre (Suc x - Suc n) = Pre (x - n)"
                },
                {
                    "args": "nat_minus_def_2, Suc x - Suc (Suc n) = x - Suc n",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc x - Suc n = x - n ⊢ Suc x - Suc (Suc n) = x - Suc n"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. Suc x - Suc n = x - n ⟶ Suc x - Suc (Suc n) = x - Suc n"
                },
                {
                    "args": "nat_induct, {P: λy. Suc x - Suc y = x - y, x: y}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Suc x - Suc y = x - y"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc x - Suc y = x - y"
                }
            ],
            "prop": "Suc x - Suc y = x - y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "Pre_def_2"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_presuc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "nat_minus_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, (0::nat) - 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) - 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n - n = 0 ⟶ Suc n - Suc n = 0"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n - n = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n - n = 0 ⊢ n - n = 0"
                },
                {
                    "args": "nat_minus_suc, Suc n - Suc n = 0",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n - n = 0 ⊢ Suc n - Suc n = 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n - n = 0 ⟶ Suc n - Suc n = 0"
                },
                {
                    "args": "nat_induct, {P: λx::nat. x - x = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x - x = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x - x = 0"
                }
            ],
            "prop": "x - x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "nat_plus_minus",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, x - 0 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x - 0 = x"
                },
                {
                    "args": "add_0_right, x + 0 - 0 = x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x + 0 - 0 = x"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. x + n - n = x ⟶ x + Suc n - Suc n = x"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "x + n - n = x",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + n - n = x ⊢ x + n - n = x"
                },
                {
                    "args": "nat_minus_suc, Suc (x + n) - Suc n = x",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + n - n = x ⊢ Suc (x + n) - Suc n = x"
                },
                {
                    "args": "add_Suc_right, x + Suc n - Suc n = x",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + n - n = x ⊢ x + Suc n - Suc n = x"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. x + n - n = x ⟶ x + Suc n - Suc n = x"
                },
                {
                    "args": "nat_induct, {P: λy. x + y - y = x, x: y}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y - y = x"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y - y = x"
                }
            ],
            "prop": "x + y - y = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "nat_minus_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "nat_plus_minus_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_minus, y + x - x = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ y + x - x = y"
                },
                {
                    "args": "add_comm, x + y - x = y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x + y - x = y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y - x = y"
                }
            ],
            "prop": "x + y - x = y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_minus"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite_sym",
                "hint_rewrite"
            ],
            "name": "sub_eq_0",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "nat_less_eq_def_1, x = 0 ⟷ x ≤ 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x = 0 ⟷ x ≤ 0"
                },
                {
                    "args": "nat_minus_def_1, x - 0 = 0 ⟷ x ≤ 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x - 0 = 0 ⟷ x ≤ 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (0::nat) = 0 ⟷ 0 ≤ n ⟶ (0::nat) = 0 ⟷ 0 ≤ Suc n"
                },
                {
                    "args": "y, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(0::nat) = 0 ⟷ 0 ≤ y",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 0 ⟷ 0 ≤ y ⊢ (0::nat) = 0 ⟷ 0 ≤ y"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(0::nat) = 0 ⟷ 0 ≤ y ⊢ (0::nat) = 0 ⟶ 0 ≤ Suc y"
                },
                {
                    "args": "(0::nat) = 0",
                    "id": "2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 0 ⊢ (0::nat) = 0"
                },
                {
                    "args": "le_0, {n: Suc y}",
                    "id": "2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ Suc y"
                },
                {
                    "args": "",
                    "id": "2.2.2",
                    "prevs": [
                        "2.2.0",
                        "2.2.1"
                    ],
                    "rule": "intros",
                    "th": "(0::nat) = 0 ⟷ 0 ≤ y ⊢ (0::nat) = 0 ⟶ 0 ≤ Suc y"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(0::nat) = 0 ⟷ 0 ≤ y ⊢ 0 ≤ Suc y ⟶ (0::nat) = 0"
                },
                {
                    "args": "0 ≤ Suc y",
                    "id": "2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 ≤ Suc y ⊢ 0 ≤ Suc y"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "2.3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "",
                    "id": "2.3.2",
                    "prevs": [
                        "2.3.0",
                        "2.3.1"
                    ],
                    "rule": "intros",
                    "th": "(0::nat) = 0 ⟷ 0 ≤ y ⊢ 0 ≤ Suc y ⟶ (0::nat) = 0"
                },
                {
                    "args": "iffI",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "(0::nat) = 0 ⟷ 0 ≤ y ⊢ (0::nat) = 0 ⟷ 0 ≤ Suc y"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀y. (0::nat) = 0 ⟷ 0 ≤ y ⟶ (0::nat) = 0 ⟷ 0 ≤ Suc y"
                },
                {
                    "args": "nat_minus_l0, ∀n. 0 - n = 0 ⟷ 0 ≤ n ⟶ 0 - Suc n = 0 ⟷ 0 ≤ Suc n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ∀n. 0 - n = 0 ⟷ 0 ≤ n ⟶ 0 - Suc n = 0 ⟷ 0 ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (∀n1. n - n1 = 0 ⟷ n ≤ n1 ⟶ n - Suc n1 = 0 ⟷ n ≤ Suc n1) ⟶ (∀n1. Suc n - n1 = 0 ⟷ Suc n ≤ n1 ⟶ Suc n - Suc n1 = 0 ⟷ Suc n ≤ Suc n1)"
                },
                {
                    "args": "y, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n ⊢ ∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n ⊢ ∀n. Suc y - n = 0 ⟷ Suc y ≤ n ⟶ Suc y - Suc n = 0 ⟷ Suc y ≤ Suc n"
                },
                {
                    "args": "x, nat",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "Suc y - x = 0 ⟷ Suc y ≤ x",
                    "id": "4.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc y - x = 0 ⟷ Suc y ≤ x ⊢ Suc y - x = 0 ⟷ Suc y ≤ x"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "Suc y - x = 0 ⟷ Suc y ≤ x, ∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n ⊢ y - x = 0 ⟷ Suc y ≤ Suc x"
                },
                {
                    "args": "nat_minus_suc, Suc y - Suc x = 0 ⟷ Suc y ≤ Suc x",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Suc y - x = 0 ⟷ Suc y ≤ x, ∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n ⊢ Suc y - Suc x = 0 ⟷ Suc y ≤ Suc x"
                },
                {
                    "args": "",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.0",
                        "4.2.1",
                        "4.2.3"
                    ],
                    "rule": "intros",
                    "th": "∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n ⊢ ∀x. Suc y - x = 0 ⟷ Suc y ≤ x ⟶ Suc y - Suc x = 0 ⟷ Suc y ≤ Suc x"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀y. (∀n. y - n = 0 ⟷ y ≤ n ⟶ y - Suc n = 0 ⟷ y ≤ Suc n) ⟶ (∀n. Suc y - n = 0 ⟷ Suc y ≤ n ⟶ Suc y - Suc n = 0 ⟷ Suc y ≤ Suc n)"
                },
                {
                    "args": "nat_induct, {P: λx. ∀n. x - n = 0 ⟷ x ≤ n ⟶ x - Suc n = 0 ⟷ x ≤ Suc n, x: x}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∀n. x - n = 0 ⟷ x ≤ n ⟶ x - Suc n = 0 ⟷ x ≤ Suc n"
                },
                {
                    "args": "nat_induct, {P: λy. x - y = 0 ⟷ x ≤ y, x: y}",
                    "id": "6",
                    "prevs": [
                        "1",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x - y = 0 ⟷ x ≤ y"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ x - y = 0 ⟷ x ≤ y"
                }
            ],
            "prop": "x - y = 0 ⟷ x ≤ y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_minus_l0"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "y"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "y"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_minus_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "add_subr2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_add, {m: x, n: y}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ≤ x + y"
                },
                {
                    "args": "sub_eq_0, x - (x + y) = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x - (x + y) = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ x - (x + y) = 0"
                }
            ],
            "prop": "x - (x + y) = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "sub_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "le_add"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "add_subr",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_subr2, y - (y + x) = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ y - (y + x) = 0"
                },
                {
                    "args": "add_comm, y - (x + y) = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ y - (x + y) = 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ y - (x + y) = 0"
                }
            ],
            "prop": "y - (x + y) = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_subr2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_forward"
            ],
            "name": "sub_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "y ≤ x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ x ⊢ y ≤ x"
                },
                {
                    "args": "less_eq_exist",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "y ≤ x ⊢ ∃p. x = y + p"
                },
                {
                    "args": "p, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "x = y + p",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y + p ⊢ x = y + p"
                },
                {
                    "args": "nat_plus_minus_2, y + (y + p - y) = y + p",
                    "id": "4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ y + (y + p - y) = y + p"
                },
                {
                    "args": "y + (x - y) = x",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y + p, y ≤ x ⊢ y + (x - y) = x"
                },
                {
                    "args": "add_comm, x - y + y = x",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "y ≤ x, x = y + p ⊢ x - y + y = x"
                },
                {
                    "args": "∃p. x = y + p",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ y ≤ x ⟶ x - y + y = x"
                }
            ],
            "prop": "y ≤ x ⟶ x - y + y = x",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_minus_2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "left_sub_distrib",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_cases, {m: n, n: p}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n ≤ p ∨ p ≤ n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n - p = 0 ⟶ m * n - m * p = m * (n - p)"
                },
                {
                    "args": "n - p = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n - p = 0 ⊢ n - p = 0"
                },
                {
                    "args": "m * n - m * p = m * (n - p)",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ m * n - m * p = m * (n - p)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ n - p = 0 ⟶ m * n - m * p = m * (n - p)"
                },
                {
                    "args": "sub_eq_0, n ≤ p ⟶ m * n - m * p = m * (n - p)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ n ≤ p ⟶ m * n - m * p = m * (n - p)"
                },
                {
                    "args": "p ≤ n ⟶ m * n - m * p = m * (n - p)",
                    "id": "3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ p ≤ n ⟶ m * n - m * p = m * (n - p)"
                },
                {
                    "args": "disjE",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m * n - m * p = m * (n - p)"
                },
                {
                    "args": "eq_sym_eq, m * (n - p) = m * n - m * p",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m * (n - p) = m * n - m * p"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * (n - p) = m * n - m * p"
                }
            ],
            "prop": "m * (n - p) = m * n - m * p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_m": "n",
                    "param_n": "p",
                    "theorem": "le_cases"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "sub_eq_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "suc_sub1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, n - 0 = n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n - 0 = n"
                },
                {
                    "args": "nat_minus_suc, Suc n - Suc 0 = n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc n - Suc 0 = n"
                },
                {
                    "args": "nat_one_def, Suc n - 1 = n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc n - 1 = n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ Suc n - 1 = n"
                }
            ],
            "prop": "Suc n - 1 = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_minus_suc"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_minus_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_forward"
            ],
            "name": "nat_le_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "n ≤ 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n ≤ 0 ⊢ n ≤ 0"
                },
                {
                    "args": "less_eq_exist",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n ≤ 0 ⊢ ∃p. 0 = n + p"
                },
                {
                    "args": "p, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "0 = n + p",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 = n + p ⊢ 0 = n + p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "0 = n + p ⊢ n + p = 0"
                },
                {
                    "args": "add_is_zero, {x: n, y: p}",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "0 = n + p ⊢ n = 0 ∧ p = 0"
                },
                {
                    "args": "conjD1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 = n + p ⊢ n = 0"
                },
                {
                    "args": "∃p. 0 = n + p",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ n ≤ 0 ⟶ n = 0"
                }
            ],
            "prop": "n ≤ 0 ⟶ n = 0",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "max",
            "prop": "max m n = (if m ≤ n then n else m)",
            "ty": "def",
            "type": "'a ⇒ 'a ⇒ 'a"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "min",
            "prop": "min m n = (if m ≤ n then m else n)",
            "ty": "def",
            "type": "'a ⇒ 'a ⇒ 'a"
        },
        {
            "name": "min_simp1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m ≤ n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "if_P, (if m ≤ n then m else n) = m",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ⊢ (if m ≤ n then m else n) = m"
                },
                {
                    "args": "min_def, min m n = m",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ⊢ min m n = m"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟶ min m n = m"
                }
            ],
            "prop": "m ≤ n ⟶ min m n = m",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "min_def"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "even",
            "rules": [
                {
                    "prop": "even 0 ⟷ true"
                },
                {
                    "prop": "even (Suc n) ⟷ ¬(even n)"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ bool"
        },
        {
            "name": "odd",
            "rules": [
                {
                    "prop": "odd 0 ⟷ false"
                },
                {
                    "prop": "odd (Suc n) ⟷ ¬(odd n)"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ bool"
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "not_even",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬true ⟷ false",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬true ⟷ false"
                },
                {
                    "args": "odd_def_1, ¬true ⟷ odd 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬true ⟷ odd 0"
                },
                {
                    "args": "even_def_1, ¬(even 0) ⟷ odd 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even 0) ⟷ odd 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. ¬(even n) ⟷ odd n ⟶ ¬(even (Suc n)) ⟷ odd (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(even n) ⟷ odd n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even n) ⟷ odd n ⊢ ¬(even n) ⟷ odd n"
                },
                {
                    "args": "¬¬(even n) ⟷ ¬(odd n)",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(even n) ⟷ odd n ⊢ ¬¬(even n) ⟷ ¬(odd n)"
                },
                {
                    "args": "odd_def_2, ¬¬(even n) ⟷ odd (Suc n)",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(even n) ⟷ odd n ⊢ ¬¬(even n) ⟷ odd (Suc n)"
                },
                {
                    "args": "even_def_2, ¬(even (Suc n)) ⟷ odd (Suc n)",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(even n) ⟷ odd n ⊢ ¬(even (Suc n)) ⟷ odd (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. ¬(even n) ⟷ odd n ⟶ ¬(even (Suc n)) ⟷ odd (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. ¬(even n) ⟷ odd n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(even n) ⟷ odd n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(even n) ⟷ odd n"
                }
            ],
            "prop": "¬(even n) ⟷ odd n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_2"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "not_odd",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬false ⟷ true",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬false ⟷ true"
                },
                {
                    "args": "even_def_1, ¬false ⟷ even 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬false ⟷ even 0"
                },
                {
                    "args": "odd_def_1, ¬(odd 0) ⟷ even 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(odd 0) ⟷ even 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. ¬(odd n) ⟷ even n ⟶ ¬(odd (Suc n)) ⟷ even (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(odd n) ⟷ even n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(odd n) ⟷ even n ⊢ ¬(odd n) ⟷ even n"
                },
                {
                    "args": "¬¬(odd n) ⟷ ¬(even n)",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(odd n) ⟷ even n ⊢ ¬¬(odd n) ⟷ ¬(even n)"
                },
                {
                    "args": "odd_def_2, ¬(odd (Suc n)) ⟷ ¬(even n)",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(odd n) ⟷ even n ⊢ ¬(odd (Suc n)) ⟷ ¬(even n)"
                },
                {
                    "args": "even_def_2, ¬(odd (Suc n)) ⟷ even (Suc n)",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(odd n) ⟷ even n ⊢ ¬(odd (Suc n)) ⟷ even (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. ¬(odd n) ⟷ even n ⟶ ¬(odd (Suc n)) ⟷ even (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. ¬(odd n) ⟷ even n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(odd n) ⟷ even n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(odd n) ⟷ even n"
                }
            ],
            "prop": "¬(odd n) ⟷ even n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_2"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "even_or_odd",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "trueI",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even 0"
                },
                {
                    "args": "disjI1, {A: even 0, B: odd 0}",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even 0 ∨ odd 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. even n ∨ odd n ⟶ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "even n ∨ odd n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ∨ odd n ⊢ even n ∨ odd n"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even n ∨ odd n ⊢ even n ⟶ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "even n",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ⊢ even n"
                },
                {
                    "args": "not_odd, ¬(odd n)",
                    "id": "3.2.1",
                    "prevs": [
                        "3.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even n ∨ odd n, even n ⊢ ¬(odd n)"
                },
                {
                    "args": "odd_def_2, odd (Suc n)",
                    "id": "3.2.2",
                    "prevs": [
                        "3.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even n ∨ odd n, even n ⊢ odd (Suc n)"
                },
                {
                    "args": "disjI2, {A: even (Suc n), B: odd (Suc n)}",
                    "id": "3.2.3",
                    "prevs": [
                        "3.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even n ∨ odd n, even n ⊢ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.2.4",
                    "prevs": [
                        "3.2.0",
                        "3.2.3"
                    ],
                    "rule": "intros",
                    "th": "even n ∨ odd n ⊢ even n ⟶ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even n ∨ odd n ⊢ odd n ⟶ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "odd n",
                    "id": "3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd n ⊢ odd n"
                },
                {
                    "args": "not_even, ¬(even n)",
                    "id": "3.3.1",
                    "prevs": [
                        "3.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even n ∨ odd n, odd n ⊢ ¬(even n)"
                },
                {
                    "args": "even_def_2, even (Suc n)",
                    "id": "3.3.2",
                    "prevs": [
                        "3.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even n ∨ odd n, odd n ⊢ even (Suc n)"
                },
                {
                    "args": "disjI1, {A: even (Suc n), B: odd (Suc n)}",
                    "id": "3.3.3",
                    "prevs": [
                        "3.3.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even n ∨ odd n, odd n ⊢ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.3.4",
                    "prevs": [
                        "3.3.0",
                        "3.3.3"
                    ],
                    "rule": "intros",
                    "th": "even n ∨ odd n ⊢ odd n ⟶ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "disjE",
                    "id": "3.4",
                    "prevs": [
                        "3.1",
                        "3.2",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "even n ∨ odd n ⊢ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. even n ∨ odd n ⟶ even (Suc n) ∨ odd (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. even n ∨ odd n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even n ∨ odd n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ even n ∨ odd n"
                }
            ],
            "prop": "even n ∨ odd n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "odd_def_2"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_odd"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "3.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "3.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_even"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "even_and_odd",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "even_or_odd, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even n ∨ odd n"
                },
                {
                    "args": "disj_comm, odd n ∨ even n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ odd n ∨ even n"
                },
                {
                    "args": "not_odd, odd n ∨ ¬(odd n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ odd n ∨ ¬(odd n)"
                },
                {
                    "args": "not_even, ¬(even n) ∨ ¬(odd n)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even n) ∨ ¬(odd n)"
                },
                {
                    "args": "de_morgan_thm1, ¬(even n ∧ odd n)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even n ∧ odd n)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(even n ∧ odd n)"
                }
            ],
            "prop": "¬(even n ∧ odd n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_even"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_odd"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "even_or_odd"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "even_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ even m ⟶ even m ⟷ true"
                },
                {
                    "args": "even m",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⊢ even m"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ⊢ even m ⟶ true"
                },
                {
                    "args": "trueI",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "",
                    "id": "0.1.1",
                    "prevs": [
                        "0.0",
                        "0.1.0"
                    ],
                    "rule": "intros",
                    "th": "⊢ even m ⟶ true"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ⊢ true ⟶ even m"
                },
                {
                    "args": "true",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "true ⊢ true"
                },
                {
                    "args": "",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0",
                        "0.0"
                    ],
                    "rule": "intros",
                    "th": "even m ⊢ true ⟶ even m"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ⊢ even m ⟷ true"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ even m ⟶ even m ⟷ true"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ even m ⟷ true ⟶ even m"
                },
                {
                    "args": "even m ⟷ true",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⟷ true ⊢ even m ⟷ true"
                },
                {
                    "args": "trueI",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even m",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "even m ⟷ true ⊢ even m"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ even m ⟷ true ⟶ even m"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ even m ⟷ even m ⟷ true"
                },
                {
                    "args": "even_def_1, even m ⟷ even m ⟷ even 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even m ⟷ even m ⟷ even 0"
                },
                {
                    "args": "add_0_right, even (m + 0) ⟷ even m ⟷ even 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even (m + 0) ⟷ even m ⟷ even 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. even (m + n) ⟷ even m ⟷ even n ⟶ even (m + Suc n) ⟷ even m ⟷ even (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "even (m + n) ⟷ even m ⟷ even n",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ even (m + n) ⟷ even m ⟷ even n"
                },
                {
                    "args": "",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m ⟷ even n) ⟶ even m ⟷ ¬(even n)"
                },
                {
                    "args": "¬(even m ⟷ even n)",
                    "id": "5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even m ⟷ even n) ⊢ ¬(even m ⟷ even n)"
                },
                {
                    "args": "",
                    "id": "5.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟶ ¬(even n)"
                },
                {
                    "args": "even m",
                    "id": "5.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⊢ even m"
                },
                {
                    "args": "",
                    "id": "5.2.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even n ⟶ even m ⟷ even n"
                },
                {
                    "args": "even n",
                    "id": "5.2.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ⊢ even n"
                },
                {
                    "args": "",
                    "id": "5.2.1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m, even n, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟶ even n"
                },
                {
                    "args": "",
                    "id": "5.2.1.1.1.0",
                    "prevs": [
                        "5.2.1.0",
                        "5.2.1.1.0"
                    ],
                    "rule": "intros",
                    "th": "even n, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟶ even n"
                },
                {
                    "args": "",
                    "id": "5.2.1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m, even n, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even n ⟶ even m"
                },
                {
                    "args": "",
                    "id": "5.2.1.1.2.0",
                    "prevs": [
                        "5.2.1.1.0",
                        "5.2.1.0"
                    ],
                    "rule": "intros",
                    "th": "even m, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even n ⟶ even m"
                },
                {
                    "args": "iffI",
                    "id": "5.2.1.1.3",
                    "prevs": [
                        "5.2.1.1.1",
                        "5.2.1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m, even n, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟷ even n"
                },
                {
                    "args": "",
                    "id": "5.2.1.1.4",
                    "prevs": [
                        "5.2.1.1.0",
                        "5.2.1.1.3"
                    ],
                    "rule": "intros",
                    "th": "even m, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even n ⟶ even m ⟷ even n"
                },
                {
                    "args": "double_neg, ¬¬(even n) ⟶ ¬¬(even m ⟷ even n)",
                    "id": "5.2.1.2",
                    "prevs": [
                        "5.2.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even m, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬¬(even n) ⟶ ¬¬(even m ⟷ even n)"
                },
                {
                    "args": "contrapositive",
                    "id": "5.2.1.3",
                    "prevs": [
                        "5.2.0",
                        "5.2.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m, ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "5.2.1.4",
                    "prevs": [
                        "5.2.1.0",
                        "5.2.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟶ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "5.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even n) ⟶ even m"
                },
                {
                    "args": "¬(even n)",
                    "id": "5.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even n) ⊢ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "5.2.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m) ⟶ even m ⟷ even n"
                },
                {
                    "args": "¬(even m)",
                    "id": "5.2.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even m) ⊢ ¬(even m)"
                },
                {
                    "args": "",
                    "id": "5.2.2.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(even m), ¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟶ even n"
                },
                {
                    "args": "even m",
                    "id": "5.2.2.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⊢ even m"
                },
                {
                    "args": "negE_gen, {A: even m, C: even n}",
                    "id": "5.2.2.1.1.1",
                    "prevs": [
                        "5.2.2.1.0",
                        "5.2.2.1.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even m, ¬(even m) ⊢ even n"
                },
                {
                    "args": "",
                    "id": "5.2.2.1.1.2",
                    "prevs": [
                        "5.2.2.1.1.0",
                        "5.2.2.1.1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(even m), ¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟶ even n"
                },
                {
                    "args": "",
                    "id": "5.2.2.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(even m), ¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even n ⟶ even m"
                },
                {
                    "args": "even n",
                    "id": "5.2.2.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ⊢ even n"
                },
                {
                    "args": "negE_gen, {A: even n, C: even m}",
                    "id": "5.2.2.1.2.1",
                    "prevs": [
                        "5.2.2.0",
                        "5.2.2.1.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even n, ¬(even n) ⊢ even m"
                },
                {
                    "args": "",
                    "id": "5.2.2.1.2.2",
                    "prevs": [
                        "5.2.2.1.2.0",
                        "5.2.2.1.2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(even m), ¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even n ⟶ even m"
                },
                {
                    "args": "iffI",
                    "id": "5.2.2.1.3",
                    "prevs": [
                        "5.2.2.1.1",
                        "5.2.2.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(even m), ¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟷ even n"
                },
                {
                    "args": "",
                    "id": "5.2.2.1.4",
                    "prevs": [
                        "5.2.2.1.0",
                        "5.2.2.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m) ⟶ even m ⟷ even n"
                },
                {
                    "args": "double_neg, ¬(even m) ⟶ ¬¬(even m ⟷ even n)",
                    "id": "5.2.2.2",
                    "prevs": [
                        "5.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m) ⟶ ¬¬(even m ⟷ even n)"
                },
                {
                    "args": "contrapositive",
                    "id": "5.2.2.3",
                    "prevs": [
                        "5.2.0",
                        "5.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(even n), ¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m"
                },
                {
                    "args": "",
                    "id": "5.2.2.4",
                    "prevs": [
                        "5.2.2.0",
                        "5.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even n) ⟶ even m"
                },
                {
                    "args": "iffI",
                    "id": "5.2.3",
                    "prevs": [
                        "5.2.1",
                        "5.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(even m ⟷ even n), even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟷ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "5.2.4",
                    "prevs": [
                        "5.2.0",
                        "5.2.3"
                    ],
                    "rule": "intros",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m ⟷ even n) ⟶ even m ⟷ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟷ ¬(even n) ⟶ ¬(even m ⟷ even n)"
                },
                {
                    "args": "even m ⟷ ¬(even n)",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⟷ ¬(even n) ⊢ even m ⟷ ¬(even n)"
                },
                {
                    "args": "∀p. ¬(¬p ⟷ p)",
                    "id": "5.3.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀p. ¬(¬p ⟷ p)"
                },
                {
                    "args": "even n",
                    "id": "5.3.2",
                    "prevs": [
                        "5.3.1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ ¬(¬(even n) ⟷ even n)"
                },
                {
                    "args": "¬(even m ⟷ even n)",
                    "id": "5.3.3",
                    "prevs": [
                        "5.3.0",
                        "5.3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "even m ⟷ ¬(even n), even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m ⟷ even n)"
                },
                {
                    "args": "",
                    "id": "5.3.4",
                    "prevs": [
                        "5.3.0",
                        "5.3.3"
                    ],
                    "rule": "intros",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ even m ⟷ ¬(even n) ⟶ ¬(even m ⟷ even n)"
                },
                {
                    "args": "iffI",
                    "id": "5.4",
                    "prevs": [
                        "5.2",
                        "5.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even m ⟷ even n) ⟷ even m ⟷ ¬(even n)"
                },
                {
                    "args": "¬(even (m + n)) ⟷ even m ⟷ ¬(even n)",
                    "id": "5.5",
                    "prevs": [
                        "5.1",
                        "5.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ ¬(even (m + n)) ⟷ even m ⟷ ¬(even n)"
                },
                {
                    "args": "even_def_2, even (Suc (m + n)) ⟷ even m ⟷ even (Suc n)",
                    "id": "5.6",
                    "prevs": [
                        "5.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ even (Suc (m + n)) ⟷ even m ⟷ even (Suc n)"
                },
                {
                    "args": "add_Suc_right, even (m + Suc n) ⟷ even m ⟷ even (Suc n)",
                    "id": "5.7",
                    "prevs": [
                        "5.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m + n) ⟷ even m ⟷ even n ⊢ even (m + Suc n) ⟷ even m ⟷ even (Suc n)"
                },
                {
                    "args": "",
                    "id": "5.8",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. even (m + n) ⟷ even m ⟷ even n ⟶ even (m + Suc n) ⟷ even m ⟷ even (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. even (m + n) ⟷ even m ⟷ even n, x: n}",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even (m + n) ⟷ even m ⟷ even n"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ even (m + n) ⟷ even m ⟷ even n"
                }
            ],
            "prop": "even (m + n) ⟷ even m ⟷ even n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.0",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.0"
                    ],
                    "goal_id": "5.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "5.2.1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2.1.1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.1.1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.0"
                    ],
                    "goal_id": "5.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "5.2.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.2.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "5.2.2.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.2.1.0",
                        "5.2.2.1.1.0"
                    ],
                    "goal_id": "5.2.2.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "5.2.2.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.2.2.0",
                        "5.2.2.1.2.0"
                    ],
                    "goal_id": "5.2.2.1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.0"
                    ],
                    "goal_id": "5.3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "!p. ~(~p <--> p)",
                    "goal_id": "5.3.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "5.3.1"
                    ],
                    "goal_id": "5.3.2",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "even_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ even 0 ⟶ even m ∨ even 0"
                },
                {
                    "args": "even 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even 0 ⊢ even 0"
                },
                {
                    "args": "disjI2, {A: even m, B: even 0}",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even 0 ⊢ even m ∨ even 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ even 0 ⟶ even m ∨ even 0"
                },
                {
                    "args": "∀p. p ∨ true ⟷ true",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀p. p ∨ true ⟷ true"
                },
                {
                    "args": "true ⟶ true",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ true ⟶ true"
                },
                {
                    "args": "even m ∨ true ⟶ true",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ even m ∨ true ⟶ true"
                },
                {
                    "args": "even_def_1, even m ∨ even 0 ⟶ even 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even m ∨ even 0 ⟶ even 0"
                },
                {
                    "args": "iffI",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ even 0 ⟷ even m ∨ even 0"
                },
                {
                    "args": "mult_0_right, even (m * 0) ⟷ even m ∨ even 0",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even (m * 0) ⟷ even m ∨ even 0"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. even (m * n) ⟷ even m ∨ even n ⟶ even (m * Suc n) ⟷ even m ∨ even (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "even (m * n) ⟷ even m ∨ even n",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even (m * n) ⟷ even m ∨ even n"
                },
                {
                    "args": "",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even m ⟷ even m ∨ even n ⟶ even m ∨ ¬(even n)"
                },
                {
                    "args": "even m ⟷ even m ∨ even n",
                    "id": "7.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⟷ even m ∨ even n ⊢ even m ⟷ even m ∨ even n"
                },
                {
                    "args": "even_or_odd, {n: m}",
                    "id": "7.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even m ∨ odd m"
                },
                {
                    "args": "",
                    "id": "7.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even m ⟶ even m ∨ ¬(even n)"
                },
                {
                    "args": "even m",
                    "id": "7.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⊢ even m"
                },
                {
                    "args": "disjI1, {A: even m, B: ¬(even n)}",
                    "id": "7.2.2.1",
                    "prevs": [
                        "7.2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "7.2.2.2",
                    "prevs": [
                        "7.2.2.0",
                        "7.2.2.1"
                    ],
                    "rule": "intros",
                    "th": "even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even m ⟶ even m ∨ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "7.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ odd m ⟶ even m ∨ ¬(even n)"
                },
                {
                    "args": "odd m",
                    "id": "7.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "odd m ⊢ odd m"
                },
                {
                    "args": "",
                    "id": "7.2.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "odd m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even n ⟶ ¬(even m ⟷ even m ∨ even n)"
                },
                {
                    "args": "even n",
                    "id": "7.2.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ⊢ even n"
                },
                {
                    "args": "not_even",
                    "id": "7.2.3.1.1",
                    "prevs": [
                        "7.2.3.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "odd m ⊢ ¬(even m)"
                },
                {
                    "args": "∀p. ∀q. p ⟶ ¬q ⟶ ¬(q ⟷ q ∨ p)",
                    "id": "7.2.3.1.2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀p. ∀q. p ⟶ ¬q ⟶ ¬(q ⟷ q ∨ p)"
                },
                {
                    "args": "even n, even m",
                    "id": "7.2.3.1.3",
                    "prevs": [
                        "7.2.3.1.2",
                        "7.2.3.1.0",
                        "7.2.3.1.1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "even n, odd m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ ¬(even m ⟷ even m ∨ even n)"
                },
                {
                    "args": "",
                    "id": "7.2.3.1.4",
                    "prevs": [
                        "7.2.3.1.0",
                        "7.2.3.1.3"
                    ],
                    "rule": "intros",
                    "th": "odd m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even n ⟶ ¬(even m ⟷ even m ∨ even n)"
                },
                {
                    "args": "double_neg, ¬¬(even n) ⟶ ¬(even m ⟷ even m ∨ even n)",
                    "id": "7.2.3.2",
                    "prevs": [
                        "7.2.3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "odd m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ ¬¬(even n) ⟶ ¬(even m ⟷ even m ∨ even n)"
                },
                {
                    "args": "contrapositive",
                    "id": "7.2.3.3",
                    "prevs": [
                        "7.2.0",
                        "7.2.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "odd m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ ¬(even n)"
                },
                {
                    "args": "disjI2, {A: even m, B: ¬(even n)}",
                    "id": "7.2.3.4",
                    "prevs": [
                        "7.2.3.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "odd m, even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "7.2.3.5",
                    "prevs": [
                        "7.2.3.0",
                        "7.2.3.4"
                    ],
                    "rule": "intros",
                    "th": "even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ odd m ⟶ even m ∨ ¬(even n)"
                },
                {
                    "args": "disjE",
                    "id": "7.2.4",
                    "prevs": [
                        "7.2.1",
                        "7.2.2",
                        "7.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ⟷ even m ∨ even n, even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "7.2.5",
                    "prevs": [
                        "7.2.0",
                        "7.2.4"
                    ],
                    "rule": "intros",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even m ⟷ even m ∨ even n ⟶ even m ∨ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ ¬(even n) ⟶ even m ⟷ even m ∨ even n"
                },
                {
                    "args": "even m ∨ ¬(even n)",
                    "id": "7.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ∨ ¬(even n) ⊢ even m ∨ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "7.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m ⟶ even m ∨ even n"
                },
                {
                    "args": "even m",
                    "id": "7.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ⊢ even m"
                },
                {
                    "args": "disjI1, {A: even m, B: even n}",
                    "id": "7.3.1.1",
                    "prevs": [
                        "7.3.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even m, even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ even n"
                },
                {
                    "args": "",
                    "id": "7.3.1.2",
                    "prevs": [
                        "7.3.1.0",
                        "7.3.1.1"
                    ],
                    "rule": "intros",
                    "th": "even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m ⟶ even m ∨ even n"
                },
                {
                    "args": "",
                    "id": "7.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ even n ⟶ even m"
                },
                {
                    "args": "even m ∨ even n",
                    "id": "7.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ∨ even n ⊢ even m ∨ even n"
                },
                {
                    "args": "even m ⟶ even m",
                    "id": "7.3.2.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ even m ⟶ even m"
                },
                {
                    "args": "even m ⟶ ¬(even n) ⟶ even m",
                    "id": "7.3.2.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ even m ⟶ ¬(even n) ⟶ even m"
                },
                {
                    "args": "",
                    "id": "7.3.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ∨ even n, even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even n ⟶ ¬(even n) ⟶ even m"
                },
                {
                    "args": "even n",
                    "id": "7.3.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even n ⊢ even n"
                },
                {
                    "args": "¬(even n)",
                    "id": "7.3.2.3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even n) ⊢ ¬(even n)"
                },
                {
                    "args": "negE_gen, {A: even n, C: even m}",
                    "id": "7.3.2.3.2",
                    "prevs": [
                        "7.3.2.3.1",
                        "7.3.2.3.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even n, ¬(even n) ⊢ even m"
                },
                {
                    "args": "",
                    "id": "7.3.2.3.3",
                    "prevs": [
                        "7.3.2.3.0",
                        "7.3.2.3.1",
                        "7.3.2.3.2"
                    ],
                    "rule": "intros",
                    "th": "even m ∨ even n, even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even n ⟶ ¬(even n) ⟶ even m"
                },
                {
                    "args": "disjE",
                    "id": "7.3.2.4",
                    "prevs": [
                        "7.3.2.0",
                        "7.3.2.2",
                        "7.3.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∨ even n, even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ ¬(even n) ⟶ even m"
                },
                {
                    "args": "disjE",
                    "id": "7.3.2.5",
                    "prevs": [
                        "7.3.0",
                        "7.3.2.1",
                        "7.3.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∨ even n, even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m"
                },
                {
                    "args": "",
                    "id": "7.3.2.6",
                    "prevs": [
                        "7.3.2.0",
                        "7.3.2.5"
                    ],
                    "rule": "intros",
                    "th": "even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ even n ⟶ even m"
                },
                {
                    "args": "iffI",
                    "id": "7.3.3",
                    "prevs": [
                        "7.3.1",
                        "7.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∨ ¬(even n), even (m * n) ⟷ even m ∨ even n ⊢ even m ⟷ even m ∨ even n"
                },
                {
                    "args": "",
                    "id": "7.3.4",
                    "prevs": [
                        "7.3.0",
                        "7.3.3"
                    ],
                    "rule": "intros",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even m ∨ ¬(even n) ⟶ even m ⟷ even m ∨ even n"
                },
                {
                    "args": "iffI",
                    "id": "7.4",
                    "prevs": [
                        "7.2",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ (even m ⟷ even m ∨ even n) ⟷ even m ∨ ¬(even n)"
                },
                {
                    "args": "even_def_2, (even m ⟷ even m ∨ even n) ⟷ even m ∨ even (Suc n)",
                    "id": "7.5",
                    "prevs": [
                        "7.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ (even m ⟷ even m ∨ even n) ⟷ even m ∨ even (Suc n)"
                },
                {
                    "args": "(even m ⟷ even (m * n)) ⟷ even m ∨ even (Suc n)",
                    "id": "7.6",
                    "prevs": [
                        "7.1",
                        "7.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ (even m ⟷ even (m * n)) ⟷ even m ∨ even (Suc n)"
                },
                {
                    "args": "even_add, even (m + m * n) ⟷ even m ∨ even (Suc n)",
                    "id": "7.7",
                    "prevs": [
                        "7.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even (m + m * n) ⟷ even m ∨ even (Suc n)"
                },
                {
                    "args": "mult_Suc_right, even (m * Suc n) ⟷ even m ∨ even (Suc n)",
                    "id": "7.8",
                    "prevs": [
                        "7.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m * n) ⟷ even m ∨ even n ⊢ even (m * Suc n) ⟷ even m ∨ even (Suc n)"
                },
                {
                    "args": "",
                    "id": "7.9",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. even (m * n) ⟷ even m ∨ even n ⟶ even (m * Suc n) ⟷ even m ∨ even (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. even (m * n) ⟷ even m ∨ even n, x: n}",
                    "id": "8",
                    "prevs": [
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even (m * n) ⟷ even m ∨ even n"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ even (m * n) ⟷ even m ∨ even n"
                }
            ],
            "prop": "even (m * n) ⟷ even m ∨ even n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal": "∀p. (p ∨ true) ⟷ true",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_add"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "7.2.1",
                    "method_name": "apply_forward_step",
                    "param_n": "m",
                    "theorem": "even_or_odd"
                },
                {
                    "fact_ids": [
                        "7.2.1"
                    ],
                    "goal_id": "7.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "7.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "7.2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "7.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "7.2.0"
                    ],
                    "goal_id": "7.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "7.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "7.2.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.2.3.0"
                    ],
                    "goal_id": "7.2.3.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "not_even"
                },
                {
                    "goal": "!p. !q. p --> ~q --> ~(q <--> q | p)",
                    "goal_id": "7.2.3.1.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "7.2.3.1.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "7.2.3.1.2"
                    ],
                    "goal_id": "7.2.3.1.3",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "7.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "7.3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "7.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "7.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.3.0"
                    ],
                    "goal_id": "7.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "fact_ids": [
                        "7.3.2.0"
                    ],
                    "goal_id": "7.3.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7.3.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.3.2.3.1",
                        "7.3.2.3.0"
                    ],
                    "goal_id": "7.3.2.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "even_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀p. ∀q. q ⟶ ¬true ⟷ p ∧ ¬q",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀p. ∀q. q ⟶ ¬true ⟷ p ∧ ¬q"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "even m, (0::nat) = 0",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ ¬true ⟷ even m ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "even_def_1, ¬(even 0) ⟷ even m ∧ ¬((0::nat) = 0)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even 0) ⟷ even m ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "even_def_2, even (Suc 0) ⟷ even m ∧ ¬((0::nat) = 0)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even (Suc 0) ⟷ even m ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "nat_one_def, even 1 ⟷ even m ∧ ¬((0::nat) = 0)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even 1 ⟷ even m ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "nat_nat_power_def_1, even (m ^ (0::nat)) ⟷ even m ∧ ¬((0::nat) = 0)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even (m ^ (0::nat)) ⟷ even m ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⟶ even (m ^ Suc n) ⟷ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "n, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "even (m ^ n) ⟷ even m ∧ ¬(n = 0)",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even (m ^ n) ⟷ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∨ even m ∧ ¬(n = 0) ⟶ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "even m ∨ even m ∧ ¬(n = 0)",
                    "id": "7.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ∨ even m ∧ ¬(n = 0) ⊢ even m ∨ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "even m ⟶ even m",
                    "id": "7.2.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ even m ⟶ even m"
                },
                {
                    "args": "",
                    "id": "7.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even m ∨ even m ∧ ¬(n = 0), even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∧ ¬(n = 0) ⟶ even m"
                },
                {
                    "args": "even m ∧ ¬(n = 0)",
                    "id": "7.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ∧ ¬(n = 0) ⊢ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "7.2.2.1",
                    "prevs": [
                        "7.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∧ ¬(n = 0) ⊢ even m"
                },
                {
                    "args": "",
                    "id": "7.2.2.2",
                    "prevs": [
                        "7.2.2.0",
                        "7.2.2.1"
                    ],
                    "rule": "intros",
                    "th": "even m ∨ even m ∧ ¬(n = 0), even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∧ ¬(n = 0) ⟶ even m"
                },
                {
                    "args": "disjE",
                    "id": "7.2.3",
                    "prevs": [
                        "7.2.0",
                        "7.2.1",
                        "7.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∨ even m ∧ ¬(n = 0), even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: n}",
                    "id": "7.2.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc n)"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc n = 0)",
                    "id": "7.2.5",
                    "prevs": [
                        "7.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even m ∨ even m ∧ ¬(n = 0), even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "7.2.6",
                    "prevs": [
                        "7.2.3",
                        "7.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∨ even m ∧ ¬(n = 0), even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "7.2.7",
                    "prevs": [
                        "7.2.0",
                        "7.2.6"
                    ],
                    "rule": "intros",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∨ even m ∧ ¬(n = 0) ⟶ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∧ ¬(Suc n = 0) ⟶ even m ∨ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "even m ∧ ¬(Suc n = 0)",
                    "id": "7.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even m ∧ ¬(Suc n = 0) ⊢ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "7.3.1",
                    "prevs": [
                        "7.3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "even m ∧ ¬(Suc n = 0) ⊢ even m"
                },
                {
                    "args": "disjI1, {A: even m, B: even m ∧ ¬(n = 0)}",
                    "id": "7.3.2",
                    "prevs": [
                        "7.3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "even m ∧ ¬(Suc n = 0), even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∨ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "7.3.3",
                    "prevs": [
                        "7.3.0",
                        "7.3.2"
                    ],
                    "rule": "intros",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∧ ¬(Suc n = 0) ⟶ even m ∨ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "iffI",
                    "id": "7.4",
                    "prevs": [
                        "7.2",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∨ even m ∧ ¬(n = 0) ⟷ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "even m ∨ even (m ^ n) ⟷ even m ∧ ¬(Suc n = 0)",
                    "id": "7.5",
                    "prevs": [
                        "7.1",
                        "7.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even m ∨ even (m ^ n) ⟷ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "even_mult, even (m * m ^ n) ⟷ even m ∧ ¬(Suc n = 0)",
                    "id": "7.6",
                    "prevs": [
                        "7.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even (m * m ^ n) ⟷ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "nat_nat_power_def_2, even (m ^ Suc n) ⟷ even m ∧ ¬(Suc n = 0)",
                    "id": "7.7",
                    "prevs": [
                        "7.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⊢ even (m ^ Suc n) ⟷ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "7.8",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. even (m ^ n) ⟷ even m ∧ ¬(n = 0) ⟶ even (m ^ Suc n) ⟷ even m ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "nat_induct, {P: λn::nat. even (m ^ n) ⟷ even m ∧ ¬(n = 0), x: n}",
                    "id": "8",
                    "prevs": [
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even (m ^ n) ⟷ even m ∧ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ even (m ^ n) ⟷ even m ∧ ¬(n = 0)"
                }
            ],
            "prop": "even (m ^ n) ⟷ even m ∧ ¬(n = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal": "∀p. ∀q. q ⟶ ¬true ⟷ p ∧ ~q",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_mult"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "7.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "7.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "7.2.0"
                    ],
                    "goal_id": "7.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.2.2.0"
                    ],
                    "goal_id": "7.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "7.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "7.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.3.0"
                    ],
                    "goal_id": "7.3.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "7.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "odd_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀p. ∀q. (¬p ⟷ ¬q) ⟷ p ⟷ q",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀p. ∀q. (¬p ⟷ ¬q) ⟷ p ⟷ q"
                },
                {
                    "args": "(even m ⟷ even n) ⟷ ¬(even m) ⟷ ¬(even n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ (even m ⟷ even n) ⟷ ¬(even m) ⟷ ¬(even n)"
                },
                {
                    "args": "¬(even m ⟷ even n) ⟷ ¬(¬(even m) ⟷ ¬(even n))",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ ¬(even m ⟷ even n) ⟷ ¬(¬(even m) ⟷ ¬(even n))"
                },
                {
                    "args": "even_add, ¬(even (m + n)) ⟷ ¬(¬(even m) ⟷ ¬(even n))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even (m + n)) ⟷ ¬(¬(even m) ⟷ ¬(even n))"
                },
                {
                    "args": "not_even, odd (m + n) ⟷ ¬(odd m ⟷ odd n)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ odd (m + n) ⟷ ¬(odd m ⟷ odd n)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd (m + n) ⟷ ¬(odd m ⟷ odd n)"
                }
            ],
            "prop": "odd (m + n) ⟷ ¬(odd m ⟷ odd n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_even"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_add"
                },
                {
                    "goal": "∀p. ∀q. (¬p ⟷ ¬q) ⟷ p ⟷ q",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "odd_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "de_morgan_thm2, ¬(even m ∨ even n) ⟷ ¬(even m) ∧ ¬(even n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even m ∨ even n) ⟷ ¬(even m) ∧ ¬(even n)"
                },
                {
                    "args": "even_mult, ¬(even (m * n)) ⟷ ¬(even m) ∧ ¬(even n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even (m * n)) ⟷ ¬(even m) ∧ ¬(even n)"
                },
                {
                    "args": "not_even, odd (m * n) ⟷ odd m ∧ odd n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ odd (m * n) ⟷ odd m ∧ odd n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd (m * n) ⟷ odd m ∧ odd n"
                }
            ],
            "prop": "odd (m * n) ⟷ odd m ∧ odd n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_even"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_mult"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "odd_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "double_neg, ¬(even m) ∨ ¬¬(n = 0) ⟷ ¬(even m) ∨ n = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even m) ∨ ¬¬(n = 0) ⟷ ¬(even m) ∨ n = 0"
                },
                {
                    "args": "de_morgan_thm1, ¬(even m ∧ ¬(n = 0)) ⟷ ¬(even m) ∨ n = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even m ∧ ¬(n = 0)) ⟷ ¬(even m) ∨ n = 0"
                },
                {
                    "args": "even_exp, ¬(even (m ^ n)) ⟷ ¬(even m) ∨ n = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even (m ^ n)) ⟷ ¬(even m) ∨ n = 0"
                },
                {
                    "args": "not_even, odd (m ^ n) ⟷ odd m ∨ n = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ odd (m ^ n) ⟷ odd m ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd (m ^ n) ⟷ odd m ∨ n = 0"
                }
            ],
            "prop": "odd (m ^ n) ⟷ odd m ∨ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_even"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_exp"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "even_double",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "trueI",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "even_def_1, even 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even 0"
                },
                {
                    "args": "add_0_right, even (0 + 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even (0 + 0)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. even (n + n) ⟶ even (Suc n + Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "even (n + n)",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "even (n + n) ⊢ even (n + n)"
                },
                {
                    "args": "double_neg, ¬¬(even (n + n))",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (n + n) ⊢ ¬¬(even (n + n))"
                },
                {
                    "args": "even_def_2, ¬(even (Suc (n + n)))",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (n + n) ⊢ ¬(even (Suc (n + n)))"
                },
                {
                    "args": "nat_plus_def_2, ¬(even (Suc n + n))",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (n + n) ⊢ ¬(even (Suc n + n))"
                },
                {
                    "args": "even_def_2, even (Suc (Suc n + n))",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (n + n) ⊢ even (Suc (Suc n + n))"
                },
                {
                    "args": "add_Suc_right, even (Suc n + Suc n)",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "even (n + n) ⊢ even (Suc n + Suc n)"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. even (n + n) ⟶ even (Suc n + Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. even (n + n), x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even (n + n)"
                },
                {
                    "args": "mult_2, even (2 * n)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ even (2 * n)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ even (2 * n)"
                }
            ],
            "prop": "even (2 * n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "odd_double",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "even_double, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even (2 * n)"
                },
                {
                    "args": "double_neg, ¬¬(even (2 * n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬¬(even (2 * n))"
                },
                {
                    "args": "even_def_2, ¬(even (Suc (2 * n)))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(even (Suc (2 * n)))"
                },
                {
                    "args": "not_even, odd (Suc (2 * n))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ odd (Suc (2 * n))"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd (Suc (2 * n))"
                }
            ],
            "prop": "odd (Suc (2 * n))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_even"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "even_double"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "even_exists_lemma",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ true ⟶ (∃m::nat. 0 = 2 * m)"
                },
                {
                    "args": "true",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "true ⊢ true"
                },
                {
                    "args": "mult_0_right, (0::nat) = 2 * 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) = 2 * 0"
                },
                {
                    "args": "exI, {P: λm::nat. 0 = 2 * m, a: (0::nat)}",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "true ⊢ ∃a1::nat. 0 = 2 * a1"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ true ⟶ (∃m::nat. 0 = 2 * m)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬true ⟶ (∃m. 0 = Suc (2 * m))"
                },
                {
                    "args": "¬true",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬true ⊢ ¬true"
                },
                {
                    "args": "∃m. 0 = Suc (2 * m)",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬true ⊢ ∃m. 0 = Suc (2 * m)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬true ⟶ (∃m. 0 = Suc (2 * m))"
                },
                {
                    "args": "conjI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (true ⟶ (∃m::nat. 0 = 2 * m)) ∧ (¬true ⟶ (∃m. 0 = Suc (2 * m)))"
                },
                {
                    "args": "even_def_1, (even 0 ⟶ (∃m::nat. 0 = 2 * m)) ∧ (¬(even 0) ⟶ (∃m. 0 = Suc (2 * m)))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (even 0 ⟶ (∃m::nat. 0 = 2 * m)) ∧ (¬(even 0) ⟶ (∃m. 0 = Suc (2 * m)))"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⟶ (even (Suc n) ⟶ (∃m. Suc n = 2 * m)) ∧ (¬(even (Suc n)) ⟶ (∃m. Suc n = Suc (2 * m)))"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))"
                },
                {
                    "args": "conjD1, {A: even n ⟶ (∃m. n = 2 * m), B: ¬(even n) ⟶ (∃m. n = Suc (2 * m))}",
                    "id": "4.2",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ even n ⟶ (∃m. n = 2 * m)"
                },
                {
                    "args": "conjD2, {A: even n ⟶ (∃m. n = 2 * m), B: ¬(even n) ⟶ (∃m. n = Suc (2 * m))}",
                    "id": "4.3",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ ¬(even n) ⟶ (∃m. n = Suc (2 * m))"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ ¬(even n) ⟶ (∃m. Suc n = 2 * m)"
                },
                {
                    "args": "¬(even n)",
                    "id": "4.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(even n) ⊢ ¬(even n)"
                },
                {
                    "args": "",
                    "id": "4.4.1",
                    "prevs": [
                        "4.3",
                        "4.4.0"
                    ],
                    "rule": "apply_fact",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))), ¬(even n) ⊢ ∃m. n = Suc (2 * m)"
                },
                {
                    "args": "m, nat",
                    "id": "4.4.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = Suc (2 * m)",
                    "id": "4.4.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = Suc (2 * m) ⊢ n = Suc (2 * m)"
                },
                {
                    "args": "Suc (Suc (2 * m)) = 2 * Suc m",
                    "id": "4.4.4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (Suc (2 * m)) = 2 * Suc m"
                },
                {
                    "args": "Suc n = 2 * Suc m",
                    "id": "4.4.5",
                    "prevs": [
                        "4.4.3",
                        "4.4.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))), ¬(even n) ⊢ Suc n = 2 * Suc m"
                },
                {
                    "args": "exI, {P: λm. Suc n = 2 * m, a: Suc m}",
                    "id": "4.4.6",
                    "prevs": [
                        "4.4.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))), ¬(even n), n = Suc (2 * m) ⊢ ∃a1. Suc n = 2 * a1"
                },
                {
                    "args": "∃m. n = Suc (2 * m)",
                    "id": "4.4.7",
                    "prevs": [
                        "4.4.0",
                        "4.4.1",
                        "4.4.2",
                        "4.4.3",
                        "4.4.6"
                    ],
                    "rule": "intros",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ ¬(even n) ⟶ (∃m. Suc n = 2 * m)"
                },
                {
                    "args": "",
                    "id": "4.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ ¬¬(even n) ⟶ (∃m. Suc n = Suc (2 * m))"
                },
                {
                    "args": "¬¬(even n)",
                    "id": "4.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(even n) ⊢ ¬¬(even n)"
                },
                {
                    "args": "double_neg",
                    "id": "4.5.1",
                    "prevs": [
                        "4.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(even n) ⊢ even n"
                },
                {
                    "args": "",
                    "id": "4.5.2",
                    "prevs": [
                        "4.2",
                        "4.5.1"
                    ],
                    "rule": "apply_fact",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))), ¬¬(even n) ⊢ ∃m. n = 2 * m"
                },
                {
                    "args": "m, nat",
                    "id": "4.5.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = 2 * m",
                    "id": "4.5.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 2 * m ⊢ n = 2 * m"
                },
                {
                    "args": "Suc n = Suc (2 * m)",
                    "id": "4.5.5",
                    "prevs": [
                        "4.5.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 2 * m ⊢ Suc n = Suc (2 * m)"
                },
                {
                    "args": "exI, {P: λm. Suc n = Suc (2 * m), a: m}",
                    "id": "4.5.6",
                    "prevs": [
                        "4.5.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))), ¬¬(even n), n = 2 * m ⊢ ∃a1. Suc n = Suc (2 * a1)"
                },
                {
                    "args": "∃m. n = 2 * m",
                    "id": "4.5.7",
                    "prevs": [
                        "4.5.0",
                        "4.5.2",
                        "4.5.3",
                        "4.5.4",
                        "4.5.6"
                    ],
                    "rule": "intros",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ ¬¬(even n) ⟶ (∃m. Suc n = Suc (2 * m))"
                },
                {
                    "args": "conjI",
                    "id": "4.6",
                    "prevs": [
                        "4.4",
                        "4.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ (¬(even n) ⟶ (∃m. Suc n = 2 * m)) ∧ (¬¬(even n) ⟶ (∃m. Suc n = Suc (2 * m)))"
                },
                {
                    "args": "even_def_2, (even (Suc n) ⟶ (∃m. Suc n = 2 * m)) ∧ (¬(even (Suc n)) ⟶ (∃m. Suc n = Suc (2 * m)))",
                    "id": "4.7",
                    "prevs": [
                        "4.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⊢ (even (Suc n) ⟶ (∃m. Suc n = 2 * m)) ∧ (¬(even (Suc n)) ⟶ (∃m. Suc n = Suc (2 * m)))"
                },
                {
                    "args": "",
                    "id": "4.8",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))) ⟶ (even (Suc n) ⟶ (∃m. Suc n = 2 * m)) ∧ (¬(even (Suc n)) ⟶ (∃m. Suc n = Suc (2 * m)))"
                },
                {
                    "args": "nat_induct, {P: λn. (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m))), x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))"
                }
            ],
            "prop": "(even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "4.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_def_2"
                },
                {
                    "goal_id": "4.4",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "4.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3",
                        "4.4.0"
                    ],
                    "goal_id": "4.4.1",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "4.4.1"
                    ],
                    "goal_id": "4.4.2",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "goal_id": "4.4.4",
                    "method_name": "inst_exists_goal",
                    "s": "Suc m"
                },
                {
                    "fact_ids": [
                        "4.4.3"
                    ],
                    "goal_id": "4.4.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.4.4",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "4.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.5.0"
                    ],
                    "goal_id": "4.5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "4.2",
                        "4.5.1"
                    ],
                    "goal_id": "4.5.2",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "4.5.2"
                    ],
                    "goal_id": "4.5.3",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "goal_id": "4.5.5",
                    "method_name": "inst_exists_goal",
                    "s": "m"
                },
                {
                    "fact_ids": [
                        "4.5.4"
                    ],
                    "goal_id": "4.5.5",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "even_exists",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "even_exists_lemma, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))"
                },
                {
                    "args": "conjD1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ even n ⟶ (∃m. n = 2 * m)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃m. n = 2 * m) ⟶ even n"
                },
                {
                    "args": "∃m. n = 2 * m",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. n = 2 * m ⊢ ∃m. n = 2 * m"
                },
                {
                    "args": "m, nat",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = 2 * m",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 2 * m ⊢ n = 2 * m"
                },
                {
                    "args": "even_double, {n: m}",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ even (2 * m)"
                },
                {
                    "args": "even n",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 2 * m, ∃m. n = 2 * m ⊢ even n"
                },
                {
                    "args": "∃m. n = 2 * m",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃m. n = 2 * m) ⟶ even n"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ even n ⟷ (∃m. n = 2 * m)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ even n ⟷ (∃m. n = 2 * m)"
                }
            ],
            "prop": "even n ⟷ (∃m. n = 2 * m)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "even_exists_lemma"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "even_double"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "odd_exists",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "even_exists_lemma, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (even n ⟶ (∃m. n = 2 * m)) ∧ (¬(even n) ⟶ (∃m. n = Suc (2 * m)))"
                },
                {
                    "args": "not_even",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ (even n ⟶ (∃m. n = 2 * m)) ∧ (odd n ⟶ (∃m. n = Suc (2 * m)))"
                },
                {
                    "args": "conjD2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ odd n ⟶ (∃m. n = Suc (2 * m))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃m. n = Suc (2 * m)) ⟶ odd n"
                },
                {
                    "args": "∃m. n = Suc (2 * m)",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃m. n = Suc (2 * m) ⊢ ∃m. n = Suc (2 * m)"
                },
                {
                    "args": "m, nat",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "n = Suc (2 * m)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = Suc (2 * m) ⊢ n = Suc (2 * m)"
                },
                {
                    "args": "odd_double, {n: m}",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ odd (Suc (2 * m))"
                },
                {
                    "args": "odd n",
                    "id": "3.4",
                    "prevs": [
                        "3.2",
                        "3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = Suc (2 * m), ∃m. n = Suc (2 * m) ⊢ odd n"
                },
                {
                    "args": "∃m. n = Suc (2 * m)",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃m. n = Suc (2 * m)) ⟶ odd n"
                },
                {
                    "args": "iffI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ odd n ⟷ (∃m. n = Suc (2 * m))"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ odd n ⟷ (∃m. n = Suc (2 * m))"
                }
            ],
            "prop": "odd n ⟷ (∃m. n = Suc (2 * m))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "even_exists_lemma"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_even"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.0"
                    ],
                    "goal_id": "3.1",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "odd_double"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "nat_divide",
            "ty": "def.ax",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "name": "nat_modulus",
            "ty": "def.ax",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "name": "fact",
            "rules": [
                {
                    "prop": "fact 0 = 1"
                },
                {
                    "prop": "fact (Suc n) = Suc n * fact n"
                }
            ],
            "ty": "def.ind",
            "type": "nat ⇒ nat"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "fact_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (0::nat) < 1"
                },
                {
                    "args": "fact_def_1, 0 < fact 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 < fact 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. 0 < fact n ⟶ 0 < fact (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "0 < fact n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < fact n ⊢ 0 < fact n"
                },
                {
                    "args": "le_0, {n: n}",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "less_Suc_lesseq, 0 < Suc n",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < fact n ⊢ 0 < Suc n"
                },
                {
                    "args": "conjI",
                    "id": "3.4",
                    "prevs": [
                        "3.3",
                        "3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < fact n ⊢ 0 < Suc n ∧ 0 < fact n"
                },
                {
                    "args": "lt_mult, 0 < Suc n * fact n",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < fact n ⊢ 0 < Suc n * fact n"
                },
                {
                    "args": "fact_def_2, 0 < fact (Suc n)",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < fact n ⊢ 0 < fact (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. 0 < fact n ⟶ 0 < fact (Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn. 0 < fact n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < fact n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < fact n"
                }
            ],
            "prop": "0 < fact n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "fact_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "fact_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_mult"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "less_Suc_lesseq"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "fact_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "fact_lt, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < fact n"
                },
                {
                    "args": "lesseq_Suc_less, Suc 0 ≤ fact n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 0 ≤ fact n"
                },
                {
                    "args": "nat_one_def, 1 ≤ fact n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 ≤ fact n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 ≤ fact n"
                }
            ],
            "prop": "1 ≤ fact n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lesseq_Suc_less"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "fact_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "fact_nz",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "fact_lt, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 < fact n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ fact n = 0 ⟶ ¬(0 < fact n)"
                },
                {
                    "args": "fact n = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "fact n = 0 ⊢ fact n = 0"
                },
                {
                    "args": "false ⟶ false",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "fact n = 0 ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬((0::nat) < 0)",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "fact n = 0 ⊢ ¬((0::nat) < 0)"
                },
                {
                    "args": "¬(0 < fact n)",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "fact n = 0 ⊢ ¬(0 < fact n)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ fact n = 0 ⟶ ¬(0 < fact n)"
                },
                {
                    "args": "double_neg, ¬¬(fact n = 0) ⟶ ¬(0 < fact n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬¬(fact n = 0) ⟶ ¬(0 < fact n)"
                },
                {
                    "args": "contrapositive",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬(fact n = 0)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(fact n = 0)"
                }
            ],
            "prop": "¬(fact n = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "fact_lt"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "fact_mono",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m ≤ n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "less_eq_exist",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ n ⊢ ∃p. n = m + p"
                },
                {
                    "args": "d, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "n = m + d",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + d ⊢ n = m + d"
                },
                {
                    "args": "less_eq_refl, {n: fact m}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ fact m ≤ fact m"
                },
                {
                    "args": "add_0_right, fact m ≤ fact (m + 0)",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d ⊢ fact m ≤ fact (m + 0)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n, n = m + d ⊢ ∀n. fact m ≤ fact (m + n) ⟶ fact m ≤ fact (m + Suc n)"
                },
                {
                    "args": "a, nat",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "fact m ≤ fact (m + a)",
                    "id": "6.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "fact m ≤ fact (m + a) ⊢ fact m ≤ fact (m + a)"
                },
                {
                    "args": "le_add, {m: fact (m + a), n: (m + a) * fact (m + a)}",
                    "id": "6.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ fact (m + a) ≤ fact (m + a) + (m + a) * fact (m + a)"
                },
                {
                    "args": "less_eq_trans",
                    "id": "6.3",
                    "prevs": [
                        "6.1",
                        "6.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ fact (m + a) + (m + a) * fact (m + a)"
                },
                {
                    "args": "add_comm, fact m ≤ (m + a) * fact (m + a) + fact (m + a)",
                    "id": "6.4",
                    "prevs": [
                        "6.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ (m + a) * fact (m + a) + fact (m + a)"
                },
                {
                    "args": "mult_1_left, fact m ≤ (m + a) * fact (m + a) + 1 * fact (m + a)",
                    "id": "6.5",
                    "prevs": [
                        "6.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ (m + a) * fact (m + a) + 1 * fact (m + a)"
                },
                {
                    "args": "distrib_r, fact m ≤ (m + a + 1) * fact (m + a)",
                    "id": "6.6",
                    "prevs": [
                        "6.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ (m + a + 1) * fact (m + a)"
                },
                {
                    "args": "add_1_right, fact m ≤ Suc (m + a) * fact (m + a)",
                    "id": "6.7",
                    "prevs": [
                        "6.6"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ Suc (m + a) * fact (m + a)"
                },
                {
                    "args": "fact_def_2, fact m ≤ fact (Suc (m + a))",
                    "id": "6.8",
                    "prevs": [
                        "6.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ fact (Suc (m + a))"
                },
                {
                    "args": "add_Suc_right, fact m ≤ fact (m + Suc a)",
                    "id": "6.9",
                    "prevs": [
                        "6.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d, fact m ≤ fact (m + a) ⊢ fact m ≤ fact (m + Suc a)"
                },
                {
                    "args": "",
                    "id": "6.10",
                    "prevs": [
                        "6.0",
                        "6.1",
                        "6.9"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n, n = m + d ⊢ ∀a. fact m ≤ fact (m + a) ⟶ fact m ≤ fact (m + Suc a)"
                },
                {
                    "args": "nat_induct, {P: λd. fact m ≤ fact (m + d), x: d}",
                    "id": "7",
                    "prevs": [
                        "5",
                        "6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, n = m + d ⊢ fact m ≤ fact (m + d)"
                },
                {
                    "args": "fact m ≤ fact n",
                    "id": "8",
                    "prevs": [
                        "3",
                        "7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ n, n = m + d ⊢ fact m ≤ fact n"
                },
                {
                    "args": "∃p. n = m + p",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟶ fact m ≤ fact n"
                }
            ],
            "prop": "m ≤ n ⟶ fact m ≤ fact n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "d"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction",
                    "names": "a"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "fact_def_2"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_r"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "apply_backward_step",
                    "param_m": "fact (m + a)",
                    "theorem": "less_eq_trans"
                },
                {
                    "goal_id": "6.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_add"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_eq_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (1::nat) = 0 ⟶ m = 0 ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "(1::nat) = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(1::nat) = 0 ⊢ (1::nat) = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(1::nat) = 0 ⊢ ¬(m = 0 ∧ ¬((0::nat) = 0)) ⟶ ¬((1::nat) = 0)"
                },
                {
                    "args": "¬(m = 0 ∧ ¬((0::nat) = 0))",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0 ∧ ¬((0::nat) = 0)) ⊢ ¬(m = 0 ∧ ¬((0::nat) = 0))"
                },
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "(1::nat) = 0 ⊢ ¬(m = 0 ∧ ¬((0::nat) = 0)) ⟶ ¬((1::nat) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "(1::nat) = 0 ⊢ m = 0 ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (1::nat) = 0 ⟶ m = 0 ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ∧ ¬((0::nat) = 0) ⟶ (1::nat) = 0"
                },
                {
                    "args": "m = 0 ∧ ¬((0::nat) = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∧ ¬((0::nat) = 0) ⊢ m = 0 ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "conjD2",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ∧ ¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ∧ ¬((0::nat) = 0) ⊢ ¬((1::nat) = 0) ⟶ ¬¬((0::nat) = 0)"
                },
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((1::nat) = 0) ⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "double_neg, ¬¬((0::nat) = 0)",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ∧ ¬((0::nat) = 0) ⊢ ¬((1::nat) = 0) ⟶ ¬¬((0::nat) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ∧ ¬((0::nat) = 0) ⊢ (1::nat) = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ∧ ¬((0::nat) = 0) ⟶ (1::nat) = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (1::nat) = 0 ⟷ m = 0 ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "nat_nat_power_def_1, m ^ (0::nat) = 0 ⟷ m = 0 ∧ ¬((0::nat) = 0)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (0::nat) = 0 ⟷ m = 0 ∧ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⟶ m ^ Suc n = 0 ⟷ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0)",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m * m ^ n = 0 ⟶ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "m * m ^ n = 0",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * m ^ n = 0 ⊢ m * m ^ n = 0"
                },
                {
                    "args": "mult_nonzero",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * m ^ n = 0 ⊢ m = 0 ∨ m ^ n = 0"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ⟶ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "m = 0",
                    "id": "4.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: n}",
                    "id": "4.2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc n)"
                },
                {
                    "args": "eq_sym_eq, ¬(Suc n = 0)",
                    "id": "4.2.2.2",
                    "prevs": [
                        "4.2.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "4.2.2.3",
                    "prevs": [
                        "4.2.2.0",
                        "4.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.2.2.4",
                    "prevs": [
                        "4.2.2.0",
                        "4.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ⟶ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m ^ n = 0 ⟶ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "m ^ n = 0",
                    "id": "4.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ^ n = 0 ⊢ m ^ n = 0"
                },
                {
                    "args": "",
                    "id": "4.2.3.1",
                    "prevs": [
                        "4.1",
                        "4.2.3.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ∧ ¬(n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "4.2.3.2",
                    "prevs": [
                        "4.2.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: n}",
                    "id": "4.2.3.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc n)"
                },
                {
                    "args": "ineq_sym",
                    "id": "4.2.3.4",
                    "prevs": [
                        "4.2.3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ^ n = 0, m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "4.2.3.5",
                    "prevs": [
                        "4.2.3.2",
                        "4.2.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ^ n = 0, m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.2.3.6",
                    "prevs": [
                        "4.2.3.0",
                        "4.2.3.5"
                    ],
                    "rule": "intros",
                    "th": "m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m ^ n = 0 ⟶ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "disjE",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.1",
                        "4.2.2",
                        "4.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * m ^ n = 0, m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.2.5",
                    "prevs": [
                        "4.2.0",
                        "4.2.4"
                    ],
                    "rule": "intros",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m * m ^ n = 0 ⟶ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ∧ ¬(Suc n = 0) ⟶ m * m ^ n = 0"
                },
                {
                    "args": "m = 0 ∧ ¬(Suc n = 0)",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∧ ¬(Suc n = 0) ⊢ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "4.3.1",
                    "prevs": [
                        "4.3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ∧ ¬(Suc n = 0) ⊢ m = 0"
                },
                {
                    "args": "nat_times_def_1, (0::nat) * 0 ^ n = 0",
                    "id": "4.3.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 0 ^ n = 0"
                },
                {
                    "args": "m * m ^ n = 0",
                    "id": "4.3.3",
                    "prevs": [
                        "4.3.1",
                        "4.3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0 ∧ ¬(Suc n = 0), m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m * m ^ n = 0"
                },
                {
                    "args": "",
                    "id": "4.3.4",
                    "prevs": [
                        "4.3.0",
                        "4.3.3"
                    ],
                    "rule": "intros",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m = 0 ∧ ¬(Suc n = 0) ⟶ m * m ^ n = 0"
                },
                {
                    "args": "iffI",
                    "id": "4.4",
                    "prevs": [
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m * m ^ n = 0 ⟷ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "nat_nat_power_def_2, m ^ Suc n = 0 ⟷ m = 0 ∧ ¬(Suc n = 0)",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⊢ m ^ Suc n = 0 ⟷ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.6",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0) ⟶ m ^ Suc n = 0 ⟷ m = 0 ∧ ¬(Suc n = 0)"
                },
                {
                    "args": "nat_induct, {P: λn::nat. m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0), x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0)"
                }
            ],
            "prop": "m ^ n = 0 ⟷ m = 0 ∧ ¬(n = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "mult_nonzero"
                },
                {
                    "fact_ids": [
                        "4.2.1"
                    ],
                    "goal_id": "4.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "4.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "4.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "goal_id": "4.2.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.1",
                        "4.2.3.0"
                    ],
                    "goal_id": "4.2.3.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "4.2.3.1"
                    ],
                    "goal_id": "4.2.3.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "4.2.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "4.2.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "ineq_sym"
                },
                {
                    "goal_id": "4.2.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "4.3.1"
                    ],
                    "goal_id": "4.3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_eq_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (1::nat) = 1 ⟶ m = 1 ∨ (0::nat) = 0"
                },
                {
                    "args": "(1::nat) = 1",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(1::nat) = 1 ⊢ (1::nat) = 1"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "disjI2, {A: m = 1, B: (0::nat) = 0}",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(1::nat) = 1 ⊢ m = 1 ∨ (0::nat) = 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (1::nat) = 1 ⟶ m = 1 ∨ (0::nat) = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 1 ∨ (0::nat) = 0 ⟶ (1::nat) = 1"
                },
                {
                    "args": "m = 1 ∨ (0::nat) = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 1 ∨ (0::nat) = 0 ⊢ m = 1 ∨ (0::nat) = 0"
                },
                {
                    "args": "eq_refl, {x: (1::nat)}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) = 1"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 1 ∨ (0::nat) = 0 ⟶ (1::nat) = 1"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (1::nat) = 1 ⟷ m = 1 ∨ (0::nat) = 0"
                },
                {
                    "args": "nat_nat_power_def_1, m ^ (0::nat) = 1 ⟷ m = 1 ∨ (0::nat) = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (0::nat) = 1 ⟷ m = 1 ∨ (0::nat) = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⟶ m ^ Suc n = 1 ⟷ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "n, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ^ n = 1 ⟷ m = 1 ∨ n = 0",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m ^ n = 1 ⟷ m = 1 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m * m ^ n = 1 ⟶ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "m * m ^ n = 1",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * m ^ n = 1 ⊢ m * m ^ n = 1"
                },
                {
                    "args": "mult_eq_1",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m * m ^ n = 1 ⊢ m = 1 ∧ m ^ n = 1"
                },
                {
                    "args": "conjD1",
                    "id": "4.2.2",
                    "prevs": [
                        "4.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * m ^ n = 1 ⊢ m = 1"
                },
                {
                    "args": "disjI1, {A: m = 1, B: Suc n = 0}",
                    "id": "4.2.3",
                    "prevs": [
                        "4.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m * m ^ n = 1, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "",
                    "id": "4.2.4",
                    "prevs": [
                        "4.2.0",
                        "4.2.3"
                    ],
                    "rule": "intros",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m * m ^ n = 1 ⟶ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "",
                    "id": "4.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m = 1 ∨ Suc n = 0 ⟶ m * m ^ n = 1"
                },
                {
                    "args": "m = 1 ∨ Suc n = 0",
                    "id": "4.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 1 ∨ Suc n = 0 ⊢ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "",
                    "id": "4.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m = 1 ⟶ m * m ^ n = 1"
                },
                {
                    "args": "m = 1",
                    "id": "4.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 1 ⊢ m = 1"
                },
                {
                    "args": "mult_1_left, (1::nat) * 1 = 1",
                    "id": "4.3.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::nat) * 1 = 1"
                },
                {
                    "args": "nat_nat_power_def_1, (1::nat) * 1 ^ (0::nat) = 1",
                    "id": "4.3.1.2",
                    "prevs": [
                        "4.3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ (1::nat) * 1 ^ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "4.3.1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ ∀n. (1::nat) * 1 ^ n = 1 ⟶ (1::nat) * 1 ^ Suc n = 1"
                },
                {
                    "args": "n1, nat",
                    "id": "4.3.1.3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n1"
                },
                {
                    "args": "(1::nat) * 1 ^ n1 = 1",
                    "id": "4.3.1.3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(1::nat) * 1 ^ n1 = 1 ⊢ (1::nat) * 1 ^ n1 = 1"
                },
                {
                    "args": "(1::nat) * (1 * 1 ^ n1) = 1",
                    "id": "4.3.1.3.2",
                    "prevs": [
                        "4.3.1.3.1",
                        "4.3.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 1, (1::nat) * 1 ^ n1 = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ (1::nat) * (1 * 1 ^ n1) = 1"
                },
                {
                    "args": "nat_nat_power_def_2, (1::nat) * 1 ^ Suc n1 = 1",
                    "id": "4.3.1.3.3",
                    "prevs": [
                        "4.3.1.3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 1, (1::nat) * 1 ^ n1 = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ (1::nat) * 1 ^ Suc n1 = 1"
                },
                {
                    "args": "",
                    "id": "4.3.1.3.4",
                    "prevs": [
                        "4.3.1.3.0",
                        "4.3.1.3.1",
                        "4.3.1.3.3"
                    ],
                    "rule": "intros",
                    "th": "m = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ ∀n1. (1::nat) * 1 ^ n1 = 1 ⟶ (1::nat) * 1 ^ Suc n1 = 1"
                },
                {
                    "args": "nat_induct, {P: λn::nat. (1::nat) * 1 ^ n = 1, x: n}",
                    "id": "4.3.1.4",
                    "prevs": [
                        "4.3.1.2",
                        "4.3.1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ (1::nat) * 1 ^ n = 1"
                },
                {
                    "args": "m * m ^ n = 1",
                    "id": "4.3.1.5",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 1, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m * m ^ n = 1"
                },
                {
                    "args": "",
                    "id": "4.3.1.6",
                    "prevs": [
                        "4.3.1.0",
                        "4.3.1.5"
                    ],
                    "rule": "intros",
                    "th": "m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m = 1 ⟶ m * m ^ n = 1"
                },
                {
                    "args": "",
                    "id": "4.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ Suc n = 0 ⟶ m * m ^ n = 1"
                },
                {
                    "args": "Suc n = 0",
                    "id": "4.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Suc n = 0 ⊢ Suc n = 0"
                },
                {
                    "args": "",
                    "id": "4.3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Suc n = 0, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ ¬(m * m ^ n = 1) ⟶ ¬(Suc n = 0)"
                },
                {
                    "args": "¬(m * m ^ n = 1)",
                    "id": "4.3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * m ^ n = 1) ⊢ ¬(m * m ^ n = 1)"
                },
                {
                    "args": "nat_zero_Suc_neq, {n: n}",
                    "id": "4.3.2.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(0 = Suc n)"
                },
                {
                    "args": "ineq_sym",
                    "id": "4.3.2.1.2",
                    "prevs": [
                        "4.3.2.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = 0, ¬(m * m ^ n = 1), m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "",
                    "id": "4.3.2.1.3",
                    "prevs": [
                        "4.3.2.1.0",
                        "4.3.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "Suc n = 0, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ ¬(m * m ^ n = 1) ⟶ ¬(Suc n = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "4.3.2.2",
                    "prevs": [
                        "4.3.2.0",
                        "4.3.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "Suc n = 0, m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m * m ^ n = 1"
                },
                {
                    "args": "",
                    "id": "4.3.2.3",
                    "prevs": [
                        "4.3.2.0",
                        "4.3.2.2"
                    ],
                    "rule": "intros",
                    "th": "m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ Suc n = 0 ⟶ m * m ^ n = 1"
                },
                {
                    "args": "disjE",
                    "id": "4.3.3",
                    "prevs": [
                        "4.3.0",
                        "4.3.1",
                        "4.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 1 ∨ Suc n = 0, m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m * m ^ n = 1"
                },
                {
                    "args": "",
                    "id": "4.3.4",
                    "prevs": [
                        "4.3.0",
                        "4.3.3"
                    ],
                    "rule": "intros",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m = 1 ∨ Suc n = 0 ⟶ m * m ^ n = 1"
                },
                {
                    "args": "iffI",
                    "id": "4.4",
                    "prevs": [
                        "4.2",
                        "4.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m * m ^ n = 1 ⟷ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "nat_nat_power_def_2, m ^ Suc n = 1 ⟷ m = 1 ∨ Suc n = 0",
                    "id": "4.5",
                    "prevs": [
                        "4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⊢ m ^ Suc n = 1 ⟷ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "",
                    "id": "4.6",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ^ n = 1 ⟷ m = 1 ∨ n = 0 ⟶ m ^ Suc n = 1 ⟷ m = 1 ∨ Suc n = 0"
                },
                {
                    "args": "nat_induct, {P: λn::nat. m ^ n = 1 ⟷ m = 1 ∨ n = 0, x: n}",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ^ n = 1 ⟷ m = 1 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ^ n = 1 ⟷ m = 1 ∨ n = 0"
                }
            ],
            "prop": "m ^ n = 1 ⟷ m = 1 ∨ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "4.2.0"
                    ],
                    "goal_id": "4.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_eq_1"
                },
                {
                    "fact_ids": [
                        "4.2.1"
                    ],
                    "goal_id": "4.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "4.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.0"
                    ],
                    "goal_id": "4.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.1.0"
                    ],
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "4.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "4.3.1.3",
                    "method_name": "introduction",
                    "names": "n1"
                },
                {
                    "goal_id": "4.3.1.3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "fact_ids": [
                        "4.3.1.3.1"
                    ],
                    "goal_id": "4.3.1.3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "4.3.2.0"
                    ],
                    "goal_id": "4.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "4.3.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.3.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "ineq_sym"
                },
                {
                    "goal_id": "4.3.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_zero_Suc_neq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "nat_nat_power_def_1, (0::nat) ^ (0::nat) = 1",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) ^ (0::nat) = 1"
                },
                {
                    "args": "(0::nat) ^ n = 1",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ (0::nat) ^ n = 1"
                },
                {
                    "args": "if_P, (0::nat) ^ n = (if n = 0 then 1 else 0)",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "conjI",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ (0::nat) = 0 ∧ ¬(n = 0)"
                },
                {
                    "args": "exp_eq_0, (0::nat) ^ n = 0",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (0::nat) ^ n = 0"
                },
                {
                    "args": "if_not_P, (0::nat) ^ n = (if n = 0 then 1 else 0)",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (0::nat) ^ n = (if n = 0 then 1 else 0)"
                }
            ],
            "prop": "(0::nat) ^ n = (if n = 0 then 1 else 0)",
            "steps": [
                {
                    "case": "n=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "nat_power_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_right, m * 1 = m",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m * 1 = m"
                },
                {
                    "args": "nat_nat_power_def_1, m * m ^ (0::nat) = m",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m * m ^ (0::nat) = m"
                },
                {
                    "args": "nat_nat_power_def_2, m ^ Suc 0 = m",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ Suc 0 = m"
                },
                {
                    "args": "nat_one_def, m ^ (1::nat) = m",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (1::nat) = m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ^ (1::nat) = m"
                }
            ],
            "prop": "m ^ (1::nat) = m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "nat_power_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_right, m ^ p = m ^ p * 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ p = m ^ p * 1"
                },
                {
                    "args": "add_0_right, m ^ (p + 0) = m ^ p * 1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (p + 0) = m ^ p * 1"
                },
                {
                    "args": "nat_nat_power_def_1, m ^ (p + 0) = m ^ p * m ^ (0::nat)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (p + 0) = m ^ p * m ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. m ^ (p + n) = m ^ p * m ^ n ⟶ m ^ (p + Suc n) = m ^ p * m ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "m ^ (p + n) = m ^ p * m ^ n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ^ (p + n) = m ^ p * m ^ n ⊢ m ^ (p + n) = m ^ p * m ^ n"
                },
                {
                    "args": "m * (m ^ p * m ^ n) = m ^ p * (m * m ^ n)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * (m ^ p * m ^ n) = m ^ p * (m * m ^ n)"
                },
                {
                    "args": "m * m ^ (p + n) = m ^ p * (m * m ^ n)",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ^ (p + n) = m ^ p * m ^ n ⊢ m * m ^ (p + n) = m ^ p * (m * m ^ n)"
                },
                {
                    "args": "nat_nat_power_def_2, m ^ Suc (p + n) = m ^ p * m ^ Suc n",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ (p + n) = m ^ p * m ^ n ⊢ m ^ Suc (p + n) = m ^ p * m ^ Suc n"
                },
                {
                    "args": "add_Suc_right, m ^ (p + Suc n) = m ^ p * m ^ Suc n",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ (p + n) = m ^ p * m ^ n ⊢ m ^ (p + Suc n) = m ^ p * m ^ Suc n"
                },
                {
                    "args": "",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. m ^ (p + n) = m ^ p * m ^ n ⟶ m ^ (p + Suc n) = m ^ p * m ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λq. m ^ (p + q) = m ^ p * m ^ q, x: q}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ^ (p + q) = m ^ p * m ^ q"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ^ (p + q) = m ^ p * m ^ q"
                }
            ],
            "prop": "m ^ (p + q) = m ^ p * m ^ q",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "q"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "fact_ids": [
                        "3.1"
                    ],
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_one",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_nat_power_def_1, (1::nat) ^ (0::nat) = 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::nat) ^ (0::nat) = 1"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (1::nat) ^ n = 1 ⟶ (1::nat) ^ Suc n = 1"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "(1::nat) ^ n = 1",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(1::nat) ^ n = 1 ⊢ (1::nat) ^ n = 1"
                },
                {
                    "args": "mult_1_left, (1::nat) * 1 = 1",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::nat) * 1 = 1"
                },
                {
                    "args": "(1::nat) * 1 ^ n = 1",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "(1::nat) ^ n = 1 ⊢ (1::nat) * 1 ^ n = 1"
                },
                {
                    "args": "nat_nat_power_def_2, (1::nat) ^ Suc n = 1",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(1::nat) ^ n = 1 ⊢ (1::nat) ^ Suc n = 1"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (1::nat) ^ n = 1 ⟶ (1::nat) ^ Suc n = 1"
                },
                {
                    "args": "nat_induct, {P: λn::nat. (1::nat) ^ n = 1, x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) ^ n = 1"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (1::nat) ^ n = 1"
                }
            ],
            "prop": "(1::nat) ^ n = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_right, n * 1 = n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n * 1 = n"
                },
                {
                    "args": "nat_nat_power_def_1, n * n ^ (0::nat) = n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n * n ^ (0::nat) = n"
                },
                {
                    "args": "nat_nat_power_def_2, n ^ Suc 0 = n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ^ Suc 0 = n"
                },
                {
                    "args": "nat_one_def, n ^ (1::nat) = n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ^ (1::nat) = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n ^ (1::nat) = n"
                }
            ],
            "prop": "n ^ (1::nat) = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "exp_1, n ^ (1::nat) * n ^ (1::nat) = n * n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ^ (1::nat) * n ^ (1::nat) = n * n"
                },
                {
                    "args": "nat_power_add, n ^ ((1::nat) + 1) = n * n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ^ ((1::nat) + 1) = n * n"
                },
                {
                    "args": "nat_of_nat_def, n ^ (of_nat::nat ⇒ nat) (1 + 1) = n * n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ^ (of_nat::nat ⇒ nat) (1 + 1) = n * n"
                },
                {
                    "args": "bit0_def, n ^ (2::nat) = n * n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ^ (2::nat) = n * n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n ^ (2::nat) = n * n"
                }
            ],
            "prop": "n ^ (2::nat) = n * n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "bit0_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "nat_of_nat_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_power_add"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_left, (1::nat) = 1 * 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::nat) = 1 * 1"
                },
                {
                    "args": "nat_nat_power_def_1, (m * n) ^ (0::nat) = m ^ (0::nat) * n ^ (0::nat)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (m * n) ^ (0::nat) = m ^ (0::nat) * n ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n1. (m * n) ^ n1 = m ^ n1 * n ^ n1 ⟶ (m * n) ^ Suc n1 = m ^ Suc n1 * n ^ Suc n1"
                },
                {
                    "args": "p, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "(m * n) ^ p = m ^ p * n ^ p",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(m * n) ^ p = m ^ p * n ^ p ⊢ (m * n) ^ p = m ^ p * n ^ p"
                },
                {
                    "args": "m * n * (m ^ p * n ^ p) = m * m ^ p * (n * n ^ p)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * n * (m ^ p * n ^ p) = m * m ^ p * (n * n ^ p)"
                },
                {
                    "args": "m * n * (m * n) ^ p = m * m ^ p * (n * n ^ p)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "(m * n) ^ p = m ^ p * n ^ p ⊢ m * n * (m * n) ^ p = m * m ^ p * (n * n ^ p)"
                },
                {
                    "args": "nat_nat_power_def_2, (m * n) ^ Suc p = m ^ Suc p * n ^ Suc p",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(m * n) ^ p = m ^ p * n ^ p ⊢ (m * n) ^ Suc p = m ^ Suc p * n ^ Suc p"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀p. (m * n) ^ p = m ^ p * n ^ p ⟶ (m * n) ^ Suc p = m ^ Suc p * n ^ Suc p"
                },
                {
                    "args": "nat_induct, {P: λp::nat. (m * n) ^ p = m ^ p * n ^ p, x: p}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (m * n) ^ p = m ^ p * n ^ p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (m * n) ^ p = m ^ p * n ^ p"
                }
            ],
            "prop": "(m * n) ^ p = m ^ p * n ^ p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "p"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "p"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_nat_power_def_1, m ^ (0::nat) = m ^ n ^ (0::nat)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (0::nat) = m ^ n ^ (0::nat)"
                },
                {
                    "args": "mult_0_right, m ^ (n * 0) = m ^ n ^ (0::nat)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m ^ (n * 0) = m ^ n ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n1. m ^ (n * n1) = m ^ n ^ n1 ⟶ m ^ (n * Suc n1) = m ^ n ^ Suc n1"
                },
                {
                    "args": "p, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m ^ (n * p) = m ^ n ^ p",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ^ (n * p) = m ^ n ^ p ⊢ m ^ (n * p) = m ^ n ^ p"
                },
                {
                    "args": "m ^ n * m ^ (n * p) = m ^ n * m ^ n ^ p",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ^ (n * p) = m ^ n ^ p ⊢ m ^ n * m ^ (n * p) = m ^ n * m ^ n ^ p"
                },
                {
                    "args": "nat_nat_power_def_2, m ^ n * m ^ (n * p) = m ^ n ^ Suc p",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ (n * p) = m ^ n ^ p ⊢ m ^ n * m ^ (n * p) = m ^ n ^ Suc p"
                },
                {
                    "args": "nat_power_add, m ^ (n + n * p) = m ^ n ^ Suc p",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ (n * p) = m ^ n ^ p ⊢ m ^ (n + n * p) = m ^ n ^ Suc p"
                },
                {
                    "args": "mult_Suc_right, m ^ (n * Suc p) = m ^ n ^ Suc p",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ^ (n * p) = m ^ n ^ p ⊢ m ^ (n * Suc p) = m ^ n ^ Suc p"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀p. m ^ (n * p) = m ^ n ^ p ⟶ m ^ (n * Suc p) = m ^ n ^ Suc p"
                },
                {
                    "args": "nat_induct, {P: λp. m ^ (n * p) = m ^ n ^ p, x: p}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m ^ (n * p) = m ^ n ^ p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ^ (n * p) = m ^ n ^ p"
                }
            ],
            "prop": "m ^ (n * p) = m ^ n ^ p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "p"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "p"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_power_add"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_lt_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "double_neg, ¬(x = 0) ∨ ¬¬(n = 0) ⟷ ¬(x = 0) ∨ n = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x = 0) ∨ ¬¬(n = 0) ⟷ ¬(x = 0) ∨ n = 0"
                },
                {
                    "args": "de_morgan_thm1, ¬(x = 0 ∧ ¬(n = 0)) ⟷ ¬(x = 0) ∨ n = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x = 0 ∧ ¬(n = 0)) ⟷ ¬(x = 0) ∨ n = 0"
                },
                {
                    "args": "exp_eq_0, ¬(x ^ n = 0) ⟷ ¬(x = 0) ∨ n = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x ^ n = 0) ⟷ ¬(x = 0) ∨ n = 0"
                },
                {
                    "args": "nat_less_eq_def_1, ¬(x ^ n ≤ 0) ⟷ ¬(x = 0) ∨ n = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x ^ n ≤ 0) ⟷ ¬(x = 0) ∨ n = 0"
                },
                {
                    "args": "not_le, 0 < x ^ n ⟷ ¬(x = 0) ∨ n = 0",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ 0 < x ^ n ⟷ ¬(x = 0) ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < x ^ n ⟷ ¬(x = 0) ∨ n = 0"
                }
            ],
            "prop": "0 < x ^ n ⟷ ¬(x = 0) ∨ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lt_pow2_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (0::nat) < 1"
                },
                {
                    "args": "nat_nat_power_def_1, (0::nat) < 2 ^ (0::nat)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) < 2 ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n < 2 ^ n ⟶ Suc n < 2 ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n < 2 ^ n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < 2 ^ n ⊢ n < 2 ^ n"
                },
                {
                    "args": "¬((2::nat) = 0)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((2::nat) = 0)"
                },
                {
                    "args": "disjI1, {A: ¬((2::nat) = 0), B: ¬¬(n = 0)}",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n < 2 ^ n ⊢ ¬((2::nat) = 0) ∨ ¬¬(n = 0)"
                },
                {
                    "args": "de_morgan_thm1, ¬((2::nat) = 0 ∧ ¬(n = 0))",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < 2 ^ n ⊢ ¬((2::nat) = 0 ∧ ¬(n = 0))"
                },
                {
                    "args": "exp_eq_0, ¬((2::nat) ^ n = 0)",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < 2 ^ n ⊢ ¬((2::nat) ^ n = 0)"
                },
                {
                    "args": "le_1_2",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < 2 ^ n ⊢ (1::nat) ≤ 2 ^ n"
                },
                {
                    "args": "let_add2",
                    "id": "3.7",
                    "prevs": [
                        "3.6",
                        "3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < 2 ^ n ⊢ 1 + n < 2 ^ n + 2 ^ n"
                },
                {
                    "args": "add_comm, n + 1 < 2 ^ n + 2 ^ n",
                    "id": "3.8",
                    "prevs": [
                        "3.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < 2 ^ n ⊢ n + 1 < 2 ^ n + 2 ^ n"
                },
                {
                    "args": "add_1_right, Suc n < 2 ^ n + 2 ^ n",
                    "id": "3.9",
                    "prevs": [
                        "3.8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "n < 2 ^ n ⊢ Suc n < 2 ^ n + 2 ^ n"
                },
                {
                    "args": "mult_2, Suc n < 2 * 2 ^ n",
                    "id": "3.10",
                    "prevs": [
                        "3.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < 2 ^ n ⊢ Suc n < 2 * 2 ^ n"
                },
                {
                    "args": "nat_nat_power_def_2, Suc n < 2 ^ Suc n",
                    "id": "3.11",
                    "prevs": [
                        "3.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < 2 ^ n ⊢ Suc n < 2 ^ Suc n"
                },
                {
                    "args": "",
                    "id": "3.12",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.11"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n < 2 ^ n ⟶ Suc n < 2 ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. n < 2 ^ n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n < 2 ^ n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ n < 2 ^ n"
                }
            ],
            "prop": "n < 2 ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "add_1_right"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "let_add2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "nat_const_ineq"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lt_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ (0::nat) ^ m < 0 ^ n ⟶ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "(0::nat) ^ m < 0 ^ n",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) ^ m < 0 ^ n ⊢ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n ⊢ ¬(¬(m = 0) ∧ n = 0) ⟶ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "¬(¬(m = 0) ∧ n = 0)",
                    "id": "0.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(¬(m = 0) ∧ n = 0) ⊢ ¬(¬(m = 0) ∧ n = 0)"
                },
                {
                    "args": "de_morgan_thm1",
                    "id": "0.1.2.1",
                    "prevs": [
                        "0.1.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(¬(m = 0) ∧ n = 0) ⊢ ¬¬(m = 0) ∨ ¬(n = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.1.2.2",
                    "prevs": [
                        "0.1.2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(¬(m = 0) ∧ n = 0) ⊢ m = 0 ∨ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "0.1.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ m = 0 ⟶ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "m = 0",
                    "id": "0.1.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.1.2.3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ n = 0 ⟶ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "n = 0",
                    "id": "0.1.2.3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "less_eq_refl, {n: (1::nat)}",
                    "id": "0.1.2.3.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) ≤ 1"
                },
                {
                    "args": "double_neg, ¬¬((1::nat) ≤ 1)",
                    "id": "0.1.2.3.1.2",
                    "prevs": [
                        "0.1.2.3.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, n = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬¬((1::nat) ≤ 1)"
                },
                {
                    "args": "not_le, ¬((1::nat) < 1)",
                    "id": "0.1.2.3.1.3",
                    "prevs": [
                        "0.1.2.3.1.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "m = 0, n = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((1::nat) < 1)"
                },
                {
                    "args": "if_P, ¬((1::nat) < (if n = 0 then 1 else 0))",
                    "id": "0.1.2.3.1.4",
                    "prevs": [
                        "0.1.2.3.1.3",
                        "0.1.2.3.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, n = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "",
                    "id": "0.1.2.3.1.5",
                    "prevs": [
                        "0.1.2.3.1.0",
                        "0.1.2.3.1.4"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ n = 0 ⟶ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "",
                    "id": "0.1.2.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬(n = 0) ⟶ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "0.1.2.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "false ⟶ false",
                    "id": "0.1.2.3.2.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "0.1.2.3.2.2",
                    "prevs": [
                        "0.1.2.3.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬((1::nat) < 0)",
                    "id": "0.1.2.3.2.3",
                    "prevs": [
                        "0.1.2.3.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((1::nat) < 0)"
                },
                {
                    "args": "if_not_P, ¬((1::nat) < (if n = 0 then 1 else 0))",
                    "id": "0.1.2.3.2.4",
                    "prevs": [
                        "0.1.2.3.2.3",
                        "0.1.2.3.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "",
                    "id": "0.1.2.3.2.5",
                    "prevs": [
                        "0.1.2.3.2.0",
                        "0.1.2.3.2.4"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬(n = 0) ⟶ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "classical_cases",
                    "id": "0.1.2.3.3",
                    "prevs": [
                        "0.1.2.3.1",
                        "0.1.2.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((1::nat) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "if_P, ¬((if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0))",
                    "id": "0.1.2.3.4",
                    "prevs": [
                        "0.1.2.3.3",
                        "0.1.2.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "exp_zero, ¬((0::nat) ^ m < 0 ^ n)",
                    "id": "0.1.2.3.5",
                    "prevs": [
                        "0.1.2.3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "",
                    "id": "0.1.2.3.6",
                    "prevs": [
                        "0.1.2.3.0",
                        "0.1.2.3.5"
                    ],
                    "rule": "intros",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ m = 0 ⟶ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "",
                    "id": "0.1.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬(n = 0) ⟶ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "0.1.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "false ⟶ false",
                    "id": "0.1.2.4.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "0.1.2.4.2",
                    "prevs": [
                        "0.1.2.4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬((if m = 0 then (1::nat) else 0) < 0)",
                    "id": "0.1.2.4.3",
                    "prevs": [
                        "0.1.2.4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((if m = 0 then (1::nat) else 0) < 0)"
                },
                {
                    "args": "if_not_P, ¬((if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0))",
                    "id": "0.1.2.4.4",
                    "prevs": [
                        "0.1.2.4.3",
                        "0.1.2.4.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0))"
                },
                {
                    "args": "exp_zero, ¬((0::nat) ^ m < 0 ^ n)",
                    "id": "0.1.2.4.5",
                    "prevs": [
                        "0.1.2.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "",
                    "id": "0.1.2.4.6",
                    "prevs": [
                        "0.1.2.4.0",
                        "0.1.2.4.5"
                    ],
                    "rule": "intros",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬(n = 0) ⟶ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "disjE",
                    "id": "0.1.2.5",
                    "prevs": [
                        "0.1.2.2",
                        "0.1.2.3",
                        "0.1.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n, ¬(¬(m = 0) ∧ n = 0) ⊢ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "",
                    "id": "0.1.2.6",
                    "prevs": [
                        "0.1.2.0",
                        "0.1.2.5"
                    ],
                    "rule": "intros",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n ⊢ ¬(¬(m = 0) ∧ n = 0) ⟶ ¬((0::nat) ^ m < 0 ^ n)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.0",
                        "0.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n ⊢ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "conjI",
                    "id": "0.1.4",
                    "prevs": [
                        "0.1.1",
                        "0.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n ⊢ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "disjI2, {A: (2::nat) ≤ 0 ∧ m < n, B: (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0}",
                    "id": "0.1.5",
                    "prevs": [
                        "0.1.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, (0::nat) ^ m < 0 ^ n ⊢ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.6",
                    "prevs": [
                        "0.1.0",
                        "0.1.5"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ (0::nat) ^ m < 0 ^ n ⟶ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "(2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (2::nat) ≤ 0 ∧ m < n ⟶ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "(2::nat) ≤ 0 ∧ m < n",
                    "id": "0.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(2::nat) ≤ 0 ∧ m < n ⊢ (2::nat) ≤ 0 ∧ m < n"
                },
                {
                    "args": "conjD1",
                    "id": "0.2.1.1",
                    "prevs": [
                        "0.2.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(2::nat) ≤ 0 ∧ m < n ⊢ (2::nat) ≤ 0"
                },
                {
                    "args": "(0::nat) ^ m < 0 ^ n",
                    "id": "0.2.1.2",
                    "prevs": [
                        "0.2.1.1"
                    ],
                    "rule": "z3",
                    "th": "(2::nat) ≤ 0 ∧ m < n ⊢ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "",
                    "id": "0.2.1.3",
                    "prevs": [
                        "0.2.1.0",
                        "0.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "x = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (2::nat) ≤ 0 ∧ m < n ⟶ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "",
                    "id": "0.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "(0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0",
                    "id": "0.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "conjD2",
                    "id": "0.2.2.1",
                    "prevs": [
                        "0.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "conjD1",
                    "id": "0.2.2.2",
                    "prevs": [
                        "0.2.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "(0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ¬(m = 0)"
                },
                {
                    "args": "conjD2",
                    "id": "0.2.2.3",
                    "prevs": [
                        "0.2.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "(0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ n = 0"
                },
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "0.2.2.4",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "0.2.2.5",
                    "prevs": [
                        "0.2.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) < 1"
                },
                {
                    "args": "if_not_P, (if m = 0 then (1::nat) else 0) < 1",
                    "id": "0.2.2.6",
                    "prevs": [
                        "0.2.2.5",
                        "0.2.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (if m = 0 then (1::nat) else 0) < 1"
                },
                {
                    "args": "if_P, (if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0)",
                    "id": "0.2.2.7",
                    "prevs": [
                        "0.2.2.6",
                        "0.2.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0)"
                },
                {
                    "args": "exp_zero, (0::nat) ^ m < 0 ^ n",
                    "id": "0.2.2.8",
                    "prevs": [
                        "0.2.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "",
                    "id": "0.2.2.9",
                    "prevs": [
                        "0.2.2.0",
                        "0.2.2.8"
                    ],
                    "rule": "intros",
                    "th": "x = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "disjE",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.0",
                        "0.2.1",
                        "0.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.0",
                        "0.2.3"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ⊢ (0::nat) ^ m < 0 ^ n ⟷ (2::nat) ≤ 0 ∧ m < n ∨ (0::nat) = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0 ⊢ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ x ^ m < x ^ n ⟶ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "x ^ m < x ^ n",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ m < x ^ n ⊢ x ^ m < x ^ n"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "(¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0))",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0))"
                },
                {
                    "args": "conjD1",
                    "id": "1.1.1.1",
                    "prevs": [
                        "1.1.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(2 ≤ x) ∨ n ≤ m"
                },
                {
                    "args": "conjD2",
                    "id": "1.1.1.2",
                    "prevs": [
                        "1.1.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(2 ≤ x) ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "¬(2 ≤ x)",
                    "id": "1.1.1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(2 ≤ x) ⊢ ¬(2 ≤ x)"
                },
                {
                    "args": "not_le",
                    "id": "1.1.1.3.1",
                    "prevs": [
                        "1.1.1.3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x) ⊢ x < 2"
                },
                {
                    "args": "x = 0 ∨ x = 1",
                    "id": "1.1.1.3.2",
                    "prevs": [
                        "1.1.1.3.1"
                    ],
                    "rule": "z3",
                    "th": "¬(2 ≤ x) ⊢ x = 0 ∨ x = 1"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x = 0 ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "x = 0",
                    "id": "1.1.1.3.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "¬(x = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)",
                    "id": "1.1.1.3.3.1",
                    "prevs": [
                        "1.1.1.3.3.0"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ⊢ ¬(x = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ m = 0 ∨ ¬(n = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "m = 0 ∨ ¬(n = 0)",
                    "id": "1.1.1.3.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ ¬(n = 0) ⊢ m = 0 ∨ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ m = 0 ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "m = 0",
                    "id": "1.1.1.3.3.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ n = 0 ⟶ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "n = 0",
                    "id": "1.1.1.3.3.2.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "less_eq_refl, {n: (1::nat)}",
                    "id": "1.1.1.3.3.2.1.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) ≤ 1"
                },
                {
                    "args": "if_P, (if n = 0 then (1::nat) else 0) ≤ 1",
                    "id": "1.1.1.3.3.2.1.1.2",
                    "prevs": [
                        "1.1.1.3.3.2.1.1.1",
                        "1.1.1.3.3.2.1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, n = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.1.1.3",
                    "prevs": [
                        "1.1.1.3.3.2.1.1.0",
                        "1.1.1.3.3.2.1.1.2"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ n = 0 ⟶ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(n = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.1.1.3.3.2.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "le_0, {n: (1::nat)}",
                    "id": "1.1.1.3.3.2.1.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 1"
                },
                {
                    "args": "if_not_P, (if n = 0 then (1::nat) else 0) ≤ 1",
                    "id": "1.1.1.3.3.2.1.2.2",
                    "prevs": [
                        "1.1.1.3.3.2.1.2.1",
                        "1.1.1.3.3.2.1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, ¬(n = 0), ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.1.2.3",
                    "prevs": [
                        "1.1.1.3.3.2.1.2.0",
                        "1.1.1.3.3.2.1.2.2"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(n = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "classical_cases",
                    "id": "1.1.1.3.3.2.1.3",
                    "prevs": [
                        "1.1.1.3.3.2.1.1",
                        "1.1.1.3.3.2.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ 1"
                },
                {
                    "args": "if_P, (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)",
                    "id": "1.1.1.3.3.2.1.4",
                    "prevs": [
                        "1.1.1.3.3.2.1.3",
                        "1.1.1.3.3.2.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.1.5",
                    "prevs": [
                        "1.1.1.3.3.2.1.0",
                        "1.1.1.3.3.2.1.4"
                    ],
                    "rule": "intros",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ m = 0 ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(n = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.1.1.3.3.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "le_0, {n: if m = 0 then (1::nat) else 0}",
                    "id": "1.1.1.3.3.2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)",
                    "id": "1.1.1.3.3.2.2.2",
                    "prevs": [
                        "1.1.1.3.3.2.2.1",
                        "1.1.1.3.3.2.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(n = 0), ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.2.3",
                    "prevs": [
                        "1.1.1.3.3.2.2.0",
                        "1.1.1.3.3.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(n = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "disjE",
                    "id": "1.1.1.3.3.2.3",
                    "prevs": [
                        "1.1.1.3.3.2.0",
                        "1.1.1.3.3.2.1",
                        "1.1.1.3.3.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, m = 0 ∨ ¬(n = 0), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.2.4",
                    "prevs": [
                        "1.1.1.3.3.2.0",
                        "1.1.1.3.3.2.3"
                    ],
                    "rule": "intros",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ m = 0 ∨ ¬(n = 0) ⟶ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "disjE",
                    "id": "1.1.1.3.3.3",
                    "prevs": [
                        "1.1.1.2",
                        "1.1.1.3.3.1",
                        "1.1.1.3.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (if n = 0 then (1::nat) else 0) ≤ (if m = 0 then 1 else 0)"
                },
                {
                    "args": "exp_zero, (0::nat) ^ n ≤ 0 ^ m",
                    "id": "1.1.1.3.3.4",
                    "prevs": [
                        "1.1.1.3.3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (0::nat) ^ n ≤ 0 ^ m"
                },
                {
                    "args": "x ^ n ≤ x ^ m",
                    "id": "1.1.1.3.3.5",
                    "prevs": [
                        "1.1.1.3.3.0",
                        "1.1.1.3.3.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.3.6",
                    "prevs": [
                        "1.1.1.3.3.0",
                        "1.1.1.3.3.5"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x = 0 ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x = 1 ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "x = 1",
                    "id": "1.1.1.3.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "less_eq_refl, {n: (1::nat)}",
                    "id": "1.1.1.3.4.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) ≤ 1"
                },
                {
                    "args": "exp_one, (1::nat) ^ n ≤ 1 ^ m",
                    "id": "1.1.1.3.4.2",
                    "prevs": [
                        "1.1.1.3.4.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 1, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ (1::nat) ^ n ≤ 1 ^ m"
                },
                {
                    "args": "x ^ n ≤ x ^ m",
                    "id": "1.1.1.3.4.3",
                    "prevs": [
                        "1.1.1.3.4.0",
                        "1.1.1.3.4.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 1, ¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.4.4",
                    "prevs": [
                        "1.1.1.3.4.0",
                        "1.1.1.3.4.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x = 1 ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "disjE",
                    "id": "1.1.1.3.5",
                    "prevs": [
                        "1.1.1.3.2",
                        "1.1.1.3.3",
                        "1.1.1.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(2 ≤ x), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "1.1.1.3.6",
                    "prevs": [
                        "1.1.1.3.0",
                        "1.1.1.3.5"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ¬(2 ≤ x) ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "1.1.1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ n ≤ m ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "n ≤ m",
                    "id": "1.1.1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n ≤ m ⊢ n ≤ m"
                },
                {
                    "args": "less_eq_exist",
                    "id": "1.1.1.4.1",
                    "prevs": [
                        "1.1.1.4.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n ≤ m ⊢ ∃p. m = n + p"
                },
                {
                    "args": "p, nat",
                    "id": "1.1.1.4.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = n + p",
                    "id": "1.1.1.4.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n + p ⊢ m = n + p"
                },
                {
                    "args": "less_eq_refl, {n: x ^ n}",
                    "id": "1.1.1.4.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ^ n ≤ x ^ n"
                },
                {
                    "args": "add_0_right, x ^ n ≤ x ^ (n + 0)",
                    "id": "1.1.1.4.5",
                    "prevs": [
                        "1.1.1.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ (n + 0)"
                },
                {
                    "args": "",
                    "id": "1.1.1.4.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ∀n1. x ^ n ≤ x ^ (n + n1) ⟶ x ^ n ≤ x ^ (n + Suc n1)"
                },
                {
                    "args": "d, nat",
                    "id": "1.1.1.4.6.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x ^ n ≤ x ^ (n + d)",
                    "id": "1.1.1.4.6.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ n ≤ x ^ (n + d) ⊢ x ^ n ≤ x ^ (n + d)"
                },
                {
                    "args": "mult_1_left, x ^ n ≤ 1 * x ^ (n + d)",
                    "id": "1.1.1.4.6.2",
                    "prevs": [
                        "1.1.1.4.6.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, x ^ n ≤ x ^ (n + d), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ 1 * x ^ (n + d)"
                },
                {
                    "args": "le_1_2",
                    "id": "1.1.1.4.6.3",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ 1 ≤ x"
                },
                {
                    "args": "disjI1, {A: 1 ≤ x, B: x ^ (n + d) = 0}",
                    "id": "1.1.1.4.6.4",
                    "prevs": [
                        "1.1.1.4.6.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, x ^ n ≤ x ^ (n + d), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ 1 ≤ x ∨ x ^ (n + d) = 0"
                },
                {
                    "args": "le_mult_rcancel, 1 * x ^ (n + d) ≤ x * x ^ (n + d)",
                    "id": "1.1.1.4.6.5",
                    "prevs": [
                        "1.1.1.4.6.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, x ^ n ≤ x ^ (n + d), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ 1 * x ^ (n + d) ≤ x * x ^ (n + d)"
                },
                {
                    "args": "less_eq_trans",
                    "id": "1.1.1.4.6.6",
                    "prevs": [
                        "1.1.1.4.6.2",
                        "1.1.1.4.6.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, x ^ n ≤ x ^ (n + d), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x * x ^ (n + d)"
                },
                {
                    "args": "nat_nat_power_def_2, x ^ n ≤ x ^ Suc (n + d)",
                    "id": "1.1.1.4.6.7",
                    "prevs": [
                        "1.1.1.4.6.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, x ^ n ≤ x ^ (n + d), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ Suc (n + d)"
                },
                {
                    "args": "add_Suc_right, x ^ n ≤ x ^ (n + Suc d)",
                    "id": "1.1.1.4.6.8",
                    "prevs": [
                        "1.1.1.4.6.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, x ^ n ≤ x ^ (n + d), (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ (n + Suc d)"
                },
                {
                    "args": "",
                    "id": "1.1.1.4.6.9",
                    "prevs": [
                        "1.1.1.4.6.0",
                        "1.1.1.4.6.1",
                        "1.1.1.4.6.8"
                    ],
                    "rule": "intros",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ ∀d. x ^ n ≤ x ^ (n + d) ⟶ x ^ n ≤ x ^ (n + Suc d)"
                },
                {
                    "args": "nat_induct, {P: λp. x ^ n ≤ x ^ (n + p), x: p}",
                    "id": "1.1.1.4.7",
                    "prevs": [
                        "1.1.1.4.5",
                        "1.1.1.4.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ (n + p)"
                },
                {
                    "args": "x ^ n ≤ x ^ m",
                    "id": "1.1.1.4.8",
                    "prevs": [
                        "1.1.1.4.3",
                        "1.1.1.4.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n ≤ m, ¬(x = 0), m = n + p, x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "∃p. m = n + p",
                    "id": "1.1.1.4.9",
                    "prevs": [
                        "1.1.1.4.0",
                        "1.1.1.4.1",
                        "1.1.1.4.2",
                        "1.1.1.4.3",
                        "1.1.1.4.8"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ n ≤ m ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "disjE",
                    "id": "1.1.1.5",
                    "prevs": [
                        "1.1.1.1",
                        "1.1.1.3",
                        "1.1.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x ^ m < x ^ n, (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "1.1.1.6",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.5"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ (¬(2 ≤ x) ∨ n ≤ m) ∧ (¬(x = 0) ∨ m = 0 ∨ ¬(n = 0)) ⟶ x ^ n ≤ x ^ m"
                },
                {
                    "args": "double_neg, (¬(2 ≤ x) ∨ ¬¬(n ≤ m)) ∧ (¬(x = 0) ∨ ¬¬(m = 0) ∨ ¬(n = 0)) ⟶ ¬¬(x ^ n ≤ x ^ m)",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ (¬(2 ≤ x) ∨ ¬¬(n ≤ m)) ∧ (¬(x = 0) ∨ ¬¬(m = 0) ∨ ¬(n = 0)) ⟶ ¬¬(x ^ n ≤ x ^ m)"
                },
                {
                    "args": "de_morgan_thm1, (¬(2 ≤ x) ∨ ¬¬(n ≤ m)) ∧ (¬(x = 0) ∨ ¬(¬(m = 0) ∧ n = 0)) ⟶ ¬¬(x ^ n ≤ x ^ m)",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ (¬(2 ≤ x) ∨ ¬¬(n ≤ m)) ∧ (¬(x = 0) ∨ ¬(¬(m = 0) ∧ n = 0)) ⟶ ¬¬(x ^ n ≤ x ^ m)"
                },
                {
                    "args": "de_morgan_thm1, ¬(2 ≤ x ∧ ¬(n ≤ m)) ∧ ¬(x = 0 ∧ ¬(m = 0) ∧ n = 0) ⟶ ¬¬(x ^ n ≤ x ^ m)",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ ¬(2 ≤ x ∧ ¬(n ≤ m)) ∧ ¬(x = 0 ∧ ¬(m = 0) ∧ n = 0) ⟶ ¬¬(x ^ n ≤ x ^ m)"
                },
                {
                    "args": "not_le, ¬(2 ≤ x ∧ m < n) ∧ ¬(x = 0 ∧ ¬(m = 0) ∧ n = 0) ⟶ ¬(x ^ m < x ^ n)",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ ¬(2 ≤ x ∧ m < n) ∧ ¬(x = 0 ∧ ¬(m = 0) ∧ n = 0) ⟶ ¬(x ^ m < x ^ n)"
                },
                {
                    "args": "de_morgan_thm2, ¬(2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0) ⟶ ¬(x ^ m < x ^ n)",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ ¬(2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0) ⟶ ¬(x ^ m < x ^ n)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.1.7",
                    "prevs": [
                        "1.1.0",
                        "1.1.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x ^ m < x ^ n ⊢ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1.8",
                    "prevs": [
                        "1.1.0",
                        "1.1.7"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ x ^ m < x ^ n ⟶ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ x ^ m < x ^ n"
                },
                {
                    "args": "2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 2 ≤ x ∧ m < n ⟶ x ^ m < x ^ n"
                },
                {
                    "args": "2 ≤ x ∧ m < n",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ≤ x ∧ m < n ⊢ 2 ≤ x ∧ m < n"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.1.1",
                    "prevs": [
                        "1.2.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 ≤ x ∧ m < n ⊢ 2 ≤ x"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 ≤ x ∧ m < n ⊢ m < n"
                },
                {
                    "args": "less_exist",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "2 ≤ x ∧ m < n ⊢ ∃d. n = m + Suc d"
                },
                {
                    "args": "d, nat",
                    "id": "1.2.1.4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "n = m + Suc d",
                    "id": "1.2.1.5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + Suc d ⊢ n = m + Suc d"
                },
                {
                    "args": "less_eq_refl, {n: x ^ m}",
                    "id": "1.2.1.6",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ^ m ≤ x ^ m"
                },
                {
                    "args": "mult_1_left, x ^ m ≤ 1 * x ^ m",
                    "id": "1.2.1.7",
                    "prevs": [
                        "1.2.1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m ≤ 1 * x ^ m"
                },
                {
                    "args": "1 < x",
                    "id": "1.2.1.8",
                    "prevs": [
                        "1.2.1.1"
                    ],
                    "rule": "z3",
                    "th": "2 ≤ x ∧ m < n ⊢ 1 < x"
                },
                {
                    "args": "",
                    "id": "1.2.1.9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m = 0) ⟶ false"
                },
                {
                    "args": "x = 0 ∧ ¬(m = 0)",
                    "id": "1.2.1.9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ∧ ¬(m = 0) ⊢ x = 0 ∧ ¬(m = 0)"
                },
                {
                    "args": "false",
                    "id": "1.2.1.9.1",
                    "prevs": [
                        "1.2.1.9.0",
                        "1.2.1.1"
                    ],
                    "rule": "z3",
                    "th": "x = 0 ∧ ¬(m = 0), 2 ≤ x ∧ m < n ⊢ false"
                },
                {
                    "args": "",
                    "id": "1.2.1.9.2",
                    "prevs": [
                        "1.2.1.9.0",
                        "1.2.1.9.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m = 0) ⟶ false"
                },
                {
                    "args": "exp_eq_0, x ^ m = 0 ⟶ false",
                    "id": "1.2.1.10",
                    "prevs": [
                        "1.2.1.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m = 0 ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "1.2.1.11",
                    "prevs": [
                        "1.2.1.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ¬(x ^ m = 0)"
                },
                {
                    "args": "conjI",
                    "id": "1.2.1.12",
                    "prevs": [
                        "1.2.1.8",
                        "1.2.1.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 1 < x ∧ ¬(x ^ m = 0)"
                },
                {
                    "args": "lt_mult_rcancel, 1 * x ^ m < x * x ^ m",
                    "id": "1.2.1.13",
                    "prevs": [
                        "1.2.1.12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 1 * x ^ m < x * x ^ m"
                },
                {
                    "args": "let_trans",
                    "id": "1.2.1.14",
                    "prevs": [
                        "1.2.1.7",
                        "1.2.1.13"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x * x ^ m"
                },
                {
                    "args": "nat_nat_power_def_2, x ^ m < x ^ Suc m",
                    "id": "1.2.1.15",
                    "prevs": [
                        "1.2.1.14"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ Suc m"
                },
                {
                    "args": "add_0_right, x ^ m < x ^ Suc (m + 0)",
                    "id": "1.2.1.16",
                    "prevs": [
                        "1.2.1.15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ Suc (m + 0)"
                },
                {
                    "args": "add_Suc_right, x ^ m < x ^ (m + Suc 0)",
                    "id": "1.2.1.17",
                    "prevs": [
                        "1.2.1.16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ (m + Suc 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1.18",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ∀n. x ^ m < x ^ (m + Suc n) ⟶ x ^ m < x ^ (m + Suc (Suc n))"
                },
                {
                    "args": "p, nat",
                    "id": "1.2.1.18.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "x ^ m < x ^ (m + Suc p)",
                    "id": "1.2.1.18.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ m < x ^ (m + Suc p) ⊢ x ^ m < x ^ (m + Suc p)"
                },
                {
                    "args": "mult_1_left, x ^ m < 1 * x ^ (m + Suc p)",
                    "id": "1.2.1.18.2",
                    "prevs": [
                        "1.2.1.18.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < 1 * x ^ (m + Suc p)"
                },
                {
                    "args": "",
                    "id": "1.2.1.18.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m + Suc p = 0) ⟶ false"
                },
                {
                    "args": "x = 0 ∧ ¬(m + Suc p = 0)",
                    "id": "1.2.1.18.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ∧ ¬(m + Suc p = 0) ⊢ x = 0 ∧ ¬(m + Suc p = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.1.18.3.1",
                    "prevs": [
                        "1.2.1.18.3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ∧ ¬(m + Suc p = 0) ⊢ x = 0"
                },
                {
                    "args": "false",
                    "id": "1.2.1.18.3.2",
                    "prevs": [
                        "1.2.1.18.3.1",
                        "1.2.1.1"
                    ],
                    "rule": "z3",
                    "th": "2 ≤ x ∧ m < n, x = 0 ∧ ¬(m + Suc p = 0) ⊢ false"
                },
                {
                    "args": "",
                    "id": "1.2.1.18.3.3",
                    "prevs": [
                        "1.2.1.18.3.0",
                        "1.2.1.18.3.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m + Suc p = 0) ⟶ false"
                },
                {
                    "args": "exp_eq_0, x ^ (m + Suc p) = 0 ⟶ false",
                    "id": "1.2.1.18.4",
                    "prevs": [
                        "1.2.1.18.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ (m + Suc p) = 0 ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "1.2.1.18.5",
                    "prevs": [
                        "1.2.1.18.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ¬(x ^ (m + Suc p) = 0)"
                },
                {
                    "args": "conjI",
                    "id": "1.2.1.18.6",
                    "prevs": [
                        "1.2.1.8",
                        "1.2.1.18.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 1 < x ∧ ¬(x ^ (m + Suc p) = 0)"
                },
                {
                    "args": "lt_mult_rcancel, 1 * x ^ (m + Suc p) < x * x ^ (m + Suc p)",
                    "id": "1.2.1.18.7",
                    "prevs": [
                        "1.2.1.18.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 1 * x ^ (m + Suc p) < x * x ^ (m + Suc p)"
                },
                {
                    "args": "lt_trans",
                    "id": "1.2.1.18.8",
                    "prevs": [
                        "1.2.1.18.2",
                        "1.2.1.18.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x * x ^ (m + Suc p)"
                },
                {
                    "args": "nat_nat_power_def_2, x ^ m < x ^ Suc (m + Suc p)",
                    "id": "1.2.1.18.9",
                    "prevs": [
                        "1.2.1.18.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ Suc (m + Suc p)"
                },
                {
                    "args": "add_Suc_right, x ^ m < x ^ (m + Suc (Suc p))",
                    "id": "1.2.1.18.10",
                    "prevs": [
                        "1.2.1.18.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, x ^ m < x ^ (m + Suc p), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ (m + Suc (Suc p))"
                },
                {
                    "args": "",
                    "id": "1.2.1.18.11",
                    "prevs": [
                        "1.2.1.18.0",
                        "1.2.1.18.1",
                        "1.2.1.18.10"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ∀p. x ^ m < x ^ (m + Suc p) ⟶ x ^ m < x ^ (m + Suc (Suc p))"
                },
                {
                    "args": "nat_induct, {P: λd. x ^ m < x ^ (m + Suc d), x: d}",
                    "id": "1.2.1.19",
                    "prevs": [
                        "1.2.1.17",
                        "1.2.1.18"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ (m + Suc d)"
                },
                {
                    "args": "x ^ m < x ^ n",
                    "id": "1.2.1.20",
                    "prevs": [
                        "1.2.1.5",
                        "1.2.1.19"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), n = m + Suc d, 2 ≤ x ∧ m < n, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ n"
                },
                {
                    "args": "∃d. n = m + Suc d",
                    "id": "1.2.1.21",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.3",
                        "1.2.1.4",
                        "1.2.1.5",
                        "1.2.1.20"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ 2 ≤ x ∧ m < n ⟶ x ^ m < x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ x ^ m < x ^ n"
                },
                {
                    "args": "x = 0 ∧ ¬(m = 0) ∧ n = 0",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.2.1",
                    "prevs": [
                        "1.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ ¬(m = 0)"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ n = 0"
                },
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "1.2.2.5",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1.2.2.6",
                    "prevs": [
                        "1.2.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x = 0 ∧ ¬(m = 0) ∧ n = 0, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) < 1"
                },
                {
                    "args": "if_P, (0::nat) < (if n = 0 then 1 else 0)",
                    "id": "1.2.2.7",
                    "prevs": [
                        "1.2.2.6",
                        "1.2.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x = 0 ∧ ¬(m = 0) ∧ n = 0, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) < (if n = 0 then 1 else 0)"
                },
                {
                    "args": "if_not_P, (if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0)",
                    "id": "1.2.2.8",
                    "prevs": [
                        "1.2.2.7",
                        "1.2.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x = 0 ∧ ¬(m = 0) ∧ n = 0, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (if m = 0 then (1::nat) else 0) < (if n = 0 then 1 else 0)"
                },
                {
                    "args": "exp_zero, (0::nat) ^ m < 0 ^ n",
                    "id": "1.2.2.9",
                    "prevs": [
                        "1.2.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x = 0 ∧ ¬(m = 0) ∧ n = 0, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ (0::nat) ^ m < 0 ^ n"
                },
                {
                    "args": "x ^ m < x ^ n",
                    "id": "1.2.2.10",
                    "prevs": [
                        "1.2.2.1",
                        "1.2.2.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(x = 0), x = 0 ∧ ¬(m = 0) ∧ n = 0, 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.2.11",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.10"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ x ^ m < x ^ n"
                },
                {
                    "args": "disjE",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⊢ x ^ m < x ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.0",
                        "1.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0 ⟶ x ^ m < x ^ n"
                },
                {
                    "args": "iffI",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0"
                }
            ],
            "prop": "x ^ m < x ^ n ⟷ 2 ≤ x ∧ m < n ∨ x = 0 ∧ ¬(m = 0) ∧ n = 0",
            "steps": [
                {
                    "case": "x=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.2.0"
                    ],
                    "goal_id": "0.1.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "0.1.2.1"
                    ],
                    "goal_id": "0.1.2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.1.2.2"
                    ],
                    "goal_id": "0.1.2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1.2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_zero"
                },
                {
                    "fact_ids": [
                        "0.1.2.3.0"
                    ],
                    "goal_id": "0.1.2.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "case": "n=0",
                    "goal_id": "0.1.2.3.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.1.2.3.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.2.3.1.0"
                    ],
                    "goal_id": "0.1.2.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1.2.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "0.1.2.3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "0.1.2.3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "0.1.2.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.2.3.2.0"
                    ],
                    "goal_id": "0.1.2.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.1.2.3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "0.1.2.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "0.1.2.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_zero"
                },
                {
                    "fact_ids": [
                        "0.1.2.4.0"
                    ],
                    "goal_id": "0.1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.1.2.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "0.1.2.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.1.0"
                    ],
                    "goal_id": "0.2.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.2.1.1"
                    ],
                    "goal_id": "0.2.1.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.2.0"
                    ],
                    "goal_id": "0.2.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.2.2.1"
                    ],
                    "goal_id": "0.2.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.2.2.1"
                    ],
                    "goal_id": "0.2.2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "0.2.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_zero"
                },
                {
                    "fact_ids": [
                        "0.2.2.3"
                    ],
                    "goal_id": "0.2.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.2.2.2"
                    ],
                    "goal_id": "0.2.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.2.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "0.2.2.4",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.1.1.1"
                    ],
                    "goal_id": "1.1.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1.1.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.0"
                    ],
                    "goal_id": "1.1.1.3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.1"
                    ],
                    "goal": "x = 0 | x =1",
                    "goal_id": "1.1.1.3.2",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.1"
                    ],
                    "goal_id": "1.1.1.3.2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.2"
                    ],
                    "goal_id": "1.1.1.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1.1.3.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.0"
                    ],
                    "goal_id": "1.1.1.3.3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1.3.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_zero"
                },
                {
                    "fact_ids": [
                        "1.1.1.2"
                    ],
                    "goal_id": "1.1.1.3.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.0"
                    ],
                    "goal_id": "1.1.1.3.3.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.1.1.3.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.2.0"
                    ],
                    "goal_id": "1.1.1.3.3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1.1.3.3.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.2.1.0"
                    ],
                    "goal_id": "1.1.1.3.3.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "case": "n = 0",
                    "goal_id": "1.1.1.3.3.2.1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1.1.3.3.2.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.2.1.1.0"
                    ],
                    "goal_id": "1.1.1.3.3.2.1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.1.3.3.2.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "1.1.1.3.3.2.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.2.1.2.0"
                    ],
                    "goal_id": "1.1.1.3.3.2.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1.1.3.3.2.1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1.1.1.3.3.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.3.2.2.0"
                    ],
                    "goal_id": "1.1.1.3.3.2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1.1.3.3.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1.1.1.3.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.3.4.0"
                    ],
                    "goal_id": "1.1.1.3.4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1.3.4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_one"
                },
                {
                    "goal_id": "1.1.1.3.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "1.1.1.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.4.0"
                    ],
                    "goal_id": "1.1.1.4.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1.1.1.4.1"
                    ],
                    "goal_id": "1.1.1.4.2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "1.1.1.4.3"
                    ],
                    "goal_id": "1.1.1.4.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1.4.4",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "p"
                },
                {
                    "goal_id": "1.1.1.4.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "1.1.1.4.4",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "1.1.1.4.6",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "goal_id": "1.1.1.4.6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "1.1.1.4.6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "1.1.1.4.6.2",
                    "method_name": "apply_backward_step",
                    "param_m": "1 * x ^ (n + d)",
                    "theorem": "less_eq_trans"
                },
                {
                    "goal_id": "1.1.1.4.6.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "1.1.1.4.6.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_mult_rcancel"
                },
                {
                    "goal_id": "1.1.1.4.6.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1.1.4.6.3",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.1.2"
                    ],
                    "goal_id": "1.2.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_exist"
                },
                {
                    "fact_ids": [
                        "1.2.1.3"
                    ],
                    "goal_id": "1.2.1.4",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "1.2.1.5"
                    ],
                    "goal_id": "1.2.1.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "d"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "apply_backward_step",
                    "param_m": "1 * x ^ m",
                    "theorem": "let_trans"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "1.2.1.6",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "1.2.1.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_mult_rcancel"
                },
                {
                    "goal_id": "1.2.1.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.2.1.1"
                    ],
                    "goal_id": "1.2.1.8",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.2.1.9",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "1.2.1.9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "goal_id": "1.2.1.9",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.9.0",
                        "1.2.1.1"
                    ],
                    "goal_id": "1.2.1.9.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.2.1.18",
                    "method_name": "introduction",
                    "names": "p"
                },
                {
                    "goal_id": "1.2.1.18.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "1.2.1.18.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "1.2.1.18.2",
                    "method_name": "apply_backward_step",
                    "param_m": "1 * x ^ (m + Suc p)",
                    "theorem": "lt_trans"
                },
                {
                    "goal_id": "1.2.1.18.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "1.2.1.18.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_mult_rcancel"
                },
                {
                    "goal_id": "1.2.1.18.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.1.18.3",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "1.2.1.18.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "goal_id": "1.2.1.18.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.1.18.3.0"
                    ],
                    "goal_id": "1.2.1.18.3.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.1.18.3.1",
                        "1.2.1.1"
                    ],
                    "goal_id": "1.2.1.18.3.2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.2.0"
                    ],
                    "goal_id": "1.2.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.2.2"
                    ],
                    "goal_id": "1.2.2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.2.2"
                    ],
                    "goal_id": "1.2.2.4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.2.1"
                    ],
                    "goal_id": "1.2.2.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_zero"
                },
                {
                    "fact_ids": [
                        "1.2.2.3"
                    ],
                    "goal_id": "1.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "1.2.2.4"
                    ],
                    "goal_id": "1.2.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.2.2.5",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "1.2.2.5",
                    "method_name": "nat_const_ineq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "x = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟶ m = 0 ⟶ n = 0"
                },
                {
                    "args": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "m = 0",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "de_morgan_thm2",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x ∧ n < m) ∧ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x ∧ n < m)"
                },
                {
                    "args": "conjD2",
                    "id": "0.1.4",
                    "prevs": [
                        "0.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "de_morgan_thm1",
                    "id": "0.1.5",
                    "prevs": [
                        "0.1.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "not_lt",
                    "id": "0.1.6",
                    "prevs": [
                        "0.1.5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x) ∨ m ≤ n"
                },
                {
                    "args": "de_morgan_thm1",
                    "id": "0.1.7",
                    "prevs": [
                        "0.1.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(x = 0) ∨ ¬(¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "",
                    "id": "0.1.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(x = 0) ⟶ n = 0"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "0.1.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "negE_gen, {A: x = 0, C: n = 0}",
                    "id": "0.1.8.1",
                    "prevs": [
                        "0.1.8.0",
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, ¬(x = 0) ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.8.2",
                    "prevs": [
                        "0.1.8.0",
                        "0.1.8.1"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(x = 0) ⟶ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬¬(n = 0) ∨ ¬(m = 0) ⟶ n = 0"
                },
                {
                    "args": "¬¬(n = 0) ∨ ¬(m = 0)",
                    "id": "0.1.9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(n = 0) ∨ ¬(m = 0) ⊢ ¬¬(n = 0) ∨ ¬(m = 0)"
                },
                {
                    "args": "n = 0 ⟶ n = 0",
                    "id": "0.1.9.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ n = 0 ⟶ n = 0"
                },
                {
                    "args": "double_neg, ¬¬(n = 0) ⟶ n = 0",
                    "id": "0.1.9.2",
                    "prevs": [
                        "0.1.9.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, ¬¬(n = 0) ∨ ¬(m = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬¬(n = 0) ⟶ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.9.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0, x = 0, ¬¬(n = 0) ∨ ¬(m = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(m = 0) ⟶ n = 0"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "0.1.9.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "negE_gen, {A: m = 0, C: n = 0}",
                    "id": "0.1.9.3.1",
                    "prevs": [
                        "0.1.9.3.0",
                        "0.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0, ¬(m = 0) ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.9.3.2",
                    "prevs": [
                        "0.1.9.3.0",
                        "0.1.9.3.1"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, ¬¬(n = 0) ∨ ¬(m = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(m = 0) ⟶ n = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.1.9.4",
                    "prevs": [
                        "0.1.9.0",
                        "0.1.9.2",
                        "0.1.9.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, x = 0, ¬¬(n = 0) ∨ ¬(m = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.9.5",
                    "prevs": [
                        "0.1.9.0",
                        "0.1.9.4"
                    ],
                    "rule": "intros",
                    "th": "m = 0, x = 0, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬¬(n = 0) ∨ ¬(m = 0) ⟶ n = 0"
                },
                {
                    "args": "de_morgan_thm1, ¬(¬(n = 0) ∧ m = 0) ⟶ n = 0",
                    "id": "0.1.10",
                    "prevs": [
                        "0.1.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, x = 0, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(¬(n = 0) ∧ m = 0) ⟶ n = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.1.11",
                    "prevs": [
                        "0.1.7",
                        "0.1.8",
                        "0.1.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0, x = 0, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.12",
                    "prevs": [
                        "0.1.0",
                        "0.1.1",
                        "0.1.11"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟶ m = 0 ⟶ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0 ⊢ (m = 0 ⟶ n = 0) ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "m = 0 ⟶ n = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⟶ n = 0 ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "¬((2::nat) ≤ 0)",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬((2::nat) ≤ 0)"
                },
                {
                    "args": "¬(2 ≤ x)",
                    "id": "0.2.2",
                    "prevs": [
                        "0.0",
                        "0.2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(2 ≤ x)"
                },
                {
                    "args": "disjI1, {A: ¬(2 ≤ x), B: ¬(n < m)}",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "de_morgan_thm1, ¬(2 ≤ x ∧ n < m)",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(2 ≤ x ∧ n < m)"
                },
                {
                    "args": "n = 0 ∨ ¬(m = 0)",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "z3",
                    "th": "m = 0 ⟶ n = 0 ⊢ n = 0 ∨ ¬(m = 0)"
                },
                {
                    "args": "double_neg, ¬¬(n = 0) ∨ ¬(m = 0)",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬¬(n = 0) ∨ ¬(m = 0)"
                },
                {
                    "args": "de_morgan_thm1, ¬(¬(n = 0) ∧ m = 0)",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "disjI2, {A: ¬(x = 0), B: ¬(¬(n = 0) ∧ m = 0)}",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(x = 0) ∨ ¬(¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "de_morgan_thm1, ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)",
                    "id": "0.2.9",
                    "prevs": [
                        "0.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "conjI",
                    "id": "0.2.10",
                    "prevs": [
                        "0.2.4",
                        "0.2.9"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(2 ≤ x ∧ n < m) ∧ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)",
                    "id": "0.2.11",
                    "prevs": [
                        "0.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, m = 0 ⟶ n = 0 ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "",
                    "id": "0.2.12",
                    "prevs": [
                        "0.2.0",
                        "0.2.11"
                    ],
                    "rule": "intros",
                    "th": "x = 0 ⊢ (m = 0 ⟶ n = 0) ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0 ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (m = 0 ⟶ n = 0)"
                },
                {
                    "args": "if_P, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))",
                    "id": "0.4",
                    "prevs": [
                        "0.3",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = 0) ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟶ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "de_morgan_thm2",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x ∧ n < m) ∧ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x ∧ n < m)"
                },
                {
                    "args": "de_morgan_thm1",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x) ⟶ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "¬(2 ≤ x)",
                    "id": "1.1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(2 ≤ x) ⊢ ¬(2 ≤ x)"
                },
                {
                    "args": "x = 1",
                    "id": "1.1.4.1",
                    "prevs": [
                        "1.0",
                        "1.1.4.0"
                    ],
                    "rule": "z3",
                    "th": "¬(x = 0), ¬(2 ≤ x) ⊢ x = 1"
                },
                {
                    "args": "disjI1, {A: x = 1, B: ¬(n < m)}",
                    "id": "1.1.4.2",
                    "prevs": [
                        "1.1.4.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(2 ≤ x), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.1.4.3",
                    "prevs": [
                        "1.1.4.0",
                        "1.1.4.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(2 ≤ x) ⟶ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(n < m) ⟶ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "¬(n < m)",
                    "id": "1.1.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n < m) ⊢ ¬(n < m)"
                },
                {
                    "args": "disjI2, {A: x = 1, B: ¬(n < m)}",
                    "id": "1.1.5.1",
                    "prevs": [
                        "1.1.5.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(n < m), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.1.5.2",
                    "prevs": [
                        "1.1.5.0",
                        "1.1.5.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ ¬(n < m) ⟶ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "disjE",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.3",
                        "1.1.4",
                        "1.1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⊢ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.1.7",
                    "prevs": [
                        "1.1.0",
                        "1.1.6"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟶ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0) ⊢ x = 1 ∨ ¬(n < m) ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "x = 1 ∨ ¬(n < m)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ∨ ¬(n < m) ⊢ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ x = 1 ⟶ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "x = 1",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "¬((2::nat) ≤ 1)",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬((2::nat) ≤ 1)"
                },
                {
                    "args": "¬(2 ≤ x)",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 1, ¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x)"
                },
                {
                    "args": "disjI1, {A: ¬(2 ≤ x), B: ¬(n < m)}",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 1, ¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ x = 1 ⟶ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(n < m) ⟶ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "¬(n < m)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n < m) ⊢ ¬(n < m)"
                },
                {
                    "args": "disjI2, {A: ¬(2 ≤ x), B: ¬(n < m)}",
                    "id": "1.2.2.1",
                    "prevs": [
                        "1.2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), ¬(n < m), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(n < m) ⟶ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "disjE",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x) ∨ ¬(n < m)"
                },
                {
                    "args": "de_morgan_thm1, ¬(2 ≤ x ∧ n < m)",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x ∧ n < m)"
                },
                {
                    "args": "disjI1, {A: ¬(x = 0), B: ¬(¬(n = 0) ∧ m = 0)}",
                    "id": "1.2.5",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(x = 0) ∨ ¬(¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "de_morgan_thm1, ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "conjI",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.4",
                        "1.2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x ∧ n < m) ∧ ¬(x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x = 1 ∨ ¬(n < m) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.0",
                        "1.2.8"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0) ⊢ x = 1 ∨ ¬(n < m) ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0)"
                },
                {
                    "args": "iffI",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ x = 1 ∨ ¬(n < m)"
                },
                {
                    "args": "if_not_P, ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0) ⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = 0) ⟶ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬(2 ≤ x ∧ n < m ∨ x = 0 ∧ ¬(n = 0) ∧ m = 0) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "lt_exp, ¬(x ^ n < x ^ m) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x ^ n < x ^ m) ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ ¬(n < m))"
                },
                {
                    "args": "not_lt, x ^ m ≤ x ^ n ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n)",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ x ^ m ≤ x ^ n ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ m ≤ x ^ n ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n)"
                }
            ],
            "prop": "x ^ m ≤ x ^ n ⟷ (if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_lt"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_exp"
                },
                {
                    "case": "x = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "fact_ids": [
                        "0.1.2"
                    ],
                    "goal_id": "0.1.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.1.2"
                    ],
                    "goal_id": "0.1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.1.3"
                    ],
                    "goal_id": "0.1.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "0.1.5"
                    ],
                    "goal_id": "0.1.6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_lt"
                },
                {
                    "fact_ids": [
                        "0.1.4"
                    ],
                    "goal_id": "0.1.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "0.1.7"
                    ],
                    "goal_id": "0.1.8",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1.8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.8.0",
                        "0.0"
                    ],
                    "goal_id": "0.1.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "0.1.9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0.1.9",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.9.0"
                    ],
                    "goal_id": "0.1.9.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1.9.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "0.1.9.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.9.3.0",
                        "0.1.1"
                    ],
                    "goal_id": "0.1.9.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0.2.5",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "0.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.5",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "fact_ids": [
                        "1.1.1"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.1.2"
                    ],
                    "goal_id": "1.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "1.1.3"
                    ],
                    "goal_id": "1.1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "1.1.4.0"
                    ],
                    "goal_id": "1.1.4.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.1.5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "eq_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_antisym, {m: x ^ m, n: x ^ n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⟷ x ^ m = x ^ n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ x ^ m = x ^ n ⟷ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⟶ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "conjD1",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x ^ m ≤ x ^ n"
                },
                {
                    "args": "conjD2",
                    "id": "2.2",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "le_exp",
                    "id": "2.3",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n"
                },
                {
                    "args": "le_exp",
                    "id": "2.4",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ if x = 0 then n = 0 ⟶ m = 0 else x = 1 ∨ n ≤ m"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 0 ⟶ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "x = 0",
                    "id": "2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "if_P",
                    "id": "2.5.1",
                    "prevs": [
                        "2.3",
                        "2.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0, x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "if_P",
                    "id": "2.5.2",
                    "prevs": [
                        "2.4",
                        "2.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0, x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "iffI",
                    "id": "2.5.3",
                    "prevs": [
                        "2.5.1",
                        "2.5.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "if_P, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n",
                    "id": "2.5.4",
                    "prevs": [
                        "2.5.3",
                        "2.5.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.5.5",
                    "prevs": [
                        "2.5.0",
                        "2.5.4"
                    ],
                    "rule": "intros",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 0 ⟶ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ ¬(x = 0) ⟶ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "2.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "if_not_P",
                    "id": "2.6.1",
                    "prevs": [
                        "2.3",
                        "2.6.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "if_not_P",
                    "id": "2.6.2",
                    "prevs": [
                        "2.4",
                        "2.6.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "",
                    "id": "2.6.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ⟶ x = 1 ∨ m = n"
                },
                {
                    "args": "x = 1",
                    "id": "2.6.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "disjI1, {A: x = 1, B: m = n}",
                    "id": "2.6.3.1",
                    "prevs": [
                        "2.6.3.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 1, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.6.3.2",
                    "prevs": [
                        "2.6.3.0",
                        "2.6.3.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ⟶ x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.6.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ n ≤ m ⟶ x = 1 ∨ m = n"
                },
                {
                    "args": "n ≤ m",
                    "id": "2.6.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n ≤ m ⊢ n ≤ m"
                },
                {
                    "args": "",
                    "id": "2.6.4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n ≤ m, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ m ≤ n ⟶ x = 1 ∨ m = n"
                },
                {
                    "args": "m ≤ n",
                    "id": "2.6.4.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "conjI",
                    "id": "2.6.4.1.1",
                    "prevs": [
                        "2.6.4.1.0",
                        "2.6.4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n, n ≤ m, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ m ≤ n ∧ n ≤ m"
                },
                {
                    "args": "le_antisym, m = n",
                    "id": "2.6.4.1.2",
                    "prevs": [
                        "2.6.4.1.1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "m ≤ n, n ≤ m, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ m = n"
                },
                {
                    "args": "disjI2, {A: x = 1, B: m = n}",
                    "id": "2.6.4.1.3",
                    "prevs": [
                        "2.6.4.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, n ≤ m, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.6.4.1.4",
                    "prevs": [
                        "2.6.4.1.0",
                        "2.6.4.1.3"
                    ],
                    "rule": "intros",
                    "th": "n ≤ m, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ m ≤ n ⟶ x = 1 ∨ m = n"
                },
                {
                    "args": "disjE",
                    "id": "2.6.4.2",
                    "prevs": [
                        "2.6.1",
                        "2.6.3",
                        "2.6.4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "n ≤ m, ¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.6.4.3",
                    "prevs": [
                        "2.6.4.0",
                        "2.6.4.2"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ n ≤ m ⟶ x = 1 ∨ m = n"
                },
                {
                    "args": "disjE",
                    "id": "2.6.5",
                    "prevs": [
                        "2.6.2",
                        "2.6.3",
                        "2.6.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ x = 1 ∨ m = n"
                },
                {
                    "args": "if_not_P, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n",
                    "id": "2.6.6",
                    "prevs": [
                        "2.6.5",
                        "2.6.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.6.7",
                    "prevs": [
                        "2.6.0",
                        "2.6.6"
                    ],
                    "rule": "intros",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ ¬(x = 0) ⟶ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "classical_cases",
                    "id": "2.7",
                    "prevs": [
                        "2.5",
                        "2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⊢ if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⟶ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n) ⟶ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 0 ⟶ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "x = 0",
                    "id": "3.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "if_P",
                    "id": "3.1.1",
                    "prevs": [
                        "3.0",
                        "3.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "3.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "3.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "3.1.2.1",
                    "prevs": [
                        "3.1.1",
                        "3.1.2.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "3.1.2.2",
                    "prevs": [
                        "3.1.2.0",
                        "3.1.2.1"
                    ],
                    "rule": "intros",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "if_P, if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n",
                    "id": "3.1.3",
                    "prevs": [
                        "3.1.2",
                        "3.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n"
                },
                {
                    "args": "le_exp, x ^ m ≤ x ^ n",
                    "id": "3.1.4",
                    "prevs": [
                        "3.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ m ≤ x ^ n"
                },
                {
                    "args": "",
                    "id": "3.1.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "n = 0",
                    "id": "3.1.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "3.1.5.1",
                    "prevs": [
                        "3.1.1",
                        "3.1.5.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "3.1.5.2",
                    "prevs": [
                        "3.1.5.0",
                        "3.1.5.1"
                    ],
                    "rule": "intros",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "if_P, if x = 0 then n = 0 ⟶ m = 0 else x = 1 ∨ n ≤ m",
                    "id": "3.1.6",
                    "prevs": [
                        "3.1.5",
                        "3.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ if x = 0 then n = 0 ⟶ m = 0 else x = 1 ∨ n ≤ m"
                },
                {
                    "args": "le_exp, x ^ n ≤ x ^ m",
                    "id": "3.1.7",
                    "prevs": [
                        "3.1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "conjI",
                    "id": "3.1.8",
                    "prevs": [
                        "3.1.4",
                        "3.1.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "3.1.9",
                    "prevs": [
                        "3.1.0",
                        "3.1.8"
                    ],
                    "rule": "intros",
                    "th": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 0 ⟶ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ ¬(x = 0) ⟶ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "if_not_P",
                    "id": "3.2.1",
                    "prevs": [
                        "3.0",
                        "3.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ m = n"
                },
                {
                    "args": "",
                    "id": "3.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ⟶ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "x = 1",
                    "id": "3.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "disjI1, {A: x = 1, B: m ≤ n}",
                    "id": "3.2.2.1",
                    "prevs": [
                        "3.2.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 1, ¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.2.2.2",
                    "prevs": [
                        "3.2.2.0",
                        "3.2.2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ⟶ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = n ⟶ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "m = n",
                    "id": "3.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "less_eq_refl, {n: n}",
                    "id": "3.2.3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n ≤ n"
                },
                {
                    "args": "m ≤ n",
                    "id": "3.2.3.2",
                    "prevs": [
                        "3.2.3.0",
                        "3.2.3.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n, ¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m ≤ n"
                },
                {
                    "args": "disjI2, {A: x = 1, B: m ≤ n}",
                    "id": "3.2.3.3",
                    "prevs": [
                        "3.2.3.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = n, ¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "",
                    "id": "3.2.3.4",
                    "prevs": [
                        "3.2.3.0",
                        "3.2.3.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = n ⟶ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "3.2.4",
                    "prevs": [
                        "3.2.1",
                        "3.2.2",
                        "3.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ m ≤ n"
                },
                {
                    "args": "if_not_P, if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n",
                    "id": "3.2.5",
                    "prevs": [
                        "3.2.4",
                        "3.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ if x = 0 then m = 0 ⟶ n = 0 else x = 1 ∨ m ≤ n"
                },
                {
                    "args": "le_exp, x ^ m ≤ x ^ n",
                    "id": "3.2.6",
                    "prevs": [
                        "3.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ m ≤ x ^ n"
                },
                {
                    "args": "",
                    "id": "3.2.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ⟶ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "x = 1",
                    "id": "3.2.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 1 ⊢ x = 1"
                },
                {
                    "args": "disjI1, {A: x = 1, B: n ≤ m}",
                    "id": "3.2.7.1",
                    "prevs": [
                        "3.2.7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 1, ¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "",
                    "id": "3.2.7.2",
                    "prevs": [
                        "3.2.7.0",
                        "3.2.7.1"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ⟶ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "",
                    "id": "3.2.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = n ⟶ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "m = n",
                    "id": "3.2.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "less_eq_refl, {n: n}",
                    "id": "3.2.8.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n ≤ n"
                },
                {
                    "args": "n ≤ m",
                    "id": "3.2.8.2",
                    "prevs": [
                        "3.2.8.0",
                        "3.2.8.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n, ¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ n ≤ m"
                },
                {
                    "args": "disjI2, {A: x = 1, B: n ≤ m}",
                    "id": "3.2.8.3",
                    "prevs": [
                        "3.2.8.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = n, ¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "",
                    "id": "3.2.8.4",
                    "prevs": [
                        "3.2.8.0",
                        "3.2.8.3"
                    ],
                    "rule": "intros",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ m = n ⟶ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "disjE",
                    "id": "3.2.9",
                    "prevs": [
                        "3.2.1",
                        "3.2.7",
                        "3.2.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x = 1 ∨ n ≤ m"
                },
                {
                    "args": "if_not_P, if x = 0 then n = 0 ⟶ m = 0 else x = 1 ∨ n ≤ m",
                    "id": "3.2.10",
                    "prevs": [
                        "3.2.9",
                        "3.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ if x = 0 then n = 0 ⟶ m = 0 else x = 1 ∨ n ≤ m"
                },
                {
                    "args": "le_exp, x ^ n ≤ x ^ m",
                    "id": "3.2.11",
                    "prevs": [
                        "3.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ n ≤ x ^ m"
                },
                {
                    "args": "conjI",
                    "id": "3.2.12",
                    "prevs": [
                        "3.2.6",
                        "3.2.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0), if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "3.2.13",
                    "prevs": [
                        "3.2.0",
                        "3.2.12"
                    ],
                    "rule": "intros",
                    "th": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ ¬(x = 0) ⟶ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "classical_cases",
                    "id": "3.3",
                    "prevs": [
                        "3.1",
                        "3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n ⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n) ⟶ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m"
                },
                {
                    "args": "iffI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ x ^ m ≤ x ^ n ∧ x ^ n ≤ x ^ m ⟷ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "x ^ m = x ^ n ⟷ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ x ^ m = x ^ n ⟷ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ m = x ^ n ⟷ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)"
                }
            ],
            "prop": "x ^ m = x ^ n ⟷ (if x = 0 then m = 0 ⟷ n = 0 else x = 1 ∨ m = n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_m": "x ^ m",
                    "param_n": "x ^ n",
                    "theorem": "le_antisym"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "le_exp"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "le_exp"
                },
                {
                    "case": "x=0",
                    "goal_id": "2.5",
                    "method_name": "cases"
                },
                {
                    "goal_id": "2.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.5.0"
                    ],
                    "goal_id": "2.5.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2.3",
                        "2.5.0"
                    ],
                    "goal_id": "2.5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2.4",
                        "2.5.0"
                    ],
                    "goal_id": "2.5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "2.5.3",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.6.0"
                    ],
                    "goal_id": "2.6.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "2.3",
                        "2.6.0"
                    ],
                    "goal_id": "2.6.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "2.4",
                        "2.6.0"
                    ],
                    "goal_id": "2.6.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "2.6.2"
                    ],
                    "goal_id": "2.6.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.6.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.6.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.6.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.6.1"
                    ],
                    "goal_id": "2.6.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.6.4.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.6.4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.6.4.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "le_antisym"
                },
                {
                    "goal_id": "2.6.4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "case": "x=0",
                    "goal_id": "3.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_exp"
                },
                {
                    "fact_ids": [
                        "3.0",
                        "3.1.0"
                    ],
                    "goal_id": "3.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "3.1.0"
                    ],
                    "goal_id": "3.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.1.1",
                        "3.1.2.0"
                    ],
                    "goal_id": "3.1.2.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_exp"
                },
                {
                    "fact_ids": [
                        "3.1.0"
                    ],
                    "goal_id": "3.1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "3.1.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.1.1"
                    ],
                    "goal_id": "3.1.5.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_exp"
                },
                {
                    "fact_ids": [
                        "3.0",
                        "3.2.0"
                    ],
                    "goal_id": "3.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.2.1"
                    ],
                    "goal_id": "3.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "3.2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "3.2.3.0"
                    ],
                    "goal_id": "3.2.3.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "3.2.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_exp"
                },
                {
                    "fact_ids": [
                        "3.2.0"
                    ],
                    "goal_id": "3.2.7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "3.2.1"
                    ],
                    "goal_id": "3.2.7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.7",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "3.2.8",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "3.2.8.0"
                    ],
                    "goal_id": "3.2.8.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.2.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "exp_mono_le_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x ≤ y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "less_eq_refl, {n: (1::nat)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) ≤ 1"
                },
                {
                    "args": "nat_nat_power_def_1, x ^ (0::nat) ≤ y ^ (0::nat)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y ⊢ x ^ (0::nat) ≤ y ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y ⊢ ∀n. x ^ n ≤ y ^ n ⟶ x ^ Suc n ≤ y ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "x ^ n ≤ y ^ n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ n ≤ y ^ n ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "le_mult2",
                    "id": "3.2",
                    "prevs": [
                        "0",
                        "3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, x ^ n ≤ y ^ n ⊢ x * x ^ n ≤ y * y ^ n"
                },
                {
                    "args": "nat_nat_power_def_2, x ^ Suc n ≤ y ^ Suc n",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ≤ y, x ^ n ≤ y ^ n ⊢ x ^ Suc n ≤ y ^ Suc n"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y ⊢ ∀n. x ^ n ≤ y ^ n ⟶ x ^ Suc n ≤ y ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. x ^ n ≤ y ^ n, x: n}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≤ y ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≤ y ⟶ x ^ n ≤ y ^ n"
                }
            ],
            "prop": "x ≤ y ⟶ x ^ n ≤ y ^ n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_mult2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "exp_mono_lt_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x < y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x < y ⊢ x < y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x < y ⊢ ¬((0::nat) = 0) ⟶ x ^ (0::nat) < y ^ (0::nat)"
                },
                {
                    "args": "¬((0::nat) = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x < y, ¬((0::nat) = 0) ⊢ ¬(x ^ (0::nat) < y ^ (0::nat)) ⟶ ¬¬((0::nat) = 0)"
                },
                {
                    "args": "¬(x ^ (0::nat) < y ^ (0::nat))",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ^ (0::nat) < y ^ (0::nat)) ⊢ ¬(x ^ (0::nat) < y ^ (0::nat))"
                },
                {
                    "args": "double_neg, ¬¬((0::nat) = 0)",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬¬((0::nat) = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "intros",
                    "th": "x < y, ¬((0::nat) = 0) ⊢ ¬(x ^ (0::nat) < y ^ (0::nat)) ⟶ ¬¬((0::nat) = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y, ¬((0::nat) = 0) ⊢ x ^ (0::nat) < y ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "x < y ⊢ ¬((0::nat) = 0) ⟶ x ^ (0::nat) < y ^ (0::nat)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x < y ⊢ ∀n. (¬(n = 0) ⟶ x ^ n < y ^ n) ⟶ ¬(Suc n = 0) ⟶ x ^ Suc n < y ^ Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(n = 0) ⟶ x ^ n < y ^ n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(n = 0) ⟶ x ^ n < y ^ n"
                },
                {
                    "args": "¬(Suc n = 0)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "lt_imp_le",
                    "id": "2.3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x ≤ y"
                },
                {
                    "args": "exp_mono_le_imp, {n: n, x: x, y: y}",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "disjI1, {A: x ^ n ≤ y ^ n, B: x = 0}",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x ^ n ≤ y ^ n ∨ x = 0"
                },
                {
                    "args": "le_mult_rcancel, x ^ n * x ≤ y ^ n * x",
                    "id": "2.6",
                    "prevs": [
                        "2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x ^ n * x ≤ y ^ n * x"
                },
                {
                    "args": "mult_comm, x * x ^ n ≤ x * y ^ n",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x * x ^ n ≤ x * y ^ n"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬¬(y = 0) ⟶ ¬(x < y)"
                },
                {
                    "args": "¬¬(y = 0)",
                    "id": "2.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(y = 0) ⊢ ¬¬(y = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "2.8.1",
                    "prevs": [
                        "2.8.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(y = 0) ⊢ y = 0"
                },
                {
                    "args": "le_0, {n: x}",
                    "id": "2.8.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ x"
                },
                {
                    "args": "not_lt, ¬(x < 0)",
                    "id": "2.8.3",
                    "prevs": [
                        "2.8.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬¬(y = 0), ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(x < 0)"
                },
                {
                    "args": "¬(x < y)",
                    "id": "2.8.4",
                    "prevs": [
                        "2.8.1",
                        "2.8.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x < y, ¬¬(y = 0), ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(x < y)"
                },
                {
                    "args": "",
                    "id": "2.8.5",
                    "prevs": [
                        "2.8.0",
                        "2.8.4"
                    ],
                    "rule": "intros",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬¬(y = 0) ⟶ ¬(x < y)"
                },
                {
                    "args": "contrapositive",
                    "id": "2.9",
                    "prevs": [
                        "0",
                        "2.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(y = 0)"
                },
                {
                    "args": "disjI1, {A: ¬(y = 0), B: ¬¬(n = 0)}",
                    "id": "2.10",
                    "prevs": [
                        "2.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(y = 0) ∨ ¬¬(n = 0)"
                },
                {
                    "args": "de_morgan_thm1, ¬(y = 0 ∧ ¬(n = 0))",
                    "id": "2.11",
                    "prevs": [
                        "2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(y = 0 ∧ ¬(n = 0))"
                },
                {
                    "args": "exp_eq_0, ¬(y ^ n = 0)",
                    "id": "2.12",
                    "prevs": [
                        "2.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ ¬(y ^ n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "2.13",
                    "prevs": [
                        "0",
                        "2.12"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x < y ∧ ¬(y ^ n = 0)"
                },
                {
                    "args": "lt_mult_rcancel, x * y ^ n < y * y ^ n",
                    "id": "2.14",
                    "prevs": [
                        "2.13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x * y ^ n < y * y ^ n"
                },
                {
                    "args": "let_trans",
                    "id": "2.15",
                    "prevs": [
                        "2.7",
                        "2.14"
                    ],
                    "rule": "apply_theorem",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x * x ^ n < y * y ^ n"
                },
                {
                    "args": "nat_nat_power_def_2, x ^ Suc n < y ^ Suc n",
                    "id": "2.16",
                    "prevs": [
                        "2.15"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x < y, ¬(Suc n = 0), ¬(n = 0) ⟶ x ^ n < y ^ n ⊢ x ^ Suc n < y ^ Suc n"
                },
                {
                    "args": "",
                    "id": "2.17",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.16"
                    ],
                    "rule": "intros",
                    "th": "x < y ⊢ ∀n. (¬(n = 0) ⟶ x ^ n < y ^ n) ⟶ ¬(Suc n = 0) ⟶ x ^ Suc n < y ^ Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. ¬(n = 0) ⟶ x ^ n < y ^ n, x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x < y ⊢ ¬(n = 0) ⟶ x ^ n < y ^ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x < y ⟶ ¬(n = 0) ⟶ x ^ n < y ^ n"
                }
            ],
            "prop": "x < y ⟶ ¬(n = 0) ⟶ x ^ n < y ^ n",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "param_m": "x * y ^ n",
                    "theorem": "let_trans"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_mult_rcancel"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_mono_le_imp"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "goal_id": "2.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_mult_rcancel"
                },
                {
                    "goal_id": "2.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "2.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "goal_id": "2.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "goal_id": "2.8",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.8",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "2.8",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.8.0"
                    ],
                    "goal_id": "2.8.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "2.8.1"
                    ],
                    "goal_id": "2.8.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.8.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_lt"
                },
                {
                    "goal_id": "2.8.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_mono_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x ^ n ≤ y ^ n ⟶ x ≤ y ∨ n = 0"
                },
                {
                    "args": "x ^ n ≤ y ^ n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ n ≤ y ^ n ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ^ n ≤ y ^ n ⊢ ¬(x ≤ y ∨ n = 0) ⟶ ¬(x ^ n ≤ y ^ n)"
                },
                {
                    "args": "¬(x ≤ y ∨ n = 0)",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ≤ y ∨ n = 0) ⊢ ¬(x ≤ y ∨ n = 0)"
                },
                {
                    "args": "de_morgan_thm2",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ≤ y ∨ n = 0) ⊢ ¬(x ≤ y) ∧ ¬(n = 0)"
                },
                {
                    "args": "not_le",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ≤ y ∨ n = 0) ⊢ y < x ∧ ¬(n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x ≤ y ∨ n = 0) ⊢ y < x"
                },
                {
                    "args": "conjD2",
                    "id": "0.1.4",
                    "prevs": [
                        "0.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x ≤ y ∨ n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "exp_mono_lt_imp",
                    "id": "0.1.5",
                    "prevs": [
                        "0.1.3",
                        "0.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ n ≤ y ^ n, ¬(x ≤ y ∨ n = 0) ⊢ y ^ n < x ^ n"
                },
                {
                    "args": "not_le, ¬(x ^ n ≤ y ^ n)",
                    "id": "0.1.6",
                    "prevs": [
                        "0.1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x ^ n ≤ y ^ n, ¬(x ≤ y ∨ n = 0) ⊢ ¬(x ^ n ≤ y ^ n)"
                },
                {
                    "args": "",
                    "id": "0.1.7",
                    "prevs": [
                        "0.1.0",
                        "0.1.6"
                    ],
                    "rule": "intros",
                    "th": "x ^ n ≤ y ^ n ⊢ ¬(x ≤ y ∨ n = 0) ⟶ ¬(x ^ n ≤ y ^ n)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ n ≤ y ^ n ⊢ x ≤ y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ n ≤ y ^ n ⟶ x ≤ y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x ≤ y ∨ n = 0 ⟶ x ^ n ≤ y ^ n"
                },
                {
                    "args": "x ≤ y ∨ n = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ∨ n = 0 ⊢ x ≤ y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y ∨ n = 0 ⊢ x ≤ y ⟶ x ^ n ≤ y ^ n"
                },
                {
                    "args": "x ≤ y",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "exp_mono_le_imp, {n: n, x: x, y: y}",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≤ y, x ≤ y ∨ n = 0 ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y ∨ n = 0 ⊢ x ≤ y ⟶ x ^ n ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y ∨ n = 0 ⊢ n = 0 ⟶ x ^ n ≤ y ^ n"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "less_eq_refl, {n: (1::nat)}",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (1::nat) ≤ 1"
                },
                {
                    "args": "nat_nat_power_def_1, x ^ (0::nat) ≤ y ^ (0::nat)",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0, x ≤ y ∨ n = 0 ⊢ x ^ (0::nat) ≤ y ^ (0::nat)"
                },
                {
                    "args": "x ^ n ≤ y ^ n",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, x ≤ y ∨ n = 0 ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.0",
                        "1.2.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y ∨ n = 0 ⊢ n = 0 ⟶ x ^ n ≤ y ^ n"
                },
                {
                    "args": "disjE",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y ∨ n = 0 ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ≤ y ∨ n = 0 ⟶ x ^ n ≤ y ^ n"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ x ^ n ≤ y ^ n ⟷ x ≤ y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ n ≤ y ^ n ⟷ x ≤ y ∨ n = 0"
                }
            ],
            "prop": "x ^ n ≤ y ^ n ⟷ x ≤ y ∨ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_mono_lt_imp"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "fact_ids": [
                        "0.1.1"
                    ],
                    "goal_id": "0.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "fact_ids": [
                        "0.1.2"
                    ],
                    "goal_id": "0.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.1.2"
                    ],
                    "goal_id": "0.1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_mono_le_imp"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_mono_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "de_morgan_thm2, ¬(y ≤ x ∨ n = 0) ⟷ ¬(y ≤ x) ∧ ¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(y ≤ x ∨ n = 0) ⟷ ¬(y ≤ x) ∧ ¬(n = 0)"
                },
                {
                    "args": "exp_mono_le, ¬(y ^ n ≤ x ^ n) ⟷ ¬(y ≤ x) ∧ ¬(n = 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(y ^ n ≤ x ^ n) ⟷ ¬(y ≤ x) ∧ ¬(n = 0)"
                },
                {
                    "args": "not_le, x ^ n < y ^ n ⟷ x < y ∧ ¬(n = 0)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "⊢ x ^ n < y ^ n ⟷ x < y ∧ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ n < y ^ n ⟷ x < y ∧ ¬(n = 0)"
                }
            ],
            "prop": "x ^ n < y ^ n ⟷ x < y ∧ ¬(n = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_mono_le"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "exp_mono_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x ^ n = y ^ n ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "x ^ n = y ^ n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ^ n = y ^ n ⊢ x ^ n = y ^ n"
                },
                {
                    "args": "le_antisym",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "x ^ n = y ^ n ⊢ x ^ n ≤ y ^ n ∧ y ^ n ≤ x ^ n"
                },
                {
                    "args": "conjD1",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ n = y ^ n ⊢ x ^ n ≤ y ^ n"
                },
                {
                    "args": "conjD2",
                    "id": "0.3",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ n = y ^ n ⊢ y ^ n ≤ x ^ n"
                },
                {
                    "args": "exp_mono_le",
                    "id": "0.4",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ^ n = y ^ n ⊢ x ≤ y ∨ n = 0"
                },
                {
                    "args": "exp_mono_le",
                    "id": "0.5",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x ^ n = y ^ n ⊢ y ≤ x ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ^ n = y ^ n ⊢ x ≤ y ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "x ≤ y",
                    "id": "0.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x ≤ y ⊢ x ≤ y"
                },
                {
                    "args": "",
                    "id": "0.6.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y, x ^ n = y ^ n ⊢ y ≤ x ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "y ≤ x",
                    "id": "0.6.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y ≤ x ⊢ y ≤ x"
                },
                {
                    "args": "conjI",
                    "id": "0.6.1.1",
                    "prevs": [
                        "0.6.0",
                        "0.6.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, y ≤ x, x ^ n = y ^ n ⊢ x ≤ y ∧ y ≤ x"
                },
                {
                    "args": "le_antisym, x = y",
                    "id": "0.6.1.2",
                    "prevs": [
                        "0.6.1.1"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "x ≤ y, y ≤ x, x ^ n = y ^ n ⊢ x = y"
                },
                {
                    "args": "disjI1, {A: x = y, B: n = 0}",
                    "id": "0.6.1.3",
                    "prevs": [
                        "0.6.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x ≤ y, y ≤ x, x ^ n = y ^ n ⊢ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.6.1.4",
                    "prevs": [
                        "0.6.1.0",
                        "0.6.1.3"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y, x ^ n = y ^ n ⊢ y ≤ x ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.6.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ≤ y, x ^ n = y ^ n ⊢ n = 0 ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "0.6.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "disjI2, {A: x = y, B: n = 0}",
                    "id": "0.6.2.1",
                    "prevs": [
                        "0.6.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, x ≤ y, x ^ n = y ^ n ⊢ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.6.2.2",
                    "prevs": [
                        "0.6.2.0",
                        "0.6.2.1"
                    ],
                    "rule": "intros",
                    "th": "x ≤ y, x ^ n = y ^ n ⊢ n = 0 ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.6.3",
                    "prevs": [
                        "0.5",
                        "0.6.1",
                        "0.6.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ≤ y, x ^ n = y ^ n ⊢ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.6.4",
                    "prevs": [
                        "0.6.0",
                        "0.6.3"
                    ],
                    "rule": "intros",
                    "th": "x ^ n = y ^ n ⊢ x ≤ y ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x ^ n = y ^ n ⊢ n = 0 ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "0.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "disjI2, {A: x = y, B: n = 0}",
                    "id": "0.7.1",
                    "prevs": [
                        "0.7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, x ^ n = y ^ n ⊢ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.7.2",
                    "prevs": [
                        "0.7.0",
                        "0.7.1"
                    ],
                    "rule": "intros",
                    "th": "x ^ n = y ^ n ⊢ n = 0 ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.8",
                    "prevs": [
                        "0.4",
                        "0.6",
                        "0.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "x ^ n = y ^ n ⊢ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.9",
                    "prevs": [
                        "0.0",
                        "0.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ n = y ^ n ⟶ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = y ∨ n = 0 ⟶ x ^ n = y ^ n"
                },
                {
                    "args": "x = y ∨ n = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ∨ n = 0 ⊢ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = y ∨ n = 0 ⊢ x = y ⟶ x ^ n = y ^ n"
                },
                {
                    "args": "x = y",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = y ⊢ x = y"
                },
                {
                    "args": "x ^ n = y ^ n",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = y ⊢ x ^ n = y ^ n"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "intros",
                    "th": "x = y ∨ n = 0 ⊢ x = y ⟶ x ^ n = y ^ n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "x = y ∨ n = 0 ⊢ n = 0 ⟶ x ^ n = y ^ n"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "nat_nat_power_def_1, x ^ (0::nat) = y ^ (0::nat)",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x ^ (0::nat) = y ^ (0::nat)"
                },
                {
                    "args": "x ^ n = y ^ n",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, x = y ∨ n = 0 ⊢ x ^ n = y ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.2"
                    ],
                    "rule": "intros",
                    "th": "x = y ∨ n = 0 ⊢ n = 0 ⟶ x ^ n = y ^ n"
                },
                {
                    "args": "disjE",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = y ∨ n = 0 ⊢ x ^ n = y ^ n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = y ∨ n = 0 ⟶ x ^ n = y ^ n"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ x ^ n = y ^ n ⟷ x = y ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x ^ n = y ^ n ⟷ x = y ∨ n = 0"
                }
            ],
            "prop": "x ^ n = y ^ n ⟷ x = y ∨ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "le_antisym"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "exp_mono_le"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "exp_mono_le"
                },
                {
                    "fact_ids": [
                        "0.4"
                    ],
                    "goal_id": "0.6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.5"
                    ],
                    "goal_id": "0.6.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.6.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.6.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.6.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "le_antisym"
                },
                {
                    "goal_id": "0.6.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.6.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.6.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "0.7",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "nat_WF",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "∀n. (∀m. m < n ⟶ P m) ⟶ P n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀n. (∀m. m < n ⟶ P m) ⟶ P n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀n. P n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "nat_induct, {P: λn. ∀m. m < n ⟶ P m, x: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (∀m. m < 0 ⟶ P m) ⟶ (∀n1. (∀m. m < n1 ⟶ P m) ⟶ (∀m. m < Suc n1 ⟶ P m)) ⟶ (∀m. m < n ⟶ P m)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀m. false ⟶ P m"
                },
                {
                    "args": "m, nat",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "false",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "false ⊢ false"
                },
                {
                    "args": "not_false_res, P m",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "resolve_theorem",
                    "th": "false ⊢ P m"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "intros",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀m. false ⟶ P m"
                },
                {
                    "args": "nat_less_def_1, ∀m. m < 0 ⟶ P m",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀m. m < 0 ⟶ P m"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀n. (∀m. m < n ⟶ P m) ⟶ (∀m. m < Suc n ⟶ P m)"
                },
                {
                    "args": "∀m. m < n ⟶ P m",
                    "id": "1.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀m. m < n ⟶ P m ⊢ ∀m. m < n ⟶ P m"
                },
                {
                    "args": "",
                    "id": "1.4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀m. m < Suc n ⟶ P m"
                },
                {
                    "args": "m, nat",
                    "id": "1.4.1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "m < Suc n",
                    "id": "1.4.1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < Suc n ⊢ m < Suc n"
                },
                {
                    "args": "nat_less_def_2",
                    "id": "1.4.1.2",
                    "prevs": [
                        "1.4.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m < Suc n ⊢ m = n ∨ m < n"
                },
                {
                    "args": "",
                    "id": "1.4.1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m < Suc n, ∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ m = n ⟶ m < n"
                },
                {
                    "args": "m = n",
                    "id": "1.4.1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "1.4.1.3.1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "m = n, m < Suc n, ∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ m < n"
                },
                {
                    "args": "",
                    "id": "1.4.1.3.2",
                    "prevs": [
                        "1.4.1.3.0",
                        "1.4.1.3.1"
                    ],
                    "rule": "intros",
                    "th": "m < Suc n, ∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ m = n ⟶ m < n"
                },
                {
                    "args": "m < n ⟶ m < n",
                    "id": "1.4.1.4",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m < n ⟶ m < n"
                },
                {
                    "args": "disjE",
                    "id": "1.4.1.5",
                    "prevs": [
                        "1.4.1.2",
                        "1.4.1.3",
                        "1.4.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < Suc n, ∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ m < n"
                },
                {
                    "args": "m",
                    "id": "1.4.1.6",
                    "prevs": [
                        "1.4.0",
                        "1.4.1.5"
                    ],
                    "rule": "apply_fact_for",
                    "th": "m < Suc n, ∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ P m"
                },
                {
                    "args": "",
                    "id": "1.4.1.7",
                    "prevs": [
                        "1.4.1.0",
                        "1.4.1.1",
                        "1.4.1.6"
                    ],
                    "rule": "intros",
                    "th": "∀m. m < n ⟶ P m, ∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀m. m < Suc n ⟶ P m"
                },
                {
                    "args": "",
                    "id": "1.4.2",
                    "prevs": [
                        "1.0",
                        "1.4.0",
                        "1.4.1"
                    ],
                    "rule": "intros",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀n. (∀m. m < n ⟶ P m) ⟶ (∀m. m < Suc n ⟶ P m)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.1",
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_fact",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀m. m < n ⟶ P m"
                },
                {
                    "args": "n",
                    "id": "1.6",
                    "prevs": [
                        "0",
                        "1.5"
                    ],
                    "rule": "apply_fact_for",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ P n"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "∀n. (∀m. m < n ⟶ P m) ⟶ P n ⊢ ∀n. P n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀n. (∀m. m < n ⟶ P m) ⟶ P n) ⟶ (∀n. P n)"
                }
            ],
            "prop": "(∀n. (∀m. m < n ⟶ P m) ⟶ P n) ⟶ (∀n. P n)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_P": "%n. (∀m. m < n ⟶ P m)",
                    "param_x": "n",
                    "theorem": "nat_induct"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "fact_ids": [
                        "1.2.1"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.4.1",
                    "method_name": "introduction",
                    "names": "m"
                },
                {
                    "fact_ids": [
                        "1.4.0"
                    ],
                    "goal_id": "1.4.1.2",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "1.4.1.1"
                    ],
                    "goal_id": "1.4.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_2"
                },
                {
                    "fact_ids": [
                        "1.4.1.2"
                    ],
                    "goal_id": "1.4.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.4.1.3",
                    "method_name": "introduction"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "nat ⇒ bool"
            }
        },
        {
            "name": "nat_WOP",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃n. P n) ⟶ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)))"
                },
                {
                    "args": "∃n. P n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n. P n ⊢ ∃n. P n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃n. P n ⊢ (∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m)))) ⟶ (∀x. ¬(P x))"
                },
                {
                    "args": "∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m)))",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m)))"
                },
                {
                    "args": "",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃n. P n, ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ∀n. (∀m. m < n ⟶ ¬(P m)) ⟶ ¬(P n)"
                },
                {
                    "args": "n, nat",
                    "id": "0.1.1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "∀m. m < n ⟶ ¬(P m)",
                    "id": "0.1.1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀m. m < n ⟶ ¬(P m) ⊢ ∀m. m < n ⟶ ¬(P m)"
                },
                {
                    "args": "n",
                    "id": "0.1.1.2",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ¬(P n ∧ (∀m. m < n ⟶ ¬(P m)))"
                },
                {
                    "args": "de_morgan_thm1",
                    "id": "0.1.1.3",
                    "prevs": [
                        "0.1.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ¬(P n) ∨ ¬(∀m. m < n ⟶ ¬(P m))"
                },
                {
                    "args": "¬(P n) ⟶ ¬(P n)",
                    "id": "0.1.1.4",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ¬(P n) ⟶ ¬(P n)"
                },
                {
                    "args": "",
                    "id": "0.1.1.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∃n. P n, ∀m. m < n ⟶ ¬(P m), ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ¬(∀m. m < n ⟶ ¬(P m)) ⟶ ¬(P n)"
                },
                {
                    "args": "¬(∀m. m < n ⟶ ¬(P m))",
                    "id": "0.1.1.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(∀m. m < n ⟶ ¬(P m)) ⊢ ¬(∀m. m < n ⟶ ¬(P m))"
                },
                {
                    "args": "negE_gen, {A: ∀m. m < n ⟶ ¬(P m), C: ¬(P n)}",
                    "id": "0.1.1.5.1",
                    "prevs": [
                        "0.1.1.5.0",
                        "0.1.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "∀m. m < n ⟶ ¬(P m), ¬(∀m. m < n ⟶ ¬(P m)) ⊢ ¬(P n)"
                },
                {
                    "args": "",
                    "id": "0.1.1.5.2",
                    "prevs": [
                        "0.1.1.5.0",
                        "0.1.1.5.1"
                    ],
                    "rule": "intros",
                    "th": "∃n. P n, ∀m. m < n ⟶ ¬(P m), ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ¬(∀m. m < n ⟶ ¬(P m)) ⟶ ¬(P n)"
                },
                {
                    "args": "disjE",
                    "id": "0.1.1.6",
                    "prevs": [
                        "0.1.1.3",
                        "0.1.1.4",
                        "0.1.1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "∃n. P n, ∀m. m < n ⟶ ¬(P m), ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ¬(P n)"
                },
                {
                    "args": "",
                    "id": "0.1.1.7",
                    "prevs": [
                        "0.1.1.0",
                        "0.1.1.1",
                        "0.1.1.6"
                    ],
                    "rule": "intros",
                    "th": "∃n. P n, ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ∀n. (∀m. m < n ⟶ ¬(P m)) ⟶ ¬(P n)"
                },
                {
                    "args": "nat_WF",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "∃n. P n, ∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m))) ⊢ ∀n. ¬(P n)"
                },
                {
                    "args": "",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.0",
                        "0.1.2"
                    ],
                    "rule": "intros",
                    "th": "∃n. P n ⊢ (∀x. ¬(P x ∧ (∀m. m < x ⟶ ¬(P m)))) ⟶ (∀x. ¬(P x))"
                },
                {
                    "args": "not_exists, ¬(∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))) ⟶ ¬(∃n. P n)",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∃n. P n ⊢ ¬(∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))) ⟶ ¬(∃n. P n)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "∃n. P n ⊢ ∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃n. P n) ⟶ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))) ⟶ (∃n. P n)"
                },
                {
                    "args": "∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)) ⊢ ∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))"
                },
                {
                    "args": "n, nat",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "P n ∧ (∀m. m < n ⟶ ¬(P m))",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P n ∧ (∀m. m < n ⟶ ¬(P m)) ⊢ P n ∧ (∀m. m < n ⟶ ¬(P m))"
                },
                {
                    "args": "conjD1",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "P n ∧ (∀m. m < n ⟶ ¬(P m)) ⊢ P n"
                },
                {
                    "args": "exI, {P: λn. P n, a: n}",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "P n ∧ (∀m. m < n ⟶ ¬(P m)), ∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)) ⊢ ∃a1. P a1"
                },
                {
                    "args": "∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))) ⟶ (∃n. P n)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃n. P n) ⟷ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃n. P n) ⟷ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)))"
                }
            ],
            "prop": "(∃n. P n) ⟷ (∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_exists"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_WF"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1.2",
                    "method_name": "forall_elim",
                    "s": "n"
                },
                {
                    "fact_ids": [
                        "0.1.1.2"
                    ],
                    "goal_id": "0.1.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm1"
                },
                {
                    "fact_ids": [
                        "0.1.1.3"
                    ],
                    "goal_id": "0.1.1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.1.1.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.1.5.0",
                        "0.1.1.1"
                    ],
                    "goal_id": "0.1.1.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "exists_elim",
                    "names": "n"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "nat ⇒ bool"
            }
        },
        {
            "name": "nat_MAX",
            "num_gaps": 3,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⟶ (∃m. P m ∧ (∀x. P x ⟶ x ≤ m))"
                },
                {
                    "args": "(∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M)"
                },
                {
                    "args": "conjD1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∃x. P x"
                },
                {
                    "args": "conjD2",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∃M. ∀x. P x ⟶ x ≤ M"
                },
                {
                    "args": "a, nat",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "∀x. P x ⟶ x ≤ a",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀x. P x ⟶ x ≤ a ⊢ ∀x. P x ⟶ x ≤ a"
                },
                {
                    "args": "nat_WOP",
                    "id": "0.5",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "(∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∃n. P n ∧ (∀m. m < n ⟶ ¬(P m))"
                },
                {
                    "args": "m, nat",
                    "id": "0.6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m"
                },
                {
                    "args": "conjD1",
                    "id": "0.7",
                    "prevs": [
                        "0.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "P m ∧ (∀m1. m1 < m ⟶ ¬(P m1)) ⊢ P m"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀x. P x ⟶ x ≤ a, (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)) ⟶ (∀x. P x ⟶ x ≤ 0)"
                },
                {
                    "args": "P 0 ∧ (∀m. m < 0 ⟶ ¬(P m))",
                    "id": "0.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)) ⊢ P 0 ∧ (∀m. m < 0 ⟶ ¬(P m))"
                },
                {
                    "args": "",
                    "id": "0.8.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀x. P x ⟶ x ≤ a, P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)), (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∀x. P x ⟶ x ≤ 0"
                },
                {
                    "args": "x, nat",
                    "id": "0.8.1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "P x",
                    "id": "0.8.1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P x ⊢ P x"
                },
                {
                    "args": "conjD2",
                    "id": "0.8.1.2",
                    "prevs": [
                        "0.8.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)) ⊢ ∀m. m < 0 ⟶ ¬(P m)"
                },
                {
                    "args": "x",
                    "id": "0.8.1.3",
                    "prevs": [
                        "0.8.1.2"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)) ⊢ x < 0 ⟶ ¬(P x)"
                },
                {
                    "args": "",
                    "id": "0.8.1.4",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "P x, ∀x. P x ⟶ x ≤ a, P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)), (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ x ≤ 0"
                },
                {
                    "args": "",
                    "id": "0.8.1.5",
                    "prevs": [
                        "0.8.1.0",
                        "0.8.1.1",
                        "0.8.1.4"
                    ],
                    "rule": "intros",
                    "th": "∀x. P x ⟶ x ≤ a, P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)), (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∀x. P x ⟶ x ≤ 0"
                },
                {
                    "args": "",
                    "id": "0.8.2",
                    "prevs": [
                        "0.8.0",
                        "0.8.1"
                    ],
                    "rule": "intros",
                    "th": "∀x. P x ⟶ x ≤ a, (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ P 0 ∧ (∀m. m < 0 ⟶ ¬(P m)) ⟶ (∀x. P x ⟶ x ≤ 0)"
                },
                {
                    "args": "",
                    "id": "0.9",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "∀x. P x ⟶ x ≤ a, (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∀n. (P n ∧ (∀m. m < n ⟶ ¬(P m)) ⟶ (∀x. P x ⟶ x ≤ n)) ⟶ P (Suc n) ∧ (∀m. m < Suc n ⟶ ¬(P m)) ⟶ (∀x. P x ⟶ x ≤ Suc n)"
                },
                {
                    "args": "nat_induct, {P: λm. P m ∧ (∀m1. m1 < m ⟶ ¬(P m1)) ⟶ (∀x. P x ⟶ x ≤ m), x: m}",
                    "id": "0.10",
                    "prevs": [
                        "0.8",
                        "0.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "∀x. P x ⟶ x ≤ a, (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ P m ∧ (∀m1. m1 < m ⟶ ¬(P m1)) ⟶ (∀x. P x ⟶ x ≤ m)"
                },
                {
                    "args": "conjI",
                    "id": "0.11",
                    "prevs": [
                        "0.7",
                        "0.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀x. P x ⟶ x ≤ a, P m ∧ (∀m1. m1 < m ⟶ ¬(P m1)), (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ P m ∧ (∀x. P x ⟶ x ≤ m)"
                },
                {
                    "args": "exI, {P: λm. P m ∧ (∀x. P x ⟶ x ≤ m), a: m}",
                    "id": "0.12",
                    "prevs": [
                        "0.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "∀x. P x ⟶ x ≤ a, P m ∧ (∀m1. m1 < m ⟶ ¬(P m1)), (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⊢ ∃a1. P a1 ∧ (∀x. P x ⟶ x ≤ a1)"
                },
                {
                    "args": "∃n. P n ∧ (∀m. m < n ⟶ ¬(P m)), ∃M. ∀x. P x ⟶ x ≤ M",
                    "id": "0.13",
                    "prevs": [
                        "0.0",
                        "0.2",
                        "0.3",
                        "0.4",
                        "0.5",
                        "0.6",
                        "0.7",
                        "0.12"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⟶ (∃m. P m ∧ (∀x. P x ⟶ x ≤ m))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ (∃m. P m ∧ (∀x. P x ⟶ x ≤ m)) ⟶ (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⟷ (∃m. P m ∧ (∀x. P x ⟶ x ≤ m))"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⟷ (∃m. P m ∧ (∀x. P x ⟶ x ≤ m))"
                }
            ],
            "prop": "(∃x. P x) ∧ (∃M. ∀x. P x ⟶ x ≤ M) ⟷ (∃m. P m ∧ (∀x. P x ⟶ x ≤ m))",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "exists_elim",
                    "names": "a"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.5",
                    "method_name": "rewrite_fact",
                    "sym": "",
                    "theorem": "nat_WOP"
                },
                {
                    "fact_ids": [
                        "0.5"
                    ],
                    "goal_id": "0.6",
                    "method_name": "exists_elim",
                    "names": "m"
                },
                {
                    "goal_id": "0.8",
                    "method_name": "inst_exists_goal",
                    "s": "m"
                },
                {
                    "goal_id": "0.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "0.7"
                    ],
                    "goal_id": "0.8",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.7"
                    ],
                    "goal_id": "0.9",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0.8",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "m"
                },
                {
                    "goal_id": "0.8",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.8.1",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "0.8.0"
                    ],
                    "goal_id": "0.8.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.8.1.2"
                    ],
                    "goal_id": "0.8.1.3",
                    "method_name": "forall_elim",
                    "s": "x"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "nat ⇒ bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divmod_exist",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "nat_WOP, {P: λr. ∃q. m = q * n + r}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (∃n1. ∃q. m = q * n + n1) ⟷ (∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1)))"
                },
                {
                    "args": "∀A. ∀B. A ⟷ B ⟶ A ⟶ B",
                    "id": "2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀A. ∀B. A ⟷ B ⟶ A ⟶ B"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2",
                        "1"
                    ],
                    "rule": "apply_fact",
                    "th": "⊢ (∃n1. ∃q. m = q * n + n1) ⟶ (∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1)))"
                },
                {
                    "args": "left_imp_exists_thm",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ ∀x. (∃q. m = q * n + x) ⟶ (∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1)))"
                },
                {
                    "args": "left_imp_exists_thm",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ ∀x. ∀x1. m = x1 * n + x ⟶ (∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1)))"
                },
                {
                    "args": "m",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "⊢ ∀x1. m = x1 * n + m ⟶ (∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1)))"
                },
                {
                    "args": "(0::nat)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "⊢ m = 0 * n + m ⟶ (∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1)))"
                },
                {
                    "args": "m = 0 * n + m",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m = 0 * n + m"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_fact",
                    "th": "⊢ ∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1))"
                },
                {
                    "args": "r, nat",
                    "id": "10",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR r"
                },
                {
                    "args": "(∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1))",
                    "id": "11",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1))"
                },
                {
                    "args": "conjD1",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "apply_theorem",
                    "th": "(∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ∃q. m = q * n + r"
                },
                {
                    "args": "conjD2",
                    "id": "13",
                    "prevs": [
                        "11"
                    ],
                    "rule": "apply_theorem",
                    "th": "(∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)"
                },
                {
                    "args": "q, nat",
                    "id": "14",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "m = q * n + r",
                    "id": "15",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = q * n + r ⊢ m = q * n + r"
                },
                {
                    "args": "",
                    "id": "16",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ¬(r < n) ⟶ ¬(∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1))"
                },
                {
                    "args": "¬(r < n)",
                    "id": "16.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(r < n) ⊢ ¬(r < n)"
                },
                {
                    "args": "not_lt",
                    "id": "16.1",
                    "prevs": [
                        "16.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(r < n) ⊢ n ≤ r"
                },
                {
                    "args": "less_eq_exist",
                    "id": "16.2",
                    "prevs": [
                        "16.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(r < n) ⊢ ∃p. r = n + p"
                },
                {
                    "args": "d, nat",
                    "id": "16.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "r = n + d",
                    "id": "16.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r = n + d ⊢ r = n + d"
                },
                {
                    "args": "d < r",
                    "id": "16.5",
                    "prevs": [
                        "0",
                        "16.4"
                    ],
                    "rule": "z3",
                    "th": "¬(n = 0), r = n + d ⊢ d < r"
                },
                {
                    "args": "q * n + (n + d) = (q + 1) * n + d",
                    "id": "16.6",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ q * n + (n + d) = (q + 1) * n + d"
                },
                {
                    "args": "q * n + r = (q + 1) * n + d",
                    "id": "16.7",
                    "prevs": [
                        "16.4",
                        "16.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ q * n + r = (q + 1) * n + d"
                },
                {
                    "args": "m = (q + 1) * n + d",
                    "id": "16.8",
                    "prevs": [
                        "15",
                        "16.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ m = (q + 1) * n + d"
                },
                {
                    "args": "exI, {P: λq. m = q * n + d, a: q + 1}",
                    "id": "16.9",
                    "prevs": [
                        "16.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ∃a1. m = a1 * n + d"
                },
                {
                    "args": "double_neg, ¬¬(∃q. m = q * n + d)",
                    "id": "16.10",
                    "prevs": [
                        "16.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ¬¬(∃q. m = q * n + d)"
                },
                {
                    "args": "conjI",
                    "id": "16.11",
                    "prevs": [
                        "16.5",
                        "16.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ d < r ∧ ¬¬(∃q. m = q * n + d)"
                },
                {
                    "args": "not_imp, ¬(d < r ⟶ ¬(∃q. m = q * n + d))",
                    "id": "16.12",
                    "prevs": [
                        "16.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ¬(d < r ⟶ ¬(∃q. m = q * n + d))"
                },
                {
                    "args": "exI, {P: λx. ¬(x < r ⟶ ¬(∃q. m = q * n + x)), a: d}",
                    "id": "16.13",
                    "prevs": [
                        "16.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ∃a1. ¬(a1 < r ⟶ ¬(∃q. m = q * n + a1))"
                },
                {
                    "args": "not_all, ¬(∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1))",
                    "id": "16.14",
                    "prevs": [
                        "16.13"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(r < n), r = n + d, m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ¬(∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1))"
                },
                {
                    "args": "∃p. r = n + p",
                    "id": "16.15",
                    "prevs": [
                        "16.0",
                        "16.2",
                        "16.3",
                        "16.4",
                        "16.14"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ¬(r < n) ⟶ ¬(∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1))"
                },
                {
                    "args": "contrapositive",
                    "id": "17",
                    "prevs": [
                        "13",
                        "16"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ r < n"
                },
                {
                    "args": "conjI",
                    "id": "18",
                    "prevs": [
                        "15",
                        "17"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ m = q * n + r ∧ r < n"
                },
                {
                    "args": "exI, {P: λr. m = q * n + r ∧ r < n, a: r}",
                    "id": "19",
                    "prevs": [
                        "18"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ∃a1. m = q * n + a1 ∧ a1 < n"
                },
                {
                    "args": "exI, {P: λq. ∃r. m = q * n + r ∧ r < n, a: q}",
                    "id": "20",
                    "prevs": [
                        "19"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), m = q * n + r, (∃q. m = q * n + r) ∧ (∀m1. m1 < r ⟶ ¬(∃q. m = q * n + m1)) ⊢ ∃a1. ∃r. m = a1 * n + r ∧ r < n"
                },
                {
                    "args": "∃q. m = q * n + r, ∃n1. (∃q. m = q * n + n1) ∧ (∀m1. m1 < n1 ⟶ ¬(∃q. m = q * n + m1))",
                    "id": "21",
                    "prevs": [
                        "0",
                        "9",
                        "10",
                        "11",
                        "12",
                        "14",
                        "15",
                        "20"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (∃q. ∃r. m = q * n + r ∧ r < n)"
                }
            ],
            "prop": "¬(n = 0) ⟶ (∃q. ∃r. m = q * n + r ∧ r < n)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_P": "%r. ?q. m = q * n + r",
                    "theorem": "nat_WOP"
                },
                {
                    "goal": "!A. !B. (A<-->B)-->(A-->B)",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2",
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "left_imp_exists_thm"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "left_imp_exists_thm"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "forall_elim",
                    "s": "m"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "forall_elim",
                    "s": "(0::nat)"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal": "m = 0 * n + m",
                    "goal_id": "8",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                },
                {
                    "fact_ids": [
                        "7",
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "exists_elim",
                    "names": "r"
                },
                {
                    "fact_ids": [
                        "11"
                    ],
                    "goal_id": "12",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "11"
                    ],
                    "goal_id": "13",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "12"
                    ],
                    "goal_id": "14",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "16",
                    "method_name": "inst_exists_goal",
                    "s": "q"
                },
                {
                    "goal_id": "16",
                    "method_name": "inst_exists_goal",
                    "s": "r"
                },
                {
                    "goal_id": "16",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "13"
                    ],
                    "goal_id": "16",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "16",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "16.0"
                    ],
                    "goal_id": "16.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_lt"
                },
                {
                    "fact_ids": [
                        "16.1"
                    ],
                    "goal_id": "16.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "16.2"
                    ],
                    "goal_id": "16.3",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "goal_id": "16.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_all"
                },
                {
                    "goal_id": "16.5",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "16.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_imp"
                },
                {
                    "goal_id": "16.5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "0",
                        "16.4"
                    ],
                    "goal_id": "16.5",
                    "method_name": "z3"
                },
                {
                    "goal_id": "16.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "16.6",
                    "method_name": "inst_exists_goal",
                    "s": "q+1"
                },
                {
                    "fact_ids": [
                        "15"
                    ],
                    "goal_id": "16.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "16.4"
                    ],
                    "goal_id": "16.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "16.6",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divmod_exist_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n)"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "eq_refl, {x: m}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m = m"
                },
                {
                    "args": "conjI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "n = 0 ⊢ (0::nat) = 0 ∧ m = m"
                },
                {
                    "args": "exI, {P: λr. (0::nat) = 0 ∧ r = m, a: m}",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0 ⊢ ∃a1. (0::nat) = 0 ∧ a1 = m"
                },
                {
                    "args": "exI, {P: λq::nat. ∃r. q = 0 ∧ r = m, a: (0::nat)}",
                    "id": "0.5",
                    "prevs": [
                        "0.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0 ⊢ ∃a1::nat. ∃r. a1 = 0 ∧ r = m"
                },
                {
                    "args": "if_P, ∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n",
                    "id": "0.6",
                    "prevs": [
                        "0.5",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ ∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n"
                },
                {
                    "args": "",
                    "id": "0.7",
                    "prevs": [
                        "0.0",
                        "0.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "divmod_exist, {m: m, n: n}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ ∃q. ∃r. m = q * n + r ∧ r < n"
                },
                {
                    "args": "if_not_P, ∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ ∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n"
                }
            ],
            "prop": "∃q. ∃r. if n = 0 then q = 0 ∧ r = m else m = q * n + r ∧ r < n",
            "steps": [
                {
                    "case": "n= 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "inst_exists_goal",
                    "s": "m"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divmod_exist"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "division_0",
            "prop": [
                "if n = 0 then ",
                "  m DIV n = 0 ∧ m MOD n = m",
                "else ",
                "  m = m DIV n * n + m MOD n ∧ m MOD n < n"
            ],
            "ty": "thm.ax",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "division",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "division_0, {m: m, n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ if n = 0 then m DIV n = 0 ∧ m MOD n = m else m = m DIV n * n + m MOD n ∧ m MOD n < n"
                },
                {
                    "args": "if_not_P",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(n = 0) ⊢ m = m DIV n * n + m MOD n ∧ m MOD n < n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ m = m DIV n * n + m MOD n ∧ m MOD n < n"
                }
            ],
            "prop": "¬(n = 0) ⟶ m = m DIV n * n + m MOD n ∧ m MOD n < n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "division_0"
                },
                {
                    "fact_ids": [
                        "1",
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_not_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "div_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "division_0, {m: n, n: (0::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ if (0::nat) = 0 then n DIV 0 = 0 ∧ n MOD 0 = n else n = n DIV 0 * 0 + n MOD 0 ∧ n MOD 0 < 0"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "if_P",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ n DIV 0 = 0 ∧ n MOD 0 = n"
                },
                {
                    "args": "conjD1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ n DIV 0 = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n DIV 0 = 0"
                }
            ],
            "prop": "n DIV 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_m": "n",
                    "param_n": "(0::nat)",
                    "theorem": "division_0"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal": "(0::nat) = 0",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mod_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "division_0, {m: n, n: (0::nat)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ if (0::nat) = 0 then n DIV 0 = 0 ∧ n MOD 0 = n else n = n DIV 0 * 0 + n MOD 0 ∧ n MOD 0 < 0"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "if_P",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ n DIV 0 = 0 ∧ n MOD 0 = n"
                },
                {
                    "args": "conjD2",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ n MOD 0 = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n MOD 0 = n"
                }
            ],
            "prop": "n MOD 0 = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_m": "n",
                    "param_n": "(0::nat)",
                    "theorem": "division_0"
                },
                {
                    "goal": "(0::nat) = 0",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "division_simp1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "nat_plus_def_1, 0 + m = m",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + m = m"
                },
                {
                    "args": "nat_times_def_1, 0 * 0 + m = m",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ 0 * 0 + m = m"
                },
                {
                    "args": "mod_zero, 0 * 0 + m MOD 0 = m",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ 0 * 0 + m MOD 0 = m"
                },
                {
                    "args": "div_zero, m DIV 0 * 0 + m MOD 0 = m",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ m DIV 0 * 0 + m MOD 0 = m"
                },
                {
                    "args": "m DIV n * n + m MOD n = m",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "division, {m: m}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ m = m DIV n * n + m MOD n ∧ m MOD n < n"
                },
                {
                    "args": "conjD1",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ m = m DIV n * n + m MOD n"
                },
                {
                    "args": "eq_sym_eq, m DIV n * n + m MOD n = m",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m DIV n * n + m MOD n = m"
                }
            ],
            "prop": "m DIV n * n + m MOD n = m",
            "steps": [
                {
                    "case": "n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "div_zero"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_zero"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "theorem": "division"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "division_simp2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "division_simp1, m DIV n * n + m MOD n = m",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m DIV n * n + m MOD n = m"
                },
                {
                    "args": "mult_comm, n * (m DIV n) + m MOD n = m",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n * (m DIV n) + m MOD n = m"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ n * (m DIV n) + m MOD n = m"
                }
            ],
            "prop": "n * (m DIV n) + m MOD n = m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "division_simp1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "eq_divmod",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m DIV p = n DIV p ∧ m MOD p = n MOD p ⟶ m = n"
                },
                {
                    "args": "m DIV p = n DIV p ∧ m MOD p = n MOD p",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ m DIV p = n DIV p ∧ m MOD p = n MOD p"
                },
                {
                    "args": "division_simp1, {m: m, n: p}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m DIV p * p + m MOD p = m"
                },
                {
                    "args": "division_simp1, {m: n, n: p}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n DIV p * p + n MOD p = n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.3",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ m = m DIV p * p + m MOD p"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.4",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ n = n DIV p * p + n MOD p"
                },
                {
                    "args": "conjD1",
                    "id": "0.5",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ m DIV p = n DIV p"
                },
                {
                    "args": "conjD2",
                    "id": "0.6",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ m MOD p = n MOD p"
                },
                {
                    "args": "n DIV p * p + m MOD p = n DIV p * p + n MOD p",
                    "id": "0.7",
                    "prevs": [
                        "0.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ n DIV p * p + m MOD p = n DIV p * p + n MOD p"
                },
                {
                    "args": "m DIV p * p + m MOD p = n DIV p * p + n MOD p",
                    "id": "0.8",
                    "prevs": [
                        "0.5",
                        "0.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ m DIV p * p + m MOD p = n DIV p * p + n MOD p"
                },
                {
                    "args": "m DIV p * p + m MOD p = n",
                    "id": "0.9",
                    "prevs": [
                        "0.4",
                        "0.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ m DIV p * p + m MOD p = n"
                },
                {
                    "args": "m = n",
                    "id": "0.10",
                    "prevs": [
                        "0.3",
                        "0.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "0.11",
                    "prevs": [
                        "0.0",
                        "0.10"
                    ],
                    "rule": "intros",
                    "th": "⊢ m DIV p = n DIV p ∧ m MOD p = n MOD p ⟶ m = n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = n ⟶ m DIV p = n DIV p ∧ m MOD p = n MOD p"
                },
                {
                    "args": "m = n",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "eq_refl, {x: n DIV p}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n DIV p = n DIV p"
                },
                {
                    "args": "eq_refl, {x: n MOD p}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n MOD p = n MOD p"
                },
                {
                    "args": "conjI",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = n ⊢ n DIV p = n DIV p ∧ n MOD p = n MOD p"
                },
                {
                    "args": "m DIV p = n DIV p ∧ m MOD p = n MOD p",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n ⊢ m DIV p = n DIV p ∧ m MOD p = n MOD p"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = n ⟶ m DIV p = n DIV p ∧ m MOD p = n MOD p"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m DIV p = n DIV p ∧ m MOD p = n MOD p ⟷ m = n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m DIV p = n DIV p ∧ m MOD p = n MOD p ⟷ m = n"
                }
            ],
            "prop": "m DIV p = n DIV p ∧ m MOD p = n MOD p ⟷ m = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "p",
                    "theorem": "division_simp1"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_forward_step",
                    "param_m": "n",
                    "param_n": "p",
                    "theorem": "division_simp1"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.4"
                    ],
                    "goal_id": "0.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.5"
                    ],
                    "goal_id": "0.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0.6"
                    ],
                    "goal_id": "0.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mod_lt_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m MOD n < n ⟶ ¬(n = 0)"
                },
                {
                    "args": "m MOD n < n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m MOD n < n ⊢ m MOD n < n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m MOD n < n ⊢ ¬¬(n = 0) ⟶ ¬(m MOD n < n)"
                },
                {
                    "args": "¬¬(n = 0)",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(n = 0) ⊢ ¬¬(n = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(n = 0) ⊢ n = 0"
                },
                {
                    "args": "false ⟶ false",
                    "id": "0.1.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬¬(n = 0), m MOD n < n ⊢ ¬false"
                },
                {
                    "args": "nat_less_def_1, ¬(m MOD 0 < 0)",
                    "id": "0.1.4",
                    "prevs": [
                        "0.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬¬(n = 0), m MOD n < n ⊢ ¬(m MOD 0 < 0)"
                },
                {
                    "args": "¬(m MOD n < n)",
                    "id": "0.1.5",
                    "prevs": [
                        "0.1.1",
                        "0.1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬¬(n = 0), m MOD n < n ⊢ ¬(m MOD n < n)"
                },
                {
                    "args": "",
                    "id": "0.1.6",
                    "prevs": [
                        "0.1.0",
                        "0.1.5"
                    ],
                    "rule": "intros",
                    "th": "m MOD n < n ⊢ ¬¬(n = 0) ⟶ ¬(m MOD n < n)"
                },
                {
                    "args": "contrapositive",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m MOD n < n ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m MOD n < n ⟶ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ m MOD n < n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "division, {m: m}",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ m = m DIV n * n + m MOD n ∧ m MOD n < n"
                },
                {
                    "args": "conjD2",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ m MOD n < n"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ m MOD n < n"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m MOD n < n ⟷ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m MOD n < n ⟷ ¬(n = 0)"
                }
            ],
            "prop": "m MOD n < n ⟷ ¬(n = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "0.1.1"
                    ],
                    "goal_id": "0.1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "goal_id": "0.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "theorem": "division"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mod_lt_eq_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ 0 < n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 0 < n"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 < n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ 0 < n ⟶ ¬(n = 0)"
                },
                {
                    "args": "0 < n",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < n ⊢ 0 < n"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "0 < n ⊢ ¬¬(n = 0) ⟶ n ≤ 0"
                },
                {
                    "args": "¬¬(n = 0)",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(n = 0) ⊢ ¬¬(n = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(n = 0) ⊢ n = 0"
                },
                {
                    "args": "nat_less_eq_def_1, n ≤ 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < n, ¬¬(n = 0) ⊢ n ≤ 0"
                },
                {
                    "args": "",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "intros",
                    "th": "0 < n ⊢ ¬¬(n = 0) ⟶ n ≤ 0"
                },
                {
                    "args": "not_lt, ¬¬(n = 0) ⟶ ¬(0 < n)",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "0 < n ⊢ ¬¬(n = 0) ⟶ ¬(0 < n)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "0 < n ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 < n ⟶ ¬(n = 0)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬(n = 0) ⟷ 0 < n"
                },
                {
                    "args": "mod_lt_eq, m MOD n < n ⟷ 0 < n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m MOD n < n ⟷ 0 < n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m MOD n < n ⟷ 0 < n"
                }
            ],
            "prop": "m MOD n < n ⟷ 0 < n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_lt_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_lt"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divmod_uniq_lemma",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m = q1 * n + r1",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = q1 * n + r1 ⊢ m = q1 * n + r1"
                },
                {
                    "args": "r1 < n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r1 < n ⊢ r1 < n"
                },
                {
                    "args": "m = q2 * n + r2",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = q2 * n + r2 ⊢ m = q2 * n + r2"
                },
                {
                    "args": "r2 < n",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r2 < n ⊢ r2 < n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n + r1 = q2 * n + r2"
                },
                {
                    "args": "le_cases, {m: q1, n: q2}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ q1 ≤ q2 ∨ q2 ≤ q1"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 ≤ q2 ⟶ r1 = r2"
                },
                {
                    "args": "q1 ≤ q2",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q1 ≤ q2 ⊢ q1 ≤ q2"
                },
                {
                    "args": "less_eq_exist",
                    "id": "6.1",
                    "prevs": [
                        "6.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q1 ≤ q2 ⊢ ∃p. q2 = q1 + p"
                },
                {
                    "args": "d, nat",
                    "id": "6.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "",
                    "id": "6.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 = q1 + 0 ⟶ r1 = r2"
                },
                {
                    "args": "q2 = q1 + 0",
                    "id": "6.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q2 = q1 + 0 ⊢ q2 = q1 + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "6.3.1",
                    "prevs": [
                        "6.3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q2 = q1 + 0 ⊢ q2 = q1"
                },
                {
                    "args": "",
                    "id": "6.3.2",
                    "prevs": [
                        "6.3.1",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "q2 = q1 + 0, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n + r1 = q1 * n + r2"
                },
                {
                    "args": "add_cancel_left",
                    "id": "6.3.3",
                    "prevs": [
                        "6.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "q2 = q1 + 0, m = q1 * n + r1, m = q2 * n + r2 ⊢ r1 = r2"
                },
                {
                    "args": "",
                    "id": "6.3.4",
                    "prevs": [
                        "6.3.0",
                        "6.3.3"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 = q1 + 0 ⟶ r1 = r2"
                },
                {
                    "args": "",
                    "id": "6.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, m = q1 * n + r1, m = q2 * n + r2 ⊢ ∀n. (q2 = q1 + n ⟶ r1 = r2) ⟶ q2 = q1 + Suc n ⟶ r1 = r2"
                },
                {
                    "args": "q2 = q1 + d ⟶ r1 = r2",
                    "id": "6.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q2 = q1 + d ⟶ r1 = r2 ⊢ q2 = q1 + d ⟶ r1 = r2"
                },
                {
                    "args": "q2 = q1 + Suc d",
                    "id": "6.4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q2 = q1 + Suc d ⊢ q2 = q1 + Suc d"
                },
                {
                    "args": "",
                    "id": "6.4.2",
                    "prevs": [
                        "6.4.1",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n + r1 = (q1 + Suc d) * n + r2"
                },
                {
                    "args": "distrib_r",
                    "id": "6.4.3",
                    "prevs": [
                        "6.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n + r1 = q1 * n + Suc d * n + r2"
                },
                {
                    "args": "add_assoc",
                    "id": "6.4.4",
                    "prevs": [
                        "6.4.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n + r1 = q1 * n + (Suc d * n + r2)"
                },
                {
                    "args": "add_cancel_left",
                    "id": "6.4.5",
                    "prevs": [
                        "6.4.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ r1 = Suc d * n + r2"
                },
                {
                    "args": "le_add, {m: Suc d * n, n: r2}",
                    "id": "6.4.6",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Suc d * n ≤ Suc d * n + r2"
                },
                {
                    "args": "Suc d * n ≤ r1",
                    "id": "6.4.7",
                    "prevs": [
                        "6.4.5",
                        "6.4.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2, q2 = q1 + d ⟶ r1 = r2 ⊢ Suc d * n ≤ r1"
                },
                {
                    "args": "nat_times_def_2",
                    "id": "6.4.8",
                    "prevs": [
                        "6.4.7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2, q2 = q1 + d ⟶ r1 = r2 ⊢ n + d * n ≤ r1"
                },
                {
                    "args": "r1 = r2",
                    "id": "6.4.9",
                    "prevs": [
                        "6.4.8",
                        "1"
                    ],
                    "rule": "z3",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, q2 = q1 + Suc d, m = q1 * n + r1, m = q2 * n + r2, q2 = q1 + d ⟶ r1 = r2 ⊢ r1 = r2"
                },
                {
                    "args": "",
                    "id": "6.4.10",
                    "prevs": [
                        "6.2",
                        "6.4.0",
                        "6.4.1",
                        "6.4.9"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, m = q1 * n + r1, m = q2 * n + r2 ⊢ ∀d. (q2 = q1 + d ⟶ r1 = r2) ⟶ q2 = q1 + Suc d ⟶ r1 = r2"
                },
                {
                    "args": "nat_induct, {P: λd. q2 = q1 + d ⟶ r1 = r2, x: d}",
                    "id": "6.5",
                    "prevs": [
                        "6.3",
                        "6.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "r1 < n, r2 < n, q1 ≤ q2, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 = q1 + d ⟶ r1 = r2"
                },
                {
                    "args": "∃p. q2 = q1 + p",
                    "id": "6.6",
                    "prevs": [
                        "6.0",
                        "6.1",
                        "6.2",
                        "6.5"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 ≤ q2 ⟶ r1 = r2"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 ≤ q1 ⟶ r1 = r2"
                },
                {
                    "args": "q2 ≤ q1",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q2 ≤ q1 ⊢ q2 ≤ q1"
                },
                {
                    "args": "less_eq_exist",
                    "id": "7.1",
                    "prevs": [
                        "7.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q2 ≤ q1 ⊢ ∃p. q1 = q2 + p"
                },
                {
                    "args": "d, nat",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 = q2 + 0 ⟶ r1 = r2"
                },
                {
                    "args": "q1 = q2 + 0",
                    "id": "7.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q1 = q2 + 0 ⊢ q1 = q2 + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "7.3.1",
                    "prevs": [
                        "7.3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q1 = q2 + 0 ⊢ q1 = q2"
                },
                {
                    "args": "",
                    "id": "7.3.2",
                    "prevs": [
                        "7.3.1",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "q1 = q2 + 0, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 * n + r1 = q2 * n + r2"
                },
                {
                    "args": "add_cancel_left",
                    "id": "7.3.3",
                    "prevs": [
                        "7.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "q1 = q2 + 0, m = q1 * n + r1, m = q2 * n + r2 ⊢ r1 = r2"
                },
                {
                    "args": "",
                    "id": "7.3.4",
                    "prevs": [
                        "7.3.0",
                        "7.3.3"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 = q2 + 0 ⟶ r1 = r2"
                },
                {
                    "args": "",
                    "id": "7.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, m = q1 * n + r1, m = q2 * n + r2 ⊢ ∀n. (q1 = q2 + n ⟶ r1 = r2) ⟶ q1 = q2 + Suc n ⟶ r1 = r2"
                },
                {
                    "args": "q1 = q2 + d ⟶ r1 = r2",
                    "id": "7.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q1 = q2 + d ⟶ r1 = r2 ⊢ q1 = q2 + d ⟶ r1 = r2"
                },
                {
                    "args": "q1 = q2 + Suc d",
                    "id": "7.4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "q1 = q2 + Suc d ⊢ q1 = q2 + Suc d"
                },
                {
                    "args": "",
                    "id": "7.4.2",
                    "prevs": [
                        "7.4.1",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ (q2 + Suc d) * n + r1 = q2 * n + r2"
                },
                {
                    "args": "distrib_r",
                    "id": "7.4.3",
                    "prevs": [
                        "7.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 * n + Suc d * n + r1 = q2 * n + r2"
                },
                {
                    "args": "add_assoc",
                    "id": "7.4.4",
                    "prevs": [
                        "7.4.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 * n + (Suc d * n + r1) = q2 * n + r2"
                },
                {
                    "args": "add_cancel_left",
                    "id": "7.4.5",
                    "prevs": [
                        "7.4.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ Suc d * n + r1 = r2"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "7.4.6",
                    "prevs": [
                        "7.4.5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2 ⊢ r2 = Suc d * n + r1"
                },
                {
                    "args": "le_add, {m: Suc d * n, n: r1}",
                    "id": "7.4.7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Suc d * n ≤ Suc d * n + r1"
                },
                {
                    "args": "Suc d * n ≤ r2",
                    "id": "7.4.8",
                    "prevs": [
                        "7.4.6",
                        "7.4.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2, q1 = q2 + d ⟶ r1 = r2 ⊢ Suc d * n ≤ r2"
                },
                {
                    "args": "nat_times_def_2",
                    "id": "7.4.9",
                    "prevs": [
                        "7.4.8"
                    ],
                    "rule": "rewrite_fact",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2, q1 = q2 + d ⟶ r1 = r2 ⊢ n + d * n ≤ r2"
                },
                {
                    "args": "r1 = r2",
                    "id": "7.4.10",
                    "prevs": [
                        "7.4.9",
                        "3"
                    ],
                    "rule": "z3",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, q1 = q2 + Suc d, m = q1 * n + r1, m = q2 * n + r2, q1 = q2 + d ⟶ r1 = r2 ⊢ r1 = r2"
                },
                {
                    "args": "",
                    "id": "7.4.11",
                    "prevs": [
                        "7.2",
                        "7.4.0",
                        "7.4.1",
                        "7.4.10"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, m = q1 * n + r1, m = q2 * n + r2 ⊢ ∀d. (q1 = q2 + d ⟶ r1 = r2) ⟶ q1 = q2 + Suc d ⟶ r1 = r2"
                },
                {
                    "args": "nat_induct, {P: λd. q1 = q2 + d ⟶ r1 = r2, x: d}",
                    "id": "7.5",
                    "prevs": [
                        "7.3",
                        "7.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "r1 < n, r2 < n, q2 ≤ q1, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 = q2 + d ⟶ r1 = r2"
                },
                {
                    "args": "∃p. q1 = q2 + p",
                    "id": "7.6",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.2",
                        "7.5"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q2 ≤ q1 ⟶ r1 = r2"
                },
                {
                    "args": "disjE",
                    "id": "8",
                    "prevs": [
                        "5",
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ r1 = r2"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8",
                        "4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n + r2 = q2 * n + r2"
                },
                {
                    "args": "add_cancel_right",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "apply_theorem",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 * n = q2 * n"
                },
                {
                    "args": "eq_mult_rcancel",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_fact",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ n = 0 ∨ q1 = q2"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ n = 0 ⟶ q1 = q2"
                },
                {
                    "args": "n = 0",
                    "id": "12.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "q1 = q2",
                    "id": "12.1",
                    "prevs": [
                        "12.0",
                        "1"
                    ],
                    "rule": "z3",
                    "th": "n = 0, r1 < n ⊢ q1 = q2"
                },
                {
                    "args": "",
                    "id": "12.2",
                    "prevs": [
                        "12.0",
                        "12.1"
                    ],
                    "rule": "intros",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ n = 0 ⟶ q1 = q2"
                },
                {
                    "args": "q1 = q2 ⟶ q1 = q2",
                    "id": "13",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ q1 = q2 ⟶ q1 = q2"
                },
                {
                    "args": "disjE",
                    "id": "14",
                    "prevs": [
                        "11",
                        "12",
                        "13"
                    ],
                    "rule": "apply_theorem",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 = q2"
                },
                {
                    "args": "conjI",
                    "id": "15",
                    "prevs": [
                        "14",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "r1 < n, r2 < n, m = q1 * n + r1, m = q2 * n + r2 ⊢ q1 = q2 ∧ r1 = r2"
                },
                {
                    "args": "",
                    "id": "16",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "15"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = q1 * n + r1 ⟶ r1 < n ⟶ m = q2 * n + r2 ⟶ r2 < n ⟶ q1 = q2 ∧ r1 = r2"
                }
            ],
            "prop": "m = q1 * n + r1 ⟶ r1 < n ⟶ m = q2 * n + r2 ⟶ r2 < n ⟶ q1 = q2 ∧ r1 = r2",
            "steps": [
                {
                    "goal": "r1 = r2",
                    "goal_id": "4",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0",
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "param_m": "q1",
                    "param_n": "q2",
                    "theorem": "le_cases"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.0"
                    ],
                    "goal_id": "6.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "6.1"
                    ],
                    "goal_id": "6.2",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "6.3"
                    ],
                    "goal_id": "6.4",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "6.3",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "d"
                },
                {
                    "goal_id": "6.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "6.3.0"
                    ],
                    "goal_id": "6.3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "6.3.1",
                        "4"
                    ],
                    "goal_id": "6.3.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "6.3.2"
                    ],
                    "goal_id": "6.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                },
                {
                    "goal_id": "6.4",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "6.4.1",
                        "4"
                    ],
                    "goal_id": "6.4.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "6.4.2"
                    ],
                    "goal_id": "6.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "distrib_r"
                },
                {
                    "fact_ids": [
                        "6.4.3"
                    ],
                    "goal_id": "6.4.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "fact_ids": [
                        "6.4.4"
                    ],
                    "goal_id": "6.4.5",
                    "method_name": "apply_forward_step",
                    "theorem": "add_cancel_left"
                },
                {
                    "fact_ids": [
                        "6.4.5"
                    ],
                    "goal": "Suc d * n <= r1",
                    "goal_id": "6.4.6",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "6.4.5"
                    ],
                    "goal_id": "6.4.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "6.4.6",
                    "method_name": "apply_backward_step",
                    "theorem": "le_add"
                },
                {
                    "fact_ids": [
                        "6.4.7"
                    ],
                    "goal_id": "6.4.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "6.4.8",
                        "1"
                    ],
                    "goal_id": "6.4.9",
                    "method_name": "z3"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.2",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "7.3"
                    ],
                    "goal_id": "7.4",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "d"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "7.3.0"
                    ],
                    "goal_id": "7.3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "7.3.1",
                        "4"
                    ],
                    "goal_id": "7.3.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "7.3.2"
                    ],
                    "goal_id": "7.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                },
                {
                    "goal_id": "7.4",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "7.4.1",
                        "4"
                    ],
                    "goal_id": "7.4.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "7.4.2"
                    ],
                    "goal_id": "7.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "distrib_r"
                },
                {
                    "fact_ids": [
                        "7.4.3"
                    ],
                    "goal_id": "7.4.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "fact_ids": [
                        "7.4.4"
                    ],
                    "goal_id": "7.4.5",
                    "method_name": "apply_forward_step",
                    "theorem": "add_cancel_left"
                },
                {
                    "goal": "Suc d * n <= r2",
                    "goal_id": "7.4.6",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "7.4.5"
                    ],
                    "goal_id": "7.4.6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "7.4.6"
                    ],
                    "goal_id": "7.4.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7.4.7",
                    "method_name": "apply_backward_step",
                    "theorem": "le_add"
                },
                {
                    "fact_ids": [
                        "7.4.8"
                    ],
                    "goal_id": "7.4.9",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "7.4.9",
                        "3"
                    ],
                    "goal_id": "7.4.10",
                    "method_name": "z3"
                },
                {
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "8",
                        "4"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "apply_forward_step",
                    "theorem": "add_cancel_right"
                },
                {
                    "fact_ids": [
                        "10"
                    ],
                    "goal_id": "11",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_mult_rcancel"
                },
                {
                    "fact_ids": [
                        "11"
                    ],
                    "goal_id": "12",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "12",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "12.0",
                        "1"
                    ],
                    "goal_id": "12.1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "q1": "nat",
                "q2": "nat",
                "r1": "nat",
                "r2": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divmod_uniq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m = q * n + r",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = q * n + r ⊢ m = q * n + r"
                },
                {
                    "args": "r < n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r < n ⊢ r < n"
                },
                {
                    "args": "division_simp1, m = m DIV n * n + m MOD n",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m = m DIV n * n + m MOD n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "z3",
                    "th": "r < n ⊢ ¬(n = 0)"
                },
                {
                    "args": "mod_lt_eq, m MOD n < n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "r < n, m = q * n + r ⊢ m MOD n < n"
                },
                {
                    "args": "divmod_uniq_lemma",
                    "id": "5",
                    "prevs": [
                        "2",
                        "4",
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, m = q * n + r ⊢ m DIV n = q ∧ m MOD n = r"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = q * n + r ⟶ r < n ⟶ m DIV n = q ∧ m MOD n = r"
                }
            ],
            "prop": "m = q * n + r ⟶ r < n ⟶ m DIV n = q ∧ m MOD n = r",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "divmod_uniq_lemma"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "division_simp1"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_lt_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "q": "nat",
                "r": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "mod_uniq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m = q * n + r",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = q * n + r ⊢ m = q * n + r"
                },
                {
                    "args": "r < n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r < n ⊢ r < n"
                },
                {
                    "args": "divmod_uniq",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, m = q * n + r ⊢ m DIV n = q ∧ m MOD n = r"
                },
                {
                    "args": "conjD2",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, m = q * n + r ⊢ m MOD n = r"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = q * n + r ⟶ r < n ⟶ m MOD n = r"
                }
            ],
            "prop": "m = q * n + r ⟶ r < n ⟶ m MOD n = r",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "divmod_uniq"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "q": "nat",
                "r": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "div_uniq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m = q * n + r",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = q * n + r ⊢ m = q * n + r"
                },
                {
                    "args": "r < n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r < n ⊢ r < n"
                },
                {
                    "args": "divmod_uniq",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, m = q * n + r ⊢ m DIV n = q ∧ m MOD n = r"
                },
                {
                    "args": "conjD1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, m = q * n + r ⊢ m DIV n = q"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = q * n + r ⟶ r < n ⟶ m DIV n = q"
                }
            ],
            "prop": "m = q * n + r ⟶ r < n ⟶ m DIV n = q",
            "steps": [
                {
                    "fact_ids": [
                        "0",
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "divmod_uniq"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "q": "nat",
                "r": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "div_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ 0 DIV n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "div_zero, 0 DIV 0 = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 DIV 0 = 0"
                },
                {
                    "args": "0 DIV n = 0",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ 0 DIV n = 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ 0 DIV n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ 0 DIV n = 0"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 = 0 * n + 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 0 = 0 * n + 0"
                },
                {
                    "args": "le_1_1",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 0 < n"
                },
                {
                    "args": "div_uniq",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 0 DIV n = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 DIV n = 0"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 DIV n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 DIV n = 0"
                }
            ],
            "prop": "0 DIV n = 0",
            "steps": [
                {
                    "case": "n=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "div_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "param_r": "(0::nat)",
                    "theorem": "div_uniq"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mod_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ 0 MOD n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "mod_zero, 0 MOD 0 = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 MOD 0 = 0"
                },
                {
                    "args": "0 MOD n = 0",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ 0 MOD n = 0"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ 0 MOD n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ 0 MOD n = 0"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "0 = 0 * n + 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 0 = 0 * n + 0"
                },
                {
                    "args": "le_1_1",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 0 < n"
                },
                {
                    "args": "mod_uniq",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 0 MOD n = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 0 MOD n = 0"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ 0 MOD n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ 0 MOD n = 0"
                }
            ],
            "prop": "0 MOD n = 0",
            "steps": [
                {
                    "case": "n=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "param_q": "(0::nat)",
                    "theorem": "mod_uniq"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "div_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(m = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "m * n = n * m + 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * n = n * m + 0"
                },
                {
                    "args": "le_1_1",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ 0 < m"
                },
                {
                    "args": "div_uniq",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ m * n DIV m = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ m * n DIV m = n"
                }
            ],
            "prop": "¬(m = 0) ⟶ m * n DIV m = n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "param_r": "(0::nat)",
                    "theorem": "div_uniq"
                },
                {
                    "goal_id": "1",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mod_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ m * n MOD m = 0"
                },
                {
                    "args": "m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "mod_0, 0 MOD 0 = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 MOD 0 = 0"
                },
                {
                    "args": "nat_times_def_1, 0 * n MOD 0 = 0",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0 ⊢ 0 * n MOD 0 = 0"
                },
                {
                    "args": "m * n MOD m = 0",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0 ⊢ m * n MOD m = 0"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ m * n MOD m = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m = 0) ⟶ m * n MOD m = 0"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "m * n = n * m + 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * n = n * m + 0"
                },
                {
                    "args": "le_1_1",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ 0 < m"
                },
                {
                    "args": "mod_uniq",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ m * n MOD m = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ m * n MOD m = 0"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m * n MOD m = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n MOD m = 0"
                }
            ],
            "prop": "m * n MOD m = 0",
            "steps": [
                {
                    "case": "m=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "param_q": "n",
                    "theorem": "mod_uniq"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "mod_lt",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m < n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "m = 0 * n + m",
                    "id": "1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m = 0 * n + m"
                },
                {
                    "args": "mod_uniq",
                    "id": "2",
                    "prevs": [
                        "1",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n ⊢ m MOD n = m"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < n ⟶ m MOD n = m"
                }
            ],
            "prop": "m < n ⟶ m MOD n = m",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "param_q": "(0::nat)",
                    "theorem": "mod_uniq"
                },
                {
                    "goal_id": "1",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mod_eq_self",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m MOD n = m ⟶ n = 0 ∨ m < n"
                },
                {
                    "args": "m MOD n = m",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m MOD n = m ⊢ m MOD n = m"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m MOD n = m ⊢ n = 0 ⟶ n = 0 ∨ m < n"
                },
                {
                    "args": "n = 0",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "disjI1, {A: n = 0, B: m < n}",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0 ⊢ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "m MOD n = m ⊢ n = 0 ⟶ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m MOD n = m ⊢ ¬(n = 0) ⟶ n = 0 ∨ m < n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.2.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m MOD n = m ⊢ m = m MOD n"
                },
                {
                    "args": "mod_lt_eq, m MOD n < n",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), m MOD n = m ⊢ m MOD n < n"
                },
                {
                    "args": "m < n",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.1",
                        "0.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), m MOD n = m ⊢ m < n"
                },
                {
                    "args": "disjI2, {A: n = 0, B: m < n}",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), m MOD n = m ⊢ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "0.2.5",
                    "prevs": [
                        "0.2.0",
                        "0.2.4"
                    ],
                    "rule": "intros",
                    "th": "m MOD n = m ⊢ ¬(n = 0) ⟶ n = 0 ∨ m < n"
                },
                {
                    "args": "classical_cases",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m MOD n = m ⊢ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m MOD n = m ⟶ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ∨ m < n ⟶ m MOD n = m"
                },
                {
                    "args": "n = 0 ∨ m < n",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ∨ m < n ⊢ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n = 0 ∨ m < n ⊢ n = 0 ⟶ m MOD n = m"
                },
                {
                    "args": "n = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "mod_zero, m MOD 0 = m",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m MOD 0 = m"
                },
                {
                    "args": "m MOD n = m",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, n = 0 ∨ m < n ⊢ m MOD n = m"
                },
                {
                    "args": "",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "intros",
                    "th": "n = 0 ∨ m < n ⊢ n = 0 ⟶ m MOD n = m"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n = 0 ∨ m < n ⊢ m < n ⟶ m MOD n = m"
                },
                {
                    "args": "m < n",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < n ⊢ m < n"
                },
                {
                    "args": "mod_lt",
                    "id": "1.2.1",
                    "prevs": [
                        "1.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < n, n = 0 ∨ m < n ⊢ m MOD n = m"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1"
                    ],
                    "rule": "intros",
                    "th": "n = 0 ∨ m < n ⊢ m < n ⟶ m MOD n = m"
                },
                {
                    "args": "disjE",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "n = 0 ∨ m < n ⊢ m MOD n = m"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ∨ m < n ⟶ m MOD n = m"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m MOD n = m ⟷ n = 0 ∨ m < n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m MOD n = m ⟷ n = 0 ∨ m < n"
                }
            ],
            "prop": "m MOD n = m ⟷ n = 0 ∨ m < n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "case": "n=0",
                    "goal_id": "0.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_lt_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_zero"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "mod_lt"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "mod_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "n < 2 * p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < 2 * p ⊢ n < 2 * p"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < 2 * p ⊢ n < p ⟶ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "n < p",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < p ⊢ n < p"
                },
                {
                    "args": "mod_lt",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < p, n < 2 * p ⊢ n MOD p = n"
                },
                {
                    "args": "if_P, n MOD p = (if n < p then n else n - p)",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n < p, n < 2 * p ⊢ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "n < 2 * p ⊢ n < p ⟶ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n < 2 * p ⊢ ¬(n < p) ⟶ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "¬(n < p)",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n < p) ⊢ ¬(n < p)"
                },
                {
                    "args": "n = p + (n - p)",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(n < p) ⊢ n = p + (n - p)"
                },
                {
                    "args": "mult_1_left, n = 1 * p + (n - p)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n < p), n < 2 * p ⊢ n = 1 * p + (n - p)"
                },
                {
                    "args": "n - p < p",
                    "id": "2.3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "n < 2 * p ⊢ n - p < p"
                },
                {
                    "args": "mod_uniq",
                    "id": "2.4",
                    "prevs": [
                        "2.2",
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n < p), n < 2 * p ⊢ n MOD p = n - p"
                },
                {
                    "args": "if_not_P, n MOD p = (if n < p then n else n - p)",
                    "id": "2.5",
                    "prevs": [
                        "2.4",
                        "2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n < p), n < 2 * p ⊢ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "n < 2 * p ⊢ ¬(n < p) ⟶ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "classical_cases",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "n < 2 * p ⊢ n MOD p = (if n < p then n else n - p)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n < 2 * p ⟶ n MOD p = (if n < p then n else n - p)"
                }
            ],
            "prop": "n < 2 * p ⟶ n MOD p = (if n < p then n else n - p)",
            "steps": [
                {
                    "case": "n < p",
                    "goal_id": "1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "mod_lt"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "param_q": "(1::nat)",
                    "theorem": "mod_uniq"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.3",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "mod_add_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m < p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m < p ⊢ m < p"
                },
                {
                    "args": "n < p",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n < p ⊢ n < p"
                },
                {
                    "args": "lt_add2",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < p, n < p ⊢ m + n < p + p"
                },
                {
                    "args": "mult_2, m + n < 2 * p",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m < p, n < p ⊢ m + n < 2 * p"
                },
                {
                    "args": "mod_cases",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "m < p, n < p ⊢ (m + n) MOD p = (if m + n < p then m + n else m + n - p)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m < p ⟶ n < p ⟶ (m + n) MOD p = (if m + n < p then m + n else m + n - p)"
                }
            ],
            "prop": "m < p ⟶ n < p ⟶ (m + n) MOD p = (if m + n < p then m + n else m + n - p)",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "mod_cases"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_2"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_add2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "mod_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m = n + q * p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n + q * p ⊢ m = n + q * p"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n + q * p ⊢ p = 0 ⟶ m MOD p = n MOD p"
                },
                {
                    "args": "p = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 0 ⊢ p = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [
                        "1.0",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "p = 0, m = n + q * p ⊢ m = n + q * 0"
                },
                {
                    "args": "mult_0_right",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "p = 0, m = n + q * p ⊢ m = n + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "p = 0, m = n + q * p ⊢ m = n"
                },
                {
                    "args": "m MOD p = n MOD p",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "p = 0, m = n + q * p ⊢ m MOD p = n MOD p"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "m = n + q * p ⊢ p = 0 ⟶ m MOD p = n MOD p"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n + q * p ⊢ ¬(p = 0) ⟶ m MOD p = n MOD p"
                },
                {
                    "args": "¬(p = 0)",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(p = 0) ⊢ ¬(p = 0)"
                },
                {
                    "args": "n + q * p = q * p + n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ n + q * p = q * p + n"
                },
                {
                    "args": "division_simp1, n + q * p = q * p + (n DIV p * p + n MOD p)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), m = n + q * p ⊢ n + q * p = q * p + (n DIV p * p + n MOD p)"
                },
                {
                    "args": "add_assoc, n + q * p = q * p + n DIV p * p + n MOD p",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), m = n + q * p ⊢ n + q * p = q * p + n DIV p * p + n MOD p"
                },
                {
                    "args": "distrib_r, n + q * p = (q + n DIV p) * p + n MOD p",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), m = n + q * p ⊢ n + q * p = (q + n DIV p) * p + n MOD p"
                },
                {
                    "args": "m = (q + n DIV p) * p + n MOD p",
                    "id": "2.5",
                    "prevs": [
                        "0",
                        "2.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(p = 0), m = n + q * p ⊢ m = (q + n DIV p) * p + n MOD p"
                },
                {
                    "args": "mod_lt_eq, n MOD p < p",
                    "id": "2.6",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), m = n + q * p ⊢ n MOD p < p"
                },
                {
                    "args": "mod_uniq",
                    "id": "2.7",
                    "prevs": [
                        "2.5",
                        "2.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(p = 0), m = n + q * p ⊢ m MOD p = n MOD p"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "m = n + q * p ⊢ ¬(p = 0) ⟶ m MOD p = n MOD p"
                },
                {
                    "args": "classical_cases",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = n + q * p ⊢ m MOD p = n MOD p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = n + q * p ⟶ m MOD p = n MOD p"
                }
            ],
            "prop": "m = n + q * p ⟶ m MOD p = n MOD p",
            "steps": [
                {
                    "case": "p=0",
                    "goal_id": "1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "param_q": "q + n DIV p",
                    "theorem": "mod_uniq"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_r"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "division_simp1"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "2.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mod_lt_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "div_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ m DIV n ≤ m"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "le_0, {n: m}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ m"
                },
                {
                    "args": "div_zero, m DIV 0 ≤ m",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ m DIV 0 ≤ m"
                },
                {
                    "args": "m DIV n ≤ m",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ m DIV n ≤ m"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ m DIV n ≤ m"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ m DIV n ≤ m"
                },
                {
                    "args": "division, {m: m}",
                    "id": "1.0",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ m = m DIV n * n + m MOD n ∧ m MOD n < n"
                },
                {
                    "args": "conjD1",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ m = m DIV n * n + m MOD n"
                },
                {
                    "args": "division_simp1, (m DIV n * n + m MOD n) DIV n = m DIV n",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (m DIV n * n + m MOD n) DIV n = m DIV n"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ m DIV 0 ≤ m DIV 0 * 0 + m MOD 0"
                },
                {
                    "args": "¬((0::nat) = 0)",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "1.3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "negE_gen, {A: (0::nat) = 0, C: m DIV 0 ≤ m DIV 0 * 0 + m MOD 0}",
                    "id": "1.3.2",
                    "prevs": [
                        "1.3.0",
                        "1.3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬((0::nat) = 0) ⊢ m DIV 0 ≤ m DIV 0 * 0 + m MOD 0"
                },
                {
                    "args": "",
                    "id": "1.3.3",
                    "prevs": [
                        "1.3.0",
                        "1.3.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ m DIV 0 ≤ m DIV 0 * 0 + m MOD 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n) ⟶ ¬(Suc n = 0) ⟶ m DIV Suc n ≤ m DIV Suc n * Suc n + m MOD Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n",
                    "id": "1.4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n ⊢ ¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n"
                },
                {
                    "args": "¬(Suc n = 0)",
                    "id": "1.4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "le_add, {m: m DIV Suc n, n: m DIV Suc n * n + m MOD Suc n}",
                    "id": "1.4.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m DIV Suc n ≤ m DIV Suc n + (m DIV Suc n * n + m MOD Suc n)"
                },
                {
                    "args": "add_assoc, m DIV Suc n ≤ m DIV Suc n + m DIV Suc n * n + m MOD Suc n",
                    "id": "1.4.4",
                    "prevs": [
                        "1.4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n ⊢ m DIV Suc n ≤ m DIV Suc n + m DIV Suc n * n + m MOD Suc n"
                },
                {
                    "args": "mult_Suc_right, m DIV Suc n ≤ m DIV Suc n * Suc n + m MOD Suc n",
                    "id": "1.4.5",
                    "prevs": [
                        "1.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(Suc n = 0), ¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n ⊢ m DIV Suc n ≤ m DIV Suc n * Suc n + m MOD Suc n"
                },
                {
                    "args": "",
                    "id": "1.4.6",
                    "prevs": [
                        "1.4.0",
                        "1.4.1",
                        "1.4.2",
                        "1.4.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n) ⟶ ¬(Suc n = 0) ⟶ m DIV Suc n ≤ m DIV Suc n * Suc n + m MOD Suc n"
                },
                {
                    "args": "nat_induct, {P: λn. ¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n, x: n}",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(n = 0) ⟶ m DIV n ≤ m DIV n * n + m MOD n"
                },
                {
                    "args": "(m DIV n * n + m MOD n) DIV n ≤ m DIV n * n + m MOD n",
                    "id": "1.6",
                    "prevs": [
                        "1.2",
                        "1.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ (m DIV n * n + m MOD n) DIV n ≤ m DIV n * n + m MOD n"
                },
                {
                    "args": "m DIV n ≤ m",
                    "id": "1.7",
                    "prevs": [
                        "1.1",
                        "1.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0) ⊢ m DIV n ≤ m"
                },
                {
                    "args": "",
                    "id": "1.8",
                    "prevs": [
                        "1.0",
                        "1.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ m DIV n ≤ m"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m DIV n ≤ m"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m DIV n ≤ m"
                }
            ],
            "prop": "m DIV n ≤ m",
            "steps": [
                {
                    "case": "n=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "div_zero"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "theorem": "division"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "(m DIV n * n + m MOD n) DIV n = m DIV n",
                    "goal_id": "1.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "division_simp1"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.4",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.3.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.4.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "goal_id": "1.4.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "goal_id": "1.4.3",
                    "method_name": "apply_backward_step",
                    "theorem": "le_add"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        }
    ],
    "description": "Natural numbers",
    "imports": [
        "logic"
    ],
    "name": "nat"
}