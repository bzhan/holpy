[
    {
        "instructions": [
            "Select S1 as goal, use Ctrl+B with conjI",
            "Select S1 as goal and A1 as fact, use Ctrl+B with conjD2.",
            "Select S2 as goal and A1 as fact, use Ctrl+B with conjD1."
        ],
        "name": "conj_comm",
        "ty": "thm",
        "num_gaps": 0,
        "vars": {
            "B": "bool",
            "A": "bool"
        },
        "prop": "A & B --> B & A",
        "proof": [
            {
                "prevs": [],
                "args": "A ∧ B",
                "id": "A1",
                "th": "A ∧ B ⊢ A ∧ B",
                "rule": "assume"
            },
            {
                "prevs": [
                    "A1"
                ],
                "args": "conjD2, {A: A, B: B}",
                "id": "S1",
                "th": "A ∧ B ⊢ B",
                "rule": "apply_theorem_for"
            },
            {
                "prevs": [
                    "A1"
                ],
                "args": "conjD1, {A: A, B: B}",
                "id": "S2",
                "th": "A ∧ B ⊢ A",
                "rule": "apply_theorem_for"
            },
            {
                "prevs": [
                    "S1",
                    "S2"
                ],
                "args": "conjI, {A: B, B: A}",
                "id": "S3",
                "th": "A ∧ B ⊢ B ∧ A",
                "rule": "apply_theorem_for"
            },
            {
                "prevs": [
                    "S3"
                ],
                "args": "A ∧ B",
                "id": "S4",
                "th": "⊢ A ∧ B ⟶ B ∧ A",
                "rule": "implies_intr"
            }
        ]
    },
    {
        "instructions": [
            "Select S1 as goal and A1 as fact, use Ctrl+B with disjE.",
            "Select S1 as goal, use Ctrl+I.",
            "Select S2 as goal and S1 as fact, use Ctrl+B with disjI2.",
            "Select S4 as goal, use Ctrl+I.",
            "Select S5 as goal and S4 as fact, use Ctrl+B with disjI1."
        ],
        "name": "disj_comm",
        "ty": "thm",
        "num_gaps": 2,
        "vars": {
            "B": "bool",
            "A": "bool"
        },
        "prop": "A | B --> B | A",
        "proof": [
            {
                "prevs": [],
                "args": "A ∨ B",
                "id": "A1",
                "th": "A ∨ B ⊢ A ∨ B",
                "rule": "assume"
            },
            {
                "prevs": [],
                "args": "",
                "id": "S1",
                "th": "A ∨ B ⊢ A ⟶ B ∨ A",
                "rule": "sorry"
            },
            {
                "prevs": [],
                "args": "",
                "id": "S2",
                "th": "A ∨ B ⊢ B ⟶ B ∨ A",
                "rule": "sorry"
            },
            {
                "prevs": [
                    "A1",
                    "S1",
                    "S2"
                ],
                "args": "disjE, {A: A, B: B, C: B ∨ A}",
                "id": "S3",
                "th": "A ∨ B ⊢ B ∨ A",
                "rule": "apply_theorem_for"
            },
            {
                "prevs": [
                    "S3"
                ],
                "args": "A ∨ B",
                "id": "S4",
                "th": "⊢ A ∨ B ⟶ B ∨ A",
                "rule": "implies_intr"
            }
        ]
    },
    {
        "instructions": [
            "Add line 'theorem classical' after A1.",
            "Select S2 as goal and S1 as fact, use Ctrl+B with disjE.",
            "Select S2 as goal, use Ctrl+I.",
            "Select S4 as goal, use Ctrl+I.",
            "Select S5 as goal, use Ctrl+B with falseE.",
            "Select S5 as goal and A1 as fact, use Ctrl+B with negE."
        ],
        "vars": {
            "A": "bool"
        },
        "ty": "thm",
        "prop": "~~A --> A",
        "name": "double_neg"
    },
    {
        "ty": "thm",
        "instructions": [
            "Select S1 as goal and A1 as fact, use Ctrl+B with exE.",
            "Select S1 as goal, use Ctrl+I with x as variable name.",
            "Select S2 as goal, use Ctrl+B with conjI.",
            "Add line 'apply_theorem conjD1 from S1' after S1.",
            "Select S3 as goal and S2 as fact, use Ctrl+B with exI.",
            "Add line 'apply_theorem conjD2 from S1' after S3.",
            "Select S5 as goal and S4 as fact, use Ctrl+B with exI."
        ],
        "vars": {
            "B": "'a => bool",
            "x": "'a",
            "A": "'a => bool"
        },
        "name": "ex_conj_distrib",
        "prop": "(?x::'a. A x & B x) --> (?x::'a. A x) & (?x::'a. B x)"
    },
    {
        "instructions": [
            "Select S1 as goal, use Ctrl+B with conjI.",
            "Select S1 as goal, use Ctrl+I with x as variable name.",
            "Add line 'forall_elim x from A1' after A1.",
            "Select S2 as goal and S1 as fact, use Ctrl+B with conjD1.",
            "Select S4 as goal, use Ctrl+I with x as variable name.",
            "Select S4 as goal and S1 as fact, use Ctrl+B with conjD2."
        ],
        "vars": {
            "B": "'a => bool",
            "x": "'a",
            "A": "'a => bool"
        },
        "ty": "thm",
        "prop": "(!x::'a. A x & B x) --> (!x::'a. A x) & (!x::'a. B x)",
        "name": "all_conj_distrib"
    },
    {
        "ty": "thm",
        "instructions": [
            "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
            "Select S1 as goal, use Ctrl+R with plus_def_1.",
            "Set sorry on S1 to reflexive 0.",
            "Select S3 as goal, use Ctrl+I with n as variable name.",
            "Select S4 as goal, use Ctrl+R with plus_def_2.",
            "Set sorry on S4 to arg_combination Suc from S3."
        ],
        "vars": {
            "n": "nat"
        },
        "name": "nat.add_0_right",
        "prop": "n + 0 = n"
    },
    {
        "instructions": [
            "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
            "Select S1 as goal, use Ctrl+R with times_def_1.",
            "Set sorry on S1 to reflexive 0.",
            "Select S3 as goal, use Ctrl+I with n as variable name.",
            "Select S4 as goal, use Ctrl+R with times_def_2.",
            "Select S4 as goal, use Ctrl+R with plus_def_1"
        ],
        "name": "nat.mult_0_right",
        "ty": "thm",
        "num_gaps": 1,
        "vars": {
            "n": "nat"
        },
        "prop": "n * 0 = 0",
        "proof": [
            {
                "prevs": [],
                "args": "",
                "id": "S1",
                "th": "⊢ n * 0 = 0",
                "rule": "sorry"
            }
        ]
    },
    {
        "vars": {
            "B": "bool",
            "C": "bool",
            "A": "bool"
        },
        "prop": "A & (B | C) --> (A & B) | (A & C)",
        "ty": "thm",
        "name": "conj_disj_distribL1"
    },
    {
        "vars": {
            "B": "bool",
            "C": "bool",
            "A": "bool"
        },
        "prop": "(A & B) | (A & C) --> A & (B | C)",
        "ty": "thm",
        "name": "conj_disj_distribL1"
    },
    {
        "ty": "thm",
        "instructions": [
            "Select S1 as goal, choose 'apply induction' from menu, then enter 'list_induct,xs'.",
            "Select S1 as goal, use Ctrl+R with append_def_1.",
            "Set sorry on S1 to reflexive nil.",
            "Select S3 as goal, use Ctrl+I with x,xs as variable name.",
            "Select S4 as goal, use Ctrl+R with append_def_2.",
            "Set sorry on S4 to arg_combination cons x from S3."
        ],
        "vars": {
            "xs": "'a list",
            "x": "'a"
        },
        "name": "list.append_right_neutral",
        "prop": "xs @ nil = xs"
    },
    {
        "instructions": [
            "Select S1 as goal, choose 'apply induction' from menu, then enter 'list_induct,xs'.",
            "Select S1 as goal, use Ctrl+R with append_def_1.",
            "Set sorry on S1 to reflexive ys @ zs.",
            "Select S3 as goal, use Ctrl+I with x,xs as variable name.",
            "Select S4 as goal, use Ctrl+R with append_def_2.",
            "Select S4 as goal, use Ctrl+R with append_def_2.",
            "Set sorry on S4 to arg_combination cons x from S3."
        ],
        "vars": {
            "ys": "'a list",
            "zs": "'a list",
            "xs": "'a list",
            "x": "'a"
        },
        "ty": "thm",
        "prop": "(xs @ ys) @ zs = xs @ ys @ zs",
        "name": "list.append_assoc"
    }
]