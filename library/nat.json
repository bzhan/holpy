{
    "content": [
        {
            "args": [],
            "constrs": [
                {
                    "args": [],
                    "name": "zero",
                    "type": "nat"
                },
                {
                    "args": [
                        "n"
                    ],
                    "name": "Suc",
                    "type": "nat => nat"
                }
            ],
            "name": "nat",
            "ty": "type.ind"
        },
        {
            "ascii_op": "+",
            "name": "plus",
            "rules": [
                {
                    "prop": "0 + n = n",
                    "vars": {
                        "n": "nat"
                    }
                },
                {
                    "prop": "Suc m + n = Suc (m + n)",
                    "vars": {
                        "m": "nat",
                        "n": "nat"
                    }
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "ascii_op": "*",
            "name": "times",
            "rules": [
                {
                    "prop": "0 * n = 0",
                    "vars": {
                        "n": "nat"
                    }
                },
                {
                    "prop": "Suc m * n = n + m * n",
                    "vars": {
                        "m": "nat",
                        "n": "nat"
                    }
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
                "Select S1 as goal, use Ctrl+R with plus_def_1.",
                "Set sorry on S1 to reflexive 0.",
                "Select S3 as goal, use Ctrl+I with n as variable name.",
                "Select S4 as goal, use Ctrl+R with plus_def_2.",
                "Set sorry on S4 to arg_combination Suc from S3."
            ],
            "name": "nat.add_0_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "0",
                    "id": "S1",
                    "prevs": [],
                    "rule": "reflexive",
                    "th": "⊢ 0 = 0"
                },
                {
                    "args": "plus_def_1, 0 + 0 = 0",
                    "id": "S2",
                    "prevs": [
                        "S1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + 0 = 0"
                },
                {
                    "args": "n + 0 = n",
                    "id": "S3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + 0 = n ⊢ n + 0 = n"
                },
                {
                    "args": "Suc",
                    "id": "S4",
                    "prevs": [
                        "S3"
                    ],
                    "rule": "arg_combination",
                    "th": "n + 0 = n ⊢ Suc (n + 0) = Suc n"
                },
                {
                    "args": "plus_def_2, Suc n + 0 = Suc n",
                    "id": "S5",
                    "prevs": [
                        "S4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + 0 = n ⊢ Suc n + 0 = Suc n"
                },
                {
                    "args": "n + 0 = n",
                    "id": "S6",
                    "prevs": [
                        "S5"
                    ],
                    "rule": "implies_intr",
                    "th": "⊢ n + 0 = n ⟶ Suc n + 0 = Suc n"
                },
                {
                    "args": "n",
                    "id": "S7",
                    "prevs": [
                        "S6"
                    ],
                    "rule": "forall_intr",
                    "th": "⊢ ∀n::nat. n + 0 = n ⟶ Suc n + 0 = Suc n"
                },
                {
                    "args": "nat_induct, {P: λn::nat. n + 0 = n, x: n}",
                    "id": "S8",
                    "prevs": [
                        "S2",
                        "S7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n + 0 = n"
                }
            ],
            "prop": "n + 0 = n",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "instructions": [
                "Select S1 as goal, choose 'apply induction' from menu, then enter 'nat_induct,n'.",
                "Select S1 as goal, use Ctrl+R with times_def_1.",
                "Set sorry on S1 to reflexive 0.",
                "Select S3 as goal, use Ctrl+I with n as variable name.",
                "Select S4 as goal, use Ctrl+R with times_def_2.",
                "Select S4 as goal, use Ctrl+R with plus_def_1"
            ],
            "name": "nat.mult_0_right",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "S1",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ n * 0 = 0"
                }
            ],
            "prop": "n * 0 = 0",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        }
    ],
    "imports": [
        "logic"
    ],
    "name": "nat"
}