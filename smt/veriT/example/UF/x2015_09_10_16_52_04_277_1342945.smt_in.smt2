(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Nat$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort N_list_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort N_N_list_fun$ 0)
(declare-sort N_list_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_N_bool_fun_fun$ 0)
(declare-sort N_N_list_list_fun$ 0)
(declare-sort N_list_N_list_fun$ 0)
(declare-sort N_list_list_bool_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort T_dtree_sum_list_set$ 0)
(declare-sort N_N_list_bool_fun_fun$ 0)
(declare-sort N_list_N_bool_fun_fun$ 0)
(declare-sort N_T_dtree_sum_list_fun$ 0)
(declare-sort N_list_N_list_list_fun$ 0)
(declare-sort N_list_list_N_list_fun$ 0)
(declare-sort T_dtree_sum_N_list_fun$ 0)
(declare-sort N_N_list_N_list_fun_fun$ 0)
(declare-sort T_dtree_sum_list_bool_fun$ 0)
(declare-sort N_T_dtree_sum_bool_fun_fun$ 0)
(declare-sort N_list_N_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_N_bool_fun_fun$ 0)
(declare-sort N_list_T_dtree_sum_list_fun$ 0)
(declare-sort N_list_list_N_list_list_fun$ 0)
(declare-sort T_dtree_sum_N_list_list_fun$ 0)
(declare-sort T_dtree_sum_list_N_list_fun$ 0)
(declare-sort N_list_N_list_N_list_fun_fun$ 0)
(declare-sort N_list_N_list_list_bool_fun_fun$ 0)
(declare-sort N_list_T_dtree_sum_bool_fun_fun$ 0)
(declare-sort N_list_list_N_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_N_list_bool_fun_fun$ 0)
(declare-sort N_list_list_T_dtree_sum_list_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_list_fun$ 0)
(declare-sort T_dtree_sum_list_N_list_list_fun$ 0)
(declare-sort N_list_T_dtree_sum_list_bool_fun_fun$ 0)
(declare-sort N_list_list_N_list_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_N_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_T_dtree_sum_list_fun$ 0)
(declare-sort N_list_list_T_dtree_sum_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_N_list_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$ 0)
(declare-sort N_list$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort T_dtree_sum_list$ 0)
(declare-sort N_list_list$ 0)
(declare-sort N_list_list_list$ 0)
(declare-sort T_dtree_sum_list_list$ 0)
(declare-fun nil$ () N_list$)
(declare-fun hd$ (N_list$) N$)
(declare-fun tl$ (N_list$) N_list$)
(declare-fun cons$ (N$ N_list$) N_list$)
(declare-fun projl$ (T_dtree_sum$) T$)
(declare-fun inl$ (T$) T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$) Dtree$)
(declare-fun inr$ (Dtree$) T_dtree_sum$)
(declare-fun nil$a () T_dtree_sum_list$)
(declare-fun hd$a (T_dtree_sum_list$) T_dtree_sum$)
(declare-fun tl$a (T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun cons$a (T_dtree_sum$ T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun nil$b () N_list_list$)
(declare-fun hd$b (N_list_list$) N_list$)
(declare-fun tl$b (N_list_list$) N_list_list$)
(declare-fun cons$b (N_list$ N_list_list$) N_list_list$)
(declare-fun nil$c () N_list_list_list$)
(declare-fun hd$c (N_list_list_list$) N_list_list$)
(declare-fun tl$c (N_list_list_list$) N_list_list_list$)
(declare-fun cons$c (N_list_list$ N_list_list_list$) N_list_list_list$)
(declare-fun nil$d () T_dtree_sum_list_list$)
(declare-fun hd$d (T_dtree_sum_list_list$) T_dtree_sum_list$)
(declare-fun tl$d (T_dtree_sum_list_list$) T_dtree_sum_list_list$)
(declare-fun cons$d (T_dtree_sum_list$ T_dtree_sum_list_list$) T_dtree_sum_list_list$)
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun uu$ (N_set$) N_bool_fun$)
(declare-fun map$ (N_N_fun$) N_list_N_list_fun$)
(declare-fun nl1$ () N_list$)
(declare-fun nl2$ () N_list$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun rev$ (N_list$) N_list$)
(declare-fun uua$ (N_list_set$) N_list_bool_fun$)
(declare-fun uub$ (T_dtree_sum_list_set$) T_dtree_sum_list_bool_fun$)
(declare-fun uuc$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun uud$ () N_N_list_N_list_fun_fun$)
(declare-fun bind$ (N_list$ N_T_dtree_sum_list_fun$) T_dtree_sum_list$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun fold$ (N_N_list_N_list_fun_fun$) N_list_N_list_N_list_fun_fun$)
(declare-fun last$ (N_list$) N$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun maps$ (N_T_dtree_sum_list_fun$) N_list_T_dtree_sum_list_fun$)
(declare-fun path$ (N_dtree_fun$) N_list_bool_fun$)
(declare-fun size$ (N_list$) Nat$)
(declare-fun succ$ (T_dtree_sum_list_set$ T_dtree_sum_list$) T_dtree_sum_set$)
(declare-fun zero$ () Nat$)
(declare-fun bind$a (N_list_list$ N_list_N_list_fun$) N_list$)
(declare-fun bind$b (N_list_list$ N_list_T_dtree_sum_list_fun$) T_dtree_sum_list$)
(declare-fun bind$c (T_dtree_sum_list$ T_dtree_sum_N_list_fun$) N_list$)
(declare-fun bind$d (T_dtree_sum_list$ T_dtree_sum_T_dtree_sum_list_fun$) T_dtree_sum_list$)
(declare-fun bind$e (N_list$ N_N_list_fun$) N_list$)
(declare-fun bind$f (N_list$ N_N_list_list_fun$) N_list_list$)
(declare-fun bind$g (N_list_list$ N_list_N_list_list_fun$) N_list_list$)
(declare-fun bind$h (T_dtree_sum_list$ T_dtree_sum_N_list_list_fun$) N_list_list$)
(declare-fun last$a (N_list_list$) N_list$)
(declare-fun last$b (T_dtree_sum_list$) T_dtree_sum$)
(declare-fun maps$a (N_list_N_list_fun$) N_list_list_N_list_fun$)
(declare-fun maps$b (N_list_T_dtree_sum_list_fun$) N_list_list_T_dtree_sum_list_fun$)
(declare-fun maps$c (T_dtree_sum_N_list_fun$) T_dtree_sum_list_N_list_fun$)
(declare-fun maps$d (T_dtree_sum_T_dtree_sum_list_fun$) T_dtree_sum_list_T_dtree_sum_list_fun$)
(declare-fun maps$e (N_N_list_fun$) N_list_N_list_fun$)
(declare-fun maps$f (N_N_list_list_fun$) N_list_N_list_list_fun$)
(declare-fun maps$g (N_list_N_list_list_fun$) N_list_list_N_list_list_fun$)
(declare-fun maps$h (T_dtree_sum_N_list_list_fun$) T_dtree_sum_list_N_list_list_fun$)
(declare-fun shift$ (T_dtree_sum_list_set$ T_dtree_sum$) T_dtree_sum_list_set$)
(declare-fun succ$a (N_list_set$ N_list$) N_set$)
(declare-fun append$ (N_list$) N_list_N_list_fun$)
(declare-fun insert$ (N_list$) N_list_list_N_list_list_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun shift$a (N_list_set$ N$) N_list_set$)
(declare-fun splice$ (N_list$) N_list_N_list_fun$)
(declare-fun append$a (T_dtree_sum_list$) T_dtree_sum_list_T_dtree_sum_list_fun$)
(declare-fun append$b (N_list_list$) N_list_list_N_list_list_fun$)
(declare-fun butlast$ (N_list_list$) N_list_list$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun fun_app$ (N_list_N_list_fun$ N_list$) N_list$)
(declare-fun insert$a (T_dtree_sum$) T_dtree_sum_list_T_dtree_sum_list_fun$)
(declare-fun insert$b (N$) N_list_N_list_fun$)
(declare-fun member$a (T_dtree_sum_list$ T_dtree_sum_list_set$) Bool)
(declare-fun member$b (N_list$ N_list_set$) Bool)
(declare-fun member$c (N$ N_set$) Bool)
(declare-fun member$d (N_list$) N_bool_fun$)
(declare-fun regular$ (Dtree$) Bool)
(declare-fun rotate1$ (N_list_list$) N_list_list$)
(declare-fun butlast$a (T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun butlast$b (N_list$) N_list$)
(declare-fun collect$a (N_bool_fun$) N_set$)
(declare-fun collect$b (N_list_bool_fun$) N_list_set$)
(declare-fun collect$c (T_dtree_sum_list_bool_fun$) T_dtree_sum_list_set$)
(declare-fun fun_app$a (N_N_list_N_list_fun_fun$ N$) N_list_N_list_fun$)
(declare-fun fun_app$b (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$c (T_dtree_sum_list_bool_fun$ T_dtree_sum_list$) Bool)
(declare-fun fun_app$d (N_list_bool_fun$ N_list$) Bool)
(declare-fun fun_app$e (N_bool_fun$ N$) Bool)
(declare-fun fun_app$f (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$g (T_dtree_sum_list_T_dtree_sum_list_fun$ T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun fun_app$h (N_list_list_N_list_list_fun$ N_list_list$) N_list_list$)
(declare-fun fun_app$i (N_list_list_bool_fun$ N_list_list$) Bool)
(declare-fun fun_app$j (N_list_N_list_list_bool_fun_fun$ N_list$) N_list_list_bool_fun$)
(declare-fun fun_app$k (N_list_T_dtree_sum_list_bool_fun_fun$ N_list$) T_dtree_sum_list_bool_fun$)
(declare-fun fun_app$l (N_list_list_N_list_bool_fun_fun$ N_list_list$) N_list_bool_fun$)
(declare-fun fun_app$m (N_list_list_N_list_list_bool_fun_fun$ N_list_list$) N_list_list_bool_fun$)
(declare-fun fun_app$n (N_list_list_T_dtree_sum_list_bool_fun_fun$ N_list_list$) T_dtree_sum_list_bool_fun$)
(declare-fun fun_app$o (T_dtree_sum_list_N_list_bool_fun_fun$ T_dtree_sum_list$) N_list_bool_fun$)
(declare-fun fun_app$p (T_dtree_sum_list_N_list_list_bool_fun_fun$ T_dtree_sum_list$) N_list_list_bool_fun$)
(declare-fun fun_app$q (T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$ T_dtree_sum_list$) T_dtree_sum_list_bool_fun$)
(declare-fun fun_app$r (N_list_N_list_bool_fun_fun$ N_list$) N_list_bool_fun$)
(declare-fun fun_app$s (N_T_dtree_sum_list_fun$ N$) T_dtree_sum_list$)
(declare-fun fun_app$t (N_list_T_dtree_sum_list_fun$ N_list$) T_dtree_sum_list$)
(declare-fun fun_app$u (T_dtree_sum_N_list_fun$ T_dtree_sum$) N_list$)
(declare-fun fun_app$v (T_dtree_sum_T_dtree_sum_list_fun$ T_dtree_sum$) T_dtree_sum_list$)
(declare-fun fun_app$w (N_N_list_fun$ N$) N_list$)
(declare-fun fun_app$x (N_list_list_N_list_fun$ N_list_list$) N_list$)
(declare-fun fun_app$y (N_list_list_T_dtree_sum_list_fun$ N_list_list$) T_dtree_sum_list$)
(declare-fun fun_app$z (T_dtree_sum_list_N_list_fun$ T_dtree_sum_list$) N_list$)
(declare-fun list_ex1$ (N_list_bool_fun$) N_list_list_bool_fun$)
(declare-fun listrelp$ (N_N_list_bool_fun_fun$) N_list_N_list_list_bool_fun_fun$)
(declare-fun rotate1$a (T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun rotate1$b (N_list$) N_list$)
(declare-fun sublists$ (N_list_list$) N_list_list_list$)
(declare-fun fun_app$aa (N_list_N_list_list_fun$ N_list$) N_list_list$)
(declare-fun fun_app$ab (T_dtree_sum_list_N_list_list_fun$ T_dtree_sum_list$) N_list_list$)
(declare-fun fun_app$ac (N_N_list_bool_fun_fun$ N$) N_list_bool_fun$)
(declare-fun fun_app$ad (N_T_dtree_sum_bool_fun_fun$ N$) T_dtree_sum_bool_fun$)
(declare-fun fun_app$ae (N_list_N_bool_fun_fun$ N_list$) N_bool_fun$)
(declare-fun fun_app$af (N_list_T_dtree_sum_bool_fun_fun$ N_list$) T_dtree_sum_bool_fun$)
(declare-fun fun_app$ag (T_dtree_sum_N_bool_fun_fun$ T_dtree_sum$) N_bool_fun$)
(declare-fun fun_app$ah (T_dtree_sum_N_list_bool_fun_fun$ T_dtree_sum$) N_list_bool_fun$)
(declare-fun fun_app$ai (T_dtree_sum_T_dtree_sum_bool_fun_fun$ T_dtree_sum$) T_dtree_sum_bool_fun$)
(declare-fun fun_app$aj (N_N_bool_fun_fun$ N$) N_bool_fun$)
(declare-fun fun_app$ak (N_list_N_list_N_list_fun_fun$ N_list$) N_list_N_list_fun$)
(declare-fun fun_app$al (N_N_fun$ N$) N$)
(declare-fun list_all2$ (N_N_bool_fun_fun$) N_list_N_list_bool_fun_fun$)
(declare-fun list_ex1$a (T_dtree_sum_bool_fun$) T_dtree_sum_list_bool_fun$)
(declare-fun list_ex1$b (N_bool_fun$) N_list_bool_fun$)
(declare-fun listrelp$a (N_T_dtree_sum_bool_fun_fun$) N_list_T_dtree_sum_list_bool_fun_fun$)
(declare-fun listrelp$b (N_list_N_bool_fun_fun$) N_list_list_N_list_bool_fun_fun$)
(declare-fun listrelp$c (N_list_N_list_bool_fun_fun$) N_list_list_N_list_list_bool_fun_fun$)
(declare-fun listrelp$d (N_list_T_dtree_sum_bool_fun_fun$) N_list_list_T_dtree_sum_list_bool_fun_fun$)
(declare-fun listrelp$e (T_dtree_sum_N_bool_fun_fun$) T_dtree_sum_list_N_list_bool_fun_fun$)
(declare-fun listrelp$f (T_dtree_sum_N_list_bool_fun_fun$) T_dtree_sum_list_N_list_list_bool_fun_fun$)
(declare-fun listrelp$g (T_dtree_sum_T_dtree_sum_bool_fun_fun$) T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$)
(declare-fun listrelp$h (N_N_bool_fun_fun$) N_list_N_list_bool_fun_fun$)
(declare-fun replicate$ (Nat$) N_N_list_fun$)
(declare-fun sublists$a (T_dtree_sum_list$) T_dtree_sum_list_list$)
(declare-fun sublists$b (N_list$) N_list_list$)
(declare-fun lexordp_eq$ (N_list_N_list_bool_fun_fun$) N_list_list_N_list_list_bool_fun_fun$)
(declare-fun lexordp_eq$a (T_dtree_sum_T_dtree_sum_bool_fun_fun$) T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$)
(declare-fun lexordp_eq$b (N_N_bool_fun_fun$) N_list_N_list_bool_fun_fun$)
(declare-fun remdups_adj$ (N_list$) N_list$)
(declare-fun product_lists$ (N_list_list_list$) N_list_list_list$)
(declare-fun product_lists$a (T_dtree_sum_list_list$) T_dtree_sum_list_list$)
(declare-fun product_lists$b (N_list_list$) N_list_list$)
(declare-fun map_tailrec_rev$ (N_N_fun$) N_list_N_list_N_list_fun_fun$)
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (fun_app$ (fun_app$a uud$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uud$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$b (uuc$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uuc$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_list_set$) (?v1 T_dtree_sum_list$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 N_list_set$) (?v1 N_list$)) (! (= (fun_app$d (uua$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$d (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$e (uu$ ?v0) ?v1) (member$c ?v1 ?v0)) :pattern ((fun_app$e (uu$ ?v0) ?v1)))))
(assert (not (fun_app$d (path$ f$) (fun_app$ (append$ (cons$ n$ (cons$ n1$ nl$))) nl2$))))
(assert (fun_app$d (path$ f$) (cons$ n1$ nl$)))
(assert (=> (fun_app$d (path$ f$) (cons$ (last$ (cons$ n1$ nl$)) nl2$)) (fun_app$d (path$ f$) (fun_app$ (append$ (cons$ n1$ nl$)) nl2$))))
(assert (member$ (inr$ (fun_app$f f$ n1$)) (cont$ (fun_app$f f$ n$))))
(assert (fun_app$d (path$ f$) (cons$ (last$ (cons$ n$ (cons$ n1$ nl$))) nl2$)))
(assert (fun_app$d (path$ f$) nl1$))
(assert (fun_app$d (path$ f$) (cons$ (last$ nl1$) nl2$)))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$) (?v3 N$)) (=> (and (fun_app$d (path$ ?v0) (cons$ ?v1 ?v2)) (member$ (inr$ (fun_app$f ?v0 ?v1)) (cont$ (fun_app$f ?v0 ?v3)))) (fun_app$d (path$ ?v0) (cons$ ?v3 (cons$ ?v1 ?v2)))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) (fun_app$g (append$a ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) (fun_app$ (append$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) (fun_app$g (append$a ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) (fun_app$ (append$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (= (fun_app$g (append$a (fun_app$g (append$a ?v0) ?v1)) ?v2) (fun_app$g (append$a ?v0) (fun_app$g (append$a ?v1) ?v2))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$)) (= (fun_app$ (append$ (fun_app$ (append$ ?v0) ?v1)) ?v2) (fun_app$ (append$ ?v0) (fun_app$ (append$ ?v1) ?v2))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list$) (?v3 N_list_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list_list$)) (! (= (fun_app$h (append$b (cons$b ?v0 ?v1)) ?v2) (cons$b ?v0 (fun_app$h (append$b ?v1) ?v2))) :pattern ((fun_app$h (append$b (cons$b ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (! (= (fun_app$g (append$a (cons$a ?v0 ?v1)) ?v2) (cons$a ?v0 (fun_app$g (append$a ?v1) ?v2))) :pattern ((fun_app$g (append$a (cons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_list$)) (! (= (fun_app$ (append$ (cons$ ?v0 ?v1)) ?v2) (cons$ ?v0 (fun_app$ (append$ ?v1) ?v2))) :pattern ((fun_app$ (append$ (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list_list$) (?v3 N_list_list$) (?v4 N_list_list$)) (=> (and (= (cons$b ?v0 ?v1) ?v2) (= ?v3 (fun_app$h (append$b ?v1) ?v4))) (= (cons$b ?v0 ?v3) (fun_app$h (append$b ?v2) ?v4))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum_list$) (?v4 T_dtree_sum_list$)) (=> (and (= (cons$a ?v0 ?v1) ?v2) (= ?v3 (fun_app$g (append$a ?v1) ?v4))) (= (cons$a ?v0 ?v3) (fun_app$g (append$a ?v2) ?v4))) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$) (?v4 N_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (fun_app$ (append$ ?v1) ?v4))) (= (cons$ ?v0 ?v3) (fun_app$ (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (= (fun_app$d (path$ ?v0) ?v1) (or (exists ((?v2 N$)) (= ?v1 (cons$ ?v2 nil$)) ) (exists ((?v2 N$) (?v3 N_list$) (?v4 N$)) (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3))) (and (fun_app$d (path$ ?v0) (cons$ ?v2 ?v3)) (member$ (inr$ (fun_app$f ?v0 ?v2)) (cont$ (fun_app$f ?v0 ?v4))))) ))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (and (fun_app$d (path$ ?v0) ?v1) (and (forall ((?v2 N$)) (=> (= ?v1 (cons$ ?v2 nil$)) false) ) (forall ((?v2 N$) (?v3 N_list$) (?v4 N$)) (=> (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3))) (and (fun_app$d (path$ ?v0) (cons$ ?v2 ?v3)) (member$ (inr$ (fun_app$f ?v0 ?v2)) (cont$ (fun_app$f ?v0 ?v4))))) false) ))) false) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (fun_app$d (path$ ?v0) (fun_app$ (append$ ?v1) ?v2)) (not (= ?v2 nil$))) (fun_app$d (path$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (reg$ ?v0 ?v1) (member$ (inr$ ?v2) (cont$ ?v1))) (reg$ ?v0 ?v2)) ))
(assert (forall ((?v0 N_list_list$)) (! (= (fun_app$h (append$b ?v0) nil$b) ?v0) :pattern ((append$b ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$)) (! (= (fun_app$g (append$a ?v0) nil$a) ?v0) :pattern ((append$a ?v0)))))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$ (append$ ?v0) nil$) ?v0) :pattern ((append$ ?v0)))))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (= (fun_app$h (append$b ?v0) ?v1) nil$b) (and (= ?v0 nil$b) (= ?v1 nil$b))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) nil$a) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) nil$) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (= nil$b (fun_app$h (append$b ?v0) ?v1)) (and (= ?v0 nil$b) (= ?v1 nil$b))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (= nil$a (fun_app$g (append$a ?v0) ?v1)) (and (= ?v0 nil$a) (= ?v1 nil$a))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (= nil$ (fun_app$ (append$ ?v0) ?v1)) (and (= ?v0 nil$) (= ?v1 nil$))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (= ?v0 (fun_app$h (append$b ?v0) ?v1)) (= ?v1 nil$b)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (= ?v0 (fun_app$g (append$a ?v0) ?v1)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (= ?v0 (fun_app$ (append$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (= ?v0 (fun_app$h (append$b ?v1) ?v0)) (= ?v1 nil$b)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (= ?v0 (fun_app$g (append$a ?v1) ?v0)) (= ?v1 nil$a)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (= ?v0 (fun_app$ (append$ ?v1) ?v0)) (= ?v1 nil$)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (= (fun_app$h (append$b ?v0) ?v1) ?v0) (= ?v1 nil$b)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) ?v0) (= ?v1 nil$a)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) ?v0) (= ?v1 nil$)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (= (fun_app$h (append$b ?v0) ?v1) ?v1) (= ?v0 nil$b)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) ?v1) (= ?v0 nil$a)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) ?v1) (= ?v0 nil$)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$) (?v2 N_list_list$) (?v3 N_list$)) (= (= (fun_app$h (append$b ?v0) (cons$b ?v1 nil$b)) (fun_app$h (append$b ?v2) (cons$b ?v3 nil$b))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum$)) (= (= (fun_app$g (append$a ?v0) (cons$a ?v1 nil$a)) (fun_app$g (append$a ?v2) (cons$a ?v3 nil$a))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$) (?v3 N$)) (= (= (fun_app$ (append$ ?v0) (cons$ ?v1 nil$)) (fun_app$ (append$ ?v2) (cons$ ?v3 nil$))) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (=> (not (= ?v0 nil$b)) (= (last$a (fun_app$h (append$b ?v1) ?v0)) (last$a ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (=> (not (= ?v0 nil$a)) (= (last$b (fun_app$g (append$a ?v1) ?v0)) (last$b ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (not (= ?v0 nil$)) (= (last$ (fun_app$ (append$ ?v1) ?v0)) (last$ ?v0))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (=> (= ?v0 nil$b) (= (last$a (fun_app$h (append$b ?v1) ?v0)) (last$a ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (=> (= ?v0 nil$a) (= (last$b (fun_app$g (append$a ?v1) ?v0)) (last$b ?v1))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (= ?v0 nil$) (= (last$ (fun_app$ (append$ ?v1) ?v0)) (last$ ?v1))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (= (last$a (fun_app$h (append$b ?v0) (cons$b ?v1 nil$b))) ?v1) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (= (last$b (fun_app$g (append$a ?v0) (cons$a ?v1 nil$a))) ?v1) ))
(assert (forall ((?v0 N_list$) (?v1 N$)) (= (last$ (fun_app$ (append$ ?v0) (cons$ ?v1 nil$))) ?v1) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (=> (not (= ?v0 nil$b)) false)) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$a) false) (=> (not (= ?v0 nil$a)) false)) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 N_list_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 N_list_list_list$)) (=> (= ?v0 (cons$c nil$b ?v1)) false) ) (forall ((?v1 N_list$) (?v2 N_list_list$) (?v3 N_list_list_list$)) (=> (= ?v0 (cons$c (cons$b ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_list_list$)) (=> (and (=> (= ?v0 nil$d) false) (and (forall ((?v1 T_dtree_sum_list_list$)) (=> (= ?v0 (cons$d nil$a ?v1)) false) ) (forall ((?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum_list_list$)) (=> (= ?v0 (cons$d (cons$a ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 N_list_list$)) (=> (= ?v0 (cons$b nil$ ?v1)) false) ) (forall ((?v1 N$) (?v2 N_list$) (?v3 N_list_list$)) (=> (= ?v0 (cons$b (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (not (= nil$b (cons$b ?v0 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (not (= nil$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 N_list_N_list_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list_list$)) (=> (and (fun_app$i (fun_app$j ?v0 nil$) nil$b) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$i (fun_app$j ?v0 (cons$ ?v3 ?v4)) nil$b) ) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$i (fun_app$j ?v0 nil$) (cons$b ?v3 ?v4)) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (fun_app$i (fun_app$j ?v0 ?v4) ?v6) (fun_app$i (fun_app$j ?v0 (cons$ ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$i (fun_app$j ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_T_dtree_sum_list_bool_fun_fun$) (?v1 N_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$c (fun_app$k ?v0 nil$) nil$a) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$c (fun_app$k ?v0 (cons$ ?v3 ?v4)) nil$a) ) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$c (fun_app$k ?v0 nil$) (cons$a ?v3 ?v4)) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 T_dtree_sum$) (?v6 T_dtree_sum_list$)) (=> (fun_app$c (fun_app$k ?v0 ?v4) ?v6) (fun_app$c (fun_app$k ?v0 (cons$ ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$c (fun_app$k ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list_N_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$l ?v0 nil$b) nil$) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$d (fun_app$l ?v0 (cons$b ?v3 ?v4)) nil$) ) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$d (fun_app$l ?v0 nil$b) (cons$ ?v3 ?v4)) ) (forall ((?v3 N_list$) (?v4 N_list_list$) (?v5 N$) (?v6 N_list$)) (=> (fun_app$d (fun_app$l ?v0 ?v4) ?v6) (fun_app$d (fun_app$l ?v0 (cons$b ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$d (fun_app$l ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list_N_list_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list_list$)) (=> (and (fun_app$i (fun_app$m ?v0 nil$b) nil$b) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$i (fun_app$m ?v0 (cons$b ?v3 ?v4)) nil$b) ) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$i (fun_app$m ?v0 nil$b) (cons$b ?v3 ?v4)) ) (forall ((?v3 N_list$) (?v4 N_list_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (fun_app$i (fun_app$m ?v0 ?v4) ?v6) (fun_app$i (fun_app$m ?v0 (cons$b ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$i (fun_app$m ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list_T_dtree_sum_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$c (fun_app$n ?v0 nil$b) nil$a) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$c (fun_app$n ?v0 (cons$b ?v3 ?v4)) nil$a) ) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$c (fun_app$n ?v0 nil$b) (cons$a ?v3 ?v4)) ) (forall ((?v3 N_list$) (?v4 N_list_list$) (?v5 T_dtree_sum$) (?v6 T_dtree_sum_list$)) (=> (fun_app$c (fun_app$n ?v0 ?v4) ?v6) (fun_app$c (fun_app$n ?v0 (cons$b ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$c (fun_app$n ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list_N_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$o ?v0 nil$a) nil$) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$d (fun_app$o ?v0 (cons$a ?v3 ?v4)) nil$) ) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$d (fun_app$o ?v0 nil$a) (cons$ ?v3 ?v4)) ) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$) (?v5 N$) (?v6 N_list$)) (=> (fun_app$d (fun_app$o ?v0 ?v4) ?v6) (fun_app$d (fun_app$o ?v0 (cons$a ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$d (fun_app$o ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list_N_list_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list_list$)) (=> (and (fun_app$i (fun_app$p ?v0 nil$a) nil$b) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$i (fun_app$p ?v0 (cons$a ?v3 ?v4)) nil$b) ) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$i (fun_app$p ?v0 nil$a) (cons$b ?v3 ?v4)) ) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (fun_app$i (fun_app$p ?v0 ?v4) ?v6) (fun_app$i (fun_app$p ?v0 (cons$a ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$i (fun_app$p ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$c (fun_app$q ?v0 nil$a) nil$a) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$c (fun_app$q ?v0 (cons$a ?v3 ?v4)) nil$a) ) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$c (fun_app$q ?v0 nil$a) (cons$a ?v3 ?v4)) ) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$) (?v5 T_dtree_sum$) (?v6 T_dtree_sum_list$)) (=> (fun_app$c (fun_app$q ?v0 ?v4) ?v6) (fun_app$c (fun_app$q ?v0 (cons$a ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$c (fun_app$q ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$r ?v0 nil$) nil$) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$d (fun_app$r ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$d (fun_app$r ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 N$) (?v6 N_list$)) (=> (fun_app$d (fun_app$r ?v0 ?v4) ?v6) (fun_app$d (fun_app$r ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$d (fun_app$r ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 N_list$)) (fun_app$i ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 N_list$) (?v3 N_list_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$i ?v1 ?v3)) (fun_app$i ?v1 (cons$b ?v2 ?v3))) ))) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 T_dtree_sum$)) (fun_app$c ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$c ?v1 ?v3)) (fun_app$c ?v1 (cons$a ?v2 ?v3))) ))) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 N$)) (fun_app$d ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 N$) (?v3 N_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$d ?v1 ?v3)) (fun_app$d ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$d ?v1 ?v0)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$) (?v2 N_list_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) (not (= ?v0 nil$b))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) (not (= ?v0 nil$a))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 N_list$) (?v2 N_list_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 N$) (?v2 N_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 N_list$)) (=> (= ?v0 (cons$b ?v1 nil$b)) false) ) (forall ((?v1 N_list$) (?v2 N_list$) (?v3 N_list_list$)) (=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 T_dtree_sum$)) (=> (= ?v0 (cons$a ?v1 nil$a)) false) ) (forall ((?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 N$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 N$) (?v2 N$) (?v3 N_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 N_list_list$)) (= (not (= ?v0 nil$b)) (exists ((?v1 N_list$) (?v2 N_list_list$)) (= ?v0 (cons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (= ?v0 (cons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 N_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 N$) (?v2 N_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$h (append$b nil$b) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$g (append$a nil$a) ?v1))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (= ?v0 ?v1) (= ?v0 (fun_app$ (append$ nil$) ?v1))) ))
(assert (forall ((?v0 N_list_list$)) (! (= (fun_app$h (append$b nil$b) ?v0) ?v0) :pattern ((fun_app$h (append$b nil$b) ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$)) (! (= (fun_app$g (append$a nil$a) ?v0) ?v0) :pattern ((fun_app$g (append$a nil$a) ?v0)))))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$ (append$ nil$) ?v0) ?v0) :pattern ((fun_app$ (append$ nil$) ?v0)))))
(assert (forall ((?v0 N_list_list_bool_fun$) (?v1 N_list_list$)) (=> (and (fun_app$i ?v0 nil$b) (forall ((?v2 N_list$) (?v3 N_list_list$)) (=> (fun_app$i ?v0 ?v3) (fun_app$i ?v0 (fun_app$h (append$b ?v3) (cons$b ?v2 nil$b)))) )) (fun_app$i ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_list_bool_fun$) (?v1 T_dtree_sum_list$)) (=> (and (fun_app$c ?v0 nil$a) (forall ((?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (fun_app$c ?v0 ?v3) (fun_app$c ?v0 (fun_app$g (append$a ?v3) (cons$a ?v2 nil$a)))) )) (fun_app$c ?v0 ?v1)) ))
(assert (forall ((?v0 N_list_bool_fun$) (?v1 N_list$)) (=> (and (fun_app$d ?v0 nil$) (forall ((?v2 N$) (?v3 N_list$)) (=> (fun_app$d ?v0 ?v3) (fun_app$d ?v0 (fun_app$ (append$ ?v3) (cons$ ?v2 nil$)))) )) (fun_app$d ?v0 ?v1)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 N_list$)) (fun_app$i ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 N_list$) (?v3 N_list_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$i ?v1 ?v3)) (fun_app$i ?v1 (fun_app$h (append$b ?v3) (cons$b ?v2 nil$b)))) ))) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 T_dtree_sum$)) (fun_app$c ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$c ?v1 ?v3)) (fun_app$c ?v1 (fun_app$g (append$a ?v3) (cons$a ?v2 nil$a)))) ))) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 N$)) (fun_app$d ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 N$) (?v3 N_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$d ?v1 ?v3)) (fun_app$d ?v1 (fun_app$ (append$ ?v3) (cons$ ?v2 nil$)))) ))) (fun_app$d ?v1 ?v0)) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 N_list_list$) (?v2 N_list$)) (=> (= ?v0 (fun_app$h (append$b ?v1) (cons$b ?v2 nil$b))) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$)) (=> (= ?v0 (fun_app$g (append$a ?v1) (cons$a ?v2 nil$a))) false) )) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 N_list$) (?v2 N$)) (=> (= ?v0 (fun_app$ (append$ ?v1) (cons$ ?v2 nil$))) false) )) false) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list_list$) (?v3 N_list_list$)) (= (= (cons$b ?v0 ?v1) (fun_app$h (append$b ?v2) ?v3)) (or (and (= ?v2 nil$b) (= (cons$b ?v0 ?v1) ?v3)) (exists ((?v4 N_list_list$)) (and (= (cons$b ?v0 ?v4) ?v2) (= ?v1 (fun_app$h (append$b ?v4) ?v3))) ))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum_list$)) (= (= (cons$a ?v0 ?v1) (fun_app$g (append$a ?v2) ?v3)) (or (and (= ?v2 nil$a) (= (cons$a ?v0 ?v1) ?v3)) (exists ((?v4 T_dtree_sum_list$)) (and (= (cons$a ?v0 ?v4) ?v2) (= ?v1 (fun_app$g (append$a ?v4) ?v3))) ))) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$ (append$ ?v2) ?v3)) (or (and (= ?v2 nil$) (= (cons$ ?v0 ?v1) ?v3)) (exists ((?v4 N_list$)) (and (= (cons$ ?v0 ?v4) ?v2) (= ?v1 (fun_app$ (append$ ?v4) ?v3))) ))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$) (?v2 N_list$) (?v3 N_list_list$)) (= (= (fun_app$h (append$b ?v0) ?v1) (cons$b ?v2 ?v3)) (or (and (= ?v0 nil$b) (= ?v1 (cons$b ?v2 ?v3))) (exists ((?v4 N_list_list$)) (and (= ?v0 (cons$b ?v2 ?v4)) (= (fun_app$h (append$b ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) (cons$a ?v2 ?v3)) (or (and (= ?v0 nil$a) (= ?v1 (cons$a ?v2 ?v3))) (exists ((?v4 T_dtree_sum_list$)) (and (= ?v0 (cons$a ?v2 ?v4)) (= (fun_app$g (append$a ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) (cons$ ?v2 ?v3)) (or (and (= ?v0 nil$) (= ?v1 (cons$ ?v2 ?v3))) (exists ((?v4 N_list$)) (and (= ?v0 (cons$ ?v2 ?v4)) (= (fun_app$ (append$ ?v4) ?v1) ?v3)) ))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (! (=> (not (= ?v0 nil$b)) (= (last$a (cons$b ?v1 ?v0)) (last$a ?v0))) :pattern ((cons$b ?v1 ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (! (=> (not (= ?v0 nil$a)) (= (last$b (cons$a ?v1 ?v0)) (last$b ?v0))) :pattern ((cons$a ?v1 ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N$)) (! (=> (not (= ?v0 nil$)) (= (last$ (cons$ ?v1 ?v0)) (last$ ?v0))) :pattern ((cons$ ?v1 ?v0)))))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (! (=> (= ?v0 nil$b) (= (last$a (cons$b ?v1 ?v0)) ?v1)) :pattern ((cons$b ?v1 ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (! (=> (= ?v0 nil$a) (= (last$b (cons$a ?v1 ?v0)) ?v1)) :pattern ((cons$a ?v1 ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N$)) (! (=> (= ?v0 nil$) (= (last$ (cons$ ?v1 ?v0)) ?v1)) :pattern ((cons$ ?v1 ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (! (= (last$a (cons$b ?v0 ?v1)) (ite (= ?v1 nil$b) ?v0 (last$a ?v1))) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (= (last$b (cons$a ?v0 ?v1)) (ite (= ?v1 nil$a) ?v0 (last$b ?v1))) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (last$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) ?v0 (last$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (= (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 N_set$)) (= (collect$a (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 N_list_set$)) (= (collect$b (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_list_set$)) (= (collect$c (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (= (collect$ (uuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$c ?v0 (collect$a ?v1)) (fun_app$e ?v1 ?v0)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_bool_fun$)) (= (member$b ?v0 (collect$b ?v1)) (fun_app$d ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list_bool_fun$)) (= (member$a ?v0 (collect$c ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (fun_app$d (path$ ?v0) ?v1) (not (= ?v1 nil$))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (last$a (fun_app$h (append$b ?v0) ?v1)) (ite (= ?v1 nil$b) (last$a ?v0) (last$a ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (last$b (fun_app$g (append$a ?v0) ?v1)) (ite (= ?v1 nil$a) (last$b ?v0) (last$b ?v1))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (last$ (fun_app$ (append$ ?v0) ?v1)) (ite (= ?v1 nil$) (last$ ?v0) (last$ ?v1))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N$)) (fun_app$d (path$ ?v0) (cons$ ?v1 nil$)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$)) (=> (and (fun_app$d (path$ ?v0) (cons$ ?v1 ?v2)) (not (= ?v2 nil$))) (fun_app$d (path$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (not (= (cons$b ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (not (= (cons$a ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum_list$) (?v4 T_dtree_sum_list$)) (=> (and (= (fun_app$g (append$a ?v0) ?v1) ?v2) (= ?v3 (fun_app$g (append$a ?v1) ?v4))) (= (fun_app$g (append$a ?v0) ?v3) (fun_app$g (append$a ?v2) ?v4))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$) (?v4 N_list$)) (=> (and (= (fun_app$ (append$ ?v0) ?v1) ?v2) (= ?v3 (fun_app$ (append$ ?v1) ?v4))) (= (fun_app$ (append$ ?v0) ?v3) (fun_app$ (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) ?v1) (fun_app$g (append$a ?v2) ?v3)) (exists ((?v4 T_dtree_sum_list$)) (or (and (= ?v0 (fun_app$g (append$a ?v2) ?v4)) (= (fun_app$g (append$a ?v4) ?v1) ?v3)) (and (= (fun_app$g (append$a ?v0) ?v4) ?v2) (= ?v1 (fun_app$g (append$a ?v4) ?v3)))) )) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$)) (= (= (fun_app$ (append$ ?v0) ?v1) (fun_app$ (append$ ?v2) ?v3)) (exists ((?v4 N_list$)) (or (and (= ?v0 (fun_app$ (append$ ?v2) ?v4)) (= (fun_app$ (append$ ?v4) ?v1) ?v3)) (and (= (fun_app$ (append$ ?v0) ?v4) ?v2) (= ?v1 (fun_app$ (append$ ?v4) ?v3)))) )) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_T_dtree_sum_list_fun$)) (! (= (bind$ (cons$ ?v0 ?v1) ?v2) (fun_app$g (append$a (fun_app$s ?v2 ?v0)) (bind$ ?v1 ?v2))) :pattern ((bind$ (cons$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list_N_list_fun$)) (! (= (bind$a (cons$b ?v0 ?v1) ?v2) (fun_app$ (append$ (fun_app$ ?v2 ?v0)) (bind$a ?v1 ?v2))) :pattern ((bind$a (cons$b ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list_T_dtree_sum_list_fun$)) (! (= (bind$b (cons$b ?v0 ?v1) ?v2) (fun_app$g (append$a (fun_app$t ?v2 ?v0)) (bind$b ?v1 ?v2))) :pattern ((bind$b (cons$b ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_N_list_fun$)) (! (= (bind$c (cons$a ?v0 ?v1) ?v2) (fun_app$ (append$ (fun_app$u ?v2 ?v0)) (bind$c ?v1 ?v2))) :pattern ((bind$c (cons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_T_dtree_sum_list_fun$)) (! (= (bind$d (cons$a ?v0 ?v1) ?v2) (fun_app$g (append$a (fun_app$v ?v2 ?v0)) (bind$d ?v1 ?v2))) :pattern ((bind$d (cons$a ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_N_list_fun$)) (! (= (bind$e (cons$ ?v0 ?v1) ?v2) (fun_app$ (append$ (fun_app$w ?v2 ?v0)) (bind$e ?v1 ?v2))) :pattern ((bind$e (cons$ ?v0 ?v1) ?v2)))))
(assert (forall ((?v0 N_list_list$)) (=> (not (= ?v0 nil$b)) (= (fun_app$h (append$b (butlast$ ?v0)) (cons$b (last$a ?v0) nil$b)) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (not (= ?v0 nil$a)) (= (fun_app$g (append$a (butlast$a ?v0)) (cons$a (last$b ?v0) nil$a)) ?v0)) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (= (fun_app$ (append$ (butlast$b ?v0)) (cons$ (last$ ?v0) nil$)) ?v0)) ))
(assert (forall ((?v0 N_N_list_list_fun$)) (! (= (bind$f nil$ ?v0) nil$b) :pattern ((bind$f nil$ ?v0)))))
(assert (forall ((?v0 N_T_dtree_sum_list_fun$)) (! (= (bind$ nil$ ?v0) nil$a) :pattern ((bind$ nil$ ?v0)))))
(assert (forall ((?v0 N_list_N_list_fun$)) (! (= (bind$a nil$b ?v0) nil$) :pattern ((bind$a nil$b ?v0)))))
(assert (forall ((?v0 N_list_N_list_list_fun$)) (! (= (bind$g nil$b ?v0) nil$b) :pattern ((bind$g nil$b ?v0)))))
(assert (forall ((?v0 N_list_T_dtree_sum_list_fun$)) (! (= (bind$b nil$b ?v0) nil$a) :pattern ((bind$b nil$b ?v0)))))
(assert (forall ((?v0 T_dtree_sum_N_list_fun$)) (! (= (bind$c nil$a ?v0) nil$) :pattern ((bind$c nil$a ?v0)))))
(assert (forall ((?v0 T_dtree_sum_N_list_list_fun$)) (! (= (bind$h nil$a ?v0) nil$b) :pattern ((bind$h nil$a ?v0)))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_list_fun$)) (! (= (bind$d nil$a ?v0) nil$a) :pattern ((bind$d nil$a ?v0)))))
(assert (forall ((?v0 N_N_list_fun$)) (! (= (bind$e nil$ ?v0) nil$) :pattern ((bind$e nil$ ?v0)))))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$) (?v2 N_list_list$)) (= (= (fun_app$h (append$b ?v0) (cons$b ?v1 nil$b)) ?v2) (and (not (= ?v2 nil$b)) (and (= (butlast$ ?v2) ?v0) (= (last$a ?v2) ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (= (= (fun_app$g (append$a ?v0) (cons$a ?v1 nil$a)) ?v2) (and (not (= ?v2 nil$a)) (and (= (butlast$a ?v2) ?v0) (= (last$b ?v2) ?v1)))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$)) (= (= (fun_app$ (append$ ?v0) (cons$ ?v1 nil$)) ?v2) (and (not (= ?v2 nil$)) (and (= (butlast$b ?v2) ?v0) (= (last$ ?v2) ?v1)))) ))
(assert (forall ((?v0 N_T_dtree_sum_list_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$t (maps$ ?v0) (cons$ ?v1 ?v2)) (fun_app$g (append$a (fun_app$s ?v0 ?v1)) (fun_app$t (maps$ ?v0) ?v2))) :pattern ((fun_app$t (maps$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 N_list_N_list_fun$) (?v1 N_list$) (?v2 N_list_list$)) (! (= (fun_app$x (maps$a ?v0) (cons$b ?v1 ?v2)) (fun_app$ (append$ (fun_app$ ?v0 ?v1)) (fun_app$x (maps$a ?v0) ?v2))) :pattern ((fun_app$x (maps$a ?v0) (cons$b ?v1 ?v2))))))
(assert (forall ((?v0 N_list_T_dtree_sum_list_fun$) (?v1 N_list$) (?v2 N_list_list$)) (! (= (fun_app$y (maps$b ?v0) (cons$b ?v1 ?v2)) (fun_app$g (append$a (fun_app$t ?v0 ?v1)) (fun_app$y (maps$b ?v0) ?v2))) :pattern ((fun_app$y (maps$b ?v0) (cons$b ?v1 ?v2))))))
(assert (forall ((?v0 T_dtree_sum_N_list_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (! (= (fun_app$z (maps$c ?v0) (cons$a ?v1 ?v2)) (fun_app$ (append$ (fun_app$u ?v0 ?v1)) (fun_app$z (maps$c ?v0) ?v2))) :pattern ((fun_app$z (maps$c ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_list_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (! (= (fun_app$g (maps$d ?v0) (cons$a ?v1 ?v2)) (fun_app$g (append$a (fun_app$v ?v0 ?v1)) (fun_app$g (maps$d ?v0) ?v2))) :pattern ((fun_app$g (maps$d ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 N_N_list_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$ (maps$e ?v0) (cons$ ?v1 ?v2)) (fun_app$ (append$ (fun_app$w ?v0 ?v1)) (fun_app$ (maps$e ?v0) ?v2))) :pattern ((fun_app$ (maps$e ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$h (insert$ ?v0) nil$b) (cons$b ?v0 nil$b)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$g (insert$a ?v0) nil$a) (cons$a ?v0 nil$a)) :pattern ((insert$a ?v0)))))
(assert (forall ((?v0 N$)) (! (= (fun_app$ (insert$b ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$b ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (= (rotate1$ (cons$b ?v0 ?v1)) (fun_app$h (append$b ?v1) (cons$b ?v0 nil$b))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (= (rotate1$a (cons$a ?v0 ?v1)) (fun_app$g (append$a ?v1) (cons$a ?v0 nil$a))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (rotate1$b (cons$ ?v0 ?v1)) (fun_app$ (append$ ?v1) (cons$ ?v0 nil$))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (= (butlast$ (fun_app$h (append$b ?v0) (cons$b ?v1 nil$b))) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (= (butlast$a (fun_app$g (append$a ?v0) (cons$a ?v1 nil$a))) ?v0) ))
(assert (forall ((?v0 N_list$) (?v1 N$)) (= (butlast$b (fun_app$ (append$ ?v0) (cons$ ?v1 nil$))) ?v0) ))
(assert (forall ((?v0 N_list_bool_fun$)) (! (= (fun_app$i (list_ex1$ ?v0) nil$b) false) :pattern ((list_ex1$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (! (= (fun_app$c (list_ex1$a ?v0) nil$a) false) :pattern ((list_ex1$a ?v0)))))
(assert (forall ((?v0 N_bool_fun$)) (! (= (fun_app$d (list_ex1$b ?v0) nil$) false) :pattern ((list_ex1$b ?v0)))))
(assert (forall ((?v0 N_list_list$)) (= (= (rotate1$ ?v0) nil$b) (= ?v0 nil$b)) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (= (= (rotate1$a ?v0) nil$a) (= ?v0 nil$a)) ))
(assert (forall ((?v0 N_list$)) (= (= (rotate1$b ?v0) nil$) (= ?v0 nil$)) ))
(assert (= (butlast$ nil$b) nil$b))
(assert (= (butlast$a nil$a) nil$a))
(assert (= (butlast$b nil$) nil$))
(assert (= (rotate1$ nil$b) nil$b))
(assert (= (rotate1$a nil$a) nil$a))
(assert (= (rotate1$b nil$) nil$))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (= (butlast$ (cons$b ?v0 ?v1)) (ite (= ?v1 nil$b) nil$b (cons$b ?v0 (butlast$ ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (= (butlast$a (cons$a ?v0 ?v1)) (ite (= ?v1 nil$a) nil$a (cons$a ?v0 (butlast$a ?v1)))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (butlast$b (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) nil$ (cons$ ?v0 (butlast$b ?v1)))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list$)) (= (butlast$ (fun_app$h (append$b ?v0) ?v1)) (ite (= ?v1 nil$b) (butlast$ ?v0) (fun_app$h (append$b ?v0) (butlast$ ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$)) (= (butlast$a (fun_app$g (append$a ?v0) ?v1)) (ite (= ?v1 nil$a) (butlast$a ?v0) (fun_app$g (append$a ?v0) (butlast$a ?v1)))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (butlast$b (fun_app$ (append$ ?v0) ?v1)) (ite (= ?v1 nil$) (butlast$b ?v0) (fun_app$ (append$ ?v0) (butlast$b ?v1)))) ))
(assert (forall ((?v0 N_N_list_list_fun$)) (! (= (fun_app$aa (maps$f ?v0) nil$) nil$b) :pattern ((maps$f ?v0)))))
(assert (forall ((?v0 N_T_dtree_sum_list_fun$)) (! (= (fun_app$t (maps$ ?v0) nil$) nil$a) :pattern ((maps$ ?v0)))))
(assert (forall ((?v0 N_list_N_list_fun$)) (! (= (fun_app$x (maps$a ?v0) nil$b) nil$) :pattern ((maps$a ?v0)))))
(assert (forall ((?v0 N_list_N_list_list_fun$)) (! (= (fun_app$h (maps$g ?v0) nil$b) nil$b) :pattern ((maps$g ?v0)))))
(assert (forall ((?v0 N_list_T_dtree_sum_list_fun$)) (! (= (fun_app$y (maps$b ?v0) nil$b) nil$a) :pattern ((maps$b ?v0)))))
(assert (forall ((?v0 T_dtree_sum_N_list_fun$)) (! (= (fun_app$z (maps$c ?v0) nil$a) nil$) :pattern ((maps$c ?v0)))))
(assert (forall ((?v0 T_dtree_sum_N_list_list_fun$)) (! (= (fun_app$ab (maps$h ?v0) nil$a) nil$b) :pattern ((maps$h ?v0)))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_list_fun$)) (! (= (fun_app$g (maps$d ?v0) nil$a) nil$a) :pattern ((maps$d ?v0)))))
(assert (forall ((?v0 N_N_list_fun$)) (! (= (fun_app$ (maps$e ?v0) nil$) nil$) :pattern ((maps$e ?v0)))))
(assert (= (sublists$ nil$b) (cons$c nil$b nil$c)))
(assert (= (sublists$a nil$a) (cons$d nil$a nil$d)))
(assert (= (sublists$b nil$) (cons$b nil$ nil$b)))
(assert (= (product_lists$ nil$c) (cons$c nil$b nil$c)))
(assert (= (product_lists$a nil$d) (cons$d nil$a nil$d)))
(assert (= (product_lists$b nil$b) (cons$b nil$ nil$b)))
(assert (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (reg$ ?v1 ?v0) )) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list_list$)) (! (= (fun_app$i (fun_app$m (lexordp_eq$ ?v0) (cons$b ?v1 ?v2)) nil$b) false) :pattern ((fun_app$m (lexordp_eq$ ?v0) (cons$b ?v1 ?v2))))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (! (= (fun_app$c (fun_app$q (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) nil$a) false) :pattern ((fun_app$q (lexordp_eq$a ?v0) (cons$a ?v1 ?v2))))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$d (fun_app$r (lexordp_eq$b ?v0) (cons$ ?v1 ?v2)) nil$) false) :pattern ((fun_app$r (lexordp_eq$b ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 N_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list_list$)) (=> (and (fun_app$i (fun_app$j (listrelp$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$b)) false) (forall ((?v3 N$) (?v4 N_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (fun_app$d (fun_app$ac ?v0 ?v3) ?v4) (fun_app$i (fun_app$j (listrelp$ ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_T_dtree_sum_bool_fun_fun$) (?v1 N_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$c (fun_app$k (listrelp$a ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$a)) false) (forall ((?v3 N$) (?v4 T_dtree_sum$) (?v5 N_list$) (?v6 T_dtree_sum_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$b (fun_app$ad ?v0 ?v3) ?v4) (fun_app$c (fun_app$k (listrelp$a ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_list_N_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$l (listrelp$b ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$b) (= ?v2 nil$)) false) (forall ((?v3 N_list$) (?v4 N$) (?v5 N_list_list$) (?v6 N_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$e (fun_app$ae ?v0 ?v3) ?v4) (fun_app$d (fun_app$l (listrelp$b ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list_list$)) (=> (and (fun_app$i (fun_app$m (listrelp$c ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$b) (= ?v2 nil$b)) false) (forall ((?v3 N_list$) (?v4 N_list$) (?v5 N_list_list$) (?v6 N_list_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (fun_app$d (fun_app$r ?v0 ?v3) ?v4) (fun_app$i (fun_app$m (listrelp$c ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_list_T_dtree_sum_bool_fun_fun$) (?v1 N_list_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$c (fun_app$n (listrelp$d ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$b) (= ?v2 nil$a)) false) (forall ((?v3 N_list$) (?v4 T_dtree_sum$) (?v5 N_list_list$) (?v6 T_dtree_sum_list$)) (=> (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$b (fun_app$af ?v0 ?v3) ?v4) (fun_app$c (fun_app$n (listrelp$d ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_N_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$o (listrelp$e ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$a) (= ?v2 nil$)) false) (forall ((?v3 T_dtree_sum$) (?v4 N$) (?v5 T_dtree_sum_list$) (?v6 N_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$e (fun_app$ag ?v0 ?v3) ?v4) (fun_app$d (fun_app$o (listrelp$e ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_N_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list_list$)) (=> (and (fun_app$i (fun_app$p (listrelp$f ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$a) (= ?v2 nil$b)) false) (forall ((?v3 T_dtree_sum$) (?v4 N_list$) (?v5 T_dtree_sum_list$) (?v6 N_list_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (fun_app$d (fun_app$ah ?v0 ?v3) ?v4) (fun_app$i (fun_app$p (listrelp$f ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$c (fun_app$q (listrelp$g ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$a) (= ?v2 nil$a)) false) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum$) (?v5 T_dtree_sum_list$) (?v6 T_dtree_sum_list$)) (=> (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$b (fun_app$ai ?v0 ?v3) ?v4) (fun_app$c (fun_app$q (listrelp$g ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$r (listrelp$h ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$)) false) (forall ((?v3 N$) (?v4 N$) (?v5 N_list$) (?v6 N_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$e (fun_app$aj ?v0 ?v3) ?v4) (fun_app$d (fun_app$r (listrelp$h ?v0) ?v5) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list_list$)) (= (fun_app$i (fun_app$j (listrelp$ ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$b)) (exists ((?v3 N$) (?v4 N_list$) (?v5 N_list$) (?v6 N_list_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (fun_app$d (fun_app$ac ?v0 ?v3) ?v4) (fun_app$i (fun_app$j (listrelp$ ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 N_T_dtree_sum_bool_fun_fun$) (?v1 N_list$) (?v2 T_dtree_sum_list$)) (= (fun_app$c (fun_app$k (listrelp$a ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$a)) (exists ((?v3 N$) (?v4 T_dtree_sum$) (?v5 N_list$) (?v6 T_dtree_sum_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$b (fun_app$ad ?v0 ?v3) ?v4) (fun_app$c (fun_app$k (listrelp$a ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 N_list_N_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list$)) (= (fun_app$d (fun_app$l (listrelp$b ?v0) ?v1) ?v2) (or (and (= ?v1 nil$b) (= ?v2 nil$)) (exists ((?v3 N_list$) (?v4 N$) (?v5 N_list_list$) (?v6 N_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$e (fun_app$ae ?v0 ?v3) ?v4) (fun_app$d (fun_app$l (listrelp$b ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list_list$)) (= (fun_app$i (fun_app$m (listrelp$c ?v0) ?v1) ?v2) (or (and (= ?v1 nil$b) (= ?v2 nil$b)) (exists ((?v3 N_list$) (?v4 N_list$) (?v5 N_list_list$) (?v6 N_list_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (fun_app$d (fun_app$r ?v0 ?v3) ?v4) (fun_app$i (fun_app$m (listrelp$c ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 N_list_T_dtree_sum_bool_fun_fun$) (?v1 N_list_list$) (?v2 T_dtree_sum_list$)) (= (fun_app$c (fun_app$n (listrelp$d ?v0) ?v1) ?v2) (or (and (= ?v1 nil$b) (= ?v2 nil$a)) (exists ((?v3 N_list$) (?v4 T_dtree_sum$) (?v5 N_list_list$) (?v6 T_dtree_sum_list$)) (and (= ?v1 (cons$b ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$b (fun_app$af ?v0 ?v3) ?v4) (fun_app$c (fun_app$n (listrelp$d ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 T_dtree_sum_N_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list$)) (= (fun_app$d (fun_app$o (listrelp$e ?v0) ?v1) ?v2) (or (and (= ?v1 nil$a) (= ?v2 nil$)) (exists ((?v3 T_dtree_sum$) (?v4 N$) (?v5 T_dtree_sum_list$) (?v6 N_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$e (fun_app$ag ?v0 ?v3) ?v4) (fun_app$d (fun_app$o (listrelp$e ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 T_dtree_sum_N_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list_list$)) (= (fun_app$i (fun_app$p (listrelp$f ?v0) ?v1) ?v2) (or (and (= ?v1 nil$a) (= ?v2 nil$b)) (exists ((?v3 T_dtree_sum$) (?v4 N_list$) (?v5 T_dtree_sum_list$) (?v6 N_list_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$b ?v4 ?v6)) (and (fun_app$d (fun_app$ah ?v0 ?v3) ?v4) (fun_app$i (fun_app$p (listrelp$f ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (= (fun_app$c (fun_app$q (listrelp$g ?v0) ?v1) ?v2) (or (and (= ?v1 nil$a) (= ?v2 nil$a)) (exists ((?v3 T_dtree_sum$) (?v4 T_dtree_sum$) (?v5 T_dtree_sum_list$) (?v6 T_dtree_sum_list$)) (and (= ?v1 (cons$a ?v3 ?v5)) (and (= ?v2 (cons$a ?v4 ?v6)) (and (fun_app$b (fun_app$ai ?v0 ?v3) ?v4) (fun_app$c (fun_app$q (listrelp$g ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (= (fun_app$d (fun_app$r (listrelp$h ?v0) ?v1) ?v2) (or (and (= ?v1 nil$) (= ?v2 nil$)) (exists ((?v3 N$) (?v4 N$) (?v5 N_list$) (?v6 N_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (fun_app$e (fun_app$aj ?v0 ?v3) ?v4) (fun_app$d (fun_app$r (listrelp$h ?v0) ?v5) ?v6)))) ))) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list_list$) (?v3 N_list$) (?v4 N_list_list$)) (! (= (fun_app$i (fun_app$m (lexordp_eq$ ?v0) (cons$b ?v1 ?v2)) (cons$b ?v3 ?v4)) (or (fun_app$d (fun_app$r ?v0 ?v1) ?v3) (and (not (fun_app$d (fun_app$r ?v0 ?v3) ?v1)) (fun_app$i (fun_app$m (lexordp_eq$ ?v0) ?v2) ?v4)))) :pattern ((fun_app$i (fun_app$m (lexordp_eq$ ?v0) (cons$b ?v1 ?v2)) (cons$b ?v3 ?v4))))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (! (= (fun_app$c (fun_app$q (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4)) (or (fun_app$b (fun_app$ai ?v0 ?v1) ?v3) (and (not (fun_app$b (fun_app$ai ?v0 ?v3) ?v1)) (fun_app$c (fun_app$q (lexordp_eq$a ?v0) ?v2) ?v4)))) :pattern ((fun_app$c (fun_app$q (lexordp_eq$a ?v0) (cons$a ?v1 ?v2)) (cons$a ?v3 ?v4))))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$) (?v3 N$) (?v4 N_list$)) (! (= (fun_app$d (fun_app$r (lexordp_eq$b ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (or (fun_app$e (fun_app$aj ?v0 ?v1) ?v3) (and (not (fun_app$e (fun_app$aj ?v0 ?v3) ?v1)) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v2) ?v4)))) :pattern ((fun_app$d (fun_app$r (lexordp_eq$b ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list_list$)) (! (= (fun_app$i (fun_app$m (lexordp_eq$ ?v0) ?v1) nil$b) (= ?v1 nil$b)) :pattern ((fun_app$m (lexordp_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum_list$)) (! (= (fun_app$c (fun_app$q (lexordp_eq$a ?v0) ?v1) nil$a) (= ?v1 nil$a)) :pattern ((fun_app$q (lexordp_eq$a ?v0) ?v1)))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$)) (! (= (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$r (lexordp_eq$b ?v0) ?v1)))))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list_list$)) (! (= (fun_app$i (fun_app$m (lexordp_eq$ ?v0) nil$b) ?v1) true) :pattern ((fun_app$i (fun_app$m (lexordp_eq$ ?v0) nil$b) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum_list$)) (! (= (fun_app$c (fun_app$q (lexordp_eq$a ?v0) nil$a) ?v1) true) :pattern ((fun_app$c (fun_app$q (lexordp_eq$a ?v0) nil$a) ?v1)))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$)) (! (= (fun_app$d (fun_app$r (lexordp_eq$b ?v0) nil$) ?v1) true) :pattern ((fun_app$d (fun_app$r (lexordp_eq$b ?v0) nil$) ?v1)))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$)) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v1) ?v1) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list_list$) (?v4 N_list_list$)) (=> (fun_app$d (fun_app$r ?v0 ?v1) ?v2) (fun_app$i (fun_app$m (lexordp_eq$ ?v0) (cons$b ?v1 ?v3)) (cons$b ?v2 ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$) (?v4 T_dtree_sum_list$)) (=> (fun_app$b (fun_app$ai ?v0 ?v1) ?v2) (fun_app$c (fun_app$q (lexordp_eq$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N$) (?v3 N_list$) (?v4 N_list$)) (=> (fun_app$e (fun_app$aj ?v0 ?v1) ?v2) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list_list$) (?v4 N_list_list$)) (=> (and (not (fun_app$d (fun_app$r ?v0 ?v1) ?v2)) (and (not (fun_app$d (fun_app$r ?v0 ?v2) ?v1)) (fun_app$i (fun_app$m (lexordp_eq$ ?v0) ?v3) ?v4))) (fun_app$i (fun_app$m (lexordp_eq$ ?v0) (cons$b ?v1 ?v3)) (cons$b ?v2 ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$) (?v4 T_dtree_sum_list$)) (=> (and (not (fun_app$b (fun_app$ai ?v0 ?v1) ?v2)) (and (not (fun_app$b (fun_app$ai ?v0 ?v2) ?v1)) (fun_app$c (fun_app$q (lexordp_eq$a ?v0) ?v3) ?v4))) (fun_app$c (fun_app$q (lexordp_eq$a ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N$) (?v3 N_list$) (?v4 N_list$)) (=> (and (not (fun_app$e (fun_app$aj ?v0 ?v1) ?v2)) (and (not (fun_app$e (fun_app$aj ?v0 ?v2) ?v1)) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v3) ?v4))) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list_list$)) (fun_app$i (fun_app$m (lexordp_eq$ ?v0) nil$b) ?v1) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum_list$)) (fun_app$c (fun_app$q (lexordp_eq$a ?v0) nil$a) ?v1) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$)) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) nil$) ?v1) ))
(assert (forall ((?v0 N_N_list_bool_fun_fun$) (?v1 N$) (?v2 N_list$) (?v3 N_list$) (?v4 N_list_list$)) (=> (and (fun_app$d (fun_app$ac ?v0 ?v1) ?v2) (fun_app$i (fun_app$j (listrelp$ ?v0) ?v3) ?v4)) (fun_app$i (fun_app$j (listrelp$ ?v0) (cons$ ?v1 ?v3)) (cons$b ?v2 ?v4))) ))
(assert (forall ((?v0 N_T_dtree_sum_bool_fun_fun$) (?v1 N$) (?v2 T_dtree_sum$) (?v3 N_list$) (?v4 T_dtree_sum_list$)) (=> (and (fun_app$b (fun_app$ad ?v0 ?v1) ?v2) (fun_app$c (fun_app$k (listrelp$a ?v0) ?v3) ?v4)) (fun_app$c (fun_app$k (listrelp$a ?v0) (cons$ ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 N_list_N_bool_fun_fun$) (?v1 N_list$) (?v2 N$) (?v3 N_list_list$) (?v4 N_list$)) (=> (and (fun_app$e (fun_app$ae ?v0 ?v1) ?v2) (fun_app$d (fun_app$l (listrelp$b ?v0) ?v3) ?v4)) (fun_app$d (fun_app$l (listrelp$b ?v0) (cons$b ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list_list$) (?v4 N_list_list$)) (=> (and (fun_app$d (fun_app$r ?v0 ?v1) ?v2) (fun_app$i (fun_app$m (listrelp$c ?v0) ?v3) ?v4)) (fun_app$i (fun_app$m (listrelp$c ?v0) (cons$b ?v1 ?v3)) (cons$b ?v2 ?v4))) ))
(assert (forall ((?v0 N_list_T_dtree_sum_bool_fun_fun$) (?v1 N_list$) (?v2 T_dtree_sum$) (?v3 N_list_list$) (?v4 T_dtree_sum_list$)) (=> (and (fun_app$b (fun_app$af ?v0 ?v1) ?v2) (fun_app$c (fun_app$n (listrelp$d ?v0) ?v3) ?v4)) (fun_app$c (fun_app$n (listrelp$d ?v0) (cons$b ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_N_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 N$) (?v3 T_dtree_sum_list$) (?v4 N_list$)) (=> (and (fun_app$e (fun_app$ag ?v0 ?v1) ?v2) (fun_app$d (fun_app$o (listrelp$e ?v0) ?v3) ?v4)) (fun_app$d (fun_app$o (listrelp$e ?v0) (cons$a ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_N_list_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 N_list$) (?v3 T_dtree_sum_list$) (?v4 N_list_list$)) (=> (and (fun_app$d (fun_app$ah ?v0 ?v1) ?v2) (fun_app$i (fun_app$p (listrelp$f ?v0) ?v3) ?v4)) (fun_app$i (fun_app$p (listrelp$f ?v0) (cons$a ?v1 ?v3)) (cons$b ?v2 ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$) (?v4 T_dtree_sum_list$)) (=> (and (fun_app$b (fun_app$ai ?v0 ?v1) ?v2) (fun_app$c (fun_app$q (listrelp$g ?v0) ?v3) ?v4)) (fun_app$c (fun_app$q (listrelp$g ?v0) (cons$a ?v1 ?v3)) (cons$a ?v2 ?v4))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N$) (?v3 N_list$) (?v4 N_list$)) (=> (and (fun_app$e (fun_app$aj ?v0 ?v1) ?v2) (fun_app$d (fun_app$r (listrelp$h ?v0) ?v3) ?v4)) (fun_app$d (fun_app$r (listrelp$h ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_bool_fun_fun$)) (fun_app$c (fun_app$q (listrelp$g ?v0) nil$a) nil$a) ))
(assert (forall ((?v0 N_N_bool_fun_fun$)) (fun_app$d (fun_app$r (listrelp$h ?v0) nil$) nil$) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (= (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v1) ?v2) (or (exists ((?v3 N_list$)) (and (= ?v1 nil$) (= ?v2 ?v3)) ) (or (exists ((?v3 N$) (?v4 N$) (?v5 N_list$) (?v6 N_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$e (fun_app$aj ?v0 ?v3) ?v4))) ) (exists ((?v3 N$) (?v4 N$) (?v5 N_list$) (?v6 N_list$)) (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$e (fun_app$aj ?v0 ?v3) ?v4)) (and (not (fun_app$e (fun_app$aj ?v0 ?v4) ?v3)) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v5) ?v6))))) )))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v1) ?v2) (and (forall ((?v3 N_list$)) (=> (and (= ?v1 nil$) (= ?v2 ?v3)) false) ) (and (forall ((?v3 N$) (?v4 N$) (?v5 N_list$) (?v6 N_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (fun_app$e (fun_app$aj ?v0 ?v3) ?v4))) false) ) (forall ((?v3 N$) (?v4 N$) (?v5 N_list$) (?v6 N_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v5)) (and (= ?v2 (cons$ ?v4 ?v6)) (and (not (fun_app$e (fun_app$aj ?v0 ?v3) ?v4)) (and (not (fun_app$e (fun_app$aj ?v0 ?v4) ?v3)) (fun_app$d (fun_app$r (lexordp_eq$b ?v0) ?v5) ?v6))))) false) )))) false) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$)) (=> (and (= (fun_app$ (fun_app$ak (map_tailrec_rev$ ?v0) ?v1) ?v2) ?v3) (and (forall ((?v4 N_N_fun$) (?v5 N_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 nil$) (and (= ?v2 ?v5) (= ?v3 ?v5)))) false) ) (forall ((?v4 N_N_fun$) (?v5 N$) (?v6 N_list$) (?v7 N_list$)) (=> (and (= ?v0 ?v4) (and (= ?v1 (cons$ ?v5 ?v6)) (and (= ?v2 ?v7) (= ?v3 (fun_app$ (fun_app$ak (map_tailrec_rev$ ?v4) ?v6) (cons$ (fun_app$al ?v4 ?v5) ?v7)))))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list_set$) (?v2 T_dtree_sum_list$)) (=> (member$ ?v0 (succ$ ?v1 ?v2)) (member$a (fun_app$g (append$a ?v2) (cons$a ?v0 nil$a)) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_list_set$) (?v2 N_list$)) (=> (member$c ?v0 (succ$a ?v1 ?v2)) (member$b (fun_app$ (append$ ?v2) (cons$ ?v0 nil$)) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list_set$)) (=> (member$a (fun_app$g (append$a ?v0) (cons$a ?v1 nil$a)) ?v2) (member$ ?v1 (succ$ ?v2 ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list_set$)) (=> (member$b (fun_app$ (append$ ?v0) (cons$ ?v1 nil$)) ?v2) (member$c ?v1 (succ$a ?v2 ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$)) (= (= (rev$ ?v0) (cons$ ?v1 ?v2)) (= ?v0 (fun_app$ (append$ (rev$ ?v2)) (cons$ ?v1 nil$)))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N$)) (= (remdups_adj$ (fun_app$ (append$ ?v0) (cons$ ?v1 (cons$ ?v2 nil$)))) (fun_app$ (append$ (remdups_adj$ (fun_app$ (append$ ?v0) (cons$ ?v1 nil$)))) (ite (= ?v1 ?v2) nil$ (cons$ ?v2 nil$)))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1)))) ))
(assert (forall ((?v0 N_list$)) (= (= nil$ (rev$ ?v0)) (= ?v0 nil$)) ))
(assert (forall ((?v0 N_list$)) (= (= (rev$ ?v0) nil$) (= ?v0 nil$)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (rev$ (fun_app$ (append$ ?v0) ?v1)) (fun_app$ (append$ (rev$ ?v1)) (rev$ ?v0))) ))
(assert (forall ((?v0 N_list$)) (= (= (remdups_adj$ ?v0) nil$) (= ?v0 nil$)) ))
(assert (forall ((?v0 N_list$) (?v1 N$)) (= (= (rev$ ?v0) (cons$ ?v1 nil$)) (= ?v0 (cons$ ?v1 nil$))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (= (cons$ ?v0 nil$) (rev$ ?v1)) (= ?v1 (cons$ ?v0 nil$))) ))
(assert (= (rev$ nil$) nil$))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_list$)) (! (= (remdups_adj$ (cons$ ?v0 (cons$ ?v1 ?v2))) (ite (= ?v0 ?v1) (remdups_adj$ (cons$ ?v0 ?v2)) (cons$ ?v0 (remdups_adj$ (cons$ ?v1 ?v2))))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))))
(assert (= (remdups_adj$ nil$) nil$))
(assert (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_list$) (?v3 N_list$)) (! (= (fun_app$ (fun_app$ak (map_tailrec_rev$ ?v0) (cons$ ?v1 ?v2)) ?v3) (fun_app$ (fun_app$ak (map_tailrec_rev$ ?v0) ?v2) (cons$ (fun_app$al ?v0 ?v1) ?v3))) :pattern ((fun_app$ (fun_app$ak (map_tailrec_rev$ ?v0) (cons$ ?v1 ?v2)) ?v3)))))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (and (= (remdups_adj$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (and (forall ((?v2 N$)) (=> (and (= ?v0 (cons$ ?v2 nil$)) (= ?v1 (cons$ ?v2 nil$))) false) ) (forall ((?v2 N$) (?v3 N$) (?v4 N_list$)) (=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4))) (= ?v1 (ite (= ?v2 ?v3) (remdups_adj$ (cons$ ?v2 ?v4)) (cons$ ?v2 (remdups_adj$ (cons$ ?v3 ?v4)))))) false) )))) false) ))
(assert (forall ((?v0 N$)) (! (= (remdups_adj$ (cons$ ?v0 nil$)) (cons$ ?v0 nil$)) :pattern ((fun_app$a uud$ ?v0)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (rev$ (cons$ ?v0 ?v1)) (fun_app$ (append$ (rev$ ?v1)) (cons$ ?v0 nil$))) ))
(assert (forall ((?v0 T_dtree_sum_list_set$) (?v1 T_dtree_sum$)) (=> (and (member$a nil$a ?v0) (member$ ?v1 (succ$ ?v0 nil$a))) (member$a nil$a (shift$ ?v0 ?v1))) ))
(assert (forall ((?v0 N_list_set$) (?v1 N$)) (=> (and (member$b nil$ ?v0) (member$c ?v1 (succ$a ?v0 nil$))) (member$b nil$ (shift$a ?v0 ?v1))) ))
(assert (forall ((?v0 N_list_set$) (?v1 N$) (?v2 N_list$)) (= (succ$a (shift$a ?v0 ?v1) ?v2) (succ$a ?v0 (cons$ ?v1 ?v2))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$)) (= (remdups_adj$ (fun_app$ (append$ ?v0) (cons$ ?v1 ?v2))) (fun_app$ (append$ (remdups_adj$ (fun_app$ (append$ ?v0) (cons$ ?v1 nil$)))) (tl$ (remdups_adj$ (cons$ ?v1 ?v2))))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (not (= ?v0 nil$)) (= (tl$ (fun_app$ (append$ ?v0) ?v1)) (fun_app$ (append$ (tl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (cons$ ?v0 (tl$ (remdups_adj$ (cons$ ?v0 ?v1)))) (remdups_adj$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (tl$ (cons$ ?v0 ?v1)) ?v1) :pattern ((cons$ ?v0 ?v1)))))
(assert (= (tl$ nil$) nil$))
(assert (forall ((?v0 N_list$)) (= (= (tl$ ?v0) nil$) (or (= ?v0 nil$) (exists ((?v1 N$)) (= ?v0 (cons$ ?v1 nil$)) ))) ))
(assert (forall ((?v0 N_list$)) (= (= nil$ (tl$ ?v0)) (or (= ?v0 nil$) (exists ((?v1 N$)) (= ?v0 (cons$ ?v1 nil$)) ))) ))
(assert (forall ((?v0 N_list$)) (=> (or (= ?v0 nil$) (not (= (tl$ ?v0) nil$))) (= (last$ (tl$ ?v0)) (last$ ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_set$) (?v2 N$)) (=> (member$b ?v0 (shift$a ?v1 ?v2)) (member$b (cons$ ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 N_list$)) (! (=> (not (= ?v0 nil$)) (= (rotate1$b ?v0) (fun_app$ (append$ (tl$ ?v0)) (cons$ (hd$ ?v0) nil$)))) :pattern ((rotate1$b ?v0)))))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (= (cons$ (hd$ ?v0) (tl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (= (cons$ (hd$ ?v0) (tl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (= (last$ (rev$ ?v0)) (hd$ ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (not (= ?v0 nil$)) (= (hd$ (fun_app$ (append$ ?v0) ?v1)) (hd$ ?v0))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (hd$ (cons$ ?v0 ?v1)) ?v0) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (hd$ (fun_app$ (append$ ?v0) ?v1)) (ite (= ?v0 nil$) (hd$ ?v1) (hd$ ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (=> (and (= (= ?v0 nil$) (= ?v1 nil$)) (=> (and (not (= ?v0 nil$)) (not (= ?v1 nil$))) (and (= (hd$ ?v0) (hd$ ?v1)) (= (tl$ ?v0) (tl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (= ?v0 (cons$ (hd$ ?v0) (tl$ ?v0))) false)) false) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (= (hd$ (rev$ ?v0)) (last$ ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$)) (=> (and (= (fun_app$ (splice$ ?v0) ?v1) ?v2) (and (forall ((?v3 N_list$)) (=> (and (= ?v0 nil$) (and (= ?v1 ?v3) (= ?v2 ?v3))) false) ) (and (forall ((?v3 N$) (?v4 N_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 nil$) (= ?v2 (cons$ ?v3 ?v4)))) false) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 N$) (?v6 N_list$)) (=> (and (= ?v0 (cons$ ?v3 ?v4)) (and (= ?v1 (cons$ ?v5 ?v6)) (= ?v2 (cons$ ?v3 (cons$ ?v5 (fun_app$ (splice$ ?v4) ?v6)))))) false) )))) false) ))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$ (splice$ ?v0) nil$) ?v0) :pattern ((splice$ ?v0)))))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (! (= (fun_app$ (splice$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3)) (cons$ ?v0 (cons$ ?v2 (fun_app$ (splice$ ?v1) ?v3)))) :pattern ((fun_app$ (splice$ (cons$ ?v0 ?v1)) (cons$ ?v2 ?v3))))))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$ (splice$ nil$) ?v0) ?v0) :pattern ((fun_app$ (splice$ nil$) ?v0)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (fun_app$ (splice$ (cons$ ?v0 ?v1)) nil$) (cons$ ?v0 ?v1)) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 N$)) (! (= (fun_app$e (member$d nil$) ?v0) false) :pattern ((fun_app$e (member$d nil$) ?v0)))))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$ak (fold$ uud$) ?v0) (append$ (rev$ ?v0))) :pattern ((fun_app$ak (fold$ uud$) ?v0)))))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N$)) (! (= (fun_app$e (member$d (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$e (member$d ?v1) ?v2))) :pattern ((fun_app$e (member$d (cons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 N_list$)) (! (= (rev$ ?v0) (fun_app$ (fun_app$ak (fold$ uud$) ?v0) nil$)) :pattern ((rev$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 N$)) (= (fun_app$ (append$ (fun_app$w (replicate$ ?v0) ?v1)) (cons$ ?v1 nil$)) (cons$ ?v1 (fun_app$w (replicate$ ?v0) ?v1))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (= (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) ?v2) (and (= (= ?v1 nil$) (= ?v2 nil$)) (=> (and (not (= ?v1 nil$)) (not (= ?v2 nil$))) (and (fun_app$e (fun_app$aj ?v0 (hd$ ?v1)) (hd$ ?v2)) (fun_app$d (fun_app$r (list_all2$ ?v0) (tl$ ?v1)) (tl$ ?v2)))))) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$)) (= (= nil$ (fun_app$ (map$ ?v0) ?v1)) (= ?v1 nil$)) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$)) (= (= (fun_app$ (map$ ?v0) ?v1) nil$) (= ?v1 nil$)) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$)) (= (= (fun_app$ (map$ ?v0) ?v1) nil$) (= ?v1 nil$)) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$)) (! (= (fun_app$d (fun_app$r (list_all2$ ?v0) nil$) ?v1) (= ?v1 nil$)) :pattern ((fun_app$d (fun_app$r (list_all2$ ?v0) nil$) ?v1)))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$)) (! (= (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) nil$) (= ?v1 nil$)) :pattern ((fun_app$r (list_all2$ ?v0) ?v1)))))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$) (?v2 N_list$)) (= (fun_app$ (map$ ?v0) (fun_app$ (append$ ?v1) ?v2)) (fun_app$ (append$ (fun_app$ (map$ ?v0) ?v1)) (fun_app$ (map$ ?v0) ?v2))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$) (?v3 N$) (?v4 N_list$)) (! (= (fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (and (fun_app$e (fun_app$aj ?v0 ?v1) ?v3) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$) (?v3 N$) (?v4 N_list$)) (! (= (fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4)) (and (fun_app$e (fun_app$aj ?v0 ?v1) ?v3) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v2)) (cons$ ?v3 ?v4))))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$) (?v3 N_list$)) (= (fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v2)) ?v3) (exists ((?v4 N$) (?v5 N_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (fun_app$e (fun_app$aj ?v0 ?v1) ?v4) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v2) ?v5))) )) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 N$) (?v5 N_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (fun_app$e (fun_app$aj ?v0 ?v4) ?v2) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N$) (?v3 N_list$) (?v4 N_list$)) (=> (and (fun_app$e (fun_app$aj ?v0 ?v1) ?v2) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v3) ?v4)) (fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v3)) (cons$ ?v2 ?v4))) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$ (map$ ?v0) (cons$ ?v1 ?v2)) (cons$ (fun_app$al ?v0 ?v1) (fun_app$ (map$ ?v0) ?v2))) :pattern ((fun_app$ (map$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (fun_app$ (map$ ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 N$) (?v5 N_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$al ?v0 ?v4) ?v2) (= (fun_app$ (map$ ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_N_fun$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (fun_app$ (map$ ?v2) ?v3)) (exists ((?v4 N$) (?v5 N_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (= ?v0 (fun_app$al ?v2 ?v4)) (= ?v1 (fun_app$ (map$ ?v2) ?v5)))) )) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (=> (= (fun_app$ (map$ ?v0) ?v1) (cons$ ?v2 ?v3)) (exists ((?v4 N$) (?v5 N_list$)) (and (= ?v1 (cons$ ?v4 ?v5)) (and (= (fun_app$al ?v0 ?v4) ?v2) (= (fun_app$ (map$ ?v0) ?v5) ?v3))) )) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N_N_fun$) (?v3 N_list$)) (=> (= (cons$ ?v0 ?v1) (fun_app$ (map$ ?v2) ?v3)) (exists ((?v4 N$) (?v5 N_list$)) (and (= ?v3 (cons$ ?v4 ?v5)) (and (= ?v0 (fun_app$al ?v2 ?v4)) (= ?v1 (fun_app$ (map$ ?v2) ?v5)))) )) ))
(assert (forall ((?v0 N_N_bool_fun_fun$)) (fun_app$d (fun_app$r (list_all2$ ?v0) nil$) nil$) ))
(assert (forall ((?v0 N_N_fun$)) (! (= (fun_app$ (map$ ?v0) nil$) nil$) :pattern ((map$ ?v0)))))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$) (?v4 N_list$)) (=> (and (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v3) ?v4)) (fun_app$d (fun_app$r (list_all2$ ?v0) (fun_app$ (append$ ?v1) ?v3)) (fun_app$ (append$ ?v2) ?v4))) ))
(assert (forall ((?v0 Nat$) (?v1 N$) (?v2 Nat$)) (= (fun_app$ (append$ (fun_app$w (replicate$ ?v0) ?v1)) (fun_app$w (replicate$ ?v2) ?v1)) (fun_app$ (append$ (fun_app$w (replicate$ ?v2) ?v1)) (fun_app$w (replicate$ ?v0) ?v1))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$)) (not (fun_app$d (fun_app$r (list_all2$ ?v0) nil$) (cons$ ?v1 ?v2))) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N$) (?v2 N_list$)) (not (fun_app$d (fun_app$r (list_all2$ ?v0) (cons$ ?v1 ?v2)) nil$)) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list_N_list_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) ?v2) (and (fun_app$d (fun_app$r ?v3 nil$) nil$) (forall ((?v4 N$) (?v5 N_list$) (?v6 N$) (?v7 N_list$)) (=> (and (fun_app$e (fun_app$aj ?v0 ?v4) ?v6) (fun_app$d (fun_app$r ?v3 ?v5) ?v7)) (fun_app$d (fun_app$r ?v3 (cons$ ?v4 ?v5)) (cons$ ?v6 ?v7))) ))) (fun_app$d (fun_app$r ?v3 ?v1) ?v2)) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list_N_list_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) ?v2) (and (fun_app$d (fun_app$r ?v3 nil$) nil$) (forall ((?v4 N$) (?v5 N_list$) (?v6 N$) (?v7 N_list$)) (=> (and (fun_app$e (fun_app$aj ?v0 ?v4) ?v6) (and (fun_app$d (fun_app$r (list_all2$ ?v0) ?v5) ?v7) (fun_app$d (fun_app$r ?v3 ?v5) ?v7))) (fun_app$d (fun_app$r ?v3 (cons$ ?v4 ?v5)) (cons$ ?v6 ?v7))) ))) (fun_app$d (fun_app$r ?v3 ?v1) ?v2)) ))
(assert (forall ((?v0 N_N_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (fun_app$d (fun_app$r (list_all2$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 nil$) (= ?v2 nil$)) false) (forall ((?v3 N$) (?v4 N_list$) (?v5 N$) (?v6 N_list$)) (=> (and (= ?v1 (cons$ ?v3 ?v4)) (and (= ?v2 (cons$ ?v5 ?v6)) (and (fun_app$e (fun_app$aj ?v0 ?v3) ?v5) (fun_app$d (fun_app$r (list_all2$ ?v0) ?v4) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 N_list$) (?v1 N_N_fun$)) (=> (not (= ?v0 nil$)) (= (last$ (fun_app$ (map$ ?v1) ?v0)) (fun_app$al ?v1 (last$ ?v0)))) ))
(assert (forall ((?v0 Nat$) (?v1 N$) (?v2 N_list$)) (= (fun_app$ (append$ (fun_app$w (replicate$ ?v0) ?v1)) (cons$ ?v1 ?v2)) (cons$ ?v1 (fun_app$ (append$ (fun_app$w (replicate$ ?v0) ?v1)) ?v2))) ))
(assert (forall ((?v0 N_list$) (?v1 N$)) (=> (= (remdups_adj$ ?v0) (cons$ ?v1 nil$)) (= ?v0 (fun_app$w (replicate$ (size$ ?v0)) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 N$)) (=> (not (= ?v0 zero$)) (= (last$ (fun_app$w (replicate$ ?v0) ?v1)) ?v1)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list$) (?v3 N_list$)) (=> (or (= (size$ ?v0) (size$ ?v1)) (= (size$ ?v2) (size$ ?v3))) (= (= (fun_app$ (append$ ?v0) ?v2) (fun_app$ (append$ ?v1) ?v3)) (and (= ?v0 ?v1) (= ?v2 ?v3)))) ))
(assert (forall ((?v0 N_list$)) (= (less$ zero$ (size$ ?v0)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 N_list$)) (= (= (size$ ?v0) zero$) (= ?v0 nil$)) ))
(assert (= (size$ nil$) zero$))
(assert (forall ((?v0 Nat$) (?v1 N$)) (= (= (fun_app$w (replicate$ ?v0) ?v1) nil$) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 N$)) (= (= nil$ (fun_app$w (replicate$ ?v0) ?v1)) (= ?v0 zero$)) ))
(check-sat)
(exit)

