{
    "content": [
        {
            "depth": 0,
            "name": "Basic definitions",
            "ty": "header"
        },
        {
            "name": "zero",
            "ty": "def.ax",
            "type": "'a"
        },
        {
            "name": "one",
            "ty": "def.ax",
            "type": "'a"
        },
        {
            "args": [],
            "constrs": [
                {
                    "args": [],
                    "name": "nat_zero",
                    "overload": "zero",
                    "type": "nat"
                },
                {
                    "args": [
                        "n"
                    ],
                    "name": "Suc",
                    "type": "nat => nat"
                }
            ],
            "name": "nat",
            "ty": "type.ind"
        },
        {
            "name": "nat_one",
            "overload": "one",
            "prop": "one = Suc zero",
            "ty": "def",
            "type": "nat"
        },
        {
            "name": "of_nat",
            "ty": "def.ax",
            "type": "nat => 'a"
        },
        {
            "name": "nat_of_nat",
            "overload": "of_nat",
            "prop": "nat_of_nat n = n",
            "ty": "def",
            "type": "nat => nat"
        },
        {
            "name": "not_Suc",
            "prop": "~(Suc n = 0)",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "Suc_inj",
            "prop": "(Suc m = Suc n) = (m = n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "Pre",
            "rules": [
                {
                    "prop": "Pre 0 = 0"
                },
                {
                    "prop": "Pre (Suc n) = n"
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat"
        },
        {
            "ascii_op": "+",
            "name": "plus",
            "ty": "def.ax",
            "type": "'a => 'a => 'a"
        },
        {
            "ascii_op": "-",
            "name": "minus",
            "ty": "def.ax",
            "type": "'a => 'a => 'a"
        },
        {
            "ascii_op": "*",
            "name": "times",
            "ty": "def.ax",
            "type": "'a => 'a => 'a"
        },
        {
            "name": "nat_plus",
            "overload": "plus",
            "rules": [
                {
                    "prop": "0 + n = (n::nat)"
                },
                {
                    "prop": "Suc m + n = Suc (m + n)"
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "ascii_op": "*",
            "name": "nat_times",
            "overload": "times",
            "rules": [
                {
                    "prop": "0 * (n::nat) = 0"
                },
                {
                    "prop": "Suc m * n = n + m * n"
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "name": "nat_norm",
            "ty": "macro"
        },
        {
            "name": "nat_norm",
            "ty": "method"
        },
        {
            "name": "add_0_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, (0::nat) + 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) + 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + 0 = n ⟶ Suc n + 0 = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + 0 = n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + 0 = n ⊢ n + 0 = n"
                },
                {
                    "args": "Suc (n + 0) = Suc n",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n + 0 = n ⊢ Suc (n + 0) = Suc n"
                },
                {
                    "args": "nat_plus_def_2, Suc n + 0 = Suc n",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + 0 = n ⊢ Suc n + 0 = Suc n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n + 0 = n ⟶ Suc n + 0 = Suc n"
                },
                {
                    "args": "nat_induct, {}, {P: λx::nat. x + 0 = x, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + 0 = x"
                }
            ],
            "prop": "x + 0 = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "add_1_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, Suc (0 + x) = Suc x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (0 + x) = Suc x"
                },
                {
                    "args": "nat_plus_def_2, Suc 0 + x = Suc x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 0 + x = Suc x"
                },
                {
                    "args": "nat_one_def, 1 + x = Suc x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 + x = Suc x"
                }
            ],
            "prop": "1 + x = Suc x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "add_1_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_one_def, 1 = Suc 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 = Suc 0"
                },
                {
                    "args": "nat_plus_def_1, 0 + 1 = Suc 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + 1 = Suc 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + 1 = Suc n ⟶ Suc n + 1 = Suc (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + 1 = Suc n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + 1 = Suc n ⊢ n + 1 = Suc n"
                },
                {
                    "args": "Suc (n + 1) = Suc (Suc n)",
                    "id": "2.2",
                    "prevs": [
                        "2.1",
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n + 1 = Suc n ⊢ Suc (n + 1) = Suc (Suc n)"
                },
                {
                    "args": "nat_plus_def_2, Suc n + 1 = Suc (Suc n)",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + 1 = Suc n ⊢ Suc n + 1 = Suc (Suc n)"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n + 1 = Suc n ⟶ Suc n + 1 = Suc (Suc n)"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x + 1 = Suc x, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + 1 = Suc x"
                }
            ],
            "prop": "x + 1 = Suc x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "add_Suc_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + Suc y = Suc (0 + y)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + Suc y = Suc (0 + y)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + Suc y = Suc (n + y) ⟶ Suc n + Suc y = Suc (Suc n + y)"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n + Suc y = Suc (n + y)",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n + Suc y = Suc (n + y) ⊢ n + Suc y = Suc (n + y)"
                },
                {
                    "args": "Suc (n + Suc y) = Suc (Suc (n + y))",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n + Suc y = Suc (n + y) ⊢ Suc (n + Suc y) = Suc (Suc (n + y))"
                },
                {
                    "args": "nat_plus_def_2, Suc n + Suc y = Suc (Suc n + y)",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n + Suc y = Suc (n + y) ⊢ Suc n + Suc y = Suc (Suc n + y)"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n + Suc y = Suc (n + y) ⟶ Suc n + Suc y = Suc (Suc n + y)"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x + Suc y = Suc (x + y), x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + Suc y = Suc (x + y)"
                }
            ],
            "prop": "x + Suc y = Suc (x + y)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_comm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + y = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + y = y"
                },
                {
                    "args": "add_0_right, 0 + y = y + 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + y = y + 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + y = y + n ⟶ Suc n + y = y + Suc n"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x + y = y + x",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = y + x ⊢ x + y = y + x"
                },
                {
                    "args": "Suc (x + y) = Suc (y + x)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x + y = y + x ⊢ Suc (x + y) = Suc (y + x)"
                },
                {
                    "args": "add_Suc_right, Suc (x + y) = y + Suc x",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = y + x ⊢ Suc (x + y) = y + Suc x"
                },
                {
                    "args": "nat_plus_def_2, Suc x + y = y + Suc x",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = y + x ⊢ Suc x + y = y + Suc x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x + y = y + x ⟶ Suc x + y = y + Suc x"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x + y = y + x, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y = y + x"
                }
            ],
            "prop": "x + y = y + x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "add_Suc_right"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + y + z = 0 + (y + z)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + y + z = 0 + (y + z)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n + y + z = n + (y + z) ⟶ Suc n + y + z = Suc n + (y + z)"
                },
                {
                    "args": "x, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x + y + z = x + (y + z)",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y + z = x + (y + z) ⊢ x + y + z = x + (y + z)"
                },
                {
                    "args": "Suc (x + y + z) = Suc (x + (y + z))",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x + y + z = x + (y + z) ⊢ Suc (x + y + z) = Suc (x + (y + z))"
                },
                {
                    "args": "nat_plus_def_2, Suc (x + y) + z = Suc (x + (y + z))",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y + z = x + (y + z) ⊢ Suc (x + y) + z = Suc (x + (y + z))"
                },
                {
                    "args": "nat_plus_def_2, Suc x + y + z = Suc x + (y + z)",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y + z = x + (y + z) ⊢ Suc x + y + z = Suc x + (y + z)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x + y + z = x + (y + z) ⟶ Suc x + y + z = Suc x + (y + z)"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x + y + z = x + (y + z), x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y + z = x + (y + z)"
                }
            ],
            "prop": "x + y + z = x + (y + z)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "mult_0_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, (0::nat) * 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * 0 = 0 ⟶ Suc n * 0 = 0"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * 0 = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * 0 = 0 ⊢ n * 0 = 0"
                },
                {
                    "args": "nat_plus_def_1, 0 + n * 0 = 0",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * 0 = 0 ⊢ 0 + n * 0 = 0"
                },
                {
                    "args": "nat_times_def_2, Suc n * 0 = 0",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * 0 = 0 ⊢ Suc n * 0 = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n * 0 = 0 ⟶ Suc n * 0 = 0"
                },
                {
                    "args": "nat_induct, {}, {P: λx::nat. x * 0 = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * 0 = 0"
                }
            ],
            "prop": "x * 0 = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "mult_1_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + 0 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x + 0 = x"
                },
                {
                    "args": "nat_times_def_1, x + 0 * x = x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x + 0 * x = x"
                },
                {
                    "args": "nat_times_def_2, Suc 0 * x = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 0 * x = x"
                },
                {
                    "args": "nat_one_def, 1 * x = x",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 * x = x"
                }
            ],
            "prop": "1 * x = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_one_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "mult_1_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, (0::nat) * 1 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 1 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * 1 = n ⟶ Suc n * 1 = Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * 1 = n",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * 1 = n ⊢ n * 1 = n"
                },
                {
                    "args": "1 + n = Suc n",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 1 + n = Suc n"
                },
                {
                    "args": "1 + n * 1 = Suc n",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2",
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n * 1 = n ⊢ 1 + n * 1 = Suc n"
                },
                {
                    "args": "nat_times_def_2, Suc n * 1 = Suc n",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * 1 = n ⊢ Suc n * 1 = Suc n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n * 1 = n ⟶ Suc n * 1 = Suc n"
                },
                {
                    "args": "nat_induct, {}, {P: λx::nat. x * 1 = x, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * 1 = x"
                }
            ],
            "prop": "x * 1 = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "mult_Suc_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * Suc y = 0 * y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * Suc y = 0 * y"
                },
                {
                    "args": "nat_plus_def_1, 0 * Suc y = 0 + 0 * y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * Suc y = 0 + 0 * y"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * Suc y = n + n * y ⟶ Suc n * Suc y = Suc n + Suc n * y"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "n * Suc y = n + n * y",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n * Suc y = n + n * y ⊢ n * Suc y = n + n * y"
                },
                {
                    "args": "Suc (y + (n + n * y)) = Suc (n + (y + n * y))",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (y + (n + n * y)) = Suc (n + (y + n * y))"
                },
                {
                    "args": "Suc (y + n * Suc y) = Suc (n + (y + n * y))",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n * Suc y = n + n * y ⊢ Suc (y + n * Suc y) = Suc (n + (y + n * y))"
                },
                {
                    "args": "nat_plus_def_2, Suc y + n * Suc y = Suc n + (y + n * y)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * Suc y = n + n * y ⊢ Suc y + n * Suc y = Suc n + (y + n * y)"
                },
                {
                    "args": "nat_times_def_2, Suc n * Suc y = Suc n + Suc n * y",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n * Suc y = n + n * y ⊢ Suc n * Suc y = Suc n + Suc n * y"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. n * Suc y = n + n * y ⟶ Suc n * Suc y = Suc n + Suc n * y"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x * Suc y = x + x * y, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * Suc y = x + x * y"
                }
            ],
            "prop": "x * Suc y = x + x * y",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "distrib_l",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_0_right, 0 = 0 + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 + 0"
                },
                {
                    "args": "nat_times_def_1, 0 * (y + z) = 0 * y + 0 * z",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * (y + z) = 0 * y + 0 * z"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * (y + z) = n * y + n * z ⟶ Suc n * (y + z) = Suc n * y + Suc n * z"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * (y + z) = x * y + x * z",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * (y + z) = x * y + x * z ⊢ x * (y + z) = x * y + x * z"
                },
                {
                    "args": "y + z + (x * y + x * z) = y + x * y + (z + x * z)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ y + z + (x * y + x * z) = y + x * y + (z + x * z)"
                },
                {
                    "args": "y + z + x * (y + z) = y + x * y + (z + x * z)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x * (y + z) = x * y + x * z ⊢ y + z + x * (y + z) = y + x * y + (z + x * z)"
                },
                {
                    "args": "nat_times_def_2, Suc x * (y + z) = Suc x * y + Suc x * z",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * (y + z) = x * y + x * z ⊢ Suc x * (y + z) = Suc x * y + Suc x * z"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x * (y + z) = x * y + x * z ⟶ Suc x * (y + z) = Suc x * y + Suc x * z"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x * (y + z) = x * y + x * z, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * (y + z) = x * y + x * z"
                }
            ],
            "prop": "x * (y + z) = x * y + x * z",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "distrib_r",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_0_right, 0 = 0 + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 + 0"
                },
                {
                    "args": "mult_0_right, (x + y) * 0 = x * 0 + y * 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (x + y) * 0 = x * 0 + y * 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (x + y) * n = x * n + y * n ⟶ (x + y) * Suc n = x * Suc n + y * Suc n"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "(x + y) * n = x * n + y * n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(x + y) * n = x * n + y * n ⊢ (x + y) * n = x * n + y * n"
                },
                {
                    "args": "x + y + (x * n + y * n) = x + x * n + (y + y * n)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x + y + (x * n + y * n) = x + x * n + (y + y * n)"
                },
                {
                    "args": "x + y + (x + y) * n = x + x * n + (y + y * n)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "(x + y) * n = x * n + y * n ⊢ x + y + (x + y) * n = x + x * n + (y + y * n)"
                },
                {
                    "args": "mult_Suc_right, (x + y) * Suc n = x * Suc n + y * Suc n",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(x + y) * n = x * n + y * n ⊢ (x + y) * Suc n = x * Suc n + y * Suc n"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (x + y) * n = x * n + y * n ⟶ (x + y) * Suc n = x * Suc n + y * Suc n"
                },
                {
                    "args": "nat_induct, {}, {P: λz. (x + y) * z = x * z + y * z, x: z}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (x + y) * z = x * z + y * z"
                }
            ],
            "prop": "(x + y) * z = x * z + y * z",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "mult_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * z = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * z = 0"
                },
                {
                    "args": "nat_times_def_1, 0 * y * z = 0 * (y * z)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * y * z = 0 * (y * z)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * y * z = n * (y * z) ⟶ Suc n * y * z = Suc n * (y * z)"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * y * z = x * (y * z)",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * y * z = x * (y * z) ⊢ x * y * z = x * (y * z)"
                },
                {
                    "args": "y * z + x * y * z = y * z + x * (y * z)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x * y * z = x * (y * z) ⊢ y * z + x * y * z = y * z + x * (y * z)"
                },
                {
                    "args": "distrib_r, (y + x * y) * z = y * z + x * (y * z)",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * y * z = x * (y * z) ⊢ (y + x * y) * z = y * z + x * (y * z)"
                },
                {
                    "args": "nat_times_def_2, Suc x * y * z = Suc x * (y * z)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * y * z = x * (y * z) ⊢ Suc x * y * z = Suc x * (y * z)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x * y * z = x * (y * z) ⟶ Suc x * y * z = Suc x * (y * z)"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x * y * z = x * (y * z), x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * y * z = x * (y * z)"
                }
            ],
            "prop": "x * y * z = x * (y * z)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "distrib_r"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "mult_comm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * y = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * y = 0"
                },
                {
                    "args": "mult_0_right, 0 * y = y * 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * y = y * 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. n * y = y * n ⟶ Suc n * y = y * Suc n"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "x * y = y * x",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x * y = y * x ⊢ x * y = y * x"
                },
                {
                    "args": "mult_Suc_right, y + y * x = y * Suc x",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ y + y * x = y * Suc x"
                },
                {
                    "args": "y + x * y = y * Suc x",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x * y = y * x ⊢ y + x * y = y * Suc x"
                },
                {
                    "args": "nat_times_def_2, Suc x * y = y * Suc x",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x * y = y * x ⊢ Suc x * y = y * Suc x"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. x * y = y * x ⟶ Suc x * y = y * Suc x"
                },
                {
                    "args": "nat_induct, {}, {P: λx. x * y = y * x, x: x}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x * y = y * x"
                }
            ],
            "prop": "x * y = y * x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_times_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "mult_Suc_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "add_cancel_left",
            "prop": "x + y = x + z --> y = z",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "add_cancel_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + z = y + z",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + z = y + z ⊢ x + z = y + z"
                },
                {
                    "args": "add_comm",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x + z = y + z ⊢ z + x = z + y"
                },
                {
                    "args": "add_cancel_left",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x + z = y + z ⊢ x = y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + z = y + z ⟶ x = y"
                }
            ],
            "prop": "x + z = y + z --> x = y",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "add_right_eq_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = x ⊢ x + y = x"
                },
                {
                    "args": "add_0_right, x + y = x + 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = x ⊢ x + y = x + 0"
                },
                {
                    "args": "add_cancel_left",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x + y = x ⊢ y = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = x ⟶ y = 0"
                }
            ],
            "prop": "x + y = x --> y = 0",
            "steps": [
                {
                    "goal": "x + y = x + 0",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "add_left_eq_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + y = y ⊢ x + y = y"
                },
                {
                    "args": "nat_plus_def_1, x + y = 0 + y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + y = y ⊢ x + y = 0 + y"
                },
                {
                    "args": "add_cancel_right",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "x + y = y ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x + y = y ⟶ x = 0"
                }
            ],
            "prop": "x + y = y --> x = 0",
            "steps": [
                {
                    "goal": "x + y = 0 + y",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "add_cancel_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_is_zero",
            "prop": "x + y = 0 --> x = 0 & y = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "mult_nonzero",
            "prop": "x * y = 0 --> x = 0 | y = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "depth": 0,
            "name": "Binary representation",
            "ty": "header"
        },
        {
            "attributes": [],
            "name": "bit0",
            "prop": "bit0 n = n + n",
            "ty": "def",
            "type": "nat => nat"
        },
        {
            "name": "bit1",
            "prop": "bit1 n = n + n + 1",
            "ty": "def",
            "type": "nat => nat"
        },
        {
            "name": "one_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Suc 1 = 1 + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc 1 = 1 + 1"
                },
                {
                    "args": "bit0_def, Suc 1 = 2",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc 1 = 2"
                }
            ],
            "prop": "Suc 1 = bit0 1",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "bit0_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Suc (n + n) = n + n + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (n + n) = n + n + 1"
                },
                {
                    "args": "bit1_def, Suc (n + n) = bit1 n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (n + n) = bit1 n"
                },
                {
                    "args": "bit0_def, Suc (bit0 n) = bit1 n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (bit0 n) = bit1 n"
                }
            ],
            "prop": "Suc (bit0 n) = bit1 n",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "bit1_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Suc (n + n + 1) = Suc n + Suc n",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Suc (n + n + 1) = Suc n + Suc n"
                },
                {
                    "args": "bit1_def, Suc (bit1 n) = Suc n + Suc n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (bit1 n) = Suc n + Suc n"
                },
                {
                    "args": "bit0_def, Suc (bit1 n) = bit0 (Suc n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (bit1 n) = bit0 (Suc n)"
                }
            ],
            "prop": "Suc (bit1 n) = bit0 (Suc n)",
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit0_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + (n + n) = m + n + (m + n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + (n + n) = m + n + (m + n)"
                },
                {
                    "args": "bit0_def, bit0 m + bit0 n = bit0 (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m + bit0 n = bit0 (m + n)"
                }
            ],
            "prop": "bit0 m + bit0 n = bit0 (m + n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit1_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + (n + n + 1) = m + n + (m + n) + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + (n + n + 1) = m + n + (m + n) + 1"
                },
                {
                    "args": "bit1_def, m + m + bit1 n = bit1 (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ m + m + bit1 n = bit1 (m + n)"
                },
                {
                    "args": "bit0_def, bit0 m + bit1 n = bit1 (m + n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m + bit1 n = bit1 (m + n)"
                }
            ],
            "prop": "bit0 m + bit1 n = bit1 (m + n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit0_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + 1 + (n + n) = m + n + (m + n) + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + 1 + (n + n) = m + n + (m + n) + 1"
                },
                {
                    "args": "bit1_def, bit1 m + (n + n) = bit1 (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + (n + n) = bit1 (m + n)"
                },
                {
                    "args": "bit0_def, bit1 m + bit0 n = bit1 (m + n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + bit0 n = bit1 (m + n)"
                }
            ],
            "prop": "bit1 m + bit0 n = bit1 (m + n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit1_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m + m + 1 + (n + n + 1) = Suc (m + n) + Suc (m + n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m + m + 1 + (n + n + 1) = Suc (m + n) + Suc (m + n)"
                },
                {
                    "args": "bit1_def, bit1 m + bit1 n = Suc (m + n) + Suc (m + n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + bit1 n = Suc (m + n) + Suc (m + n)"
                },
                {
                    "args": "bit0_def, bit1 m + bit1 n = bit0 (Suc (m + n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m + bit1 n = bit0 (Suc (m + n))"
                }
            ],
            "prop": "bit1 m + bit1 n = bit0 (Suc (m + n))",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit0_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m) * (n + n) = m * n + m * n + (m * n + m * n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m) * (n + n) = m * n + m * n + (m * n + m * n)"
                },
                {
                    "args": "bit0_def, bit0 m * bit0 n = bit0 (bit0 (m * n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m * bit0 n = bit0 (bit0 (m * n))"
                }
            ],
            "prop": "bit0 m * bit0 n = bit0 (bit0 (m * n))",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit1_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m) * (n + n + 1) = m * (n + n + 1) + m * (n + n + 1)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m) * (n + n + 1) = m * (n + n + 1) + m * (n + n + 1)"
                },
                {
                    "args": "bit1_def, (m + m) * bit1 n = m * bit1 n + m * bit1 n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (m + m) * bit1 n = m * bit1 n + m * bit1 n"
                },
                {
                    "args": "bit0_def, bit0 m * bit1 n = bit0 (m * bit1 n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit0 m * bit1 n = bit0 (m * bit1 n)"
                }
            ],
            "prop": "bit0 m * bit1 n = bit0 (m * bit1 n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit0_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m + 1) * (n + n) = (m + m + 1) * n + (m + m + 1) * n",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m + 1) * (n + n) = (m + m + 1) * n + (m + m + 1) * n"
                },
                {
                    "args": "bit1_def, bit1 m * (n + n) = bit1 m * n + bit1 m * n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * (n + n) = bit1 m * n + bit1 m * n"
                },
                {
                    "args": "bit0_def, bit1 m * bit0 n = bit0 (bit1 m * n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * bit0 n = bit0 (bit1 m * n)"
                }
            ],
            "prop": "bit1 m * bit0 n = bit0 (bit1 m * n)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_bit1_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(m + m + 1) * (n + n + 1) = m + n + (m * n + m * n) + (m + n + (m * n + m * n)) + 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (m + m + 1) * (n + n + 1) = m + n + (m * n + m * n) + (m + n + (m * n + m * n)) + 1"
                },
                {
                    "args": "bit1_def, bit1 m * bit1 n = bit1 (m + n + (m * n + m * n))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * bit1 n = bit1 (m + n + (m * n + m * n))"
                },
                {
                    "args": "bit0_def, bit1 m * bit1 n = bit1 (m + n + bit0 (m * n))",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ bit1 m * bit1 n = bit1 (m + n + bit0 (m * n))"
                }
            ],
            "prop": "bit1 m * bit1 n = bit1 (m + n + bit0 (m * n))",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_nonzero",
            "prop": "~ m = 0 --> ~ (bit0 m = 0)",
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "bit1_nonzero",
            "prop": "~ bit1 m = 0",
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "one_nonzero",
            "prop": "~ (1::nat) = 0",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "bit0_neq",
            "prop": "~ m = n --> ~ bit0 m = bit0 n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit1_neq",
            "prop": "~ m = n --> ~bit1 m = bit1 n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_bit1_neq",
            "prop": "~ bit0 m = bit1 n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "bit0_neq_one",
            "prop": "~ bit0 m = 1",
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "bit1_neq_one",
            "prop": "~ m = 0 --> ~ bit1 m = 1",
            "ty": "thm",
            "vars": {
                "m": "nat"
            }
        },
        {
            "name": "nat_const_ineq",
            "ty": "macro"
        },
        {
            "name": "nat_const_ineq",
            "ty": "method"
        },
        {
            "depth": 0,
            "name": "Test of macros",
            "ty": "header"
        },
        {
            "name": "nat_norm_test1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x + y + (y + z) = y * 2 + (x + z)",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x + y + (y + z) = y * 2 + (x + z)"
                }
            ],
            "prop": "(x + y) + (y + z) = y * 2 + (x + z)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat",
                "z": "nat"
            }
        },
        {
            "name": "nat_const_ineq_test1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬12 = 13",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬12 = 13"
                }
            ],
            "prop": "~ (12::nat) = 13",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "Sigma",
            "rules": [
                {
                    "prop": "Sigma f 0 = 0"
                },
                {
                    "prop": "Sigma f (Suc n) = Sigma f n + f n"
                }
            ],
            "ty": "def.ind",
            "type": "(nat => nat) => nat => nat"
        },
        {
            "name": "Sigma_plus",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 = 0 + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 + 0"
                },
                {
                    "args": "Sigma_def_1, Sigma (λx. f x + g x) 0 = Sigma f 0 + Sigma g 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sigma (λx. f x + g x) 0 = Sigma f 0 + Sigma g 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⟶ Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⊢ Sigma (λx. f x + g x) n = Sigma f n + Sigma g n"
                },
                {
                    "args": "Sigma f n + Sigma g n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ Sigma f n + Sigma g n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)"
                },
                {
                    "args": "Sigma (λx. f x + g x) n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⊢ Sigma (λx. f x + g x) n + (f n + g n) = Sigma f n + f n + (Sigma g n + g n)"
                },
                {
                    "args": "Sigma_def_2, Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⊢ Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. Sigma (λx. f x + g x) n = Sigma f n + Sigma g n ⟶ Sigma (λx. f x + g x) (Suc n) = Sigma f (Suc n) + Sigma g (Suc n)"
                },
                {
                    "args": "nat_induct, {}, {P: λn. Sigma (λx. f x + g x) n = Sigma f n + Sigma g n, x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Sigma (λx. f x + g x) n = Sigma f n + Sigma g n"
                }
            ],
            "prop": "Sigma (%x. f x + g x) n = Sigma f n + Sigma g n",
            "ty": "thm",
            "vars": {
                "f": "nat => nat",
                "g": "nat => nat",
                "n": "nat"
            }
        },
        {
            "ascii_op": "<=",
            "name": "less_eq",
            "ty": "def.ax",
            "type": "'a => 'a => bool"
        },
        {
            "ascii_op": "<",
            "name": "less",
            "ty": "def.ax",
            "type": "'a => 'a => bool"
        },
        {
            "name": "nat_less_eq",
            "overload": "less_eq",
            "rules": [
                {
                    "prop": "m <= 0 ⟷ m = 0"
                },
                {
                    "prop": "m <= Suc n ⟷ m = Suc n | m <= n"
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => bool"
        },
        {
            "name": "nat_less",
            "overload": "less",
            "rules": [
                {
                    "prop": "m < 0 ⟷ false"
                },
                {
                    "prop": "m < Suc n ⟷ m = n | m < n"
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lesseq_Suc_less",
            "prop": "Suc m ≤ n ⟷ m < n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "less_eq_exist",
            "prop": "m ≤ n ⟷ (∃p. n = m + p)",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "less_lesseq",
            "prop": "less m n = (less_eq m n & ~(m = n))",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [],
            "name": "less_lesseqI",
            "prop": "m <= n --> ~m = n --> m < n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [],
            "name": "less_eq_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "add_0_right, n = n + 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n = n + 0"
                },
                {
                    "args": "exI, {a: nat}, {P: λp. n = n + p, a: 0}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a. n = n + a"
                },
                {
                    "args": "less_eq_exist, n ≤ n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ≤ n"
                }
            ],
            "prop": "n <= n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [],
            "name": "less_eq_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "k ≤ m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ m ⊢ k ≤ m"
                },
                {
                    "args": "m ≤ n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "less_eq_exist",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "k ≤ m ⊢ ∃p. m = k + p"
                },
                {
                    "args": "less_eq_exist",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ n ⊢ ∃p. n = m + p"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = k + p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k + p ⊢ m = k + p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "n = m + q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + q ⊢ n = m + q"
                },
                {
                    "args": "k + p + q = k + (p + q)",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ k + p + q = k + (p + q)"
                },
                {
                    "args": "m + q = k + (p + q)",
                    "id": "9",
                    "prevs": [
                        "5",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = k + p, k ≤ m, m ≤ n, n = m + q ⊢ m + q = k + (p + q)"
                },
                {
                    "args": "n = k + (p + q)",
                    "id": "10",
                    "prevs": [
                        "7",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m + q, k ≤ m, m ≤ n, m = k + p ⊢ n = k + (p + q)"
                },
                {
                    "args": "exI, {a: nat}, {P: λp. n = k + p, a: p + q}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "k ≤ m, m ≤ n, m = k + p, n = m + q ⊢ ∃a. n = k + a"
                },
                {
                    "args": "less_eq_exist, k ≤ n",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "k ≤ m, m ≤ n, m = k + p, n = m + q ⊢ k ≤ n"
                },
                {
                    "args": "∃p. n = m + p, ∃p. m = k + p",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ k ≤ m ⟶ m ≤ n ⟶ k ≤ n"
                }
            ],
            "prop": "k <= m --> m <= n --> k <= n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "theorem": "less_eq_exist"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "p + q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "nat_minus",
            "overload": "minus",
            "rules": [
                {
                    "prop": "n - 0 = n"
                },
                {
                    "prop": "n - Suc m = Pre (n - m)"
                }
            ],
            "ty": "def.ind",
            "type": "nat => nat => nat"
        },
        {
            "name": "nat_minus_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, nat_minus 0 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ nat_minus 0 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. nat_minus 0 n = 0 ⟶ nat_minus 0 (Suc n) = 0"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "nat_minus 0 n = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "nat_minus 0 n = 0 ⊢ nat_minus 0 n = 0"
                },
                {
                    "args": "Pre_def_1, Pre 0 = 0",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre 0 = 0"
                },
                {
                    "args": "Pre (nat_minus 0 n) = 0",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "nat_minus 0 n = 0 ⊢ Pre (nat_minus 0 n) = 0"
                },
                {
                    "args": "nat_minus_def_2, nat_minus 0 (Suc n) = 0",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "nat_minus 0 n = 0 ⊢ nat_minus 0 (Suc n) = 0"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. nat_minus 0 n = 0 ⟶ nat_minus 0 (Suc n) = 0"
                },
                {
                    "args": "nat_induct, {}, {P: λx. nat_minus 0 x = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ nat_minus 0 x = 0"
                },
                {
                    "args": "eq_refl, {a: nat}, {x: x}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x = x"
                },
                {
                    "args": "conjI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ nat_minus 0 x = 0 ∧ x = x"
                },
                {
                    "args": "nat_minus_def_1, nat_minus 0 x = 0 ∧ nat_minus x 0 = x",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ nat_minus 0 x = 0 ∧ nat_minus x 0 = x"
                }
            ],
            "prop": "nat_minus 0 x = 0 & nat_minus x 0 = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "Pre_def_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "nat_minus_presuc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Pre_def_2, Pre (Suc x) = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Suc x) = x"
                },
                {
                    "args": "nat_minus_def_1, Pre (nat_minus (Suc x) 0) = nat_minus x 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (nat_minus (Suc x) 0) = nat_minus x 0"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. Pre (nat_minus (Suc x) n) = nat_minus x n ⟶ Pre (nat_minus (Suc x) (Suc n)) = nat_minus x (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "Pre (nat_minus (Suc x) n) = nat_minus x n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Pre (nat_minus (Suc x) n) = nat_minus x n ⊢ Pre (nat_minus (Suc x) n) = nat_minus x n"
                },
                {
                    "args": "Pre (Pre (nat_minus (Suc x) n)) = Pre (nat_minus x n)",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Pre (nat_minus (Suc x) n) = nat_minus x n ⊢ Pre (Pre (nat_minus (Suc x) n)) = Pre (nat_minus x n)"
                },
                {
                    "args": "nat_minus_def_2, Pre (nat_minus (Suc x) (Suc n)) = nat_minus x (Suc n)",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Pre (nat_minus (Suc x) n) = nat_minus x n ⊢ Pre (nat_minus (Suc x) (Suc n)) = nat_minus x (Suc n)"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. Pre (nat_minus (Suc x) n) = nat_minus x n ⟶ Pre (nat_minus (Suc x) (Suc n)) = nat_minus x (Suc n)"
                },
                {
                    "args": "nat_induct, {}, {P: λy. Pre (nat_minus (Suc x) y) = nat_minus x y, x: y}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Pre (nat_minus (Suc x) y) = nat_minus x y"
                }
            ],
            "prop": "Pre (nat_minus (Suc x) y) = nat_minus x y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "Pre_def_2"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "nat_minus_suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Pre_def_2, Pre (Suc x) = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Suc x) = x"
                },
                {
                    "args": "nat_minus_def_1, Pre (nat_minus (Suc x) 0) = nat_minus x 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (nat_minus (Suc x) 0) = nat_minus x 0"
                },
                {
                    "args": "nat_minus_def_2, nat_minus (Suc x) 1 = nat_minus x 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ nat_minus (Suc x) 1 = nat_minus x 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. nat_minus (Suc x) (Suc n) = nat_minus x n ⟶ nat_minus (Suc x) (Suc (Suc n)) = nat_minus x (Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "nat_minus (Suc x) (Suc n) = nat_minus x n",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "nat_minus (Suc x) (Suc n) = nat_minus x n ⊢ nat_minus (Suc x) (Suc n) = nat_minus x n"
                },
                {
                    "args": "nat_minus_presuc, Pre (Pre (nat_minus (Suc x) n)) = Pre (nat_minus x n)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Pre (Pre (nat_minus (Suc x) n)) = Pre (nat_minus x n)"
                },
                {
                    "args": "nat_minus_def_2, nat_minus (Suc x) (Suc (Suc n)) = nat_minus x (Suc n)",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "nat_minus (Suc x) (Suc n) = nat_minus x n ⊢ nat_minus (Suc x) (Suc (Suc n)) = nat_minus x (Suc n)"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. nat_minus (Suc x) (Suc n) = nat_minus x n ⟶ nat_minus (Suc x) (Suc (Suc n)) = nat_minus x (Suc n)"
                },
                {
                    "args": "nat_induct, {}, {P: λy. nat_minus (Suc x) (Suc y) = nat_minus x y, x: y}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ nat_minus (Suc x) (Suc y) = nat_minus x y"
                }
            ],
            "prop": "nat_minus (Suc x) (Suc y) = nat_minus x y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "Pre_def_2"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_2"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_presuc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "nat_minus_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, nat_minus 0 0 = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ nat_minus 0 0 = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. nat_minus n n = 0 ⟶ nat_minus (Suc n) (Suc n) = 0"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "nat_minus n n = 0",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "nat_minus n n = 0 ⊢ nat_minus n n = 0"
                },
                {
                    "args": "nat_minus_suc, nat_minus (Suc n) (Suc n) = 0",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "nat_minus n n = 0 ⊢ nat_minus (Suc n) (Suc n) = 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. nat_minus n n = 0 ⟶ nat_minus (Suc n) (Suc n) = 0"
                },
                {
                    "args": "nat_induct, {}, {P: λx. nat_minus x x = 0, x: x}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ nat_minus x x = 0"
                }
            ],
            "prop": "nat_minus x x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "name": "nat_plus_minus",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_minus_def_1, x - 0 = x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x - 0 = x"
                },
                {
                    "args": "add_0_right, x - 0 = x",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x - 0 = x"
                },
                {
                    "args": "add_0_right, x + 0 - 0 = x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ x + 0 - 0 = x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. x + n - n = x ⟶ x + Suc n - Suc n = x"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "x + n - n = x",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x + n - n = x ⊢ x + n - n = x"
                },
                {
                    "args": "nat_minus_suc, Suc (x + n) - Suc n = x",
                    "id": "3.2",
                    "prevs": [
                        "3.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + n - n = x ⊢ Suc (x + n) - Suc n = x"
                },
                {
                    "args": "add_Suc_right, x + Suc n - Suc n = x",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x + n - n = x ⊢ x + Suc n - Suc n = x"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. x + n - n = x ⟶ x + Suc n - Suc n = x"
                },
                {
                    "args": "nat_induct, {}, {P: λy. x + y - y = x, x: y}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x + y - y = x"
                }
            ],
            "prop": "nat_minus (x + y) y = x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "y"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_def_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "theorem": "add_Suc_right"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_minus_suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "nat_plus_minus_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_minus, nat_minus (y + x) x = y",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ nat_minus (y + x) x = y"
                },
                {
                    "args": "add_comm, nat_minus (x + y) x = y",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ nat_minus (x + y) x = y"
                }
            ],
            "prop": "nat_minus (x + y) x = y",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "add_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_minus"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "sub_eq_0",
            "prop": "(nat_minus x y = 0) = (x <= y)",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "add_subr2",
            "prop": "nat_minus x (x + y) = 0",
            "ty": "thm",
            "vars": {
                "x": "nat",
                "y": "nat"
            }
        }
    ],
    "description": "Natural numbers",
    "imports": [
        "logic"
    ],
    "name": "nat"
}