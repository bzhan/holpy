(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort N_list_set$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort N_N_list_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_list_bool_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_N_bool_fun_fun$ 0)
(declare-sort N_N_list_list_fun$ 0)
(declare-sort N_list_N_list_fun$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort N_dtree_bool_fun_fun$ 0)
(declare-sort N_list_list_bool_fun$ 0)
(declare-sort N_set_N_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort N_T_dtree_sum_list_fun$ 0)
(declare-sort N_list_N_list_list_fun$ 0)
(declare-sort T_dtree_sum_N_list_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort N_bool_fun_N_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_bool_fun$ 0)
(declare-sort N_list_N_list_bool_fun_fun$ 0)
(declare-sort N_list_T_dtree_sum_list_fun$ 0)
(declare-sort N_list_list_N_list_list_fun$ 0)
(declare-sort T_dtree_sum_N_list_list_fun$ 0)
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0)
(declare-sort N_list_N_list_list_bool_fun_fun$ 0)
(declare-sort N_list_list_N_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_list_fun$ 0)
(declare-sort Dtree_bool_fun_dtree_bool_fun_fun$ 0)
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0)
(declare-sort N_list_T_dtree_sum_list_bool_fun_fun$ 0)
(declare-sort N_list_list_N_list_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_N_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_T_dtree_sum_list_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_bool_fun_fun$ 0)
(declare-sort N_list_list_T_dtree_sum_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_N_list_list_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun_T_dtree_sum_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$ 0)
(declare-sort N_list$ 0)
(declare-sort N_list_list$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort T_dtree_sum_list$ 0)
(declare-sort N_list_list_list$ 0)
(declare-sort T_dtree_sum_list_list$ 0)
(declare-sort Dtree_list$ 0)
(declare-fun nil$ () N_list$)
(declare-fun hd$ (N_list$) N$)
(declare-fun tl$ (N_list$) N_list$)
(declare-fun cons$ (N$ N_list$) N_list$)
(declare-fun nil$a () N_list_list$)
(declare-fun hd$a (N_list_list$) N_list$)
(declare-fun tl$a (N_list_list$) N_list_list$)
(declare-fun cons$a (N_list$ N_list_list$) N_list_list$)
(declare-fun projl$ (T_dtree_sum$) T$)
(declare-fun inl$ (T$) T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$) Dtree$)
(declare-fun inr$ (Dtree$) T_dtree_sum$)
(declare-fun nil$b () T_dtree_sum_list$)
(declare-fun hd$b (T_dtree_sum_list$) T_dtree_sum$)
(declare-fun tl$b (T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun cons$b (T_dtree_sum$ T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun nil$c () N_list_list_list$)
(declare-fun hd$c (N_list_list_list$) N_list_list$)
(declare-fun tl$c (N_list_list_list$) N_list_list_list$)
(declare-fun cons$c (N_list_list$ N_list_list_list$) N_list_list_list$)
(declare-fun nil$d () T_dtree_sum_list_list$)
(declare-fun hd$d (T_dtree_sum_list_list$) T_dtree_sum_list$)
(declare-fun tl$d (T_dtree_sum_list_list$) T_dtree_sum_list_list$)
(declare-fun cons$d (T_dtree_sum_list$ T_dtree_sum_list_list$) T_dtree_sum_list_list$)
(declare-fun nil$e () Dtree_list$)
(declare-fun hd$e (Dtree_list$) Dtree$)
(declare-fun tl$e (Dtree_list$) Dtree_list$)
(declare-fun cons$e (Dtree$ Dtree_list$) Dtree_list$)
(declare-fun f$ () N_dtree_fun$)
(declare-fun nl$ () N_list$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ (N_list_set$) N_list_bool_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun eps$ (Dtree_bool_fun$) Dtree$)
(declare-fun itr$ (N_set$ Dtree$) N_set$)
(declare-fun nsa$ () N_set$)
(declare-fun reg$ (N_dtree_fun$) Dtree_bool_fun$)
(declare-fun set$ (N_list$) N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun uua$ (Dtree_set$) Dtree_bool_fun$)
(declare-fun uub$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun uuc$ (N_set$) N_bool_fun$)
(declare-fun uud$ (N_bool_fun$) N_N_bool_fun_fun$)
(declare-fun uue$ (Dtree$) N_dtree_bool_fun_fun$)
(declare-fun uuf$ (Dtree$) Dtree_bool_fun$)
(declare-fun uug$ (Dtree$) Dtree_bool_fun$)
(declare-fun uuh$ (N_set$) N_bool_fun_N_bool_fun_fun$)
(declare-fun uui$ (T_dtree_sum_set$) T_dtree_sum_bool_fun_T_dtree_sum_bool_fun_fun$)
(declare-fun uuj$ (Dtree_set$) Dtree_bool_fun_dtree_bool_fun_fun$)
(declare-fun uuk$ (N_bool_fun$) N_bool_fun_N_bool_fun_fun$)
(declare-fun uul$ (T_dtree_sum$) T_dtree_sum_set_T_dtree_sum_bool_fun_fun$)
(declare-fun uum$ (N$) N_set_N_bool_fun_fun$)
(declare-fun uun$ (N$) N_bool_fun_N_bool_fun_fun$)
(declare-fun bind$ (N_list$ N_N_list_list_fun$) N_list_list$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun eps$a (N_bool_fun$) N$)
(declare-fun eps$b (T_dtree_sum_bool_fun$) T_dtree_sum$)
(declare-fun inFr$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun last$ (N_list$) N$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun path$ (N_dtree_fun$) N_list_bool_fun$)
(declare-fun root$ (Dtree$) N$)
(declare-fun set$a (Dtree_list$) Dtree_set$)
(declare-fun set$b (N_list_list$) N_list_set$)
(declare-fun set$c (T_dtree_sum_list$) T_dtree_sum_set$)
(declare-fun tr1a$ () Dtree$)
(declare-fun bind$a (N_list$ N_T_dtree_sum_list_fun$) T_dtree_sum_list$)
(declare-fun bind$b (N_list_list$ N_list_N_list_fun$) N_list$)
(declare-fun bind$c (N_list_list$ N_list_N_list_list_fun$) N_list_list$)
(declare-fun bind$d (N_list_list$ N_list_T_dtree_sum_list_fun$) T_dtree_sum_list$)
(declare-fun bind$e (T_dtree_sum_list$ T_dtree_sum_N_list_fun$) N_list$)
(declare-fun bind$f (T_dtree_sum_list$ T_dtree_sum_N_list_list_fun$) N_list_list$)
(declare-fun bind$g (T_dtree_sum_list$ T_dtree_sum_T_dtree_sum_list_fun$) T_dtree_sum_list$)
(declare-fun bind$h (N_list$ N_N_list_fun$) N_list$)
(declare-fun coset$ (N_list$) N_set$)
(declare-fun deftr$ () N_dtree_fun$)
(declare-fun inFr2$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun last$a (N_list_list$) N_list$)
(declare-fun last$b (T_dtree_sum_list$) T_dtree_sum$)
(declare-fun subtr$ () N_set_dtree_dtree_bool_fun_fun_fun$)
(declare-fun union$ (N_list$) N_list_N_list_fun$)
(declare-fun coset$a (T_dtree_sum_list$) T_dtree_sum_set$)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun insert$ (N_list$) N_list_list_N_list_list_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun remove$ (N$) N_set_N_set_fun$)
(declare-fun subtr2$ () N_set_dtree_dtree_bool_fun_fun_fun$)
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun insert$a (T_dtree_sum$) T_dtree_sum_list_T_dtree_sum_list_fun$)
(declare-fun insert$b (N$) N_list_N_list_fun$)
(declare-fun insert$c (Dtree$ Dtree_list$) Dtree_list$)
(declare-fun insert$d (N$) N_set_N_set_fun$)
(declare-fun insert$e (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun less_eq$ (N_set$) N_set_bool_fun$)
(declare-fun member$a (Dtree$ Dtree_set$) Bool)
(declare-fun member$b (N_list$ N_list_set$) Bool)
(declare-fun member$c (N$) N_set_bool_fun$)
(declare-fun regular$ (Dtree$) Bool)
(declare-fun remove$a (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun subtrOf$ (Dtree$) N_dtree_fun$)
(declare-fun collect$a (N_bool_fun$) N_set$)
(declare-fun collect$b (N_list_bool_fun$) N_list_set$)
(declare-fun collect$c (Dtree_bool_fun$) Dtree_set$)
(declare-fun distinct$ (N_list$) Bool)
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$b (N_list_bool_fun$ N_list$) Bool)
(declare-fun fun_app$c (N_bool_fun$ N$) Bool)
(declare-fun fun_app$d (N_set_bool_fun$ N_set$) Bool)
(declare-fun fun_app$e (N_dtree_bool_fun_fun$ N$) Dtree_bool_fun$)
(declare-fun fun_app$f (T_dtree_sum_set_T_dtree_sum_bool_fun_fun$ T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun fun_app$g (N_set_N_bool_fun_fun$ N_set$) N_bool_fun$)
(declare-fun fun_app$h (T_dtree_sum_bool_fun_T_dtree_sum_bool_fun_fun$ T_dtree_sum_bool_fun$) T_dtree_sum_bool_fun$)
(declare-fun fun_app$i (Dtree_bool_fun_dtree_bool_fun_fun$ Dtree_bool_fun$) Dtree_bool_fun$)
(declare-fun fun_app$j (N_bool_fun_N_bool_fun_fun$ N_bool_fun$) N_bool_fun$)
(declare-fun fun_app$k (N_N_bool_fun_fun$ N$) N_bool_fun$)
(declare-fun fun_app$l (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$m (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$n (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$o (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun fun_app$p (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun fun_app$q (N_list_list_bool_fun$ N_list_list$) Bool)
(declare-fun fun_app$r (N_list_N_list_list_bool_fun_fun$ N_list$) N_list_list_bool_fun$)
(declare-fun fun_app$s (T_dtree_sum_list_bool_fun$ T_dtree_sum_list$) Bool)
(declare-fun fun_app$t (N_list_T_dtree_sum_list_bool_fun_fun$ N_list$) T_dtree_sum_list_bool_fun$)
(declare-fun fun_app$u (N_list_list_N_list_bool_fun_fun$ N_list_list$) N_list_bool_fun$)
(declare-fun fun_app$v (N_list_list_N_list_list_bool_fun_fun$ N_list_list$) N_list_list_bool_fun$)
(declare-fun fun_app$w (N_list_list_T_dtree_sum_list_bool_fun_fun$ N_list_list$) T_dtree_sum_list_bool_fun$)
(declare-fun fun_app$x (T_dtree_sum_list_N_list_bool_fun_fun$ T_dtree_sum_list$) N_list_bool_fun$)
(declare-fun fun_app$y (T_dtree_sum_list_N_list_list_bool_fun_fun$ T_dtree_sum_list$) N_list_list_bool_fun$)
(declare-fun fun_app$z (T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$ T_dtree_sum_list$) T_dtree_sum_list_bool_fun$)
(declare-fun greatest$ (N_set_bool_fun$) N_set$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(declare-fun less_eq$a (Dtree_set$ Dtree_set$) Bool)
(declare-fun less_eq$b (N_list_set$ N_list_set$) Bool)
(declare-fun less_eq$c (T_dtree_sum_set$ T_dtree_sum_set$) Bool)
(declare-fun less_eq$d (T_dtree_sum_bool_fun$ T_dtree_sum_bool_fun$) Bool)
(declare-fun less_eq$e (N_bool_fun$ N_bool_fun$) Bool)
(declare-fun list_ex1$ (N_list_bool_fun$) N_list_list_bool_fun$)
(declare-fun sublists$ (N_list$) N_list_list$)
(declare-fun the_elem$ (N_set$) N$)
(declare-fun distinct$a (N_list_list$) Bool)
(declare-fun distinct$b (T_dtree_sum_list$) Bool)
(declare-fun fun_app$aa (N_list_N_list_bool_fun_fun$ N_list$) N_list_bool_fun$)
(declare-fun fun_app$ab (N_list_list_N_list_list_fun$ N_list_list$) N_list_list$)
(declare-fun fun_app$ac (T_dtree_sum_list_T_dtree_sum_list_fun$ T_dtree_sum_list$) T_dtree_sum_list$)
(declare-fun fun_app$ad (N_list_N_list_fun$ N_list$) N_list$)
(declare-fun fun_app$ae (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun fun_app$af (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$ag (T_bool_fun$ T$) Bool)
(declare-fun fun_app$ah (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$ai (N_set_dtree_T_bool_fun_fun_fun$ N_set$) Dtree_T_bool_fun_fun$)
(declare-fun fun_app$aj (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(declare-fun list_ex1$a (T_dtree_sum_bool_fun$) T_dtree_sum_list_bool_fun$)
(declare-fun list_ex1$b (N_bool_fun$) N_list_bool_fun$)
(declare-fun list_ex1$c (Dtree_bool_fun$ Dtree_list$) Bool)
(declare-fun pred_list$ (N_bool_fun$) N_list_bool_fun$)
(declare-fun can_select$ (N_bool_fun$) N_set_bool_fun$)
(declare-fun pred_list$a (T_dtree_sum_bool_fun$) T_dtree_sum_list_bool_fun$)
(declare-fun can_select$a (T_dtree_sum_bool_fun$ T_dtree_sum_set$) Bool)
(declare-fun product_lists$ (N_list_list$) N_list_list$)
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 Dtree_set$) (?v1 Dtree$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 N_list_set$) (?v1 N_list$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$c (uuc$ ?v0) ?v1) (fun_app$d (member$c ?v1) ?v0)) :pattern ((fun_app$c (uuc$ ?v0) ?v1)))))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$a (uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$a (uug$ ?v0) ?v1)))))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$a (uuf$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$a (uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 Dtree$) (?v1 N$) (?v2 Dtree$)) (! (= (fun_app$a (fun_app$e (uue$ ?v0) ?v1) ?v2) (and (member$ (inr$ ?v2) (cont$ ?v0)) (= (root$ ?v2) ?v1))) :pattern ((fun_app$a (fun_app$e (uue$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (! (= (fun_app$ (fun_app$f (uul$ ?v0) ?v1) ?v2) (or (= ?v2 ?v0) (member$ ?v2 ?v1))) :pattern ((fun_app$ (fun_app$f (uul$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (! (= (fun_app$c (fun_app$g (uum$ ?v0) ?v1) ?v2) (or (= ?v2 ?v0) (fun_app$d (member$c ?v2) ?v1))) :pattern ((fun_app$c (fun_app$g (uum$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_bool_fun$) (?v2 T_dtree_sum$)) (! (= (fun_app$ (fun_app$h (uui$ ?v0) ?v1) ?v2) (and (member$ ?v2 ?v0) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$h (uui$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Dtree_set$) (?v1 Dtree_bool_fun$) (?v2 Dtree$)) (! (= (fun_app$a (fun_app$i (uuj$ ?v0) ?v1) ?v2) (and (member$a ?v2 ?v0) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$i (uuj$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 N_set$) (?v1 N_bool_fun$) (?v2 N$)) (! (= (fun_app$c (fun_app$j (uuh$ ?v0) ?v1) ?v2) (and (fun_app$d (member$c ?v2) ?v0) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$j (uuh$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$) (?v2 N$)) (! (= (fun_app$c (fun_app$j (uuk$ ?v0) ?v1) ?v2) (and (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$j (uuk$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 N$) (?v1 N_bool_fun$) (?v2 N$)) (! (= (fun_app$c (fun_app$j (uun$ ?v0) ?v1) ?v2) (=> (not (= ?v2 ?v0)) (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$j (uun$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 N_bool_fun$) (?v1 N$) (?v2 N$)) (! (= (fun_app$c (fun_app$k (uud$ ?v0) ?v1) ?v2) (or (not (fun_app$c ?v0 ?v2)) (= ?v1 ?v2))) :pattern ((fun_app$c (fun_app$k (uud$ ?v0) ?v1) ?v2)))))
(assert (not (fun_app$b (path$ f$) (cons$ (root$ tra$) nl$))))
(assert (fun_app$b (path$ f$) nl$))
(assert (fun_app$d (member$c (root$ tra$)) nsa$))
(assert (fun_app$a (reg$ f$) tr$))
(assert (fun_app$a (reg$ f$) tra$))
(assert (= (fun_app$l f$ (last$ nl$)) tr2$))
(assert (= (fun_app$l f$ (hd$ nl$)) tr1a$))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list$) (?v3 N_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Dtree$)) (! (= (fun_app$m hsubst_r$ ?v0) (root$ ?v0)) :pattern ((fun_app$m hsubst_r$ ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (not (= (cons$a ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (not (= (cons$b ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (not (= (cons$ ?v0 ?v1) ?v1)) ))
(assert (forall ((?v0 N$)) (= (root$ (fun_app$l deftr$ ?v0)) ?v0) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$)) (=> (and (fun_app$b (path$ ?v0) (cons$ ?v1 ?v2)) (not (= ?v2 nil$))) (fun_app$b (path$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N$)) (fun_app$b (path$ ?v0) (cons$ ?v1 nil$)) ))
(assert (fun_app$a (reg$ f$) tr1a$))
(assert (fun_app$a (reg$ f$) tra$))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (root$ (fun_app$n (hsubst$ ?v0) ?v1)) (root$ ?v1)) ))
(assert (fun_app$a (fun_app$o (fun_app$p subtr$ nsa$) tr2$) tr1a$))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (! (= (last$a (cons$a ?v0 ?v1)) (ite (= ?v1 nil$a) ?v0 (last$a ?v1))) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (= (last$b (cons$b ?v0 ?v1)) (ite (= ?v1 nil$b) ?v0 (last$b ?v1))) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (last$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) ?v0 (last$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (=> (not (= ?v0 nil$a)) false)) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$b) false) (=> (not (= ?v0 nil$b)) false)) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false) ))
(assert (forall ((?v0 N_list_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 N_list_list_list$)) (=> (= ?v0 (cons$c nil$a ?v1)) false) ) (forall ((?v1 N_list$) (?v2 N_list_list$) (?v3 N_list_list_list$)) (=> (= ?v0 (cons$c (cons$a ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_list_list$)) (=> (and (=> (= ?v0 nil$d) false) (and (forall ((?v1 T_dtree_sum_list_list$)) (=> (= ?v0 (cons$d nil$b ?v1)) false) ) (forall ((?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$) (?v3 T_dtree_sum_list_list$)) (=> (= ?v0 (cons$d (cons$b ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 N_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false) ) (forall ((?v1 N$) (?v2 N_list$) (?v3 N_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false) ))) false) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (! (=> (= ?v0 nil$a) (= (last$a (cons$a ?v1 ?v0)) ?v1)) :pattern ((cons$a ?v1 ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (! (=> (= ?v0 nil$b) (= (last$b (cons$b ?v1 ?v0)) ?v1)) :pattern ((cons$b ?v1 ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N$)) (! (=> (= ?v0 nil$) (= (last$ (cons$ ?v1 ?v0)) ?v1)) :pattern ((cons$ ?v1 ?v0)))))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (! (=> (not (= ?v0 nil$a)) (= (last$a (cons$a ?v1 ?v0)) (last$a ?v0))) :pattern ((cons$a ?v1 ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (! (=> (not (= ?v0 nil$b)) (= (last$b (cons$b ?v1 ?v0)) (last$b ?v0))) :pattern ((cons$b ?v1 ?v0)))))
(assert (forall ((?v0 N_list$) (?v1 N$)) (! (=> (not (= ?v0 nil$)) (= (last$ (cons$ ?v1 ?v0)) (last$ ?v0))) :pattern ((cons$ ?v1 ?v0)))))
(assert (forall ((?v0 N$)) (fun_app$a (reg$ deftr$) (fun_app$l deftr$ ?v0)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (not (= nil$a (cons$a ?v0 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (not (= nil$b (cons$b ?v0 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (not (= nil$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 N_list_N_list_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list_list$)) (=> (and (fun_app$q (fun_app$r ?v0 nil$) nil$a) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$q (fun_app$r ?v0 (cons$ ?v3 ?v4)) nil$a) ) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$q (fun_app$r ?v0 nil$) (cons$a ?v3 ?v4)) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (fun_app$q (fun_app$r ?v0 ?v4) ?v6) (fun_app$q (fun_app$r ?v0 (cons$ ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$q (fun_app$r ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_T_dtree_sum_list_bool_fun_fun$) (?v1 N_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$s (fun_app$t ?v0 nil$) nil$b) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$s (fun_app$t ?v0 (cons$ ?v3 ?v4)) nil$b) ) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$s (fun_app$t ?v0 nil$) (cons$b ?v3 ?v4)) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 T_dtree_sum$) (?v6 T_dtree_sum_list$)) (=> (fun_app$s (fun_app$t ?v0 ?v4) ?v6) (fun_app$s (fun_app$t ?v0 (cons$ ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$s (fun_app$t ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list_N_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list$)) (=> (and (fun_app$b (fun_app$u ?v0 nil$a) nil$) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$b (fun_app$u ?v0 (cons$a ?v3 ?v4)) nil$) ) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$b (fun_app$u ?v0 nil$a) (cons$ ?v3 ?v4)) ) (forall ((?v3 N_list$) (?v4 N_list_list$) (?v5 N$) (?v6 N_list$)) (=> (fun_app$b (fun_app$u ?v0 ?v4) ?v6) (fun_app$b (fun_app$u ?v0 (cons$a ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$b (fun_app$u ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list_N_list_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 N_list_list$)) (=> (and (fun_app$q (fun_app$v ?v0 nil$a) nil$a) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$q (fun_app$v ?v0 (cons$a ?v3 ?v4)) nil$a) ) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$q (fun_app$v ?v0 nil$a) (cons$a ?v3 ?v4)) ) (forall ((?v3 N_list$) (?v4 N_list_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (fun_app$q (fun_app$v ?v0 ?v4) ?v6) (fun_app$q (fun_app$v ?v0 (cons$a ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$q (fun_app$v ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list_T_dtree_sum_list_bool_fun_fun$) (?v1 N_list_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$s (fun_app$w ?v0 nil$a) nil$b) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$s (fun_app$w ?v0 (cons$a ?v3 ?v4)) nil$b) ) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$s (fun_app$w ?v0 nil$a) (cons$b ?v3 ?v4)) ) (forall ((?v3 N_list$) (?v4 N_list_list$) (?v5 T_dtree_sum$) (?v6 T_dtree_sum_list$)) (=> (fun_app$s (fun_app$w ?v0 ?v4) ?v6) (fun_app$s (fun_app$w ?v0 (cons$a ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$s (fun_app$w ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list_N_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list$)) (=> (and (fun_app$b (fun_app$x ?v0 nil$b) nil$) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$b (fun_app$x ?v0 (cons$b ?v3 ?v4)) nil$) ) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$b (fun_app$x ?v0 nil$b) (cons$ ?v3 ?v4)) ) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$) (?v5 N$) (?v6 N_list$)) (=> (fun_app$b (fun_app$x ?v0 ?v4) ?v6) (fun_app$b (fun_app$x ?v0 (cons$b ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$b (fun_app$x ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list_N_list_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 N_list_list$)) (=> (and (fun_app$q (fun_app$y ?v0 nil$b) nil$a) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$q (fun_app$y ?v0 (cons$b ?v3 ?v4)) nil$a) ) (and (forall ((?v3 N_list$) (?v4 N_list_list$)) (fun_app$q (fun_app$y ?v0 nil$b) (cons$a ?v3 ?v4)) ) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$) (?v5 N_list$) (?v6 N_list_list$)) (=> (fun_app$q (fun_app$y ?v0 ?v4) ?v6) (fun_app$q (fun_app$y ?v0 (cons$b ?v3 ?v4)) (cons$a ?v5 ?v6))) )))) (fun_app$q (fun_app$y ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_list_T_dtree_sum_list_bool_fun_fun$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_list$)) (=> (and (fun_app$s (fun_app$z ?v0 nil$b) nil$b) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$s (fun_app$z ?v0 (cons$b ?v3 ?v4)) nil$b) ) (and (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$)) (fun_app$s (fun_app$z ?v0 nil$b) (cons$b ?v3 ?v4)) ) (forall ((?v3 T_dtree_sum$) (?v4 T_dtree_sum_list$) (?v5 T_dtree_sum$) (?v6 T_dtree_sum_list$)) (=> (fun_app$s (fun_app$z ?v0 ?v4) ?v6) (fun_app$s (fun_app$z ?v0 (cons$b ?v3 ?v4)) (cons$b ?v5 ?v6))) )))) (fun_app$s (fun_app$z ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_N_list_bool_fun_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (fun_app$b (fun_app$aa ?v0 nil$) nil$) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$b (fun_app$aa ?v0 (cons$ ?v3 ?v4)) nil$) ) (and (forall ((?v3 N$) (?v4 N_list$)) (fun_app$b (fun_app$aa ?v0 nil$) (cons$ ?v3 ?v4)) ) (forall ((?v3 N$) (?v4 N_list$) (?v5 N$) (?v6 N_list$)) (=> (fun_app$b (fun_app$aa ?v0 ?v4) ?v6) (fun_app$b (fun_app$aa ?v0 (cons$ ?v3 ?v4)) (cons$ ?v5 ?v6))) )))) (fun_app$b (fun_app$aa ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_list_bool_fun$)) (=> (and (not (= ?v0 nil$a)) (and (forall ((?v2 N_list$)) (fun_app$q ?v1 (cons$a ?v2 nil$a)) ) (forall ((?v2 N_list$) (?v3 N_list_list$)) (=> (and (not (= ?v3 nil$a)) (fun_app$q ?v1 ?v3)) (fun_app$q ?v1 (cons$a ?v2 ?v3))) ))) (fun_app$q ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list_bool_fun$)) (=> (and (not (= ?v0 nil$b)) (and (forall ((?v2 T_dtree_sum$)) (fun_app$s ?v1 (cons$b ?v2 nil$b)) ) (forall ((?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (and (not (= ?v3 nil$b)) (fun_app$s ?v1 ?v3)) (fun_app$s ?v1 (cons$b ?v2 ?v3))) ))) (fun_app$s ?v1 ?v0)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 N$)) (fun_app$b ?v1 (cons$ ?v2 nil$)) ) (forall ((?v2 N$) (?v3 N_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$b ?v1 ?v3)) (fun_app$b ?v1 (cons$ ?v2 ?v3))) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$) (?v2 N_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) (not (= ?v0 nil$a))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) (not (= ?v0 nil$b))) ))
(assert (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$))) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (forall ((?v1 N_list$) (?v2 N_list_list$)) (=> (= ?v0 (cons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$b) false) (forall ((?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (=> (= ?v0 (cons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 N$) (?v2 N_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 N_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 N_list$)) (=> (= ?v0 (cons$a ?v1 nil$a)) false) ) (forall ((?v1 N_list$) (?v2 N_list$) (?v3 N_list_list$)) (=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 T_dtree_sum$)) (=> (= ?v0 (cons$b ?v1 nil$b)) false) ) (forall ((?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 N$)) (=> (= ?v0 (cons$ ?v1 nil$)) false) ) (forall ((?v1 N$) (?v2 N$) (?v3 N_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false) ))) false) ))
(assert (forall ((?v0 N_list_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 N_list$) (?v2 N_list_list$)) (= ?v0 (cons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (= (not (= ?v0 nil$b)) (exists ((?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (= ?v0 (cons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 N_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 N$) (?v2 N_list$)) (= ?v0 (cons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (! (= (hd$a (cons$a ?v0 ?v1)) ?v0) :pattern ((cons$a ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (= (hd$b (cons$b ?v0 ?v1)) ?v0) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (hd$ (cons$ ?v0 ?v1)) ?v0) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (fun_app$b (path$ ?v0) ?v1) (not (= ?v1 nil$))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (root$ ?v0) (root$ ?v1)) (= (fun_app$n (hsubst$ ?v1) ?v0) (fun_app$n (hsubst$ ?v1) ?v1))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (=> (fun_app$a (reg$ ?v0) ?v1) (= (fun_app$l ?v0 (root$ ?v1)) ?v1)) ))
(assert (=> (fun_app$a (reg$ f$) tr1a$) (exists ((?v0 N_list$)) (and (fun_app$b (path$ f$) ?v0) (and (= (fun_app$l f$ (hd$ ?v0)) tr1a$) (and (= (fun_app$l f$ (last$ ?v0)) tr2$) (fun_app$d (less_eq$ (set$ ?v0)) nsa$)))) )))
(assert (fun_app$a (fun_app$o (fun_app$p subtr$ ns$) tr1$) tr$))
(assert (=> (forall ((?v0 N_list$)) (=> (and (fun_app$b (path$ f$) ?v0) (and (= (fun_app$l f$ (hd$ ?v0)) tr1a$) (and (= (fun_app$l f$ (last$ ?v0)) tr2$) (fun_app$d (less_eq$ (set$ ?v0)) nsa$)))) false) ) false))
(assert (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (and (fun_app$a (reg$ ?v1) ?v0) (forall ((?v2 N$)) (= (root$ (fun_app$l ?v1 ?v2)) ?v2) )) )) ))
(assert (fun_app$d (less_eq$ (set$ nl$)) nsa$))
(assert (forall ((?v0 N_N_list_list_fun$)) (! (= (bind$ nil$ ?v0) nil$a) :pattern ((bind$ nil$ ?v0)))))
(assert (forall ((?v0 N_T_dtree_sum_list_fun$)) (! (= (bind$a nil$ ?v0) nil$b) :pattern ((bind$a nil$ ?v0)))))
(assert (forall ((?v0 N_list_N_list_fun$)) (! (= (bind$b nil$a ?v0) nil$) :pattern ((bind$b nil$a ?v0)))))
(assert (forall ((?v0 N_list_N_list_list_fun$)) (! (= (bind$c nil$a ?v0) nil$a) :pattern ((bind$c nil$a ?v0)))))
(assert (forall ((?v0 N_list_T_dtree_sum_list_fun$)) (! (= (bind$d nil$a ?v0) nil$b) :pattern ((bind$d nil$a ?v0)))))
(assert (forall ((?v0 T_dtree_sum_N_list_fun$)) (! (= (bind$e nil$b ?v0) nil$) :pattern ((bind$e nil$b ?v0)))))
(assert (forall ((?v0 T_dtree_sum_N_list_list_fun$)) (! (= (bind$f nil$b ?v0) nil$a) :pattern ((bind$f nil$b ?v0)))))
(assert (forall ((?v0 T_dtree_sum_T_dtree_sum_list_fun$)) (! (= (bind$g nil$b ?v0) nil$b) :pattern ((bind$g nil$b ?v0)))))
(assert (forall ((?v0 N_N_list_fun$)) (! (= (bind$h nil$ ?v0) nil$) :pattern ((bind$h nil$ ?v0)))))
(assert (forall ((?v0 N_list$)) (! (= (fun_app$ab (insert$ ?v0) nil$a) (cons$a ?v0 nil$a)) :pattern ((insert$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$ac (insert$a ?v0) nil$b) (cons$b ?v0 nil$b)) :pattern ((insert$a ?v0)))))
(assert (forall ((?v0 N$)) (! (= (fun_app$ad (insert$b ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$b ?v0)))))
(assert (member$ (inr$ tr1a$) (cont$ tra$)))
(assert (forall ((?v0 N_list_bool_fun$)) (! (= (fun_app$q (list_ex1$ ?v0) nil$a) false) :pattern ((list_ex1$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (! (= (fun_app$s (list_ex1$a ?v0) nil$b) false) :pattern ((list_ex1$a ?v0)))))
(assert (forall ((?v0 N_bool_fun$)) (! (= (fun_app$b (list_ex1$b ?v0) nil$) false) :pattern ((list_ex1$b ?v0)))))
(assert (forall ((?v0 Dtree$)) (! (= (hsubst$ ?v0) (unfold$ hsubst_r$ (hsubst_c$ ?v0))) :pattern ((hsubst$ ?v0)))))
(assert (forall ((?v0 Dtree$) (?v1 Dtree_list$)) (! (=> (member$a ?v0 (set$a ?v1)) (= (insert$c ?v0 ?v1) ?v1)) :pattern ((insert$c ?v0 ?v1)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (! (=> (member$b ?v0 (set$b ?v1)) (= (fun_app$ab (insert$ ?v0) ?v1) ?v1)) :pattern ((fun_app$ab (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (=> (member$ ?v0 (set$c ?v1)) (= (fun_app$ac (insert$a ?v0) ?v1) ?v1)) :pattern ((fun_app$ac (insert$a ?v0) ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (=> (fun_app$d (member$c ?v0) (set$ ?v1)) (= (fun_app$ad (insert$b ?v0) ?v1) ?v1)) :pattern ((fun_app$ad (insert$b ?v0) ?v1)))))
(assert (forall ((?v0 Dtree$) (?v1 Dtree_list$)) (! (=> (not (member$a ?v0 (set$a ?v1))) (= (insert$c ?v0 ?v1) (cons$e ?v0 ?v1))) :pattern ((insert$c ?v0 ?v1)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (! (=> (not (member$b ?v0 (set$b ?v1))) (= (fun_app$ab (insert$ ?v0) ?v1) (cons$a ?v0 ?v1))) :pattern ((fun_app$ab (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (=> (not (member$ ?v0 (set$c ?v1))) (= (fun_app$ac (insert$a ?v0) ?v1) (cons$b ?v0 ?v1))) :pattern ((fun_app$ac (insert$a ?v0) ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (=> (not (fun_app$d (member$c ?v0) (set$ ?v1))) (= (fun_app$ad (insert$b ?v0) ?v1) (cons$ ?v0 ?v1))) :pattern ((fun_app$ad (insert$b ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2)) ) (= (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 N_list_set$)) (= (collect$b (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 Dtree_set$)) (= (collect$c (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (= (collect$ (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 N_set$)) (= (collect$a (uuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 N_list$) (?v1 N_list_bool_fun$)) (= (member$b ?v0 (collect$b ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree_bool_fun$)) (= (member$a ?v0 (collect$c ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (fun_app$d (member$c ?v0) (collect$a ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 Dtree_list$) (?v1 Dtree_set$)) (= (less_eq$a (set$a ?v0) ?v1) (forall ((?v2 Dtree$)) (=> (member$a ?v2 (set$a ?v0)) (member$a ?v2 ?v1)) )) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list_set$)) (= (less_eq$b (set$b ?v0) ?v1) (forall ((?v2 N_list$)) (=> (member$b ?v2 (set$b ?v0)) (member$b ?v2 ?v1)) )) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_set$)) (= (less_eq$c (set$c ?v0) ?v1) (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 (set$c ?v0)) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 N_list$) (?v1 N_set$)) (= (fun_app$d (less_eq$ (set$ ?v0)) ?v1) (forall ((?v2 N$)) (=> (fun_app$d (member$c ?v2) (set$ ?v0)) (fun_app$d (member$c ?v2) ?v1)) )) ))
(assert (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree_list$)) (= (list_ex1$c ?v0 ?v1) (exists ((?v2 Dtree$)) (and (and (member$a ?v2 (set$a ?v1)) (fun_app$a ?v0 ?v2)) (forall ((?v3 Dtree$)) (=> (and (member$a ?v3 (set$a ?v1)) (fun_app$a ?v0 ?v3)) (= ?v3 ?v2)) )) )) ))
(assert (forall ((?v0 N_list_bool_fun$) (?v1 N_list_list$)) (= (fun_app$q (list_ex1$ ?v0) ?v1) (exists ((?v2 N_list$)) (and (and (member$b ?v2 (set$b ?v1)) (fun_app$b ?v0 ?v2)) (forall ((?v3 N_list$)) (=> (and (member$b ?v3 (set$b ?v1)) (fun_app$b ?v0 ?v3)) (= ?v3 ?v2)) )) )) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_list$)) (= (fun_app$s (list_ex1$a ?v0) ?v1) (exists ((?v2 T_dtree_sum$)) (and (and (member$ ?v2 (set$c ?v1)) (fun_app$ ?v0 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (member$ ?v3 (set$c ?v1)) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2)) )) )) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_list$)) (= (fun_app$b (list_ex1$b ?v0) ?v1) (exists ((?v2 N$)) (and (and (fun_app$d (member$c ?v2) (set$ ?v1)) (fun_app$c ?v0 ?v2)) (forall ((?v3 N$)) (=> (and (fun_app$d (member$c ?v3) (set$ ?v1)) (fun_app$c ?v0 ?v3)) (= ?v3 ?v2)) )) )) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (regular$ ?v0) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v2) ?v0)) (regular$ ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$d (member$c (root$ ?v0)) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v2) ?v3))) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$d (member$c (root$ ?v0)) ?v1) (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v2) ?v3) (member$ (inr$ ?v3) (cont$ ?v0)))) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v2) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (fun_app$d (less_eq$ ?v0) ?v3)) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v2) ?v3)) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (fun_app$d (member$c (root$ ?v3)) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v4) ?v5) ?v6) (member$ (inr$ ?v6) (cont$ ?v3))))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set_dtree_dtree_bool_fun_fun_fun$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (and (forall ((?v4 N_set$) (?v5 Dtree$)) (fun_app$a (fun_app$o (fun_app$p ?v3 ?v4) ?v5) ?v5) ) (forall ((?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$) (?v7 Dtree$)) (=> (and (fun_app$d (member$c (root$ ?v5)) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v6)) (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v4) ?v6) ?v7) (fun_app$a (fun_app$o (fun_app$p ?v3 ?v4) ?v6) ?v7)))) (fun_app$a (fun_app$o (fun_app$p ?v3 ?v4) ?v5) ?v7)) ))) (fun_app$a (fun_app$o (fun_app$p ?v3 ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (fun_app$d (member$c (root$ ?v3)) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v4) ?v5) ?v6) (member$ (inr$ ?v6) (cont$ ?v3))))))) ))) ))
(assert (forall ((?v0 N_list_list$) (?v1 N_list$)) (less_eq$b (set$b ?v0) (set$b (cons$a ?v1 ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum$)) (less_eq$c (set$c ?v0) (set$c (cons$b ?v1 ?v0))) ))
(assert (forall ((?v0 N_list$) (?v1 N$)) (fun_app$d (less_eq$ (set$ ?v0)) (set$ (cons$ ?v1 ?v0))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$a (reg$ ?v0) ?v1) (member$ (inr$ ?v2) (cont$ ?v1))) (fun_app$a (reg$ ?v0) ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree_list$)) (! (= (insert$c ?v0 ?v1) (ite (member$a ?v0 (set$a ?v1)) ?v1 (cons$e ?v0 ?v1))) :pattern ((insert$c ?v0 ?v1)))))
(assert (forall ((?v0 N_list$) (?v1 N_list_list$)) (! (= (fun_app$ab (insert$ ?v0) ?v1) (ite (member$b ?v0 (set$b ?v1)) ?v1 (cons$a ?v0 ?v1))) :pattern ((fun_app$ab (insert$ ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (= (fun_app$ac (insert$a ?v0) ?v1) (ite (member$ ?v0 (set$c ?v1)) ?v1 (cons$b ?v0 ?v1))) :pattern ((fun_app$ac (insert$a ?v0) ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (fun_app$ad (insert$b ?v0) ?v1) (ite (fun_app$d (member$c ?v0) (set$ ?v1)) ?v1 (cons$ ?v0 ?v1))) :pattern ((fun_app$ad (insert$b ?v0) ?v1)))))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$ae (hsubst_c$ ?v0) ?v1) (ite (= (root$ ?v1) (root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$ae (hsubst_c$ ?v0) ?v1)))))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_list_list$)) (=> (member$b ?v0 (set$b (cons$a ?v1 ?v2))) (or (= ?v0 ?v1) (member$b ?v0 (set$b ?v2)))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (=> (member$ ?v0 (set$c (cons$b ?v1 ?v2))) (or (= ?v0 ?v1) (member$ ?v0 (set$c ?v2)))) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_list$)) (=> (fun_app$d (member$c ?v0) (set$ (cons$ ?v1 ?v2))) (or (= ?v0 ?v1) (fun_app$d (member$c ?v0) (set$ ?v2)))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (=> (and (member$ ?v0 (set$c ?v1)) (and (forall ((?v2 T_dtree_sum_list$)) (=> (= ?v1 (cons$b ?v0 ?v2)) false) ) (forall ((?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (and (= ?v1 (cons$b ?v2 ?v3)) (member$ ?v0 (set$c ?v3))) false) ))) false) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (=> (and (fun_app$d (member$c ?v0) (set$ ?v1)) (and (forall ((?v2 N_list$)) (=> (= ?v1 (cons$ ?v0 ?v2)) false) ) (forall ((?v2 N$) (?v3 N_list$)) (=> (and (= ?v1 (cons$ ?v2 ?v3)) (fun_app$d (member$c ?v0) (set$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$)) (=> (member$ ?v0 (set$c ?v1)) (member$ ?v0 (set$c (cons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 N$) (?v1 N_list$) (?v2 N$)) (=> (fun_app$d (member$c ?v0) (set$ ?v1)) (fun_app$d (member$c ?v0) (set$ (cons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (member$ ?v0 (set$c (cons$b ?v0 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (fun_app$d (member$c ?v0) (set$ (cons$ ?v0 ?v1))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$) (?v3 N$)) (=> (and (fun_app$b (path$ ?v0) (cons$ ?v1 ?v2)) (member$ (inr$ (fun_app$l ?v0 ?v1)) (cont$ (fun_app$l ?v0 ?v3)))) (fun_app$b (path$ ?v0) (cons$ ?v3 (cons$ ?v1 ?v2)))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v2)) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (fun_app$d (member$c (root$ ?v0)) ?v1) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 N_set$) (?v3 Dtree$)) (=> (and (fun_app$a (reg$ ?v0) ?v1) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v2) ?v3) ?v1)) (fun_app$a (reg$ ?v0) ?v3)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (= (fun_app$b (path$ ?v0) ?v1) (or (exists ((?v2 N$)) (= ?v1 (cons$ ?v2 nil$)) ) (exists ((?v2 N$) (?v3 N_list$) (?v4 N$)) (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3))) (and (fun_app$b (path$ ?v0) (cons$ ?v2 ?v3)) (member$ (inr$ (fun_app$l ?v0 ?v2)) (cont$ (fun_app$l ?v0 ?v4))))) ))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (and (fun_app$b (path$ ?v0) ?v1) (and (forall ((?v2 N$)) (=> (= ?v1 (cons$ ?v2 nil$)) false) ) (forall ((?v2 N$) (?v3 N_list$) (?v4 N$)) (=> (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3))) (and (fun_app$b (path$ ?v0) (cons$ ?v2 ?v3)) (member$ (inr$ (fun_app$l ?v0 ?v2)) (cont$ (fun_app$l ?v0 ?v4))))) false) ))) false) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (not (= ?v0 nil$b)) (member$ (hd$b ?v0) (set$c ?v0))) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (fun_app$d (member$c (hd$ ?v0)) (set$ ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (not (= ?v0 nil$b)) (member$ (hd$b ?v0) (set$c ?v0))) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (fun_app$d (member$c (hd$ ?v0)) (set$ ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_list$)) (=> (not (= ?v0 nil$b)) (member$ (last$b ?v0) (set$c ?v0))) ))
(assert (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (fun_app$d (member$c (last$ ?v0)) (set$ ?v0))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (and (forall ((?v2 N$)) (= (root$ (fun_app$l ?v0 ?v2)) ?v2) ) (fun_app$b (path$ ?v0) ?v1)) (fun_app$a (fun_app$o (fun_app$p subtr$ (set$ ?v1)) (fun_app$l ?v0 (last$ ?v1))) (fun_app$l ?v0 (hd$ ?v1)))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (= (fun_app$a (reg$ ?v0) ?v1) (forall ((?v2 N_set$) (?v3 Dtree$)) (=> (fun_app$a (fun_app$o (fun_app$p subtr$ ?v2) ?v3) ?v1) (= ?v3 (fun_app$l ?v0 (root$ ?v3)))) )) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) (fun_app$l deftr$ ?v2)) (= ?v1 (fun_app$l deftr$ (root$ ?v1)))) ))
(assert (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (fun_app$a (reg$ ?v1) ?v0) )) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_list$)) (= (fun_app$d (can_select$ ?v0) (set$ ?v1)) (fun_app$b (list_ex1$b ?v0) ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_T_dtree_sum_set_fun$) (?v2 Dtree$)) (= (root$ (fun_app$n (unfold$ ?v0 ?v1) ?v2)) (fun_app$m ?v0 ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) ) (less_eq$c ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (forall ((?v2 N$)) (=> (fun_app$d (member$c ?v2) ?v0) (fun_app$d (member$c ?v2) ?v1)) ) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$)) (fun_app$d (less_eq$ ?v0) ?v0) ))
(assert (= (sublists$ nil$) (cons$a nil$ nil$a)))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (less_eq$c ?v0 ?v1) (less_eq$d (uub$ ?v0) (uub$ ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$d (less_eq$ ?v0) ?v1) (less_eq$e (uuc$ ?v0) (uuc$ ?v1))) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_set$)) (= (fun_app$d (can_select$ ?v0) ?v1) (exists ((?v2 N$)) (and (and (fun_app$d (member$c ?v2) ?v1) (fun_app$c ?v0 ?v2)) (forall ((?v3 N$)) (=> (and (fun_app$d (member$c ?v3) ?v1) (fun_app$c ?v0 ?v3)) (= ?v3 ?v2)) )) )) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_set$)) (= (can_select$a ?v0 ?v1) (exists ((?v2 T_dtree_sum$)) (and (and (member$ ?v2 ?v1) (fun_app$ ?v0 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (member$ ?v3 ?v1) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2)) )) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= ?v0 ?v1) (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set_N_set_fun$) (?v2 N_set$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$af ?v1 ?v2)) (and (fun_app$d (less_eq$ ?v2) ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (fun_app$d (less_eq$ ?v4) ?v5) (fun_app$d (less_eq$ (fun_app$af ?v1 ?v4)) (fun_app$af ?v1 ?v5))) ))) (fun_app$d (less_eq$ ?v0) (fun_app$af ?v1 ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (= ?v0 ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 ?v1) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set_N_set_fun$) (?v3 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (and (= (fun_app$af ?v2 ?v1) ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (fun_app$d (less_eq$ ?v4) ?v5) (fun_app$d (less_eq$ (fun_app$af ?v2 ?v4)) (fun_app$af ?v2 ?v5))) ))) (fun_app$d (less_eq$ (fun_app$af ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set_N_set_fun$) (?v3 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (and (fun_app$d (less_eq$ (fun_app$af ?v2 ?v1)) ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (fun_app$d (less_eq$ ?v4) ?v5) (fun_app$d (less_eq$ (fun_app$af ?v2 ?v4)) (fun_app$af ?v2 ?v5))) ))) (fun_app$d (less_eq$ (fun_app$af ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set_N_set_fun$) (?v2 N_set$) (?v3 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) (fun_app$af ?v1 ?v2)) (and (fun_app$d (less_eq$ ?v2) ?v3) (forall ((?v4 N_set$) (?v5 N_set$)) (=> (fun_app$d (less_eq$ ?v4) ?v5) (fun_app$d (less_eq$ (fun_app$af ?v1 ?v4)) (fun_app$af ?v1 ?v5))) ))) (fun_app$d (less_eq$ ?v0) (fun_app$af ?v1 ?v3))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v0)) (fun_app$d (less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (! (=> (fun_app$d (less_eq$ ?v0) ?v1) (= (fun_app$d (less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$d (less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 N_set$)) (fun_app$d (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (= ?v0 ?v1) (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (less_eq$c ?v0 ?v1) (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$d (less_eq$ ?v0) ?v1) (forall ((?v2 N$)) (=> (fun_app$d (member$c ?v2) ?v0) (fun_app$d (member$c ?v2) ?v1)) )) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (= (fun_app$d (less_eq$ (collect$a ?v0)) (collect$a ?v1)) (forall ((?v2 N$)) (=> (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2)) )) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (less_eq$c ?v0 ?v1) (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1)) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (fun_app$d (less_eq$ ?v0) ?v1) (forall ((?v2 N$)) (=> (fun_app$d (member$c ?v2) ?v0) (fun_app$d (member$c ?v2) ?v1)) )) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (=> (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2)) ) (fun_app$d (less_eq$ (collect$a ?v0)) (collect$a ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (= ?v0 ?v1) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) false)) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 ?v1) (fun_app$d (less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (=> (= ?v0 ?v1) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$c ?v1 ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (member$c ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (member$c ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$c ?v1 ?v2)) (member$ ?v0 ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (member$c ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (member$c ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$c ?v0 ?v1) (and (=> (not (member$ ?v2 ?v0)) false) (=> (member$ ?v2 ?v1) false))) false) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (and (=> (not (fun_app$d (member$c ?v2) ?v0)) false) (=> (fun_app$d (member$c ?v2) ?v1) false))) false) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$c ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (member$c ?v2) ?v0)) (fun_app$d (member$c ?v2) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$c ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (member$c ?v2) ?v0)) (fun_app$d (member$c ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v1) ?v2)) (fun_app$d (less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$c ?v0 ?v1) (not (member$ ?v2 ?v1))) (not (member$ ?v2 ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (not (fun_app$d (member$c ?v2) ?v1))) (not (fun_app$d (member$c ?v2) ?v0))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (and (less_eq$c ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (member$c ?v2) ?v0)) (fun_app$d (member$c ?v2) ?v1)) ))
(assert (forall ((?v0 N_set$)) (fun_app$d (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$)) (= (node$ (root$ ?v0) (cont$ ?v0)) ?v0) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (fun_app$b (path$ ?v0) ?v1) (exists ((?v2 N_list$)) (and (fun_app$b (path$ ?v0) ?v2) (and (= (hd$ ?v2) (hd$ ?v1)) (and (= (last$ ?v2) (last$ ?v1)) (and (fun_app$d (less_eq$ (set$ ?v2)) (set$ ?v1)) (distinct$ ?v2))))) )) ))
(assert (= (product_lists$ nil$a) (cons$a nil$ nil$a)))
(assert (forall ((?v0 N$)) (= (the_elem$ (set$ (cons$ ?v0 nil$))) ?v0) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v0) ?v1) ?v2) (and (fun_app$d (member$c (root$ ?v3)) ?v0) (member$ (inr$ ?v1) (cont$ ?v3)))) (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (distinct$ (fun_app$ad (insert$b ?v0) ?v1)) (distinct$ ?v1)) ))
(assert (forall ((?v0 N$) (?v1 T_dtree_sum_set$)) (= (root$ (node$ ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 N_list_list$)) (=> (forall ((?v1 N_list$)) (=> (member$b ?v1 (set$b ?v0)) (distinct$ ?v1)) ) (distinct$a (product_lists$ ?v0))) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_list$)) (! (= (distinct$ (cons$ ?v0 (cons$ ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$ (cons$ ?v0 ?v2)) (distinct$ (cons$ ?v1 ?v2))))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))))
(assert (= (distinct$ nil$) true))
(assert (forall ((?v0 N$)) (distinct$ (cons$ ?v0 nil$)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (= (distinct$b (cons$b ?v0 ?v1)) (and (not (member$ ?v0 (set$c ?v1))) (distinct$b ?v1))) :pattern ((cons$b ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (distinct$ (cons$ ?v0 ?v1)) (and (not (fun_app$d (member$c ?v0) (set$ ?v1))) (distinct$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v1)) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 N_set$)) (=> (and (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v0) ?v1) ?v2) (fun_app$d (less_eq$ ?v0) ?v3)) (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (less_eq$d (uub$ ?v0) (uub$ ?v1)) (less_eq$c ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$)) (= (less_eq$e (uuc$ ?v0) (uuc$ ?v1)) (fun_app$d (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$)) (= (distinct$ (fun_app$ad (union$ ?v0) ?v1)) (distinct$ ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$ (inr$ ?v1) (cont$ ?v0)) (member$ (inr$ ?v2) (cont$ ?v0)))) (= (= (root$ ?v1) (root$ ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (fun_app$d (member$c (root$ ?v0)) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$c (fun_app$aj (inItr$ ?v1) ?v2) ?v3))) (fun_app$c (fun_app$aj (inItr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v1) ?v2) ?v0)) (wf$ ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (wf$ ?v1)) (wf$ (fun_app$n (hsubst$ ?v0) ?v1))) ))
(assert (forall ((?v0 N$)) (wf$ (fun_app$l deftr$ ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (fun_app$d (member$c (root$ ?v0)) ?v1) (fun_app$c (fun_app$aj (inItr$ ?v1) ?v0) (root$ ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$c (fun_app$aj (inItr$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v1)) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 Dtree$)) (=> (and (fun_app$c (fun_app$aj (inItr$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v3)) (fun_app$c (fun_app$aj (inItr$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 N_set$)) (=> (and (fun_app$c (fun_app$aj (inItr$ ?v0) ?v1) ?v2) (fun_app$d (less_eq$ ?v0) ?v3)) (fun_app$c (fun_app$aj (inItr$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$c (fun_app$aj (inItr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v3) ?v1) (= (root$ ?v3) ?v2)) )) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (fun_app$c (fun_app$aj (inItr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (fun_app$d (member$c (root$ ?v3)) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$c (fun_app$aj (inItr$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (fun_app$c (fun_app$aj (inItr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (fun_app$d (member$c (root$ ?v3)) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$c (fun_app$aj (inItr$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (= (fun_app$l (subtrOf$ ?v0) (root$ ?v1)) ?v1)) ))
(assert (forall ((?v0 N_bool_fun$) (?v1 N$) (?v2 N_list$)) (= (fun_app$b (list_ex1$b ?v0) (cons$ ?v1 ?v2)) (ite (fun_app$c ?v0 ?v1) (fun_app$b (pred_list$ (fun_app$k (uud$ ?v0) ?v1)) ?v2) (fun_app$b (list_ex1$b ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$)) (! (= (itr$ ?v0 ?v1) (collect$a (fun_app$aj (inItr$ ?v0) ?v1))) :pattern ((itr$ ?v0 ?v1)))))
(assert (forall ((?v0 N_bool_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$b (pred_list$ ?v0) (cons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (fun_app$b (pred_list$ ?v0) ?v2))) :pattern ((fun_app$b (pred_list$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 N_bool_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$b (pred_list$ ?v0) (cons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (fun_app$b (pred_list$ ?v0) ?v2))) :pattern ((fun_app$b (pred_list$ ?v0) (cons$ ?v1 ?v2))))))
(assert (forall ((?v0 N_bool_fun$)) (! (= (fun_app$b (pred_list$ ?v0) nil$) true) :pattern ((pred_list$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_list$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum_bool_fun$) (?v3 T_dtree_sum_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (member$ ?v4 (set$c ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))) )) (= (fun_app$s (pred_list$a ?v2) ?v0) (fun_app$s (pred_list$a ?v3) ?v1))) ))
(assert (forall ((?v0 N_list$) (?v1 N_list$) (?v2 N_bool_fun$) (?v3 N_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 N$)) (=> (fun_app$d (member$c ?v4) (set$ ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))) )) (= (fun_app$b (pred_list$ ?v2) ?v0) (fun_app$b (pred_list$ ?v3) ?v1))) ))
(assert (forall ((?v0 N_bool_fun$)) (fun_app$b (pred_list$ ?v0) nil$) ))
(assert (forall ((?v0 Dtree$) (?v1 N$)) (= (fun_app$l (subtrOf$ ?v0) ?v1) (eps$ (fun_app$e (uue$ ?v0) ?v1))) ))
(assert (= (fun_app$d (less_eq$ (coset$ nil$)) (set$ nil$)) false))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$d (member$c (root$ ?v0)) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v1) ?v2) ?v3))) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v1) ?v0) ?v3)) ))
(assert (= subtr$ subtr2$))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v2) ?v3)) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v2)) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (fun_app$d (member$c (root$ ?v0)) ?v1) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v2) (fun_app$d (less_eq$ ?v0) ?v3)) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_list$)) (= (less_eq$c ?v0 (coset$a ?v1)) (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 (set$c ?v1)) (not (member$ ?v2 ?v0))) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_list$)) (= (fun_app$d (less_eq$ ?v0) (coset$ ?v1)) (forall ((?v2 N$)) (=> (fun_app$d (member$c ?v2) (set$ ?v1)) (not (fun_app$d (member$c ?v2) ?v0))) )) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (fun_app$d (member$c (root$ ?v3)) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (fun_app$d (member$c (root$ ?v3)) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$d (member$c (root$ ?v0)) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v1) ?v3) ?v2))) (fun_app$a (fun_app$o (fun_app$p subtr2$ ?v1) ?v3) ?v0)) ))
(assert (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (fun_app$a ?v0 ?v2) (= ?v2 ?v1)) )) (= (eps$ ?v0) ?v1)) ))
(assert (forall ((?v0 Dtree$)) (= (eps$ (uuf$ ?v0)) ?v0) ))
(assert (forall ((?v0 Dtree$)) (= (eps$ (uug$ ?v0)) ?v0) ))
(assert (forall ((?v0 Dtree_bool_fun$)) (= (fun_app$a ?v0 (eps$ ?v0)) (exists ((?v1 Dtree$)) (fun_app$a ?v0 ?v1) )) ))
(assert (forall ((?v0 N_set$) (?v1 N_bool_fun$) (?v2 N_bool_fun$)) (=> (and (exists ((?v3 N$)) (and (fun_app$d (member$c ?v3) ?v0) (fun_app$c ?v1 ?v3)) ) (forall ((?v3 N$)) (=> (and (fun_app$d (member$c ?v3) ?v0) (fun_app$c ?v1 ?v3)) (fun_app$c ?v2 ?v3)) )) (fun_app$c ?v2 (eps$a (fun_app$j (uuh$ ?v0) ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_bool_fun$) (?v2 T_dtree_sum_bool_fun$)) (=> (and (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v0) (fun_app$ ?v1 ?v3)) ) (forall ((?v3 T_dtree_sum$)) (=> (and (member$ ?v3 ?v0) (fun_app$ ?v1 ?v3)) (fun_app$ ?v2 ?v3)) )) (fun_app$ ?v2 (eps$b (fun_app$h (uui$ ?v0) ?v1)))) ))
(assert (forall ((?v0 Dtree_set$) (?v1 Dtree_bool_fun$) (?v2 Dtree_bool_fun$)) (=> (and (exists ((?v3 Dtree$)) (and (member$a ?v3 ?v0) (fun_app$a ?v1 ?v3)) ) (forall ((?v3 Dtree$)) (=> (and (member$a ?v3 ?v0) (fun_app$a ?v1 ?v3)) (fun_app$a ?v2 ?v3)) )) (fun_app$a ?v2 (eps$ (fun_app$i (uuj$ ?v0) ?v1)))) ))
(assert (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree_bool_fun$)) (=> (and (exists ((?v2 Dtree$)) (fun_app$a ?v0 ?v2) ) (forall ((?v2 Dtree$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) )) (fun_app$a ?v1 (eps$ ?v0))) ))
(assert (forall ((?v0 Dtree_bool_fun$)) (=> (exists ((?v1 Dtree$)) (fun_app$a ?v0 ?v1) ) (fun_app$a ?v0 (eps$ ?v0))) ))
(assert (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (exists ((?v2 Dtree$)) (and (fun_app$a ?v0 ?v2) (forall ((?v3 Dtree$)) (=> (fun_app$a ?v0 ?v3) (= ?v3 ?v2)) )) ) (fun_app$a ?v0 ?v1)) (= (eps$ ?v0) ?v1)) ))
(assert (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$) (?v2 Dtree_bool_fun$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 Dtree$)) (=> (fun_app$a ?v0 ?v3) (fun_app$a ?v2 ?v3)) )) (fun_app$a ?v2 (eps$ ?v0))) ))
(assert (forall ((?v0 N_set_bool_fun$) (?v1 N_set$)) (=> (and (fun_app$d ?v0 ?v1) (forall ((?v2 N_set$)) (=> (fun_app$d ?v0 ?v2) (fun_app$d (less_eq$ ?v2) ?v1)) )) (= (greatest$ ?v0) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (fun_app$d (member$c ?v0) (fun_app$af (remove$ ?v1) ?v2)) (and (fun_app$d (member$c ?v0) ?v2) (not (= ?v0 ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (remove$a ?v1 ?v2)) (and (member$ ?v0 ?v2) (not (= ?v0 ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_bool_fun$)) (less_eq$c (collect$ (fun_app$h (uui$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 N_set$) (?v1 N_bool_fun$)) (fun_app$d (less_eq$ (collect$a (fun_app$j (uuh$ ?v0) ?v1))) ?v0) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$) (?v3 T_dtree_sum_bool_fun$)) (=> (and (member$ ?v0 ?v1) (less_eq$c ?v1 (collect$ (fun_app$h (uui$ ?v2) ?v3)))) (fun_app$ ?v3 ?v0)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$) (?v3 N_bool_fun$)) (=> (and (fun_app$d (member$c ?v0) ?v1) (fun_app$d (less_eq$ ?v1) (collect$a (fun_app$j (uuh$ ?v2) ?v3)))) (fun_app$c ?v3 ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 N_bool_fun$) (?v2 N_bool_fun$)) (= (fun_app$d (less_eq$ ?v0) (collect$a (fun_app$j (uuk$ ?v1) ?v2))) (and (fun_app$d (less_eq$ ?v0) (collect$a ?v1)) (fun_app$d (less_eq$ ?v0) (collect$a ?v2)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$) (?v3 T_dtree_sum_bool_fun$)) (=> (and (less_eq$c ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (and (member$ ?v4 ?v0) (fun_app$ ?v2 ?v4)) (fun_app$ ?v3 ?v4)) )) (less_eq$c (collect$ (fun_app$h (uui$ ?v0) ?v2)) (collect$ (fun_app$h (uui$ ?v1) ?v3)))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_bool_fun$) (?v3 N_bool_fun$)) (=> (and (fun_app$d (less_eq$ ?v0) ?v1) (forall ((?v4 N$)) (=> (and (fun_app$d (member$c ?v4) ?v0) (fun_app$c ?v2 ?v4)) (fun_app$c ?v3 ?v4)) )) (fun_app$d (less_eq$ (collect$a (fun_app$j (uuh$ ?v0) ?v2))) (collect$a (fun_app$j (uuh$ ?v1) ?v3)))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1)))) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (less_eq$c ?v0 ?v1) (= (less_eq$c ?v0 (collect$ (fun_app$h (uui$ ?v1) ?v2))) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3)) ))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (= (fun_app$d (less_eq$ ?v0) (collect$a (fun_app$j (uuh$ ?v1) ?v2))) (forall ((?v3 N$)) (=> (fun_app$d (member$c ?v3) ?v0) (fun_app$c ?v2 ?v3)) ))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 N_set$) (?v3 T$)) (=> (and (member$ (inr$ ?v0) (cont$ ?v1)) (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v2) ?v0) ?v3)) (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ (fun_app$af (insert$d (root$ ?v1)) ?v2)) ?v1) ?v3)) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (= (fun_app$af (insert$d ?v0) (fun_app$af (insert$d ?v0) ?v1)) (fun_app$af (insert$d ?v0) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (fun_app$d (member$c ?v0) (fun_app$af (insert$d ?v1) ?v2)) (or (= ?v0 ?v1) (fun_app$d (member$c ?v0) ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (insert$e ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (=> (not (fun_app$d (member$c ?v0) ?v1)) (= ?v0 ?v2)) (fun_app$d (member$c ?v0) (fun_app$af (insert$d ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$e ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (less_eq$c (insert$e ?v0 ?v1) ?v2) (and (member$ ?v0 ?v2) (less_eq$c ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (= (fun_app$d (less_eq$ (fun_app$af (insert$d ?v0) ?v1)) ?v2) (and (fun_app$d (member$c ?v0) ?v2) (fun_app$d (less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_list$)) (! (= (set$ (cons$ ?v0 ?v1)) (fun_app$af (insert$d ?v0) (set$ ?v1))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_list$)) (= (set$ (fun_app$ad (insert$b ?v0) ?v1)) (fun_app$af (insert$d ?v0) (set$ ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (fun_app$af (insert$d ?v0) (fun_app$af (insert$d ?v1) ?v2)) (fun_app$af (insert$d ?v1) (fun_app$af (insert$d ?v0) ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (=> (and (fun_app$d (member$c ?v0) (fun_app$af (insert$d ?v1) ?v2)) (and (=> (= ?v0 ?v1) false) (=> (fun_app$d (member$c ?v0) ?v2) false))) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (insert$e ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (=> (and (fun_app$d (member$c ?v0) ?v1) (forall ((?v2 N_set$)) (=> (and (= ?v1 (fun_app$af (insert$d ?v0) ?v2)) (not (fun_app$d (member$c ?v0) ?v2))) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v2 T_dtree_sum_set$)) (=> (and (= ?v1 (insert$e ?v0 ?v2)) (not (member$ ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (! (=> (fun_app$d (member$c ?v0) ?v1) (= (fun_app$af (insert$d ?v0) ?v1) ?v1)) :pattern ((fun_app$af (insert$d ?v0) ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (! (=> (member$ ?v0 ?v1) (= (insert$e ?v0 ?v1) ?v1)) :pattern ((insert$e ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (fun_app$d (member$c ?v0) ?v1) (fun_app$d (member$c ?v0) (fun_app$af (insert$d ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (insert$e ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (=> (fun_app$d (member$c ?v0) ?v1) (exists ((?v2 N_set$)) (and (= ?v1 (fun_app$af (insert$d ?v0) ?v2)) (not (fun_app$d (member$c ?v0) ?v2))) )) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (=> (member$ ?v0 ?v1) (exists ((?v2 T_dtree_sum_set$)) (and (= ?v1 (insert$e ?v0 ?v2)) (not (member$ ?v0 ?v2))) )) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$) (?v3 N_set$)) (=> (and (not (fun_app$d (member$c ?v0) ?v1)) (not (fun_app$d (member$c ?v2) ?v3))) (= (= (fun_app$af (insert$d ?v0) ?v1) (fun_app$af (insert$d ?v2) ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 N_set$)) (and (= ?v1 (fun_app$af (insert$d ?v2) ?v4)) (and (not (fun_app$d (member$c ?v2) ?v4)) (and (= ?v3 (fun_app$af (insert$d ?v0) ?v4)) (not (fun_app$d (member$c ?v0) ?v4))))) )))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v2 ?v3))) (= (= (insert$e ?v0 ?v1) (insert$e ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 T_dtree_sum_set$)) (and (= ?v1 (insert$e ?v2 ?v4)) (and (not (member$ ?v2 ?v4)) (and (= ?v3 (insert$e ?v0 ?v4)) (not (member$ ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (not (fun_app$d (member$c ?v0) ?v1)) (not (fun_app$d (member$c ?v0) ?v2))) (= (= (fun_app$af (insert$d ?v0) ?v1) (fun_app$af (insert$d ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v0 ?v2))) (= (= (insert$e ?v0 ?v1) (insert$e ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (fun_app$d (member$c ?v0) (fun_app$af (insert$d ?v0) ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (member$ ?v0 (insert$e ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (= (insert$e ?v0 ?v1) (collect$ (fun_app$f (uul$ ?v0) ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (= (fun_app$af (insert$d ?v0) ?v1) (collect$a (fun_app$g (uum$ ?v0) ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (fun_app$af (insert$d ?v0) (collect$a ?v1)) (collect$a (fun_app$j (uun$ ?v0) ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N$)) (fun_app$d (less_eq$ ?v0) (fun_app$af (insert$d ?v1) ?v0)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (not (member$ ?v0 ?v1)) (= (less_eq$c ?v1 (insert$e ?v0 ?v2)) (less_eq$c ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (not (fun_app$d (member$c ?v0) ?v1)) (= (fun_app$d (less_eq$ ?v1) (fun_app$af (insert$d ?v0) ?v2)) (fun_app$d (less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ ?v0) (fun_app$af (insert$d ?v2) ?v1))) ))
(assert (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N$)) (=> (fun_app$d (less_eq$ ?v0) ?v1) (fun_app$d (less_eq$ (fun_app$af (insert$d ?v2) ?v0)) (fun_app$af (insert$d ?v2) ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$c ?v2 ?v1)) (less_eq$c (insert$e ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (fun_app$d (member$c ?v0) ?v1) (fun_app$d (less_eq$ ?v2) ?v1)) (fun_app$d (less_eq$ (fun_app$af (insert$d ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (member$ (inr$ ?v1) (cont$ ?v3))) (fun_app$ag (fun_app$ah (fun_app$ai inFr$ (fun_app$af (insert$d (root$ ?v3)) ?v0)) ?v3) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) ) (exists ((?v3 Dtree$) (?v4 Dtree$) (?v5 N_set$) (?v6 T$)) (and (= ?v0 (fun_app$af (insert$d (root$ ?v4)) ?v5)) (and (= ?v1 ?v4) (and (= ?v2 ?v6) (and (member$ (inr$ ?v3) (cont$ ?v4)) (fun_app$ag (fun_app$ah (fun_app$ai inFr2$ ?v5) ?v3) ?v6))))) ))) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (= inFr$ inFr2$))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (= (exists ((?v1 T_dtree_sum$)) (fun_app$ ?v0 ?v1) ) (or (exists ((?v1 T$)) (fun_app$ ?v0 (inl$ ?v1)) ) (exists ((?v1 Dtree$)) (fun_app$ ?v0 (inr$ ?v1)) ))) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (= (forall ((?v1 T_dtree_sum$)) (fun_app$ ?v0 ?v1) ) (and (forall ((?v1 T$)) (fun_app$ ?v0 (inl$ ?v1)) ) (forall ((?v1 Dtree$)) (fun_app$ ?v0 (inr$ ?v1)) ))) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (not (= (inr$ ?v0) (inl$ ?v1))) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (not (= (inl$ ?v0) (inr$ ?v1))) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (not (= (inr$ ?v0) (inl$ ?v1))) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (not (= (inl$ ?v0) (inr$ ?v1))) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (fun_app$d (member$c (root$ ?v0)) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v3) ?v1) (member$ (inl$ ?v2) (cont$ ?v3))) )) ))
(assert (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$o (fun_app$p subtr$ ?v0) ?v1) ?v3)) (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (fun_app$d (member$c (root$ ?v3)) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (fun_app$d (member$c (root$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (fun_app$d (member$c (root$ ?v0)) ?v1)) (not (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v1) ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 N_set$)) (=> (and (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v0) ?v1) ?v2) (fun_app$d (less_eq$ ?v0) ?v3)) (fun_app$ag (fun_app$ah (fun_app$ai inFr$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(check-sat)
(exit)

