(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Enat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort Enat_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort Enat_enat_prod_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Enat_llist_bool_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_bool_fun$ 0)
(declare-sort Enat_llist_enat_set_fun$ 0)
(declare-sort Enat_enat_prod_llist_set$ 0)
(declare-sort Enat_llist_enat_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_llist_bool_fun$ 0)
(declare-sort Enat_enat_prod_enat_enat_prod_fun$ 0)
(declare-sort Enat_llist_enat_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_enat_enat_prod_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_llist_enat_enat_prod_set_fun$ 0)
(declare-sort Enat_enat_prod_llist_enat_enat_prod_llist_fun$ 0)
(declare-sort Enat_enat_prod_enat_enat_prod_llist_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_enat_prod$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-fun fst$ (Enat_enat_prod$) Enat$)
(declare-fun snd$ (Enat_enat_prod$) Enat$)
(declare-fun pair$ (Enat$ Enat$) Enat_enat_prod$)
(declare-sort Enat_enat_prod_llist$ 0)
(declare-sort Enat_llist$ 0)
(declare-fun lNil$a () Enat_enat_prod_llist$)
(declare-fun lhd$a (Enat_enat_prod_llist$) Enat_enat_prod$)
(declare-fun ltl$a (Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun lCons$a (Enat_enat_prod$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun lNil$b () Enat_llist$)
(declare-fun lhd$b (Enat_llist$) Enat$)
(declare-fun ltl$b (Enat_llist$) Enat_llist$)
(declare-fun lCons$b (Enat$ Enat_llist$) Enat_llist$)
(declare-sort Natural$ 0)
(declare-sort Nat_nat_prod$ 0)
(declare-fun nat_of_natural$ (Natural$) Nat$)
(declare-fun natural_of_nat$ (Nat$) Natural$)
(declare-fun fst$a (Nat_nat_prod$) Nat$)
(declare-fun snd$a (Nat_nat_prod$) Nat$)
(declare-fun pair$a (Nat$ Nat$) Nat_nat_prod$)
(declare-fun n$ () Enat$)
(declare-fun x$ () A$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun bot$ () Enat_enat_prod_set$)
(declare-fun uua$ (Enat_set$) Enat_bool_fun$)
(declare-fun uub$ (Enat_enat_prod_set$) Enat_enat_prod_bool_fun$)
(declare-fun bot$a () Enat_set$)
(declare-fun bot$b () A_set$)
(declare-fun bot$c () Enat_enat_prod_bool_fun$)
(declare-fun bot$d () Bool)
(declare-fun bot$e () Enat_bool_fun$)
(declare-fun bot$f () Enat$)
(declare-fun bot$g () Nat$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lset$ () A_llist_a_set_fun$)
(declare-fun lzip$ (Enat_llist$ Enat_llist$) Enat_enat_prod_llist$)
(declare-fun plus$ (Enat$) Enat_enat_fun$)
(declare-fun size$ (Natural$) Nat$)
(declare-fun zero$ () Enat$)
(declare-fun epred$ (Enat$) Enat$)
(declare-fun lnull$ (Enat_enat_prod_llist$) Bool)
(declare-fun lset$a () Enat_llist_enat_set_fun$)
(declare-fun lset$b () Enat_enat_prod_llist_enat_enat_prod_set_fun$)
(declare-fun lsetp$ (Enat_enat_prod_llist$) Enat_enat_prod_bool_fun$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun plus$a (Nat$) Nat_nat_fun$)
(declare-fun plus$b (Natural$ Natural$) Natural$)
(declare-fun zero$a () Nat$)
(declare-fun zero$b () Natural$)
(declare-fun lnull$a (Enat_llist$) Bool)
(declare-fun lnull$b (A_llist$) Bool)
(declare-fun lsetp$a (Enat_llist$) Enat_bool_fun$)
(declare-fun lsetp$b (A_llist$) A_bool_fun$)
(declare-fun ltake$a (Enat$) Enat_enat_prod_llist_enat_enat_prod_llist_fun$)
(declare-fun ltake$b (Enat$) Enat_llist_enat_llist_fun$)
(declare-fun member$ (Enat_enat_prod$ Enat_enat_prod_set$) Bool)
(declare-fun collect$ (Enat_enat_prod_bool_fun$) Enat_enat_prod_set$)
(declare-fun fun_app$ (Enat_enat_prod_bool_fun$ Enat_enat_prod$) Bool)
(declare-fun le_enat$ () Enat_enat_prod_set$)
(declare-fun less_eq$ (Enat$) Enat_bool_fun$)
(declare-fun llength$ (Enat_enat_prod_llist$) Enat$)
(declare-fun llexord$ (Enat_enat_prod_enat_enat_prod_bool_fun_fun$) Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$)
(declare-fun lmember$ (Enat_enat_prod$) Enat_enat_prod_llist_bool_fun$)
(declare-fun member$a (Enat$ Enat_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun member$c (A_llist$ A_llist_set$) Bool)
(declare-fun member$d (Enat_enat_prod_llist$ Enat_enat_prod_llist_set$) Bool)
(declare-fun member$e (Enat_llist$ Enat_llist_set$) Bool)
(declare-fun collect$a (Enat_bool_fun$) Enat_set$)
(declare-fun collect$b (A_bool_fun$) A_set$)
(declare-fun enat_set$ () Enat_set$)
(declare-fun fun_app$a (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$d (Enat_enat_prod_llist_bool_fun$ Enat_enat_prod_llist$) Bool)
(declare-fun fun_app$e (Enat_llist_bool_fun$ Enat_llist$) Bool)
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$g (Enat_enat_prod_enat_enat_prod_fun$ Enat_enat_prod$) Enat_enat_prod$)
(declare-fun fun_app$h (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$i (A_a_fun$ A$) A$)
(declare-fun fun_app$j (Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist_bool_fun$)
(declare-fun fun_app$k (Enat_llist_enat_llist_bool_fun_fun$ Enat_llist$) Enat_llist_bool_fun$)
(declare-fun fun_app$l (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$m (Enat_enat_prod_enat_enat_prod_bool_fun_fun$ Enat_enat_prod$) Enat_enat_prod_bool_fun$)
(declare-fun fun_app$n (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$o (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$p (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$q (Enat_llist_enat_set_fun$ Enat_llist$) Enat_set$)
(declare-fun fun_app$r (Enat_enat_prod_llist_enat_enat_prod_set_fun$ Enat_enat_prod_llist$) Enat_enat_prod_set$)
(declare-fun fun_app$s (Enat_enat_prod_llist_enat_enat_prod_llist_fun$ Enat_enat_prod_llist$) Enat_enat_prod_llist$)
(declare-fun fun_app$t (Enat_llist_enat_llist_fun$ Enat_llist$) Enat_llist$)
(declare-fun fun_app$u (Enat_enat_llist_bool_fun_fun$ Enat$) Enat_llist_bool_fun$)
(declare-fun fun_app$v (Enat_enat_prod_enat_enat_prod_llist_bool_fun_fun$ Enat_enat_prod$) Enat_enat_prod_llist_bool_fun$)
(declare-fun fun_app$w (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$x (Nat_nat_fun$ Nat$) Nat$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun iterates$ (Enat_enat_prod_enat_enat_prod_fun$ Enat_enat_prod$) Enat_enat_prod_llist$)
(declare-fun le_enatp$ (Enat$) Enat_bool_fun$)
(declare-fun less_eq$a (Nat$ Nat$) Bool)
(declare-fun llength$a (Enat_llist$) Enat$)
(declare-fun llength$b (A_llist$) Enat$)
(declare-fun llexord$a (Enat_enat_bool_fun_fun$) Enat_llist_enat_llist_bool_fun_fun$)
(declare-fun llexord$b (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$a (Enat$) Enat_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun enat_setp$ (Enat$) Bool)
(declare-fun gen_lset$a (Enat_enat_prod_set$) Enat_enat_prod_llist_enat_enat_prod_set_fun$)
(declare-fun gen_lset$b (Enat_set$) Enat_llist_enat_set_fun$)
(declare-fun iterates$a (Enat_enat_fun$ Enat$) Enat_llist$)
(declare-fun iterates$b (A_a_fun$ A$) A_llist$)
(declare-fun ldistinct$ (Enat_llist$) Bool)
(declare-fun ldistinct$a (Enat_enat_prod_llist$) Bool)
(declare-fun ldistinct$b (A_llist$) Bool)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun pred_llist$ (Enat_enat_prod_bool_fun$) Enat_enat_prod_llist_bool_fun$)
(declare-fun divides_aux$ (Nat_nat_prod$) Bool)
(declare-fun pred_llist$a (Enat_bool_fun$) Enat_llist_bool_fun$)
(declare-fun pred_llist$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun size_natural$ (Natural$) Nat$)
(assert (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat_set$) (?v1 Enat$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))))
(assert (not (= (fun_app$c (ltake$ (eSuc$ n$)) (lCons$ x$ xs$)) (lCons$ x$ (fun_app$c (ltake$ n$) xs$)))))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$) (?v3 Enat_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (! (= (fun_app$d (pred_llist$ ?v0) (lCons$a ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (fun_app$d (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$d (pred_llist$ ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$) (?v2 Enat_llist$)) (! (= (fun_app$e (pred_llist$a ?v0) (lCons$b ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (fun_app$e (pred_llist$a ?v0) ?v2))) :pattern ((fun_app$e (pred_llist$a ?v0) (lCons$b ?v1 ?v2))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$f (pred_llist$b ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$f (pred_llist$b ?v0) ?v2))) :pattern ((fun_app$f (pred_llist$b ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (! (= (llength$ (lCons$a ?v0 ?v1)) (eSuc$ (llength$ ?v1))) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (= (llength$a (lCons$b ?v0 ?v1)) (eSuc$ (llength$a ?v1))) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (llength$b (lCons$ ?v0 ?v1)) (eSuc$ (llength$b ?v1))) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (! (= (fun_app$d (lmember$ ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$d (lmember$ ?v0) ?v2))) :pattern ((fun_app$d (lmember$ ?v0) (lCons$a ?v1 ?v2))))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_llist$)) (! (= (fun_app$e (lmember$a ?v0) (lCons$b ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$e (lmember$a ?v0) ?v2))) :pattern ((fun_app$e (lmember$a ?v0) (lCons$b ?v1 ?v2))))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$f (lmember$b ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$f (lmember$b ?v0) ?v2))) :pattern ((fun_app$f (lmember$b ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_fun$) (?v1 Enat_enat_prod$)) (= (iterates$ ?v0 ?v1) (lCons$a ?v1 (iterates$ ?v0 (fun_app$g ?v0 ?v1)))) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$)) (= (iterates$a ?v0 ?v1) (lCons$b ?v1 (iterates$a ?v0 (fun_app$h ?v0 ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (iterates$b ?v0 ?v1) (lCons$ ?v1 (iterates$b ?v0 (fun_app$i ?v0 ?v1)))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$)) (= (fun_app$ (lsetp$ ?v0) ?v1) (or (exists ((?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2)) ) (exists ((?v2 Enat_enat_prod_llist$) (?v3 Enat_enat_prod$) (?v4 Enat_enat_prod$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$ (lsetp$ ?v2) ?v3))) ))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$)) (= (fun_app$a (lsetp$a ?v0) ?v1) (or (exists ((?v2 Enat$) (?v3 Enat_llist$)) (and (= ?v0 (lCons$b ?v2 ?v3)) (= ?v1 ?v2)) ) (exists ((?v2 Enat_llist$) (?v3 Enat$) (?v4 Enat$)) (and (= ?v0 (lCons$b ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$a (lsetp$a ?v2) ?v3))) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$b (lsetp$b ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) ) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$b ?v2) ?v3))) ))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$)) (=> (and (fun_app$ (lsetp$ ?v0) ?v1) (and (forall ((?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (=> (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2)) false) ) (forall ((?v2 Enat_enat_prod_llist$) (?v3 Enat_enat_prod$) (?v4 Enat_enat_prod$)) (=> (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$ (lsetp$ ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$)) (=> (and (fun_app$a (lsetp$a ?v0) ?v1) (and (forall ((?v2 Enat$) (?v3 Enat_llist$)) (=> (and (= ?v0 (lCons$b ?v2 ?v3)) (= ?v1 ?v2)) false) ) (forall ((?v2 Enat_llist$) (?v3 Enat$) (?v4 Enat$)) (=> (and (= ?v0 (lCons$b ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$a (lsetp$a ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$b (lsetp$b ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$b ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod$)) (=> (fun_app$ (lsetp$ ?v0) ?v1) (fun_app$ (lsetp$ (lCons$a ?v2 ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$a (lsetp$a ?v0) ?v1) (fun_app$a (lsetp$a (lCons$b ?v2 ?v0)) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A$)) (=> (fun_app$b (lsetp$b ?v0) ?v1) (fun_app$b (lsetp$b (lCons$ ?v2 ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (fun_app$ (lsetp$ (lCons$a ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (fun_app$a (lsetp$a (lCons$b ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$b (lsetp$b (lCons$ ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$) (?v3 Enat_enat_prod$)) (=> (fun_app$d (fun_app$j (llexord$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$j (llexord$ ?v0) (lCons$a ?v3 ?v1)) (lCons$a ?v3 ?v2))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$) (?v3 Enat$)) (=> (fun_app$e (fun_app$k (llexord$a ?v0) ?v1) ?v2) (fun_app$e (fun_app$k (llexord$a ?v0) (lCons$b ?v3 ?v1)) (lCons$b ?v3 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (fun_app$f (fun_app$l (llexord$b ?v0) ?v1) ?v2) (fun_app$f (fun_app$l (llexord$b ?v0) (lCons$ ?v3 ?v1)) (lCons$ ?v3 ?v2))) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod_llist$)) (=> (fun_app$ (fun_app$m ?v0 ?v1) ?v2) (fun_app$d (fun_app$j (llexord$ ?v0) (lCons$a ?v1 ?v3)) (lCons$a ?v2 ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_llist$) (?v4 Enat_llist$)) (=> (fun_app$a (fun_app$n ?v0 ?v1) ?v2) (fun_app$e (fun_app$k (llexord$a ?v0) (lCons$b ?v1 ?v3)) (lCons$b ?v2 ?v4))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$o ?v0 ?v1) ?v2) (fun_app$f (fun_app$l (llexord$b ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 Enat_enat_prod_llist_enat_enat_prod_llist_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$) (?v3 Enat_enat_prod_enat_enat_prod_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$j ?v0 ?v1) ?v2) (forall ((?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod_llist$)) (=> (fun_app$d (fun_app$j ?v0 ?v4) ?v5) (or (exists ((?v6 Enat_enat_prod_llist$) (?v7 Enat_enat_prod_llist$) (?v8 Enat_enat_prod$)) (and (= ?v4 (lCons$a ?v8 ?v6)) (and (= ?v5 (lCons$a ?v8 ?v7)) (or (fun_app$d (fun_app$j ?v0 ?v6) ?v7) (fun_app$d (fun_app$j (llexord$ ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 Enat_enat_prod$) (?v7 Enat_enat_prod$) (?v8 Enat_enat_prod_llist$) (?v9 Enat_enat_prod_llist$)) (and (= ?v4 (lCons$a ?v6 ?v8)) (and (= ?v5 (lCons$a ?v7 ?v9)) (fun_app$ (fun_app$m ?v3 ?v6) ?v7))) ) (exists ((?v6 Enat_enat_prod_llist$)) (and (= ?v4 lNil$a) (= ?v5 ?v6)) )))) )) (fun_app$d (fun_app$j (llexord$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat_llist_enat_llist_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$) (?v3 Enat_enat_bool_fun_fun$)) (=> (and (fun_app$e (fun_app$k ?v0 ?v1) ?v2) (forall ((?v4 Enat_llist$) (?v5 Enat_llist$)) (=> (fun_app$e (fun_app$k ?v0 ?v4) ?v5) (or (exists ((?v6 Enat_llist$) (?v7 Enat_llist$) (?v8 Enat$)) (and (= ?v4 (lCons$b ?v8 ?v6)) (and (= ?v5 (lCons$b ?v8 ?v7)) (or (fun_app$e (fun_app$k ?v0 ?v6) ?v7) (fun_app$e (fun_app$k (llexord$a ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 Enat$) (?v7 Enat$) (?v8 Enat_llist$) (?v9 Enat_llist$)) (and (= ?v4 (lCons$b ?v6 ?v8)) (and (= ?v5 (lCons$b ?v7 ?v9)) (fun_app$a (fun_app$n ?v3 ?v6) ?v7))) ) (exists ((?v6 Enat_llist$)) (and (= ?v4 lNil$b) (= ?v5 ?v6)) )))) )) (fun_app$e (fun_app$k (llexord$a ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$f (fun_app$l ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$f (fun_app$l ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$f (fun_app$l ?v0 ?v6) ?v7) (fun_app$f (fun_app$l (llexord$b ?v3) ?v6) ?v7)))) ) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$b (fun_app$o ?v3 ?v6) ?v7))) ) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)) )))) )) (fun_app$f (fun_app$l (llexord$b ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$)) (=> (and (fun_app$d (fun_app$j (llexord$ ?v0) ?v1) ?v2) (and (forall ((?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod$)) (=> (and (= ?v1 (lCons$a ?v5 ?v3)) (and (= ?v2 (lCons$a ?v5 ?v4)) (fun_app$d (fun_app$j (llexord$ ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod$) (?v5 Enat_enat_prod_llist$) (?v6 Enat_enat_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v5)) (and (= ?v2 (lCons$a ?v4 ?v6)) (fun_app$ (fun_app$m ?v0 ?v3) ?v4))) false) ) (forall ((?v3 Enat_enat_prod_llist$)) (=> (and (= ?v1 lNil$a) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$)) (=> (and (fun_app$e (fun_app$k (llexord$a ?v0) ?v1) ?v2) (and (forall ((?v3 Enat_llist$) (?v4 Enat_llist$) (?v5 Enat$)) (=> (and (= ?v1 (lCons$b ?v5 ?v3)) (and (= ?v2 (lCons$b ?v5 ?v4)) (fun_app$e (fun_app$k (llexord$a ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 Enat$) (?v4 Enat$) (?v5 Enat_llist$) (?v6 Enat_llist$)) (=> (and (= ?v1 (lCons$b ?v3 ?v5)) (and (= ?v2 (lCons$b ?v4 ?v6)) (fun_app$a (fun_app$n ?v0 ?v3) ?v4))) false) ) (forall ((?v3 Enat_llist$)) (=> (and (= ?v1 lNil$b) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$f (fun_app$l (llexord$b ?v0) ?v1) ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$f (fun_app$l (llexord$b ?v0) ?v3) ?v4))) false) ) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$b (fun_app$o ?v0 ?v3) ?v4))) false) ) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false) )))) false) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist$)) (= (fun_app$d (fun_app$j (llexord$ ?v0) ?v1) ?v2) (or (exists ((?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod$)) (and (= ?v1 (lCons$a ?v5 ?v3)) (and (= ?v2 (lCons$a ?v5 ?v4)) (fun_app$d (fun_app$j (llexord$ ?v0) ?v3) ?v4))) ) (or (exists ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod$) (?v5 Enat_enat_prod_llist$) (?v6 Enat_enat_prod_llist$)) (and (= ?v1 (lCons$a ?v3 ?v5)) (and (= ?v2 (lCons$a ?v4 ?v6)) (fun_app$ (fun_app$m ?v0 ?v3) ?v4))) ) (exists ((?v3 Enat_enat_prod_llist$)) (and (= ?v1 lNil$a) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$) (?v2 Enat_llist$)) (= (fun_app$e (fun_app$k (llexord$a ?v0) ?v1) ?v2) (or (exists ((?v3 Enat_llist$) (?v4 Enat_llist$) (?v5 Enat$)) (and (= ?v1 (lCons$b ?v5 ?v3)) (and (= ?v2 (lCons$b ?v5 ?v4)) (fun_app$e (fun_app$k (llexord$a ?v0) ?v3) ?v4))) ) (or (exists ((?v3 Enat$) (?v4 Enat$) (?v5 Enat_llist$) (?v6 Enat_llist$)) (and (= ?v1 (lCons$b ?v3 ?v5)) (and (= ?v2 (lCons$b ?v4 ?v6)) (fun_app$a (fun_app$n ?v0 ?v3) ?v4))) ) (exists ((?v3 Enat_llist$)) (and (= ?v1 lNil$b) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$f (fun_app$l (llexord$b ?v0) ?v1) ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (fun_app$f (fun_app$l (llexord$b ?v0) ?v3) ?v4))) ) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$b (fun_app$o ?v0 ?v3) ?v4))) ) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3)) )))) ))
(assert (forall ((?v0 Enat$)) (=> (member$a ?v0 enat_set$) (member$a (eSuc$ ?v0) enat_set$)) ))
(assert (forall ((?v0 Enat$)) (=> (enat_setp$ ?v0) (enat_setp$ (eSuc$ ?v0))) ))
(assert (forall ((?v0 A$)) (! (= (fun_app$f (lmember$b ?v0) lNil$) false) :pattern ((lmember$b ?v0)))))
(assert (forall ((?v0 Enat_enat_prod$)) (! (= (fun_app$d (lmember$ ?v0) lNil$a) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$e (lmember$a ?v0) lNil$b) false) :pattern ((lmember$a ?v0)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (= (member$b ?v0 (fun_app$p lset$ ?v1)) (fun_app$f (lmember$b ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (member$a ?v0 (fun_app$q lset$a ?v1)) (fun_app$e (lmember$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (= (member$ ?v0 (fun_app$r lset$b ?v1)) (fun_app$d (lmember$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$s (ltake$a ?v0) lNil$a) lNil$a) :pattern ((ltake$a ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$t (ltake$b ?v0) lNil$b) lNil$b) :pattern ((ltake$b ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$c (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (enat_setp$ ?v0) (member$a ?v0 enat_set$)) :pattern ((enat_setp$ ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_enat_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v1)) (and (forall ((?v3 Enat$) (?v4 Enat_llist$)) (fun_app$e (fun_app$u ?v2 ?v3) (lCons$b ?v3 ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat_llist$) (?v5 Enat$)) (=> (and (member$a ?v5 (fun_app$q lset$a ?v4)) (fun_app$e (fun_app$u ?v2 ?v5) ?v4)) (fun_app$e (fun_app$u ?v2 ?v5) (lCons$b ?v3 ?v4))) ))) (fun_app$e (fun_app$u ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_enat_enat_prod_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v1)) (and (forall ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod_llist$)) (fun_app$d (fun_app$v ?v2 ?v3) (lCons$a ?v3 ?v4)) ) (forall ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod_llist$) (?v5 Enat_enat_prod$)) (=> (and (member$ ?v5 (fun_app$r lset$b ?v4)) (fun_app$d (fun_app$v ?v2 ?v5) ?v4)) (fun_app$d (fun_app$v ?v2 ?v5) (lCons$a ?v3 ?v4))) ))) (fun_app$d (fun_app$v ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$f (fun_app$w ?v2 ?v3) (lCons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$b ?v5 (fun_app$p lset$ ?v4)) (fun_app$f (fun_app$w ?v2 ?v5) ?v4)) (fun_app$f (fun_app$w ?v2 ?v5) (lCons$ ?v3 ?v4))) ))) (fun_app$f (fun_app$w ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v1)) (and (forall ((?v2 Enat_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false) ) (forall ((?v2 Enat$) (?v3 Enat_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$a ?v0 (fun_app$q lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v1)) (and (forall ((?v2 Enat_enat_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$ ?v0 (fun_app$r lset$b ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$b ?v0 (fun_app$p lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_llist_bool_fun$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v1)) (and (forall ((?v3 Enat_llist$)) (fun_app$e ?v2 (lCons$b ?v0 ?v3)) ) (forall ((?v3 Enat$) (?v4 Enat_llist$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v4)) (fun_app$e ?v2 ?v4)) (fun_app$e ?v2 (lCons$b ?v3 ?v4))) ))) (fun_app$e ?v2 ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist_bool_fun$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v1)) (and (forall ((?v3 Enat_enat_prod_llist$)) (fun_app$d ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod_llist$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v4)) (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$d ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$f ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v4)) (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$f ?v2 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_llist_bool_fun$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v1)) (and (forall ((?v3 Enat_llist$)) (fun_app$e ?v2 (lCons$b ?v0 ?v3)) ) (forall ((?v3 Enat$) (?v4 Enat_llist$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v4)) (and (not (= ?v0 ?v3)) (fun_app$e ?v2 ?v4))) (fun_app$e ?v2 (lCons$b ?v3 ?v4))) ))) (fun_app$e ?v2 ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_llist_bool_fun$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v1)) (and (forall ((?v3 Enat_enat_prod_llist$)) (fun_app$d ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod_llist$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v4)) (and (not (= ?v0 ?v3)) (fun_app$d ?v2 ?v4))) (fun_app$d ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$d ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$f ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$f ?v2 ?v4))) (fun_app$f ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$f ?v2 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v1)) (and (forall ((?v2 Enat_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false) ) (forall ((?v2 Enat$) (?v3 Enat_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$a ?v0 (fun_app$q lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v1)) (and (forall ((?v2 Enat_enat_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 Enat_enat_prod$) (?v3 Enat_enat_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$ ?v0 (fun_app$r lset$b ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$b ?v0 (fun_app$p lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$b ?v0 (fun_app$p lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$)) (=> (member$a ?v0 (fun_app$q lset$a ?v1)) (member$a ?v0 (fun_app$q lset$a (lCons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod$)) (=> (member$ ?v0 (fun_app$r lset$b ?v1)) (member$ ?v0 (fun_app$r lset$b (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$b ?v0 (fun_app$p lset$ ?v1)) (member$b ?v0 (fun_app$p lset$ (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat$)) (=> (member$a ?v0 (fun_app$q lset$a ?v1)) (member$a ?v0 (fun_app$q lset$a (lCons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod$)) (=> (member$ ?v0 (fun_app$r lset$b ?v1)) (member$ ?v0 (fun_app$r lset$b (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$b ?v0 (fun_app$p lset$ ?v1)) (member$b ?v0 (fun_app$p lset$ (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (member$a ?v0 (fun_app$q lset$a (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (member$ ?v0 (fun_app$r lset$b (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$b ?v0 (fun_app$p lset$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (member$a ?v0 (fun_app$q lset$a (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (member$ ?v0 (fun_app$r lset$b (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$b ?v0 (fun_app$p lset$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_llist$)) (= (not (= ?v0 lNil$b)) (exists ((?v1 Enat$) (?v2 Enat_llist$)) (= ?v0 (lCons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 Enat$) (?v2 Enat_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (not (= lNil$b (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$b (lsetp$b ?v0) ?v1) (member$b ?v1 (fun_app$p lset$ ?v0))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$)) (=> (fun_app$a (lsetp$a ?v0) ?v1) (member$a ?v1 (fun_app$q lset$a ?v0))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$)) (=> (fun_app$ (lsetp$ ?v0) ?v1) (member$ ?v1 (fun_app$r lset$b ?v0))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$b ?v0 (fun_app$p lset$ ?v1)) (fun_app$b (lsetp$b ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (member$a ?v0 (fun_app$q lset$a ?v1)) (fun_app$a (lsetp$a ?v1) ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (=> (member$ ?v0 (fun_app$r lset$b ?v1)) (fun_app$ (lsetp$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$f (fun_app$l (llexord$b ?v0) lNil$) ?v1) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_bool_fun_fun$) (?v1 Enat_enat_prod_llist$)) (fun_app$d (fun_app$j (llexord$ ?v0) lNil$a) ?v1) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_llist$)) (fun_app$e (fun_app$k (llexord$a ?v0) lNil$b) ?v1) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$)) (fun_app$d (pred_llist$ ?v0) lNil$a) ))
(assert (forall ((?v0 Enat_bool_fun$)) (fun_app$e (pred_llist$a ?v0) lNil$b) ))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$f (pred_llist$b ?v0) lNil$) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$) (?v1 Enat_enat_prod_bool_fun$)) (=> (forall ((?v2 Enat_enat_prod$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$)) (=> (forall ((?v2 Enat$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2)) ) (= (collect$a ?v0) (collect$a ?v1))) ))
(assert (forall ((?v0 A_set$)) (= (collect$b (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat_enat_prod_set$)) (= (collect$ (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$b ?v0 (collect$b ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_bool_fun$)) (= (member$a ?v0 (collect$a ?v1)) (fun_app$a ?v1 ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (= (ldistinct$ ?v0) (or (= ?v0 lNil$b) (exists ((?v1 Enat$) (?v2 Enat_llist$)) (and (= ?v0 (lCons$b ?v1 ?v2)) (and (not (member$a ?v1 (fun_app$q lset$a ?v2))) (ldistinct$ ?v2))) ))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (ldistinct$a ?v0) (or (= ?v0 lNil$a) (exists ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (and (= ?v0 (lCons$a ?v1 ?v2)) (and (not (member$ ?v1 (fun_app$r lset$b ?v2))) (ldistinct$a ?v2))) ))) ))
(assert (forall ((?v0 A_llist$)) (= (ldistinct$b ?v0) (or (= ?v0 lNil$) (exists ((?v1 A$) (?v2 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (member$b ?v1 (fun_app$p lset$ ?v2))) (ldistinct$b ?v2))) ))) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (ldistinct$ ?v0) (and (=> (= ?v0 lNil$b) false) (forall ((?v1 Enat$) (?v2 Enat_llist$)) (=> (and (= ?v0 (lCons$b ?v1 ?v2)) (and (not (member$a ?v1 (fun_app$q lset$a ?v2))) (ldistinct$ ?v2))) false) ))) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (and (ldistinct$a ?v0) (and (=> (= ?v0 lNil$a) false) (forall ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (=> (and (= ?v0 (lCons$a ?v1 ?v2)) (and (not (member$ ?v1 (fun_app$r lset$b ?v2))) (ldistinct$a ?v2))) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (ldistinct$b ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (and (= ?v0 (lCons$ ?v1 ?v2)) (and (not (member$b ?v1 (fun_app$p lset$ ?v2))) (ldistinct$b ?v2))) false) ))) false) ))
(assert (forall ((?v0 Enat_llist_bool_fun$) (?v1 Enat_llist$)) (=> (and (fun_app$e ?v0 ?v1) (forall ((?v2 Enat_llist$)) (=> (fun_app$e ?v0 ?v2) (or (= ?v2 lNil$b) (exists ((?v3 Enat$) (?v4 Enat_llist$)) (and (= ?v2 (lCons$b ?v3 ?v4)) (and (not (member$a ?v3 (fun_app$q lset$a ?v4))) (or (fun_app$e ?v0 ?v4) (ldistinct$ ?v4)))) ))) )) (ldistinct$ ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod_llist_bool_fun$) (?v1 Enat_enat_prod_llist$)) (=> (and (fun_app$d ?v0 ?v1) (forall ((?v2 Enat_enat_prod_llist$)) (=> (fun_app$d ?v0 ?v2) (or (= ?v2 lNil$a) (exists ((?v3 Enat_enat_prod$) (?v4 Enat_enat_prod_llist$)) (and (= ?v2 (lCons$a ?v3 ?v4)) (and (not (member$ ?v3 (fun_app$r lset$b ?v4))) (or (fun_app$d ?v0 ?v4) (ldistinct$a ?v4)))) ))) )) (ldistinct$a ?v1)) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$f ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (fun_app$f ?v0 ?v2) (or (= ?v2 lNil$) (exists ((?v3 A$) (?v4 A_llist$)) (and (= ?v2 (lCons$ ?v3 ?v4)) (and (not (member$b ?v3 (fun_app$p lset$ ?v4))) (or (fun_app$f ?v0 ?v4) (ldistinct$b ?v4)))) ))) )) (ldistinct$b ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (not (member$a ?v0 (fun_app$q lset$a ?v1))) (ldistinct$ ?v1)) (ldistinct$ (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (=> (and (not (member$ ?v0 (fun_app$r lset$b ?v1))) (ldistinct$a ?v1)) (ldistinct$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (not (member$b ?v0 (fun_app$p lset$ ?v1))) (ldistinct$b ?v1)) (ldistinct$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (fun_app$s (ltake$a zero$) ?v0) lNil$a) ))
(assert (forall ((?v0 Enat_llist$)) (= (fun_app$t (ltake$b zero$) ?v0) lNil$b) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$c (ltake$ zero$) ?v0) lNil$) ))
(assert (= (llength$b lNil$) zero$))
(assert (= (llength$ lNil$a) zero$))
(assert (= (llength$a lNil$b) zero$))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$p (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))))
(assert (forall ((?v0 Enat_enat_prod_set$)) (! (= (fun_app$r (gen_lset$a ?v0) lNil$a) ?v0) :pattern ((gen_lset$a ?v0)))))
(assert (forall ((?v0 Enat_set$)) (! (= (fun_app$q (gen_lset$b ?v0) lNil$b) ?v0) :pattern ((gen_lset$b ?v0)))))
(assert (forall ((?v0 Enat$)) (= (enat_setp$ ?v0) (or (= ?v0 zero$) (exists ((?v1 Enat$)) (and (= ?v0 (eSuc$ ?v1)) (enat_setp$ ?v1)) ))) ))
(assert (forall ((?v0 Enat$)) (=> (and (enat_setp$ ?v0) (and (=> (= ?v0 zero$) false) (forall ((?v1 Enat$)) (=> (and (= ?v0 (eSuc$ ?v1)) (enat_setp$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Enat$)) (not (= zero$ (eSuc$ ?v0))) ))
(assert (forall ((?v0 Enat$)) (not (= zero$ (eSuc$ ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) (not (= ?v0 zero$))) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Enat$)) (= (not (= ?v0 zero$)) (exists ((?v1 Enat$)) (= ?v0 (eSuc$ ?v1)) )) ))
(assert (member$a zero$ enat_set$))
(assert (enat_setp$ zero$))
(assert (ldistinct$b lNil$))
(assert (ldistinct$a lNil$a))
(assert (ldistinct$ lNil$b))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 Enat$)) (=> (fun_app$a ?v0 ?v2) (or (= ?v2 zero$) (exists ((?v3 Enat$)) (and (= ?v2 (eSuc$ ?v3)) (or (fun_app$a ?v0 ?v3) (member$a ?v3 enat_set$))) ))) )) (member$a ?v1 enat_set$)) ))
(assert (forall ((?v0 Enat$)) (=> (and (member$a ?v0 enat_set$) (and (=> (= ?v0 zero$) false) (forall ((?v1 Enat$)) (=> (and (= ?v0 (eSuc$ ?v1)) (member$a ?v1 enat_set$)) false) ))) false) ))
(assert (forall ((?v0 Enat$)) (= (member$a ?v0 enat_set$) (or (= ?v0 zero$) (exists ((?v1 Enat$)) (and (= ?v0 (eSuc$ ?v1)) (member$a ?v1 enat_set$)) ))) ))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 Enat$)) (=> (fun_app$a ?v0 ?v2) (or (= ?v2 zero$) (exists ((?v3 Enat$)) (and (= ?v2 (eSuc$ ?v3)) (or (fun_app$a ?v0 ?v3) (enat_setp$ ?v3))) ))) )) (enat_setp$ ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (! (=> (or (= ?v0 zero$) (lnull$ ?v1)) (= (fun_app$s (ltake$a ?v0) ?v1) lNil$a)) :pattern ((fun_app$s (ltake$a ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (! (=> (or (= ?v0 zero$) (lnull$a ?v1)) (= (fun_app$t (ltake$b ?v0) ?v1) lNil$b)) :pattern ((fun_app$t (ltake$b ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (! (=> (or (= ?v0 zero$) (lnull$b ?v1)) (= (fun_app$c (ltake$ ?v0) ?v1) lNil$)) :pattern ((fun_app$c (ltake$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (= (= zero$a ?v0) (= ?v0 zero$a)) ))
(assert (forall ((?v0 Natural$)) (= (= zero$b ?v0) (= ?v0 zero$b)) ))
(assert (= lset$b (gen_lset$a bot$)))
(assert (= lset$a (gen_lset$b bot$a)))
(assert (= lset$ (gen_lset$ bot$b)))
(assert (forall ((?v0 A_llist$)) (= (= (fun_app$p lset$ ?v0) bot$b) (lnull$b ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (= (fun_app$r lset$b ?v0) bot$) (lnull$ ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (= (= (fun_app$q lset$a ?v0) bot$a) (lnull$a ?v0)) ))
(assert (forall ((?v0 Enat$)) (=> (not (= ?v0 zero$)) (= (eSuc$ (epred$ ?v0)) ?v0)) ))
(assert (forall ((?v0 Enat$)) (=> (not (= ?v0 zero$)) (= (eSuc$ (epred$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A_llist$)) (! (=> (lnull$b ?v0) (= (llength$b ?v0) zero$)) :pattern ((llength$b ?v0)))))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (! (=> (lnull$ ?v0) (= (llength$ ?v0) zero$)) :pattern ((llength$ ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (=> (lnull$a ?v0) (= (llength$a ?v0) zero$)) :pattern ((llength$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (= (= (llength$b ?v0) zero$) (lnull$b ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (= (llength$ ?v0) zero$) (lnull$ ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (= (= (llength$a ?v0) zero$) (lnull$a ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (= (not (lnull$ (fun_app$s (ltake$a ?v0) ?v1))) (and (not (= ?v0 zero$)) (not (lnull$ ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (not (lnull$a (fun_app$t (ltake$b ?v0) ?v1))) (and (not (= ?v0 zero$)) (not (lnull$a ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (not (lnull$b (fun_app$c (ltake$ ?v0) ?v1))) (and (not (= ?v0 zero$)) (not (lnull$b ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (= (lnull$ (fun_app$s (ltake$a ?v0) ?v1)) (or (= ?v0 zero$) (lnull$ ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (= (lnull$a (fun_app$t (ltake$b ?v0) ?v1)) (or (= ?v0 zero$) (lnull$a ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lnull$b (fun_app$c (ltake$ ?v0) ?v1)) (or (= ?v0 zero$) (lnull$b ?v1))) ))
(assert (forall ((?v0 A_llist$)) (! (=> (lnull$b ?v0) (= (fun_app$p lset$ ?v0) bot$b)) :pattern ((fun_app$p lset$ ?v0)))))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (! (=> (lnull$ ?v0) (= (fun_app$r lset$b ?v0) bot$)) :pattern ((fun_app$r lset$b ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (=> (lnull$a ?v0) (= (fun_app$q lset$a ?v0) bot$a)) :pattern ((fun_app$q lset$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 Enat_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$c ?v1 ?v0) (lnull$b ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$c ?v1 ?v0) (lnull$b ?v1)) )) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist_set$)) (=> (and (=> (forall ((?v1 Enat_enat_prod_llist$)) (=> (member$d ?v1 ?v0) (lnull$ ?v1)) ) false) (=> (not (forall ((?v1 Enat_enat_prod_llist$)) (=> (member$d ?v1 ?v0) (lnull$ ?v1)) )) false)) false) ))
(assert (forall ((?v0 Enat_llist_set$)) (=> (and (=> (forall ((?v1 Enat_llist$)) (=> (member$e ?v1 ?v0) (lnull$a ?v1)) ) false) (=> (not (forall ((?v1 Enat_llist$)) (=> (member$e ?v1 ?v0) (lnull$a ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat_enat_prod_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_enat_prod_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (= ?v0 (lCons$a ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_llist$)) (= (not (lnull$a ?v0)) (exists ((?v1 Enat$) (?v2 Enat_llist$)) (= ?v0 (lCons$b ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_llist$)) (= (not (lnull$b ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$) (?v2 Enat_enat_prod_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) (not (lnull$ ?v0))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$) (?v2 Enat_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) (not (lnull$a ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (lnull$b ?v0))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (not (lnull$ (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (not (lnull$a (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (lnull$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (=> (or (= ?v0 zero$) (lnull$b ?v1)) false) (=> (and (not (= ?v0 zero$)) (not (lnull$b ?v1))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (=> (and (=> (or (= ?v0 zero$) (lnull$ ?v1)) false) (=> (and (not (= ?v0 zero$)) (not (lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (=> (or (= ?v0 zero$) (lnull$a ?v1)) false) (=> (and (not (= ?v0 zero$)) (not (lnull$a ?v1))) false)) false) ))
(assert (lnull$b lNil$))
(assert (lnull$ lNil$a))
(assert (lnull$a lNil$b))
(assert (forall ((?v0 A_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$a)) ))
(assert (forall ((?v0 Enat_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$b)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (lnull$b ?v0)) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (= ?v0 lNil$a) (lnull$ ?v0)) ))
(assert (forall ((?v0 Enat_llist$)) (=> (= ?v0 lNil$b) (lnull$a ?v0)) ))
(assert (forall ((?v0 A_llist$)) (! (= (lnull$b ?v0) (= ?v0 lNil$)) :pattern ((lnull$b ?v0)))))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$a)) :pattern ((lnull$ ?v0)))))
(assert (forall ((?v0 Enat_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$b)) :pattern ((lnull$a ?v0)))))
(assert (= (epred$ zero$) zero$))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (= (= ?v0 zero$) (= ?v1 zero$)) (=> (and (not (= ?v0 zero$)) (not (= ?v1 zero$))) (= (epred$ ?v0) (epred$ ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (not (= ?v0 zero$)) (not (= ?v1 zero$))) (= (= (epred$ ?v0) (epred$ ?v1)) (= ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$a (fun_app$n ?v0 ?v1) ?v2) (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$a (fun_app$n ?v0 ?v3) ?v4) (= (= ?v3 zero$) (= ?v4 zero$))) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (and (fun_app$a (fun_app$n ?v0 ?v3) ?v4) (and (not (= ?v3 zero$)) (not (= ?v4 zero$)))) (or (fun_app$a (fun_app$n ?v0 (epred$ ?v3)) (epred$ ?v4)) (= (epred$ ?v3) (epred$ ?v4)))) ))) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$a (fun_app$n ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$a (fun_app$n ?v0 ?v3) ?v4) (and (= (= ?v3 zero$) (= ?v4 zero$)) (=> (and (not (= ?v3 zero$)) (not (= ?v4 zero$))) (or (fun_app$a (fun_app$n ?v0 (epred$ ?v3)) (epred$ ?v4)) (= (epred$ ?v3) (epred$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$)) (= (epred$ (eSuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (epred$ (eSuc$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (not (lnull$b (iterates$b ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod_enat_enat_prod_fun$) (?v1 Enat_enat_prod$)) (not (lnull$ (iterates$ ?v0 ?v1))) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$)) (not (lnull$a (iterates$a ?v0 ?v1))) ))
(assert (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (= ?v0 (eSuc$ (epred$ ?v0))) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (=> (or (= ?v0 zero$) (lnull$ ?v1)) (lnull$ (fun_app$s (ltake$a ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (or (= ?v0 zero$) (lnull$a ?v1)) (lnull$a (fun_app$t (ltake$b ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (or (= ?v0 zero$) (lnull$b ?v1)) (lnull$b (fun_app$c (ltake$ ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_prod_llist$)) (=> (and (not (= ?v0 zero$)) (not (lnull$ ?v1))) (not (lnull$ (fun_app$s (ltake$a ?v0) ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (and (not (= ?v0 zero$)) (not (lnull$a ?v1))) (not (lnull$a (fun_app$t (ltake$b ?v0) ?v1)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (lnull$b ?v1))) (not (lnull$b (fun_app$c (ltake$ ?v0) ?v1)))) ))
(assert (= (fun_app$r lset$b lNil$a) bot$))
(assert (= (fun_app$q lset$a lNil$b) bot$a))
(assert (= (fun_app$p lset$ lNil$) bot$b))
(assert (forall ((?v0 A$)) (= (member$b ?v0 bot$b) false) ))
(assert (forall ((?v0 Enat$)) (= (member$a ?v0 bot$a) false) ))
(assert (forall ((?v0 Enat_enat_prod$)) (= (member$ ?v0 bot$) false) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 Enat_enat_prod$)) (not (fun_app$ ?v0 ?v1)) )) ))
(assert (forall ((?v0 Enat_bool_fun$)) (= (= bot$a (collect$a ?v0)) (forall ((?v1 Enat$)) (not (fun_app$a ?v0 ?v1)) )) ))
(assert (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$b ?v1 ?v0)) ) (= ?v0 bot$b)) ))
(assert (forall ((?v0 Enat_set$)) (= (forall ((?v1 Enat$)) (not (member$a ?v1 ?v0)) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 Enat_enat_prod_set$)) (= (forall ((?v1 Enat_enat_prod$)) (not (member$ ?v1 ?v0)) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 Enat_enat_prod_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 Enat_enat_prod$)) (not (fun_app$ ?v0 ?v1)) )) ))
(assert (forall ((?v0 Enat_bool_fun$)) (= (= (collect$a ?v0) bot$a) (forall ((?v1 Enat$)) (not (fun_app$a ?v0 ?v1)) )) ))
(assert (forall ((?v0 Enat_enat_prod$)) (! (= (fun_app$ bot$c ?v0) bot$d) :pattern ((fun_app$ bot$c ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a bot$e ?v0) bot$d) :pattern ((fun_app$a bot$e ?v0)))))
(assert (= (the_enat$ zero$) zero$a))
(assert (= bot$ (collect$ bot$c)))
(assert (= bot$a (collect$a bot$e)))
(assert (= bot$f zero$))
(assert (forall ((?v0 Enat_enat_prod$)) (! (= (fun_app$ bot$c ?v0) bot$d) :pattern ((fun_app$ bot$c ?v0)))))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a bot$e ?v0) bot$d) :pattern ((fun_app$a bot$e ?v0)))))
(assert (forall ((?v0 A_set$)) (= (exists ((?v1 A$)) (member$b ?v1 ?v0) ) (not (= ?v0 bot$b))) ))
(assert (forall ((?v0 Enat_set$)) (= (exists ((?v1 Enat$)) (member$a ?v1 ?v0) ) (not (= ?v0 bot$a))) ))
(assert (forall ((?v0 Enat_enat_prod_set$)) (= (exists ((?v1 Enat_enat_prod$)) (member$ ?v1 ?v0) ) (not (= ?v0 bot$))) ))
(assert (forall ((?v0 Enat_set$)) (=> (forall ((?v1 Enat$)) (=> (member$a ?v1 ?v0) false) ) (= ?v0 bot$a)) ))
(assert (forall ((?v0 Enat_enat_prod_set$)) (=> (forall ((?v1 Enat_enat_prod$)) (=> (member$ ?v1 ?v0) false) ) (= ?v0 bot$)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat$)) (=> (= ?v0 bot$a) (not (member$a ?v1 ?v0))) ))
(assert (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0))) ))
(assert (forall ((?v0 Enat$)) (=> (member$a ?v0 bot$a) false) ))
(assert (forall ((?v0 Enat_enat_prod$)) (=> (member$ ?v0 bot$) false) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (lnull$b ?v1))) (= (ltl$ (fun_app$c (ltake$ ?v0) ?v1)) (fun_app$c (ltake$ (epred$ ?v0)) (ltl$ ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$)) (=> (member$a ?v0 (fun_app$q lset$a (ltl$b ?v1))) (member$a ?v0 (fun_app$q lset$a ?v1))) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$)) (=> (member$ ?v0 (fun_app$r lset$b (ltl$a ?v1))) (member$ ?v0 (fun_app$r lset$b ?v1))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat$)) (=> (and (not (lnull$a ?v0)) (member$a ?v1 (fun_app$q lset$a (ltl$b ?v0)))) (member$a ?v1 (fun_app$q lset$a ?v0))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$) (?v1 Enat_enat_prod$)) (=> (and (not (lnull$ ?v0)) (member$ ?v1 (fun_app$r lset$b (ltl$a ?v0)))) (member$ ?v1 (fun_app$r lset$b ?v0))) ))
(assert (forall ((?v0 Enat$)) (! (= (fun_app$a bot$e ?v0) (member$a ?v0 bot$a)) :pattern ((fun_app$a bot$e ?v0)))))
(assert (forall ((?v0 Enat_enat_prod$)) (! (= (fun_app$ bot$c ?v0) (member$ ?v0 bot$)) :pattern ((fun_app$ bot$c ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$c (ltake$ ?v0) ?v1) (ite (or (= ?v0 zero$) (lnull$b ?v1)) lNil$ (lCons$ (lhd$ ?v1) (fun_app$c (ltake$ (epred$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (lnull$b ?v1))) (= (fun_app$c (ltake$ ?v0) ?v1) (lCons$ (lhd$ ?v1) (fun_app$c (ltake$ (epred$ ?v0)) (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (lnull$b ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat_llist$)) (=> (not (lnull$a ?v0)) (member$a (lhd$b ?v0) (fun_app$q lset$a ?v0))) ))
(assert (forall ((?v0 Enat_enat_prod_llist$)) (=> (not (lnull$ ?v0)) (member$ (lhd$a ?v0) (fun_app$r lset$b ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_llist$) (?v2 Enat_enat_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (fun_app$q lset$a ?v1)) (and (forall ((?v3 Enat_llist$)) (=> (not (lnull$a ?v3)) (fun_app$e (fun_app$u ?v2 (lhd$b ?v3)) ?v3)) ) (forall ((?v3 Enat_llist$) (?v4 Enat$)) (=> (and (not (lnull$a ?v3)) (and (member$a ?v4 (fun_app$q lset$a (ltl$b ?v3))) (fun_app$e (fun_app$u ?v2 ?v4) (ltl$b ?v3)))) (fun_app$e (fun_app$u ?v2 ?v4) ?v3)) ))) (fun_app$e (fun_app$u ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Enat_enat_prod$) (?v1 Enat_enat_prod_llist$) (?v2 Enat_enat_prod_enat_enat_prod_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (fun_app$r lset$b ?v1)) (and (forall ((?v3 Enat_enat_prod_llist$)) (=> (not (lnull$ ?v3)) (fun_app$d (fun_app$v ?v2 (lhd$a ?v3)) ?v3)) ) (forall ((?v3 Enat_enat_prod_llist$) (?v4 Enat_enat_prod$)) (=> (and (not (lnull$ ?v3)) (and (member$ ?v4 (fun_app$r lset$b (ltl$a ?v3))) (fun_app$d (fun_app$v ?v2 ?v4) (ltl$a ?v3)))) (fun_app$d (fun_app$v ?v2 ?v4) ?v3)) ))) (fun_app$d (fun_app$v ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (and (not (= ?v0 zero$)) (not (lnull$b ?v1))) (= (lhd$ (fun_app$c (ltake$ ?v0) ?v1)) (lhd$ ?v1))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (ltakeWhile$ ?v0 ?v1) (ite (or (lnull$b ?v1) (not (fun_app$b ?v0 (lhd$ ?v1)))) lNil$ (lCons$ (lhd$ ?v1) (ltakeWhile$ ?v0 (ltl$ ?v1))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (lnull$b ?v0)) (fun_app$b ?v1 (lhd$ ?v0))) (= (ltakeWhile$ ?v1 ?v0) (lCons$ (lhd$ ?v0) (ltakeWhile$ ?v1 (ltl$ ?v0))))) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$a) false) (=> (not (= ?v0 zero$a)) false)) false) ))
(assert (= bot$g zero$a))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (lzip$ ?v0 ?v1) (lCons$a (pair$ (lhd$b ?v0) (lhd$b ?v1)) (lzip$ (ltl$b ?v0) (ltl$b ?v1))))) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (= (lzip$ ?v0 ?v1) (ite (or (lnull$a ?v0) (lnull$a ?v1)) lNil$a (lCons$a (pair$ (lhd$b ?v0) (lhd$b ?v1)) (lzip$ (ltl$b ?v0) (ltl$b ?v1))))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_prod_set$)) (=> (and (member$ (pair$ ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (member$ (pair$ ?v3 ?v4) ?v2) (or (and (= ?v3 zero$) (= ?v4 zero$)) (exists ((?v5 Enat$) (?v6 Enat$)) (and (= ?v3 (eSuc$ ?v5)) (and (= ?v4 (eSuc$ ?v6)) (or (member$ (pair$ ?v5 ?v6) ?v2) (= ?v5 ?v6)))) ))) )) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_llist$) (?v1 Enat_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (= (lhd$a (lzip$ ?v0 ?v1)) (pair$ (lhd$b ?v0) (lhd$b ?v1)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (divides_aux$ (pair$a ?v0 ?v1)) (= ?v1 zero$a)) :pattern ((pair$a ?v0 ?v1)))))
(assert (= zero$a zero$a))
(assert (= (size_natural$ zero$b) zero$a))
(assert (forall ((?v0 Enat$)) (member$ (pair$ zero$ ?v0) le_enat$) ))
(assert (= (size$ zero$b) zero$a))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (member$ (pair$ ?v0 ?v1) le_enat$) (or (exists ((?v2 Enat$)) (and (= ?v0 zero$) (= ?v1 ?v2)) ) (exists ((?v2 Enat$) (?v3 Enat$) (?v4 Enat$)) (and (= ?v0 (eSuc$ ?v2)) (and (= ?v1 (fun_app$h (plus$ ?v3) ?v4)) (and (member$ (pair$ ?v2 ?v3) le_enat$) (not (= ?v4 zero$))))) ))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$h (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$x (plus$a ?v0) zero$a) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (plus$b ?v0 zero$b) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$h (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$x (plus$a zero$a) ?v0) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (plus$b zero$b ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$h (plus$ ?v0) (eSuc$ ?v1)) (eSuc$ (fun_app$h (plus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$h (plus$ (eSuc$ ?v0)) ?v1) (eSuc$ (fun_app$h (plus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$h (plus$ (fun_app$h (plus$ ?v0) ?v1)) ?v2) (fun_app$h (plus$ ?v0) (fun_app$h (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$x (plus$a (fun_app$x (plus$a ?v0) ?v1)) ?v2) (fun_app$x (plus$a ?v0) (fun_app$x (plus$a ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$h (plus$ (fun_app$h (plus$ ?v0) ?v1)) ?v2) (fun_app$h (plus$ ?v0) (fun_app$h (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$x (plus$a (fun_app$x (plus$a ?v0) ?v1)) ?v2) (fun_app$x (plus$a ?v0) (fun_app$x (plus$a ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$h (plus$ ?v0) (fun_app$h (plus$ ?v1) ?v2)) (fun_app$h (plus$ ?v1) (fun_app$h (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$x (plus$a ?v0) (fun_app$x (plus$a ?v1) ?v2)) (fun_app$x (plus$a ?v1) (fun_app$x (plus$a ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$h (plus$ ?v0) ?v1) (fun_app$h (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$h (plus$ ?v0) ?v2) (fun_app$h (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$x (plus$a ?v0) ?v2) (fun_app$x (plus$a ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$h (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$h (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$x (plus$a ?v0) zero$a) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (plus$b ?v0 zero$b) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$h (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$x (plus$a zero$a) ?v0) ?v0) ))
(assert (forall ((?v0 Natural$)) (= (plus$b zero$b ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (not (= ?v0 zero$)) (= (epred$ (fun_app$h (plus$ ?v0) ?v1)) (fun_app$h (plus$ (epred$ ?v0)) ?v1))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$a (fun_app$n ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$a (fun_app$n ?v0 ?v3) ?v4) (or (exists ((?v5 Enat$)) (and (= ?v3 zero$) (= ?v4 ?v5)) ) (exists ((?v5 Enat$) (?v6 Enat$) (?v7 Enat$)) (and (= ?v3 (eSuc$ ?v5)) (and (= ?v4 (fun_app$h (plus$ ?v6) ?v7)) (and (or (fun_app$a (fun_app$n ?v0 ?v5) ?v6) (member$ (pair$ ?v5 ?v6) le_enat$)) (not (= ?v7 zero$))))) ))) )) (member$ (pair$ ?v1 ?v2) le_enat$)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (member$ (pair$ ?v0 ?v1) le_enat$) (not (= ?v2 zero$))) (member$ (pair$ (eSuc$ ?v0) (fun_app$h (plus$ ?v1) ?v2)) le_enat$)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (member$ (pair$ ?v0 ?v1) le_enat$) (and (forall ((?v2 Enat$)) (=> (and (= ?v0 zero$) (= ?v1 ?v2)) false) ) (forall ((?v2 Enat$) (?v3 Enat$) (?v4 Enat$)) (=> (and (= ?v0 (eSuc$ ?v2)) (and (= ?v1 (fun_app$h (plus$ ?v3) ?v4)) (and (member$ (pair$ ?v2 ?v3) le_enat$) (not (= ?v4 zero$))))) false) ))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 (fun_app$x (plus$a ?v0) ?v1)) (= ?v1 zero$a)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (le_enatp$ ?v0) ?v1) (or (exists ((?v2 Enat$)) (and (= ?v0 zero$) (= ?v1 ?v2)) ) (exists ((?v2 Enat$) (?v3 Enat$) (?v4 Enat$)) (and (= ?v0 (eSuc$ ?v2)) (and (= ?v1 (fun_app$h (plus$ ?v3) ?v4)) (and (fun_app$a (le_enatp$ ?v2) ?v3) (not (= ?v4 zero$))))) ))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$x (plus$a ?v0) ?v1) zero$a) (and (= ?v0 zero$a) (= ?v1 zero$a))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$x (plus$a ?v0) zero$a) ?v0) :pattern ((plus$a ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$x (plus$a zero$a) ?v0) ?v0) :pattern ((fun_app$x (plus$a zero$a) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$x (plus$a ?v0) ?v1) ?v0) (= ?v1 zero$a)) ))
(assert (forall ((?v0 Enat$)) (fun_app$a (le_enatp$ zero$) ?v0) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$a (fun_app$n ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$a (fun_app$n ?v0 ?v3) ?v4) (or (exists ((?v5 Enat$)) (and (= ?v3 zero$) (= ?v4 ?v5)) ) (exists ((?v5 Enat$) (?v6 Enat$) (?v7 Enat$)) (and (= ?v3 (eSuc$ ?v5)) (and (= ?v4 (fun_app$h (plus$ ?v6) ?v7)) (and (or (fun_app$a (fun_app$n ?v0 ?v5) ?v6) (fun_app$a (le_enatp$ ?v5) ?v6)) (not (= ?v7 zero$))))) ))) )) (fun_app$a (le_enatp$ ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$a (le_enatp$ ?v0) ?v1) (not (= ?v2 zero$))) (fun_app$a (le_enatp$ (eSuc$ ?v0)) (fun_app$h (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$a (le_enatp$ ?v0) ?v1) (and (forall ((?v2 Enat$)) (=> (and (= ?v0 zero$) (= ?v1 ?v2)) false) ) (forall ((?v2 Enat$) (?v3 Enat$) (?v4 Enat$)) (=> (and (= ?v0 (eSuc$ ?v2)) (and (= ?v1 (fun_app$h (plus$ ?v3) ?v4)) (and (fun_app$a (le_enatp$ ?v2) ?v3) (not (= ?v4 zero$))))) false) ))) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$a (fun_app$n ?v0 ?v1) ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$a (fun_app$n ?v0 ?v3) ?v4) (and (=> (= ?v4 zero$) (= ?v3 zero$)) (=> (and (not (= ?v3 zero$)) (not (= ?v4 zero$))) (or (exists ((?v5 Enat$) (?v6 Enat$)) (and (fun_app$a (fun_app$n ?v0 (epred$ ?v3)) ?v6) (= (epred$ ?v4) (fun_app$h (plus$ ?v6) ?v5))) ) (fun_app$a (less_eq$ (epred$ ?v3)) (epred$ ?v4)))))) )) (fun_app$a (less_eq$ ?v1) ?v2)) ))
(assert (forall ((?v0 Enat$)) (fun_app$a (less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less_eq$a (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v2) ?v1)) (less_eq$a ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less_eq$a (fun_app$x (plus$a ?v0) ?v1) (fun_app$x (plus$a ?v0) ?v2)) (less_eq$a ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$a (less_eq$ ?v0) zero$) (= ?v0 zero$)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$a (less_eq$ (eSuc$ ?v0)) (eSuc$ ?v1)) (fun_app$a (less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (= (fun_app$h (plus$ (enat$ ?v0)) ?v1) (fun_app$h (plus$ (enat$ ?v0)) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Nat$) (?v2 Enat$)) (= (= (fun_app$h (plus$ ?v0) (enat$ ?v1)) (fun_app$h (plus$ ?v2) (enat$ ?v1))) (= ?v0 ?v2)) ))
(check-sat)
(exit)

