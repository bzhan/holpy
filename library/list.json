{
    "content": [
        {
            "depth": 0,
            "name": "Basic definitions",
            "ty": "header"
        },
        {
            "args": [
                "a"
            ],
            "constrs": [
                {
                    "args": [],
                    "name": "nil",
                    "type": "'a list"
                },
                {
                    "args": [
                        "x",
                        "xs"
                    ],
                    "name": "cons",
                    "type": "'a ⇒ 'a list ⇒ 'a list"
                }
            ],
            "name": "list",
            "ty": "type.ind"
        },
        {
            "name": "length",
            "rules": [
                {
                    "prop": "length ([]::'a list) = 0"
                },
                {
                    "prop": "length (x # xs) = Suc (length xs)"
                }
            ],
            "ty": "def.ind",
            "type": "'a list ⇒ nat"
        },
        {
            "name": "nth",
            "rules": [
                {
                    "prop": "nth (x # xs) 0 = x"
                },
                {
                    "prop": "nth (x # xs) (Suc n) = nth xs n"
                }
            ],
            "ty": "def.ind",
            "type": "'a list ⇒ nat ⇒ 'a"
        },
        {
            "name": "append",
            "rules": [
                {
                    "prop": "[] @ xs = xs"
                },
                {
                    "prop": "(x # xs) @ ys = x # xs @ ys"
                }
            ],
            "ty": "def.ind",
            "type": "'a list ⇒ 'a list ⇒ 'a list"
        },
        {
            "name": "rev",
            "rules": [
                {
                    "prop": "rev ([]::'a list) = []"
                },
                {
                    "prop": "rev (x # xs) = rev xs @ [x]"
                }
            ],
            "ty": "def.ind",
            "type": "'a list ⇒ 'a list"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "append_right_neutral",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "append_def_1, ([]::'a list) @ [] = []",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ([]::'a list) @ [] = []"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀x::'a. ∀xs. xs @ [] = xs ⟶ (x # xs) @ [] = x # xs"
                },
                {
                    "args": "x, 'a",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "xs, 'a list",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR xs"
                },
                {
                    "args": "xs @ [] = xs",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "xs @ [] = xs ⊢ xs @ [] = xs"
                },
                {
                    "args": "x # xs @ [] = x # xs",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "xs @ [] = xs ⊢ x # xs @ [] = x # xs"
                },
                {
                    "args": "append_def_2, (x # xs) @ [] = x # xs",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "xs @ [] = xs ⊢ (x # xs) @ [] = x # xs"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x::'a. ∀xs. xs @ [] = xs ⟶ (x # xs) @ [] = x # xs"
                },
                {
                    "args": "list_induct, {P: λxs::'a list. xs @ [] = xs, x: xs}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ xs @ [] = xs"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ xs @ [] = xs"
                }
            ],
            "prop": "xs @ [] = xs",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "list_induct",
                    "var": "xs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x,xs"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_2"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "xs": "'a list"
            }
        },
        {
            "name": "append_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "append_def_1, ([] @ ys) @ zs = [] @ ys @ zs",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ ([] @ ys) @ zs = [] @ ys @ zs"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀x. ∀xs. (xs @ ys) @ zs = xs @ ys @ zs ⟶ ((x # xs) @ ys) @ zs = (x # xs) @ ys @ zs"
                },
                {
                    "args": "x, 'a",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "xs, 'a list",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR xs"
                },
                {
                    "args": "(xs @ ys) @ zs = xs @ ys @ zs",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(xs @ ys) @ zs = xs @ ys @ zs ⊢ (xs @ ys) @ zs = xs @ ys @ zs"
                },
                {
                    "args": "x # (xs @ ys) @ zs = x # xs @ ys @ zs",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "(xs @ ys) @ zs = xs @ ys @ zs ⊢ x # (xs @ ys) @ zs = x # xs @ ys @ zs"
                },
                {
                    "args": "append_def_2, (x # xs @ ys) @ zs = x # xs @ ys @ zs",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(xs @ ys) @ zs = xs @ ys @ zs ⊢ (x # xs @ ys) @ zs = x # xs @ ys @ zs"
                },
                {
                    "args": "append_def_2, ((x # xs) @ ys) @ zs = (x # xs) @ ys @ zs",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(xs @ ys) @ zs = xs @ ys @ zs ⊢ ((x # xs) @ ys) @ zs = (x # xs) @ ys @ zs"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. ∀xs. (xs @ ys) @ zs = xs @ ys @ zs ⟶ ((x # xs) @ ys) @ zs = (x # xs) @ ys @ zs"
                },
                {
                    "args": "list_induct, {P: λxs. (xs @ ys) @ zs = xs @ ys @ zs, x: xs}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (xs @ ys) @ zs = xs @ ys @ zs"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (xs @ ys) @ zs = xs @ ys @ zs"
                }
            ],
            "prop": "(xs @ ys) @ zs = xs @ ys @ zs",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "list_induct",
                    "var": "xs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x,xs"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_2"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_2"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "'a",
                "xs": "'a list",
                "ys": "'a list",
                "zs": "'a list"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "length_append",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, length ys = 0 + length ys",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ length ys = 0 + length ys"
                },
                {
                    "args": "length_def_1, length ys = length ([]::'a list) + length ys",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ length ys = length ([]::'a list) + length ys"
                },
                {
                    "args": "append_def_1, length ([] @ ys) = length ([]::'a list) + length ys",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ length ([] @ ys) = length ([]::'a list) + length ys"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀x. ∀xs. length (xs @ ys) = length xs + length ys ⟶ length ((x # xs) @ ys) = length (x # xs) + length ys"
                },
                {
                    "args": "x, 'a",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "xs, 'a list",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR xs"
                },
                {
                    "args": "length (xs @ ys) = length xs + length ys",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "length (xs @ ys) = length xs + length ys ⊢ length (xs @ ys) = length xs + length ys"
                },
                {
                    "args": "nat_plus_def_2, Suc (length xs + length ys) = Suc (length xs) + length ys",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ Suc (length xs + length ys) = Suc (length xs) + length ys"
                },
                {
                    "args": "Suc (length (xs @ ys)) = Suc (length xs) + length ys",
                    "id": "3.4",
                    "prevs": [
                        "3.2",
                        "3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "length (xs @ ys) = length xs + length ys ⊢ Suc (length (xs @ ys)) = Suc (length xs) + length ys"
                },
                {
                    "args": "length_def_2, length (x # xs @ ys) = length (x # xs) + length ys",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (xs @ ys) = length xs + length ys ⊢ length (x # xs @ ys) = length (x # xs) + length ys"
                },
                {
                    "args": "append_def_2, length ((x # xs) @ ys) = length (x # xs) + length ys",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (xs @ ys) = length xs + length ys ⊢ length ((x # xs) @ ys) = length (x # xs) + length ys"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. ∀xs. length (xs @ ys) = length xs + length ys ⟶ length ((x # xs) @ ys) = length (x # xs) + length ys"
                },
                {
                    "args": "list_induct, {P: λxs. length (xs @ ys) = length xs + length ys, x: xs}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ length (xs @ ys) = length xs + length ys"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ length (xs @ ys) = length xs + length ys"
                }
            ],
            "prop": "length (xs @ ys) = length xs + length ys",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "list_induct",
                    "var": "xs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "length_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "x,xs"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_2"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "theorem": "length_def_2"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_2"
                }
            ],
            "ty": "thm",
            "vars": {
                "xs": "'a list",
                "ys": "'a list"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "rev_append",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "append_right_neutral, rev ys = rev ys @ []",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ rev ys = rev ys @ []"
                },
                {
                    "args": "rev_def_1, rev ys = rev ys @ rev []",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ rev ys = rev ys @ rev []"
                },
                {
                    "args": "append_def_1, rev ([] @ ys) = rev ys @ rev []",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ rev ([] @ ys) = rev ys @ rev []"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀x. ∀xs. rev (xs @ ys) = rev ys @ rev xs ⟶ rev ((x # xs) @ ys) = rev ys @ rev (x # xs)"
                },
                {
                    "args": "x, 'a",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "xs, 'a list",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR xs"
                },
                {
                    "args": "rev (xs @ ys) = rev ys @ rev xs",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "rev (xs @ ys) = rev ys @ rev xs ⊢ rev (xs @ ys) = rev ys @ rev xs"
                },
                {
                    "args": "append_assoc, (rev ys @ rev xs) @ [x] = rev ys @ rev xs @ [x]",
                    "id": "3.3",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (rev ys @ rev xs) @ [x] = rev ys @ rev xs @ [x]"
                },
                {
                    "args": "rev (xs @ ys) @ [x] = rev ys @ rev xs @ [x]",
                    "id": "3.4",
                    "prevs": [
                        "3.2",
                        "3.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "rev (xs @ ys) = rev ys @ rev xs ⊢ rev (xs @ ys) @ [x] = rev ys @ rev xs @ [x]"
                },
                {
                    "args": "rev_def_2, rev (x # xs @ ys) = rev ys @ rev (x # xs)",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (xs @ ys) = rev ys @ rev xs ⊢ rev (x # xs @ ys) = rev ys @ rev (x # xs)"
                },
                {
                    "args": "append_def_2, rev ((x # xs) @ ys) = rev ys @ rev (x # xs)",
                    "id": "3.6",
                    "prevs": [
                        "3.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (xs @ ys) = rev ys @ rev xs ⊢ rev ((x # xs) @ ys) = rev ys @ rev (x # xs)"
                },
                {
                    "args": "",
                    "id": "3.7",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x. ∀xs. rev (xs @ ys) = rev ys @ rev xs ⟶ rev ((x # xs) @ ys) = rev ys @ rev (x # xs)"
                },
                {
                    "args": "list_induct, {P: λxs. rev (xs @ ys) = rev ys @ rev xs, x: xs}",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ rev (xs @ ys) = rev ys @ rev xs"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ rev (xs @ ys) = rev ys @ rev xs"
                }
            ],
            "prop": "rev (xs @ ys) = rev ys @ rev xs",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "list_induct",
                    "var": "xs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "append_right_neutral"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "x,xs"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_2"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_2"
                },
                {
                    "fact_ids": [
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "xs": "'a list",
                "ys": "'a list"
            }
        },
        {
            "name": "rev_rev",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "rev_def_1, rev ([]::'a list) = []",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ rev ([]::'a list) = []"
                },
                {
                    "args": "rev_def_1, rev (rev ([]::'a list)) = []",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ rev (rev ([]::'a list)) = []"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀x::'a. ∀xs. rev (rev xs) = xs ⟶ rev (rev (x # xs)) = x # xs"
                },
                {
                    "args": "x, 'a",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "xs, 'a list",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR xs"
                },
                {
                    "args": "rev (rev xs) = xs",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "rev (rev xs) = xs ⊢ rev (rev xs) = xs"
                },
                {
                    "args": "x # rev (rev xs) = x # xs",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "rev (rev xs) = xs ⊢ x # rev (rev xs) = x # xs"
                },
                {
                    "args": "append_def_1, x # [] @ rev (rev xs) = x # xs",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ x # [] @ rev (rev xs) = x # xs"
                },
                {
                    "args": "append_def_2, [x] @ rev (rev xs) = x # xs",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ [x] @ rev (rev xs) = x # xs"
                },
                {
                    "args": "append_def_1, ([] @ [x]) @ rev (rev xs) = x # xs",
                    "id": "2.6",
                    "prevs": [
                        "2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ ([] @ [x]) @ rev (rev xs) = x # xs"
                },
                {
                    "args": "rev_def_1, (rev [] @ [x]) @ rev (rev xs) = x # xs",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ (rev [] @ [x]) @ rev (rev xs) = x # xs"
                },
                {
                    "args": "rev_def_2, rev [x] @ rev (rev xs) = x # xs",
                    "id": "2.8",
                    "prevs": [
                        "2.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ rev [x] @ rev (rev xs) = x # xs"
                },
                {
                    "args": "rev_append, rev (rev xs @ [x]) = x # xs",
                    "id": "2.9",
                    "prevs": [
                        "2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ rev (rev xs @ [x]) = x # xs"
                },
                {
                    "args": "rev_def_2, rev (rev (x # xs)) = x # xs",
                    "id": "2.10",
                    "prevs": [
                        "2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "rev (rev xs) = xs ⊢ rev (rev (x # xs)) = x # xs"
                },
                {
                    "args": "",
                    "id": "2.11",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.10"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x::'a. ∀xs. rev (rev xs) = xs ⟶ rev (rev (x # xs)) = x # xs"
                },
                {
                    "args": "list_induct, {P: λxs::'a list. rev (rev xs) = xs, x: xs}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ rev (rev xs) = xs"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ rev (rev xs) = xs"
                }
            ],
            "prop": "rev (rev xs) = xs",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "list_induct",
                    "var": "xs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x,xs"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_2"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_append"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_2"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_1"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_1"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_2"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "theorem": "append_def_1"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "xs": "'a list"
            }
        },
        {
            "name": "rev_length",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "rev_def_1, length (rev ([]::'a list)) = length ([]::'a list)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ length (rev ([]::'a list)) = length ([]::'a list)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀x::'a. ∀xs. length (rev xs) = length xs ⟶ length (rev (x # xs)) = length (x # xs)"
                },
                {
                    "args": "x, 'a",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "xs, 'a list",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR xs"
                },
                {
                    "args": "length (rev xs) = length xs",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "length (rev xs) = length xs ⊢ length (rev xs) = length xs"
                },
                {
                    "args": "length xs + Suc 0 = Suc (length xs)",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ length xs + Suc 0 = Suc (length xs)"
                },
                {
                    "args": "length (rev xs) + Suc 0 = Suc (length xs)",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "length (rev xs) = length xs ⊢ length (rev xs) + Suc 0 = Suc (length xs)"
                },
                {
                    "args": "length_def_1, length (rev xs) + Suc (length ([]::'a list)) = Suc (length xs)",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (rev xs) = length xs ⊢ length (rev xs) + Suc (length ([]::'a list)) = Suc (length xs)"
                },
                {
                    "args": "length_def_2, length (rev xs) + length [x] = Suc (length xs)",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (rev xs) = length xs ⊢ length (rev xs) + length [x] = Suc (length xs)"
                },
                {
                    "args": "length_append, length (rev xs @ [x]) = Suc (length xs)",
                    "id": "1.7",
                    "prevs": [
                        "1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (rev xs) = length xs ⊢ length (rev xs @ [x]) = Suc (length xs)"
                },
                {
                    "args": "rev_def_2, length (rev (x # xs)) = Suc (length xs)",
                    "id": "1.8",
                    "prevs": [
                        "1.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (rev xs) = length xs ⊢ length (rev (x # xs)) = Suc (length xs)"
                },
                {
                    "args": "length_def_2, length (rev (x # xs)) = length (x # xs)",
                    "id": "1.9",
                    "prevs": [
                        "1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "length (rev xs) = length xs ⊢ length (rev (x # xs)) = length (x # xs)"
                },
                {
                    "args": "",
                    "id": "1.10",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.9"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀x::'a. ∀xs. length (rev xs) = length xs ⟶ length (rev (x # xs)) = length (x # xs)"
                },
                {
                    "args": "list_induct, {P: λxs::'a list. length (rev xs) = length xs, x: xs}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ length (rev xs) = length xs"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ length (rev xs) = length xs"
                }
            ],
            "prop": "length (rev xs) = length xs",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "list_induct",
                    "var": "xs"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "x,xs"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "length_def_2"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "rev_def_2"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "length_append"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "length_def_2"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal",
                    "theorem": "length_def_1"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "xs": "'a list"
            }
        },
        {
            "name": "set",
            "rules": [
                {
                    "prop": "set ([]::'a list) = ∅"
                },
                {
                    "prop": "set (x # xs) = insert x (set xs)"
                }
            ],
            "ty": "def.ind",
            "type": "'a list ⇒ 'a set"
        },
        {
            "name": "distinct",
            "rules": [
                {
                    "prop": "distinct ([]::'a list) ⟷ true"
                },
                {
                    "prop": "distinct (x # xs) ⟷ ¬(x ∈ set xs) ∧ distinct xs"
                }
            ],
            "ty": "def.ind",
            "type": "'a list ⇒ bool"
        },
        {
            "name": "not_member_nil",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬false ⟶ true"
                },
                {
                    "args": "¬false",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "trueI",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem",
                    "th": "⊢ true"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬false ⟶ true"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ true ⟶ ¬false"
                },
                {
                    "args": "true",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "true ⊢ true"
                },
                {
                    "args": "false ⟶ false",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ false ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "true ⊢ ¬false"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ true ⟶ ¬false"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬false ⟷ true"
                },
                {
                    "args": "member_empty_simp, ¬(x ∈ ∅) ⟷ true",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x ∈ ∅) ⟷ true"
                },
                {
                    "args": "set_def_1, ¬(x ∈ set []) ⟷ true",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ¬(x ∈ set []) ⟷ true"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x ∈ set []) ⟷ true"
                }
            ],
            "prop": "¬(x ∈ set []) ⟷ true",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "set_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "member_empty_simp"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "trueI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "'a"
            }
        },
        {
            "name": "not_member_cons",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x ∈ set (y # ys)) ⟶ ¬(x = y) ∧ ¬(x ∈ set ys)"
                },
                {
                    "args": "¬(x ∈ set (y # ys))",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x ∈ set (y # ys)) ⊢ ¬(x ∈ set (y # ys))"
                },
                {
                    "args": "set_def_2",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ set (y # ys)) ⊢ ¬(x ∈ insert y (set ys))"
                },
                {
                    "args": "member_insert",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ set (y # ys)) ⊢ ¬(x = y ∨ x ∈ set ys)"
                },
                {
                    "args": "de_morgan_thm2",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(x ∈ set (y # ys)) ⊢ ¬(x = y) ∧ ¬(x ∈ set ys)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x ∈ set (y # ys)) ⟶ ¬(x = y) ∧ ¬(x ∈ set ys)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(x = y) ∧ ¬(x ∈ set ys) ⟶ ¬(x ∈ set (y # ys))"
                },
                {
                    "args": "¬(x = y) ∧ ¬(x ∈ set ys)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = y) ∧ ¬(x ∈ set ys) ⊢ ¬(x = y) ∧ ¬(x ∈ set ys)"
                },
                {
                    "args": "de_morgan_thm2, ¬(x = y ∨ x ∈ set ys)",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = y) ∧ ¬(x ∈ set ys) ⊢ ¬(x = y ∨ x ∈ set ys)"
                },
                {
                    "args": "member_insert, ¬(x ∈ insert y (set ys))",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = y) ∧ ¬(x ∈ set ys) ⊢ ¬(x ∈ insert y (set ys))"
                },
                {
                    "args": "set_def_2, ¬(x ∈ set (y # ys))",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(x = y) ∧ ¬(x ∈ set ys) ⊢ ¬(x ∈ set (y # ys))"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x = y) ∧ ¬(x ∈ set ys) ⟶ ¬(x ∈ set (y # ys))"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ¬(x ∈ set (y # ys)) ⟷ ¬(x = y) ∧ ¬(x ∈ set ys)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(x ∈ set (y # ys)) ⟷ ¬(x = y) ∧ ¬(x ∈ set ys)"
                }
            ],
            "prop": "¬(x ∈ set (y # ys)) ⟷ ¬(x = y) ∧ ¬(x ∈ set ys)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "set_def_2"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "member_insert"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "set_def_2"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "member_insert"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "'a",
                "y": "'a",
                "ys": "'a list"
            }
        }
    ],
    "description": "Lists",
    "imports": [
        "set"
    ],
    "name": "list"
}