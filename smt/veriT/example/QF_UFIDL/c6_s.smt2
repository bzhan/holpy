(set-info :smt-lib-version 2.6)
(set-logic QF_UFIDL)
(set-info :source |
These benchmarks were generated by Panagiotis Manolios and Sudarshan K. Srinivasan.
They were generated from experiments in microprocessor verification based on
refinement.

This benchmark was automatically translated into SMT-LIB format by Albert Oliveras.
|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun pc0 () Int)
(declare-fun a1 () Int)
(declare-fun ZERO () Int)
(declare-fun dmem0 () Int)
(declare-fun IMem0 (Int) Int)
(declare-fun GetImm (Int) Int)
(declare-fun DMem_Read (Int Int) Int)
(declare-fun op (Int) Int)
(declare-fun SelectTargetPC (Int Int Int) Int)
(declare-fun NextDMem (Int Int Int) Int)
(declare-fun dest (Int) Int)
(declare-fun alu (Int Int Int) Int)
(declare-fun src1 (Int) Int)
(declare-fun rf0 (Int) Int)
(declare-fun src2 (Int) Int)
(declare-fun TakeBranch (Int Int Int) Bool)
(declare-fun GetIsBranch (Int) Bool)
(declare-fun GetRegWrite (Int) Bool)
(declare-fun GetMemToReg (Int) Bool)
(declare-fun GetMemWrite (Int) Bool)
(declare-fun GetuseImm (Int) Bool)
(assert (let ((?v_0 (IMem0 pc0))) (let ((?v_1 (op ?v_0)) (?v_2 (rf0 (src1 ?v_0))) (?v_3 (rf0 (src2 ?v_0)))) (let ((?v_8 (and (TakeBranch ?v_1 ?v_2 ?v_3) (GetIsBranch ?v_0))) (?v_36 (SelectTargetPC ?v_1 ?v_2 pc0)) (?v_10 (+ 1 pc0))) (let ((?v_7 (ite ?v_8 ?v_36 ?v_10)) (?v_11 (dest ?v_0)) (?v_9 (GetRegWrite ?v_0)) (?v_4 (alu ?v_1 ?v_2 (ite (GetuseImm ?v_0) (GetImm ?v_0) ?v_3)))) (let ((?v_24 (ite (GetMemToReg ?v_0) (DMem_Read dmem0 ?v_4) ?v_4)) (?v_5 (rf0 a1))) (let ((?v_54 (= (ite (and (= a1 ?v_11) ?v_9) ?v_24 ?v_5) ?v_5)) (?v_55 (= (ite (GetMemWrite ?v_0) (NextDMem dmem0 ?v_4 ?v_3) dmem0) dmem0)) (?v_56 (+ 1 ZERO))) (let ((?v_58 (+ 1 ?v_56))) (let ((?v_60 (+ 1 ?v_58))) (let ((?v_6 (+ 1 ?v_60))) (let ((?v_62 (+ 1 (+ 1 (+ 1 (+ 1 ?v_6))))) (?v_17 (not ?v_8)) (?v_12 (IMem0 ?v_10))) (let ((?v_14 (src1 ?v_12)) (?v_15 (src2 ?v_12))) (let ((?v_18 (and ?v_9 (or (= ?v_14 ?v_11) (= ?v_15 ?v_11))))) (let ((?v_16 (not ?v_18))) (let ((?v_13 (and ?v_17 ?v_16)) (?v_47 (op ?v_12)) (?v_48 (rf0 ?v_14))) (let ((?v_46 (and ?v_13 (and (and (TakeBranch ?v_47 ?v_48 (rf0 ?v_15)) ?v_16) (GetIsBranch ?v_12))))) (let ((?v_27 (not ?v_46)) (?v_21 (+ 1 ?v_10))) (let ((?v_19 (ite ?v_18 ?v_12 (IMem0 ?v_21)))) (let ((?v_23 (src1 ?v_19)) (?v_20 (dest ?v_12)) (?v_25 (src2 ?v_19))) (let ((?v_28 (and (and (GetRegWrite ?v_12) ?v_16) (or (= ?v_23 ?v_20) (= ?v_25 ?v_20))))) (let ((?v_26 (and ?v_17 (not ?v_28)))) (let ((?v_22 (and ?v_27 ?v_26)) (?v_31 (ite ?v_18 ?v_10 ?v_21)) (?v_50 (op ?v_19)) (?v_51 (ite (and (= ?v_23 ?v_11) ?v_9) ?v_24 (rf0 ?v_23)))) (let ((?v_49 (and ?v_22 (and (and (TakeBranch ?v_50 ?v_51 (ite (and (= ?v_25 ?v_11) ?v_9) ?v_24 (rf0 ?v_25))) ?v_26) (GetIsBranch ?v_19))))) (let ((?v_33 (not ?v_49)) (?v_32 (ite ?v_18 ?v_21 (+ 1 ?v_21)))) (let ((?v_29 (ite ?v_28 ?v_19 (IMem0 ?v_32))) (?v_30 (dest ?v_19))) (let ((?v_35 (and (and (GetRegWrite ?v_19) ?v_26) (or (= (src1 ?v_29) ?v_30) (= (src2 ?v_29) ?v_30))))) (let ((?v_39 (not ?v_35))) (let ((?v_34 (and ?v_27 (and ?v_39 ?v_17)))) (let ((?v_57 (and ?v_33 ?v_34)) (?v_40 (ite ?v_28 ?v_31 ?v_32)) (?v_41 (ite ?v_8 ?v_36 (ite ?v_28 ?v_32 (+ 1 ?v_32))))) (let ((?v_37 (ite ?v_35 ?v_29 (IMem0 ?v_41))) (?v_38 (dest ?v_29))) (let ((?v_44 (and (and (GetRegWrite ?v_29) ?v_34) (or (= (src1 ?v_37) ?v_38) (= (src2 ?v_37) ?v_38))))) (let ((?v_42 (not ?v_44)) (?v_43 (and ?v_27 (or ?v_39 ?v_17)))) (let ((?v_59 (and ?v_33 (and ?v_42 ?v_43))) (?v_45 (ite ?v_35 ?v_40 ?v_41)) (?v_61 (and ?v_33 (or ?v_42 ?v_43))) (?v_52 (ite ?v_46 (SelectTargetPC ?v_47 ?v_48 ?v_10) (ite ?v_35 ?v_41 (+ 1 ?v_41))))) (let ((?v_53 (ite ?v_13 ?v_10 (ite ?v_22 ?v_31 (ite ?v_57 ?v_40 (ite ?v_59 ?v_45 (ite ?v_61 (ite ?v_44 ?v_45 ?v_52) (ite ?v_49 (SelectTargetPC ?v_50 ?v_51 ?v_31) (ite ?v_44 ?v_52 (+ 1 ?v_52)))))))))) (not (and (or (and (and (= ?v_7 pc0) ?v_54) ?v_55) (< ?v_6 ?v_62)) (or (= ?v_7 ?v_53) (and (and (and (= pc0 ?v_53) ?v_54) ?v_55) (< (ite ?v_13 ZERO (ite ?v_22 ?v_56 (ite ?v_57 ?v_58 (ite ?v_59 ?v_60 (ite ?v_61 ?v_6 ?v_62))))) ZERO)))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
