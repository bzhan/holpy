(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |Benchmarks from the paper: "Extending Sledgehammer with SMT Solvers" by Jasmin Blanchette, Sascha Bohme, and Lawrence C. Paulson, CADE 2011.  Translated to SMT2 by Andrew Reynolds and Morgan Deters.|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-sort S3 0)
(declare-sort S4 0)
(declare-sort S5 0)
(declare-sort S6 0)
(declare-sort S7 0)
(declare-sort S8 0)
(declare-sort S9 0)
(declare-sort S10 0)
(declare-sort S11 0)
(declare-sort S12 0)
(declare-sort S13 0)
(declare-sort S14 0)
(declare-sort S15 0)
(declare-sort S16 0)
(declare-fun f1 () S1)
(declare-fun f2 () S1)
(declare-fun f3 (S3 S2) S4)
(declare-fun f4 () S3)
(declare-fun f5 (S5 S6) S4)
(declare-fun f6 () S5)
(declare-fun f7 (S7 S2) S6)
(declare-fun f8 () S7)
(declare-fun f9 (S8 S4) S1)
(declare-fun f10 () S8)
(declare-fun f11 (S8 S8) S1)
(declare-fun f12 () S8)
(declare-fun f13 (S9 S8) S8)
(declare-fun f14 (S4) S9)
(declare-fun f15 () S2)
(declare-fun f16 () S1)
(declare-fun f17 () S1)
(declare-fun f18 (S6) S1)
(declare-fun f19 () S6)
(declare-fun f20 (S10 S2) S11)
(declare-fun f21 () S10)
(declare-fun f22 (S6) S11)
(declare-fun f23 () S6)
(declare-fun f24 (S12 S13) S8)
(declare-fun f25 (S3) S12)
(declare-fun f26 (S10) S13)
(declare-fun f27 (S14 S13) S13)
(declare-fun f28 (S2) S14)
(declare-fun f29 (S8) S8)
(declare-fun f30 (S16 S8) S13)
(declare-fun f31 (S15) S16)
(declare-fun f32 (S15 S4) S2)
(assert (not (= f1 f2)))
(assert (forall ((?v0 S2)) (= (f3 f4 ?v0) (f5 f6 (f7 f8 ?v0)))))
(assert (forall ((?v0 S4)) (= (= (f9 f10 ?v0) f1) false)))
(assert (not (= (f11 f12 (f13 (f14 (f5 f6 (f7 f8 f15))) f12)) f1)))
(assert (= f16 f1))
(assert (= f17 f1))
(assert (= (f18 f19) f1))
(assert (= (f20 f21 f15) (f22 f23)))
(assert (= (f11 f12 (f24 (f25 f4) (f26 f21))) f1))
(assert (forall ((?v0 S8) (?v1 S4) (?v2 S8)) (let ((?v_0 (f14 ?v1))) (=> (= (f11 ?v0 (f13 ?v_0 ?v2)) f1) (and (= (f11 ?v0 (f13 ?v_0 f12)) f1) (= (f11 ?v0 ?v2) f1))))))
(assert (forall ((?v0 S10) (?v1 S2) (?v2 S6)) (let ((?v_0 (f26 ?v0))) (=> (= (f20 ?v0 ?v1) (f22 ?v2)) (= (f27 (f28 ?v1) ?v_0) ?v_0)))))
(assert (= f12 (f29 f10)))
(assert (forall ((?v0 S3) (?v1 S2) (?v2 S13)) (let ((?v_0 (f25 ?v0))) (= (f24 ?v_0 (f27 (f28 ?v1) ?v2)) (f13 (f14 (f3 ?v0 ?v1)) (f24 ?v_0 ?v2))))))
(assert (forall ((?v0 S15) (?v1 S4) (?v2 S8)) (let ((?v_0 (f31 ?v0))) (= (f30 ?v_0 (f13 (f14 ?v1) ?v2)) (f27 (f28 (f32 ?v0 ?v1)) (f30 ?v_0 ?v2))))))
(check-sat)
(exit)
