(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: bridge.1.prop1
query-maker: "Yices 2"
query-time: 0.001000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$8 0)
(declare-sort utt$32 0)
(declare-fun y$1 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$2028 () Bool)
(declare-fun y$2031 () Bool)
(declare-fun y$2032 () Bool)
(declare-fun y$2080 () Bool)
(declare-fun y$2088 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$a_free () Bool)
(declare-fun y$a_go_left_soldier_1 () Bool)
(declare-fun y$a_go_left_soldier_2 () Bool)
(declare-fun y$a_go_left_soldier_3 () Bool)
(declare-fun y$a_go_left_soldier_4 () Bool)
(declare-fun y$a_go_right_soldier_1 () Bool)
(declare-fun y$a_go_right_soldier_2 () Bool)
(declare-fun y$a_go_right_soldier_3 () Bool)
(declare-fun y$a_go_right_soldier_4 () Bool)
(declare-fun y$a_going () Bool)
(declare-fun y$a_left_soldier_1 () Bool)
(declare-fun y$a_left_soldier_2 () Bool)
(declare-fun y$a_left_soldier_3 () Bool)
(declare-fun y$a_left_soldier_4 () Bool)
(declare-fun y$a_one () Bool)
(declare-fun y$a_right_soldier_1 () Bool)
(declare-fun y$a_right_soldier_2 () Bool)
(declare-fun y$a_right_soldier_3 () Bool)
(declare-fun y$a_right_soldier_4 () Bool)
(declare-fun y$a_two () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id30 () Bool)
(declare-fun y$id30_op () Bool)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n10s8 () utt$8)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n20s8 () utt$8)
(declare-fun y$n25s8 () utt$8)
(declare-fun y$n4s8 () utt$8)
(declare-fun y$n5s8 () utt$8)
(declare-fun y$n60s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$v_on_right () utt$8)
(declare-fun y$v_time1 () utt$8)
(declare-fun y$v_time2 () utt$8)
(declare-fun y$v_total_time () utt$8)
(declare-fun y$v_where_is_torch () utt$8)
(assert (distinct y$n0s8 y$n25s8 y$n20s8 y$n10s8 y$n5s8 y$n1s8 y$n4s8))
(assert (not (= y$n1s32 y$n60s32)))
(assert (= y$a_free (not y$1)))
(assert (= y$a_go_left_soldier_1 (not y$3)))
(assert (= y$a_go_left_soldier_2 (not y$5)))
(assert (= y$a_go_left_soldier_3 (not y$7)))
(assert (= y$a_go_left_soldier_4 (not y$9)))
(assert (= y$a_go_right_soldier_1 (not y$11)))
(assert (= y$a_go_right_soldier_2 (not y$13)))
(assert (= y$a_go_right_soldier_3 (not y$15)))
(assert (= y$a_go_right_soldier_4 (not y$17)))
(assert (= y$a_going (not y$19)))
(assert (= y$a_left_soldier_1 (not y$21)))
(assert (= y$a_left_soldier_2 (not y$23)))
(assert (= y$a_left_soldier_3 (not y$25)))
(assert (= y$a_left_soldier_4 (not y$27)))
(assert (= y$a_one (not y$29)))
(assert (= y$a_right_soldier_1 (not y$31)))
(assert (= y$a_right_soldier_2 (not y$33)))
(assert (= y$a_right_soldier_3 (not y$35)))
(assert (= y$a_right_soldier_4 (not y$37)))
(assert (= y$a_two (not y$39)))
(assert (= y$dve_invalid (not y$41)))
(assert (= y$44 (= y$n0s8 y$v_on_right)))
(assert (= y$46 (= y$n0s8 y$v_time1)))
(assert (= y$48 (= y$n0s8 y$v_time2)))
(assert (= y$50 (= y$n0s8 y$v_total_time)))
(assert (= y$52 (= y$n0s8 y$v_where_is_torch)))
(assert (= y$prop (not y$2080)))
(assert (= y$2028 (= y$n4s8 y$v_on_right)))
(assert (= y$id30_op (and y$41 y$2028)))
(assert (= y$id30_op (not y$2031)))
(assert (= y$2032 (= y$prop y$2031)))
(assert (= y$2088 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$33 y$35 y$37 y$39 y$41 y$44 y$46 y$48 y$50 y$52 y$2080 y$2032)))
(assert y$2088)
(check-sat)
(exit)
