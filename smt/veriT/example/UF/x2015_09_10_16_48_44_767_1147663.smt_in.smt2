(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort T_N_sum_T_fun$ 0)
(declare-sort T_T_N_sum_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_T_N_sum_sum_set$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_dtree_sum_T_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_T_sum_T_T_sum_fun$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_set$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-sort T_N_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0)
(declare-sort T_dtree_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0)
(declare-sort T_N_sum$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-sort T_T_N_sum_sum$ 0)
(declare-sort T_T_dtree_sum_sum$ 0)
(declare-fun projl$ (T_N_sum$) T$)
(declare-fun inl$ (T$) T_N_sum$)
(declare-fun projr$ (T_N_sum$) N$)
(declare-fun inr$ (N$) T_N_sum$)
(declare-fun projl$a (T_dtree_sum$) T$)
(declare-fun inl$a (T$) T_dtree_sum$)
(declare-fun projr$a (T_dtree_sum$) Dtree$)
(declare-fun inr$a (Dtree$) T_dtree_sum$)
(declare-fun projl$b (T_T_sum$) T$)
(declare-fun inl$b (T$) T_T_sum$)
(declare-fun projr$b (T_T_sum$) T$)
(declare-fun inr$b (T$) T_T_sum$)
(declare-fun projl$c (T_T_N_sum_sum$) T$)
(declare-fun inl$c (T$) T_T_N_sum_sum$)
(declare-fun projr$c (T_T_N_sum_sum$) T_N_sum$)
(declare-fun inr$c (T_N_sum$) T_T_N_sum_sum$)
(declare-fun projl$d (T_T_dtree_sum_sum$) T$)
(declare-fun inl$d (T$) T_T_dtree_sum_sum$)
(declare-fun projr$d (T_T_dtree_sum_sum$) T_dtree_sum$)
(declare-fun inr$d (T_dtree_sum$) T_T_dtree_sum_sum$)
(declare-fun t$ () T$)
(declare-fun id$ () T_T_fun$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_T_N_sum_fun$)
(declare-fun id$a () T_set_T_set_fun$)
(declare-fun id$b () T_T_sum_T_T_sum_fun$)
(declare-fun sup$ (N_set$ N_set$) N_set$)
(declare-fun top$ () N_set$)
(declare-fun uua$ () T_T_dtree_sum_fun$)
(declare-fun uub$ () T_N_sum_T_T_N_sum_sum_fun$)
(declare-fun uuc$ () T_dtree_sum_T_T_dtree_sum_sum_fun$)
(declare-fun uud$ () N_T_N_sum_fun$)
(declare-fun uue$ () Dtree_T_dtree_sum_fun$)
(declare-fun uuf$ (T_set$) T_bool_fun$)
(declare-fun uug$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun uuh$ (N_set$) N_bool_fun$)
(declare-fun uui$ (T_N_sum_set$) T_N_sum_bool_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun top$a () T_set$)
(declare-fun top$b () T_dtree_sum_set$)
(declare-fun top$c () T_N_sum_set$)
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$) T_N_sum_set$)
(declare-fun inFr2$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun setlp$ (T_N_sum$) T_bool_fun$)
(declare-fun subtr$ () N_set_dtree_dtree_bool_fun_fun_fun$)
(declare-fun image$a (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun image$b (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$) T_dtree_sum_set$)
(declare-fun image$c (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun image$d (T_T_fun$) T_set_T_set_fun$)
(declare-fun image$e (T_N_fun$ T_set$) N_set$)
(declare-fun image$f (N_T_fun$ N_set$) T_set$)
(declare-fun image$g (N_N_fun$ N_set$) N_set$)
(declare-fun image$h (T_T_dtree_sum_fun$ T_set$) T_dtree_sum_set$)
(declare-fun image$i (T_T_N_sum_fun$ T_set$) T_N_sum_set$)
(declare-fun image$j (T_dtree_sum_T_fun$ T_dtree_sum_set$) T_set$)
(declare-fun image$k (T_dtree_sum_N_fun$ T_dtree_sum_set$) N_set$)
(declare-fun image$l (N_T_dtree_sum_fun$ N_set$) T_dtree_sum_set$)
(declare-fun image$m (N_T_N_sum_fun$ N_set$) T_N_sum_set$)
(declare-fun image$n (T_N_sum_T_fun$ T_N_sum_set$) T_set$)
(declare-fun image$o (T_N_sum_N_fun$ T_N_sum_set$) N_set$)
(declare-fun image$p (T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_T_N_sum_sum_set$)
(declare-fun image$q (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun image$r (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun image$s (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun setlp$a (T_dtree_sum$) T_bool_fun$)
(declare-fun subtr2$ () N_set_dtree_dtree_bool_fun_fun_fun$)
(declare-fun vimage$ (T_T_N_sum_fun$ T_N_sum_set$) T_set$)
(declare-fun collect$ (T_N_sum_bool_fun$) T_N_sum_set$)
(declare-fun fun_app$ (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum$) T_T_dtree_sum_sum$)
(declare-fun insert$a (T$ T_set$) T_set$)
(declare-fun insert$b (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun insert$c (T_N_sum$ T_N_sum_set$) T_N_sum_set$)
(declare-fun map_sum$ (T_T_fun$) Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun member$a (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun member$b (T$ T_set$) Bool)
(declare-fun member$c (N$ N_set$) Bool)
(declare-fun subtrOf$ (Dtree$) N_dtree_fun$)
(declare-fun vimage$a (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun vimage$b (T_T_fun$) T_set_T_set_fun$)
(declare-fun vimage$c (T_N_fun$ N_set$) T_set$)
(declare-fun vimage$d (N_T_fun$ T_set$) N_set$)
(declare-fun vimage$e (N_N_fun$ N_set$) N_set$)
(declare-fun vimage$f (T_dtree_sum_T_fun$ T_set$) T_dtree_sum_set$)
(declare-fun vimage$g (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$h (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$i (N_T_N_sum_fun$ T_N_sum_set$) N_set$)
(declare-fun vimage$j (T_N_sum_T_fun$ T_set$) T_N_sum_set$)
(declare-fun vimage$k (T_N_sum_N_fun$ N_set$) T_N_sum_set$)
(declare-fun vimage$l (T_N_sum_T_T_N_sum_sum_fun$ T_T_N_sum_sum_set$) T_N_sum_set$)
(declare-fun vimage$m (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$n (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun collect$a (T_bool_fun$) T_set$)
(declare-fun collect$b (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$c (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_N_sum_T_T_N_sum_sum_fun$ T_N_sum$) T_T_N_sum_sum$)
(declare-fun fun_app$b (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun fun_app$c (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun fun_app$d (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun fun_app$e (T_T_N_sum_fun$ T$) T_N_sum$)
(declare-fun fun_app$f (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$g (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun fun_app$h (T_bool_fun$ T$) Bool)
(declare-fun fun_app$i (N_bool_fun$ N$) Bool)
(declare-fun fun_app$j (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun fun_app$k (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$) T_N_sum_T_dtree_sum_fun$)
(declare-fun fun_app$l (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$m (T_T_fun$ T$) T$)
(declare-fun fun_app$n (T_N_fun$ T$) N$)
(declare-fun fun_app$o (N_T_fun$ N$) T$)
(declare-fun fun_app$p (N_N_fun$ N$) N$)
(declare-fun fun_app$q (T_dtree_sum_T_fun$ T_dtree_sum$) T$)
(declare-fun fun_app$r (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$s (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$t (T_N_sum_T_fun$ T_N_sum$) T$)
(declare-fun fun_app$u (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$v (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$w (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$) T_N_sum$)
(declare-fun fun_app$x (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun fun_app$y (T_N_sum_T_dtree_sum_fun$ T_N_sum$) T_dtree_sum$)
(declare-fun fun_app$z (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun map_sum$a (T_T_fun$ N_N_fun$) T_N_sum_T_N_sum_fun$)
(declare-fun map_sum$b (T_T_fun$) N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$)
(declare-fun map_sum$c (T_T_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun map_sum$d (T_T_fun$ T_T_fun$) T_T_sum_T_T_sum_fun$)
(declare-fun map_sum$e (T_T_fun$ T_dtree_sum_T_N_sum_fun$) T_T_dtree_sum_sum_T_T_N_sum_sum_fun$)
(declare-fun fun_app$aa (T_T_sum_T_T_sum_fun$ T_T_sum$) T_T_sum$)
(declare-fun fun_app$ab (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$ac (N_set_dtree_T_bool_fun_fun_fun$ N_set$) Dtree_T_bool_fun_fun$)
(declare-fun fun_app$ad (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$ae (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$af (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$ag (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun fun_app$ah (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun fun_app$ai (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(assert (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$ uuc$ ?v0) (inr$d ?v0)) :pattern ((fun_app$ uuc$ ?v0)))))
(assert (forall ((?v0 T_N_sum$)) (! (= (fun_app$a uub$ ?v0) (inr$c ?v0)) :pattern ((fun_app$a uub$ ?v0)))))
(assert (forall ((?v0 Dtree$)) (! (= (fun_app$b uue$ ?v0) (inr$a ?v0)) :pattern ((fun_app$b uue$ ?v0)))))
(assert (forall ((?v0 N$)) (! (= (fun_app$c uud$ ?v0) (inr$ ?v0)) :pattern ((fun_app$c uud$ ?v0)))))
(assert (forall ((?v0 T$)) (! (= (fun_app$d uua$ ?v0) (inl$a ?v0)) :pattern ((fun_app$d uua$ ?v0)))))
(assert (forall ((?v0 T$)) (! (= (fun_app$e uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$e uu$ ?v0)))))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$f (uug$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$f (uug$ ?v0) ?v1)))))
(assert (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum$)) (! (= (fun_app$g (uui$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$g (uui$ ?v0) ?v1)))))
(assert (forall ((?v0 T_set$) (?v1 T$)) (! (= (fun_app$h (uuf$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$h (uuf$ ?v0) ?v1)))))
(assert (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$i (uuh$ ?v0) ?v1) (member$c ?v1 ?v0)) :pattern ((fun_app$i (uuh$ ?v0) ?v1)))))
(assert (not (member$b t$ (vimage$ uu$ (image$ (fun_app$j (map_sum$ id$) root$) (cont$ tr$))))))
(assert (member$ (inl$a t$) (cont$ tr$)))
(assert (forall ((?v0 N_N_fun$) (?v1 T_N_sum_set$)) (= (vimage$ uu$ (image$a (map_sum$a id$ ?v0) ?v1)) (vimage$ uu$ ?v1)) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 T_N_sum_set$)) (= (vimage$a uua$ (image$b (fun_app$k (map_sum$b id$) ?v0) ?v1)) (vimage$ uu$ ?v1)) ))
(assert (forall ((?v0 Dtree_dtree_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$a uua$ (image$c (map_sum$c id$ ?v0) ?v1)) (vimage$a uua$ ?v1)) ))
(assert (forall ((?v0 Dtree_N_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$ uu$ (image$ (fun_app$j (map_sum$ id$) ?v0) ?v1)) (vimage$a uua$ ?v1)) ))
(assert (forall ((?v0 T$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (= (member$a (inl$ ?v0) (image$a (map_sum$a id$ ?v1) ?v2)) (member$a (inl$ ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (= (member$ (inl$a ?v0) (image$b (fun_app$k (map_sum$b id$) ?v1) ?v2)) (member$a (inl$ ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$ (inl$a ?v0) (image$c (map_sum$c id$ ?v1) ?v2)) (member$ (inl$a ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (= (member$a (inl$ ?v0) (image$ (fun_app$j (map_sum$ id$) ?v1) ?v2)) (member$ (inl$a ?v0) ?v2)) ))
(assert (= (vimage$b id$) id$a))
(assert (= (image$d id$) id$a))
(assert (forall ((?v0 T$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (=> (member$a (inl$ ?v0) (image$a (map_sum$a id$ ?v1) ?v2)) (member$a (inl$ ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (=> (member$ (inl$a ?v0) (image$b (fun_app$k (map_sum$b id$) ?v1) ?v2)) (member$a (inl$ ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (=> (member$ (inl$a ?v0) (image$c (map_sum$c id$ ?v1) ?v2)) (member$ (inl$a ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a (inl$ ?v0) (image$ (fun_app$j (map_sum$ id$) ?v1) ?v2)) (member$ (inl$a ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$b ?v0 (fun_app$l (vimage$b ?v1) ?v2)) (member$b (fun_app$m ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (= (member$b ?v0 (vimage$c ?v1 ?v2)) (member$c (fun_app$n ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (= (member$c ?v0 (vimage$d ?v1 ?v2)) (member$b (fun_app$o ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$c ?v0 (vimage$e ?v1 ?v2)) (member$c (fun_app$p ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$d ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (= (member$ ?v0 (vimage$f ?v1 ?v2)) (member$b (fun_app$q ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (= (member$ ?v0 (vimage$g ?v1 ?v2)) (member$c (fun_app$r ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$c ?v0 (vimage$h ?v1 ?v2)) (member$ (fun_app$s ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$c ?v0 (vimage$i ?v1 ?v2)) (member$a (fun_app$c ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_fun$) (?v2 T_set$)) (= (member$a ?v0 (vimage$j ?v1 ?v2)) (member$b (fun_app$t ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$m ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$b ?v1 (fun_app$l (vimage$b ?v0) ?v3))) ))
(assert (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$o ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$c ?v1 (vimage$d ?v0 ?v3))) ))
(assert (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$n ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$b ?v1 (vimage$c ?v0 ?v3))) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$p ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$c ?v1 (vimage$e ?v0 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$q ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$ ?v1 (vimage$f ?v0 ?v3))) ))
(assert (forall ((?v0 T_N_sum_T_fun$) (?v1 T_N_sum$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$t ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$a ?v1 (vimage$j ?v0 ?v3))) ))
(assert (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$d ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$a ?v0 ?v3))) ))
(assert (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$s ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$c ?v1 (vimage$h ?v0 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$r ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$ ?v1 (vimage$g ?v0 ?v3))) ))
(assert (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$u ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$a ?v1 (vimage$k ?v0 ?v3))) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$a ?v0) (inl$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T$)) (= (= (inl$a ?v0) (inl$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$)) (! (= (fun_app$m id$ ?v0) ?v0) :pattern ((fun_app$m id$ ?v0)))))
(assert (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (fun_app$l (image$d ?v1) ?v3))) ))
(assert (forall ((?v0 N$) (?v1 T_N_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$n ?v1 ?v2)) (member$b ?v2 ?v3)) (member$c ?v0 (image$e ?v1 ?v3))) ))
(assert (forall ((?v0 T$) (?v1 N_T_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (member$c ?v2 ?v3)) (member$b ?v0 (image$f ?v1 ?v3))) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (member$c ?v2 ?v3)) (member$c ?v0 (image$g ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_T_dtree_sum_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$h ?v1 ?v3))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_T_N_sum_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$i ?v1 ?v3))) ))
(assert (forall ((?v0 T$) (?v1 T_dtree_sum_T_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$j ?v1 ?v3))) ))
(assert (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$r ?v1 ?v2)) (member$ ?v2 ?v3)) (member$c ?v0 (image$k ?v1 ?v3))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$c ?v2 ?v3)) (member$ ?v0 (image$l ?v1 ?v3))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 N_T_N_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$c ?v2 ?v3)) (member$a ?v0 (image$m ?v1 ?v3))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (fun_app$v root$ ?v0) (fun_app$v root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_T_fun$)) (=> (member$b ?v0 ?v1) (member$b (fun_app$m ?v2 ?v0) (fun_app$l (image$d ?v2) ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_N_fun$)) (=> (member$b ?v0 ?v1) (member$c (fun_app$n ?v2 ?v0) (image$e ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_fun$)) (=> (member$c ?v0 ?v1) (member$b (fun_app$o ?v2 ?v0) (image$f ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_N_fun$)) (=> (member$c ?v0 ?v1) (member$c (fun_app$p ?v2 ?v0) (image$g ?v2 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_T_dtree_sum_fun$)) (=> (member$b ?v0 ?v1) (member$ (fun_app$d ?v2 ?v0) (image$h ?v2 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_T_N_sum_fun$)) (=> (member$b ?v0 ?v1) (member$a (fun_app$e ?v2 ?v0) (image$i ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_fun$)) (=> (member$ ?v0 ?v1) (member$b (fun_app$q ?v2 ?v0) (image$j ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_N_fun$)) (=> (member$ ?v0 ?v1) (member$c (fun_app$r ?v2 ?v0) (image$k ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_dtree_sum_fun$)) (=> (member$c ?v0 ?v1) (member$ (fun_app$s ?v2 ?v0) (image$l ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_N_sum_fun$)) (=> (member$c ?v0 ?v1) (member$a (fun_app$c ?v2 ?v0) (image$m ?v2 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T$) (?v3 T_T_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$m ?v3 ?v0))) (member$b ?v2 (fun_app$l (image$d ?v3) ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 N$) (?v3 T_N_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$n ?v3 ?v0))) (member$c ?v2 (image$e ?v3 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 T$) (?v3 N_T_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$o ?v3 ?v0))) (member$b ?v2 (image$f ?v3 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$) (?v3 N_N_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$p ?v3 ?v0))) (member$c ?v2 (image$g ?v3 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_dtree_sum$) (?v3 T_T_dtree_sum_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$ ?v2 (image$h ?v3 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_N_sum$) (?v3 T_T_N_sum_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$e ?v3 ?v0))) (member$a ?v2 (image$i ?v3 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T$) (?v3 T_dtree_sum_T_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$q ?v3 ?v0))) (member$b ?v2 (image$j ?v3 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 N$) (?v3 T_dtree_sum_N_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$r ?v3 ?v0))) (member$c ?v2 (image$k ?v3 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 T_dtree_sum$) (?v3 N_T_dtree_sum_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$s ?v3 ?v0))) (member$ ?v2 (image$l ?v3 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 T_N_sum$) (?v3 N_T_N_sum_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$c ?v3 ?v0))) (member$a ?v2 (image$m ?v3 ?v1))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$b ?v3 (fun_app$l (image$d ?v0) ?v1)) (fun_app$h ?v2 ?v3)) ) (forall ((?v3 T$)) (=> (member$b ?v3 ?v1) (fun_app$h ?v2 (fun_app$m ?v0 ?v3))) )) ))
(assert (forall ((?v0 N_T_fun$) (?v1 N_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$b ?v3 (image$f ?v0 ?v1)) (fun_app$h ?v2 ?v3)) ) (forall ((?v3 N$)) (=> (member$c ?v3 ?v1) (fun_app$h ?v2 (fun_app$o ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_N_fun$) (?v1 T_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$c ?v3 (image$e ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (forall ((?v3 T$)) (=> (member$b ?v3 ?v1) (fun_app$i ?v2 (fun_app$n ?v0 ?v3))) )) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$c ?v3 (image$g ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (forall ((?v3 N$)) (=> (member$c ?v3 ?v1) (fun_app$i ?v2 (fun_app$p ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$b ?v3 (image$j ?v0 ?v1)) (fun_app$h ?v2 ?v3)) ) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$h ?v2 (fun_app$q ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_N_sum_T_fun$) (?v1 T_N_sum_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$b ?v3 (image$n ?v0 ?v1)) (fun_app$h ?v2 ?v3)) ) (forall ((?v3 T_N_sum$)) (=> (member$a ?v3 ?v1) (fun_app$h ?v2 (fun_app$t ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (image$h ?v0 ?v1)) (fun_app$f ?v2 ?v3)) ) (forall ((?v3 T$)) (=> (member$b ?v3 ?v1) (fun_app$f ?v2 (fun_app$d ?v0 ?v3))) )) ))
(assert (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (image$l ?v0 ?v1)) (fun_app$f ?v2 ?v3)) ) (forall ((?v3 N$)) (=> (member$c ?v3 ?v1) (fun_app$f ?v2 (fun_app$s ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$c ?v3 (image$k ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$i ?v2 (fun_app$r ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$c ?v3 (image$o ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (forall ((?v3 T_N_sum$)) (=> (member$a ?v3 ?v1) (fun_app$i ?v2 (fun_app$u ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$b ?v3 (fun_app$l (image$d ?v0) ?v1)) (fun_app$h ?v2 ?v3)) ) (exists ((?v3 T$)) (and (member$b ?v3 ?v1) (fun_app$h ?v2 (fun_app$m ?v0 ?v3))) )) ))
(assert (forall ((?v0 N_T_fun$) (?v1 N_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$b ?v3 (image$f ?v0 ?v1)) (fun_app$h ?v2 ?v3)) ) (exists ((?v3 N$)) (and (member$c ?v3 ?v1) (fun_app$h ?v2 (fun_app$o ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_N_fun$) (?v1 T_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$c ?v3 (image$e ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (exists ((?v3 T$)) (and (member$b ?v3 ?v1) (fun_app$i ?v2 (fun_app$n ?v0 ?v3))) )) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$c ?v3 (image$g ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (exists ((?v3 N$)) (and (member$c ?v3 ?v1) (fun_app$i ?v2 (fun_app$p ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$b ?v3 (image$j ?v0 ?v1)) (fun_app$h ?v2 ?v3)) ) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$h ?v2 (fun_app$q ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_N_sum_T_fun$) (?v1 T_N_sum_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$b ?v3 (image$n ?v0 ?v1)) (fun_app$h ?v2 ?v3)) ) (exists ((?v3 T_N_sum$)) (and (member$a ?v3 ?v1) (fun_app$h ?v2 (fun_app$t ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (image$h ?v0 ?v1)) (fun_app$f ?v2 ?v3)) ) (exists ((?v3 T$)) (and (member$b ?v3 ?v1) (fun_app$f ?v2 (fun_app$d ?v0 ?v3))) )) ))
(assert (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (image$l ?v0 ?v1)) (fun_app$f ?v2 ?v3)) ) (exists ((?v3 N$)) (and (member$c ?v3 ?v1) (fun_app$f ?v2 (fun_app$s ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$c ?v3 (image$k ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$i ?v2 (fun_app$r ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$c ?v3 (image$o ?v0 ?v1)) (fun_app$i ?v2 ?v3)) ) (exists ((?v3 T_N_sum$)) (and (member$a ?v3 ?v1) (fun_app$i ?v2 (fun_app$u ?v0 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_N_sum_fun$) (?v3 T_dtree_sum_T_N_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (member$ ?v4 ?v1) (= (fun_app$w ?v2 ?v4) (fun_app$w ?v3 ?v4))) )) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$b ?v0 (fun_app$l (image$d ?v1) ?v2)) (exists ((?v3 T$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$m ?v1 ?v3))) )) ))
(assert (forall ((?v0 T$) (?v1 N_T_fun$) (?v2 N_set$)) (= (member$b ?v0 (image$f ?v1 ?v2)) (exists ((?v3 N$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$o ?v1 ?v3))) )) ))
(assert (forall ((?v0 N$) (?v1 T_N_fun$) (?v2 T_set$)) (= (member$c ?v0 (image$e ?v1 ?v2)) (exists ((?v3 T$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$n ?v1 ?v3))) )) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$c ?v0 (image$g ?v1 ?v2)) (exists ((?v3 N$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$p ?v1 ?v3))) )) ))
(assert (forall ((?v0 T$) (?v1 T_dtree_sum_T_fun$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (image$j ?v1 ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$q ?v1 ?v3))) )) ))
(assert (forall ((?v0 T$) (?v1 T_N_sum_T_fun$) (?v2 T_N_sum_set$)) (= (member$b ?v0 (image$n ?v1 ?v2)) (exists ((?v3 T_N_sum$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$t ?v1 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_T_dtree_sum_fun$) (?v2 T_set$)) (= (member$ ?v0 (image$h ?v1 ?v2)) (exists ((?v3 T$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$d ?v1 ?v3))) )) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N_set$)) (= (member$ ?v0 (image$l ?v1 ?v2)) (exists ((?v3 N$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$s ?v1 ?v3))) )) ))
(assert (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum_set$)) (= (member$c ?v0 (image$k ?v1 ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$r ?v1 ?v3))) )) ))
(assert (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_N_sum_set$)) (= (member$c ?v0 (image$o ?v1 ?v2)) (exists ((?v3 T_N_sum$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$u ?v1 ?v3))) )) ))
(assert (forall ((?v0 T$)) (! (= (fun_app$m id$ ?v0) ?v0) :pattern ((fun_app$m id$ ?v0)))))
(assert (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$a ?v0) (inl$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T_set$)) (=> (member$b (fun_app$m ?v0 ?v1) ?v2) (member$b ?v1 (fun_app$l (vimage$b ?v0) ?v2))) ))
(assert (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T_set$)) (=> (member$b (fun_app$o ?v0 ?v1) ?v2) (member$c ?v1 (vimage$d ?v0 ?v2))) ))
(assert (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N_set$)) (=> (member$c (fun_app$n ?v0 ?v1) ?v2) (member$b ?v1 (vimage$c ?v0 ?v2))) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_set$)) (=> (member$c (fun_app$p ?v0 ?v1) ?v2) (member$c ?v1 (vimage$e ?v0 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T_set$)) (=> (member$b (fun_app$q ?v0 ?v1) ?v2) (member$ ?v1 (vimage$f ?v0 ?v2))) ))
(assert (forall ((?v0 T_N_sum_T_fun$) (?v1 T_N_sum$) (?v2 T_set$)) (=> (member$b (fun_app$t ?v0 ?v1) ?v2) (member$a ?v1 (vimage$j ?v0 ?v2))) ))
(assert (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$d ?v0 ?v1) ?v2) (member$b ?v1 (vimage$a ?v0 ?v2))) ))
(assert (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$s ?v0 ?v1) ?v2) (member$c ?v1 (vimage$h ?v0 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N_set$)) (=> (member$c (fun_app$r ?v0 ?v1) ?v2) (member$ ?v1 (vimage$g ?v0 ?v2))) ))
(assert (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum$) (?v2 N_set$)) (=> (member$c (fun_app$u ?v0 ?v1) ?v2) (member$a ?v1 (vimage$k ?v0 ?v2))) ))
(assert (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (=> (member$b ?v0 (fun_app$l (vimage$b ?v1) ?v2)) (member$b (fun_app$m ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (=> (member$b ?v0 (vimage$c ?v1 ?v2)) (member$c (fun_app$n ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (=> (member$c ?v0 (vimage$d ?v1 ?v2)) (member$b (fun_app$o ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (member$c ?v0 (vimage$e ?v1 ?v2)) (member$c (fun_app$p ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$b ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$d ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (=> (member$ ?v0 (vimage$f ?v1 ?v2)) (member$b (fun_app$q ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (member$ ?v0 (vimage$g ?v1 ?v2)) (member$c (fun_app$r ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$c ?v0 (vimage$h ?v1 ?v2)) (member$ (fun_app$s ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (member$c ?v0 (vimage$i ?v1 ?v2)) (member$a (fun_app$c ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_fun$) (?v2 T_set$)) (=> (member$a ?v0 (vimage$j ?v1 ?v2)) (member$b (fun_app$t ?v1 ?v0) ?v2)) ))
(assert (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (=> (and (member$b ?v0 (fun_app$l (vimage$b ?v1) ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$m ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (=> (and (member$b ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$n ?v1 ?v0) ?v3) (member$c ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (=> (and (member$c ?v0 (vimage$d ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$o ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (and (member$c ?v0 (vimage$e ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$p ?v1 ?v0) ?v3) (member$c ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$b ?v0 (vimage$a ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$d ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (=> (and (member$ ?v0 (vimage$f ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$q ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (and (member$ ?v0 (vimage$g ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$r ?v1 ?v0) ?v3) (member$c ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$c ?v0 (vimage$h ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$s ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$c ?v0 (vimage$i ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$c ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_fun$) (?v2 T_set$)) (=> (and (member$a ?v0 (vimage$j ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$t ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_N_sum_bool_fun$) (?v1 T_T_N_sum_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$g ?v0 (fun_app$e ?v1 ?v3)) (fun_app$h ?v2 ?v3)) ) (= (vimage$ ?v1 (collect$ ?v0)) (collect$a ?v2))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_N_sum$) (?v3 T$)) (=> (= (fun_app$x (map_sum$a ?v0 ?v1) ?v2) (inl$ ?v3)) (exists ((?v4 T$)) (and (= ?v2 (inl$ ?v4)) (= (fun_app$m ?v0 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_N_sum$) (?v3 T$)) (=> (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) ?v2) (inl$a ?v3)) (exists ((?v4 T$)) (and (= ?v2 (inl$ ?v4)) (= (fun_app$m ?v0 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum$) (?v3 T$)) (=> (= (fun_app$z (map_sum$c ?v0 ?v1) ?v2) (inl$a ?v3)) (exists ((?v4 T$)) (and (= ?v2 (inl$a ?v4)) (= (fun_app$m ?v0 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum$) (?v3 T$)) (=> (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) ?v2) (inl$ ?v3)) (exists ((?v4 T$)) (and (= ?v2 (inl$a ?v4)) (= (fun_app$m ?v0 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T$)) (! (= (fun_app$x (map_sum$a ?v0 ?v1) (inl$ ?v2)) (inl$ (fun_app$m ?v0 ?v2))) :pattern ((fun_app$x (map_sum$a ?v0 ?v1) (inl$ ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T$)) (! (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (inl$ ?v2)) (inl$a (fun_app$m ?v0 ?v2))) :pattern ((fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (inl$ ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T$)) (! (= (fun_app$z (map_sum$c ?v0 ?v1) (inl$a ?v2)) (inl$a (fun_app$m ?v0 ?v2))) :pattern ((fun_app$z (map_sum$c ?v0 ?v1) (inl$a ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T$)) (! (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (inl$a ?v2)) (inl$ (fun_app$m ?v0 ?v2))) :pattern ((fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (inl$a ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 Bool) (?v3 T_N_sum$) (?v4 T$)) (= (fun_app$x (map_sum$a ?v0 ?v1) (ite ?v2 ?v3 (inl$ ?v4))) (ite ?v2 (fun_app$x (map_sum$a ?v0 ?v1) ?v3) (inl$ (fun_app$m ?v0 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 Bool) (?v3 T_N_sum$) (?v4 T$)) (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (ite ?v2 ?v3 (inl$ ?v4))) (ite ?v2 (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) ?v3) (inl$a (fun_app$m ?v0 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 Bool) (?v3 T_dtree_sum$) (?v4 T$)) (= (fun_app$z (map_sum$c ?v0 ?v1) (ite ?v2 ?v3 (inl$a ?v4))) (ite ?v2 (fun_app$z (map_sum$c ?v0 ?v1) ?v3) (inl$a (fun_app$m ?v0 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 Bool) (?v3 T_dtree_sum$) (?v4 T$)) (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (ite ?v2 ?v3 (inl$a ?v4))) (ite ?v2 (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) ?v3) (inl$ (fun_app$m ?v0 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 Bool) (?v3 T$) (?v4 T_N_sum$)) (= (fun_app$x (map_sum$a ?v0 ?v1) (ite ?v2 (inl$ ?v3) ?v4)) (ite ?v2 (inl$ (fun_app$m ?v0 ?v3)) (fun_app$x (map_sum$a ?v0 ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 Bool) (?v3 T$) (?v4 T_N_sum$)) (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (ite ?v2 (inl$ ?v3) ?v4)) (ite ?v2 (inl$a (fun_app$m ?v0 ?v3)) (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 Bool) (?v3 T$) (?v4 T_dtree_sum$)) (= (fun_app$z (map_sum$c ?v0 ?v1) (ite ?v2 (inl$a ?v3) ?v4)) (ite ?v2 (inl$a (fun_app$m ?v0 ?v3)) (fun_app$z (map_sum$c ?v0 ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 Bool) (?v3 T$) (?v4 T_dtree_sum$)) (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (ite ?v2 (inl$a ?v3) ?v4)) (ite ?v2 (inl$ (fun_app$m ?v0 ?v3)) (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) ?v4))) ))
(assert (forall ((?v0 Dtree$)) (= (node$ (fun_app$v root$ ?v0) (cont$ ?v0)) ?v0) ))
(assert (= (map_sum$d id$ id$) id$b))
(assert (forall ((?v0 T_T_sum$)) (= (fun_app$aa (map_sum$d id$ id$) ?v0) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$l uub$ (image$p (map_sum$e id$ ?v0) ?v1)) (image$ ?v0 (vimage$m uuc$ ?v1))) ))
(assert (forall ((?v0 N_N_fun$) (?v1 T_N_sum_set$)) (= (vimage$i uud$ (image$a (map_sum$a id$ ?v0) ?v1)) (image$g ?v0 (vimage$i uud$ ?v1))) ))
(assert (forall ((?v0 N_dtree_fun$) (?v1 T_N_sum_set$)) (= (vimage$n uue$ (image$b (fun_app$k (map_sum$b id$) ?v0) ?v1)) (image$q ?v0 (vimage$i uud$ ?v1))) ))
(assert (forall ((?v0 Dtree_dtree_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$n uue$ (image$c (map_sum$c id$ ?v0) ?v1)) (image$r ?v0 (vimage$n uue$ ?v1))) ))
(assert (forall ((?v0 Dtree_N_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$i uud$ (image$ (fun_app$j (map_sum$ id$) ?v0) ?v1)) (image$s ?v0 (vimage$n uue$ ?v1))) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (member$ (inl$a ?v2) (cont$ ?v0))) (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$a (inr$ ?v0) (image$ (fun_app$j (map_sum$ id$) root$) (cont$ ?v1))) (= (fun_app$v root$ (fun_app$ad (subtrOf$ ?v1) ?v0)) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (member$ (inl$a ?v2) (cont$ ?v0))) (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v1) ?v0) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 T_dtree_sum_set$)) (= (fun_app$v root$ (node$ ?v0 ?v1)) ?v0) ))
(assert (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 N$)) (= (= (inl$ ?v0) (inr$ ?v1)) false) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (= (= (inl$a ?v0) (inr$a ?v1)) false) ))
(assert (forall ((?v0 N$) (?v1 T$)) (= (= (inr$ ?v0) (inl$ ?v1)) false) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (= (= (inr$a ?v0) (inl$a ?v1)) false) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (= (member$a (inr$ ?v0) (image$a (map_sum$a id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$a (inr$ ?v3) ?v2) (= (fun_app$p ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (= (member$ (inr$a ?v0) (image$b (fun_app$k (map_sum$b id$) ?v1) ?v2)) (exists ((?v3 N$)) (and (member$a (inr$ ?v3) ?v2) (= (fun_app$ad ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$ (inr$a ?v0) (image$c (map_sum$c id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$ (inr$a ?v3) ?v2) (= (fun_app$ae ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (= (member$a (inr$ ?v0) (image$ (fun_app$j (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$ (inr$a ?v3) ?v2) (= (fun_app$v ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 N$) (?v1 N$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_set$)) (= (collect$a (uuf$ ?v0)) ?v0) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (= (collect$b (uug$ ?v0)) ?v0) ))
(assert (forall ((?v0 N_set$)) (= (collect$c (uuh$ ?v0)) ?v0) ))
(assert (forall ((?v0 T_N_sum_set$)) (= (collect$ (uui$ ?v0)) ?v0) ))
(assert (forall ((?v0 T$) (?v1 T_bool_fun$)) (= (member$b ?v0 (collect$a ?v1)) (fun_app$h ?v1 ?v0)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$b ?v1)) (fun_app$f ?v1 ?v0)) ))
(assert (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$c ?v0 (collect$c ?v1)) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$g ?v1 ?v0)) ))
(assert (= inFr$ inFr2$))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 Bool) (?v3 N$) (?v4 T_N_sum$)) (= (fun_app$x (map_sum$a ?v0 ?v1) (ite ?v2 (inr$ ?v3) ?v4)) (ite ?v2 (inr$ (fun_app$p ?v1 ?v3)) (fun_app$x (map_sum$a ?v0 ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 Bool) (?v3 N$) (?v4 T_N_sum$)) (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (ite ?v2 (inr$ ?v3) ?v4)) (ite ?v2 (inr$a (fun_app$ad ?v1 ?v3)) (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 Bool) (?v3 Dtree$) (?v4 T_dtree_sum$)) (= (fun_app$z (map_sum$c ?v0 ?v1) (ite ?v2 (inr$a ?v3) ?v4)) (ite ?v2 (inr$a (fun_app$ae ?v1 ?v3)) (fun_app$z (map_sum$c ?v0 ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 Bool) (?v3 Dtree$) (?v4 T_dtree_sum$)) (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (ite ?v2 (inr$a ?v3) ?v4)) (ite ?v2 (inr$ (fun_app$v ?v1 ?v3)) (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) ?v4))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 Bool) (?v3 T_N_sum$) (?v4 N$)) (= (fun_app$x (map_sum$a ?v0 ?v1) (ite ?v2 ?v3 (inr$ ?v4))) (ite ?v2 (fun_app$x (map_sum$a ?v0 ?v1) ?v3) (inr$ (fun_app$p ?v1 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 Bool) (?v3 T_N_sum$) (?v4 N$)) (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (ite ?v2 ?v3 (inr$ ?v4))) (ite ?v2 (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) ?v3) (inr$a (fun_app$ad ?v1 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 Bool) (?v3 T_dtree_sum$) (?v4 Dtree$)) (= (fun_app$z (map_sum$c ?v0 ?v1) (ite ?v2 ?v3 (inr$a ?v4))) (ite ?v2 (fun_app$z (map_sum$c ?v0 ?v1) ?v3) (inr$a (fun_app$ae ?v1 ?v4)))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 Bool) (?v3 T_dtree_sum$) (?v4 Dtree$)) (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (ite ?v2 ?v3 (inr$a ?v4))) (ite ?v2 (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) ?v3) (inr$ (fun_app$v ?v1 ?v4)))) ))
(assert (forall ((?v0 T_N_sum_bool_fun$)) (= (exists ((?v1 T_N_sum$)) (fun_app$g ?v0 ?v1) ) (or (exists ((?v1 T$)) (fun_app$g ?v0 (inl$ ?v1)) ) (exists ((?v1 N$)) (fun_app$g ?v0 (inr$ ?v1)) ))) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (= (exists ((?v1 T_dtree_sum$)) (fun_app$f ?v0 ?v1) ) (or (exists ((?v1 T$)) (fun_app$f ?v0 (inl$a ?v1)) ) (exists ((?v1 Dtree$)) (fun_app$f ?v0 (inr$a ?v1)) ))) ))
(assert (forall ((?v0 T_N_sum_bool_fun$)) (= (forall ((?v1 T_N_sum$)) (fun_app$g ?v0 ?v1) ) (and (forall ((?v1 T$)) (fun_app$g ?v0 (inl$ ?v1)) ) (forall ((?v1 N$)) (fun_app$g ?v0 (inr$ ?v1)) ))) ))
(assert (forall ((?v0 T_dtree_sum_bool_fun$)) (= (forall ((?v1 T_dtree_sum$)) (fun_app$f ?v0 ?v1) ) (and (forall ((?v1 T$)) (fun_app$f ?v0 (inl$a ?v1)) ) (forall ((?v1 Dtree$)) (fun_app$f ?v0 (inr$a ?v1)) ))) ))
(assert (forall ((?v0 T_N_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 N$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$a ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$a ?v1)) false) )) false) ))
(assert (forall ((?v0 T_N_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 N$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$a ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$a ?v1)) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 T$)) (not (= (inr$ ?v0) (inl$ ?v1))) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (not (= (inr$a ?v0) (inl$a ?v1))) ))
(assert (forall ((?v0 T$) (?v1 N$)) (not (= (inl$ ?v0) (inr$ ?v1))) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (not (= (inl$a ?v0) (inr$a ?v1))) ))
(assert (forall ((?v0 N$) (?v1 T$)) (not (= (inr$ ?v0) (inl$ ?v1))) ))
(assert (forall ((?v0 Dtree$) (?v1 T$)) (not (= (inr$a ?v0) (inl$a ?v1))) ))
(assert (forall ((?v0 T$) (?v1 N$)) (not (= (inl$ ?v0) (inr$ ?v1))) ))
(assert (forall ((?v0 T$) (?v1 Dtree$)) (not (= (inl$a ?v0) (inr$a ?v1))) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 N$)) (! (= (fun_app$x (map_sum$a ?v0 ?v1) (inr$ ?v2)) (inr$ (fun_app$p ?v1 ?v2))) :pattern ((fun_app$x (map_sum$a ?v0 ?v1) (inr$ ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (! (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (inr$ ?v2)) (inr$a (fun_app$ad ?v1 ?v2))) :pattern ((fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) (inr$ ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$)) (! (= (fun_app$z (map_sum$c ?v0 ?v1) (inr$a ?v2)) (inr$a (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$z (map_sum$c ?v0 ?v1) (inr$a ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$)) (! (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (inr$a ?v2)) (inr$ (fun_app$v ?v1 ?v2))) :pattern ((fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) (inr$a ?v2))))))
(assert (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_N_sum$) (?v3 N$)) (=> (= (fun_app$x (map_sum$a ?v0 ?v1) ?v2) (inr$ ?v3)) (exists ((?v4 N$)) (and (= ?v2 (inr$ ?v4)) (= (fun_app$p ?v1 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_N_sum$) (?v3 Dtree$)) (=> (= (fun_app$y (fun_app$k (map_sum$b ?v0) ?v1) ?v2) (inr$a ?v3)) (exists ((?v4 N$)) (and (= ?v2 (inr$ ?v4)) (= (fun_app$ad ?v1 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum$) (?v3 Dtree$)) (=> (= (fun_app$z (map_sum$c ?v0 ?v1) ?v2) (inr$a ?v3)) (exists ((?v4 Dtree$)) (and (= ?v2 (inr$a ?v4)) (= (fun_app$ae ?v1 ?v4) ?v3)) )) ))
(assert (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum$) (?v3 N$)) (=> (= (fun_app$w (fun_app$j (map_sum$ ?v0) ?v1) ?v2) (inr$ ?v3)) (exists ((?v4 Dtree$)) (and (= ?v2 (inr$a ?v4)) (= (fun_app$v ?v1 ?v4) ?v3)) )) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (and (member$ (inr$a ?v2) (cont$ ?v0)) (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v1) ?v2) ?v3))) (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v0) ?v1) ?v2) (and (member$c (fun_app$v root$ ?v3) ?v0) (member$ (inr$a ?v1) (cont$ ?v3)))) (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$c (fun_app$v root$ ?v0) ?v1)) (not (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v1) ?v0) ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$c (fun_app$v root$ ?v3) ?v4) (member$ (inl$a ?v5) (cont$ ?v3)))))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (member$ (inr$a ?v5) (cont$ ?v3)) (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$c (fun_app$v root$ ?v3) ?v4) (member$ (inl$a ?v5) (cont$ ?v3)))))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (member$ (inr$a ?v5) (cont$ ?v3)) (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v1) ?v0)) ))
(assert (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (=> (and (= (vimage$ uu$ ?v0) (vimage$ uu$ ?v1)) (= (vimage$i uud$ ?v0) (vimage$i uud$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (and (= (vimage$a uua$ ?v0) (vimage$a uua$ ?v1)) (= (vimage$n uue$ ?v0) (vimage$n uue$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$a (inr$ ?v0) (image$ (fun_app$j (map_sum$ id$) root$) (cont$ ?v1))) (and (member$ (inr$a (fun_app$ad (subtrOf$ ?v1) ?v0)) (cont$ ?v1)) (= (fun_app$v root$ (fun_app$ad (subtrOf$ ?v1) ?v0)) ?v0))) ))
(assert (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$a (inr$ ?v0) (image$ (fun_app$j (map_sum$ id$) root$) (cont$ ?v1))) (member$ (inr$a (fun_app$ad (subtrOf$ ?v1) ?v0)) (cont$ ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (=> (member$a (inr$ ?v0) (image$a (map_sum$a id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$a (inr$ ?v3) ?v2) (= (fun_app$p ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (=> (member$ (inr$a ?v0) (image$b (fun_app$k (map_sum$b id$) ?v1) ?v2)) (exists ((?v3 N$)) (and (member$a (inr$ ?v3) ?v2) (= (fun_app$ad ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (=> (member$ (inr$a ?v0) (image$c (map_sum$c id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$ (inr$a ?v3) ?v2) (= (fun_app$ae ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a (inr$ ?v0) (image$ (fun_app$j (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$ (inr$a ?v3) ?v2) (= (fun_app$v ?v1 ?v3) ?v0)) )) ))
(assert (forall ((?v0 T_N_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$ ?v1)) false) ) (forall ((?v1 N$)) (=> (= ?v0 (inr$ ?v1)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$)) (=> (and (forall ((?v1 T$)) (=> (= ?v0 (inl$a ?v1)) false) ) (forall ((?v1 Dtree$)) (=> (= ?v0 (inr$a ?v1)) false) )) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$c (fun_app$v root$ ?v3) ?v4) (member$ (inl$a ?v5) (cont$ ?v3)))))) ) (exists ((?v3 Dtree$) (?v4 Dtree$) (?v5 N_set$) (?v6 T$)) (and (= ?v0 (insert$ (fun_app$v root$ ?v4) ?v5)) (and (= ?v1 ?v4) (and (= ?v2 ?v6) (and (member$ (inr$a ?v3) (cont$ ?v4)) (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v5) ?v3) ?v6))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$c (fun_app$v root$ ?v3) ?v4) (member$ (inl$a ?v5) (cont$ ?v3)))))) false) ) (forall ((?v3 Dtree$) (?v4 Dtree$) (?v5 N_set$) (?v6 T$)) (=> (and (= ?v0 (insert$ (fun_app$v root$ ?v4) ?v5)) (and (= ?v1 ?v4) (and (= ?v2 ?v6) (and (member$ (inr$a ?v3) (cont$ ?v4)) (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v5) ?v3) ?v6))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v3) ?v1) (member$ (inl$a ?v2) (cont$ ?v3))) )) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (fun_app$i (fun_app$ai (inItr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (fun_app$v root$ ?v3)) (member$c (fun_app$v root$ ?v3) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (member$ (inr$a ?v5) (cont$ ?v3)) (fun_app$i (fun_app$ai (inItr$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (fun_app$i (fun_app$ai (inItr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (fun_app$v root$ ?v3)) (member$c (fun_app$v root$ ?v3) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (member$ (inr$a ?v5) (cont$ ?v3)) (fun_app$i (fun_app$ai (inItr$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (and (member$ (inr$a ?v2) (cont$ ?v0)) (fun_app$i (fun_app$ai (inItr$ ?v1) ?v2) ?v3))) (fun_app$i (fun_app$ai (inItr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T$)) (=> (=> (not (member$b ?v0 ?v1)) (= ?v0 ?v2)) (member$b ?v0 (insert$a ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$b ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (=> (not (member$c ?v0 ?v1)) (= ?v0 ?v2)) (member$c ?v0 (insert$ ?v2 ?v1))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum$)) (=> (=> (not (member$a ?v0 ?v1)) (= ?v0 ?v2)) (member$a ?v0 (insert$c ?v2 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T$) (?v2 T_set$)) (= (member$b ?v0 (insert$a ?v1 ?v2)) (or (= ?v0 ?v1) (member$b ?v0 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (insert$b ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (member$c ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$c ?v0 ?v2))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum$) (?v2 T_N_sum_set$)) (= (member$a ?v0 (insert$c ?v1 ?v2)) (or (= ?v0 ?v1) (member$a ?v0 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_N_fun$)) (=> (member$b ?v0 ?v1) (= (insert$ (fun_app$n ?v2 ?v0) (image$e ?v2 ?v1)) (image$e ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_N_sum_fun$)) (=> (member$ ?v0 ?v1) (= (insert$c (fun_app$w ?v2 ?v0) (image$ ?v2 ?v1)) (image$ ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_N_fun$)) (=> (member$ ?v0 ?v1) (= (insert$ (fun_app$r ?v2 ?v0) (image$k ?v2 ?v1)) (image$k ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_N_fun$)) (=> (member$c ?v0 ?v1) (= (insert$ (fun_app$p ?v2 ?v0) (image$g ?v2 ?v1)) (image$g ?v2 ?v1))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum_N_fun$)) (=> (member$a ?v0 ?v1) (= (insert$ (fun_app$u ?v2 ?v0) (image$o ?v2 ?v1)) (image$o ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (= (image$ ?v0 (insert$b ?v1 ?v2)) (insert$c (fun_app$w ?v0 ?v1) (image$ ?v0 ?v2))) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_set$)) (= (image$g ?v0 (insert$ ?v1 ?v2)) (insert$ (fun_app$p ?v0 ?v1) (image$g ?v0 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 Dtree$)) (=> (and (fun_app$i (fun_app$ai (inItr$ ?v0) ?v1) ?v2) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v3)) (fun_app$i (fun_app$ai (inItr$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v2) ?v3)) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v3)) ))
(assert (forall ((?v0 T$) (?v1 T_set$)) (member$b ?v0 (insert$a ?v0 ?v1)) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (member$ ?v0 (insert$b ?v0 ?v1)) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (member$c ?v0 (insert$ ?v0 ?v1)) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$)) (member$a ?v0 (insert$c ?v0 ?v1)) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (=> (and (not (member$b ?v0 ?v1)) (not (member$b ?v0 ?v2))) (= (= (insert$a ?v0 ?v1) (insert$a ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v0 ?v2))) (= (= (insert$b ?v0 ?v1) (insert$b ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (and (not (member$c ?v0 ?v1)) (not (member$c ?v0 ?v2))) (= (= (insert$ ?v0 ?v1) (insert$ ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v0 ?v2))) (= (= (insert$c ?v0 ?v1) (insert$c ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T$) (?v3 T_set$)) (=> (and (not (member$b ?v0 ?v1)) (not (member$b ?v2 ?v3))) (= (= (insert$a ?v0 ?v1) (insert$a ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 T_set$)) (and (= ?v1 (insert$a ?v2 ?v4)) (and (not (member$b ?v2 ?v4)) (and (= ?v3 (insert$a ?v0 ?v4)) (not (member$b ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v2 ?v3))) (= (= (insert$b ?v0 ?v1) (insert$b ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 T_dtree_sum_set$)) (and (= ?v1 (insert$b ?v2 ?v4)) (and (not (member$ ?v2 ?v4)) (and (= ?v3 (insert$b ?v0 ?v4)) (not (member$ ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$) (?v3 N_set$)) (=> (and (not (member$c ?v0 ?v1)) (not (member$c ?v2 ?v3))) (= (= (insert$ ?v0 ?v1) (insert$ ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 N_set$)) (and (= ?v1 (insert$ ?v2 ?v4)) (and (not (member$c ?v2 ?v4)) (and (= ?v3 (insert$ ?v0 ?v4)) (not (member$c ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v2 ?v3))) (= (= (insert$c ?v0 ?v1) (insert$c ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 T_N_sum_set$)) (and (= ?v1 (insert$c ?v2 ?v4)) (and (not (member$a ?v2 ?v4)) (and (= ?v3 (insert$c ?v0 ?v4)) (not (member$a ?v0 ?v4))))) )))) ))
(assert (forall ((?v0 T$) (?v1 T_set$)) (=> (member$b ?v0 ?v1) (exists ((?v2 T_set$)) (and (= ?v1 (insert$a ?v0 ?v2)) (not (member$b ?v0 ?v2))) )) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (=> (member$ ?v0 ?v1) (exists ((?v2 T_dtree_sum_set$)) (and (= ?v1 (insert$b ?v0 ?v2)) (not (member$ ?v0 ?v2))) )) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (=> (member$c ?v0 ?v1) (exists ((?v2 N_set$)) (and (= ?v1 (insert$ ?v0 ?v2)) (not (member$c ?v0 ?v2))) )) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$)) (=> (member$a ?v0 ?v1) (exists ((?v2 T_N_sum_set$)) (and (= ?v1 (insert$c ?v0 ?v2)) (not (member$a ?v0 ?v2))) )) ))
(assert (forall ((?v0 T$) (?v1 T_set$) (?v2 T$)) (=> (member$b ?v0 ?v1) (member$b ?v0 (insert$a ?v2 ?v1))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (insert$b ?v2 ?v1))) ))
(assert (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (member$c ?v0 ?v1) (member$c ?v0 (insert$ ?v2 ?v1))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (insert$c ?v2 ?v1))) ))
(assert (forall ((?v0 T$) (?v1 T_set$)) (! (=> (member$b ?v0 ?v1) (= (insert$a ?v0 ?v1) ?v1)) :pattern ((insert$a ?v0 ?v1)))))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (! (=> (member$ ?v0 ?v1) (= (insert$b ?v0 ?v1) ?v1)) :pattern ((insert$b ?v0 ?v1)))))
(assert (forall ((?v0 N$) (?v1 N_set$)) (! (=> (member$c ?v0 ?v1) (= (insert$ ?v0 ?v1) ?v1)) :pattern ((insert$ ?v0 ?v1)))))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$)) (! (=> (member$a ?v0 ?v1) (= (insert$c ?v0 ?v1) ?v1)) :pattern ((insert$c ?v0 ?v1)))))
(assert (forall ((?v0 T$) (?v1 T_set$)) (=> (and (member$b ?v0 ?v1) (forall ((?v2 T_set$)) (=> (and (= ?v1 (insert$a ?v0 ?v2)) (not (member$b ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v2 T_dtree_sum_set$)) (=> (and (= ?v1 (insert$b ?v0 ?v2)) (not (member$ ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 N$) (?v1 N_set$)) (=> (and (member$c ?v0 ?v1) (forall ((?v2 N_set$)) (=> (and (= ?v1 (insert$ ?v0 ?v2)) (not (member$c ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$)) (=> (and (member$a ?v0 ?v1) (forall ((?v2 T_N_sum_set$)) (=> (and (= ?v1 (insert$c ?v0 ?v2)) (not (member$a ?v0 ?v2))) false) )) false) ))
(assert (forall ((?v0 T$) (?v1 T$) (?v2 T_set$)) (=> (and (member$b ?v0 (insert$a ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$b ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (insert$b ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (=> (and (member$c ?v0 (insert$ ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$c ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_N_sum$) (?v2 T_N_sum_set$)) (=> (and (member$a ?v0 (insert$c ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (insert$ ?v0 (insert$ ?v1 ?v2)) (insert$ ?v1 (insert$ ?v0 ?v2))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$i (fun_app$ai (inItr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v3) ?v1) (= (fun_app$v root$ ?v3) ?v2)) )) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$c (fun_app$v root$ ?v0) ?v1) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v1) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v2) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v1) ?v2) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v3)) (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v3) ?v2)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$c (fun_app$v root$ ?v0) ?v1) (fun_app$i (fun_app$ai (inItr$ ?v1) ?v0) (fun_app$v root$ ?v0))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$i (fun_app$ai (inItr$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (and (member$ (inr$a ?v0) (cont$ ?v2)) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v1) ?v2) ?v3))) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v1) ?v2) ?v3) (member$ (inr$a ?v3) (cont$ ?v0)))) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v1) ?v2) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$c (fun_app$v root$ ?v3) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v4) ?v5) ?v6) (member$ (inr$a ?v6) (cont$ ?v3))))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set_dtree_dtree_bool_fun_fun_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (and (forall ((?v4 N_set$) (?v5 Dtree$)) (fun_app$af (fun_app$ag (fun_app$ah ?v3 ?v4) ?v5) ?v5) ) (forall ((?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$) (?v7 Dtree$)) (=> (and (member$c (fun_app$v root$ ?v5) ?v4) (and (member$ (inr$a ?v5) (cont$ ?v6)) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v4) ?v6) ?v7) (fun_app$af (fun_app$ag (fun_app$ah ?v3 ?v4) ?v6) ?v7)))) (fun_app$af (fun_app$ag (fun_app$ah ?v3 ?v4) ?v5) ?v7)) ))) (fun_app$af (fun_app$ag (fun_app$ah ?v3 ?v0) ?v1) ?v2)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$c (fun_app$v root$ ?v3) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v4) ?v5) ?v6) (member$ (inr$a ?v6) (cont$ ?v3))))))) ))) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$h (fun_app$ab (fun_app$ac inFr$ ?v0) ?v1) ?v2) (member$ (inr$a ?v1) (cont$ ?v3))) (fun_app$h (fun_app$ab (fun_app$ac inFr$ (insert$ (fun_app$v root$ ?v3) ?v0)) ?v3) ?v2)) ))
(assert (forall ((?v0 N$) (?v1 N$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1)))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$a ?v0) (inr$a ?v1)))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 N_set$) (?v3 T$)) (=> (and (member$ (inr$a ?v0) (cont$ ?v1)) (fun_app$h (fun_app$ab (fun_app$ac inFr2$ ?v2) ?v0) ?v3)) (fun_app$h (fun_app$ab (fun_app$ac inFr2$ (insert$ (fun_app$v root$ ?v1) ?v2)) ?v1) ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (and (member$ (inr$a ?v0) (cont$ ?v2)) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v1) ?v2) ?v3))) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v1) ?v0) ?v3)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c (fun_app$v root$ ?v0) ?v1) (and (member$ (inr$a ?v2) (cont$ ?v0)) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v1) ?v3) ?v2))) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v1) ?v3) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$c (fun_app$v root$ ?v3) ?v4)))) false) ) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (member$ (inr$a ?v3) (cont$ ?v5)) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v4) ?v5) ?v6)))))) false) ))) false) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$c (fun_app$v root$ ?v3) ?v4)))) ) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$c (fun_app$v root$ ?v3) ?v4) (and (member$ (inr$a ?v3) (cont$ ?v5)) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v4) ?v5) ?v6)))))) ))) ))
(assert (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree_dtree_bool_fun_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ top$) ?v0) ?v1) (and (forall ((?v3 Dtree$)) (fun_app$af (fun_app$ag ?v2 ?v3) ?v3) ) (forall ((?v3 Dtree$) (?v4 Dtree$) (?v5 Dtree$)) (=> (and (member$ (inr$a ?v3) (cont$ ?v4)) (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ top$) ?v4) ?v5) (fun_app$af (fun_app$ag ?v2 ?v4) ?v5))) (fun_app$af (fun_app$ag ?v2 ?v3) ?v5)) ))) (fun_app$af (fun_app$ag ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T$)) (=> (and (fun_app$h (setlp$ ?v0) ?v1) (forall ((?v2 T$)) (=> (and (= ?v1 ?v2) (= ?v0 (inl$ ?v2))) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 T$)) (=> (and (fun_app$h (setlp$a ?v0) ?v1) (forall ((?v2 T$)) (=> (and (= ?v1 ?v2) (= ?v0 (inl$a ?v2))) false) )) false) ))
(assert (forall ((?v0 T$)) (member$b ?v0 top$a) ))
(assert (forall ((?v0 T_dtree_sum$)) (member$ ?v0 top$b) ))
(assert (forall ((?v0 T_N_sum$)) (member$a ?v0 top$c) ))
(assert (forall ((?v0 N$)) (member$c ?v0 top$) ))
(assert (forall ((?v0 T_T_N_sum_fun$)) (= (vimage$ ?v0 top$c) top$a) ))
(assert (forall ((?v0 N_N_fun$)) (= (vimage$e ?v0 top$) top$) ))
(assert (forall ((?v0 T_set$)) (=> (forall ((?v1 T$)) (member$b ?v1 ?v0) ) (= top$a ?v0)) ))
(assert (forall ((?v0 T_dtree_sum_set$)) (=> (forall ((?v1 T_dtree_sum$)) (member$ ?v1 ?v0) ) (= top$b ?v0)) ))
(assert (forall ((?v0 T_N_sum_set$)) (=> (forall ((?v1 T_N_sum$)) (member$a ?v1 ?v0) ) (= top$c ?v0)) ))
(assert (forall ((?v0 N_set$)) (=> (forall ((?v1 N$)) (member$c ?v1 ?v0) ) (= top$ ?v0)) ))
(assert (exists ((?v0 T$)) (member$b ?v0 top$a) ))
(assert (exists ((?v0 T_dtree_sum$)) (member$ ?v0 top$b) ))
(assert (exists ((?v0 T_N_sum$)) (member$a ?v0 top$c) ))
(assert (exists ((?v0 N$)) (member$c ?v0 top$) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v2) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v2) ?v3)) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v3)) ))
(assert (forall ((?v0 T_dtree_sum_T_N_sum_fun$)) (= (= (image$ ?v0 top$b) top$c) (forall ((?v1 T_N_sum$)) (exists ((?v2 T_dtree_sum$)) (= ?v1 (fun_app$w ?v0 ?v2)) ) )) ))
(assert (forall ((?v0 N_N_fun$)) (= (= (image$g ?v0 top$) top$) (forall ((?v1 N$)) (exists ((?v2 N$)) (= ?v1 (fun_app$p ?v0 ?v2)) ) )) ))
(assert (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_N_sum_T_dtree_sum_fun$)) (=> (forall ((?v2 T_N_sum$)) (= (fun_app$w ?v0 (fun_app$y ?v1 ?v2)) ?v2) ) (= (image$ ?v0 top$b) top$c)) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N_N_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$p ?v0 (fun_app$p ?v1 ?v2)) ?v2) ) (= (image$g ?v0 top$) top$)) ))
(assert (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_N_sum$)) (=> (and (= (image$ ?v0 top$b) top$c) (forall ((?v2 T_dtree_sum$)) (=> (= ?v1 (fun_app$w ?v0 ?v2)) false) )) false) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$)) (=> (and (= (image$g ?v0 top$) top$) (forall ((?v2 N$)) (=> (= ?v1 (fun_app$p ?v0 ?v2)) false) )) false) ))
(assert (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_N_sum$)) (=> (= (image$ ?v0 top$b) top$c) (exists ((?v2 T_dtree_sum$)) (= ?v1 (fun_app$w ?v0 ?v2)) )) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$)) (=> (= (image$g ?v0 top$) top$) (exists ((?v2 N$)) (= ?v1 (fun_app$p ?v0 ?v2)) )) ))
(assert (forall ((?v0 T_N_sum$) (?v1 T_dtree_sum_T_N_sum_fun$) (?v2 T_dtree_sum$)) (=> (= ?v0 (fun_app$w ?v1 ?v2)) (member$a ?v0 (image$ ?v1 top$b))) ))
(assert (forall ((?v0 T$) (?v1 N_T_fun$) (?v2 N$)) (=> (= ?v0 (fun_app$o ?v1 ?v2)) (member$b ?v0 (image$f ?v1 top$))) ))
(assert (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N$)) (=> (= ?v0 (fun_app$s ?v1 ?v2)) (member$ ?v0 (image$l ?v1 top$))) ))
(assert (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$)) (=> (= ?v0 (fun_app$p ?v1 ?v2)) (member$c ?v0 (image$g ?v1 top$))) ))
(assert (forall ((?v0 T_N_sum$) (?v1 N_T_N_sum_fun$) (?v2 N$)) (=> (= ?v0 (fun_app$c ?v1 ?v2)) (member$a ?v0 (image$m ?v1 top$))) ))
(assert (forall ((?v0 N_T_fun$) (?v1 N$)) (member$b (fun_app$o ?v0 ?v1) (image$f ?v0 top$)) ))
(assert (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$)) (member$ (fun_app$s ?v0 ?v1) (image$l ?v0 top$)) ))
(assert (forall ((?v0 N_N_fun$) (?v1 N$)) (member$c (fun_app$p ?v0 ?v1) (image$g ?v0 top$)) ))
(assert (forall ((?v0 N_T_N_sum_fun$) (?v1 N$)) (member$a (fun_app$c ?v0 ?v1) (image$m ?v0 top$)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v2) ?v0)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v2) (member$c (fun_app$v root$ ?v1) ?v0)) ))
(assert (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$c (fun_app$v root$ ?v0) ?v1) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v1) ?v0) ?v0)) ))
(assert (= subtr$ subtr2$))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$) (?v4 Dtree$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v0) ?v1) ?v2) (fun_app$af (fun_app$ag (fun_app$ah subtr$ ?v3) ?v2) ?v4)) (fun_app$af (fun_app$ag (fun_app$ah subtr$ (sup$ ?v0 ?v3)) ?v1) ?v4)) ))
(assert (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$) (?v4 Dtree$)) (=> (and (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v0) ?v1) ?v2) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ ?v3) ?v2) ?v4)) (fun_app$af (fun_app$ag (fun_app$ah subtr2$ (sup$ ?v0 ?v3)) ?v1) ?v4)) ))
(check-sat)
(exit)

