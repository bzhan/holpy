(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_set$ 0)
(declare-sort Enat_set_set$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Enat_enat_set_fun$ 0)
(declare-sort Enat_set_bool_fun$ 0)
(declare-sort Enat_set_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Enat_set_enat_set_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_set_enat_set_bool_fun_fun$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ () Nat_option$)
(declare-fun the$ (Nat_option$) Nat$)
(declare-fun some$ (Nat$) Nat_option$)
(declare-fun rep_enat$ (Enat$) Nat_option$)
(declare-fun abs_enat$ (Nat_option$) Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-fun m$ () Enat$)
(declare-fun n$ () Enat$)
(declare-fun uu$ (Enat_set$) Enat_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun min$ (Enat$) Enat_enat_fun$)
(declare-fun one$ () Enat$)
(declare-fun uua$ () Enat_enat_bool_fun_fun$)
(declare-fun fixp$ (Enat_set_enat_set_fun$) Enat_set$)
(declare-fun min$a (Enat_set$) Enat_set_enat_set_fun$)
(declare-fun plus$ (Enat$) Enat_enat_fun$)
(declare-fun zero$ () Enat$)
(declare-fun chain$ (Enat_set_enat_set_bool_fun_fun$ Enat_set_set$) Bool)
(declare-fun fixp$a (Enat_enat_fun$) Enat$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun minus$ (Enat$) Enat_enat_fun$)
(declare-fun times$ (Enat$) Enat_enat_fun$)
(declare-fun chain$a (Enat_enat_bool_fun_fun$ Enat_set$) Bool)
(declare-fun member$ (Enat$ Enat_set$) Bool)
(declare-fun minus$a (Enat_set$) Enat_set_enat_set_fun$)
(declare-fun collect$ (Enat_bool_fun$) Enat_set$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun less_eq$ () Enat_enat_bool_fun_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (Enat_set$ Enat_set_set$) Bool)
(declare-fun fun_app$a (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$b (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$f (Enat_set_bool_fun$ Enat_set$) Bool)
(declare-fun fun_app$g (Enat_set_enat_set_bool_fun_fun$ Enat_set$) Enat_set_bool_fun$)
(declare-fun fun_app$h (Enat_enat_set_fun$ Enat$) Enat_set$)
(declare-fun fun_app$i (Enat_set_enat_fun$ Enat_set$) Enat$)
(declare-fun fun_app$j (Enat_set_enat_set_fun$ Enat_set$) Enat_set$)
(declare-fun fun_app$k (Enat_enat_fun$ Enat$) Enat$)
(declare-fun iterates$ (Enat_set_enat_set_fun$) Enat_set_set$)
(declare-fun less_eq$a () Enat_set_enat_set_bool_fun_fun$)
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ Enat_enat_bool_fun_fun$ A_llist_enat_fun$) Bool)
(declare-fun iterates$a (Enat_enat_fun$) Enat_set$)
(declare-fun monotone$a (Enat_enat_bool_fun_fun$ Enat_enat_bool_fun_fun$ Enat_enat_fun$) Bool)
(declare-fun monotone$b (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun monotone$c (Enat_set_enat_set_bool_fun_fun$ Enat_set_enat_set_bool_fun_fun$ Enat_set_enat_set_fun$) Bool)
(declare-fun strict_mono$ (Enat_enat_set_fun$) Bool)
(declare-fun strict_mono$a (Enat_enat_fun$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (forall ((?v0 Enat_set$) (?v1 Enat$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (fun_app$a uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uua$ ?v0) ?v1)))))
(assert (not (fun_app$ (fun_app$a less_eq$ n$) m$)))
(assert (not (fun_app$ (fun_app$a less_eq$ (fun_app$b llength$ xs$)) m$)))
(assert (fun_app$c (fun_app$d lprefix$ (fun_app$e (ltake$ n$) xs$)) (fun_app$e (ltake$ m$) xs$)))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) ) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) ))
(assert (forall ((?v0 Enat_set$)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (and (= (fun_app$e (ltake$ ?v0) ?v1) (fun_app$e (ltake$ ?v0) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v3) ?v0)) (= (fun_app$e (ltake$ ?v3) ?v1) (fun_app$e (ltake$ ?v3) ?v2))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$c (fun_app$d lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (fun_app$c (fun_app$d lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (= (= ?v0 ?v1) (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) false)) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) ) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) )) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_enat_set_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_set_enat_fun$) (?v2 Enat_set$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (and (fun_app$f (fun_app$g less_eq$a ?v2) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set_enat_set_fun$) (?v2 Enat_set$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (and (fun_app$f (fun_app$g less_eq$a ?v2) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (= ?v0 ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v2)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (= ?v0 ?v1) (fun_app$f (fun_app$g less_eq$a ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (fun_app$c (fun_app$d lprefix$ (fun_app$e (ltake$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (fun_app$c (fun_app$d lprefix$ ?v1) ?v2)) (fun_app$c (fun_app$d lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (fun_app$c (fun_app$d lprefix$ ?v1) ?v2)) (fun_app$c (fun_app$d lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (fun_app$c (fun_app$d lprefix$ ?v2) ?v1)) (or (fun_app$c (fun_app$d lprefix$ ?v0) ?v2) (fun_app$c (fun_app$d lprefix$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (fun_app$c (fun_app$d lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (fun_app$c (fun_app$d lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b llength$ ?v0)) ?v1) (= (fun_app$e (ltake$ ?v1) ?v0) ?v0)) :pattern ((fun_app$e (ltake$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat_set$)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (! (=> (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (= (fun_app$f (fun_app$g less_eq$a ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$f (fun_app$g less_eq$a ?v1) ?v0)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v2)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v2)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v2) ?v0)) (fun_app$f (fun_app$g less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_set_enat_fun$) (?v2 Enat_set$) (?v3 Enat_set$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$i ?v1 ?v2)) (and (fun_app$f (fun_app$g less_eq$a ?v2) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v1 ?v4)) (fun_app$i ?v1 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$i ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_enat_set_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$h ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v1 ?v4)) (fun_app$h ?v1 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$h ?v1 ?v3))) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set_enat_set_fun$) (?v2 Enat_set$) (?v3 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$j ?v1 ?v2)) (and (fun_app$f (fun_app$g less_eq$a ?v2) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v1 ?v4)) (fun_app$j ?v1 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v2) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v1 ?v4)) (fun_app$k ?v1 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k ?v1 ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_set_fun$) (?v3 Enat_set$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v2 ?v1)) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set_enat_set_fun$) (?v3 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (and (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v2 ?v1)) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v2 ?v1)) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (= ?v1 ?v2)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_set_fun$) (?v3 Enat_set$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$h ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (and (= (fun_app$i ?v2 ?v1) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v2 ?v4)) (fun_app$i ?v2 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ (fun_app$i ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set_enat_set_fun$) (?v3 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (and (= (fun_app$j ?v2 ?v1) ?v3) (forall ((?v4 Enat_set$) (?v5 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v4) ?v5) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 ?v5))) ))) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (and (= (fun_app$k ?v2 ?v1) ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v4) ?v5) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v2 ?v4)) (fun_app$k ?v2 ?v5))) ))) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v2 ?v0)) ?v3)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$b llength$ ?v1)) (= (fun_app$e (ltake$ ?v0) (fun_app$e (lappend$ ?v1) ?v2)) (fun_app$e (ltake$ ?v0) ?v1))) ))
(assert (forall ((?v0 Enat_set$)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v2) ?v0)) (fun_app$f (fun_app$g less_eq$a ?v2) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v0)) (fun_app$ (fun_app$a less_eq$ ?v2) ?v1)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v2)) (fun_app$f (fun_app$g less_eq$a ?v0) ?v2)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (and (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (fun_app$f (fun_app$g less_eq$a ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (monotone$ lprefix$ less_eq$ llength$))
(assert (forall ((?v0 Enat_bool_fun$) (?v1 Enat_bool_fun$)) (=> (forall ((?v2 Enat$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 Enat_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$b llength$ (fun_app$e (ltake$ ?v0) ?v1)) (fun_app$k (min$ ?v0) (fun_app$b llength$ ?v1))) ))
(assert (forall ((?v0 Enat_enat_set_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (strict_mono$ ?v0) (= (fun_app$f (fun_app$g less_eq$a (fun_app$h ?v0 ?v1)) (fun_app$h ?v0 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (strict_mono$a ?v0) (= (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v0 ?v1)) (fun_app$k ?v0 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (fun_app$e (ltake$ ?v0) (fun_app$e (ltake$ ?v1) ?v2)) (fun_app$e (ltake$ (fun_app$k (min$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_enat_fun$) (?v4 Enat_enat_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$k ?v0 ?v5) (ite (fun_app$ (fun_app$a less_eq$ ?v5) ?v1) ?v2 (fun_app$k ?v3 ?v5))) ) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v5) ?v6) (not (fun_app$ (fun_app$a less_eq$ ?v5) ?v1))) (fun_app$ (fun_app$a ?v4 (fun_app$k ?v3 ?v5)) (fun_app$k ?v3 ?v6))) ) (and (forall ((?v5 Enat$)) (=> (not (fun_app$ (fun_app$a less_eq$ ?v5) ?v1)) (fun_app$ (fun_app$a ?v4 ?v2) (fun_app$k ?v3 ?v5))) ) (fun_app$ (fun_app$a ?v4 ?v2) ?v2)))) (monotone$a less_eq$ ?v4 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$e (lappend$ (fun_app$e (lappend$ ?v0) ?v1)) ?v2) (fun_app$e (lappend$ ?v0) (fun_app$e (lappend$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (strict_mono$a ?v0) (= (= (fun_app$k ?v0 ?v1) (fun_app$k ?v0 ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (= (fun_app$j (min$a ?v0) ?v1) (ite (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) ?v0 ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$k (min$ ?v0) ?v1) (ite (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) ?v0 ?v1)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (= (fun_app$j (min$a ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$k (min$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (fun_app$f (fun_app$g less_eq$a ?v0) ?v1) (= (fun_app$j (min$a ?v0) ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$k (min$ ?v0) ?v1) ?v0)) ))
(assert (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist$) (?v2 Enat$) (?v3 A_llist_enat_fun$) (?v4 Enat_enat_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist$)) (= (fun_app$b ?v0 ?v5) (ite (fun_app$c (fun_app$d lprefix$ ?v5) ?v1) ?v2 (fun_app$b ?v3 ?v5))) ) (and (forall ((?v5 A_llist$) (?v6 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v5) ?v6) (not (fun_app$c (fun_app$d lprefix$ ?v5) ?v1))) (fun_app$ (fun_app$a ?v4 (fun_app$b ?v3 ?v5)) (fun_app$b ?v3 ?v6))) ) (and (forall ((?v5 A_llist$)) (=> (not (fun_app$c (fun_app$d lprefix$ ?v5) ?v1)) (fun_app$ (fun_app$a ?v4 ?v2) (fun_app$b ?v3 ?v5))) ) (fun_app$ (fun_app$a ?v4 ?v2) ?v2)))) (monotone$ lprefix$ ?v4 ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$) (?v4 A_llist_a_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist$)) (= (fun_app$e ?v0 ?v5) (ite (fun_app$c (fun_app$d lprefix$ ?v5) ?v1) ?v2 (fun_app$e ?v3 ?v5))) ) (and (forall ((?v5 A_llist$) (?v6 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$ ?v5) ?v6) (not (fun_app$c (fun_app$d lprefix$ ?v5) ?v1))) (fun_app$c (fun_app$d ?v4 (fun_app$e ?v3 ?v5)) (fun_app$e ?v3 ?v6))) ) (and (forall ((?v5 A_llist$)) (=> (not (fun_app$c (fun_app$d lprefix$ ?v5) ?v1)) (fun_app$c (fun_app$d ?v4 ?v2) (fun_app$e ?v3 ?v5))) ) (fun_app$c (fun_app$d ?v4 ?v2) ?v2)))) (monotone$b lprefix$ ?v4 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (fun_app$c (fun_app$d lprefix$ ?v0) (fun_app$e (lappend$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (fun_app$c (fun_app$d lprefix$ (fun_app$e (lappend$ ?v2) ?v0)) (fun_app$e (lappend$ ?v2) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k (min$ ?v1) ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (min$ ?v0) ?v0) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$k (min$ ?v0) (fun_app$k (min$ ?v0) ?v1)) (fun_app$k (min$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$k (min$ (fun_app$k (min$ ?v0) ?v1)) ?v1) (fun_app$k (min$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$ (fun_app$a less_eq$ (fun_app$k (min$ ?v0) ?v1)) ?v2) (or (fun_app$ (fun_app$a less_eq$ ?v0) ?v2) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$k (min$ ?v1) ?v0) ?v0)) :pattern ((fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$k (min$ ?v0) ?v1) ?v0)) :pattern ((fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v0 (fun_app$k (min$ ?v0) ?v1))) :pattern ((fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$)) (monotone$b lprefix$ lprefix$ (lappend$ ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (min$ (fun_app$k (min$ ?v0) ?v1)) ?v2) (fun_app$k (min$ ?v0) (fun_app$k (min$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (min$ ?v0) (fun_app$k (min$ ?v1) ?v2)) (fun_app$k (min$ ?v1) (fun_app$k (min$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$k (min$ ?v0) ?v1) (fun_app$k (min$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (min$ ?v0) ?v1)) ?v0) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (min$ ?v0) ?v1)) ?v1) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ (fun_app$k (min$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ (fun_app$k (min$ ?v2) ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$k (min$ ?v0) ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$k (min$ ?v1) ?v0) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k (min$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v3)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (min$ ?v0) ?v2)) (fun_app$k (min$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (=> (= ?v0 (fun_app$k (min$ ?v0) ?v1)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k (min$ ?v1) ?v2)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) false)) false) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (fun_app$k (min$ ?v0) ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 Enat$) (?v2 A_llist$)) (=> (fun_app$ (fun_app$a less_eq$ (fun_app$b llength$ ?v0)) ?v1) (= (fun_app$e (ltake$ ?v1) (fun_app$e (lappend$ ?v0) ?v2)) (fun_app$e (lappend$ ?v0) (fun_app$e (ltake$ (fun_app$k (minus$ ?v1) (fun_app$b llength$ ?v0))) ?v2)))) ))
(assert (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$e (ltake$ ?v0) (fun_app$e (lappend$ ?v1) ?v2)) (fun_app$e (lappend$ (fun_app$e (ltake$ ?v0) ?v1)) (fun_app$e (ltake$ (fun_app$k (minus$ ?v0) (fun_app$b llength$ ?v1))) ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_enat_fun$)) (= (monotone$ ?v0 ?v1 ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$d ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v1 (fun_app$b ?v2 ?v3)) (fun_app$b ?v2 ?v4))) )) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_fun$)) (= (monotone$b ?v0 ?v1 ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$d ?v0 ?v3) ?v4) (fun_app$c (fun_app$d ?v1 (fun_app$e ?v2 ?v3)) (fun_app$e ?v2 ?v4))) )) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$)) (= (monotone$a ?v0 ?v1 ?v2) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v1 (fun_app$k ?v2 ?v3)) (fun_app$k ?v2 ?v4))) )) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_enat_fun$)) (=> (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$d ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v1 (fun_app$b ?v2 ?v3)) (fun_app$b ?v2 ?v4))) ) (monotone$ ?v0 ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_fun$)) (=> (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$c (fun_app$d ?v0 ?v3) ?v4) (fun_app$c (fun_app$d ?v1 (fun_app$e ?v2 ?v3)) (fun_app$e ?v2 ?v4))) ) (monotone$b ?v0 ?v1 ?v2)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$)) (=> (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v1 (fun_app$k ?v2 ?v3)) (fun_app$k ?v2 ?v4))) ) (monotone$a ?v0 ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 A_llist_enat_fun$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (monotone$ ?v0 ?v1 ?v2) (fun_app$c (fun_app$d ?v0 ?v3) ?v4)) (fun_app$ (fun_app$a ?v1 (fun_app$b ?v2 ?v3)) (fun_app$b ?v2 ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (monotone$b ?v0 ?v1 ?v2) (fun_app$c (fun_app$d ?v0 ?v3) ?v4)) (fun_app$c (fun_app$d ?v1 (fun_app$e ?v2 ?v3)) (fun_app$e ?v2 ?v4))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$) (?v3 Enat$) (?v4 Enat$)) (=> (and (monotone$a ?v0 ?v1 ?v2) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)) (fun_app$ (fun_app$a ?v1 (fun_app$k ?v2 ?v3)) (fun_app$k ?v2 ?v4))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b llength$ (fun_app$e (lappend$ ?v0) ?v1)) (fun_app$k (plus$ (fun_app$b llength$ ?v0)) (fun_app$b llength$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$c (fun_app$d lprefix$ (fun_app$e (lappend$ ?v0) ?v1)) (fun_app$e (lappend$ ?v0) ?v2)) (=> (lfinite$ ?v0) (fun_app$c (fun_app$d lprefix$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$e (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$c (fun_app$d lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$c (fun_app$d lprefix$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$e (lappend$ ?v0) ?v1) ?v0)) :pattern ((fun_app$e (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (plus$ (fun_app$k (plus$ ?v0) ?v1)) ?v2) (fun_app$k (plus$ ?v0) (fun_app$k (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (plus$ (fun_app$k (plus$ ?v0) ?v1)) ?v2) (fun_app$k (plus$ ?v0) (fun_app$k (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (plus$ ?v0) (fun_app$k (plus$ ?v1) ?v2)) (fun_app$k (plus$ ?v1) (fun_app$k (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$k (plus$ ?v0) ?v1) (fun_app$k (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$k (plus$ ?v0) ?v2) (fun_app$k (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v3)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (plus$ ?v0) ?v2)) (fun_app$k (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v2 ?v3)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (plus$ ?v0) ?v2)) (fun_app$k (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v3)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (plus$ ?v0) ?v2)) (fun_app$k (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v2) ?v3)) (fun_app$ (fun_app$a less_eq$ (fun_app$k (plus$ ?v0) ?v2)) (fun_app$k (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ (fun_app$k (plus$ ?v0) ?v2)) (fun_app$k (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ (fun_app$k (plus$ ?v2) ?v0)) (fun_app$k (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)) (= (= (fun_app$k (minus$ ?v1) ?v0) (fun_app$k (minus$ ?v2) ?v0)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ (fun_app$k (minus$ ?v0) ?v2)) (fun_app$k (minus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k (plus$ ?v0) ?v1)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat_set_enat_set_fun$) (?v1 Enat_set$)) (=> (and (monotone$c less_eq$a less_eq$a ?v0) (fun_app$f (fun_app$g less_eq$a (fun_app$j ?v0 ?v1)) ?v1)) (fun_app$f (fun_app$g less_eq$a (fixp$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat_enat_fun$) (?v1 Enat$)) (=> (and (monotone$a less_eq$ less_eq$ ?v0) (fun_app$ (fun_app$a less_eq$ (fun_app$k ?v0 ?v1)) ?v1)) (fun_app$ (fun_app$a less_eq$ (fixp$a ?v0)) ?v1)) ))
(assert (forall ((?v0 Enat_set_enat_set_fun$)) (! (=> (monotone$c less_eq$a less_eq$a ?v0) (= (fixp$ ?v0) (fun_app$j ?v0 (fixp$ ?v0)))) :pattern ((fixp$ ?v0)))))
(assert (forall ((?v0 Enat_enat_fun$)) (! (=> (monotone$a less_eq$ less_eq$ ?v0) (= (fixp$a ?v0) (fun_app$k ?v0 (fixp$a ?v0)))) :pattern ((fixp$a ?v0)))))
(assert (forall ((?v0 Enat_set_enat_set_fun$)) (=> (monotone$c less_eq$a less_eq$a ?v0) (member$a (fixp$ ?v0) (iterates$ ?v0))) ))
(assert (forall ((?v0 Enat_enat_fun$)) (=> (monotone$a less_eq$ less_eq$ ?v0) (member$ (fixp$a ?v0) (iterates$a ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (times$ ?v0) (fun_app$k (plus$ ?v1) ?v2)) (fun_app$k (plus$ (fun_app$k (times$ ?v0) ?v1)) (fun_app$k (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (times$ (fun_app$k (plus$ ?v0) ?v1)) ?v2) (fun_app$k (plus$ (fun_app$k (times$ ?v0) ?v2)) (fun_app$k (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (times$ (fun_app$k (plus$ ?v0) ?v1)) ?v2) (fun_app$k (plus$ (fun_app$k (times$ ?v0) ?v2)) (fun_app$k (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (= (fun_app$k (plus$ (fun_app$k (times$ ?v0) ?v1)) (fun_app$k (plus$ (fun_app$k (times$ ?v2) ?v1)) ?v3)) (fun_app$k (plus$ (fun_app$k (times$ (fun_app$k (plus$ ?v0) ?v2)) ?v1)) ?v3)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (times$ (fun_app$k (times$ ?v0) ?v1)) ?v2) (fun_app$k (times$ ?v0) (fun_app$k (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (times$ (fun_app$k (times$ ?v0) ?v1)) ?v2) (fun_app$k (times$ ?v0) (fun_app$k (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (fun_app$k (times$ ?v0) (fun_app$k (times$ ?v1) ?v2)) (fun_app$k (times$ ?v1) (fun_app$k (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$k (times$ ?v0) ?v1) (fun_app$k (times$ ?v1) ?v0)) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$)) (=> (member$ ?v0 (iterates$a ?v1)) (member$ (fun_app$k ?v1 ?v0) (iterates$a ?v1))) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_set_enat_set_fun$)) (=> (and (member$a ?v0 (iterates$ ?v1)) (monotone$c less_eq$a less_eq$a ?v1)) (fun_app$f (fun_app$g less_eq$a ?v0) (fun_app$j ?v1 ?v0))) ))
(assert (forall ((?v0 Enat$) (?v1 Enat_enat_fun$)) (=> (and (member$ ?v0 (iterates$a ?v1)) (monotone$a less_eq$ less_eq$ ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) (fun_app$k ?v1 ?v0))) ))
(assert (forall ((?v0 Enat_set_enat_set_fun$)) (=> (monotone$c less_eq$a less_eq$a ?v0) (chain$ less_eq$a (iterates$ ?v0))) ))
(assert (forall ((?v0 Enat_enat_fun$)) (=> (monotone$a less_eq$ less_eq$ ?v0) (chain$a less_eq$ (iterates$a ?v0))) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (times$ one$) ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (times$ ?v0) one$) ?v0) ))
(assert (forall ((?v0 Enat_set$)) (chain$a less_eq$ ?v0) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (chain$a ?v0 ?v1) (chain$a ?v0 (fun_app$j (minus$a ?v1) ?v2))) ))
(assert (forall ((?v0 Enat$)) (= (= one$ ?v0) (= ?v0 one$)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_set$)) (= (chain$a ?v0 ?v1) (forall ((?v2 Enat$)) (=> (member$ ?v2 ?v1) (forall ((?v3 Enat$)) (=> (member$ ?v3 ?v1) (or (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v2))) )) )) ))
(assert (forall ((?v0 Enat_set$)) (= (chain$a uua$ ?v0) (forall ((?v1 Enat$)) (=> (member$ ?v1 ?v0) (forall ((?v2 Enat$)) (=> (member$ ?v2 ?v0) (= ?v1 ?v2)) )) )) ))
(assert (forall ((?v0 Enat_set$) (?v1 Enat_enat_bool_fun_fun$)) (=> (forall ((?v2 Enat$) (?v3 Enat$)) (=> (and (member$ ?v2 ?v0) (member$ ?v3 ?v0)) (or (fun_app$ (fun_app$a ?v1 ?v2) ?v3) (fun_app$ (fun_app$a ?v1 ?v3) ?v2))) ) (chain$a ?v1 ?v0)) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_set$) (?v2 Enat$) (?v3 Enat$)) (=> (and (chain$a ?v0 ?v1) (and (member$ ?v2 ?v1) (and (member$ ?v3 ?v1) (and (=> (fun_app$ (fun_app$a ?v0 ?v2) ?v3) false) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v2) false))))) false) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_set$) (?v2 Enat$) (?v3 Enat$)) (=> (and (chain$a ?v0 ?v1) (and (member$ ?v2 ?v1) (member$ ?v3 ?v1))) (or (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v2))) ))
(assert (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_set$) (?v2 Enat_set$)) (=> (and (chain$a ?v0 ?v1) (fun_app$f (fun_app$g less_eq$a ?v2) ?v1)) (chain$a ?v0 ?v2)) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (times$ one$) ?v0) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (times$ ?v0) one$) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (times$ ?v0) zero$) zero$) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (times$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Enat$)) (= (fun_app$k (plus$ zero$) ?v0) ?v0) ))
(assert (not (= zero$ one$)))
(check-sat)
(exit)

