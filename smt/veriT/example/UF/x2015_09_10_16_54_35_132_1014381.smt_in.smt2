(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Bool_tree$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort A_tree_a_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort Dir_a_a_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_fun_bool_fun$ 0)
(declare-sort A_bool_fun_a_fun$ 0)
(declare-sort A_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_a_fun_set$ 0)
(declare-sort A_a_tree_tree_fun$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-sort A_a_a_fun_tree_fun$ 0)
(declare-sort A_a_fun_a_tree_fun$ 0)
(declare-sort A_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_fun$ 0)
(declare-sort Dir_list_a_a_fun_fun$ 0)
(declare-sort A_a_fun_tree_bool_fun$ 0)
(declare-sort A_a_tree_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_tree_a_tree_fun$ 0)
(declare-sort A_tree_a_a_fun_tree_fun$ 0)
(declare-sort A_tree_a_tree_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_tree_fun$ 0)
(declare-sort A_a_fun_a_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort Dir_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_tree_bool_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_tree_bool_fun$ 0)
(declare-sort A_a_fun_a_fun_tree_bool_fun$ 0)
(declare-sort A_a_fun_dir_a_a_fun_fun_fun$ 0)
(declare-sort A_tree_tree_a_tree_tree_fun$ 0)
(declare-sort A_tree_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_a_a_tree_tree_fun_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_tree_fun$ 0)
(declare-sort A_a_tree_a_tree_a_fun_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_fun_a_tree_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_tree_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_tree_tree_fun_a_a_tree_tree_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_tree_bool_fun_fun$ 0)
(declare-sort A_tree_a_a_fun_tree_fun_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_dir_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort Dir_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun_a_tree_a_tree_tree_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ 0)
(declare-sort Dir_list_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_tree_a_tree_a_fun_fun_fun_a_a_tree_a_tree_a_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_bool_fun_tree$ 0)
(declare-fun root$ (A_tree$) A$)
(declare-fun left$ (A_tree$) A_tree$)
(declare-fun right$ (A_tree$) A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$) A_tree$)
(declare-fun select$ (A_a_fun_tree$) A_a_fun$)
(declare-fun selecta$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun selectb$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun node$a (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun selectc$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun$)
(declare-fun selectd$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun selecte$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun node$b (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun selectf$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun selectg$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecth$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$c (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecti$ (A_a_a_fun_fun_tree$) A_a_a_fun_fun$)
(declare-fun selectj$ (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun selectk$ (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun node$d (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun selectl$ (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun selectm$ (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selectn$ (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$e (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecto$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selectp$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selectq$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$f (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selectr$ (A_bool_fun_tree$) A_bool_fun$)
(declare-fun selects$ (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun selectt$ (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun node$g (A_bool_fun$ A_bool_fun_tree$ A_bool_fun_tree$) A_bool_fun_tree$)
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ () Dir$)
(declare-fun r$ () Dir$)
(declare-fun nil$ () Dir_list$)
(declare-fun hd$ (Dir_list$) Dir$)
(declare-fun tl$ (Dir_list$) Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$) Dir_list$)
(declare-sort A_tree_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-fun root$a (A_tree_tree$) A_tree$)
(declare-fun left$a (A_tree_tree$) A_tree_tree$)
(declare-fun right$a (A_tree_tree$) A_tree_tree$)
(declare-fun node$h (A_tree$ A_tree_tree$ A_tree_tree$) A_tree_tree$)
(declare-fun selectu$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun selectv$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selectw$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun node$i (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selectx$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecty$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selectz$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$j (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun t$ () A_tree$)
(declare-fun id$ () A_tree_a_tree_fun$)
(declare-fun uu$ (A_a_fun_set$) A_a_fun_bool_fun$)
(declare-fun id$a () A_a_fun$)
(declare-fun id$b () A_a_fun_a_a_fun_fun$)
(declare-fun uua$ (A_set$) A_bool_fun$)
(declare-fun uub$ () A_tree_a_tree_fun$)
(declare-fun uuc$ () A_tree_a_tree_fun$)
(declare-fun uud$ () A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uue$ () A_a_tree_a_tree_a_tree_fun_fun_fun$)
(declare-fun uuf$ () A_a_tree_a_tree_a_tree_fun_fun_fun$)
(declare-fun uug$ () A_a_fun$)
(declare-fun uuh$ (A_a_fun$) A_a_tree_a_tree_a_fun_fun_fun_a_a_tree_a_tree_a_fun_fun_fun_fun$)
(declare-fun uui$ (A_a_a_fun_fun$) A_a_a_fun_fun$)
(declare-fun uuj$ () A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$)
(declare-fun uuk$ () A_a_tree_a_tree_a_fun_fun_fun$)
(declare-fun uul$ (A$) A_a_fun_a_fun$)
(declare-fun uum$ (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun uun$ (A$) A_a_fun$)
(declare-fun uuo$ () Dir_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$)
(declare-fun comp$ (A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun fold$ (Dir_a_a_fun_fun$) Dir_list_a_a_fun_fun$)
(declare-fun comp$a () A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun comp$b (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_a_a_fun_tree_fun$) A_a_fun_a_a_fun_tree_fun$)
(declare-fun comp$c (A_tree_a_a_fun_tree_fun$ A_a_tree_fun$) A_a_a_fun_tree_fun$)
(declare-fun comp$d (A_a_fun_tree_a_tree_fun$ A_a_fun_a_a_fun_tree_fun$) A_a_fun_a_tree_fun$)
(declare-fun comp$e (A_tree_a_tree_fun$) A_a_tree_fun_a_a_tree_fun_fun$)
(declare-fun comp$f (A_a_tree_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun comp$g (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun comp$h (A_a_a_fun_fun$) A_a_fun_a_a_a_fun_fun_fun$)
(declare-fun comp$i (A_a_fun_a_a_fun_fun$) A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun comp$j (A_a_fun_a_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$)
(declare-fun comp$k (A_a_fun$) A_a_fun_a_fun_a_a_fun_a_fun_fun$)
(declare-fun comp$l (A_tree_tree_a_tree_tree_fun$) A_tree_a_tree_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun comp$m (A_tree_tree_a_tree_tree_fun$ A_tree_tree_a_tree_tree_fun$) A_tree_tree_a_tree_tree_fun$)
(declare-fun comp$n (A_a_fun_a_fun$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun comp$o (A_a_fun_tree_a_tree_fun$) A_tree_a_a_fun_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun comp$p (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree_a_a_fun_tree_fun$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun comp$q (A_a_a_fun_fun$) A_a_fun_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun comp$r (A_tree_a_a_fun_tree_fun$ A_a_fun_tree_a_tree_fun$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun comp$s (A_a_fun_tree_a_a_fun_tree_fun$ A_tree_a_a_fun_tree_fun$) A_tree_a_a_fun_tree_fun$)
(declare-fun comp$t (A_tree_a_a_fun_tree_fun$ A_tree_a_tree_fun$) A_tree_a_a_fun_tree_fun$)
(declare-fun comp$u (A_tree_a_tree_fun$ A_a_fun_tree_a_tree_fun$) A_a_fun_tree_a_tree_fun$)
(declare-fun comp$v (A_a_fun_tree_a_tree_fun$ A_a_fun_tree_a_a_fun_tree_fun$) A_a_fun_tree_a_tree_fun$)
(declare-fun comp$w (A_tree_tree_a_tree_tree_fun$) A_a_tree_tree_fun_a_a_tree_tree_fun_fun$)
(declare-fun comp$x (A_a_fun$) A_tree_a_fun_a_tree_a_fun_fun$)
(declare-fun foldr$ (Dir_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$) Dir_list_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$)
(declare-fun left$b (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun left$c (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun left$d (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun left$e (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun left$f (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun left$g (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun left$h (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun root$b (A_a_fun_a_fun_tree$) A_a_fun_a_fun$)
(declare-fun root$c (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun root$d (A_a_a_fun_fun_tree$) A_a_a_fun_fun$)
(declare-fun root$e (A_a_fun_tree$) A_a_fun$)
(declare-fun root$f (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun root$g (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun root$h (A_bool_fun_tree$) A_bool_fun$)
(declare-fun c_tree$ () A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun i_tree$ () A_a_fun_tree$)
(declare-fun k_tree$ () A_a_a_fun_fun_tree$)
(declare-fun member$ (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun mirror$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun right$b (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun right$c (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun right$d (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun right$e (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun right$f (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun right$g (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun right$h (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun s_tree$ () A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun ap_tree$ (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_a_fun_a_fun$ A_a_fun_a_fun_set$) Bool)
(declare-fun member$c (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$) Bool)
(declare-fun member$d (A_a_a_fun_fun$ A_a_a_fun_fun_set$) Bool)
(declare-fun mirror$a (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun mirror$b (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun mirror$c (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun mirror$d (A_tree$) A_tree$)
(declare-fun mirror$e (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun mirror$f (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun mirror$g (A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun ap_tree$a (A_a_fun_tree$) A_tree_a_tree_fun$)
(declare-fun ap_tree$b (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun ap_tree$c (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun ap_tree$d (A_bool_fun_tree$ A_tree$) Bool_tree$)
(declare-fun ap_tree$e (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun ap_tree$f (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun ap_tree$g (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun ap_tree$h (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun case_dir$ (A_tree_a_tree_fun$) A_tree_a_tree_fun_dir_a_tree_a_tree_fun_fun_fun$)
(declare-fun collect$a (A_a_fun_bool_fun$) A_a_fun_set$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$c (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$d (A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun$)
(declare-fun fun_app$e (Dir_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ Dir$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$f (Dir_a_tree_a_tree_fun_fun$ Dir$) A_tree_a_tree_fun$)
(declare-fun fun_app$g (A_tree_a_tree_fun_dir_a_tree_a_tree_fun_fun_fun$ A_tree_a_tree_fun$) Dir_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$h (A_a_fun_bool_fun$ A_a_fun$) Bool)
(declare-fun fun_app$i (A_bool_fun$ A$) Bool)
(declare-fun fun_app$j (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$k (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$l (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$m (A_tree_a_fun$ A_tree$) A$)
(declare-fun fun_app$n (A_tree_a_tree_a_fun_fun$ A_tree$) A_tree_a_fun$)
(declare-fun fun_app$o (A_a_tree_a_tree_a_fun_fun_fun$ A$) A_tree_a_tree_a_fun_fun$)
(declare-fun fun_app$p (A_a_tree_a_tree_a_fun_fun_fun_a_a_tree_a_tree_a_fun_fun_fun_fun$ A_a_tree_a_tree_a_fun_fun_fun$) A_a_tree_a_tree_a_fun_fun_fun$)
(declare-fun fun_app$q (A_a_fun_tree_a_a_fun_fun$ A_a_fun_tree$) A_a_fun$)
(declare-fun fun_app$r (A_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun$ A_a_fun_tree$) A_a_fun_tree_a_a_fun_fun$)
(declare-fun fun_app$s (A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$ A_a_fun$) A_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun$)
(declare-fun fun_app$t (A_tree_a_tree_a_tree_fun_fun$ A_tree$) A_tree_a_tree_fun$)
(declare-fun fun_app$u (A_a_tree_a_tree_a_tree_fun_fun_fun$ A$) A_tree_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$v (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun fun_app$w (A_a_tree_fun$ A$) A_tree$)
(declare-fun fun_app$x (A_a_fun_a_a_tree_fun_fun$ A_a_fun$) A_a_tree_fun$)
(declare-fun fun_app$y (A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$z (A_a_fun_a_tree_fun$ A_a_fun$) A_tree$)
(declare-fun map_tree$ (A_a_fun$) A_tree_a_tree_fun$)
(declare-fun set_tree$ (A_a_fun_a_fun_tree$) A_a_fun_a_fun_set$)
(declare-fun wit_tree$ (A_a_fun$) A_a_fun_tree$)
(declare-fun case_tree$ (A_a_tree_a_tree_a_tree_fun_fun_fun$) A_tree_a_tree_fun$)
(declare-fun fun_app$aa (A_a_fun_a_a_fun_tree_fun$ A_a_fun$) A_a_fun_tree$)
(declare-fun fun_app$ab (A_a_fun_tree_a_tree_fun$ A_a_fun_tree$) A_tree$)
(declare-fun fun_app$ac (A_tree_a_a_fun_tree_fun$ A_tree$) A_a_fun_tree$)
(declare-fun fun_app$ad (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$) A$)
(declare-fun fun_app$ae (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun$) A$)
(declare-fun fun_app$af (A_a_a_fun_a_fun_fun$ A$) A_a_fun_a_fun$)
(declare-fun fun_app$ag (A_a_a_a_fun_fun_fun$ A$) A_a_a_fun_fun$)
(declare-fun fun_app$ah (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun$) A$)
(declare-fun fun_app$ai (A_a_fun_a_fun_a_a_fun_fun$ A_a_fun_a_fun$) A_a_fun$)
(declare-fun fun_app$aj (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$ak (A_bool_fun_a_fun$ A_bool_fun$) A$)
(declare-fun fun_app$al (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$am (A_bool_fun_a_a_fun_fun$ A_bool_fun$) A_a_fun$)
(declare-fun fun_app$an (A_a_fun_a_bool_fun_fun$ A_a_fun$) A_bool_fun$)
(declare-fun fun_app$ao (A_a_fun_tree_bool_fun$ A_a_fun_tree$) Bool)
(declare-fun fun_app$ap (A_a_fun_a_a_fun_tree_bool_fun_fun$ A_a_fun$) A_a_fun_tree_bool_fun$)
(declare-fun fun_app$aq (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$ar (A_a_tree_bool_fun_fun$ A$) A_tree_bool_fun$)
(declare-fun fun_app$as (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun$) A_a_tree_fun$)
(declare-fun fun_app$at (A_tree_tree_a_tree_tree_fun$ A_tree_tree$) A_tree_tree$)
(declare-fun fun_app$au (A_tree_a_tree_tree_fun$ A_tree$) A_tree_tree$)
(declare-fun fun_app$av (A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_tree_fun$)
(declare-fun fun_app$aw (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$ax (A_a_fun_a_a_a_fun_fun_fun$ A_a_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$ay (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$az (A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$ba (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$bb (A_tree_a_tree_tree_fun_a_tree_a_tree_tree_fun_fun$ A_tree_a_tree_tree_fun$) A_tree_a_tree_tree_fun$)
(declare-fun fun_app$bc (A_tree_a_a_fun_tree_fun_a_tree_a_tree_fun_fun$ A_tree_a_a_fun_tree_fun$) A_tree_a_tree_fun$)
(declare-fun fun_app$bd (A_a_fun_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$be (A_a_fun_a_a_fun_fun_tree_bool_fun$ A_a_fun_a_a_fun_fun_tree$) Bool)
(declare-fun fun_app$bf (A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree_bool_fun$)
(declare-fun fun_app$bg (A_a_a_fun_fun_tree_bool_fun$ A_a_a_fun_fun_tree$) Bool)
(declare-fun fun_app$bh (A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_bool_fun_fun$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree_bool_fun$)
(declare-fun fun_app$bi (A_a_fun_a_fun_tree_bool_fun$ A_a_fun_a_fun_tree$) Bool)
(declare-fun fun_app$bj (A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_bool_fun_fun$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree_bool_fun$)
(declare-fun fun_app$bk (A_a_fun_tree_a_a_fun_tree_bool_fun_fun$ A_a_fun_tree$) A_a_fun_tree_bool_fun$)
(declare-fun fun_app$bl (A_tree_a_tree_bool_fun_fun$ A_tree$) A_tree_bool_fun$)
(declare-fun fun_app$bm (A_a_tree_tree_fun_a_a_tree_tree_fun_fun$ A_a_tree_tree_fun$) A_a_tree_tree_fun$)
(declare-fun fun_app$bn (A_a_fun_a_a_tree_tree_fun_fun$ A_a_fun$) A_a_tree_tree_fun$)
(declare-fun fun_app$bo (A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ A_a_tree_tree_fun$) A_a_fun_a_a_tree_tree_fun_fun$)
(declare-fun fun_app$bp (A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$)
(declare-fun fun_app$bq (A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$)
(declare-fun fun_app$br (A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_tree_fun$) A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$bs (A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$bt (A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$ A_tree_a_tree_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun fun_app$bu (A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun$)
(declare-fun fun_app$bv (A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun$)
(declare-fun fun_app$bw (A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun$ A_tree_a_tree_tree_fun$) A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$bx (A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$by (A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_tree_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$bz (A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$)
(declare-fun fun_app$ca (A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$)
(declare-fun fun_app$cb (A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_fun$) A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$cc (A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$cd (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$ce (A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$)
(declare-fun fun_app$cf (A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun$)
(declare-fun fun_app$cg (A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ch (A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_tree_bool_fun$) A_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ci (A_tree_a_fun_a_tree_a_fun_fun$ A_tree_a_fun$) A_tree_a_fun$)
(declare-fun fun_app$cj (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree_bool_fun$)
(declare-fun fun_app$ck (A_a_a_fun_fun_a_a_a_fun_fun_tree_bool_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun_tree_bool_fun$)
(declare-fun fun_app$cl (A_a_fun_a_fun_a_a_fun_a_fun_tree_bool_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun_tree_bool_fun$)
(declare-fun fun_app$cm (Dir_list_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun$ Dir_list$) A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun fun_app$cn (Dir_list_a_a_fun_fun$ Dir_list$) A_a_fun$)
(declare-fun fun_app$co (A_a_fun_dir_a_a_fun_fun_fun$ A_a_fun$) Dir_a_a_fun_fun$)
(declare-fun map_tree$a (A_a_fun_a_fun$) A_a_fun_tree_a_tree_fun$)
(declare-fun map_tree$b (A_a_a_fun_fun$) A_tree_a_a_fun_tree_fun$)
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun map_tree$d (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun map_tree$e (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$f (A_a_a_fun_a_fun_fun$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun map_tree$g (A_a_a_a_fun_fun_fun$ A_tree$) A_a_a_fun_fun_tree$)
(declare-fun map_tree$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$i (A_a_fun_a_fun_a_a_fun_fun$ A_a_fun_a_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$j (A_a_bool_fun_fun$ A_tree$) A_bool_fun_tree$)
(declare-fun map_tree$k (A_bool_fun_a_fun$ A_bool_fun_tree$) A_tree$)
(declare-fun map_tree$l (A_bool_fun_a_bool_fun_fun$ A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun map_tree$m (A_bool_fun_a_a_fun_fun$ A_bool_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$n (A_a_fun_a_bool_fun_fun$ A_a_fun_tree$) A_bool_fun_tree$)
(declare-fun map_tree$o (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun map_tree$p (A_tree_a_tree_fun$) A_tree_tree_a_tree_tree_fun$)
(declare-fun map_tree$q (A_a_tree_fun$) A_tree_a_tree_tree_fun$)
(declare-fun map_tree$r (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun pred_tree$ (A_a_fun_bool_fun$ A_a_fun_tree$) Bool)
(declare-fun pure_tree$ (A_a_a_fun_fun_a_a_fun_fun$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun set_tree$a (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_set$)
(declare-fun set_tree$b (A_a_a_fun_fun_tree$) A_a_a_fun_fun_set$)
(declare-fun set_tree$c (A_a_fun_tree$) A_a_fun_set$)
(declare-fun set_tree$d (A_tree$) A_set$)
(declare-fun tree_chop$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun wit_tree$a (A$) A_tree$)
(declare-fun case_tree$a (A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$) A_a_fun_tree_a_a_fun_fun$)
(declare-fun case_tree$b (A_a_tree_a_tree_a_fun_fun_fun$) A_tree_a_fun$)
(declare-fun corec_tree$ (A_a_tree_fun$) A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun odd_mirror$ () A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun pred_tree$a (A_bool_fun$) A_tree_bool_fun$)
(declare-fun pure_tree$a (A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun pure_tree$b (A_bool_fun$) A_bool_fun_tree$)
(declare-fun pure_tree$c (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun pure_tree$d (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun pure_tree$e (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun pure_tree$f (A_a_fun$) A_a_fun_tree$)
(declare-fun pure_tree$g (A$) A_tree$)
(declare-fun pure_tree$h (Bool) Bool_tree$)
(declare-fun tree_chop$a (A_tree$) A_tree$)
(declare-fun corec_tree$a (A_tree_a_tree_fun$) A_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tree$b (A_a_fun$) A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tree$c (A_tree_a_fun$) A_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_bool_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_a_tree_a_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun even_mirror$ () A_tree_a_tree_fun$)
(declare-fun odd_mirror$a () A_tree_a_tree_fun$)
(declare-fun unfold_tree$ (A_a_fun$) A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$)
(declare-fun even_mirror$a () A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun traverse_dir$ (A_a_fun$) A_a_fun_dir_a_a_fun_fun_fun$)
(declare-fun tree_iterate$ (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_recurse$ (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun unfold_tree$a (A_a_fun_a_fun$ A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_tree_fun$)
(declare-fun unfold_tree$b (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_tree_fun$)
(declare-fun unfold_tree$c (A_a_a_fun_fun$ A_a_fun$ A_a_fun$) A_a_a_fun_tree_fun$)
(declare-fun traverse_tree$ (Dir_list$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_iterate$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_iterate$b (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_iterate$c (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_tree_fun$)
(declare-fun tree_iterate$d (A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun tree_iterate$e (A_tree_a_tree_fun$) A_tree_a_tree_fun_a_tree_a_tree_tree_fun_fun$)
(declare-fun tree_recurse$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_recurse$b (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_recurse$c (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_tree$)
(declare-fun tree_recurse$d (A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun traverse_tree$a (Dir_list$) A_tree_a_tree_fun$)
(declare-fun traverse_tree$b (Dir_list$ A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun traverse_tree$c (Dir_list$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun traverse_tree$d (Dir_list$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun traverse_tree$e (Dir_list$ A_bool_fun_tree$) A_bool_fun_tree$)
(declare-fun even_odd_mirror$ (Bool) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun even_odd_mirror$a (Bool) A_tree_a_tree_fun$)
(declare-fun even_odd_mirror$b (Bool A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun even_odd_mirror$c (Bool A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun even_odd_mirror$d (Bool A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(assert (forall ((?v0 A_tree$)) (! (= (fun_app$ uuc$ ?v0) (right$ ?v0)) :pattern ((fun_app$ uuc$ ?v0)))))
(assert (forall ((?v0 A_tree$)) (! (= (fun_app$ uub$ ?v0) (left$ ?v0)) :pattern ((fun_app$ uub$ ?v0)))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (! (= (fun_app$a (fun_app$b uud$ ?v0) ?v1) (fun_app$a (fun_app$c ?v0 ?v1) ?v1)) :pattern ((fun_app$a (fun_app$b uud$ ?v0) ?v1)))))
(assert (forall ((?v0 Dir$) (?v1 A_tree_a_tree_fun$)) (! (= (fun_app$d (fun_app$e uuo$ ?v0) ?v1) (fun_app$d (comp$ ?v1) (fun_app$f (fun_app$g (case_dir$ uub$) uuc$) ?v0))) :pattern ((fun_app$d (fun_app$e uuo$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_fun_set$) (?v1 A_a_fun$)) (! (= (fun_app$h (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$h (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$i (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$i (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (! (= (fun_app$j (uum$ ?v0) ?v1) (fun_app$j (fun_app$k comp$a ?v1) ?v0)) :pattern ((fun_app$j (uum$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$l (uul$ ?v0) ?v1) (fun_app$a ?v1 ?v0)) :pattern ((fun_app$l (uul$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$a (fun_app$c (uui$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$c ?v0 ?v2) ?v1)) :pattern ((fun_app$a (fun_app$c (uui$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_tree_a_tree_a_fun_fun_fun$) (?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (! (= (fun_app$m (fun_app$n (fun_app$o (fun_app$p (uuh$ ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$a ?v0 (fun_app$m (fun_app$n (fun_app$o ?v1 ?v2) ?v3) ?v4))) :pattern ((fun_app$m (fun_app$n (fun_app$o (fun_app$p (uuh$ ?v0) ?v1) ?v2) ?v3) ?v4)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (fun_app$q (fun_app$r (fun_app$s uuj$ ?v0) ?v1) ?v2) ?v0) :pattern ((fun_app$q (fun_app$r (fun_app$s uuj$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (fun_app$m (fun_app$n (fun_app$o uuk$ ?v0) ?v1) ?v2) ?v0) :pattern ((fun_app$m (fun_app$n (fun_app$o uuk$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (fun_app$ (fun_app$t (fun_app$u uue$ ?v0) ?v1) ?v2) ?v1) :pattern ((fun_app$ (fun_app$t (fun_app$u uue$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (fun_app$ (fun_app$t (fun_app$u uuf$ ?v0) ?v1) ?v2) ?v2) :pattern ((fun_app$ (fun_app$t (fun_app$u uuf$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$a (uun$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uun$ ?v0) ?v1)))))
(assert (forall ((?v0 A$)) (! (= (fun_app$a uug$ ?v0) ?v0) :pattern ((fun_app$a uug$ ?v0)))))
(assert (not (= (root$ (fun_app$ even_mirror$ t$)) (root$ t$))))
(assert (= even_mirror$a (even_odd_mirror$ true)))
(assert (= even_mirror$ (even_odd_mirror$a true)))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_a_fun_tree$)) (= (root$b (even_odd_mirror$b ?v0 ?v1)) (root$b ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (root$c (even_odd_mirror$c ?v0 ?v1)) (root$c ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A_a_a_fun_fun_tree$)) (= (root$d (even_odd_mirror$d ?v0 ?v1)) (root$d ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (root$e (fun_app$v (even_odd_mirror$ ?v0) ?v1)) (root$e ?v1)) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (root$ (fun_app$ (even_odd_mirror$a ?v0) ?v1)) (root$ ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (root$ (fun_app$w (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) ?v3)) (fun_app$a ?v0 ?v3)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (root$ (fun_app$z (unfold_tree$a ?v0 ?v1 ?v2) ?v3)) (fun_app$l ?v0 ?v3)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (root$e (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) ?v3)) (fun_app$j ?v0 ?v3)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (= (root$b (mirror$ ?v0)) (root$b ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (= (root$c (mirror$a ?v0)) (root$c ?v0)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$)) (= (root$d (mirror$b ?v0)) (root$d ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$e (mirror$c ?v0)) (root$e ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (root$ (mirror$d ?v0)) (root$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v2 A_a_fun_a_fun$)) (= (root$b (tree_iterate$ ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$)) (= (root$c (tree_iterate$a ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v2 A_a_a_fun_fun$)) (= (root$d (tree_iterate$b ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (root$e (fun_app$aa (tree_iterate$c ?v0 ?v1) ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (root$ (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v2 A_a_fun_a_fun$)) (= (root$b (tree_recurse$ ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$)) (= (root$c (tree_recurse$a ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v2 A_a_a_fun_fun$)) (= (root$d (tree_recurse$b ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (root$e (tree_recurse$c ?v0 ?v1 ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (root$ (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2)) ?v2) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (root$f (pure_tree$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (root$g (pure_tree$a ?v0)) ?v0) ))
(assert (forall ((?v0 A_bool_fun$)) (= (root$h (pure_tree$b ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_a_fun$)) (= (root$b (pure_tree$c ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (root$c (pure_tree$d ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_a_fun_fun$)) (= (root$d (pure_tree$e ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun$)) (= (root$e (pure_tree$f ?v0)) ?v0) ))
(assert (forall ((?v0 A$)) (= (root$ (pure_tree$g ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (fun_app$ (map_tree$ ?v0) ?v1)) (fun_app$a ?v0 (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (root$ (fun_app$ab (map_tree$a ?v0) ?v1)) (fun_app$l ?v0 (root$e ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (root$e (fun_app$ac (map_tree$b ?v0) ?v1)) (fun_app$c ?v0 (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (root$e (fun_app$v (map_tree$c ?v0) ?v1)) (fun_app$j ?v0 (root$e ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (root$ (map_tree$d ?v0 ?v1)) (fun_app$ad ?v0 (root$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (root$ (map_tree$e ?v0 ?v1)) (fun_app$ae ?v0 (root$d ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$f ?v0 ?v1)) (fun_app$af ?v0 (root$ ?v1))) ))
(assert (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (root$d (map_tree$g ?v0 ?v1)) (fun_app$ag ?v0 (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (root$ (map_tree$h ?v0 ?v1)) (fun_app$ah ?v0 (root$c ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (root$e (map_tree$i ?v0 ?v1)) (fun_app$ai ?v0 (root$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (! (= (root$b (node$b ?v0 ?v1 ?v2)) ?v0) :pattern ((node$b ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$)) (! (= (root$c (node$c ?v0 ?v1 ?v2)) ?v0) :pattern ((node$c ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (! (= (root$d (node$d ?v0 ?v1 ?v2)) ?v0) :pattern ((node$d ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (root$e (node$a ?v0 ?v1 ?v2)) ?v0) :pattern ((node$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (root$ (node$ ?v0 ?v1 ?v2)) ?v0) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (member$b (root$b ?v0) (set_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (member$c (root$c ?v0) (set_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$)) (member$d (root$d ?v0) (set_tree$b ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (member$ (root$e ?v0) (set_tree$c ?v0)) ))
(assert (forall ((?v0 A_tree$)) (member$a (root$ ?v0) (set_tree$d ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (member$b (root$b ?v0) (set_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (member$c (root$c ?v0) (set_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$)) (member$d (root$d ?v0) (set_tree$b ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (member$ (root$e ?v0) (set_tree$c ?v0)) ))
(assert (forall ((?v0 A_tree$)) (member$a (root$ ?v0) (set_tree$d ?v0)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ (map_tree$ ?v0) (pure_tree$g ?v1)) (pure_tree$g (fun_app$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (= (map_tree$j ?v0 (pure_tree$g ?v1)) (pure_tree$b (fun_app$aj ?v0 ?v1))) ))
(assert (forall ((?v0 A_bool_fun_a_fun$) (?v1 A_bool_fun$)) (= (map_tree$k ?v0 (pure_tree$b ?v1)) (pure_tree$g (fun_app$ak ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (fun_app$ac (map_tree$b ?v0) (pure_tree$g ?v1)) (pure_tree$f (fun_app$c ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (fun_app$ab (map_tree$a ?v0) (pure_tree$f ?v1)) (pure_tree$g (fun_app$l ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (map_tree$f ?v0 (pure_tree$g ?v1)) (pure_tree$c (fun_app$af ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (map_tree$d ?v0 (pure_tree$c ?v1)) (pure_tree$g (fun_app$ad ?v0 ?v1))) ))
(assert (forall ((?v0 A_bool_fun_a_bool_fun_fun$) (?v1 A_bool_fun$)) (= (map_tree$l ?v0 (pure_tree$b ?v1)) (pure_tree$b (fun_app$al ?v0 ?v1))) ))
(assert (forall ((?v0 A_bool_fun_a_a_fun_fun$) (?v1 A_bool_fun$)) (= (map_tree$m ?v0 (pure_tree$b ?v1)) (pure_tree$f (fun_app$am ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_bool_fun_fun$) (?v1 A_a_fun$)) (= (map_tree$n ?v0 (pure_tree$f ?v1)) (pure_tree$b (fun_app$an ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (fun_app$w (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) ?v3) (node$ (fun_app$a ?v0 ?v3) (fun_app$w (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$a ?v1 ?v3)) (fun_app$w (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$a ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (fun_app$z (unfold_tree$a ?v0 ?v1 ?v2) ?v3) (node$ (fun_app$l ?v0 ?v3) (fun_app$z (unfold_tree$a ?v0 ?v1 ?v2) (fun_app$j ?v1 ?v3)) (fun_app$z (unfold_tree$a ?v0 ?v1 ?v2) (fun_app$j ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) ?v3) (node$a (fun_app$j ?v0 ?v3) (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) (fun_app$j ?v1 ?v3)) (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) (fun_app$j ?v2 ?v3)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (fun_app$aa (tree_iterate$c ?v0 ?v1) ?v2) (node$a ?v2 (fun_app$aa (tree_iterate$c ?v0 ?v1) (fun_app$j ?v0 ?v2)) (fun_app$aa (tree_iterate$c ?v0 ?v1) (fun_app$j ?v1 ?v2)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) ?v2) (node$ ?v2 (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) (fun_app$a ?v0 ?v2)) (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) (fun_app$a ?v1 ?v2)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (! (= (tree_recurse$c ?v0 ?v1 ?v2) (node$a ?v2 (fun_app$v (map_tree$c ?v0) (tree_recurse$c ?v0 ?v1 ?v2)) (fun_app$v (map_tree$c ?v1) (tree_recurse$c ?v0 ?v1 ?v2)))) :pattern ((tree_recurse$c ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2) (node$ ?v2 (fun_app$ (map_tree$ ?v0) (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2)) (fun_app$ (map_tree$ ?v1) (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2)))) :pattern ((fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (fun_app$v (map_tree$c ?v0) (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$j ?v0 ?v1) (fun_app$v (map_tree$c ?v0) ?v2) (fun_app$v (map_tree$c ?v0) ?v3))) :pattern ((fun_app$v (map_tree$c ?v0) (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$ac (map_tree$b ?v0) (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$c ?v0 ?v1) (fun_app$ac (map_tree$b ?v0) ?v2) (fun_app$ac (map_tree$b ?v0) ?v3))) :pattern ((fun_app$ac (map_tree$b ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (fun_app$ab (map_tree$a ?v0) (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$l ?v0 ?v1) (fun_app$ab (map_tree$a ?v0) ?v2) (fun_app$ab (map_tree$a ?v0) ?v3))) :pattern ((fun_app$ab (map_tree$a ?v0) (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$ (map_tree$ ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$a ?v0 ?v1) (fun_app$ (map_tree$ ?v0) ?v2) (fun_app$ (map_tree$ ?v0) ?v3))) :pattern ((fun_app$ (map_tree$ ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (= (mirror$c (node$a ?v0 ?v1 ?v2)) (node$a ?v0 (mirror$c ?v2) (mirror$c ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (= (mirror$d (node$ ?v0 ?v1 ?v2)) (node$ ?v0 (mirror$d ?v2) (mirror$d ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (! (= (pure_tree$ ?v0) (node$e ?v0 (pure_tree$ ?v0) (pure_tree$ ?v0))) :pattern ((pure_tree$ ?v0)))))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (! (= (pure_tree$a ?v0) (node$f ?v0 (pure_tree$a ?v0) (pure_tree$a ?v0))) :pattern ((pure_tree$a ?v0)))))
(assert (forall ((?v0 A_a_fun_a_fun$)) (! (= (pure_tree$c ?v0) (node$b ?v0 (pure_tree$c ?v0) (pure_tree$c ?v0))) :pattern ((pure_tree$c ?v0)))))
(assert (forall ((?v0 A_bool_fun$)) (! (= (pure_tree$b ?v0) (node$g ?v0 (pure_tree$b ?v0) (pure_tree$b ?v0))) :pattern ((pure_tree$b ?v0)))))
(assert (forall ((?v0 A_a_fun$)) (! (= (pure_tree$f ?v0) (node$a ?v0 (pure_tree$f ?v0) (pure_tree$f ?v0))) :pattern ((pure_tree$f ?v0)))))
(assert (forall ((?v0 A$)) (! (= (pure_tree$g ?v0) (node$ ?v0 (pure_tree$g ?v0) (pure_tree$g ?v0))) :pattern ((pure_tree$g ?v0)))))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (mirror$e (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (mirror$f (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun$)) (= (mirror$ (pure_tree$c ?v0)) (pure_tree$c ?v0)) ))
(assert (forall ((?v0 A_bool_fun$)) (= (mirror$g (pure_tree$b ?v0)) (pure_tree$b ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (mirror$c (pure_tree$f ?v0)) (pure_tree$f ?v0)) ))
(assert (forall ((?v0 A$)) (= (mirror$d (pure_tree$g ?v0)) (pure_tree$g ?v0)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_a_a_fun_fun$) (?v3 A_a_a_fun_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$a ?v4 (set_tree$d ?v0)) (and (member$a ?v5 (set_tree$d ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$ac (map_tree$b ?v2) ?v0) (fun_app$ac (map_tree$b ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun_a_a_fun_fun$)) (=> (and (forall ((?v4 A_a_fun$) (?v5 A_a_fun$)) (=> (and (member$ ?v4 (set_tree$c ?v0)) (and (member$ ?v5 (set_tree$c ?v1)) (= (fun_app$j ?v2 ?v4) (fun_app$j ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$v (map_tree$c ?v2) ?v0) (fun_app$v (map_tree$c ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_fun$) (?v3 A_a_fun_a_fun$)) (=> (and (forall ((?v4 A_a_fun$) (?v5 A_a_fun$)) (=> (and (member$ ?v4 (set_tree$c ?v0)) (and (member$ ?v5 (set_tree$c ?v1)) (= (fun_app$l ?v2 ?v4) (fun_app$l ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$ab (map_tree$a ?v2) ?v0) (fun_app$ab (map_tree$a ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$a ?v4 (set_tree$d ?v0)) (and (member$a ?v5 (set_tree$d ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_a_a_fun_fun$) (?v2 A_a_a_fun_fun$)) (=> (forall ((?v3 A$)) (=> (member$a ?v3 (set_tree$d ?v0)) (= (fun_app$c ?v1 ?v3) (fun_app$c ?v2 ?v3))) ) (= (fun_app$ac (map_tree$b ?v1) ?v0) (fun_app$ac (map_tree$b ?v2) ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$)) (=> (forall ((?v3 A_a_fun$)) (=> (member$ ?v3 (set_tree$c ?v0)) (= (fun_app$j ?v1 ?v3) (fun_app$j ?v2 ?v3))) ) (= (fun_app$v (map_tree$c ?v1) ?v0) (fun_app$v (map_tree$c ?v2) ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_a_fun$) (?v2 A_a_fun_a_fun$)) (=> (forall ((?v3 A_a_fun$)) (=> (member$ ?v3 (set_tree$c ?v0)) (= (fun_app$l ?v1 ?v3) (fun_app$l ?v2 ?v3))) ) (= (fun_app$ab (map_tree$a ?v1) ?v0) (fun_app$ab (map_tree$a ?v2) ?v0))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$a ?v3 (set_tree$d ?v0)) (= (fun_app$a ?v1 ?v3) (fun_app$a ?v2 ?v3))) ) (= (fun_app$ (map_tree$ ?v1) ?v0) (fun_app$ (map_tree$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (=> (forall ((?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (=> (= ?v0 (node$a ?v1 ?v2 ?v3)) false) ) false) ))
(assert (forall ((?v0 A_tree$)) (=> (forall ((?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false) ) false) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun_a_a_fun_fun$)) (=> (= ?v0 (node$a ?v1 (fun_app$v (map_tree$c ?v2) ?v0) (fun_app$v (map_tree$c ?v3) ?v0))) (= ?v0 (tree_recurse$c ?v2 ?v3 ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (= ?v0 (node$ ?v1 (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v0))) (= ?v0 (fun_app$w (fun_app$x (tree_recurse$d ?v2) ?v3) ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_a_a_fun_fun$) (?v3 A_a_a_fun_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 (set_tree$d ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))) )) (= (fun_app$ac (map_tree$b ?v2) ?v0) (fun_app$ac (map_tree$b ?v3) ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun_a_a_fun_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_a_fun$)) (=> (member$ ?v4 (set_tree$c ?v1)) (= (fun_app$j ?v2 ?v4) (fun_app$j ?v3 ?v4))) )) (= (fun_app$v (map_tree$c ?v2) ?v0) (fun_app$v (map_tree$c ?v3) ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_fun$) (?v3 A_a_fun_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_a_fun$)) (=> (member$ ?v4 (set_tree$c ?v1)) (= (fun_app$l ?v2 ?v4) (fun_app$l ?v3 ?v4))) )) (= (fun_app$ab (map_tree$a ?v2) ?v0) (fun_app$ab (map_tree$a ?v3) ?v1))) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 (set_tree$d ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))) )) (= (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_tree_bool_fun_fun$)) (=> (and (member$ ?v0 (set_tree$c ?v1)) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (fun_app$ao (fun_app$ap ?v2 ?v3) (node$a ?v3 ?v4 ?v5)) ) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$) (?v6 A_a_fun$)) (=> (and (member$ ?v6 (set_tree$c ?v4)) (fun_app$ao (fun_app$ap ?v2 ?v6) ?v4)) (fun_app$ao (fun_app$ap ?v2 ?v6) (node$a ?v3 ?v4 ?v5))) ) (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$) (?v6 A_a_fun$)) (=> (and (member$ ?v6 (set_tree$c ?v5)) (fun_app$ao (fun_app$ap ?v2 ?v6) ?v5)) (fun_app$ao (fun_app$ap ?v2 ?v6) (node$a ?v3 ?v4 ?v5))) )))) (fun_app$ao (fun_app$ap ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_a_tree_bool_fun_fun$)) (=> (and (member$a ?v0 (set_tree$d ?v1)) (and (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (fun_app$aq (fun_app$ar ?v2 ?v3) (node$ ?v3 ?v4 ?v5)) ) (and (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$) (?v6 A$)) (=> (and (member$a ?v6 (set_tree$d ?v4)) (fun_app$aq (fun_app$ar ?v2 ?v6) ?v4)) (fun_app$aq (fun_app$ar ?v2 ?v6) (node$ ?v3 ?v4 ?v5))) ) (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$) (?v6 A$)) (=> (and (member$a ?v6 (set_tree$d ?v5)) (fun_app$aq (fun_app$ar ?v2 ?v6) ?v5)) (fun_app$aq (fun_app$ar ?v2 ?v6) (node$ ?v3 ?v4 ?v5))) )))) (fun_app$aq (fun_app$ar ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (and (member$ ?v0 (set_tree$c ?v1)) (and (forall ((?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (=> (= ?v1 (node$a ?v0 ?v2 ?v3)) false) ) (and (forall ((?v2 A_a_fun$) (?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$c ?v3))) false) ) (forall ((?v2 A_a_fun$) (?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$c ?v4))) false) )))) false) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (and (member$a ?v0 (set_tree$d ?v1)) (and (forall ((?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v1 (node$ ?v0 ?v2 ?v3)) false) ) (and (forall ((?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$d ?v3))) false) ) (forall ((?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$d ?v4))) false) )))) false) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun$) (?v3 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c ?v1)) (member$ ?v0 (set_tree$c (node$a ?v2 ?v1 ?v3)))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$a ?v0 (set_tree$d ?v1)) (member$a ?v0 (set_tree$d (node$ ?v2 ?v1 ?v3)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun$) (?v3 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c ?v1)) (member$ ?v0 (set_tree$c (node$a ?v2 ?v3 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$a ?v0 (set_tree$d ?v1)) (member$a ?v0 (set_tree$d (node$ ?v2 ?v3 ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (member$ ?v0 (set_tree$c (node$a ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (member$a ?v0 (set_tree$d (node$ ?v0 ?v1 ?v2))) ))
(assert (= odd_mirror$ (even_odd_mirror$ false)))
(assert (= odd_mirror$a (even_odd_mirror$a false)))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (=> (member$ ?v0 (set_tree$c (wit_tree$ ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (=> (member$a ?v0 (set_tree$d (wit_tree$a ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3)) (and (fun_app$h ?v0 ?v1) (and (pred_tree$ ?v0 ?v2) (pred_tree$ ?v0 ?v3)))) :pattern ((pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$aq (pred_tree$a ?v0) (node$ ?v1 ?v2 ?v3)) (and (fun_app$i ?v0 ?v1) (and (fun_app$aq (pred_tree$a ?v0) ?v2) (fun_app$aq (pred_tree$a ?v0) ?v3)))) :pattern ((fun_app$aq (pred_tree$a ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun_a_a_fun_fun$)) (= (= (pure_tree$ ?v0) (pure_tree$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (= (pure_tree$a ?v0) (pure_tree$a ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (= (pure_tree$c ?v0) (pure_tree$c ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (= (pure_tree$b ?v0) (pure_tree$b ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (pure_tree$f ?v0) (pure_tree$f ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A$)) (= (= (pure_tree$g ?v0) (pure_tree$g ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$)) (! (= (unfold_tree$b ?v0 ?v1 ?v2) (comp$b (map_tree$c ?v0) (tree_iterate$c ?v1 ?v2))) :pattern ((unfold_tree$b ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (! (= (unfold_tree$c ?v0 ?v1 ?v2) (comp$c (map_tree$b ?v0) (fun_app$x (tree_iterate$d ?v1) ?v2))) :pattern ((unfold_tree$c ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$)) (! (= (unfold_tree$a ?v0 ?v1 ?v2) (comp$d (map_tree$a ?v0) (tree_iterate$c ?v1 ?v2))) :pattern ((unfold_tree$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (! (= (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$as (comp$e (map_tree$ ?v0)) (fun_app$x (tree_iterate$d ?v1) ?v2))) :pattern ((fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2)))))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_tree$)) (= (traverse_tree$ ?v0 (fun_app$v (map_tree$c ?v1) ?v2)) (fun_app$v (map_tree$c ?v1) (traverse_tree$ ?v0 ?v2))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_a_fun_fun$) (?v2 A_tree$)) (= (traverse_tree$ ?v0 (fun_app$ac (map_tree$b ?v1) ?v2)) (fun_app$ac (map_tree$b ?v1) (fun_app$ (traverse_tree$a ?v0) ?v2))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_a_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$ (traverse_tree$a ?v0) (fun_app$ab (map_tree$a ?v1) ?v2)) (fun_app$ab (map_tree$a ?v1) (traverse_tree$ ?v0 ?v2))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun$) (?v2 A_tree$)) (= (fun_app$ (traverse_tree$a ?v0) (fun_app$ (map_tree$ ?v1) ?v2)) (fun_app$ (map_tree$ ?v1) (fun_app$ (traverse_tree$a ?v0) ?v2))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_a_fun_fun_a_a_fun_fun$)) (= (traverse_tree$b ?v0 (pure_tree$ ?v1)) (pure_tree$ ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (traverse_tree$c ?v0 (pure_tree$a ?v1)) (pure_tree$a ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_a_fun$)) (= (traverse_tree$d ?v0 (pure_tree$c ?v1)) (pure_tree$c ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_bool_fun$)) (= (traverse_tree$e ?v0 (pure_tree$b ?v1)) (pure_tree$b ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun$)) (= (traverse_tree$ ?v0 (pure_tree$f ?v1)) (pure_tree$f ?v1)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A$)) (= (fun_app$ (traverse_tree$a ?v0) (pure_tree$g ?v1)) (pure_tree$g ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v2 A_a_fun_a_fun$)) (= (right$b (tree_recurse$ ?v0 ?v1 ?v2)) (map_tree$o ?v1 (tree_recurse$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (right$c (tree_recurse$c ?v0 ?v1 ?v2)) (fun_app$v (map_tree$c ?v1) (tree_recurse$c ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (right$ (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2)) (fun_app$ (map_tree$ ?v1) (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v2 A_a_fun_a_fun$)) (= (left$b (tree_recurse$ ?v0 ?v1 ?v2)) (map_tree$o ?v0 (tree_recurse$ ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (left$c (tree_recurse$c ?v0 ?v1 ?v2)) (fun_app$v (map_tree$c ?v0) (tree_recurse$c ?v0 ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (left$ (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2)) (fun_app$ (map_tree$ ?v0) (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_tree_a_tree_a_tree_fun_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$ (case_tree$ ?v0) (node$ ?v1 ?v2 ?v3)) (fun_app$ (fun_app$t (fun_app$u ?v0 ?v1) ?v2) ?v3)) :pattern ((fun_app$ (case_tree$ ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (! (= (fun_app$q (case_tree$a ?v0) (node$a ?v1 ?v2 ?v3)) (fun_app$q (fun_app$r (fun_app$s ?v0 ?v1) ?v2) ?v3)) :pattern ((fun_app$q (case_tree$a ?v0) (node$a ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_a_tree_a_tree_a_fun_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (fun_app$m (case_tree$b ?v0) (node$ ?v1 ?v2 ?v3)) (fun_app$m (fun_app$n (fun_app$o ?v0 ?v1) ?v2) ?v3)) :pattern ((fun_app$m (case_tree$b ?v0) (node$ ?v1 ?v2 ?v3))))))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v0)) (= (fun_app$d (comp$ ?v0) ?v3) (fun_app$d (comp$ ?v4) ?v0))) (= (fun_app$at (map_tree$p ?v0) (fun_app$au (fun_app$av (tree_iterate$e ?v1) ?v3) ?v5)) (fun_app$au (fun_app$av (tree_iterate$e ?v2) ?v4) (fun_app$ ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_tree_fun$) (?v1 A_a_fun$) (?v2 A_tree_a_tree_fun$) (?v3 A_a_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A$)) (=> (and (= (fun_app$x (comp$f ?v0) ?v1) (fun_app$as (comp$e ?v2) ?v0)) (= (fun_app$x (comp$f ?v0) ?v3) (fun_app$as (comp$e ?v4) ?v0))) (= (fun_app$au (map_tree$q ?v0) (fun_app$w (fun_app$x (tree_iterate$d ?v1) ?v3) ?v5)) (fun_app$au (fun_app$av (tree_iterate$e ?v2) ?v4) (fun_app$w ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun_a_a_fun_fun$) (?v4 A_a_fun_a_a_fun_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$aw (comp$g ?v0) ?v1) (fun_app$aw (comp$g ?v2) ?v0)) (= (fun_app$aw (comp$g ?v0) ?v3) (fun_app$aw (comp$g ?v4) ?v0))) (= (fun_app$v (map_tree$c ?v0) (fun_app$aa (tree_iterate$c ?v1 ?v3) ?v5)) (fun_app$aa (tree_iterate$c ?v2 ?v4) (fun_app$j ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$) (?v4 A_a_fun_a_a_fun_fun$) (?v5 A$)) (=> (and (= (fun_app$ax (comp$h ?v0) ?v1) (fun_app$ay (comp$i ?v2) ?v0)) (= (fun_app$ax (comp$h ?v0) ?v3) (fun_app$ay (comp$i ?v4) ?v0))) (= (fun_app$ac (map_tree$b ?v0) (fun_app$w (fun_app$x (tree_iterate$d ?v1) ?v3) ?v5)) (fun_app$aa (tree_iterate$c ?v2 ?v4) (fun_app$c ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$) (?v3 A_a_fun_a_a_fun_fun$) (?v4 A_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$az (comp$j ?v0) ?v1) (fun_app$ba (comp$k ?v2) ?v0)) (= (fun_app$az (comp$j ?v0) ?v3) (fun_app$ba (comp$k ?v4) ?v0))) (= (fun_app$ab (map_tree$a ?v0) (fun_app$aa (tree_iterate$c ?v1 ?v3) ?v5)) (fun_app$w (fun_app$x (tree_iterate$d ?v2) ?v4) (fun_app$l ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A$)) (=> (and (= (fun_app$j (fun_app$k comp$a ?v0) ?v1) (fun_app$j (fun_app$k comp$a ?v2) ?v0)) (= (fun_app$j (fun_app$k comp$a ?v0) ?v3) (fun_app$j (fun_app$k comp$a ?v4) ?v0))) (= (fun_app$ (map_tree$ ?v0) (fun_app$w (fun_app$x (tree_iterate$d ?v1) ?v3) ?v5)) (fun_app$w (fun_app$x (tree_iterate$d ?v2) ?v4) (fun_app$a ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (left$ (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (left$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (left$c (map_tree$i ?v0 ?v1)) (map_tree$i ?v0 (left$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (left$b (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (left$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (left$b (map_tree$r ?v0 ?v1)) (map_tree$r ?v0 (left$c ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (left$b (map_tree$o ?v0 ?v1)) (map_tree$o ?v0 (left$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (left$c (fun_app$v (map_tree$c ?v0) ?v1)) (fun_app$v (map_tree$c ?v0) (left$c ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (left$c (fun_app$ac (map_tree$b ?v0) ?v1)) (fun_app$ac (map_tree$b ?v0) (left$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (left$ (fun_app$ab (map_tree$a ?v0) ?v1)) (fun_app$ab (map_tree$a ?v0) (left$c ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (left$ (fun_app$ (map_tree$ ?v0) ?v1)) (fun_app$ (map_tree$ ?v0) (left$ ?v1))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$i ?v0 ?v2) (fun_app$i ?v1 ?v2)) ) (= (collect$ ?v0) (collect$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_set$)) (= (collect$a (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_set$)) (= (collect$ (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$h ?v1 ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$i ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (right$ (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (right$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (right$c (map_tree$i ?v0 ?v1)) (map_tree$i ?v0 (right$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (right$b (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$b (map_tree$r ?v0 ?v1)) (map_tree$r ?v0 (right$c ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (right$b (map_tree$o ?v0 ?v1)) (map_tree$o ?v0 (right$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$c (fun_app$v (map_tree$c ?v0) ?v1)) (fun_app$v (map_tree$c ?v0) (right$c ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (right$c (fun_app$ac (map_tree$b ?v0) ?v1)) (fun_app$ac (map_tree$b ?v0) (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (right$ (fun_app$ab (map_tree$a ?v0) ?v1)) (fun_app$ab (map_tree$a ?v0) (right$c ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (right$ (fun_app$ (map_tree$ ?v0) ?v1)) (fun_app$ (map_tree$ ?v0) (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (= (node$c (root$c ?v0) (left$d ?v0) (right$d ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$)) (= (node$d (root$d ?v0) (left$e ?v0) (right$e ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (= (node$b (root$b ?v0) (left$b ?v0) (right$b ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (node$a (root$e ?v0) (left$c ?v0) (right$c ?v0)) ?v0) ))
(assert (forall ((?v0 A_tree$)) (= (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_a_tree_a_tree_a_tree_fun_fun_fun$) (?v1 A_tree$)) (! (= (fun_app$ (case_tree$ ?v0) ?v1) (fun_app$ (fun_app$t (fun_app$u ?v0 (root$ ?v1)) (left$ ?v1)) (right$ ?v1))) :pattern ((fun_app$ (case_tree$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$) (?v1 A_a_fun_tree$)) (! (= (fun_app$q (case_tree$a ?v0) ?v1) (fun_app$q (fun_app$r (fun_app$s ?v0 (root$e ?v1)) (left$c ?v1)) (right$c ?v1))) :pattern ((fun_app$q (case_tree$a ?v0) ?v1)))))
(assert (forall ((?v0 A_a_tree_a_tree_a_fun_fun_fun$) (?v1 A_tree$)) (! (= (fun_app$m (case_tree$b ?v0) ?v1) (fun_app$m (fun_app$n (fun_app$o ?v0 (root$ ?v1)) (left$ ?v1)) (right$ ?v1))) :pattern ((fun_app$m (case_tree$b ?v0) ?v1)))))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$)) (= (map_tree$q (fun_app$as (comp$e ?v0) ?v1)) (fun_app$bb (comp$l (map_tree$p ?v0)) (map_tree$q ?v1))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$)) (= (map_tree$p (fun_app$d (comp$ ?v0) ?v1)) (comp$m (map_tree$p ?v0) (map_tree$p ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_a_fun_fun$)) (= (map_tree$ (fun_app$b (comp$n ?v0) ?v1)) (fun_app$bc (comp$o (map_tree$a ?v0)) (map_tree$b ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (map_tree$c (fun_app$aw (comp$g ?v0) ?v1)) (comp$p (map_tree$c ?v0) (map_tree$c ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_fun_a_fun$)) (= (map_tree$c (fun_app$bd (comp$q ?v0) ?v1)) (comp$r (map_tree$b ?v0) (map_tree$a ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (map_tree$b (fun_app$ay (comp$i ?v0) ?v1)) (comp$s (map_tree$c ?v0) (map_tree$b ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_fun$)) (= (map_tree$b (fun_app$ax (comp$h ?v0) ?v1)) (comp$t (map_tree$b ?v0) (map_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_fun$)) (= (map_tree$a (fun_app$ba (comp$k ?v0) ?v1)) (comp$u (map_tree$ ?v0) (map_tree$a ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (map_tree$a (fun_app$az (comp$j ?v0) ?v1)) (comp$v (map_tree$a ?v0) (map_tree$c ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (map_tree$ (fun_app$j (fun_app$k comp$a ?v0) ?v1)) (fun_app$d (comp$ (map_tree$ ?v0)) (map_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$)) (=> (and (fun_app$be (fun_app$bf ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_a_a_fun_fun_tree$) (?v4 A_a_fun_a_a_fun_fun_tree$)) (=> (fun_app$be (fun_app$bf ?v0 ?v3) ?v4) (and (= (root$c ?v3) (root$c ?v4)) (and (fun_app$be (fun_app$bf ?v0 (left$d ?v3)) (left$d ?v4)) (fun_app$be (fun_app$bf ?v0 (right$d ?v3)) (right$d ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_bool_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (=> (and (fun_app$bg (fun_app$bh ?v0 ?v1) ?v2) (forall ((?v3 A_a_a_fun_fun_tree$) (?v4 A_a_a_fun_fun_tree$)) (=> (fun_app$bg (fun_app$bh ?v0 ?v3) ?v4) (and (= (root$d ?v3) (root$d ?v4)) (and (fun_app$bg (fun_app$bh ?v0 (left$e ?v3)) (left$e ?v4)) (fun_app$bg (fun_app$bh ?v0 (right$e ?v3)) (right$e ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_bool_fun_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (=> (and (fun_app$bi (fun_app$bj ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_a_fun_tree$) (?v4 A_a_fun_a_fun_tree$)) (=> (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4) (and (= (root$b ?v3) (root$b ?v4)) (and (fun_app$bi (fun_app$bj ?v0 (left$b ?v3)) (left$b ?v4)) (fun_app$bi (fun_app$bj ?v0 (right$b ?v3)) (right$b ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_tree_a_a_fun_tree_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (=> (and (fun_app$ao (fun_app$bk ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (fun_app$ao (fun_app$bk ?v0 ?v3) ?v4) (and (= (root$e ?v3) (root$e ?v4)) (and (fun_app$ao (fun_app$bk ?v0 (left$c ?v3)) (left$c ?v4)) (fun_app$ao (fun_app$bk ?v0 (right$c ?v3)) (right$c ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (and (fun_app$aq (fun_app$bl ?v0 ?v1) ?v2) (forall ((?v3 A_tree$) (?v4 A_tree$)) (=> (fun_app$aq (fun_app$bl ?v0 ?v3) ?v4) (and (= (root$ ?v3) (root$ ?v4)) (and (fun_app$aq (fun_app$bl ?v0 (left$ ?v3)) (left$ ?v4)) (fun_app$aq (fun_app$bl ?v0 (right$ ?v3)) (right$ ?v4))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$)) (=> (and (fun_app$be (fun_app$bf ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_a_a_fun_fun_tree$) (?v4 A_a_fun_a_a_fun_fun_tree$)) (=> (fun_app$be (fun_app$bf ?v0 ?v3) ?v4) (and (= (root$c ?v3) (root$c ?v4)) (and (or (fun_app$be (fun_app$bf ?v0 (left$d ?v3)) (left$d ?v4)) (= (left$d ?v3) (left$d ?v4))) (or (fun_app$be (fun_app$bf ?v0 (right$d ?v3)) (right$d ?v4)) (= (right$d ?v3) (right$d ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_bool_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (=> (and (fun_app$bg (fun_app$bh ?v0 ?v1) ?v2) (forall ((?v3 A_a_a_fun_fun_tree$) (?v4 A_a_a_fun_fun_tree$)) (=> (fun_app$bg (fun_app$bh ?v0 ?v3) ?v4) (and (= (root$d ?v3) (root$d ?v4)) (and (or (fun_app$bg (fun_app$bh ?v0 (left$e ?v3)) (left$e ?v4)) (= (left$e ?v3) (left$e ?v4))) (or (fun_app$bg (fun_app$bh ?v0 (right$e ?v3)) (right$e ?v4)) (= (right$e ?v3) (right$e ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_bool_fun_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (=> (and (fun_app$bi (fun_app$bj ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_a_fun_tree$) (?v4 A_a_fun_a_fun_tree$)) (=> (fun_app$bi (fun_app$bj ?v0 ?v3) ?v4) (and (= (root$b ?v3) (root$b ?v4)) (and (or (fun_app$bi (fun_app$bj ?v0 (left$b ?v3)) (left$b ?v4)) (= (left$b ?v3) (left$b ?v4))) (or (fun_app$bi (fun_app$bj ?v0 (right$b ?v3)) (right$b ?v4)) (= (right$b ?v3) (right$b ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_tree_a_a_fun_tree_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (=> (and (fun_app$ao (fun_app$bk ?v0 ?v1) ?v2) (forall ((?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (fun_app$ao (fun_app$bk ?v0 ?v3) ?v4) (and (= (root$e ?v3) (root$e ?v4)) (and (or (fun_app$ao (fun_app$bk ?v0 (left$c ?v3)) (left$c ?v4)) (= (left$c ?v3) (left$c ?v4))) (or (fun_app$ao (fun_app$bk ?v0 (right$c ?v3)) (right$c ?v4)) (= (right$c ?v3) (right$c ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (and (fun_app$aq (fun_app$bl ?v0 ?v1) ?v2) (forall ((?v3 A_tree$) (?v4 A_tree$)) (=> (fun_app$aq (fun_app$bl ?v0 ?v3) ?v4) (and (= (root$ ?v3) (root$ ?v4)) (and (or (fun_app$aq (fun_app$bl ?v0 (left$ ?v3)) (left$ ?v4)) (= (left$ ?v3) (left$ ?v4))) (or (fun_app$aq (fun_app$bl ?v0 (right$ ?v3)) (right$ ?v4)) (= (right$ ?v3) (right$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (=> (and (= (root$c ?v0) (root$c ?v1)) (and (= (left$d ?v0) (left$d ?v1)) (= (right$d ?v0) (right$d ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (and (= (root$d ?v0) (root$d ?v1)) (and (= (left$e ?v0) (left$e ?v1)) (= (right$e ?v0) (right$e ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_a_fun_tree$)) (=> (and (= (root$b ?v0) (root$b ?v1)) (and (= (left$b ?v0) (left$b ?v1)) (= (right$b ?v0) (right$b ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (and (= (root$e ?v0) (root$e ?v1)) (and (= (left$c ?v0) (left$c ?v1)) (= (right$c ?v0) (right$c ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (and (= (left$ ?v0) (left$ ?v1)) (= (right$ ?v0) (right$ ?v1)))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (left$c (mirror$c ?v0)) (mirror$c (right$c ?v0))) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (= (left$b (mirror$ ?v0)) (mirror$ (right$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (left$ (mirror$d ?v0)) (mirror$d (right$ ?v0))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (right$c (mirror$c ?v0)) (mirror$c (left$c ?v0))) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (= (right$b (mirror$ ?v0)) (mirror$ (left$b ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (right$ (mirror$d ?v0)) (mirror$d (left$ ?v0))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_a_fun_tree$)) (= (right$b (even_odd_mirror$b ?v0 ?v1)) (even_odd_mirror$b (ite (not ?v0) true false) (ite ?v0 (left$b ?v1) (right$b ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (right$c (fun_app$v (even_odd_mirror$ ?v0) ?v1)) (fun_app$v (even_odd_mirror$ (ite (not ?v0) true false)) (ite ?v0 (left$c ?v1) (right$c ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (right$ (fun_app$ (even_odd_mirror$a ?v0) ?v1)) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (left$ ?v1) (right$ ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_a_fun_tree$)) (= (left$b (even_odd_mirror$b ?v0 ?v1)) (even_odd_mirror$b (ite (not ?v0) true false) (ite ?v0 (right$b ?v1) (left$b ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (left$c (fun_app$v (even_odd_mirror$ ?v0) ?v1)) (fun_app$v (even_odd_mirror$ (ite (not ?v0) true false)) (ite ?v0 (right$c ?v1) (left$c ?v1)))) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (left$ (fun_app$ (even_odd_mirror$a ?v0) ?v1)) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (right$ ?v1) (left$ ?v1)))) ))
(assert (forall ((?v0 A_tree_bool_fun$) (?v1 A_a_tree_a_tree_a_tree_fun_fun_fun$) (?v2 A_tree$)) (= (fun_app$aq ?v0 (fun_app$ (case_tree$ ?v1) ?v2)) (=> (= ?v2 (node$ (root$ ?v2) (left$ ?v2) (right$ ?v2))) (fun_app$aq ?v0 (fun_app$ (fun_app$t (fun_app$u ?v1 (root$ ?v2)) (left$ ?v2)) (right$ ?v2))))) ))
(assert (forall ((?v0 A_a_fun_bool_fun$) (?v1 A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$h ?v0 (fun_app$q (case_tree$a ?v1) ?v2)) (=> (= ?v2 (node$a (root$e ?v2) (left$c ?v2) (right$c ?v2))) (fun_app$h ?v0 (fun_app$q (fun_app$r (fun_app$s ?v1 (root$e ?v2)) (left$c ?v2)) (right$c ?v2))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_tree_a_tree_a_fun_fun_fun$) (?v2 A_tree$)) (= (fun_app$i ?v0 (fun_app$m (case_tree$b ?v1) ?v2)) (=> (= ?v2 (node$ (root$ ?v2) (left$ ?v2) (right$ ?v2))) (fun_app$i ?v0 (fun_app$m (fun_app$n (fun_app$o ?v1 (root$ ?v2)) (left$ ?v2)) (right$ ?v2))))) ))
(assert (forall ((?v0 A_tree_bool_fun$) (?v1 A_a_tree_a_tree_a_tree_fun_fun_fun$) (?v2 A_tree$)) (= (fun_app$aq ?v0 (fun_app$ (case_tree$ ?v1) ?v2)) (not (and (= ?v2 (node$ (root$ ?v2) (left$ ?v2) (right$ ?v2))) (not (fun_app$aq ?v0 (fun_app$ (fun_app$t (fun_app$u ?v1 (root$ ?v2)) (left$ ?v2)) (right$ ?v2))))))) ))
(assert (forall ((?v0 A_a_fun_bool_fun$) (?v1 A_a_fun_a_a_fun_tree_a_a_fun_tree_a_a_fun_fun_fun_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$h ?v0 (fun_app$q (case_tree$a ?v1) ?v2)) (not (and (= ?v2 (node$a (root$e ?v2) (left$c ?v2) (right$c ?v2))) (not (fun_app$h ?v0 (fun_app$q (fun_app$r (fun_app$s ?v1 (root$e ?v2)) (left$c ?v2)) (right$c ?v2))))))) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A_a_tree_a_tree_a_fun_fun_fun$) (?v2 A_tree$)) (= (fun_app$i ?v0 (fun_app$m (case_tree$b ?v1) ?v2)) (not (and (= ?v2 (node$ (root$ ?v2) (left$ ?v2) (right$ ?v2))) (not (fun_app$i ?v0 (fun_app$m (fun_app$n (fun_app$o ?v1 (root$ ?v2)) (left$ ?v2)) (right$ ?v2))))))) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_bool_fun$) (?v3 A_a_tree_tree_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$) (?v6 A_a_tree_tree_fun$) (?v7 A_a_fun$)) (= (fun_app$bm (comp$w (map_tree$p ?v0)) (fun_app$bn (fun_app$bo (fun_app$bp (fun_app$bq (fun_app$br (fun_app$bs (corec_tree$ ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$bn (fun_app$bo (fun_app$bp (fun_app$bq (fun_app$br (fun_app$bs (corec_tree$ (fun_app$as (comp$e ?v0) ?v1)) ?v2) (fun_app$bm (comp$w (map_tree$p ?v0)) ?v3)) ?v4) ?v5) (fun_app$bm (comp$w (map_tree$p ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_bool_fun$) (?v3 A_tree_a_tree_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree_bool_fun$) (?v6 A_tree_a_tree_tree_fun$) (?v7 A_tree_a_tree_fun$)) (= (fun_app$bb (comp$l (map_tree$p ?v0)) (fun_app$av (fun_app$bt (fun_app$bu (fun_app$bv (fun_app$bw (fun_app$bx (corec_tree$a ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$av (fun_app$bt (fun_app$bu (fun_app$bv (fun_app$bw (fun_app$bx (corec_tree$a (fun_app$d (comp$ ?v0) ?v1)) ?v2) (fun_app$bb (comp$l (map_tree$p ?v0)) ?v3)) ?v4) ?v5) (fun_app$bb (comp$l (map_tree$p ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_tree_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$) (?v6 A_a_tree_fun$) (?v7 A_a_fun$)) (= (fun_app$as (comp$e (map_tree$ ?v0)) (fun_app$x (fun_app$by (fun_app$bz (fun_app$ca (fun_app$cb (fun_app$cc (corec_tree$b ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$x (fun_app$by (fun_app$bz (fun_app$ca (fun_app$cb (fun_app$cc (corec_tree$b (fun_app$j (fun_app$k comp$a ?v0) ?v1)) ?v2) (fun_app$as (comp$e (map_tree$ ?v0)) ?v3)) ?v4) ?v5) (fun_app$as (comp$e (map_tree$ ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree_a_fun$) (?v2 A_tree_bool_fun$) (?v3 A_tree_a_tree_fun$) (?v4 A_tree_a_tree_fun$) (?v5 A_tree_bool_fun$) (?v6 A_tree_a_tree_fun$) (?v7 A_tree_a_tree_fun$)) (= (fun_app$d (comp$ (map_tree$ ?v0)) (fun_app$d (fun_app$cd (fun_app$ce (fun_app$cf (fun_app$cg (fun_app$ch (corec_tree$c ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$d (fun_app$cd (fun_app$ce (fun_app$cf (fun_app$cg (fun_app$ch (corec_tree$c (fun_app$ci (comp$x ?v0) ?v1)) ?v2) (fun_app$d (comp$ (map_tree$ ?v0)) ?v3)) ?v4) ?v5) (fun_app$d (comp$ (map_tree$ ?v0)) ?v6)) ?v7)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_tree_bool_fun_fun$)) (=> (and (member$c ?v0 (set_tree$a ?v1)) (and (forall ((?v3 A_a_fun_a_a_fun_fun_tree$)) (fun_app$be (fun_app$cj ?v2 (root$c ?v3)) ?v3) ) (and (forall ((?v3 A_a_fun_a_a_fun_fun$) (?v4 A_a_fun_a_a_fun_fun_tree$)) (=> (and (member$c ?v3 (set_tree$a (left$d ?v4))) (fun_app$be (fun_app$cj ?v2 ?v3) (left$d ?v4))) (fun_app$be (fun_app$cj ?v2 ?v3) ?v4)) ) (forall ((?v3 A_a_fun_a_a_fun_fun$) (?v4 A_a_fun_a_a_fun_fun_tree$)) (=> (and (member$c ?v3 (set_tree$a (right$d ?v4))) (fun_app$be (fun_app$cj ?v2 ?v3) (right$d ?v4))) (fun_app$be (fun_app$cj ?v2 ?v3) ?v4)) )))) (fun_app$be (fun_app$cj ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_a_a_a_fun_fun_tree_bool_fun_fun$)) (=> (and (member$d ?v0 (set_tree$b ?v1)) (and (forall ((?v3 A_a_a_fun_fun_tree$)) (fun_app$bg (fun_app$ck ?v2 (root$d ?v3)) ?v3) ) (and (forall ((?v3 A_a_a_fun_fun$) (?v4 A_a_a_fun_fun_tree$)) (=> (and (member$d ?v3 (set_tree$b (left$e ?v4))) (fun_app$bg (fun_app$ck ?v2 ?v3) (left$e ?v4))) (fun_app$bg (fun_app$ck ?v2 ?v3) ?v4)) ) (forall ((?v3 A_a_a_fun_fun$) (?v4 A_a_a_fun_fun_tree$)) (=> (and (member$d ?v3 (set_tree$b (right$e ?v4))) (fun_app$bg (fun_app$ck ?v2 ?v3) (right$e ?v4))) (fun_app$bg (fun_app$ck ?v2 ?v3) ?v4)) )))) (fun_app$bg (fun_app$ck ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_a_a_fun_a_fun_tree_bool_fun_fun$)) (=> (and (member$b ?v0 (set_tree$ ?v1)) (and (forall ((?v3 A_a_fun_a_fun_tree$)) (fun_app$bi (fun_app$cl ?v2 (root$b ?v3)) ?v3) ) (and (forall ((?v3 A_a_fun_a_fun$) (?v4 A_a_fun_a_fun_tree$)) (=> (and (member$b ?v3 (set_tree$ (left$b ?v4))) (fun_app$bi (fun_app$cl ?v2 ?v3) (left$b ?v4))) (fun_app$bi (fun_app$cl ?v2 ?v3) ?v4)) ) (forall ((?v3 A_a_fun_a_fun$) (?v4 A_a_fun_a_fun_tree$)) (=> (and (member$b ?v3 (set_tree$ (right$b ?v4))) (fun_app$bi (fun_app$cl ?v2 ?v3) (right$b ?v4))) (fun_app$bi (fun_app$cl ?v2 ?v3) ?v4)) )))) (fun_app$bi (fun_app$cl ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_tree_bool_fun_fun$)) (=> (and (member$ ?v0 (set_tree$c ?v1)) (and (forall ((?v3 A_a_fun_tree$)) (fun_app$ao (fun_app$ap ?v2 (root$e ?v3)) ?v3) ) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$)) (=> (and (member$ ?v3 (set_tree$c (left$c ?v4))) (fun_app$ao (fun_app$ap ?v2 ?v3) (left$c ?v4))) (fun_app$ao (fun_app$ap ?v2 ?v3) ?v4)) ) (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$)) (=> (and (member$ ?v3 (set_tree$c (right$c ?v4))) (fun_app$ao (fun_app$ap ?v2 ?v3) (right$c ?v4))) (fun_app$ao (fun_app$ap ?v2 ?v3) ?v4)) )))) (fun_app$ao (fun_app$ap ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_a_tree_bool_fun_fun$)) (=> (and (member$a ?v0 (set_tree$d ?v1)) (and (forall ((?v3 A_tree$)) (fun_app$aq (fun_app$ar ?v2 (root$ ?v3)) ?v3) ) (and (forall ((?v3 A$) (?v4 A_tree$)) (=> (and (member$a ?v3 (set_tree$d (left$ ?v4))) (fun_app$aq (fun_app$ar ?v2 ?v3) (left$ ?v4))) (fun_app$aq (fun_app$ar ?v2 ?v3) ?v4)) ) (forall ((?v3 A$) (?v4 A_tree$)) (=> (and (member$a ?v3 (set_tree$d (right$ ?v4))) (fun_app$aq (fun_app$ar ?v2 ?v3) (right$ ?v4))) (fun_app$aq (fun_app$ar ?v2 ?v3) ?v4)) )))) (fun_app$aq (fun_app$ar ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (=> (=> (= ?v0 (node$c (root$c ?v0) (left$d ?v0) (right$d ?v0))) false) false) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$)) (=> (=> (= ?v0 (node$d (root$d ?v0) (left$e ?v0) (right$e ?v0))) false) false) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$)) (=> (=> (= ?v0 (node$b (root$b ?v0) (left$b ?v0) (right$b ?v0))) false) false) ))
(assert (forall ((?v0 A_a_fun_tree$)) (=> (=> (= ?v0 (node$a (root$e ?v0) (left$c ?v0) (right$c ?v0))) false) false) ))
(assert (forall ((?v0 A_tree$)) (=> (=> (= ?v0 (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0))) false) false) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_a_tree_fun$) (?v2 A_tree$)) (= (fun_app$at (map_tree$p ?v0) (fun_app$au (map_tree$q ?v1) ?v2)) (fun_app$au (map_tree$q (fun_app$as (comp$e ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree_a_tree_fun$) (?v2 A_tree_tree$)) (= (fun_app$at (map_tree$p ?v0) (fun_app$at (map_tree$p ?v1) ?v2)) (fun_app$at (map_tree$p (fun_app$d (comp$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$ab (map_tree$a ?v1) ?v2)) (fun_app$ab (map_tree$a (fun_app$ba (comp$k ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$v (map_tree$c ?v0) (fun_app$v (map_tree$c ?v1) ?v2)) (fun_app$v (map_tree$c (fun_app$aw (comp$g ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun$) (?v2 A_tree$)) (= (fun_app$v (map_tree$c ?v0) (fun_app$ac (map_tree$b ?v1) ?v2)) (fun_app$ac (map_tree$b (fun_app$ay (comp$i ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_tree$)) (= (fun_app$ac (map_tree$b ?v0) (fun_app$ (map_tree$ ?v1) ?v2)) (fun_app$ac (map_tree$b (fun_app$ax (comp$h ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_fun_a_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$ac (map_tree$b ?v0) (fun_app$ab (map_tree$a ?v1) ?v2)) (fun_app$v (map_tree$c (fun_app$bd (comp$q ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_tree$)) (= (fun_app$ab (map_tree$a ?v0) (fun_app$v (map_tree$c ?v1) ?v2)) (fun_app$ab (map_tree$a (fun_app$az (comp$j ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_a_fun_fun$) (?v2 A_tree$)) (= (fun_app$ab (map_tree$a ?v0) (fun_app$ac (map_tree$b ?v1) ?v2)) (fun_app$ (map_tree$ (fun_app$b (comp$n ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_tree$)) (= (fun_app$ (map_tree$ ?v0) (fun_app$ (map_tree$ ?v1) ?v2)) (fun_app$ (map_tree$ (fun_app$j (fun_app$k comp$a ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (left$f (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (left$g (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_bool_fun$)) (= (left$h (pure_tree$b ?v0)) (pure_tree$b ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (left$c (pure_tree$f ?v0)) (pure_tree$f ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun$)) (= (left$b (pure_tree$c ?v0)) (pure_tree$c ?v0)) ))
(assert (forall ((?v0 A$)) (= (left$ (pure_tree$g ?v0)) (pure_tree$g ?v0)) ))
(assert (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (right$f (pure_tree$ ?v0)) (pure_tree$ ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (right$g (pure_tree$a ?v0)) (pure_tree$a ?v0)) ))
(assert (forall ((?v0 A_bool_fun$)) (= (right$h (pure_tree$b ?v0)) (pure_tree$b ?v0)) ))
(assert (forall ((?v0 A_a_fun$)) (= (right$c (pure_tree$f ?v0)) (pure_tree$f ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun$)) (= (right$b (pure_tree$c ?v0)) (pure_tree$c ?v0)) ))
(assert (forall ((?v0 A$)) (= (right$ (pure_tree$g ?v0)) (pure_tree$g ?v0)) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (=> (member$b ?v0 (set_tree$ (left$b ?v1))) (member$b ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c (left$c ?v1))) (member$ ?v0 (set_tree$c ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$a ?v0 (set_tree$d (left$ ?v1))) (member$a ?v0 (set_tree$d ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (=> (member$b ?v0 (set_tree$ (left$b ?v1))) (member$b ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c (left$c ?v1))) (member$ ?v0 (set_tree$c ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$a ?v0 (set_tree$d (left$ ?v1))) (member$a ?v0 (set_tree$d ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (left$c (node$a ?v0 ?v1 ?v2)) ?v1) :pattern ((node$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (! (= (left$b (node$b ?v0 ?v1 ?v2)) ?v1) :pattern ((node$b ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (left$ (node$ ?v0 ?v1 ?v2)) ?v1) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (=> (member$b ?v0 (set_tree$ (right$b ?v1))) (member$b ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c (right$c ?v1))) (member$ ?v0 (set_tree$c ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$a ?v0 (set_tree$d (right$ ?v1))) (member$a ?v0 (set_tree$d ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (=> (member$b ?v0 (set_tree$ (right$b ?v1))) (member$b ?v0 (set_tree$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c (right$c ?v1))) (member$ ?v0 (set_tree$c ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$a ?v0 (set_tree$d (right$ ?v1))) (member$a ?v0 (set_tree$d ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (right$c (node$a ?v0 ?v1 ?v2)) ?v2) :pattern ((node$a ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (! (= (right$b (node$b ?v0 ?v1 ?v2)) ?v2) :pattern ((node$b ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (right$ (node$ ?v0 ?v1 ?v2)) ?v2) :pattern ((node$ ?v0 ?v1 ?v2)))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (left$ (fun_app$w (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) ?v3)) (fun_app$w (fun_app$x (fun_app$y (unfold_tree$ ?v0) ?v1) ?v2) (fun_app$a ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (left$ (fun_app$z (unfold_tree$a ?v0 ?v1 ?v2) ?v3)) (fun_app$z (unfold_tree$a ?v0 ?v1 ?v2) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (left$c (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) ?v3)) (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) (fun_app$j ?v1 ?v3))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (= (right$c (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) ?v3)) (fun_app$aa (unfold_tree$b ?v0 ?v1 ?v2) (fun_app$j ?v2 ?v3))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (left$ (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) ?v2)) (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) (fun_app$a ?v0 ?v2))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (right$ (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) ?v2)) (fun_app$w (fun_app$x (tree_iterate$d ?v0) ?v1) (fun_app$a ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (mirror$c ?v0) (node$a (root$e ?v0) (mirror$c (right$c ?v0)) (mirror$c (left$c ?v0)))) ))
(assert (forall ((?v0 A_tree$)) (= (mirror$d ?v0) (node$ (root$ ?v0) (mirror$d (right$ ?v0)) (mirror$d (left$ ?v0)))) ))
(assert (forall ((?v0 Bool) (?v1 A_a_fun_tree$)) (= (fun_app$v (even_odd_mirror$ ?v0) ?v1) (node$a (root$e ?v1) (fun_app$v (even_odd_mirror$ (ite (not ?v0) true false)) (ite ?v0 (right$c ?v1) (left$c ?v1))) (fun_app$v (even_odd_mirror$ (ite (not ?v0) true false)) (ite ?v0 (left$c ?v1) (right$c ?v1))))) ))
(assert (forall ((?v0 Bool) (?v1 A_tree$)) (= (fun_app$ (even_odd_mirror$a ?v0) ?v1) (node$ (root$ ?v1) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (right$ ?v1) (left$ ?v1))) (fun_app$ (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (left$ ?v1) (right$ ?v1))))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A$)) (=> (and (= (fun_app$j (fun_app$k comp$a ?v0) ?v1) (fun_app$j (fun_app$k comp$a ?v2) ?v0)) (= (fun_app$j (fun_app$k comp$a ?v0) ?v3) (fun_app$j (fun_app$k comp$a ?v4) ?v0))) (= (fun_app$ (map_tree$ ?v0) (fun_app$w (fun_app$x (tree_recurse$d ?v1) ?v3) ?v5)) (fun_app$w (fun_app$x (tree_recurse$d ?v2) ?v4) (fun_app$a ?v0 ?v5)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$ ?v0 (set_tree$c ?v1)) (exists ((?v2 Dir_list$)) (= ?v0 (root$e (traverse_tree$ ?v2 ?v1))) )) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$a ?v0 (set_tree$d ?v1)) (exists ((?v2 Dir_list$)) (= ?v0 (root$ (fun_app$ (traverse_tree$a ?v2) ?v1))) )) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (ap_tree$ ?v0 ?v1) (node$ (fun_app$l (root$b ?v0) (root$e ?v1)) (ap_tree$ (left$b ?v0) (left$c ?v1)) (ap_tree$ (right$b ?v0) (right$c ?v1)))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$a ?v0) ?v1) (node$ (fun_app$a (root$e ?v0) (root$ ?v1)) (fun_app$ (ap_tree$a (left$c ?v0)) (left$ ?v1)) (fun_app$ (ap_tree$a (right$c ?v0)) (right$ ?v1)))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (tree_chop$ ?v0) (node$a (root$e (left$c ?v0)) (right$c ?v0) (tree_chop$ (left$c ?v0)))) ))
(assert (forall ((?v0 A_tree$)) (= (tree_chop$a ?v0) (node$ (root$ (left$ ?v0)) (right$ ?v0) (tree_chop$a (left$ ?v0)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ (ap_tree$a (pure_tree$f ?v0)) (pure_tree$g ?v1)) (pure_tree$g (fun_app$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (fun_app$ (ap_tree$a (node$a ?v0 ?v1 ?v2)) (node$ ?v3 ?v4 ?v5)) (node$ (fun_app$a ?v0 ?v3) (fun_app$ (ap_tree$a ?v1) ?v4) (fun_app$ (ap_tree$a ?v2) ?v5))) :pattern ((fun_app$ (ap_tree$a (node$a ?v0 ?v1 ?v2)) (node$ ?v3 ?v4 ?v5))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (fun_app$ (ap_tree$a (pure_tree$f ?v0)) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$a ?v0 ?v1) (fun_app$ (ap_tree$a (pure_tree$f ?v0)) ?v2) (fun_app$ (ap_tree$a (pure_tree$f ?v0)) ?v3))) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (traverse_tree$a ?v0) (fun_app$ (ap_tree$a ?v1) ?v2)) (fun_app$ (ap_tree$a (traverse_tree$ ?v0 ?v1)) (fun_app$ (traverse_tree$a ?v0) ?v2))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (tree_chop$a (fun_app$ (ap_tree$a ?v0) ?v1)) (fun_app$ (ap_tree$a (tree_chop$ ?v0)) (tree_chop$a ?v1))) ))
(assert (forall ((?v0 A$)) (= (tree_chop$a (pure_tree$g ?v0)) (pure_tree$g ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (ap_tree$a (ap_tree$b (ap_tree$c (pure_tree$a comp$a) ?v0) ?v1)) ?v2) (fun_app$ (ap_tree$a ?v0) (fun_app$ (ap_tree$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (fun_app$ (ap_tree$a ?v0) ?v2) (fun_app$ (ap_tree$a ?v1) ?v2)) ) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_tree$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (=> (member$a ?v2 (set_tree$d ?v0)) (fun_app$i ?v1 ?v2)) ) (= (ap_tree$d (pure_tree$b ?v1) ?v0) (pure_tree$h true))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (fun_app$ (ap_tree$a ?v0) (pure_tree$g ?v2)) (fun_app$ (ap_tree$a ?v1) (pure_tree$g ?v2))) ) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (root$ (ap_tree$ ?v0 ?v1)) (fun_app$l (root$b ?v0) (root$e ?v1))) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (root$e (ap_tree$e ?v0 ?v1)) (fun_app$c (root$d ?v0) (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (root$e (ap_tree$b ?v0 ?v1)) (fun_app$j (root$c ?v0) (root$e ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (root$ (fun_app$ (ap_tree$a ?v0) ?v1)) (fun_app$a (root$e ?v0) (root$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (left$ (fun_app$ (ap_tree$a ?v0) ?v1)) (fun_app$ (ap_tree$a (left$c ?v0)) (left$ ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (right$ (fun_app$ (ap_tree$a ?v0) ?v1)) (fun_app$ (ap_tree$a (right$c ?v0)) (right$ ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$a (pure_tree$f ?v0)) ?v1) (fun_app$ (map_tree$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (mirror$d (fun_app$ (ap_tree$a ?v0) ?v1)) (fun_app$ (ap_tree$a (mirror$c ?v0)) (mirror$d ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$e (tree_chop$ ?v0)) (root$e (left$c ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (root$ (tree_chop$a ?v0)) (root$ (left$ ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (right$ (tree_chop$a ?v0)) (tree_chop$a (left$ ?v0))) ))
(assert (forall ((?v0 A_tree$)) (= (left$ (tree_chop$a ?v0)) (right$ ?v0)) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (fun_app$ (ap_tree$a (ap_tree$e (ap_tree$f c_tree$ ?v0) ?v1)) ?v2) (fun_app$ (ap_tree$a (ap_tree$e ?v0 ?v2)) ?v1)) ))
(assert (forall ((?v0 Dir$) (?v1 Dir_list$)) (! (= (traverse_tree$a (cons$ ?v0 ?v1)) (fun_app$d (comp$ (traverse_tree$a ?v1)) (fun_app$f (fun_app$g (case_dir$ uub$) uuc$) ?v0))) :pattern ((cons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (fun_app$ (ap_tree$a (ap_tree$b (ap_tree$g s_tree$ ?v0) ?v1)) ?v2) (fun_app$ (ap_tree$a (ap_tree$e ?v0 ?v2)) (fun_app$ (ap_tree$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_tree$)) (= (fun_app$ (ap_tree$a i_tree$) ?v0) ?v0) ))
(assert (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$a (ap_tree$e k_tree$ ?v0)) ?v1) ?v0) ))
(assert (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$a (ap_tree$e ?v0 ?v1)) ?v1) (fun_app$ (ap_tree$a (ap_tree$h (pure_tree$ uud$) ?v0)) ?v1)) ))
(assert (forall ((?v0 A_tree$)) (= (left$ ?v0) (fun_app$ (case_tree$ uue$) ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (right$ ?v0) (fun_app$ (case_tree$ uuf$) ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (fun_app$ (map_tree$ uug$) ?v0) ?v0) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_tree_a_tree_a_fun_fun_fun$) (?v2 A_tree$)) (= (fun_app$a ?v0 (fun_app$m (case_tree$b ?v1) ?v2)) (fun_app$m (case_tree$b (fun_app$p (uuh$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (forall ((?v4 A$) (?v5 A$) (?v6 A$)) (= (fun_app$a (fun_app$c ?v0 (fun_app$a (fun_app$c ?v0 ?v4) ?v5)) ?v6) (fun_app$a (fun_app$c ?v0 ?v4) (fun_app$a (fun_app$c ?v0 ?v5) ?v6))) ) (and (forall ((?v4 A$)) (= (fun_app$a (fun_app$c ?v0 ?v4) ?v1) ?v4) ) (forall ((?v4 A$)) (= (fun_app$a (fun_app$c ?v0 ?v1) ?v4) ?v4) ))) (= (fun_app$w (fun_app$x (tree_recurse$d (fun_app$c ?v0 ?v2)) (fun_app$c ?v0 ?v3)) ?v1) (fun_app$w (fun_app$x (tree_iterate$d (fun_app$c (uui$ ?v0) ?v2)) (fun_app$c (uui$ ?v0) ?v3)) ?v1))) ))
(assert (forall ((?v0 A_a_fun_tree$)) (= (root$e ?v0) (fun_app$q (case_tree$a uuj$) ?v0)) ))
(assert (forall ((?v0 A_tree$)) (= (root$ ?v0) (fun_app$m (case_tree$b uuk$) ?v0)) ))
(assert (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$)) (=> (= ?v0 (node$ ?v1 (fun_app$ (map_tree$ ?v2) ?v0) (fun_app$ (map_tree$ ?v3) ?v0))) (= (fun_app$ (map_tree$ ?v4) ?v0) (fun_app$z (unfold_tree$a (uul$ ?v1) (uum$ ?v2) (uum$ ?v3)) ?v4))) ))
(assert (forall ((?v0 A$) (?v1 A_tree$)) (= (fun_app$ (ap_tree$a (pure_tree$f (uun$ ?v0))) ?v1) (pure_tree$g ?v0)) ))
(assert (forall ((?v0 A_a_fun_tree$) (?v1 A$)) (= (fun_app$ (ap_tree$a ?v0) (pure_tree$g ?v1)) (ap_tree$ (pure_tree$c (uul$ ?v1)) ?v0)) ))
(assert (forall ((?v0 Dir_list$)) (= (traverse_tree$a ?v0) (fun_app$d (fun_app$cm (foldr$ uuo$) ?v0) id$)) ))
(assert (forall ((?v0 A_tree$)) (= (fun_app$ (map_tree$ id$a) ?v0) ?v0) ))
(assert (= (map_tree$ id$a) id$))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2) (fun_app$ (ap_tree$a (fun_app$aa (unfold_tree$b id$b (uum$ ?v0) (uum$ ?v1)) id$a)) (pure_tree$g ?v2))) ))
(assert (forall ((?v0 A_tree$)) (= (fun_app$ (ap_tree$a (pure_tree$f id$a)) ?v0) ?v0) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$w (fun_app$x (tree_recurse$d ?v0) ?v1) ?v2) (fun_app$z (unfold_tree$a (uul$ ?v2) (uum$ ?v0) (uum$ ?v1)) id$a)) ))
(assert (forall ((?v0 Dir_list$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (= (fun_app$ (traverse_tree$a ?v0) (fun_app$w (fun_app$x (tree_iterate$d ?v1) ?v2) ?v3)) (fun_app$w (fun_app$x (tree_iterate$d ?v1) ?v2) (fun_app$a (fun_app$cn (fold$ (fun_app$co (traverse_dir$ ?v1) ?v2)) ?v0) ?v3))) ))
(assert (= (traverse_tree$a nil$) id$))
(assert (forall ((?v0 Dir$)) (=> (and (=> (= ?v0 l$) false) (=> (= ?v0 r$) false)) false) ))
(assert (not (= l$ r$)))
(check-sat)
(exit)

