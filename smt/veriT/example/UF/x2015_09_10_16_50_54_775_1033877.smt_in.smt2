(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$) Nat$)
(declare-fun snd$ (Nat_nat_prod$) Nat$)
(declare-fun pair$ (Nat$ Nat$) Nat_nat_prod$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun a$ () Nat$)
(declare-fun b$ () Nat$)
(declare-fun c$ () Nat$)
(declare-fun x$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun y$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun aa$ () Nat$)
(declare-fun ba$ () Nat$)
(declare-fun bb$ () Nat$)
(declare-fun ca$ () Nat$)
(declare-fun baa$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun times$ (Nat$) Nat_nat_fun$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(assert (not (fun_app$ (less$ (fun_app$a (times$ (fun_app$a (times$ b$) ba$)) (fun_app$a (plus$ bb$) ca$))) (fun_app$a (times$ (fun_app$a (times$ a$) c$)) (fun_app$a (plus$ bb$) ca$)))))
(assert (= (fun_app$a (minus$ (fun_app$a (times$ a$) c$)) (fun_app$a (times$ ba$) b$)) (suc$ zero$)))
(assert (= (fun_app$a (minus$ (fun_app$a (times$ aa$) ca$)) (fun_app$a (times$ baa$) bb$)) (suc$ zero$)))
(assert (or (fun_app$ (less$ zero$) b$) (fun_app$ (less$ zero$) c$)))
(assert (or (and (fun_app$ (less$ zero$) b$) (fun_app$ (less$ zero$) aa$)) (or (and (fun_app$ (less$ zero$) c$) (or (fun_app$ (less$ zero$) aa$) (fun_app$ (less$ zero$) bb$))) (or (and (fun_app$ (less$ zero$) b$) (fun_app$ (less$ zero$) baa$)) (and (fun_app$ (less$ zero$) c$) (or (fun_app$ (less$ zero$) baa$) (fun_app$ (less$ zero$) ca$)))))))
(assert (= x$ (pair$a (pair$ a$ b$) (pair$ ba$ c$))))
(assert (= y$ (pair$a (pair$ aa$ bb$) (pair$ baa$ ca$))))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (= ?v3 ?v4) (fun_app$ (fun_app$b ?v0 (suc$ ?v3)) (suc$ ?v4))) ) (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (fun_app$ (less$ ?v3) ?v4) (fun_app$ (fun_app$b ?v0 (suc$ ?v3)) (fun_app$a (minus$ ?v4) ?v3))) (fun_app$ (fun_app$b ?v0 (suc$ ?v3)) (suc$ ?v4))) ) (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (and (fun_app$ (less$ ?v4) ?v3) (fun_app$ (fun_app$b ?v0 (fun_app$a (minus$ ?v3) ?v4)) (suc$ ?v4))) (fun_app$ (fun_app$b ?v0 (suc$ ?v3)) (suc$ ?v4))) ) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$b ?v0 zero$) ?v3) ) (forall ((?v3 Nat$)) (fun_app$ (fun_app$b ?v0 ?v3) zero$) ))))) (fun_app$ (fun_app$b ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat_nat_prod$)) (=> (and (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v1 ?v2) (= ?v0 (pair$ (suc$ ?v1) (suc$ ?v2)))) false) ) (and (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v1) ?v2) (= ?v0 (pair$ (suc$ ?v1) (suc$ ?v2)))) false) ) (and (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v2) ?v1) (= ?v0 (pair$ (suc$ ?v1) (suc$ ?v2)))) false) ) (and (forall ((?v1 Nat$)) (=> (= ?v0 (pair$ zero$ ?v1)) false) ) (forall ((?v1 Nat$)) (=> (= ?v0 (pair$ ?v1 zero$)) false) ))))) false) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$ (less$ zero$) ?v0) (= (suc$ (fun_app$a (minus$ ?v0) (suc$ zero$))) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (times$ ?v0) (suc$ ?v1)) (fun_app$a (plus$ ?v0) (fun_app$a (times$ ?v0) ?v1))) :pattern ((fun_app$a (times$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ zero$) (fun_app$a (minus$ ?v0) ?v1)) (fun_app$ (less$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v0) ?v2)) (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v2) ?v1)) (and (fun_app$ (less$ zero$) ?v1) (fun_app$ (less$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ zero$) (fun_app$a (times$ ?v0) ?v1)) (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ zero$) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) (suc$ zero$)) (and (= ?v0 (suc$ zero$)) (= ?v1 (suc$ zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ zero$) (fun_app$a (times$ ?v0) ?v1)) (and (= ?v0 (suc$ zero$)) (= ?v1 (suc$ zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ zero$) (fun_app$a (plus$ ?v0) ?v1)) (or (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ zero$) ?v1))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) (suc$ zero$)) (= ?v0 zero$)) :pattern ((less$ ?v0)))))
(assert (forall ((?v0 Nat$)) (fun_app$ (less$ zero$) (suc$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ ?v0) (fun_app$a (plus$ ?v0) ?v1)) zero$) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v0) ?v2)) (fun_app$ (less$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v2) ?v1)) (fun_app$ (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (minus$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (minus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) ?v0) ?v1) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) ?v1) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (minus$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v2) ?v1)) (fun_app$a (minus$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))))
(assert (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$)) (fun_app$ (less$ ?v0) (suc$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less$ ?v0) ?v1)) :pattern ((fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (plus$ ?v0) (suc$ ?v1)) (suc$ (fun_app$a (plus$ ?v0) ?v1))) :pattern ((fun_app$a (plus$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v0) ?v2)) (fun_app$ (less$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (times$ ?v0) zero$) zero$) :pattern ((times$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v0) ?v2)) (or (= ?v1 ?v2) (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v2) ?v1)) (or (= ?v0 ?v2) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (minus$ zero$) ?v0) zero$) :pattern ((fun_app$a (minus$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (minus$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$a (minus$ ?v0) ?v1)) :pattern ((fun_app$a (minus$ (suc$ ?v0)) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ (suc$ ?v0)) ?v1)) (suc$ ?v2)) (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ ?v0) (fun_app$a (times$ ?v1) ?v2)) (fun_app$a (times$ ?v1) (fun_app$a (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (times$ ?v0) ?v1)) ?v2) (fun_app$a (times$ ?v0) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (times$ ?v0) ?v1)) ?v2) (fun_app$a (times$ ?v0) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (fun_app$a (plus$ ?v0) ?v2) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (plus$ ?v0) (fun_app$a (plus$ ?v1) ?v2)) (fun_app$a (plus$ ?v1) (fun_app$a (plus$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (plus$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (plus$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false) ))
(assert (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$ (less$ ?v0) ?v1) false) (=> (fun_app$ (less$ ?v1) ?v0) false))) false) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) ?v0) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v0 ?v1))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3)) ) (fun_app$ ?v0 ?v2)) ) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$ ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3))) )) ) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (fun_app$b ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$ (fun_app$b ?v2 ?v1) ?v0)) (=> (fun_app$ (less$ ?v1) ?v0) (fun_app$ (fun_app$b ?v2 ?v1) ?v0)))) (fun_app$ (fun_app$b ?v2 ?v1) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v0) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v2) ?v1)) (= ?v0 ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (plus$ zero$) ?v0) ?v0) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (plus$ ?v0) zero$) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (fun_app$a (plus$ ?v2) ?v0)) (fun_app$a (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v2) ?v3)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v0) ?v2)) (fun_app$ (less$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v2) ?v1)) (fun_app$ (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v2) ?v3)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (= ?v2 ?v3)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$ (less$ ?v2) ?v3)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (fun_app$a (plus$ ?v0) ?v1) ?v2) (= ?v0 (fun_app$a (minus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= (suc$ ?v0) zero$)) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$)) (not (= zero$ (suc$ ?v0))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v0 (suc$ ?v2))) )) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Nat$)) (=> (fun_app$ ?v0 (suc$ ?v2)) (fun_app$ ?v0 ?v2)) )) (fun_app$ ?v0 zero$)) ))
(assert (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$)) (=> (= zero$ (suc$ ?v0)) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) (not (= ?v0 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (= (suc$ ?v0) zero$) false) ))
(assert (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$b ?v0 ?v3) zero$) ) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$b ?v0 zero$) (suc$ ?v3)) ) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$b ?v0 ?v3) ?v4) (fun_app$ (fun_app$b ?v0 (suc$ ?v3)) (suc$ ?v4))) ))) (fun_app$ (fun_app$b ?v0 ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false) )) false) ))
(assert (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) zero$)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v2) (not (fun_app$ ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3))) )) )) (fun_app$ ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) zero$) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$ (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (not (fun_app$ (less$ ?v0) ?v1)) (= (fun_app$ (less$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :pattern ((fun_app$ (less$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (fun_app$ (less$ ?v0) ?v1)) (fun_app$ (less$ ?v0) (suc$ ?v1))) (= ?v1 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v0) (suc$ ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (not (= (suc$ ?v0) ?v1))) (fun_app$ (less$ (suc$ ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v1) ?v2)) (fun_app$ (less$ (suc$ ?v0)) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$b ?v2 ?v3) (suc$ ?v3)) ) (forall ((?v3 Nat$) (?v4 Nat$) (?v5 Nat$)) (=> (and (fun_app$ (less$ ?v3) ?v4) (and (fun_app$ (less$ ?v4) ?v5) (and (fun_app$ (fun_app$b ?v2 ?v3) ?v4) (fun_app$ (fun_app$b ?v2 ?v4) ?v5)))) (fun_app$ (fun_app$b ?v2 ?v3) ?v5)) ))) (fun_app$ (fun_app$b ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_bool_fun$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (and (forall ((?v3 Nat$)) (=> (= ?v1 (suc$ ?v3)) (fun_app$ ?v2 ?v3)) ) (forall ((?v3 Nat$)) (=> (and (fun_app$ (less$ ?v3) ?v1) (fun_app$ ?v2 (suc$ ?v3))) (fun_app$ ?v2 ?v3)) ))) (fun_app$ ?v2 ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (and (=> (= ?v1 (suc$ ?v0)) false) (forall ((?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v2) (= ?v1 (suc$ ?v2))) false) ))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) (suc$ ?v1)) (and (=> (fun_app$ (less$ ?v0) ?v1) false) (=> (= ?v0 ?v1) false))) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ (suc$ ?v0)) ?v1) (fun_app$ (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ (suc$ ?v0)) ?v1) (forall ((?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v2) (= ?v1 (suc$ ?v2))) false) )) false) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less$ ?v0) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$ (less$ ?v0) ?v1)) (fun_app$ (less$ ?v1) (suc$ ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ (suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (and (= ?v1 (suc$ ?v2)) (fun_app$ (less$ ?v0) ?v2)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less$ ?v0) (suc$ ?v1)) (or (fun_app$ (less$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$ (less$ ?v0) (suc$ ?v1))))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$a (plus$ ?v0) ?v1) ?v0) (= ?v1 zero$)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (plus$ zero$) ?v0) ?v0) :pattern ((fun_app$a (plus$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (plus$ (suc$ ?v0)) ?v1) (suc$ (fun_app$a (plus$ ?v0) ?v1))) :pattern ((fun_app$a (plus$ (suc$ ?v0)) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (plus$ (suc$ ?v0)) ?v1) (fun_app$a (plus$ ?v0) (suc$ ?v1))) :pattern ((fun_app$a (plus$ (suc$ ?v0)) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (not (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (not (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v0) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v0) (fun_app$a (plus$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v2) ?v3)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (plus$ ?v1) ?v3))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (= (fun_app$a (plus$ ?v2) ?v1) (fun_app$a (plus$ ?v0) ?v3))) (fun_app$ (less$ ?v2) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$ (less$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (times$ zero$) ?v0) zero$) :pattern ((fun_app$a (times$ zero$) ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v0) ?v2)) (or (= ?v0 zero$) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= (fun_app$a (minus$ ?v0) ?v1) zero$) (= (fun_app$a (minus$ ?v1) ?v0) zero$)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 Nat$)) (! (= (fun_app$a (minus$ ?v0) zero$) ?v0) :pattern ((minus$ ?v0)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (times$ (suc$ ?v0)) ?v1) (fun_app$a (times$ (suc$ ?v0)) ?v2)) (= ?v1 ?v2)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 (suc$ ?v3)) (fun_app$ ?v0 ?v3)) )) (fun_app$ ?v0 (fun_app$a (minus$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (fun_app$a (minus$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v0) ?v2)) (fun_app$ (less$ (fun_app$a (minus$ ?v2) ?v1)) (fun_app$a (minus$ ?v2) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ ?v0) (fun_app$a (plus$ ?v1) ?v2)) (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (plus$ (fun_app$a (times$ ?v2) ?v1)) ?v3)) (fun_app$a (plus$ (fun_app$a (times$ (fun_app$a (plus$ ?v0) ?v2)) ?v1)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) ?v0) ?v1) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) ?v1) ?v0) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v0) ?v2)) (fun_app$a (minus$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$ (fun_app$a (plus$ ?v0) ?v1)) (fun_app$a (plus$ ?v2) ?v1)) (fun_app$a (minus$ ?v0) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ ?v0) (fun_app$a (minus$ ?v1) ?v2)) (fun_app$a (minus$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ zero$) ?v1)) (fun_app$ (less$ zero$) (fun_app$a (plus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) zero$) (fun_app$ (less$ ?v1) zero$)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (fun_app$ (less$ (fun_app$a ?v0 ?v3)) (fun_app$a ?v0 (suc$ ?v3))) ) (= (fun_app$ (less$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2)) (fun_app$ (less$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less$ (fun_app$a ?v0 ?v3)) (fun_app$a ?v0 (suc$ ?v3))) ) (fun_app$ (less$ ?v1) ?v2)) (fun_app$ (less$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2))) ))
(assert (forall ((?v0 Nat$)) (=> (fun_app$ (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$ (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ ?v0) (suc$ ?v1)) (or (= ?v0 zero$) (exists ((?v2 Nat$)) (and (= ?v0 (suc$ ?v2)) (fun_app$ (less$ ?v2) ?v1)) ))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ zero$) (fun_app$a (plus$ ?v0) ?v1)) (or (and (= ?v0 (suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (suc$ zero$))))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (suc$ zero$)) (or (and (= ?v0 (suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (suc$ zero$))))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (exists ((?v2 Nat$)) (and (fun_app$ (less$ zero$) ?v2) (= (fun_app$a (plus$ ?v0) ?v2) ?v1)) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$ (less$ ?v0) (suc$ (fun_app$a (plus$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$ (less$ ?v0) (suc$ (fun_app$a (plus$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (suc$ (fun_app$a (plus$ ?v0) ?v2))) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ ?v0) ?v1) (exists ((?v2 Nat$)) (= ?v1 (suc$ (fun_app$a (plus$ ?v0) ?v2))) )) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ zero$) ?v0) (= (fun_app$ (less$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v0) ?v2)) (fun_app$ (less$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$ (less$ zero$) ?v0) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ zero$) ?v2)) (fun_app$ (less$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ zero$) ?v2)) (fun_app$ (less$ (fun_app$a (times$ ?v2) ?v0)) (fun_app$a (times$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ zero$) ?v1)) (fun_app$ (less$ (fun_app$a (minus$ ?v1) ?v0)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (fun_app$a (times$ (suc$ ?v0)) ?v1)) (fun_app$a (times$ (suc$ ?v0)) ?v2)) (fun_app$ (less$ ?v1) ?v2)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (fun_app$ (less$ (fun_app$a (minus$ ?v0) ?v1)) (suc$ ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (= (suc$ (fun_app$a (minus$ ?v1) (suc$ ?v0))) (fun_app$a (minus$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$a (minus$ ?v0) (fun_app$a (plus$ ?v0) ?v1)) zero$) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (times$ (suc$ ?v0)) ?v1) (fun_app$a (plus$ ?v1) (fun_app$a (times$ ?v0) ?v1))) :pattern ((fun_app$a (times$ (suc$ ?v0)) ?v1)))))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (fun_app$ (less$ ?v0) ?v1)) (= (fun_app$a (plus$ ?v1) (fun_app$a (minus$ ?v0) ?v1)) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ ?v0) (fun_app$a (minus$ ?v1) ?v2)) (fun_app$ (less$ (fun_app$a (plus$ ?v0) ?v2)) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ (suc$ zero$)) ?v0) (fun_app$ (less$ (suc$ zero$)) ?v1)) (fun_app$ (less$ ?v0) (fun_app$a (times$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ (suc$ zero$)) ?v0) (fun_app$ (less$ (suc$ zero$)) ?v1)) (fun_app$ (less$ ?v0) (fun_app$a (times$ ?v0) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ (suc$ zero$)) ?v0) (fun_app$ (less$ (suc$ zero$)) ?v1)) (fun_app$ (less$ (suc$ zero$)) (fun_app$a (times$ ?v1) ?v0))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ (fun_app$a (minus$ ?v0) (suc$ ?v1))) ?v0)) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ ?v0 (fun_app$a (minus$ ?v1) ?v2)) (and (=> (fun_app$ (less$ ?v1) ?v2) (fun_app$ ?v0 zero$)) (forall ((?v3 Nat$)) (=> (= ?v1 (fun_app$a (plus$ ?v2) ?v3)) (fun_app$ ?v0 ?v3)) ))) ))
(assert (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ ?v0 (fun_app$a (minus$ ?v1) ?v2)) (not (or (and (fun_app$ (less$ ?v1) ?v2) (not (fun_app$ ?v0 zero$))) (exists ((?v3 Nat$)) (and (= ?v1 (fun_app$a (plus$ ?v2) ?v3)) (not (fun_app$ ?v0 ?v3))) )))) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (times$ zero$) ?v0) zero$) ))
(assert (forall ((?v0 Nat$)) (= (fun_app$a (times$ ?v0) zero$) zero$) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v0) ?v2)) (or (= ?v0 zero$) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v2) ?v1)) (or (= ?v1 zero$) (= ?v0 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (fun_app$a (times$ ?v0) ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (not (= (fun_app$a (times$ ?v0) ?v1) zero$)) (and (not (= ?v0 zero$)) (not (= ?v1 zero$)))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 zero$)) (not (= ?v1 zero$))) (not (= (fun_app$a (times$ ?v0) ?v1) zero$))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (not (= ?v0 zero$)) (= (= (fun_app$a (times$ ?v1) ?v0) (fun_app$a (times$ ?v2) ?v0)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (not (= ?v0 zero$)) (= (= (fun_app$a (times$ ?v0) ?v1) (fun_app$a (times$ ?v0) ?v2)) (= ?v1 ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (plus$ (fun_app$a (times$ ?v2) ?v1)) ?v3)) (fun_app$a (plus$ (fun_app$a (times$ (fun_app$a (plus$ ?v0) ?v2)) ?v1)) ?v3)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (plus$ ?v0) ?v1)) ?v2) (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ ?v0) (fun_app$a (plus$ ?v1) ?v2)) (fun_app$a (plus$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ (fun_app$a (minus$ ?v0) ?v1)) ?v2) (fun_app$a (minus$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (times$ ?v0) (fun_app$a (minus$ ?v1) ?v2)) (fun_app$a (minus$ (fun_app$a (times$ ?v0) ?v1)) (fun_app$a (times$ ?v0) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ zero$) ?v2)) (fun_app$ (less$ (fun_app$a (times$ ?v2) ?v0)) (fun_app$a (times$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ zero$) ?v2)) (fun_app$ (less$ (fun_app$a (times$ ?v0) ?v2)) (fun_app$a (times$ ?v1) ?v2))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ zero$) ?v2)) (fun_app$ (less$ (fun_app$a (times$ ?v2) ?v0)) (fun_app$a (times$ ?v2) ?v1))) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) zero$) (fun_app$ (less$ zero$) ?v1)) (fun_app$ (less$ (fun_app$a (times$ ?v0) ?v1)) zero$)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ zero$) (fun_app$a (times$ ?v0) ?v1)) (fun_app$ (less$ zero$) ?v1)) (fun_app$ (less$ zero$) ?v0)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ zero$) (fun_app$a (times$ ?v0) ?v1)) (fun_app$ (less$ zero$) ?v0)) (fun_app$ (less$ zero$) ?v1)) ))
(assert (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ ?v1) zero$)) (fun_app$ (less$ (fun_app$a (times$ ?v1) ?v0)) zero$)) ))
(check-sat)
(exit)

