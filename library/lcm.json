{
    "content": [
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm",
            "prop": "lcm m n = (if m * n = 0 then 0 else m * n DIV gcd m n)",
            "ty": "def",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_divides",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m * n = 0 ⟶ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "m * n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * n = 0 ⊢ divides 0 d ⟶ divides m d ∧ divides n d"
                },
                {
                    "args": "divides 0 d",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides 0 d ⊢ divides 0 d"
                },
                {
                    "args": "divides_0",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides 0 d ⊢ d = 0"
                },
                {
                    "args": "divides_zero, {n: m}",
                    "id": "0.1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m 0"
                },
                {
                    "args": "divides_zero, {n: n}",
                    "id": "0.1.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n 0"
                },
                {
                    "args": "conjI",
                    "id": "0.1.4",
                    "prevs": [
                        "0.1.2",
                        "0.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides 0 d, m * n = 0 ⊢ divides m 0 ∧ divides n 0"
                },
                {
                    "args": "divides m d ∧ divides n d",
                    "id": "0.1.5",
                    "prevs": [
                        "0.1.1",
                        "0.1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides 0 d, m * n = 0 ⊢ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "0.1.6",
                    "prevs": [
                        "0.1.0",
                        "0.1.5"
                    ],
                    "rule": "intros",
                    "th": "m * n = 0 ⊢ divides 0 d ⟶ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * n = 0 ⊢ divides m d ∧ divides n d ⟶ divides 0 d"
                },
                {
                    "args": "divides m d ∧ divides n d",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m d ∧ divides n d ⊢ divides m d ∧ divides n d"
                },
                {
                    "args": "conjD1",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ⊢ divides m d"
                },
                {
                    "args": "conjD2",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ⊢ divides n d"
                },
                {
                    "args": "mult_eq_0",
                    "id": "0.2.3",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m * n = 0 ⊢ m = 0 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * n = 0, divides m d ∧ divides n d ⊢ m = 0 ⟶ d = 0"
                },
                {
                    "args": "m = 0",
                    "id": "0.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.2.4.1",
                    "prevs": [
                        "0.2.4.0",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, divides m d ∧ divides n d ⊢ divides 0 d"
                },
                {
                    "args": "divides_0",
                    "id": "0.2.4.2",
                    "prevs": [
                        "0.2.4.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = 0, divides m d ∧ divides n d ⊢ d = 0"
                },
                {
                    "args": "",
                    "id": "0.2.4.3",
                    "prevs": [
                        "0.2.4.0",
                        "0.2.4.2"
                    ],
                    "rule": "intros",
                    "th": "m * n = 0, divides m d ∧ divides n d ⊢ m = 0 ⟶ d = 0"
                },
                {
                    "args": "",
                    "id": "0.2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * n = 0, divides m d ∧ divides n d ⊢ n = 0 ⟶ d = 0"
                },
                {
                    "args": "n = 0",
                    "id": "0.2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2.5.1",
                    "prevs": [
                        "0.2.5.0",
                        "0.2.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "n = 0, divides m d ∧ divides n d ⊢ divides 0 d"
                },
                {
                    "args": "divides_0",
                    "id": "0.2.5.2",
                    "prevs": [
                        "0.2.5.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n = 0, divides m d ∧ divides n d ⊢ d = 0"
                },
                {
                    "args": "",
                    "id": "0.2.5.3",
                    "prevs": [
                        "0.2.5.0",
                        "0.2.5.2"
                    ],
                    "rule": "intros",
                    "th": "m * n = 0, divides m d ∧ divides n d ⊢ n = 0 ⟶ d = 0"
                },
                {
                    "args": "disjE",
                    "id": "0.2.6",
                    "prevs": [
                        "0.2.3",
                        "0.2.4",
                        "0.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * n = 0, divides m d ∧ divides n d ⊢ d = 0"
                },
                {
                    "args": "divides_0, divides 0 d",
                    "id": "0.2.7",
                    "prevs": [
                        "0.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * n = 0, divides m d ∧ divides n d ⊢ divides 0 d"
                },
                {
                    "args": "",
                    "id": "0.2.8",
                    "prevs": [
                        "0.2.0",
                        "0.2.7"
                    ],
                    "rule": "intros",
                    "th": "m * n = 0 ⊢ divides m d ∧ divides n d ⟶ divides 0 d"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * n = 0 ⊢ divides 0 d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "if_P, divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d",
                    "id": "0.4",
                    "prevs": [
                        "0.3",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * n = 0 ⊢ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = 0 ⟶ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m * n = 0) ⟶ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "¬(m * n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_def",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ ∃k. n = gcd m n * k"
                },
                {
                    "args": "k1, nat",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k1"
                },
                {
                    "args": "n = gcd m n * k1",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = gcd m n * k1 ⊢ n = gcd m n * k1"
                },
                {
                    "args": "mult_comm, n = k1 * gcd m n",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ n = k1 * gcd m n"
                },
                {
                    "args": "disjI2, {A: m = 0, B: n = k1 * gcd m n}",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ m = 0 ∨ n = k1 * gcd m n"
                },
                {
                    "args": "eq_mult_lcancel, m * n = m * (k1 * gcd m n)",
                    "id": "1.7",
                    "prevs": [
                        "1.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ m * n = m * (k1 * gcd m n)"
                },
                {
                    "args": "mult_assoc, m * n = m * k1 * gcd m n",
                    "id": "1.8",
                    "prevs": [
                        "1.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ m * n = m * k1 * gcd m n"
                },
                {
                    "args": "add_0_right, m * n = m * k1 * gcd m n + 0",
                    "id": "1.9",
                    "prevs": [
                        "1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ m * n = m * k1 * gcd m n + 0"
                },
                {
                    "args": "m = 0 ∧ n = 0 ⟶ m * n = 0",
                    "id": "1.10",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ m = 0 ∧ n = 0 ⟶ m * n = 0"
                },
                {
                    "args": "double_neg, ¬¬(m = 0 ∧ n = 0) ⟶ ¬¬(m * n = 0)",
                    "id": "1.11",
                    "prevs": [
                        "1.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ ¬¬(m = 0 ∧ n = 0) ⟶ ¬¬(m * n = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.12",
                    "prevs": [
                        "1.0",
                        "1.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ ¬(m = 0 ∧ n = 0)"
                },
                {
                    "args": "gcd_zero, ¬(gcd m n = 0)",
                    "id": "1.13",
                    "prevs": [
                        "1.12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ ¬(gcd m n = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1.14",
                    "prevs": [
                        "1.13"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ 0 < gcd m n"
                },
                {
                    "args": "div_uniq",
                    "id": "1.15",
                    "prevs": [
                        "1.9",
                        "1.14"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m * n = 0), n = gcd m n * k1 ⊢ m * n DIV gcd m n = m * k1"
                },
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "1.16",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "divides_def",
                    "id": "1.17",
                    "prevs": [
                        "1.16"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ ∃k. m = gcd m n * k"
                },
                {
                    "args": "k2, nat",
                    "id": "1.18",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k2"
                },
                {
                    "args": "m = gcd m n * k2",
                    "id": "1.19",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = gcd m n * k2 ⊢ m = gcd m n * k2"
                },
                {
                    "args": "mult_comm, m = k2 * gcd m n",
                    "id": "1.20",
                    "prevs": [
                        "1.19"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ m = k2 * gcd m n"
                },
                {
                    "args": "disjI2, {A: n = 0, B: m = k2 * gcd m n}",
                    "id": "1.21",
                    "prevs": [
                        "1.20"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ n = 0 ∨ m = k2 * gcd m n"
                },
                {
                    "args": "eq_mult_lcancel, n * m = n * (k2 * gcd m n)",
                    "id": "1.22",
                    "prevs": [
                        "1.21"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ n * m = n * (k2 * gcd m n)"
                },
                {
                    "args": "mult_assoc, n * m = n * k2 * gcd m n",
                    "id": "1.23",
                    "prevs": [
                        "1.22"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ n * m = n * k2 * gcd m n"
                },
                {
                    "args": "add_0_right, n * m = n * k2 * gcd m n + 0",
                    "id": "1.24",
                    "prevs": [
                        "1.23"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ n * m = n * k2 * gcd m n + 0"
                },
                {
                    "args": "div_uniq",
                    "id": "1.25",
                    "prevs": [
                        "1.24",
                        "1.14"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ n * m DIV gcd m n = n * k2"
                },
                {
                    "args": "mult_comm, m * n DIV gcd m n = k2 * n",
                    "id": "1.26",
                    "prevs": [
                        "1.25"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ m * n DIV gcd m n = k2 * n"
                },
                {
                    "args": "",
                    "id": "1.27",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ divides (m * n DIV gcd m n) d ⟶ divides m d ∧ divides n d"
                },
                {
                    "args": "divides (m * n DIV gcd m n) d",
                    "id": "1.27.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (m * n DIV gcd m n) d ⊢ divides (m * n DIV gcd m n) d"
                },
                {
                    "args": "divides_def",
                    "id": "1.27.1",
                    "prevs": [
                        "1.27.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (m * n DIV gcd m n) d ⊢ ∃k. d = m * n DIV gcd m n * k"
                },
                {
                    "args": "k, nat",
                    "id": "1.27.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "d = m * n DIV gcd m n * k",
                    "id": "1.27.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d = m * n DIV gcd m n * k ⊢ d = m * n DIV gcd m n * k"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "1.27.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "divides_rmul, {a: m, d: m, x: k1}",
                    "id": "1.27.5",
                    "prevs": [
                        "1.27.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides m (m * k1)"
                },
                {
                    "args": "divides m (m * n DIV gcd m n)",
                    "id": "1.27.6",
                    "prevs": [
                        "1.15",
                        "1.27.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides m (m * n DIV gcd m n)"
                },
                {
                    "args": "divides_rmul, {a: m * n DIV gcd m n, d: m, x: k}",
                    "id": "1.27.7",
                    "prevs": [
                        "1.27.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides m (m * n DIV gcd m n * k)"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1.27.8",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "divides_lmul, {a: n, d: n, x: k2}",
                    "id": "1.27.9",
                    "prevs": [
                        "1.27.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides n (k2 * n)"
                },
                {
                    "args": "divides n (m * n DIV gcd m n)",
                    "id": "1.27.10",
                    "prevs": [
                        "1.26",
                        "1.27.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides n (m * n DIV gcd m n)"
                },
                {
                    "args": "divides_rmul, {a: m * n DIV gcd m n, d: n, x: k}",
                    "id": "1.27.11",
                    "prevs": [
                        "1.27.10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides n (m * n DIV gcd m n * k)"
                },
                {
                    "args": "conjI",
                    "id": "1.27.12",
                    "prevs": [
                        "1.27.7",
                        "1.27.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides m (m * n DIV gcd m n * k) ∧ divides n (m * n DIV gcd m n * k)"
                },
                {
                    "args": "divides m d ∧ divides n d",
                    "id": "1.27.13",
                    "prevs": [
                        "1.27.3",
                        "1.27.12"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides (m * n DIV gcd m n) d, d = m * n DIV gcd m n * k ⊢ divides m d ∧ divides n d"
                },
                {
                    "args": "∃k. d = m * n DIV gcd m n * k",
                    "id": "1.27.14",
                    "prevs": [
                        "1.27.0",
                        "1.27.1",
                        "1.27.2",
                        "1.27.3",
                        "1.27.13"
                    ],
                    "rule": "intros",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ divides (m * n DIV gcd m n) d ⟶ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "1.28",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ divides m d ∧ divides n d ⟶ divides (m * n DIV gcd m n) d"
                },
                {
                    "args": "divides m d ∧ divides n d",
                    "id": "1.28.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m d ∧ divides n d ⊢ divides m d ∧ divides n d"
                },
                {
                    "args": "conjD1",
                    "id": "1.28.1",
                    "prevs": [
                        "1.28.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ⊢ divides m d"
                },
                {
                    "args": "conjD2",
                    "id": "1.28.2",
                    "prevs": [
                        "1.28.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ⊢ divides n d"
                },
                {
                    "args": "divides_def",
                    "id": "1.28.3",
                    "prevs": [
                        "1.28.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m d ∧ divides n d ⊢ ∃k. d = m * k"
                },
                {
                    "args": "k3, nat",
                    "id": "1.28.4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k3"
                },
                {
                    "args": "d = m * k3",
                    "id": "1.28.5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d = m * k3 ⊢ d = m * k3"
                },
                {
                    "args": "divides_self, {n: k2}",
                    "id": "1.28.6",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides k2 k2"
                },
                {
                    "args": "divides_rmul, {a: k2, d: k2, x: k3}",
                    "id": "1.28.7",
                    "prevs": [
                        "1.28.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides k2 (k2 * k3)"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.28.8",
                    "prevs": [
                        "1.19"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = gcd m n * k2 ⊢ gcd m n * k2 = m"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.28.9",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n = gcd m n * k1 ⊢ gcd m n * k1 = n"
                },
                {
                    "args": "",
                    "id": "1.28.10",
                    "prevs": [
                        "1.28.5",
                        "1.28.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "d = m * k3, divides m d ∧ divides n d ⊢ divides n (m * k3)"
                },
                {
                    "args": "divides (gcd m n * k1) (m * k3)",
                    "id": "1.28.11",
                    "prevs": [
                        "1.28.9",
                        "1.28.10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (gcd m n * k1) (m * k3)"
                },
                {
                    "args": "divides (gcd m n * k1) (gcd m n * k2 * k3)",
                    "id": "1.28.12",
                    "prevs": [
                        "1.28.8",
                        "1.28.11"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (gcd m n * k1) (gcd m n * k2 * k3)"
                },
                {
                    "args": "mult_assoc, divides (gcd m n * k1) (gcd m n * (k2 * k3))",
                    "id": "1.28.13",
                    "prevs": [
                        "1.28.12"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (gcd m n * k1) (gcd m n * (k2 * k3))"
                },
                {
                    "args": "divides_cmul2",
                    "id": "1.28.14",
                    "prevs": [
                        "1.28.13",
                        "1.13"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides k1 (k2 * k3)"
                },
                {
                    "args": "gcd_coprime",
                    "id": "1.28.15",
                    "prevs": [
                        "1.13",
                        "1.20",
                        "1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ coprime k2 k1"
                },
                {
                    "args": "divides_mul",
                    "id": "1.28.16",
                    "prevs": [
                        "1.28.7",
                        "1.28.14",
                        "1.28.15"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (k2 * k1) (k2 * k3)"
                },
                {
                    "args": "divides_mult_left, {k: gcd m n, m: k2 * k1, n: k2 * k3}",
                    "id": "1.28.17",
                    "prevs": [
                        "1.28.16"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (gcd m n * (k2 * k1)) (gcd m n * (k2 * k3))"
                },
                {
                    "args": "mult_assoc, divides (gcd m n * k2 * k1) (gcd m n * k2 * k3)",
                    "id": "1.28.18",
                    "prevs": [
                        "1.28.17"
                    ],
                    "rule": "rewrite_goal",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (gcd m n * k2 * k1) (gcd m n * k2 * k3)"
                },
                {
                    "args": "divides (m * k1) (m * k3)",
                    "id": "1.28.19",
                    "prevs": [
                        "1.19",
                        "1.28.18"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (m * k1) (m * k3)"
                },
                {
                    "args": "divides (m * k1) d",
                    "id": "1.28.20",
                    "prevs": [
                        "1.28.5",
                        "1.28.19"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (m * k1) d"
                },
                {
                    "args": "divides (m * n DIV gcd m n) d",
                    "id": "1.28.21",
                    "prevs": [
                        "1.15",
                        "1.28.20"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d = m * k3, ¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1, divides m d ∧ divides n d ⊢ divides (m * n DIV gcd m n) d"
                },
                {
                    "args": "∃k. d = m * k",
                    "id": "1.28.22",
                    "prevs": [
                        "1.28.0",
                        "1.28.3",
                        "1.28.4",
                        "1.28.5",
                        "1.28.21"
                    ],
                    "rule": "intros",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ divides m d ∧ divides n d ⟶ divides (m * n DIV gcd m n) d"
                },
                {
                    "args": "iffI",
                    "id": "1.29",
                    "prevs": [
                        "1.27",
                        "1.28"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ divides (m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "if_not_P, divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d",
                    "id": "1.30",
                    "prevs": [
                        "1.29",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0), m = gcd m n * k2, n = gcd m n * k1 ⊢ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "∃k. m = gcd m n * k, ∃k. n = gcd m n * k",
                    "id": "1.31",
                    "prevs": [
                        "1.0",
                        "1.2",
                        "1.3",
                        "1.4",
                        "1.17",
                        "1.18",
                        "1.19",
                        "1.30"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m * n = 0) ⟶ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (if m * n = 0 then 0 else m * n DIV gcd m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "lcm_def, divides (lcm m n) d ⟷ divides m d ∧ divides n d",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides (lcm m n) d ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (lcm m n) d ⟷ divides m d ∧ divides n d"
                }
            ],
            "prop": "divides (lcm m n) d ⟷ divides m d ∧ divides n d",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "m * n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_0"
                },
                {
                    "fact_ids": [
                        "0.1.1"
                    ],
                    "goal_id": "0.1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "0.1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_0"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_eq_0"
                },
                {
                    "fact_ids": [
                        "0.2.3"
                    ],
                    "goal_id": "0.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "0.2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.4.0",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.4.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.4.1"
                    ],
                    "goal_id": "0.2.4.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_0"
                },
                {
                    "goal_id": "0.2.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.5.0",
                        "0.2.2"
                    ],
                    "goal_id": "0.2.5.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0.2.5.1"
                    ],
                    "goal_id": "0.2.5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "gcd_divides2"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "exists_elim",
                    "names": "k1"
                },
                {
                    "goal": "m * n DIV gcd m n = m * k1",
                    "goal_id": "1.5",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "apply_backward_step",
                    "param_r": "(0::nat)",
                    "theorem": "div_uniq"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1.10",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "1.10",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_zero"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.10",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.10",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.10",
                    "method_name": "z3"
                },
                {
                    "goal_id": "1.16",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "gcd_divide1"
                },
                {
                    "fact_ids": [
                        "1.16"
                    ],
                    "goal_id": "1.17",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1.17"
                    ],
                    "goal_id": "1.18",
                    "method_name": "exists_elim",
                    "names": "k2"
                },
                {
                    "goal": "m * n DIV gcd m n = k2 * n",
                    "goal_id": "1.20",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "apply_backward_step",
                    "param_r": "(0::nat)",
                    "theorem": "div_uniq"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1.20",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1.27",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.27",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.27.0"
                    ],
                    "goal_id": "1.27.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1.27.1"
                    ],
                    "goal_id": "1.27.2",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "1.27.3"
                    ],
                    "goal_id": "1.27.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.27.4",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.27.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "fact_ids": [
                        "1.15"
                    ],
                    "goal_id": "1.27.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.27.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "1.27.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1.27.8",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "fact_ids": [
                        "1.26"
                    ],
                    "goal_id": "1.27.8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.27.8",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.27.8",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1.28",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.28.0"
                    ],
                    "goal_id": "1.28.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.28.0"
                    ],
                    "goal_id": "1.28.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.15"
                    ],
                    "goal_id": "1.28.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.28.1"
                    ],
                    "goal_id": "1.28.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1.28.3"
                    ],
                    "goal_id": "1.28.4",
                    "method_name": "exists_elim",
                    "names": "k3"
                },
                {
                    "fact_ids": [
                        "1.28.5"
                    ],
                    "goal_id": "1.28.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.19"
                    ],
                    "goal_id": "1.28.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.28.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "1.28.6",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "goal_id": "1.28.6",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mul"
                },
                {
                    "goal_id": "1.28.6",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "1.28.6",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1.28.8",
                    "method_name": "apply_backward_step",
                    "param_c": "gcd m n",
                    "theorem": "divides_cmul2"
                },
                {
                    "goal_id": "1.28.8",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "1.19"
                    ],
                    "goal_id": "1.28.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.28.9",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.28.8"
                    ],
                    "goal_id": "1.28.10",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.28.9"
                    ],
                    "goal_id": "1.28.10",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.28.5",
                        "1.28.2"
                    ],
                    "goal_id": "1.28.10",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "1.28.15",
                    "method_name": "apply_backward_step",
                    "param_a": "m",
                    "param_b": "n",
                    "theorem": "gcd_coprime"
                }
            ],
            "ty": "thm",
            "vars": {
                "d": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_backward"
            ],
            "name": "lcm_sym",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_comm, {x: m, y: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m * n = n * m"
                },
                {
                    "args": "gcd_comm, {m: m, n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ gcd m n = gcd n m"
                },
                {
                    "args": "(if n * m = 0 then 0 else n * m DIV gcd m n) = (if n * m = 0 then 0 else n * m DIV gcd n m)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ (if n * m = 0 then 0 else n * m DIV gcd m n) = (if n * m = 0 then 0 else n * m DIV gcd n m)"
                },
                {
                    "args": "(if m * n = 0 then 0 else m * n DIV gcd m n) = (if n * m = 0 then 0 else n * m DIV gcd n m)",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) = (if n * m = 0 then 0 else n * m DIV gcd n m)"
                },
                {
                    "args": "lcm_def, lcm m n = lcm n m",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm m n = lcm n m"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n = lcm n m"
                }
            ],
            "prop": "lcm m n = lcm n m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_x": "m",
                    "param_y": "n",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "gcd_comm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lcm1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m * n = 0 ⟶ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "m * n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "divides_zero, {n: m}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m 0"
                },
                {
                    "args": "if_P, divides m (if m * n = 0 then 0 else m * n DIV gcd m n)",
                    "id": "0.2",
                    "prevs": [
                        "0.1",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * n = 0 ⊢ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = 0 ⟶ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m * n = 0) ⟶ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "¬(m * n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_lmul, {a: n, d: gcd m n, x: m}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0) ⊢ divides (gcd m n) (m * n)"
                },
                {
                    "args": "divides_divides_div, {e: m}",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0) ⊢ divides m (m * n DIV gcd m n) ⟷ divides (gcd m n * m) (m * n)"
                },
                {
                    "args": "mult_comm, {x: gcd m n, y: m}",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ gcd m n * m = m * gcd m n"
                },
                {
                    "args": "divides_mult_left, {k: m, m: gcd m n, n: n}",
                    "id": "1.5",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0) ⊢ divides (m * gcd m n) (m * n)"
                },
                {
                    "args": "divides (gcd m n * m) (m * n)",
                    "id": "1.6",
                    "prevs": [
                        "1.4",
                        "1.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m * n = 0) ⊢ divides (gcd m n * m) (m * n)"
                },
                {
                    "args": "divides m (m * n DIV gcd m n)",
                    "id": "1.7",
                    "prevs": [
                        "1.3",
                        "1.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m * n = 0) ⊢ divides m (m * n DIV gcd m n)"
                },
                {
                    "args": "if_not_P, divides m (if m * n = 0 then 0 else m * n DIV gcd m n)",
                    "id": "1.8",
                    "prevs": [
                        "1.7",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0) ⊢ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "",
                    "id": "1.9",
                    "prevs": [
                        "1.0",
                        "1.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m * n = 0) ⟶ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides m (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "lcm_def, divides m (lcm m n)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides m (lcm m n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m (lcm m n)"
                }
            ],
            "prop": "divides m (lcm m n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "m * n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "divides (gcd m n) (m * n)",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "apply_forward_step",
                    "param_e": "m",
                    "theorem": "divides_divides_div"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "gcd m n * m = m * gcd m n",
                    "goal_id": "1.4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "mult_comm"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lcm2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "lcm1, {m: n, n: m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n (lcm n m)"
                },
                {
                    "args": "lcm_sym, divides n (lcm m n)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides n (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n (lcm m n)"
                }
            ],
            "prop": "divides n (lcm m n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_sym"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "lcm3",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m d",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m d ⊢ divides m d"
                },
                {
                    "args": "divides n d",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n d ⊢ divides n d"
                },
                {
                    "args": "conjI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d, divides n d ⊢ divides m d ∧ divides n d"
                },
                {
                    "args": "lcm_divides, divides (lcm m n) d",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m d, divides n d ⊢ divides (lcm m n) d"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m d ⟶ divides n d ⟶ divides (lcm m n) d"
                }
            ],
            "prop": "divides m d ⟶ divides n d ⟶ divides (lcm m n) d",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_divides"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                }
            ],
            "ty": "thm",
            "vars": {
                "d": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lcm_divides_mul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides_self, {n: m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "divides_rmul, {a: m, d: m, x: n}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m (m * n)"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "divides_lmul, {a: n, d: n, x: m}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n (m * n)"
                },
                {
                    "args": "lcm3",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (lcm m n) (m * n)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (lcm m n) (m * n)"
                }
            ],
            "prop": "divides (lcm m n) (m * n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm3"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lcm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides r m ∨ divides r n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides r m ∨ divides r n ⊢ divides r m ∨ divides r n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides r m ∨ divides r n ⊢ divides r m ⟶ divides r (lcm m n)"
                },
                {
                    "args": "divides r m",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides r m ⊢ divides r m"
                },
                {
                    "args": "lcm1, {m: m, n: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m (lcm m n)"
                },
                {
                    "args": "divides_trans",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides r m, divides r m ∨ divides r n ⊢ divides r (lcm m n)"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "divides r m ∨ divides r n ⊢ divides r m ⟶ divides r (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides r m ∨ divides r n ⊢ divides r n ⟶ divides r (lcm m n)"
                },
                {
                    "args": "divides r n",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides r n ⊢ divides r n"
                },
                {
                    "args": "lcm2, {m: m, n: n}",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n (lcm m n)"
                },
                {
                    "args": "divides_trans",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides r n, divides r m ∨ divides r n ⊢ divides r (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "divides r m ∨ divides r n ⊢ divides r n ⟶ divides r (lcm m n)"
                },
                {
                    "args": "disjE",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides r m ∨ divides r n ⊢ divides r (lcm m n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides r m ∨ divides r n ⟶ divides r (lcm m n)"
                }
            ],
            "prop": "divides r m ∨ divides r n ⟶ divides r (lcm m n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "param_m": "m",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "param_m": "n",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "r": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_backward"
            ],
            "name": "lcm_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_times_def_1, 0 * n = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * n = 0"
                },
                {
                    "args": "if_P, (if 0 * n = 0 then 0 else 0 * n DIV gcd 0 n) = 0",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 0 * n = 0 then 0 else 0 * n DIV gcd 0 n) = 0"
                },
                {
                    "args": "lcm_def, lcm 0 n = 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm 0 n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm 0 n = 0"
                }
            ],
            "prop": "lcm 0 n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "goal": "0 * n = 0",
                    "goal_id": "0",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_rewrite"
            ],
            "name": "lcm_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "(if n = 0 then 0 else n) = n",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (if n = 0 then 0 else n) = n"
                },
                {
                    "args": "div_1, (if n = 0 then 0 else n DIV 1) = n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if n = 0 then 0 else n DIV 1) = n"
                },
                {
                    "args": "mult_1_left, (if 1 * n = 0 then 0 else 1 * n DIV 1) = n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 1 * n = 0 then 0 else 1 * n DIV 1) = n"
                },
                {
                    "args": "gcd_1_left, (if 1 * n = 0 then 0 else 1 * n DIV gcd 1 n) = n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 1 * n = 0 then 0 else 1 * n DIV gcd 1 n) = n"
                },
                {
                    "args": "lcm_def, lcm 1 n = n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm 1 n = n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm 1 n = n"
                }
            ],
            "prop": "lcm 1 n = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_1_left"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "div_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_lcm_gcd",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m * n = 0 ⟶ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "m * n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * n = 0 ⊢ divides d 0 ⟶ divides (d * gcd m n) 0"
                },
                {
                    "args": "divides d 0",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d 0 ⊢ divides d 0"
                },
                {
                    "args": "divides_zero, {n: d * gcd m n}",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (d * gcd m n) 0"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "m * n = 0 ⊢ divides d 0 ⟶ divides (d * gcd m n) 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m * n = 0 ⊢ divides (d * gcd m n) 0 ⟶ divides d 0"
                },
                {
                    "args": "divides (d * gcd m n) 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (d * gcd m n) 0 ⊢ divides (d * gcd m n) 0"
                },
                {
                    "args": "divides_zero, {n: d}",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides d 0"
                },
                {
                    "args": "",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.0",
                        "0.2.1"
                    ],
                    "rule": "intros",
                    "th": "m * n = 0 ⊢ divides (d * gcd m n) 0 ⟶ divides d 0"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m * n = 0 ⊢ divides d 0 ⟷ divides (d * gcd m n) 0"
                },
                {
                    "args": "divides d 0 ⟷ divides (d * gcd m n) (m * n)",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m * n = 0 ⊢ divides d 0 ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "if_P, divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)",
                    "id": "0.5",
                    "prevs": [
                        "0.4",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * n = 0 ⊢ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = 0 ⟶ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m * n = 0) ⟶ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "¬(m * n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "mult_comm, {x: d, y: gcd m n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ d * gcd m n = gcd m n * d"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_lmul, {a: n, d: gcd m n, x: m}",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0) ⊢ divides (gcd m n) (m * n)"
                },
                {
                    "args": "divides_divides_div, {d: gcd m n, e: d, n: m * n}",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0) ⊢ divides d (m * n DIV gcd m n) ⟷ divides (gcd m n * d) (m * n)"
                },
                {
                    "args": "divides d (m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)",
                    "id": "1.5",
                    "prevs": [
                        "1.1",
                        "1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m * n = 0) ⊢ divides d (m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "if_not_P, divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)",
                    "id": "1.6",
                    "prevs": [
                        "1.5",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0) ⊢ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m * n = 0) ⟶ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides d (if m * n = 0 then 0 else m * n DIV gcd m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "lcm_def, divides d (lcm m n) ⟷ divides (d * gcd m n) (m * n)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides d (lcm m n) ⟷ divides (d * gcd m n) (m * n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d (lcm m n) ⟷ divides (d * gcd m n) (m * n)"
                }
            ],
            "prop": "divides d (lcm m n) ⟷ divides (d * gcd m n) (m * n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "m * n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "d * gcd m n = gcd m n * d",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "mult_comm"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_divides_div"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                }
            ],
            "ty": "thm",
            "vars": {
                "d": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "primepow_divides_lcm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "prime p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "prime p ⊢ prime p"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p ⊢ divides (p ^ k) (lcm m n) ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "divides (p ^ k) (lcm m n)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) (lcm m n)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, divides (p ^ k) (lcm m n) ⊢ m = 0 ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "m = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "divides_zero, {n: p ^ k}",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (p ^ k) 0"
                },
                {
                    "args": "divides (p ^ k) m",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, m = 0, divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) m"
                },
                {
                    "args": "disjI1, {A: divides (p ^ k) m, B: divides (p ^ k) n}",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, m = 0, divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, divides (p ^ k) (lcm m n) ⊢ m = 0 ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, divides (p ^ k) (lcm m n) ⊢ ¬(m = 0) ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ n = 0 ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "divides_zero, {n: p ^ k}",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (p ^ k) 0"
                },
                {
                    "args": "divides (p ^ k) n",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, n = 0, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) n"
                },
                {
                    "args": "disjI2, {A: divides (p ^ k) m, B: divides (p ^ k) n}",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, n = 0, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ n = 0 ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ ¬(n = 0) ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "prime_ge_2",
                    "id": "1.2.2.1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p ⊢ 2 ≤ p"
                },
                {
                    "args": "factorization_index",
                    "id": "1.2.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0) ⊢ ∃k::nat. divides (p ^ k) m ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) m))"
                },
                {
                    "args": "factorization_index",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(n = 0) ⊢ ∃k::nat. divides (p ^ k) n ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) n))"
                },
                {
                    "args": "a, nat",
                    "id": "1.2.2.4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m))",
                    "id": "1.2.2.5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m))"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.2.6",
                    "prevs": [
                        "1.2.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ divides (p ^ a) m"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.2.7",
                    "prevs": [
                        "1.2.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ ∀l. a < l ⟶ ¬(divides (p ^ l) m)"
                },
                {
                    "args": "divides_def",
                    "id": "1.2.2.8",
                    "prevs": [
                        "1.2.2.6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ ∃k. m = p ^ a * k"
                },
                {
                    "args": "q, nat",
                    "id": "1.2.2.9",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "m = p ^ a * q",
                    "id": "1.2.2.10",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = p ^ a * q ⊢ m = p ^ a * q"
                },
                {
                    "args": "b, nat",
                    "id": "1.2.2.11",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n))",
                    "id": "1.2.2.12",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n))"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.2.13",
                    "prevs": [
                        "1.2.2.12"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ b) n"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.2.14",
                    "prevs": [
                        "1.2.2.12"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ∀l. b < l ⟶ ¬(divides (p ^ l) n)"
                },
                {
                    "args": "divides_def",
                    "id": "1.2.2.15",
                    "prevs": [
                        "1.2.2.13"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ∃k. n = p ^ b * k"
                },
                {
                    "args": "r, nat",
                    "id": "1.2.2.16",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR r"
                },
                {
                    "args": "n = p ^ b * r",
                    "id": "1.2.2.17",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = p ^ b * r ⊢ n = p ^ b * r"
                },
                {
                    "args": "divides_lcm_gcd",
                    "id": "1.2.2.18",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ k) (lcm m n) ⊢ divides (p ^ k * gcd m n) (m * n)"
                },
                {
                    "args": "",
                    "id": "1.2.2.19",
                    "prevs": [
                        "1.2.2.10",
                        "1.2.2.18"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = p ^ a * q, divides (p ^ k) (lcm m n) ⊢ divides (p ^ k * gcd (p ^ a * q) n) (p ^ a * q * n)"
                },
                {
                    "args": "",
                    "id": "1.2.2.20",
                    "prevs": [
                        "1.2.2.17",
                        "1.2.2.19"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n) ⊢ divides (p ^ k * gcd (p ^ a * q) (p ^ b * r)) (p ^ a * q * (p ^ b * r))"
                },
                {
                    "args": "min a b + (a - min a b) = a",
                    "id": "1.2.2.21",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ min a b + (a - min a b) = a"
                },
                {
                    "args": "min a b + (b - min a b) = b",
                    "id": "1.2.2.22",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ min a b + (b - min a b) = b"
                },
                {
                    "args": "gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ a * q) (p ^ (min a b + (b - min a b)) * r)",
                    "id": "1.2.2.23",
                    "prevs": [
                        "1.2.2.22"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ a * q) (p ^ (min a b + (b - min a b)) * r)"
                },
                {
                    "args": "gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ (min a b + (a - min a b)) * q) (p ^ (min a b + (b - min a b)) * r)",
                    "id": "1.2.2.24",
                    "prevs": [
                        "1.2.2.21",
                        "1.2.2.23"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ (min a b + (a - min a b)) * q) (p ^ (min a b + (b - min a b)) * r)"
                },
                {
                    "args": "nat_power_add, gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ min a b * p ^ (a - min a b) * q) (p ^ min a b * p ^ (b - min a b) * r)",
                    "id": "1.2.2.25",
                    "prevs": [
                        "1.2.2.24"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ min a b * p ^ (a - min a b) * q) (p ^ min a b * p ^ (b - min a b) * r)"
                },
                {
                    "args": "mult_assoc, gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ min a b * (p ^ (a - min a b) * q)) (p ^ min a b * (p ^ (b - min a b) * r))",
                    "id": "1.2.2.26",
                    "prevs": [
                        "1.2.2.25"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ gcd (p ^ a * q) (p ^ b * r) = gcd (p ^ min a b * (p ^ (a - min a b) * q)) (p ^ min a b * (p ^ (b - min a b) * r))"
                },
                {
                    "args": "gcd_mult_left, gcd (p ^ a * q) (p ^ b * r) = p ^ min a b * gcd (p ^ (a - min a b) * q) (p ^ (b - min a b) * r)",
                    "id": "1.2.2.27",
                    "prevs": [
                        "1.2.2.26"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ gcd (p ^ a * q) (p ^ b * r) = p ^ min a b * gcd (p ^ (a - min a b) * q) (p ^ (b - min a b) * r)"
                },
                {
                    "args": "",
                    "id": "1.2.2.28",
                    "prevs": [
                        "1.2.2.27",
                        "1.2.2.20"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k * (p ^ min a b * gcd (p ^ (a - min a b) * q) (p ^ (b - min a b) * r))) (p ^ a * q * (p ^ b * r))"
                },
                {
                    "args": "mult_assoc",
                    "id": "1.2.2.29",
                    "prevs": [
                        "1.2.2.28"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k * p ^ min a b * gcd (p ^ (a - min a b) * q) (p ^ (b - min a b) * r)) (p ^ a * q * p ^ b * r)"
                },
                {
                    "args": "nat_power_add",
                    "id": "1.2.2.30",
                    "prevs": [
                        "1.2.2.29"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ (k + min a b) * gcd (p ^ (a - min a b) * q) (p ^ (b - min a b) * r)) (p ^ a * q * p ^ b * r)"
                },
                {
                    "args": "divides_rmul2",
                    "id": "1.2.2.31",
                    "prevs": [
                        "1.2.2.30"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ (k + min a b)) (p ^ a * q * p ^ b * r)"
                },
                {
                    "args": "p ^ a * q * p ^ b * r = q * r * (p ^ a * p ^ b)",
                    "id": "1.2.2.32",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ p ^ a * q * p ^ b * r = q * r * (p ^ a * p ^ b)"
                },
                {
                    "args": "nat_power_add, p ^ a * q * p ^ b * r = q * r * p ^ (a + b)",
                    "id": "1.2.2.33",
                    "prevs": [
                        "1.2.2.32"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ p ^ a * q * p ^ b * r = q * r * p ^ (a + b)"
                },
                {
                    "args": "",
                    "id": "1.2.2.34",
                    "prevs": [
                        "1.2.2.33",
                        "1.2.2.31"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ (k + min a b)) (q * r * p ^ (a + b))"
                },
                {
                    "args": "coprime_exp_divprod",
                    "id": "1.2.2.35",
                    "prevs": [
                        "1.2.2.34"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ coprime p (q * r) ⟶ divides (p ^ (k + min a b)) (p ^ (a + b))"
                },
                {
                    "args": "prime_coprime_eq_nondivisiable",
                    "id": "1.2.2.36",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "prime p ⊢ ∀n. coprime p n ⟷ ¬(divides p n)"
                },
                {
                    "args": "a + 1",
                    "id": "1.2.2.37",
                    "prevs": [
                        "1.2.2.7"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ a < a + 1 ⟶ ¬(divides (p ^ (a + 1)) m)"
                },
                {
                    "args": "a < a + 1",
                    "id": "1.2.2.38",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ a < a + 1"
                },
                {
                    "args": "",
                    "id": "1.2.2.39",
                    "prevs": [
                        "1.2.2.37",
                        "1.2.2.38"
                    ],
                    "rule": "apply_fact",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ ¬(divides (p ^ (a + 1)) m)"
                },
                {
                    "args": "nat_power_add",
                    "id": "1.2.2.40",
                    "prevs": [
                        "1.2.2.39"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ ¬(divides (p ^ a * p ^ (1::nat)) m)"
                },
                {
                    "args": "exp_1",
                    "id": "1.2.2.41",
                    "prevs": [
                        "1.2.2.40"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ ¬(divides (p ^ a * p) m)"
                },
                {
                    "args": "",
                    "id": "1.2.2.42",
                    "prevs": [
                        "1.2.2.10",
                        "1.2.2.41"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = p ^ a * q, divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)) ⊢ ¬(divides (p ^ a * p) (p ^ a * q))"
                },
                {
                    "args": "",
                    "id": "1.2.2.43",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides p q ⟶ divides (p ^ a * p) (p ^ a * q)"
                },
                {
                    "args": "divides p q",
                    "id": "1.2.2.43.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides p q ⊢ divides p q"
                },
                {
                    "args": "divides_mult_left, {k: p ^ a, m: p, n: q}",
                    "id": "1.2.2.43.1",
                    "prevs": [
                        "1.2.2.43.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides p q ⊢ divides (p ^ a * p) (p ^ a * q)"
                },
                {
                    "args": "",
                    "id": "1.2.2.43.2",
                    "prevs": [
                        "1.2.2.43.0",
                        "1.2.2.43.1"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides p q ⟶ divides (p ^ a * p) (p ^ a * q)"
                },
                {
                    "args": "double_neg, ¬¬(divides p q) ⟶ ¬¬(divides (p ^ a * p) (p ^ a * q))",
                    "id": "1.2.2.44",
                    "prevs": [
                        "1.2.2.43"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬¬(divides p q) ⟶ ¬¬(divides (p ^ a * p) (p ^ a * q))"
                },
                {
                    "args": "contrapositive",
                    "id": "1.2.2.45",
                    "prevs": [
                        "1.2.2.42",
                        "1.2.2.44"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬(divides p q)"
                },
                {
                    "args": "b + 1",
                    "id": "1.2.2.46",
                    "prevs": [
                        "1.2.2.14"
                    ],
                    "rule": "forall_elim_gen",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ b < b + 1 ⟶ ¬(divides (p ^ (b + 1)) n)"
                },
                {
                    "args": "b < b + 1",
                    "id": "1.2.2.47",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ b < b + 1"
                },
                {
                    "args": "",
                    "id": "1.2.2.48",
                    "prevs": [
                        "1.2.2.46",
                        "1.2.2.47"
                    ],
                    "rule": "apply_fact",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬(divides (p ^ (b + 1)) n)"
                },
                {
                    "args": "nat_power_add",
                    "id": "1.2.2.49",
                    "prevs": [
                        "1.2.2.48"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬(divides (p ^ b * p ^ (1::nat)) n)"
                },
                {
                    "args": "exp_1",
                    "id": "1.2.2.50",
                    "prevs": [
                        "1.2.2.49"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬(divides (p ^ b * p) n)"
                },
                {
                    "args": "",
                    "id": "1.2.2.51",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides p r ⟶ divides (p ^ b * p) n"
                },
                {
                    "args": "divides p r",
                    "id": "1.2.2.51.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides p r ⊢ divides p r"
                },
                {
                    "args": "divides_mult_left, {k: p ^ b, m: p, n: r}",
                    "id": "1.2.2.51.1",
                    "prevs": [
                        "1.2.2.51.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides p r ⊢ divides (p ^ b * p) (p ^ b * r)"
                },
                {
                    "args": "divides (p ^ b * p) n",
                    "id": "1.2.2.51.2",
                    "prevs": [
                        "1.2.2.17",
                        "1.2.2.51.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, divides p r, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ b * p) n"
                },
                {
                    "args": "",
                    "id": "1.2.2.51.3",
                    "prevs": [
                        "1.2.2.51.0",
                        "1.2.2.51.2"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides p r ⟶ divides (p ^ b * p) n"
                },
                {
                    "args": "double_neg, ¬¬(divides p r) ⟶ ¬¬(divides (p ^ b * p) n)",
                    "id": "1.2.2.52",
                    "prevs": [
                        "1.2.2.51"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬¬(divides p r) ⟶ ¬¬(divides (p ^ b * p) n)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.2.2.53",
                    "prevs": [
                        "1.2.2.50",
                        "1.2.2.52"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬(divides p r)"
                },
                {
                    "args": "conjI",
                    "id": "1.2.2.54",
                    "prevs": [
                        "1.2.2.45",
                        "1.2.2.53"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ ¬(divides p q) ∧ ¬(divides p r)"
                },
                {
                    "args": "coprime p q ∧ coprime p r",
                    "id": "1.2.2.55",
                    "prevs": [
                        "1.2.2.36",
                        "1.2.2.54"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ coprime p q ∧ coprime p r"
                },
                {
                    "args": "coprime_rmul, coprime p (q * r)",
                    "id": "1.2.2.56",
                    "prevs": [
                        "1.2.2.55"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ coprime p (q * r)"
                },
                {
                    "args": "",
                    "id": "1.2.2.57",
                    "prevs": [
                        "1.2.2.35",
                        "1.2.2.56"
                    ],
                    "rule": "apply_fact",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ (k + min a b)) (p ^ (a + b))"
                },
                {
                    "args": "divides_exp_le, {m: k + min a b, n: a + b}",
                    "id": "1.2.2.58",
                    "prevs": [
                        "1.2.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p ⊢ divides (p ^ (k + min a b)) (p ^ (a + b)) ⟷ k + min a b ≤ a + b"
                },
                {
                    "args": "",
                    "id": "1.2.2.59",
                    "prevs": [
                        "1.2.2.58",
                        "1.2.2.57"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ k + min a b ≤ a + b"
                },
                {
                    "args": "k ≤ a ∨ k ≤ b",
                    "id": "1.2.2.60",
                    "prevs": [
                        "1.2.2.59"
                    ],
                    "rule": "z3",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ k ≤ a ∨ k ≤ b"
                },
                {
                    "args": "",
                    "id": "1.2.2.61",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ k ≤ a ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "k ≤ a",
                    "id": "1.2.2.61.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ a ⊢ k ≤ a"
                },
                {
                    "args": "divides_exp_le_imp, {m: k, n: a, p: p}",
                    "id": "1.2.2.61.1",
                    "prevs": [
                        "1.2.2.61.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ a, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) (p ^ a)"
                },
                {
                    "args": "divides_rmul, {a: p ^ a, d: p ^ k, x: q}",
                    "id": "1.2.2.61.2",
                    "prevs": [
                        "1.2.2.61.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ a, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) (p ^ a * q)"
                },
                {
                    "args": "divides (p ^ k) m",
                    "id": "1.2.2.61.3",
                    "prevs": [
                        "1.2.2.10",
                        "1.2.2.61.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, k ≤ a, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) m"
                },
                {
                    "args": "disjI1, {A: divides (p ^ k) m, B: divides (p ^ k) n}",
                    "id": "1.2.2.61.4",
                    "prevs": [
                        "1.2.2.61.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ a, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2.2.61.5",
                    "prevs": [
                        "1.2.2.61.0",
                        "1.2.2.61.4"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ k ≤ a ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2.2.62",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ k ≤ b ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "k ≤ b",
                    "id": "1.2.2.62.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ b ⊢ k ≤ b"
                },
                {
                    "args": "divides_exp_le_imp, {m: k, n: b, p: p}",
                    "id": "1.2.2.62.1",
                    "prevs": [
                        "1.2.2.62.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ b, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) (p ^ b)"
                },
                {
                    "args": "divides_rmul, {a: p ^ b, d: p ^ k, x: r}",
                    "id": "1.2.2.62.2",
                    "prevs": [
                        "1.2.2.62.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ b, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) (p ^ b * r)"
                },
                {
                    "args": "divides (p ^ k) n",
                    "id": "1.2.2.62.3",
                    "prevs": [
                        "1.2.2.17",
                        "1.2.2.62.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, k ≤ b, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) n"
                },
                {
                    "args": "disjI2, {A: divides (p ^ k) m, B: divides (p ^ k) n}",
                    "id": "1.2.2.62.4",
                    "prevs": [
                        "1.2.2.62.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ b, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2.2.62.5",
                    "prevs": [
                        "1.2.2.62.0",
                        "1.2.2.62.4"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ k ≤ b ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "disjE",
                    "id": "1.2.2.63",
                    "prevs": [
                        "1.2.2.60",
                        "1.2.2.61",
                        "1.2.2.62"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), ¬(n = 0), m = p ^ a * q, n = p ^ b * r, divides (p ^ k) (lcm m n), divides (p ^ a) m ∧ (∀l. a < l ⟶ ¬(divides (p ^ l) m)), divides (p ^ b) n ∧ (∀l. b < l ⟶ ¬(divides (p ^ l) n)) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "∃k. n = p ^ b * k, ∃k::nat. divides (p ^ k) n ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) n)), ∃k. m = p ^ a * k, ∃k::nat. divides (p ^ k) m ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) m))",
                    "id": "1.2.2.64",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.2",
                        "1.2.2.4",
                        "1.2.2.5",
                        "1.2.2.8",
                        "1.2.2.9",
                        "1.2.2.10",
                        "1.2.2.3",
                        "1.2.2.11",
                        "1.2.2.12",
                        "1.2.2.15",
                        "1.2.2.16",
                        "1.2.2.17",
                        "1.2.2.63"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ ¬(n = 0) ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0), divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.0",
                        "1.2.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, divides (p ^ k) (lcm m n) ⊢ ¬(m = 0) ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, divides (p ^ k) (lcm m n) ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "prime p ⊢ divides (p ^ k) (lcm m n) ⟶ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p ⊢ divides (p ^ k) m ∨ divides (p ^ k) n ⟶ divides (p ^ k) (lcm m n)"
                },
                {
                    "args": "divides (p ^ k) m ∨ divides (p ^ k) n",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ k) m ∨ divides (p ^ k) n ⊢ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "divides_lcm",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ k) m ∨ divides (p ^ k) n ⊢ divides (p ^ k) (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "prime p ⊢ divides (p ^ k) m ∨ divides (p ^ k) n ⟶ divides (p ^ k) (lcm m n)"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p ⊢ divides (p ^ k) (lcm m n) ⟷ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ prime p ⟶ divides (p ^ k) (lcm m n) ⟷ divides (p ^ k) m ∨ divides (p ^ k) n"
                }
            ],
            "prop": "prime p ⟶ divides (p ^ k) (lcm m n) ⟷ divides (p ^ k) m ∨ divides (p ^ k) n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "m=0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "case": "n=0",
                    "goal_id": "1.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "prime_ge_2"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.2.2.1"
                    ],
                    "goal_id": "1.2.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "factorization_index"
                },
                {
                    "fact_ids": [
                        "1.2.2.0",
                        "1.2.2.1"
                    ],
                    "goal_id": "1.2.2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "factorization_index"
                },
                {
                    "fact_ids": [
                        "1.2.2.2"
                    ],
                    "goal_id": "1.2.2.4",
                    "method_name": "exists_elim",
                    "names": "a"
                },
                {
                    "fact_ids": [
                        "1.2.2.5"
                    ],
                    "goal_id": "1.2.2.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.2.5"
                    ],
                    "goal_id": "1.2.2.7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.2.6"
                    ],
                    "goal_id": "1.2.2.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1.2.2.8"
                    ],
                    "goal_id": "1.2.2.9",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "fact_ids": [
                        "1.2.2.3"
                    ],
                    "goal_id": "1.2.2.11",
                    "method_name": "exists_elim",
                    "names": "b"
                },
                {
                    "fact_ids": [
                        "1.2.2.12"
                    ],
                    "goal_id": "1.2.2.13",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.2.12"
                    ],
                    "goal_id": "1.2.2.14",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.2.13"
                    ],
                    "goal_id": "1.2.2.15",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1.2.2.15"
                    ],
                    "goal_id": "1.2.2.16",
                    "method_name": "exists_elim",
                    "names": "r"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2.2.18",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_lcm_gcd"
                },
                {
                    "fact_ids": [
                        "1.2.2.10",
                        "1.2.2.18"
                    ],
                    "goal_id": "1.2.2.19",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.17",
                        "1.2.2.19"
                    ],
                    "goal_id": "1.2.2.20",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal": "gcd (p ^ a * q) (p ^ b * r) =\n    p ^ (min a b) * (gcd (p ^ (a - min a b) * q) (p ^ (b - min a b) * r))",
                    "goal_id": "1.2.2.21",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.21",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "gcd_mult_left"
                },
                {
                    "goal_id": "1.2.2.21",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "1.2.2.21",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "nat_power_add"
                },
                {
                    "goal": "min a b + (a - min a b) = a",
                    "goal_id": "1.2.2.21",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.21",
                    "method_name": "z3"
                },
                {
                    "goal": "min a b + (b - min a b) = b",
                    "goal_id": "1.2.2.22",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.22",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.2.21"
                    ],
                    "goal_id": "1.2.2.23",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.22"
                    ],
                    "goal_id": "1.2.2.23",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.27",
                        "1.2.2.20"
                    ],
                    "goal_id": "1.2.2.28",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.28"
                    ],
                    "goal_id": "1.2.2.29",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "1.2.2.29"
                    ],
                    "goal_id": "1.2.2.30",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "nat_power_add"
                },
                {
                    "fact_ids": [
                        "1.2.2.30"
                    ],
                    "goal_id": "1.2.2.31",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_rmul2"
                },
                {
                    "goal": "p ^ a * q * p ^ b * r = (q * r) * p ^ (a + b) ",
                    "goal_id": "1.2.2.32",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.32",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_power_add"
                },
                {
                    "goal_id": "1.2.2.32",
                    "method_name": "nat_norm"
                },
                {
                    "fact_ids": [
                        "1.2.2.33",
                        "1.2.2.31"
                    ],
                    "goal_id": "1.2.2.34",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.34"
                    ],
                    "goal_id": "1.2.2.35",
                    "method_name": "apply_forward_step",
                    "theorem": "coprime_exp_divprod"
                },
                {
                    "goal": "coprime p (q * r)",
                    "goal_id": "1.2.2.36",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.36",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "coprime_rmul"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1.2.2.36",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "prime_coprime_eq_nondivisiable"
                },
                {
                    "fact_ids": [
                        "1.2.2.36"
                    ],
                    "goal_id": "1.2.2.37",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.2.37",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.2.2.7"
                    ],
                    "goal_id": "1.2.2.37",
                    "method_name": "forall_elim",
                    "s": "a+1"
                },
                {
                    "goal": "a < a + 1",
                    "goal_id": "1.2.2.38",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.38",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.2.37",
                        "1.2.2.38"
                    ],
                    "goal_id": "1.2.2.39",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.2.2.39"
                    ],
                    "goal_id": "1.2.2.40",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_power_add"
                },
                {
                    "fact_ids": [
                        "1.2.2.40"
                    ],
                    "goal_id": "1.2.2.41",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "exp_1"
                },
                {
                    "fact_ids": [
                        "1.2.2.10",
                        "1.2.2.41"
                    ],
                    "goal_id": "1.2.2.42",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.42"
                    ],
                    "goal_id": "1.2.2.43",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2.2.43",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.2.2.43",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.43.0"
                    ],
                    "goal_id": "1.2.2.43.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "fact_ids": [
                        "1.2.2.14"
                    ],
                    "goal_id": "1.2.2.46",
                    "method_name": "forall_elim",
                    "s": "b+1"
                },
                {
                    "goal": "b < b + 1",
                    "goal_id": "1.2.2.47",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2.47",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.2.46",
                        "1.2.2.47"
                    ],
                    "goal_id": "1.2.2.48",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.2.2.48"
                    ],
                    "goal_id": "1.2.2.49",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_power_add"
                },
                {
                    "fact_ids": [
                        "1.2.2.49"
                    ],
                    "goal_id": "1.2.2.50",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "exp_1"
                },
                {
                    "fact_ids": [
                        "1.2.2.50"
                    ],
                    "goal_id": "1.2.2.51",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2.2.51",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "goal_id": "1.2.2.51",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.17"
                    ],
                    "goal_id": "1.2.2.51.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2.2.51.0"
                    ],
                    "goal_id": "1.2.2.51.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "fact_ids": [
                        "1.2.2.35",
                        "1.2.2.56"
                    ],
                    "goal_id": "1.2.2.57",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.2.2.1"
                    ],
                    "goal_id": "1.2.2.58",
                    "method_name": "apply_forward_step",
                    "param_m": "k + min a b",
                    "param_n": "a + b",
                    "theorem": "divides_exp_le"
                },
                {
                    "fact_ids": [
                        "1.2.2.58",
                        "1.2.2.57"
                    ],
                    "goal_id": "1.2.2.59",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal": "k<=a | k<=b",
                    "goal_id": "1.2.2.60",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.2.59"
                    ],
                    "goal_id": "1.2.2.60",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.2.60"
                    ],
                    "goal_id": "1.2.2.61",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.2.2.61",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.61.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "1.2.2.10"
                    ],
                    "goal_id": "1.2.2.61.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.2.61.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "1.2.2.61.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_exp_le_imp"
                },
                {
                    "goal_id": "1.2.2.62",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.62.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "1.2.2.17"
                    ],
                    "goal_id": "1.2.2.62.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.2.62.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "1.2.2.62.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_exp_le_imp"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lcm"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ lcm m n = 0 ⟶ m = 0 ∨ n = 0"
                },
                {
                    "args": "lcm m n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "lcm m n = 0 ⊢ lcm m n = 0"
                },
                {
                    "args": "multiples_eq",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "lcm m n = 0 ⊢ ∀d. divides (lcm m n) d ⟷ divides 0 d"
                },
                {
                    "args": "lcm_divides",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "lcm m n = 0 ⊢ ∀d. divides m d ∧ divides n d ⟷ divides 0 d"
                },
                {
                    "args": "divides_0",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "lcm m n = 0 ⊢ ∀d. divides m d ∧ divides n d ⟷ d = 0"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "lcm m n = 0 ⊢ ∀d. d = 0 ⟷ divides m d ∧ divides n d"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "0.5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "divides_rmul, {a: m, d: m, x: n}",
                    "id": "0.6",
                    "prevs": [
                        "0.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "lcm m n = 0 ⊢ divides m (m * n)"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "0.7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "divides_lmul, {a: n, d: n, x: m}",
                    "id": "0.8",
                    "prevs": [
                        "0.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "lcm m n = 0 ⊢ divides n (m * n)"
                },
                {
                    "args": "conjI",
                    "id": "0.9",
                    "prevs": [
                        "0.6",
                        "0.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "lcm m n = 0 ⊢ divides m (m * n) ∧ divides n (m * n)"
                },
                {
                    "args": "m * n = 0",
                    "id": "0.10",
                    "prevs": [
                        "0.4",
                        "0.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "lcm m n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "mult_nonzero",
                    "id": "0.11",
                    "prevs": [
                        "0.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "lcm m n = 0 ⊢ m = 0 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "0.12",
                    "prevs": [
                        "0.0",
                        "0.11"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n = 0 ⟶ m = 0 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ∨ n = 0 ⟶ lcm m n = 0"
                },
                {
                    "args": "m = 0 ∨ n = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ n = 0 ⊢ m = 0 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ∨ n = 0 ⊢ m = 0 ⟶ lcm m n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "lcm_0, {n: n}",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ lcm 0 n = 0"
                },
                {
                    "args": "lcm m n = 0",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.0",
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, m = 0 ∨ n = 0 ⊢ lcm m n = 0"
                },
                {
                    "args": "",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ∨ n = 0 ⊢ m = 0 ⟶ lcm m n = 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ∨ n = 0 ⊢ n = 0 ⟶ lcm m n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "lcm_0, {n: m}",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ lcm 0 m = 0"
                },
                {
                    "args": "lcm_sym, lcm m 0 = 0",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0, m = 0 ∨ n = 0 ⊢ lcm m 0 = 0"
                },
                {
                    "args": "lcm m n = 0",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, m = 0 ∨ n = 0 ⊢ lcm m n = 0"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.0",
                        "1.2.3"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ∨ n = 0 ⊢ n = 0 ⟶ lcm m n = 0"
                },
                {
                    "args": "disjE",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ∨ n = 0 ⊢ lcm m n = 0"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ∨ n = 0 ⟶ lcm m n = 0"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ lcm m n = 0 ⟷ m = 0 ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n = 0 ⟷ m = 0 ∨ n = 0"
                }
            ],
            "prop": "lcm m n = 0 ⟷ m = 0 ∨ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_fact",
                    "sym": "",
                    "theorem": "multiples_eq"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "lcm_divides"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_0"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "apply_backward_step",
                    "theorem": "mult_nonzero"
                },
                {
                    "fact_ids": [
                        "0.4"
                    ],
                    "goal_id": "0.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "0.7",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "0.7",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm_0"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_sym"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "index_lcm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "prime p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "prime p ⊢ prime p"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p ⊢ m = 0 ∨ n = 0 ⟶ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "m = 0 ∨ n = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ n = 0 ⊢ m = 0 ∨ n = 0"
                },
                {
                    "args": "lcm_zero, lcm m n = 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, m = 0 ∨ n = 0 ⊢ lcm m n = 0"
                },
                {
                    "args": "disjI1, {A: lcm m n = 0, B: p = 1 ∨ ¬(divides p (lcm m n))}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, m = 0 ∨ n = 0 ⊢ lcm m n = 0 ∨ p = 1 ∨ ¬(divides p (lcm m n))"
                },
                {
                    "args": "index_eq_0, index p (lcm m n) = 0",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, m = 0 ∨ n = 0 ⊢ index p (lcm m n) = 0"
                },
                {
                    "args": "if_P, index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, m = 0 ∨ n = 0 ⊢ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "prime p ⊢ m = 0 ∨ n = 0 ⟶ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p ⊢ ¬(m = 0 ∨ n = 0) ⟶ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "¬(m = 0 ∨ n = 0)",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0 ∨ n = 0) ⊢ ¬(m = 0 ∨ n = 0)"
                },
                {
                    "args": "primepow_divides_lcm, {m: m, n: n}",
                    "id": "2.1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p ⊢ ∀k::nat. divides (p ^ k) (lcm m n) ⟷ divides (p ^ k) m ∨ divides (p ^ k) n"
                },
                {
                    "args": "primepow_divides_index",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "prime p ⊢ ∀k. lcm m n = 0 ∨ p = 1 ∨ k ≤ index p (lcm m n) ⟷ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "∀m::nat. ∀n. (∀k. k ≤ m ⟷ k ≤ n) ⟶ m = n",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀m::nat. ∀n. (∀k. k ≤ m ⟷ k ≤ n) ⟶ m = n"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ ∀k. k ≤ index p (lcm m n) ⟷ k ≤ max (index p m) (index p n)"
                },
                {
                    "args": "k, nat",
                    "id": "2.4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "∀m. ∀n. k ≤ max m n ⟷ k ≤ m ∨ k ≤ n",
                    "id": "2.4.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀m. ∀n. k ≤ max m n ⟷ k ≤ m ∨ k ≤ n"
                },
                {
                    "args": "de_morgan_thm2",
                    "id": "2.4.2",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(m = 0 ∨ n = 0) ⊢ ¬(m = 0) ∧ ¬(n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "2.4.3",
                    "prevs": [
                        "2.4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0 ∨ n = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "conjD2",
                    "id": "2.4.4",
                    "prevs": [
                        "2.4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0 ∨ n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "prime_def",
                    "id": "2.4.5",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "prime p ⊢ ¬(p = 1) ∧ (∀x. divides x p ⟶ x = 1 ∨ x = p)"
                },
                {
                    "args": "conjD1",
                    "id": "2.4.6",
                    "prevs": [
                        "2.4.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p ⊢ ¬(p = 1)"
                },
                {
                    "args": "",
                    "id": "2.4.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p (lcm m n) ⟶ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "k ≤ index p (lcm m n)",
                    "id": "2.4.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ index p (lcm m n) ⊢ k ≤ index p (lcm m n)"
                },
                {
                    "args": "disjI2, {A: p = 1, B: k ≤ index p (lcm m n)}",
                    "id": "2.4.7.1",
                    "prevs": [
                        "2.4.7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ p = 1 ∨ k ≤ index p (lcm m n)"
                },
                {
                    "args": "disjI2, {A: lcm m n = 0, B: p = 1 ∨ k ≤ index p (lcm m n)}",
                    "id": "2.4.7.2",
                    "prevs": [
                        "2.4.7.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ lcm m n = 0 ∨ p = 1 ∨ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.7.3",
                    "prevs": [
                        "2.2",
                        "2.4.7.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ m = 0 ∨ p = 1 ∨ k ≤ index p m ⟶ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "m = 0 ∨ p = 1 ∨ k ≤ index p m",
                    "id": "2.4.7.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ m = 0 ∨ p = 1 ∨ k ≤ index p m"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ m = 0 ⟶ k ≤ index p m"
                },
                {
                    "args": "m = 0",
                    "id": "2.4.7.4.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "negE_gen, {A: m = 0, C: k ≤ index p m}",
                    "id": "2.4.7.4.1.1",
                    "prevs": [
                        "2.4.3",
                        "2.4.7.4.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p m"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.1.2",
                    "prevs": [
                        "2.4.7.4.1.0",
                        "2.4.7.4.1.1"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ m = 0 ⟶ k ≤ index p m"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ p = 1 ∨ k ≤ index p m ⟶ k ≤ index p m"
                },
                {
                    "args": "p = 1 ∨ k ≤ index p m",
                    "id": "2.4.7.4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 1 ∨ k ≤ index p m ⊢ p = 1 ∨ k ≤ index p m"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p m, m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ p = 1 ⟶ k ≤ index p m"
                },
                {
                    "args": "p = 1",
                    "id": "2.4.7.4.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 1 ⊢ p = 1"
                },
                {
                    "args": "negE_gen, {A: p = 1, C: k ≤ index p m}",
                    "id": "2.4.7.4.2.1.1",
                    "prevs": [
                        "2.4.6",
                        "2.4.7.4.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, p = 1 ⊢ k ≤ index p m"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.2.1.2",
                    "prevs": [
                        "2.4.7.4.2.1.0",
                        "2.4.7.4.2.1.1"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p m, m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ p = 1 ⟶ k ≤ index p m"
                },
                {
                    "args": "k ≤ index p m ⟶ k ≤ index p m",
                    "id": "2.4.7.4.2.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ k ≤ index p m ⟶ k ≤ index p m"
                },
                {
                    "args": "disjE",
                    "id": "2.4.7.4.2.3",
                    "prevs": [
                        "2.4.7.4.2.0",
                        "2.4.7.4.2.1",
                        "2.4.7.4.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p m, m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ k ≤ index p m"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.2.4",
                    "prevs": [
                        "2.4.7.4.2.0",
                        "2.4.7.4.2.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ p = 1 ∨ k ≤ index p m ⟶ k ≤ index p m"
                },
                {
                    "args": "disjE",
                    "id": "2.4.7.4.3",
                    "prevs": [
                        "2.4.7.4.0",
                        "2.4.7.4.1",
                        "2.4.7.4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ k ≤ index p m"
                },
                {
                    "args": "disjI1, {A: k ≤ index p m, B: k ≤ index p n}",
                    "id": "2.4.7.4.4",
                    "prevs": [
                        "2.4.7.4.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), m = 0 ∨ p = 1 ∨ k ≤ index p m ⊢ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.4.5",
                    "prevs": [
                        "2.4.7.4.0",
                        "2.4.7.4.4"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ m = 0 ∨ p = 1 ∨ k ≤ index p m ⟶ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ n = 0 ∨ p = 1 ∨ k ≤ index p n ⟶ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "n = 0 ∨ p = 1 ∨ k ≤ index p n",
                    "id": "2.4.7.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ n = 0 ⟶ k ≤ index p n"
                },
                {
                    "args": "n = 0",
                    "id": "2.4.7.5.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "negE_gen, {A: n = 0, C: k ≤ index p n}",
                    "id": "2.4.7.5.1.1",
                    "prevs": [
                        "2.4.4",
                        "2.4.7.5.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.1.2",
                    "prevs": [
                        "2.4.7.5.1.0",
                        "2.4.7.5.1.1"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ n = 0 ⟶ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p n ⟶ k ≤ index p n"
                },
                {
                    "args": "p = 1 ∨ k ≤ index p n",
                    "id": "2.4.7.5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 1 ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p n, n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ p = 1 ⟶ k ≤ index p n"
                },
                {
                    "args": "p = 1",
                    "id": "2.4.7.5.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 1 ⊢ p = 1"
                },
                {
                    "args": "negE_gen, {A: p = 1, C: k ≤ index p n}",
                    "id": "2.4.7.5.2.1.1",
                    "prevs": [
                        "2.4.6",
                        "2.4.7.5.2.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, p = 1 ⊢ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.2.1.2",
                    "prevs": [
                        "2.4.7.5.2.1.0",
                        "2.4.7.5.2.1.1"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p n, n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ p = 1 ⟶ k ≤ index p n"
                },
                {
                    "args": "k ≤ index p n ⟶ k ≤ index p n",
                    "id": "2.4.7.5.2.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ k ≤ index p n ⟶ k ≤ index p n"
                },
                {
                    "args": "disjE",
                    "id": "2.4.7.5.2.3",
                    "prevs": [
                        "2.4.7.5.2.0",
                        "2.4.7.5.2.1",
                        "2.4.7.5.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p n, n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.2.4",
                    "prevs": [
                        "2.4.7.5.2.0",
                        "2.4.7.5.2.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p n ⟶ k ≤ index p n"
                },
                {
                    "args": "disjE",
                    "id": "2.4.7.5.3",
                    "prevs": [
                        "2.4.7.5.0",
                        "2.4.7.5.1",
                        "2.4.7.5.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ k ≤ index p n"
                },
                {
                    "args": "disjI2, {A: k ≤ index p m, B: k ≤ index p n}",
                    "id": "2.4.7.5.4",
                    "prevs": [
                        "2.4.7.5.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0), n = 0 ∨ p = 1 ∨ k ≤ index p n ⊢ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.5.5",
                    "prevs": [
                        "2.4.7.5.0",
                        "2.4.7.5.4"
                    ],
                    "rule": "intros",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ n = 0 ∨ p = 1 ∨ k ≤ index p n ⟶ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "disjE",
                    "id": "2.4.7.6",
                    "prevs": [
                        "2.4.7.3",
                        "2.4.7.4",
                        "2.4.7.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, k ≤ index p (lcm m n), ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.7.7",
                    "prevs": [
                        "2.4.7.0",
                        "2.4.7.6"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p (lcm m n) ⟶ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p m ∨ k ≤ index p n ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "k ≤ index p m ∨ k ≤ index p n",
                    "id": "2.4.8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.8.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p m ⟶ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "k ≤ index p m",
                    "id": "2.4.8.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ index p m ⊢ k ≤ index p m"
                },
                {
                    "args": "disjI2, {A: p = 1, B: k ≤ index p m}",
                    "id": "2.4.8.1.1",
                    "prevs": [
                        "2.4.8.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p m, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p m"
                },
                {
                    "args": "disjI2, {A: m = 0, B: p = 1 ∨ k ≤ index p m}",
                    "id": "2.4.8.1.2",
                    "prevs": [
                        "2.4.8.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p m, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ m = 0 ∨ p = 1 ∨ k ≤ index p m"
                },
                {
                    "args": "disjI1, {A: m = 0 ∨ p = 1 ∨ k ≤ index p m, B: n = 0 ∨ p = 1 ∨ k ≤ index p n}",
                    "id": "2.4.8.1.3",
                    "prevs": [
                        "2.4.8.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p m, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.8.1.4",
                    "prevs": [
                        "2.4.8.1.0",
                        "2.4.8.1.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p m ⟶ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.8.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p n ⟶ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "k ≤ index p n",
                    "id": "2.4.8.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k ≤ index p n ⊢ k ≤ index p n"
                },
                {
                    "args": "disjI2, {A: p = 1, B: k ≤ index p n}",
                    "id": "2.4.8.2.1",
                    "prevs": [
                        "2.4.8.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p n, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "disjI2, {A: n = 0, B: p = 1 ∨ k ≤ index p n}",
                    "id": "2.4.8.2.2",
                    "prevs": [
                        "2.4.8.2.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p n, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "disjI2, {A: m = 0 ∨ p = 1 ∨ k ≤ index p m, B: n = 0 ∨ p = 1 ∨ k ≤ index p n}",
                    "id": "2.4.8.2.3",
                    "prevs": [
                        "2.4.8.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, k ≤ index p n, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "",
                    "id": "2.4.8.2.4",
                    "prevs": [
                        "2.4.8.2.0",
                        "2.4.8.2.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p n ⟶ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "disjE",
                    "id": "2.4.8.3",
                    "prevs": [
                        "2.4.8.0",
                        "2.4.8.1",
                        "2.4.8.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ (m = 0 ∨ p = 1 ∨ k ≤ index p m) ∨ n = 0 ∨ p = 1 ∨ k ≤ index p n"
                },
                {
                    "args": "lcm m n = 0 ∨ p = 1 ∨ k ≤ index p (lcm m n)",
                    "id": "2.4.8.4",
                    "prevs": [
                        "2.2",
                        "2.4.8.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ lcm m n = 0 ∨ p = 1 ∨ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ lcm m n = 0 ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "lcm m n = 0",
                    "id": "2.4.8.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "lcm m n = 0 ⊢ lcm m n = 0"
                },
                {
                    "args": "lcm_zero",
                    "id": "2.4.8.5.1",
                    "prevs": [
                        "2.4.8.5.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "lcm m n = 0 ⊢ m = 0 ∨ n = 0"
                },
                {
                    "args": "negE_gen, {A: m = 0 ∨ n = 0, C: k ≤ index p (lcm m n)}",
                    "id": "2.4.8.5.2",
                    "prevs": [
                        "2.0",
                        "2.4.8.5.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "lcm m n = 0, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.5.3",
                    "prevs": [
                        "2.4.8.5.0",
                        "2.4.8.5.2"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ lcm m n = 0 ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p (lcm m n) ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "p = 1 ∨ k ≤ index p (lcm m n)",
                    "id": "2.4.8.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 1 ∨ k ≤ index p (lcm m n) ⊢ p = 1 ∨ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.6.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p (lcm m n), k ≤ index p m ∨ k ≤ index p n ⊢ p = 1 ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "p = 1",
                    "id": "2.4.8.6.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 1 ⊢ p = 1"
                },
                {
                    "args": "negE_gen, {A: p = 1, C: k ≤ index p (lcm m n)}",
                    "id": "2.4.8.6.1.1",
                    "prevs": [
                        "2.4.6",
                        "2.4.8.6.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime p, p = 1 ⊢ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.6.1.2",
                    "prevs": [
                        "2.4.8.6.1.0",
                        "2.4.8.6.1.1"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p (lcm m n), k ≤ index p m ∨ k ≤ index p n ⊢ p = 1 ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "k ≤ index p (lcm m n) ⟶ k ≤ index p (lcm m n)",
                    "id": "2.4.8.6.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ k ≤ index p (lcm m n) ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "disjE",
                    "id": "2.4.8.6.3",
                    "prevs": [
                        "2.4.8.6.0",
                        "2.4.8.6.1",
                        "2.4.8.6.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), p = 1 ∨ k ≤ index p (lcm m n), k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.6.4",
                    "prevs": [
                        "2.4.8.6.0",
                        "2.4.8.6.3"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ p = 1 ∨ k ≤ index p (lcm m n) ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "disjE",
                    "id": "2.4.8.7",
                    "prevs": [
                        "2.4.8.4",
                        "2.4.8.5",
                        "2.4.8.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0 ∨ n = 0), k ≤ index p m ∨ k ≤ index p n ⊢ k ≤ index p (lcm m n)"
                },
                {
                    "args": "",
                    "id": "2.4.8.8",
                    "prevs": [
                        "2.4.8.0",
                        "2.4.8.7"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p m ∨ k ≤ index p n ⟶ k ≤ index p (lcm m n)"
                },
                {
                    "args": "iffI",
                    "id": "2.4.9",
                    "prevs": [
                        "2.4.7",
                        "2.4.8"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p (lcm m n) ⟷ k ≤ index p m ∨ k ≤ index p n"
                },
                {
                    "args": "k ≤ index p (lcm m n) ⟷ k ≤ max (index p m) (index p n)",
                    "id": "2.4.10",
                    "prevs": [
                        "2.4.1",
                        "2.4.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ k ≤ index p (lcm m n) ⟷ k ≤ max (index p m) (index p n)"
                },
                {
                    "args": "",
                    "id": "2.4.11",
                    "prevs": [
                        "2.4.0",
                        "2.4.10"
                    ],
                    "rule": "intros",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ ∀k. k ≤ index p (lcm m n) ⟷ k ≤ max (index p m) (index p n)"
                },
                {
                    "args": "index p (lcm m n), max (index p m) (index p n)",
                    "id": "2.5",
                    "prevs": [
                        "2.3",
                        "2.4"
                    ],
                    "rule": "apply_fact_for",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ index p (lcm m n) = max (index p m) (index p n)"
                },
                {
                    "args": "if_not_P, index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))",
                    "id": "2.6",
                    "prevs": [
                        "2.5",
                        "2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime p, ¬(m = 0 ∨ n = 0) ⊢ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [
                        "2.0",
                        "2.6"
                    ],
                    "rule": "intros",
                    "th": "prime p ⊢ ¬(m = 0 ∨ n = 0) ⟶ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "classical_cases",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "prime p ⊢ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ prime p ⟶ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
                }
            ],
            "prop": [
                "prime p ",
                "⟶ index p (lcm m n) = (if m = 0 ∨ n = 0 then 0 else max (index p m) (index p n))"
            ],
            "steps": [
                {
                    "case": "m = 0 ∨ n = 0",
                    "goal_id": "1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "index_eq_0"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_zero"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_forward_step",
                    "param_k": "",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "primepow_divides_lcm"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "primepow_divides_index"
                },
                {
                    "goal": "!m. !n. (!k::nat. k <= m <--> k <= n) --> m = n ",
                    "goal_id": "2.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "introduction",
                    "names": "k"
                },
                {
                    "goal": "!m. !n. k <= max m n <--> k <= m | k <= n",
                    "goal_id": "2.4.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2.4.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "2.4.1"
                    ],
                    "goal_id": "2.4.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.4.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "fact_ids": [
                        "2.4.2"
                    ],
                    "goal_id": "2.4.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2.4.2"
                    ],
                    "goal_id": "2.4.4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.4.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "prime_def"
                },
                {
                    "fact_ids": [
                        "2.4.5"
                    ],
                    "goal_id": "2.4.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "2.4.7",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "2.4.7",
                    "method_name": "introduction"
                },
                {
                    "goal": "lcm m n = 0 ∨ p = 1 ∨ k ≤ index p (lcm m n)",
                    "goal_id": "2.4.7.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2.4.7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.4.7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "2.2",
                        "2.4.7.2"
                    ],
                    "goal_id": "2.4.7.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "2.4.7.3"
                    ],
                    "goal_id": "2.4.7.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.7.4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.4.7.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "2.4.7.4.0"
                    ],
                    "goal_id": "2.4.7.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.7.4.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.3",
                        "2.4.7.4.1.0"
                    ],
                    "goal_id": "2.4.7.4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "2.4.7.4.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.7.4.2.0"
                    ],
                    "goal_id": "2.4.7.4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.7.4.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.6",
                        "2.4.7.4.2.1.0"
                    ],
                    "goal_id": "2.4.7.4.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "2.4.7.5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.4.7.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "2.4.7.5.0"
                    ],
                    "goal_id": "2.4.7.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.7.5.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.4",
                        "2.4.7.5.1.0"
                    ],
                    "goal_id": "2.4.7.5.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "2.4.7.5.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.7.5.2.0"
                    ],
                    "goal_id": "2.4.7.5.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.7.5.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.6",
                        "2.4.7.5.2.1.0"
                    ],
                    "goal_id": "2.4.7.5.2.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "2.4.8",
                    "method_name": "introduction"
                },
                {
                    "goal": "lcm m n = 0 ∨ p = 1 ∨ k ≤ index p (lcm m n)",
                    "goal_id": "2.4.8.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.4.8.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "2.4.8.0"
                    ],
                    "goal_id": "2.4.8.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.8.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.4.8.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.4.8.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.4.8.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.4.8.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.4.8.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.4.8.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "2.4.8.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "2.4.8.4"
                    ],
                    "goal_id": "2.4.8.5",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.8.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.8.5.0"
                    ],
                    "goal_id": "2.4.8.5.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "lcm_zero"
                },
                {
                    "fact_ids": [
                        "2.0",
                        "2.4.8.5.1"
                    ],
                    "goal_id": "2.4.8.5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "2.4.8.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.8.6.0"
                    ],
                    "goal_id": "2.4.8.6.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4.8.6.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.6",
                        "2.4.8.6.1.0"
                    ],
                    "goal_id": "2.4.8.6.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "lcm_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀d. divides m d ∧ divides n d ∧ divides p d ⟷ (divides m d ∧ divides n d) ∧ divides p d"
                },
                {
                    "args": "q, nat",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "conj_assoc, divides m q ∧ divides n q ∧ divides p q ⟷ (divides m q ∧ divides n q) ∧ divides p q",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides m q ∧ divides n q ∧ divides p q ⟷ (divides m q ∧ divides n q) ∧ divides p q"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀q. divides m q ∧ divides n q ∧ divides p q ⟷ (divides m q ∧ divides n q) ∧ divides p q"
                },
                {
                    "args": "lcm_divides, ∀d. divides m d ∧ divides (lcm n p) d ⟷ divides (lcm m n) d ∧ divides p d",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ∀d. divides m d ∧ divides (lcm n p) d ⟷ divides (lcm m n) d ∧ divides p d"
                },
                {
                    "args": "lcm_divides, ∀d. divides (lcm m (lcm n p)) d ⟷ divides (lcm (lcm m n) p) d",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ∀d. divides (lcm m (lcm n p)) d ⟷ divides (lcm (lcm m n) p) d"
                },
                {
                    "args": "multiples_eq, lcm m (lcm n p) = lcm (lcm m n) p",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm m (lcm n p) = lcm (lcm m n) p"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m (lcm n p) = lcm (lcm m n) p"
                }
            ],
            "prop": "lcm m (lcm n p) = lcm (lcm m n) p",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "multiples_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_divides"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_divides"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "q"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "conj_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_refl",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "mult_0_right, (0::nat) * 0 = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 0 = 0"
                },
                {
                    "args": "n * n = 0",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ n * n = 0"
                },
                {
                    "args": "eq_sym_eq, 0 = n",
                    "id": "0.3",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ 0 = n"
                },
                {
                    "args": "if_P, (if n * n = 0 then 0 else n * n DIV gcd n n) = n",
                    "id": "0.4",
                    "prevs": [
                        "0.3",
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "1.1",
                    "prevs": [
                        "1.0",
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ ¬(n = 0) ∧ ¬(n = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(n = 0 ∨ n = 0)",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ ¬(n = 0 ∨ n = 0)"
                },
                {
                    "args": "mult_eq_0, ¬(n * n = 0)",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ ¬(n * n = 0)"
                },
                {
                    "args": "div_mult, {m: n, n: n}",
                    "id": "1.4",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0) ⊢ n * n DIV n = n"
                },
                {
                    "args": "gcd_refl, n * n DIV gcd n n = n",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ n * n DIV gcd n n = n"
                },
                {
                    "args": "if_not_P, (if n * n = 0 then 0 else n * n DIV gcd n n) = n",
                    "id": "1.6",
                    "prevs": [
                        "1.5",
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if n * n = 0 then 0 else n * n DIV gcd n n) = n"
                },
                {
                    "args": "lcm_def, lcm n n = n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm n n = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm n n = n"
                }
            ],
            "prop": "lcm n n = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "n=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal": "n * n = 0",
                    "goal_id": "0.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal": "~(n * n = 0)",
                    "goal_id": "1.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_eq_0"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_refl"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "div_mult"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_multiple",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀d. divides n d ∧ divides (m * n) d ⟷ divides (m * n) d"
                },
                {
                    "args": "d, nat",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ divides n d ∧ divides (m * n) d ⟶ divides (m * n) d"
                },
                {
                    "args": "divides n d ∧ divides (m * n) d",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n d ∧ divides (m * n) d ⊢ divides n d ∧ divides (m * n) d"
                },
                {
                    "args": "conjD2",
                    "id": "0.1.1",
                    "prevs": [
                        "0.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n d ∧ divides (m * n) d ⊢ divides (m * n) d"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n d ∧ divides (m * n) d ⟶ divides (m * n) d"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ divides (m * n) d ⟶ divides n d ∧ divides (m * n) d"
                },
                {
                    "args": "divides (m * n) d",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (m * n) d ⊢ divides (m * n) d"
                },
                {
                    "args": "divides_lmul2",
                    "id": "0.2.1",
                    "prevs": [
                        "0.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (m * n) d ⊢ divides n d"
                },
                {
                    "args": "conjI",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.1",
                        "0.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (m * n) d ⊢ divides n d ∧ divides (m * n) d"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.0",
                        "0.2.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (m * n) d ⟶ divides n d ∧ divides (m * n) d"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides n d ∧ divides (m * n) d ⟷ divides (m * n) d"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀d. divides n d ∧ divides (m * n) d ⟷ divides (m * n) d"
                },
                {
                    "args": "lcm_divides, ∀d. divides (lcm n (m * n)) d ⟷ divides (m * n) d",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ ∀d. divides (lcm n (m * n)) d ⟷ divides (m * n) d"
                },
                {
                    "args": "multiples_eq, lcm n (m * n) = m * n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm n (m * n) = m * n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm n (m * n) = m * n"
                }
            ],
            "prop": "lcm n (m * n) = m * n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "multiples_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_divides"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "0.2.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "lcm_gcd_distrib",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀p1. ∀k::nat. prime p1 ⟶ divides (p1 ^ k) (lcm m (gcd n p)) ⟷ divides (p1 ^ k) (gcd (lcm m n) (lcm m p))"
                },
                {
                    "args": "q, nat",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "k, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "prime q",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "prime q ⊢ prime q"
                },
                {
                    "args": "primepow_divides_lcm, {k: k}",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime q ⊢ ∀m. ∀n. divides (q ^ k) (lcm m n) ⟷ divides (q ^ k) m ∨ divides (q ^ k) n"
                },
                {
                    "args": "disj_conj_distribL1, divides (q ^ k) m ∨ divides (q ^ k) n ∧ divides (q ^ k) p ⟷ (divides (q ^ k) m ∨ divides (q ^ k) n) ∧ (divides (q ^ k) m ∨ divides (q ^ k) p)",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides (q ^ k) m ∨ divides (q ^ k) n ∧ divides (q ^ k) p ⟷ (divides (q ^ k) m ∨ divides (q ^ k) n) ∧ (divides (q ^ k) m ∨ divides (q ^ k) p)"
                },
                {
                    "args": "divides (q ^ k) m ∨ divides (q ^ k) n ∧ divides (q ^ k) p ⟷ divides (q ^ k) (lcm m n) ∧ divides (q ^ k) (lcm m p)",
                    "id": "0.5",
                    "prevs": [
                        "0.3",
                        "0.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime q ⊢ divides (q ^ k) m ∨ divides (q ^ k) n ∧ divides (q ^ k) p ⟷ divides (q ^ k) (lcm m n) ∧ divides (q ^ k) (lcm m p)"
                },
                {
                    "args": "divides_gcd, divides (q ^ k) m ∨ divides (q ^ k) (gcd n p) ⟷ divides (q ^ k) (gcd (lcm m n) (lcm m p))",
                    "id": "0.6",
                    "prevs": [
                        "0.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime q ⊢ divides (q ^ k) m ∨ divides (q ^ k) (gcd n p) ⟷ divides (q ^ k) (gcd (lcm m n) (lcm m p))"
                },
                {
                    "args": "divides (q ^ k) (lcm m (gcd n p)) ⟷ divides (q ^ k) (gcd (lcm m n) (lcm m p))",
                    "id": "0.7",
                    "prevs": [
                        "0.3",
                        "0.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime q ⊢ divides (q ^ k) (lcm m (gcd n p)) ⟷ divides (q ^ k) (gcd (lcm m n) (lcm m p))"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀q. ∀k::nat. prime q ⟶ divides (q ^ k) (lcm m (gcd n p)) ⟷ divides (q ^ k) (gcd (lcm m n) (lcm m p))"
                },
                {
                    "args": "primepow_divisors_eq, lcm m (gcd n p) = gcd (lcm m n) (lcm m p)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm m (gcd n p) = gcd (lcm m n) (lcm m p)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m (gcd n p) = gcd (lcm m n) (lcm m p)"
                }
            ],
            "prop": "lcm m (gcd n p) = gcd (lcm m n) (lcm m p)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "primepow_divisors_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "q,k"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "apply_forward_step",
                    "param_k": "k",
                    "param_m": "",
                    "param_n": "",
                    "theorem": "primepow_divides_lcm"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_gcd"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_conj_distribL1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "gcd_lcm_distrib",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀p1. ∀k::nat. prime p1 ⟶ divides (p1 ^ k) (gcd m (lcm n p)) ⟷ divides (p1 ^ k) (lcm (gcd m n) (gcd m p))"
                },
                {
                    "args": "q, nat",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "k, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "prime q",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "prime q ⊢ prime q"
                },
                {
                    "args": "primepow_divides_lcm, {k: k}",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "prime q ⊢ ∀m. ∀n. divides (q ^ k) (lcm m n) ⟷ divides (q ^ k) m ∨ divides (q ^ k) n"
                },
                {
                    "args": "conj_disj_distribL1, divides (q ^ k) m ∧ (divides (q ^ k) n ∨ divides (q ^ k) p) ⟷ divides (q ^ k) m ∧ divides (q ^ k) n ∨ divides (q ^ k) m ∧ divides (q ^ k) p",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides (q ^ k) m ∧ (divides (q ^ k) n ∨ divides (q ^ k) p) ⟷ divides (q ^ k) m ∧ divides (q ^ k) n ∨ divides (q ^ k) m ∧ divides (q ^ k) p"
                },
                {
                    "args": "divides (q ^ k) m ∧ divides (q ^ k) (lcm n p) ⟷ divides (q ^ k) m ∧ divides (q ^ k) n ∨ divides (q ^ k) m ∧ divides (q ^ k) p",
                    "id": "0.5",
                    "prevs": [
                        "0.3",
                        "0.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime q ⊢ divides (q ^ k) m ∧ divides (q ^ k) (lcm n p) ⟷ divides (q ^ k) m ∧ divides (q ^ k) n ∨ divides (q ^ k) m ∧ divides (q ^ k) p"
                },
                {
                    "args": "divides_gcd, divides (q ^ k) (gcd m (lcm n p)) ⟷ divides (q ^ k) (gcd m n) ∨ divides (q ^ k) (gcd m p)",
                    "id": "0.6",
                    "prevs": [
                        "0.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "prime q ⊢ divides (q ^ k) (gcd m (lcm n p)) ⟷ divides (q ^ k) (gcd m n) ∨ divides (q ^ k) (gcd m p)"
                },
                {
                    "args": "divides (q ^ k) (gcd m (lcm n p)) ⟷ divides (q ^ k) (lcm (gcd m n) (gcd m p))",
                    "id": "0.7",
                    "prevs": [
                        "0.3",
                        "0.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "prime q ⊢ divides (q ^ k) (gcd m (lcm n p)) ⟷ divides (q ^ k) (lcm (gcd m n) (gcd m p))"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀q. ∀k::nat. prime q ⟶ divides (q ^ k) (gcd m (lcm n p)) ⟷ divides (q ^ k) (lcm (gcd m n) (gcd m p))"
                },
                {
                    "args": "primepow_divisors_eq, gcd m (lcm n p) = lcm (gcd m n) (gcd m p)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ gcd m (lcm n p) = lcm (gcd m n) (gcd m p)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd m (lcm n p) = lcm (gcd m n) (gcd m p)"
                }
            ],
            "prop": "gcd m (lcm n p) = lcm (gcd m n) (gcd m p)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "primepow_divisors_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "q,k"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "apply_forward_step",
                    "param_k": "k",
                    "param_m": "",
                    "param_n": "",
                    "theorem": "primepow_divides_lcm"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_gcd"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "conj_disj_distribL1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_unique",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟶ (∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1)"
                },
                {
                    "args": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)"
                },
                {
                    "args": "conjD1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides m d"
                },
                {
                    "args": "conjD2",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)"
                },
                {
                    "args": "conjD1",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides n d"
                },
                {
                    "args": "conjD2",
                    "id": "0.4",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ ∀e. divides m e ⟶ divides n e ⟶ divides d e"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ ∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1"
                },
                {
                    "args": "a, nat",
                    "id": "0.5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "",
                    "id": "0.5.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides d a ⟶ divides m a ∧ divides n a"
                },
                {
                    "args": "divides d a",
                    "id": "0.5.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d a ⊢ divides d a"
                },
                {
                    "args": "divides_trans",
                    "id": "0.5.1.1",
                    "prevs": [
                        "0.1",
                        "0.5.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d a, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides m a"
                },
                {
                    "args": "divides_trans",
                    "id": "0.5.1.2",
                    "prevs": [
                        "0.3",
                        "0.5.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d a, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides n a"
                },
                {
                    "args": "conjI",
                    "id": "0.5.1.3",
                    "prevs": [
                        "0.5.1.1",
                        "0.5.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d a, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides m a ∧ divides n a"
                },
                {
                    "args": "",
                    "id": "0.5.1.4",
                    "prevs": [
                        "0.5.1.0",
                        "0.5.1.3"
                    ],
                    "rule": "intros",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides d a ⟶ divides m a ∧ divides n a"
                },
                {
                    "args": "",
                    "id": "0.5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides m a ∧ divides n a ⟶ divides d a"
                },
                {
                    "args": "divides m a ∧ divides n a",
                    "id": "0.5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m a ∧ divides n a ⊢ divides m a ∧ divides n a"
                },
                {
                    "args": "conjD1",
                    "id": "0.5.2.1",
                    "prevs": [
                        "0.5.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m a ∧ divides n a ⊢ divides m a"
                },
                {
                    "args": "conjD2",
                    "id": "0.5.2.2",
                    "prevs": [
                        "0.5.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m a ∧ divides n a ⊢ divides n a"
                },
                {
                    "args": "a",
                    "id": "0.5.2.3",
                    "prevs": [
                        "0.4",
                        "0.5.2.1",
                        "0.5.2.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "divides m a ∧ divides n a, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides d a"
                },
                {
                    "args": "",
                    "id": "0.5.2.4",
                    "prevs": [
                        "0.5.2.0",
                        "0.5.2.3"
                    ],
                    "rule": "intros",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides m a ∧ divides n a ⟶ divides d a"
                },
                {
                    "args": "iffI",
                    "id": "0.5.3",
                    "prevs": [
                        "0.5.1",
                        "0.5.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ divides d a ⟷ divides m a ∧ divides n a"
                },
                {
                    "args": "",
                    "id": "0.5.4",
                    "prevs": [
                        "0.5.0",
                        "0.5.3"
                    ],
                    "rule": "intros",
                    "th": "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⊢ ∀a. divides d a ⟷ divides m a ∧ divides n a"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟶ (∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1) ⟶ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)"
                },
                {
                    "args": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ ∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ ∀d1. divides m d1 ∧ divides n d1 ⟷ divides d d1"
                },
                {
                    "args": "divides_self, {n: d}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides d d"
                },
                {
                    "args": "divides m d ∧ divides n d",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ divides m d ∧ divides n d"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ ∀e. divides m e ⟶ divides n e ⟶ divides d e"
                },
                {
                    "args": "e, nat",
                    "id": "1.4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR e"
                },
                {
                    "args": "divides m e",
                    "id": "1.4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m e ⊢ divides m e"
                },
                {
                    "args": "divides n e",
                    "id": "1.4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n e ⊢ divides n e"
                },
                {
                    "args": "conjI",
                    "id": "1.4.3",
                    "prevs": [
                        "1.4.1",
                        "1.4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m e, divides n e, ∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ divides m e ∧ divides n e"
                },
                {
                    "args": "divides d e",
                    "id": "1.4.4",
                    "prevs": [
                        "1.0",
                        "1.4.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides m e, divides n e, ∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ divides d e"
                },
                {
                    "args": "",
                    "id": "1.4.5",
                    "prevs": [
                        "1.4.0",
                        "1.4.1",
                        "1.4.2",
                        "1.4.4"
                    ],
                    "rule": "intros",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ ∀e. divides m e ⟶ divides n e ⟶ divides d e"
                },
                {
                    "args": "conjI",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ (divides m d ∧ divides n d) ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)"
                },
                {
                    "args": "conj_assoc, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)",
                    "id": "1.6",
                    "prevs": [
                        "1.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1 ⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1) ⟶ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ (∀d1. divides d d1 ⟷ divides m d1 ∧ divides n d1)"
                },
                {
                    "args": "lcm_divides, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ (∀d1. divides d d1 ⟷ divides (lcm m n) d1)",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ (∀d1. divides d d1 ⟷ divides (lcm m n) d1)"
                },
                {
                    "args": "multiples_eq, divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ d = lcm m n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ d = lcm m n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ d = lcm m n"
                }
            ],
            "prop": [
                "divides m d ∧ divides n d ∧ (∀e. divides m e ⟶ divides n e ⟶ divides d e) ⟷ ",
                "d = lcm m n"
            ],
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "multiples_eq"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_divides"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.4",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "introduction",
                    "names": "a"
                },
                {
                    "goal_id": "0.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.5.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.5.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.5.1.1",
                    "method_name": "apply_backward_step",
                    "param_m": "d",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "0.5.1.2",
                    "method_name": "apply_backward_step",
                    "param_m": "d",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "0.5.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.5.2.0"
                    ],
                    "goal_id": "0.5.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.5.2.0"
                    ],
                    "goal_id": "0.5.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.4"
                    ],
                    "goal_id": "0.5.2.3",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "conj_assoc"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "introduction",
                    "names": "e"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.4.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.4.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                }
            ],
            "ty": "thm",
            "vars": {
                "d": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lcm_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d ⊢ ∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d"
                },
                {
                    "args": "lcm_divides, ∀d. divides (lcm m n) d ⟷ divides (lcm p q) d",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d ⊢ ∀d. divides (lcm m n) d ⟷ divides (lcm p q) d"
                },
                {
                    "args": "multiples_eq, lcm m n = lcm p q",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d ⊢ lcm m n = lcm p q"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d) ⟶ lcm m n = lcm p q"
                }
            ],
            "prop": "(∀d. divides m d ∧ divides n d ⟷ divides p d ∧ divides q d) ⟶ lcm m n = lcm p q",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "multiples_eq"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_divides"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat",
                "q": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_lcm_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ divides n m ⟶ lcm m n = m"
                },
                {
                    "args": "divides n m",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "∀e. divides m e ⟶ divides n e ⟶ divides m e",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀e. divides m e ⟶ divides n e ⟶ divides m e"
                },
                {
                    "args": "conjI",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m ⊢ divides n m ∧ (∀e. divides m e ⟶ divides n e ⟶ divides m e)"
                },
                {
                    "args": "conjI",
                    "id": "0.4",
                    "prevs": [
                        "0.1",
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m ⊢ divides m m ∧ divides n m ∧ (∀e. divides m e ⟶ divides n e ⟶ divides m e)"
                },
                {
                    "args": "lcm_unique, m = lcm m n",
                    "id": "0.5",
                    "prevs": [
                        "0.4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "divides n m ⊢ m = lcm m n"
                },
                {
                    "args": "eq_sym_eq, lcm m n = m",
                    "id": "0.6",
                    "prevs": [
                        "0.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m ⊢ lcm m n = m"
                },
                {
                    "args": "",
                    "id": "0.7",
                    "prevs": [
                        "0.0",
                        "0.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n m ⟶ lcm m n = m"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ lcm m n = m ⟶ divides n m"
                },
                {
                    "args": "lcm m n = m",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "lcm m n = m ⊢ lcm m n = m"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "lcm m n = m ⊢ m = lcm m n"
                },
                {
                    "args": "lcm2, {m: m, n: n}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n (lcm m n)"
                },
                {
                    "args": "divides n m",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "lcm m n = m ⊢ divides n m"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n = m ⟶ divides n m"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides n m ⟷ lcm m n = m"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n m ⟷ lcm m n = m"
                }
            ],
            "prop": "divides n m ⟷ lcm m n = m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "lcm_unique"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_lcm_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides_lcm_left, divides m n ⟷ lcm n m = n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides m n ⟷ lcm n m = n"
                },
                {
                    "args": "lcm_sym, divides m n ⟷ lcm m n = n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides m n ⟷ lcm m n = n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟷ lcm m n = n"
                }
            ],
            "prop": "divides m n ⟷ lcm m n = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_sym"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_lcm_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_lcm_gcd",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m * n = 0 ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "m * n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "nat_times_def_1, 0 * gcd m n = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 * gcd m n = 0"
                },
                {
                    "args": "0 * gcd m n = m * n",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m * n = 0 ⊢ 0 * gcd m n = m * n"
                },
                {
                    "args": "if_P, (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n",
                    "id": "0.3",
                    "prevs": [
                        "0.2",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * n = 0 ⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = 0 ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m * n = 0) ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "¬(m * n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_lmul, {a: n, d: gcd m n, x: m}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m * n = 0) ⊢ divides (gcd m n) (m * n)"
                },
                {
                    "args": "divides_div_mult, m * n DIV gcd m n * gcd m n = m * n",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(m * n = 0) ⊢ m * n DIV gcd m n * gcd m n = m * n"
                },
                {
                    "args": "if_not_P, (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n",
                    "id": "1.4",
                    "prevs": [
                        "1.3",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0) ⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m * n = 0) ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) * gcd m n = m * n"
                },
                {
                    "args": "lcm_def, lcm m n * gcd m n = m * n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm m n * gcd m n = m * n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n * gcd m n = m * n"
                }
            ],
            "prop": "lcm m n * gcd m n = m * n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "m * n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "divides_div_mult"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "mult_gcd_lcm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_lcm_gcd, {m: m, n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ lcm m n * gcd m n = m * n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ m * n = lcm m n * gcd m n"
                },
                {
                    "args": "mult_comm, {x: gcd m n, y: lcm m n}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ gcd m n * lcm m n = lcm m n * gcd m n"
                },
                {
                    "args": "gcd m n * lcm m n = m * n",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "⊢ gcd m n * lcm m n = m * n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd m n * lcm m n = m * n"
                }
            ],
            "prop": "gcd m n * lcm m n = m * n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "mult_lcm_gcd"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "mult_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_lmul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ p = 0 ⟶ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "p = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = 0 ⊢ p = 0"
                },
                {
                    "args": "lcm_0, lcm 0 0 = 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm 0 0 = 0"
                },
                {
                    "args": "nat_times_def_1, lcm (0 * m) (0 * n) = 0 * lcm m n",
                    "id": "0.2",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "p = 0 ⊢ lcm (0 * m) (0 * n) = 0 * lcm m n"
                },
                {
                    "args": "lcm (p * m) (p * n) = p * lcm m n",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "p = 0 ⊢ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ p = 0 ⟶ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(p = 0) ⟶ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "¬(p = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(p = 0) ⊢ ¬(p = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(p = 0) ⊢ m * n = 0 ⟶ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "m * n = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "p * m * (p * n) = 0",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "z3",
                    "th": "m * n = 0 ⊢ p * m * (p * n) = 0"
                },
                {
                    "args": "mult_0_right, 0 = p * 0",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = p * 0"
                },
                {
                    "args": "if_P, (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * 0",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2",
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), m * n = 0 ⊢ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * 0"
                },
                {
                    "args": "if_P, (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), m * n = 0 ⊢ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.0",
                        "1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(p = 0) ⊢ m * n = 0 ⟶ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(p = 0) ⊢ ¬(m * n = 0) ⟶ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "¬(m * n = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "¬(p * m * (p * n) = 0)",
                    "id": "1.2.1",
                    "prevs": [
                        "1.2.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ ¬(p * m * (p * n) = 0)"
                },
                {
                    "args": "div_mult2, {n: m * (p * n), p: gcd m n}",
                    "id": "1.2.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(p = 0) ⊢ p * (m * (p * n)) DIV (p * gcd m n) = m * (p * n) DIV gcd m n"
                },
                {
                    "args": "m * (p * n) = p * (m * n)",
                    "id": "1.2.3",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * (p * n) = p * (m * n)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1.2.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_lmul, {a: n, d: gcd m n, x: m}",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ divides (gcd m n) (m * n)"
                },
                {
                    "args": "divides_div_mult, m * n DIV gcd m n * gcd m n = m * n",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ m * n DIV gcd m n * gcd m n = m * n"
                },
                {
                    "args": "eq_sym_eq, m * n = m * n DIV gcd m n * gcd m n",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ m * n = m * n DIV gcd m n * gcd m n"
                },
                {
                    "args": "disjI2, {A: p = 0, B: m * n = m * n DIV gcd m n * gcd m n}",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p = 0 ∨ m * n = m * n DIV gcd m n * gcd m n"
                },
                {
                    "args": "eq_mult_lcancel, p * (m * n) = p * (m * n DIV gcd m n * gcd m n)",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * (m * n) = p * (m * n DIV gcd m n * gcd m n)"
                },
                {
                    "args": "mult_assoc, p * (m * n) = p * (m * n DIV gcd m n) * gcd m n",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * (m * n) = p * (m * n DIV gcd m n) * gcd m n"
                },
                {
                    "args": "add_0_right, p * (m * n) = p * (m * n DIV gcd m n) * gcd m n + 0",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * (m * n) = p * (m * n DIV gcd m n) * gcd m n + 0"
                },
                {
                    "args": "¬(m = 0 ∧ n = 0)",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(m * n = 0) ⊢ ¬(m = 0 ∧ n = 0)"
                },
                {
                    "args": "gcd_zero, ¬(gcd m n = 0)",
                    "id": "1.2.13",
                    "prevs": [
                        "1.2.12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ ¬(gcd m n = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1.2.14",
                    "prevs": [
                        "1.2.13"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ 0 < gcd m n"
                },
                {
                    "args": "div_uniq",
                    "id": "1.2.15",
                    "prevs": [
                        "1.2.11",
                        "1.2.14"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * (m * n) DIV gcd m n = p * (m * n DIV gcd m n)"
                },
                {
                    "args": "m * (p * n) DIV gcd m n = p * (m * n DIV gcd m n)",
                    "id": "1.2.16",
                    "prevs": [
                        "1.2.3",
                        "1.2.15"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ m * (p * n) DIV gcd m n = p * (m * n DIV gcd m n)"
                },
                {
                    "args": "p * (m * (p * n)) DIV (p * gcd m n) = p * (m * n DIV gcd m n)",
                    "id": "1.2.17",
                    "prevs": [
                        "1.2.2",
                        "1.2.16"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * (m * (p * n)) DIV (p * gcd m n) = p * (m * n DIV gcd m n)"
                },
                {
                    "args": "mult_assoc, p * m * (p * n) DIV (p * gcd m n) = p * (m * n DIV gcd m n)",
                    "id": "1.2.18",
                    "prevs": [
                        "1.2.17"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * m * (p * n) DIV (p * gcd m n) = p * (m * n DIV gcd m n)"
                },
                {
                    "args": "gcd_mult_left, p * m * (p * n) DIV gcd (p * m) (p * n) = p * (m * n DIV gcd m n)",
                    "id": "1.2.19",
                    "prevs": [
                        "1.2.18"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ p * m * (p * n) DIV gcd (p * m) (p * n) = p * (m * n DIV gcd m n)"
                },
                {
                    "args": "if_not_P, (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (m * n DIV gcd m n)",
                    "id": "1.2.20",
                    "prevs": [
                        "1.2.19",
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (m * n DIV gcd m n)"
                },
                {
                    "args": "if_not_P, (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)",
                    "id": "1.2.21",
                    "prevs": [
                        "1.2.20",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0), ¬(m * n = 0) ⊢ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "",
                    "id": "1.2.22",
                    "prevs": [
                        "1.2.0",
                        "1.2.21"
                    ],
                    "rule": "intros",
                    "th": "¬(p = 0) ⊢ ¬(m * n = 0) ⟶ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(p = 0) ⊢ (if p * m * (p * n) = 0 then 0 else p * m * (p * n) DIV gcd (p * m) (p * n)) = p * (if m * n = 0 then 0 else m * n DIV gcd m n)"
                },
                {
                    "args": "lcm_def, lcm (p * m) (p * n) = p * lcm m n",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(p = 0) ⊢ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(p = 0) ⟶ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ lcm (p * m) (p * n) = p * lcm m n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm (p * m) (p * n) = p * lcm m n"
                }
            ],
            "prop": "lcm (p * m) (p * n) = p * lcm m n",
            "steps": [
                {
                    "case": "p=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "m * n = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "p * m * (p * n) = 0",
                    "goal_id": "1.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.1"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal": "~(p * m * (p * n) = 0)",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_mult_left"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "apply_forward_step",
                    "param_n": "m * (p * n)",
                    "param_p": "gcd m n",
                    "theorem": "div_mult2"
                },
                {
                    "fact_ids": [
                        "1.2.2"
                    ],
                    "goal_id": "1.2.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "m * (p * n) = p * (m * n)",
                    "goal_id": "1.2.3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.3",
                    "method_name": "nat_norm"
                },
                {
                    "fact_ids": [
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "apply_backward_step",
                    "param_r": "(0::nat)",
                    "theorem": "div_uniq"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "divides_div_mult"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "1.2.12",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "1.2.12",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_zero"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.12",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_rmul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_comm, {x: p, y: lcm m n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ p * lcm m n = lcm m n * p"
                },
                {
                    "args": "lcm_lmul, lcm (p * m) (p * n) = lcm m n * p",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm (p * m) (p * n) = lcm m n * p"
                },
                {
                    "args": "mult_comm, lcm (m * p) (n * p) = p * lcm m n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm (m * p) (n * p) = p * lcm m n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm (m * p) (n * p) = p * lcm m n"
                }
            ],
            "prop": "lcm (m * p) (n * p) = p * lcm m n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_lmul"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "mult_comm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite",
                "hint_rewrite_sym"
            ],
            "name": "lcm_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 0 ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "¬(a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0))",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬(a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0))"
                },
                {
                    "args": "div_1, 1 DIV 1 = 1",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 1 DIV 1 = 1"
                },
                {
                    "args": "gcd_refl, 1 DIV gcd 1 1 = 1",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ 1 DIV gcd 1 1 = 1"
                },
                {
                    "args": "mult_1_right, 1 * 1 DIV gcd 1 1 = 1",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ 1 * 1 DIV gcd 1 1 = 1"
                },
                {
                    "args": "if_not_P, (if a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0) then 0 else 1 * 1 DIV gcd 1 1) = 1",
                    "id": "0.5",
                    "prevs": [
                        "0.4",
                        "0.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (if a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0) then 0 else 1 * 1 DIV gcd 1 1) = 1"
                },
                {
                    "args": "nat_nat_power_def_1, (if a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0) then 0 else a ^ (0::nat) * b ^ (0::nat) DIV gcd (a ^ (0::nat)) (b ^ (0::nat))) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ (0::nat)",
                    "id": "0.6",
                    "prevs": [
                        "0.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0 ⊢ (if a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0) then 0 else a ^ (0::nat) * b ^ (0::nat) DIV gcd (a ^ (0::nat)) (b ^ (0::nat))) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ (0::nat)"
                },
                {
                    "args": "(if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n",
                    "id": "0.7",
                    "prevs": [
                        "0.0",
                        "0.6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0 ⊢ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 0 ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(n = 0) ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ a = 0 ∨ b = 0 ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "a = 0 ∨ b = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = 0 ∨ b = 0 ⊢ a = 0 ∨ b = 0"
                },
                {
                    "args": "a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0)",
                    "id": "1.1.1",
                    "prevs": [
                        "1.1.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(n = 0), a = 0 ∨ b = 0 ⊢ a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0)"
                },
                {
                    "args": "if_not_P, (0::nat) = (if n = 0 then 1 else 0)",
                    "id": "1.1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ (0::nat) = (if n = 0 then 1 else 0)"
                },
                {
                    "args": "exp_zero, (0::nat) = 0 ^ n",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), a = 0 ∨ b = 0 ⊢ (0::nat) = 0 ^ n"
                },
                {
                    "args": "if_P, (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = 0 ^ n",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.3",
                        "1.1.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), a = 0 ∨ b = 0 ⊢ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = 0 ^ n"
                },
                {
                    "args": "if_P, (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n",
                    "id": "1.1.5",
                    "prevs": [
                        "1.1.4",
                        "1.1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), a = 0 ∨ b = 0 ⊢ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "",
                    "id": "1.1.6",
                    "prevs": [
                        "1.1.0",
                        "1.1.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ a = 0 ∨ b = 0 ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ ¬(a = 0 ∨ b = 0) ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "¬(a = 0 ∨ b = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(a = 0 ∨ b = 0) ⊢ ¬(a = 0 ∨ b = 0)"
                },
                {
                    "args": "¬(a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0))",
                    "id": "1.2.1",
                    "prevs": [
                        "1.2.0",
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ ¬(a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0))"
                },
                {
                    "args": "gcd_divides2, {m: a, n: b}",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) b"
                },
                {
                    "args": "divides_lmul, {a: b, d: gcd a b, x: a}",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ divides (gcd a b) (a * b)"
                },
                {
                    "args": "divides_div_mult",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ a * b DIV gcd a b * gcd a b = a * b"
                },
                {
                    "args": "(a * b) ^ n = (a * b DIV gcd a b * gcd a b) ^ n",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ (a * b) ^ n = (a * b DIV gcd a b * gcd a b) ^ n"
                },
                {
                    "args": "mult_exp, a ^ n * b ^ n = (a * b DIV gcd a b) ^ n * gcd a b ^ n",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ a ^ n * b ^ n = (a * b DIV gcd a b) ^ n * gcd a b ^ n"
                },
                {
                    "args": "add_0_right, a ^ n * b ^ n = (a * b DIV gcd a b) ^ n * gcd a b ^ n + 0",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ a ^ n * b ^ n = (a * b DIV gcd a b) ^ n * gcd a b ^ n + 0"
                },
                {
                    "args": "¬(a = 0 ∧ b = 0)",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(a = 0 ∨ b = 0) ⊢ ¬(a = 0 ∧ b = 0)"
                },
                {
                    "args": "gcd_zero, ¬(gcd a b = 0)",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ ¬(gcd a b = 0)"
                },
                {
                    "args": "disjI1, {A: ¬(gcd a b = 0), B: n = 0}",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ ¬(gcd a b = 0) ∨ n = 0"
                },
                {
                    "args": "exp_lt_0, 0 < gcd a b ^ n",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ 0 < gcd a b ^ n"
                },
                {
                    "args": "div_uniq",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.7",
                        "1.2.11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ a ^ n * b ^ n DIV gcd a b ^ n = (a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "gcd_exp, a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n) = (a * b DIV gcd a b) ^ n",
                    "id": "1.2.13",
                    "prevs": [
                        "1.2.12"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n) = (a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "if_not_P, a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n",
                    "id": "1.2.14",
                    "prevs": [
                        "1.2.13",
                        "1.2.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "if_not_P, (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n",
                    "id": "1.2.15",
                    "prevs": [
                        "1.2.14",
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), ¬(a = 0 ∨ b = 0) ⊢ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.16",
                    "prevs": [
                        "1.2.0",
                        "1.2.15"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ ¬(a = 0 ∨ b = 0) ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0) then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "exp_eq_0, (if a ^ n = 0 ∨ b ^ n = 0 then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if a ^ n = 0 ∨ b ^ n = 0 then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a = 0 ∨ b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "mult_eq_0, (if a ^ n * b ^ n = 0 then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a * b = 0 then 0 else a * b DIV gcd a b) ^ n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if a ^ n * b ^ n = 0 then 0 else a ^ n * b ^ n DIV gcd (a ^ n) (b ^ n)) = (if a * b = 0 then 0 else a * b DIV gcd a b) ^ n"
                },
                {
                    "args": "lcm_def, lcm (a ^ n) (b ^ n) = lcm a b ^ n",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm (a ^ n) (b ^ n) = lcm a b ^ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm (a ^ n) (b ^ n) = lcm a b ^ n"
                }
            ],
            "prop": "lcm (a ^ n) (b ^ n) = lcm a b ^ n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_eq_0"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "case": "n=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal": "~(a = 0 ∧ ¬((0::nat) = 0) ∨ b = 0 ∧ ¬((0::nat) = 0))",
                    "goal_id": "0.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_refl"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "div_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": " a = 0 ∨ b = 0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal": "a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0)",
                    "goal_id": "1.1.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.1.0",
                        "1.0"
                    ],
                    "goal_id": "1.1.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.1.1"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_zero"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal": "~(a = 0 ∧ ¬(n = 0) ∨ b = 0 ∧ ¬(n = 0))",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.2.1"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_exp"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "apply_backward_step",
                    "param_r": "(0::nat)",
                    "theorem": "div_uniq"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "mult_exp"
                },
                {
                    "goal": "divides (gcd a b) (a * b)",
                    "goal_id": "1.2.2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "fact_ids": [
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_div_mult"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "exp_lt_0"
                },
                {
                    "goal_id": "1.2.8",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.2.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_zero"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.8",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lcm_coprime_decomp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ (∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n)"
                },
                {
                    "args": "m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "divides_0, divides 0 0",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides 0 0"
                },
                {
                    "args": "divides_1, {x: n}",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides 1 n"
                },
                {
                    "args": "coprime_1, {a: (0::nat)}",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ coprime 0 1"
                },
                {
                    "args": "nat_times_def_1, (0::nat) * 1 = 0",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (0::nat) * 1 = 0"
                },
                {
                    "args": "lcm_0, 0 * 1 = lcm 0 n",
                    "id": "0.5",
                    "prevs": [
                        "0.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0 ⊢ 0 * 1 = lcm 0 n"
                },
                {
                    "args": "conjI",
                    "id": "0.6",
                    "prevs": [
                        "0.3",
                        "0.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ⊢ coprime 0 1 ∧ 0 * 1 = lcm 0 n"
                },
                {
                    "args": "conjI",
                    "id": "0.7",
                    "prevs": [
                        "0.2",
                        "0.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ⊢ divides 1 n ∧ coprime 0 1 ∧ 0 * 1 = lcm 0 n"
                },
                {
                    "args": "conjI",
                    "id": "0.8",
                    "prevs": [
                        "0.1",
                        "0.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ⊢ divides 0 0 ∧ divides 1 n ∧ coprime 0 1 ∧ 0 * 1 = lcm 0 n"
                },
                {
                    "args": "exI, {P: λn1. divides 0 0 ∧ divides n1 n ∧ coprime 0 n1 ∧ 0 * n1 = lcm 0 n, a: (1::nat)}",
                    "id": "0.9",
                    "prevs": [
                        "0.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0 ⊢ ∃a1. divides 0 0 ∧ divides a1 n ∧ coprime 0 a1 ∧ 0 * a1 = lcm 0 n"
                },
                {
                    "args": "exI, {P: λm1. ∃n1. divides m1 0 ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm 0 n, a: (0::nat)}",
                    "id": "0.10",
                    "prevs": [
                        "0.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0 ⊢ ∃a1. ∃n1. divides a1 0 ∧ divides n1 n ∧ coprime a1 n1 ∧ a1 * n1 = lcm 0 n"
                },
                {
                    "args": "∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n",
                    "id": "0.11",
                    "prevs": [
                        "0.0",
                        "0.10"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0 ⊢ ∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n"
                },
                {
                    "args": "",
                    "id": "0.12",
                    "prevs": [
                        "0.0",
                        "0.11"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ (∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m = 0) ⟶ (∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n)"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "gcd_coprime_exists, {a: m, b: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃c. ∃d. m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d"
                },
                {
                    "args": "c, nat",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR c"
                },
                {
                    "args": "d, nat",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d"
                },
                {
                    "args": "conjD1",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ m = c * gcd m n"
                },
                {
                    "args": "conjD2",
                    "id": "1.6",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ n = d * gcd m n ∧ coprime c d"
                },
                {
                    "args": "conjD1",
                    "id": "1.7",
                    "prevs": [
                        "1.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ n = d * gcd m n"
                },
                {
                    "args": "conjD2",
                    "id": "1.8",
                    "prevs": [
                        "1.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ coprime c d"
                },
                {
                    "args": "coprime_pair_decomp, {m: gcd m n}",
                    "id": "1.9",
                    "prevs": [
                        "1.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ¬(gcd m n = 0) ⟶ (∃m1. ∃m2. coprime m1 c ∧ coprime m2 d ∧ coprime m1 m2 ∧ m1 * m2 = gcd m n)"
                },
                {
                    "args": "gcd_zero",
                    "id": "1.10",
                    "prevs": [
                        "1.9"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ¬(m = 0 ∧ n = 0) ⟶ (∃m1. ∃m2. coprime m1 c ∧ coprime m2 d ∧ coprime m1 m2 ∧ m1 * m2 = gcd m n)"
                },
                {
                    "args": "¬(m = 0 ∧ n = 0)",
                    "id": "1.11",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "z3",
                    "th": "¬(m = 0) ⊢ ¬(m = 0 ∧ n = 0)"
                },
                {
                    "args": "",
                    "id": "1.12",
                    "prevs": [
                        "1.10",
                        "1.11"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(m = 0), m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ∃m1. ∃m2. coprime m1 c ∧ coprime m2 d ∧ coprime m1 m2 ∧ m1 * m2 = gcd m n"
                },
                {
                    "args": "n1, nat",
                    "id": "1.13",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n1"
                },
                {
                    "args": "m1, nat",
                    "id": "1.14",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR m1"
                },
                {
                    "args": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n",
                    "id": "1.15",
                    "prevs": [],
                    "rule": "assume",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n"
                },
                {
                    "args": "conjD1",
                    "id": "1.16",
                    "prevs": [
                        "1.15"
                    ],
                    "rule": "apply_theorem",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ coprime n1 c"
                },
                {
                    "args": "conjD2",
                    "id": "1.17",
                    "prevs": [
                        "1.15"
                    ],
                    "rule": "apply_theorem",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n"
                },
                {
                    "args": "conjD1",
                    "id": "1.18",
                    "prevs": [
                        "1.17"
                    ],
                    "rule": "apply_theorem",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ coprime m1 d"
                },
                {
                    "args": "conjD2",
                    "id": "1.19",
                    "prevs": [
                        "1.17"
                    ],
                    "rule": "apply_theorem",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ coprime n1 m1 ∧ n1 * m1 = gcd m n"
                },
                {
                    "args": "conjD1",
                    "id": "1.20",
                    "prevs": [
                        "1.19"
                    ],
                    "rule": "apply_theorem",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ coprime n1 m1"
                },
                {
                    "args": "conjD2",
                    "id": "1.21",
                    "prevs": [
                        "1.19"
                    ],
                    "rule": "apply_theorem",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ n1 * m1 = gcd m n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.22",
                    "prevs": [
                        "1.21"
                    ],
                    "rule": "rewrite_fact",
                    "th": "coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n ⊢ gcd m n = n1 * m1"
                },
                {
                    "args": "divides_self, {n: m1}",
                    "id": "1.23",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m1 m1"
                },
                {
                    "args": "divides_lmul, {a: m1, d: m1, x: n1}",
                    "id": "1.24",
                    "prevs": [
                        "1.23"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides m1 (n1 * m1)"
                },
                {
                    "args": "divides m1 (gcd m n)",
                    "id": "1.25",
                    "prevs": [
                        "1.22",
                        "1.24"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides m1 (gcd m n)"
                },
                {
                    "args": "divides_mult_left, {k: c, m: m1, n: gcd m n}",
                    "id": "1.26",
                    "prevs": [
                        "1.25"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (c * m1) (c * gcd m n)"
                },
                {
                    "args": "divides (c * m1) m",
                    "id": "1.27",
                    "prevs": [
                        "1.5",
                        "1.26"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (c * m1) m"
                },
                {
                    "args": "divides_self, {n: n1}",
                    "id": "1.28",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n1 n1"
                },
                {
                    "args": "divides_rmul, {a: n1, d: n1, x: m1}",
                    "id": "1.29",
                    "prevs": [
                        "1.28"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides n1 (n1 * m1)"
                },
                {
                    "args": "divides n1 (gcd m n)",
                    "id": "1.30",
                    "prevs": [
                        "1.22",
                        "1.29"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides n1 (gcd m n)"
                },
                {
                    "args": "divides_mult_left, {k: d, m: n1, n: gcd m n}",
                    "id": "1.31",
                    "prevs": [
                        "1.30"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (d * n1) (d * gcd m n)"
                },
                {
                    "args": "divides (d * n1) n",
                    "id": "1.32",
                    "prevs": [
                        "1.7",
                        "1.31"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (d * n1) n"
                },
                {
                    "args": "coprime_sym, coprime c n1",
                    "id": "1.33",
                    "prevs": [
                        "1.16"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ coprime c n1"
                },
                {
                    "args": "conjI",
                    "id": "1.34",
                    "prevs": [
                        "1.8",
                        "1.33"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ coprime c d ∧ coprime c n1"
                },
                {
                    "args": "coprime_sym, coprime m1 n1",
                    "id": "1.35",
                    "prevs": [
                        "1.20"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ coprime m1 n1"
                },
                {
                    "args": "conjI",
                    "id": "1.36",
                    "prevs": [
                        "1.18",
                        "1.35"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ coprime m1 d ∧ coprime m1 n1"
                },
                {
                    "args": "conjI",
                    "id": "1.37",
                    "prevs": [
                        "1.34",
                        "1.36"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ (coprime c d ∧ coprime c n1) ∧ coprime m1 d ∧ coprime m1 n1"
                },
                {
                    "args": "∀a::nat. ∀b. ∀d. ¬(d = 0) ⟶ a * d = b * d ⟶ a = b",
                    "id": "1.38",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::nat. ∀b. ∀d. ¬(d = 0) ⟶ a * d = b * d ⟶ a = b"
                },
                {
                    "args": "gcd_zero, ¬(gcd m n = 0)",
                    "id": "1.39",
                    "prevs": [
                        "1.11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ¬(gcd m n = 0)"
                },
                {
                    "args": "c * m1 * (d * n1) * (n1 * m1) = c * (n1 * m1) * (d * (n1 * m1))",
                    "id": "1.40",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ c * m1 * (d * n1) * (n1 * m1) = c * (n1 * m1) * (d * (n1 * m1))"
                },
                {
                    "args": "c * m1 * (d * n1) * (n1 * m1) = c * (n1 * m1) * (d * gcd m n)",
                    "id": "1.41",
                    "prevs": [
                        "1.22",
                        "1.40"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) * (n1 * m1) = c * (n1 * m1) * (d * gcd m n)"
                },
                {
                    "args": "c * m1 * (d * n1) * (n1 * m1) = c * (n1 * m1) * n",
                    "id": "1.42",
                    "prevs": [
                        "1.7",
                        "1.41"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) * (n1 * m1) = c * (n1 * m1) * n"
                },
                {
                    "args": "c * m1 * (d * n1) * (n1 * m1) = c * gcd m n * n",
                    "id": "1.43",
                    "prevs": [
                        "1.22",
                        "1.42"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) * (n1 * m1) = c * gcd m n * n"
                },
                {
                    "args": "c * m1 * (d * n1) * (n1 * m1) = m * n",
                    "id": "1.44",
                    "prevs": [
                        "1.5",
                        "1.43"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) * (n1 * m1) = m * n"
                },
                {
                    "args": "c * m1 * (d * n1) * gcd m n = m * n",
                    "id": "1.45",
                    "prevs": [
                        "1.22",
                        "1.44"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) * gcd m n = m * n"
                },
                {
                    "args": "mult_lcm_gcd, c * m1 * (d * n1) * gcd m n = lcm m n * gcd m n",
                    "id": "1.46",
                    "prevs": [
                        "1.45"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) * gcd m n = lcm m n * gcd m n"
                },
                {
                    "args": "c * m1 * (d * n1), lcm m n, gcd m n",
                    "id": "1.47",
                    "prevs": [
                        "1.38",
                        "1.39",
                        "1.46"
                    ],
                    "rule": "apply_fact_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ c * m1 * (d * n1) = lcm m n"
                },
                {
                    "args": "conjI",
                    "id": "1.48",
                    "prevs": [
                        "1.37",
                        "1.47"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ((coprime c d ∧ coprime c n1) ∧ coprime m1 d ∧ coprime m1 n1) ∧ c * m1 * (d * n1) = lcm m n"
                },
                {
                    "args": "conjI",
                    "id": "1.49",
                    "prevs": [
                        "1.32",
                        "1.48"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (d * n1) n ∧ ((coprime c d ∧ coprime c n1) ∧ coprime m1 d ∧ coprime m1 n1) ∧ c * m1 * (d * n1) = lcm m n"
                },
                {
                    "args": "conjI",
                    "id": "1.50",
                    "prevs": [
                        "1.27",
                        "1.49"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (c * m1) m ∧ divides (d * n1) n ∧ ((coprime c d ∧ coprime c n1) ∧ coprime m1 d ∧ coprime m1 n1) ∧ c * m1 * (d * n1) = lcm m n"
                },
                {
                    "args": "coprime_rmul, divides (c * m1) m ∧ divides (d * n1) n ∧ (coprime c (d * n1) ∧ coprime m1 (d * n1)) ∧ c * m1 * (d * n1) = lcm m n",
                    "id": "1.51",
                    "prevs": [
                        "1.50"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (c * m1) m ∧ divides (d * n1) n ∧ (coprime c (d * n1) ∧ coprime m1 (d * n1)) ∧ c * m1 * (d * n1) = lcm m n"
                },
                {
                    "args": "coprime_lmul, divides (c * m1) m ∧ divides (d * n1) n ∧ coprime (c * m1) (d * n1) ∧ c * m1 * (d * n1) = lcm m n",
                    "id": "1.52",
                    "prevs": [
                        "1.51"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ divides (c * m1) m ∧ divides (d * n1) n ∧ coprime (c * m1) (d * n1) ∧ c * m1 * (d * n1) = lcm m n"
                },
                {
                    "args": "exI, {P: λn1. divides (c * m1) m ∧ divides n1 n ∧ coprime (c * m1) n1 ∧ c * m1 * n1 = lcm m n, a: d * n1}",
                    "id": "1.53",
                    "prevs": [
                        "1.52"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ∃a1. divides (c * m1) m ∧ divides a1 n ∧ coprime (c * m1) a1 ∧ c * m1 * a1 = lcm m n"
                },
                {
                    "args": "exI, {P: λm1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n, a: c * m1}",
                    "id": "1.54",
                    "prevs": [
                        "1.53"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m = 0), coprime n1 c ∧ coprime m1 d ∧ coprime n1 m1 ∧ n1 * m1 = gcd m n, m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d ⊢ ∃a1. ∃n1. divides a1 m ∧ divides n1 n ∧ coprime a1 n1 ∧ a1 * n1 = lcm m n"
                },
                {
                    "args": "∃m1. ∃m2. coprime m1 c ∧ coprime m2 d ∧ coprime m1 m2 ∧ m1 * m2 = gcd m n, ∃c. ∃d. m = c * gcd m n ∧ n = d * gcd m n ∧ coprime c d",
                    "id": "1.55",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3",
                        "1.4",
                        "1.12",
                        "1.13",
                        "1.14",
                        "1.15",
                        "1.54"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ (∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ ∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n"
                }
            ],
            "prop": "∃m1. ∃n1. divides m1 m ∧ divides n1 n ∧ coprime m1 n1 ∧ m1 * n1 = lcm m n",
            "steps": [
                {
                    "case": "m=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_0"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_1"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "apply_backward_step",
                    "theorem": "coprime_1"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_0"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "param_a": "m",
                    "param_b": "n",
                    "theorem": "gcd_coprime_exists"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "exists_elim",
                    "names": "c,d"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.6"
                    ],
                    "goal_id": "1.7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.6"
                    ],
                    "goal_id": "1.8",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.8"
                    ],
                    "goal_id": "1.9",
                    "method_name": "apply_forward_step",
                    "param_m": "gcd m n",
                    "theorem": "coprime_pair_decomp"
                },
                {
                    "fact_ids": [
                        "1.9"
                    ],
                    "goal_id": "1.10",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "gcd_zero"
                },
                {
                    "goal": "¬(m = 0 ∧ n = 0)",
                    "goal_id": "1.11",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.11",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.10",
                        "1.11"
                    ],
                    "goal_id": "1.12",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.12"
                    ],
                    "goal_id": "1.13",
                    "method_name": "exists_elim",
                    "names": "n1,m1"
                },
                {
                    "fact_ids": [
                        "1.15"
                    ],
                    "goal_id": "1.16",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.15"
                    ],
                    "goal_id": "1.17",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.17"
                    ],
                    "goal_id": "1.18",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.17"
                    ],
                    "goal_id": "1.19",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.19"
                    ],
                    "goal_id": "1.20",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.19"
                    ],
                    "goal_id": "1.21",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "1.22",
                    "method_name": "inst_exists_goal",
                    "s": "c*m1"
                },
                {
                    "goal_id": "1.22",
                    "method_name": "inst_exists_goal",
                    "s": "d*n1"
                },
                {
                    "goal_id": "1.22",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "coprime_lmul"
                },
                {
                    "goal_id": "1.22",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "coprime_rmul"
                },
                {
                    "goal_id": "1.22",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.5"
                    ],
                    "goal_id": "1.22",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.22",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "fact_ids": [
                        "1.21"
                    ],
                    "goal_id": "1.22",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.22"
                    ],
                    "goal_id": "1.23",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.23",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "1.23",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1.28",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.7"
                    ],
                    "goal_id": "1.28",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.28",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "fact_ids": [
                        "1.22"
                    ],
                    "goal_id": "1.28",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.28",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "1.28",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "1.33",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.33",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.33",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.33",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "coprime_sym"
                },
                {
                    "goal_id": "1.35",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.35",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "coprime_sym"
                },
                {
                    "goal": "!a. !b. !d::nat. ~(d = 0) --> a * d = b * d --> a = b",
                    "goal_id": "1.38",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.38",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1.38"
                    ],
                    "goal_id": "1.39",
                    "method_name": "apply_prev",
                    "param_d": "gcd m n"
                },
                {
                    "goal_id": "1.39",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_zero"
                },
                {
                    "goal_id": "1.40",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_lcm_gcd"
                },
                {
                    "fact_ids": [
                        "1.22"
                    ],
                    "goal_id": "1.40",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.5"
                    ],
                    "goal_id": "1.40",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.22"
                    ],
                    "goal_id": "1.40",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.7"
                    ],
                    "goal_id": "1.40",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1.22"
                    ],
                    "goal_id": "1.40",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.40",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_lcm1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ⊢ m ≤ lcm m n ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "m ≤ lcm m n",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ lcm m n ⊢ m ≤ lcm m n"
                },
                {
                    "args": "n = 0",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1",
                        "0.0"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ⊢ m ≤ lcm m n ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ⊢ (n = 0 ⟶ m = 0) ⟶ m ≤ lcm m n"
                },
                {
                    "args": "n = 0 ⟶ m = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "le_0, {n: lcm 0 n}",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ lcm 0 n"
                },
                {
                    "args": "m ≤ lcm m n",
                    "id": "0.2.2",
                    "prevs": [
                        "0.0",
                        "0.2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, n = 0 ⟶ m = 0 ⊢ m ≤ lcm m n"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.0",
                        "0.2.2"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ⊢ (n = 0 ⟶ m = 0) ⟶ m ≤ lcm m n"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ⊢ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m = 0) ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0) ⊢ n = 0 ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "n = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n = 0, ¬(m = 0) ⊢ m ≤ lcm m n ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "m ≤ lcm m n",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ lcm m n ⊢ m ≤ lcm m n"
                },
                {
                    "args": "",
                    "id": "1.1.1.1",
                    "prevs": [
                        "1.1.0",
                        "1.1.1.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "n = 0, m ≤ lcm m n ⊢ m ≤ lcm m 0"
                },
                {
                    "args": "lcm_sym",
                    "id": "1.1.1.2",
                    "prevs": [
                        "1.1.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n = 0, m ≤ lcm m n ⊢ m ≤ lcm 0 m"
                },
                {
                    "args": "lcm_0",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n = 0, m ≤ lcm m n ⊢ m ≤ 0"
                },
                {
                    "args": "nat_le_zero",
                    "id": "1.1.1.4",
                    "prevs": [
                        "1.1.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "n = 0, m ≤ lcm m n ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1.5",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.0",
                        "1.1.1.4"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0) ⊢ m ≤ lcm m n ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n = 0, ¬(m = 0) ⊢ (n = 0 ⟶ m = 0) ⟶ m ≤ lcm m n"
                },
                {
                    "args": "n = 0 ⟶ m = 0",
                    "id": "1.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.2.1",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.0"
                    ],
                    "rule": "apply_fact",
                    "th": "n = 0, n = 0 ⟶ m = 0 ⊢ m = 0"
                },
                {
                    "args": "le_0, {n: lcm 0 n}",
                    "id": "1.1.2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ lcm 0 n"
                },
                {
                    "args": "m ≤ lcm m n",
                    "id": "1.1.2.3",
                    "prevs": [
                        "1.1.2.1",
                        "1.1.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, ¬(m = 0), n = 0 ⟶ m = 0 ⊢ m ≤ lcm m n"
                },
                {
                    "args": "",
                    "id": "1.1.2.4",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.2.3"
                    ],
                    "rule": "intros",
                    "th": "n = 0, ¬(m = 0) ⊢ (n = 0 ⟶ m = 0) ⟶ m ≤ lcm m n"
                },
                {
                    "args": "iffI",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.1",
                        "1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "n = 0, ¬(m = 0) ⊢ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0) ⊢ n = 0 ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0) ⊢ ¬(n = 0) ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ m ≤ lcm m n ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "m ≤ lcm m n",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ lcm m n ⊢ m ≤ lcm m n"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "negE_gen, {A: n = 0, C: m = 0}",
                    "id": "1.2.1.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, ¬(n = 0) ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.1",
                        "1.2.1.2"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ m ≤ lcm m n ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ (n = 0 ⟶ m = 0) ⟶ m ≤ lcm m n"
                },
                {
                    "args": "n = 0 ⟶ m = 0",
                    "id": "1.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "lcm1, {m: m, n: n}",
                    "id": "1.2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m (lcm m n)"
                },
                {
                    "args": "",
                    "id": "1.2.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0), ¬(n = 0), n = 0 ⟶ m = 0 ⊢ m = 0 ∨ n = 0 ⟶ m = 0"
                },
                {
                    "args": "m = 0 ∨ n = 0",
                    "id": "1.2.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ n = 0 ⊢ m = 0 ∨ n = 0"
                },
                {
                    "args": "m = 0 ⟶ m = 0",
                    "id": "1.2.2.2.1",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m = 0 ⟶ m = 0"
                },
                {
                    "args": "disjE",
                    "id": "1.2.2.2.2",
                    "prevs": [
                        "1.2.2.2.0",
                        "1.2.2.2.1",
                        "1.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), ¬(n = 0), m = 0 ∨ n = 0, n = 0 ⟶ m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.2.2.2.3",
                    "prevs": [
                        "1.2.2.2.0",
                        "1.2.2.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0), ¬(n = 0), n = 0 ⟶ m = 0 ⊢ m = 0 ∨ n = 0 ⟶ m = 0"
                },
                {
                    "args": "lcm_zero, lcm m n = 0 ⟶ m = 0",
                    "id": "1.2.2.3",
                    "prevs": [
                        "1.2.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0), n = 0 ⟶ m = 0 ⊢ lcm m n = 0 ⟶ m = 0"
                },
                {
                    "args": "divides_le_imp",
                    "id": "1.2.2.4",
                    "prevs": [
                        "1.2.2.1",
                        "1.2.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), ¬(n = 0), n = 0 ⟶ m = 0 ⊢ m ≤ lcm m n"
                },
                {
                    "args": "",
                    "id": "1.2.2.5",
                    "prevs": [
                        "1.2.2.0",
                        "1.2.2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ (n = 0 ⟶ m = 0) ⟶ m ≤ lcm m n"
                },
                {
                    "args": "iffI",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "1.2.4",
                    "prevs": [
                        "1.2.0",
                        "1.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0) ⊢ ¬(n = 0) ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)"
                }
            ],
            "prop": "m ≤ lcm m n ⟷ (n = 0 ⟶ m = 0)",
            "steps": [
                {
                    "case": "m=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "n=0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0",
                        "1.1.1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.1.1.1"
                    ],
                    "goal_id": "1.1.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "lcm_sym"
                },
                {
                    "fact_ids": [
                        "1.1.1.2"
                    ],
                    "goal_id": "1.1.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "lcm_0"
                },
                {
                    "fact_ids": [
                        "1.1.1.3"
                    ],
                    "goal_id": "1.1.1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "nat_le_zero"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.2.0",
                        "1.1.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "1.1.2.1"
                    ],
                    "goal_id": "1.1.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0",
                        "1.2.1.1"
                    ],
                    "goal_id": "1.2.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "1.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_le_imp"
                },
                {
                    "goal_id": "1.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lcm1"
                },
                {
                    "goal_id": "1.2.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_zero"
                },
                {
                    "goal_id": "1.2.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.2.2.0"
                    ],
                    "goal_id": "1.2.2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "le_lcm2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "le_lcm1, n ≤ lcm n m ⟷ (m = 0 ⟶ n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ≤ lcm n m ⟷ (m = 0 ⟶ n = 0)"
                },
                {
                    "args": "lcm_sym, n ≤ lcm m n ⟷ (m = 0 ⟶ n = 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ n ≤ lcm m n ⟷ (m = 0 ⟶ n = 0)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ n ≤ lcm m n ⟷ (m = 0 ⟶ n = 0)"
                }
            ],
            "prop": "n ≤ lcm m n ⟷ (m = 0 ⟶ n = 0)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_sym"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_lcm1"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "lcm_le_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m * n = 0 ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "m * n = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m * n = 0 ⊢ m * n = 0"
                },
                {
                    "args": "le_0, {n: m * n}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ m * n"
                },
                {
                    "args": "if_P, (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n",
                    "id": "0.2",
                    "prevs": [
                        "0.1",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m * n = 0 ⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "",
                    "id": "0.3",
                    "prevs": [
                        "0.0",
                        "0.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m * n = 0 ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m * n = 0) ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "¬(m * n = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m * n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "div_le, {m: m * n, n: gcd m n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ m * n DIV gcd m n ≤ m * n"
                },
                {
                    "args": "if_not_P, (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m * n = 0) ⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m * n = 0) ⟶ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) ≤ m * n"
                },
                {
                    "args": "lcm_def, lcm m n ≤ m * n",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ lcm m n ≤ m * n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n ≤ m * n"
                }
            ],
            "prop": "lcm m n ≤ m * n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "case": "m * n = 0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "div_le"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "lcm_eq_mult",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = 0 ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "m = 0",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ⊢ lcm m n = m * n ⟶ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "lcm m n = m * n",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "lcm m n = m * n ⊢ lcm m n = m * n"
                },
                {
                    "args": "disjI1, {A: m = 0, B: n = 0 ∨ coprime m n}",
                    "id": "0.1.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0, lcm m n = m * n ⊢ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ⊢ lcm m n = m * n ⟶ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = 0 ⊢ m = 0 ∨ n = 0 ∨ coprime m n ⟶ lcm m n = m * n"
                },
                {
                    "args": "m = 0 ∨ n = 0 ∨ coprime m n",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ n = 0 ∨ coprime m n ⊢ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "nat_times_def_1, 0 = 0 * n",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = 0 * n"
                },
                {
                    "args": "lcm_0, lcm 0 n = 0 * n",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0, m = 0 ∨ n = 0 ∨ coprime m n ⊢ lcm 0 n = 0 * n"
                },
                {
                    "args": "lcm m n = m * n",
                    "id": "0.2.3",
                    "prevs": [
                        "0.0",
                        "0.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, m = 0 ∨ n = 0 ∨ coprime m n ⊢ lcm m n = m * n"
                },
                {
                    "args": "",
                    "id": "0.2.4",
                    "prevs": [
                        "0.2.0",
                        "0.2.3"
                    ],
                    "rule": "intros",
                    "th": "m = 0 ⊢ m = 0 ∨ n = 0 ∨ coprime m n ⟶ lcm m n = m * n"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m = 0 ⊢ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m = 0) ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0) ⊢ n = 0 ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "n = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n = 0, ¬(m = 0) ⊢ lcm m n = m * n ⟶ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "lcm m n = m * n",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "lcm m n = m * n ⊢ lcm m n = m * n"
                },
                {
                    "args": "disjI1, {A: n = 0, B: coprime m n}",
                    "id": "1.1.1.1",
                    "prevs": [
                        "1.1.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, ¬(m = 0), lcm m n = m * n ⊢ n = 0 ∨ coprime m n"
                },
                {
                    "args": "disjI2, {A: m = 0, B: n = 0 ∨ coprime m n}",
                    "id": "1.1.1.2",
                    "prevs": [
                        "1.1.1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, ¬(m = 0), lcm m n = m * n ⊢ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.2"
                    ],
                    "rule": "intros",
                    "th": "n = 0, ¬(m = 0) ⊢ lcm m n = m * n ⟶ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1.1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "n = 0, ¬(m = 0) ⊢ m = 0 ∨ n = 0 ∨ coprime m n ⟶ lcm m n = m * n"
                },
                {
                    "args": "m = 0 ∨ n = 0 ∨ coprime m n",
                    "id": "1.1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ∨ n = 0 ∨ coprime m n ⊢ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "mult_0_right, 0 = m * 0",
                    "id": "1.1.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = m * 0"
                },
                {
                    "args": "lcm_0, lcm 0 m = m * 0",
                    "id": "1.1.2.2",
                    "prevs": [
                        "1.1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0, ¬(m = 0), m = 0 ∨ n = 0 ∨ coprime m n ⊢ lcm 0 m = m * 0"
                },
                {
                    "args": "lcm_sym, lcm m 0 = m * 0",
                    "id": "1.1.2.3",
                    "prevs": [
                        "1.1.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "n = 0, ¬(m = 0), m = 0 ∨ n = 0 ∨ coprime m n ⊢ lcm m 0 = m * 0"
                },
                {
                    "args": "lcm m n = m * n",
                    "id": "1.1.2.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, ¬(m = 0), m = 0 ∨ n = 0 ∨ coprime m n ⊢ lcm m n = m * n"
                },
                {
                    "args": "",
                    "id": "1.1.2.5",
                    "prevs": [
                        "1.1.2.0",
                        "1.1.2.4"
                    ],
                    "rule": "intros",
                    "th": "n = 0, ¬(m = 0) ⊢ m = 0 ∨ n = 0 ∨ coprime m n ⟶ lcm m n = m * n"
                },
                {
                    "args": "iffI",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.1",
                        "1.1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "n = 0, ¬(m = 0) ⊢ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1.1.4",
                    "prevs": [
                        "1.1.0",
                        "1.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0) ⊢ n = 0 ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m = 0) ⊢ ¬(n = 0) ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "conjI",
                    "id": "1.2.1",
                    "prevs": [
                        "1.0",
                        "1.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ ¬(m = 0) ∧ ¬(n = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(m = 0 ∨ n = 0)",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ ¬(m = 0 ∨ n = 0)"
                },
                {
                    "args": "mult_eq_0, ¬(m * n = 0)",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ ¬(m * n = 0)"
                },
                {
                    "args": "disj_assoc_eq, (m = 0 ∨ n = 0) ∨ gcd m n = 1 ⟷ m = 0 ∨ n = 0 ∨ gcd m n = 1",
                    "id": "1.2.4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (m = 0 ∨ n = 0) ∨ gcd m n = 1 ⟷ m = 0 ∨ n = 0 ∨ gcd m n = 1"
                },
                {
                    "args": "mult_eq_0, m * n = 0 ∨ gcd m n = 1 ⟷ m = 0 ∨ n = 0 ∨ gcd m n = 1",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ m * n = 0 ∨ gcd m n = 1 ⟷ m = 0 ∨ n = 0 ∨ gcd m n = 1"
                },
                {
                    "args": "coprime_gcd, m * n = 0 ∨ gcd m n = 1 ⟷ m = 0 ∨ n = 0 ∨ coprime m n",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ m * n = 0 ∨ gcd m n = 1 ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "div_eq_self, m * n DIV gcd m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ m * n DIV gcd m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "if_not_P, (if m * n = 0 then 0 else m * n DIV gcd m n) = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.7",
                        "1.2.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ (if m * n = 0 then 0 else m * n DIV gcd m n) = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "lcm_def, lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m = 0), ¬(n = 0) ⊢ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.0",
                        "1.2.9"
                    ],
                    "rule": "intros",
                    "th": "¬(m = 0) ⊢ ¬(n = 0) ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "classical_cases",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m = 0) ⊢ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m = 0) ⟶ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n"
                }
            ],
            "prop": "lcm m n = m * n ⟷ m = 0 ∨ n = 0 ∨ coprime m n",
            "steps": [
                {
                    "case": "m=0",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_0"
                },
                {
                    "goal_id": "0.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "case": "n=0",
                    "goal_id": "1.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "1.1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.0"
                    ],
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_sym"
                },
                {
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_0"
                },
                {
                    "goal_id": "1.1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lcm_def"
                },
                {
                    "goal": "~(m * n = 0)",
                    "goal_id": "1.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_eq_0"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "1.2.3"
                    ],
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "div_eq_self"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "coprime_gcd"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_eq_0"
                },
                {
                    "goal_id": "1.2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_assoc_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "max_le_lcm_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m ≤ n ⟶ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "m ≤ n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⊢ (m = 0 ⟶ n = 0) ⟶ m = 0 ⟷ n = 0"
                },
                {
                    "args": "m = 0 ⟶ n = 0",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⟶ n = 0 ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n, m = 0 ⟶ n = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "n = 0",
                    "id": "0.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.1.1",
                    "prevs": [
                        "0.1.1.0",
                        "0.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "n = 0, m ≤ n ⊢ m ≤ 0"
                },
                {
                    "args": "nat_le_zero",
                    "id": "0.1.1.2",
                    "prevs": [
                        "0.1.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "n = 0, m ≤ n ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.1.1.3",
                    "prevs": [
                        "0.1.1.0",
                        "0.1.1.2"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n, m = 0 ⟶ n = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "iffI",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n, m = 0 ⟶ n = 0 ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "0.1.3",
                    "prevs": [
                        "0.1.0",
                        "0.1.2"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⊢ (m = 0 ⟶ n = 0) ⟶ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m ≤ n ⊢ m = 0 ⟷ n = 0 ⟶ m = 0 ⟶ n = 0"
                },
                {
                    "args": "m = 0 ⟷ n = 0",
                    "id": "0.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⟷ n = 0 ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "0.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "0.2.2",
                    "prevs": [
                        "0.2.0",
                        "0.2.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, m = 0 ⟷ n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "0.2.3",
                    "prevs": [
                        "0.2.0",
                        "0.2.1",
                        "0.2.2"
                    ],
                    "rule": "intros",
                    "th": "m ≤ n ⊢ m = 0 ⟷ n = 0 ⟶ m = 0 ⟶ n = 0"
                },
                {
                    "args": "iffI",
                    "id": "0.3",
                    "prevs": [
                        "0.1",
                        "0.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "m ≤ n ⊢ (m = 0 ⟶ n = 0) ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "le_lcm2, n ≤ lcm m n ⟷ m = 0 ⟷ n = 0",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ⊢ n ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "if_P, (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0",
                    "id": "0.5",
                    "prevs": [
                        "0.4",
                        "0.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n ⊢ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟶ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬(m ≤ n) ⟶ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "¬(m ≤ n)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m ≤ n) ⊢ ¬(m ≤ n)"
                },
                {
                    "args": "",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m ≤ n) ⊢ (n = 0 ⟶ m = 0) ⟶ m = 0 ⟷ n = 0"
                },
                {
                    "args": "n = 0 ⟶ m = 0",
                    "id": "1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m ≤ n), n = 0 ⟶ m = 0 ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "1.1.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1.1",
                    "prevs": [
                        "1.1.1.0",
                        "1.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, ¬(m ≤ n) ⊢ ¬(0 ≤ n)"
                },
                {
                    "args": "le_0, {n: n}",
                    "id": "1.1.1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ 0 ≤ n"
                },
                {
                    "args": "negE_gen, {A: 0 ≤ n, C: n = 0}",
                    "id": "1.1.1.3",
                    "prevs": [
                        "1.1.1.1",
                        "1.1.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m = 0, ¬(m ≤ n), n = 0 ⟶ m = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1.1.4",
                    "prevs": [
                        "1.1.1.0",
                        "1.1.1.3"
                    ],
                    "rule": "intros",
                    "th": "¬(m ≤ n), n = 0 ⟶ m = 0 ⊢ m = 0 ⟶ n = 0"
                },
                {
                    "args": "iffI",
                    "id": "1.1.2",
                    "prevs": [
                        "1.1.1",
                        "1.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m ≤ n), n = 0 ⟶ m = 0 ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "1.1.3",
                    "prevs": [
                        "1.1.0",
                        "1.1.2"
                    ],
                    "rule": "intros",
                    "th": "¬(m ≤ n) ⊢ (n = 0 ⟶ m = 0) ⟶ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(m ≤ n) ⊢ m = 0 ⟷ n = 0 ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "m = 0 ⟷ n = 0",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⟷ n = 0 ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 0, ¬(m ≤ n), m = 0 ⟷ n = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.1",
                        "1.2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(m ≤ n) ⊢ m = 0 ⟷ n = 0 ⟶ n = 0 ⟶ m = 0"
                },
                {
                    "args": "iffI",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m ≤ n) ⊢ (n = 0 ⟶ m = 0) ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "le_lcm1, m ≤ lcm m n ⟷ m = 0 ⟷ n = 0",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m ≤ n) ⊢ m ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "if_not_P, (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0",
                    "id": "1.5",
                    "prevs": [
                        "1.4",
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m ≤ n) ⊢ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(m ≤ n) ⟶ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "classical_cases",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (if m ≤ n then n else m) ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "max_def, max m n ≤ lcm m n ⟷ m = 0 ⟷ n = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ max m n ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ max m n ≤ lcm m n ⟷ m = 0 ⟷ n = 0"
                }
            ],
            "prop": "max m n ≤ lcm m n ⟷ m = 0 ⟷ n = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "max_def"
                },
                {
                    "case": "m ≤ n",
                    "goal_id": "0",
                    "method_name": "cases"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_lcm2"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.1.1.0",
                        "0.0"
                    ],
                    "goal_id": "0.1.1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "0.1.1.1"
                    ],
                    "goal_id": "0.1.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "nat_le_zero"
                },
                {
                    "goal_id": "0.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.2.0",
                        "0.2.1"
                    ],
                    "goal_id": "0.2.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "le_lcm1"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.1.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.1.1.0",
                        "1.0"
                    ],
                    "goal_id": "1.1.1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.1.1.1"
                    ],
                    "goal_id": "1.1.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "1.1.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.2",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "max_le_lcm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m = 0 ⟷ n = 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⟷ n = 0 ⊢ m = 0 ⟷ n = 0"
                },
                {
                    "args": "max_le_lcm_eq, max m n ≤ lcm m n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m = 0 ⟷ n = 0 ⊢ max m n ≤ lcm m n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = 0 ⟷ n = 0 ⟶ max m n ≤ lcm m n"
                }
            ],
            "prop": "m = 0 ⟷ n = 0 ⟶ max m n ≤ lcm m n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "max_le_lcm_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        }
    ],
    "description": "Least common multiples.",
    "imports": [
        "prime"
    ],
    "name": "lcm"
}