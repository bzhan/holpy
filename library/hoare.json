{
    "content": [
        {
            "depth": 0,
            "name": "Programs",
            "ty": "header"
        },
        {
            "args": [
                "a"
            ],
            "constrs": [
                {
                    "args": [
                        "f"
                    ],
                    "name": "Basic",
                    "type": "('a => 'a) => 'a com"
                },
                {
                    "args": [
                        "c1",
                        "c2"
                    ],
                    "name": "Seq",
                    "type": "'a com => 'a com => 'a com"
                },
                {
                    "args": [
                        "b",
                        "c1",
                        "c2"
                    ],
                    "name": "Cond",
                    "type": "('a => bool) => 'a com => 'a com => 'a com"
                },
                {
                    "args": [
                        "b",
                        "I",
                        "c"
                    ],
                    "name": "While",
                    "type": "('a => bool) => ('a => bool) => 'a com => 'a com"
                }
            ],
            "name": "com",
            "ty": "type.ind"
        },
        {
            "name": "Sem",
            "rules": [
                {
                    "name": "Sem_basic",
                    "prop": "Sem (Basic f) s (f s)"
                },
                {
                    "name": "Sem_seq",
                    "prop": "Sem c1 s s3 --> Sem c2 s3 s2 --> Sem (Seq c1 c2) s s2"
                },
                {
                    "name": "Sem_if1",
                    "prop": "b s --> Sem c1 s s2 --> Sem (Cond b c1 c2) s s2"
                },
                {
                    "name": "Sem_if2",
                    "prop": "~ b s --> Sem c2 s s2 --> Sem (Cond b c1 c2) s s2"
                },
                {
                    "name": "Sem_while_skip",
                    "prop": "~ b s --> Sem (While b I c) s s"
                },
                {
                    "name": "Sem_while_loop",
                    "prop": "b s --> Sem c s s3 --> Sem (While b I c) s3 s2 --> Sem (While b I c) s s2"
                }
            ],
            "ty": "def.pred",
            "type": "'a com => 'a => 'a => bool"
        },
        {
            "attributes": [
                "hint_forward"
            ],
            "name": "Sem_Seq_elim",
            "prop": "Sem (Seq c1 c2) s s2 --> ? s3. Sem c1 s s3 & Sem c2 s3 s2",
            "ty": "thm",
            "vars": {
                "c1": "'a com",
                "c2": "'a com",
                "s": "'a",
                "s2": "'a"
            }
        },
        {
            "name": "Skip",
            "prop": "Skip = Basic (λf::'a. f)",
            "ty": "def",
            "type": "'a com"
        },
        {
            "name": "Sem_Skip",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem_basic, {a: 'a}, {f: λf::'a. f, s: s}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Sem (Basic (λf. f)) s s"
                },
                {
                    "args": "Skip_def, Sem Skip s s",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem Skip s s"
                }
            ],
            "prop": "Sem Skip s s",
            "ty": "thm",
            "vars": {
                "s": "'a"
            }
        },
        {
            "name": "Assign",
            "prop": "Assign a b = Basic (λf. (f)(a := b f))",
            "ty": "def",
            "type": "'a => (('a => 'b) => 'b) => ('a => 'b) com"
        },
        {
            "name": "Sem_Assign",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem_basic, {a: 'a ⇒ 'b}, {f: λf. (f)(a := b f), s: s}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ Sem (Basic (λf. (f)(a := b f))) s ((s)(a := b s))"
                },
                {
                    "args": "Assign_def, Sem (Assign a b) s ((s)(a := b s))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem (Assign a b) s ((s)(a := b s))"
                }
            ],
            "prop": "Sem (Assign a b) s (fun_upd s a (b s))",
            "ty": "thm",
            "vars": {
                "a": "'a",
                "b": "('a => 'b) => 'b",
                "s": "'a => 'b"
            }
        },
        {
            "attributes": [
                "hint_forward"
            ],
            "name": "Sem_Assign_elim",
            "prop": "Sem (Assign a b) s s2 --> s2 = (s)(a := b s)",
            "ty": "thm",
            "vars": {
                "a": "'a",
                "b": "('a => 'b) => 'b",
                "s": "'a => 'b",
                "s2": "'a => 'b"
            }
        },
        {
            "name": "eval_Sem",
            "ty": "macro"
        },
        {
            "name": "P1",
            "prop": "P1 = Seq (Assign 0 (%s. 1)) (Assign 1 (%s. 2))",
            "ty": "def",
            "type": "(nat => nat) com"
        },
        {
            "name": "P1_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (Seq (Assign 0 (λs. 1)) (Assign 1 (λs. 2))) (λx. 0) ((λx. 0)(0 := 1, 1 := 2))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "⊢ Sem (Seq (Assign 0 (λs. 1)) (Assign 1 (λs. 2))) (λx. 0) ((λx. 0)(0 := 1, 1 := 2))"
                },
                {
                    "args": "P1_def, Sem P1 (λx. 0) ((λx. 0)(0 := 1, 1 := 2))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem P1 (λx. 0) ((λx. 0)(0 := 1, 1 := 2))"
                }
            ],
            "prop": "Sem P1 (%x. 0) (fun_upd (fun_upd (%x. 0) 0 1) 1 2)",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "P2",
            "prop": "P2 = Seq (Assign 0 (%s. s 0 + 1)) (Assign 0 (%s. s 0 + 1))",
            "ty": "def",
            "type": "(nat => nat) com"
        },
        {
            "name": "P2_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (Seq (Assign 0 (λs. s 0 + 1)) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 2))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "⊢ Sem (Seq (Assign 0 (λs. s 0 + 1)) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 2))"
                },
                {
                    "args": "P2_def, Sem P2 (λx. 0) ((λx. 0)(0 := 2))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem P2 (λx. 0) ((λx. 0)(0 := 2))"
                }
            ],
            "prop": "Sem P2 (%x. 0) ((%x. 0)(0 := 2))",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "P3",
            "prop": "P3 = While (%s. ~(s 0 = 3)) (%s. true) (Assign 0 (%s. s 0 + 1))",
            "ty": "def",
            "type": "(nat => nat) com"
        },
        {
            "name": "P3_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (While (λs. ¬s 0 = 3) (λs. true) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 3))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "⊢ Sem (While (λs. ¬s 0 = 3) (λs. true) (Assign 0 (λs. s 0 + 1))) (λx. 0) ((λx. 0)(0 := 3))"
                },
                {
                    "args": "P3_def, Sem P3 (λx. 0) ((λx. 0)(0 := 3))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Sem P3 (λx. 0) ((λx. 0)(0 := 3))"
                }
            ],
            "prop": "Sem P3 (%x. 0) ((%x. 0)(0 := 3))",
            "ty": "thm",
            "vars": {}
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "Entail",
            "prop": "Entail P Q = (∀s. P s ⟶ Q s)",
            "ty": "def",
            "type": "('a => bool) => ('a => bool) => bool"
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "Valid",
            "prop": "Valid P c Q = (∀s. ∀s2. P s ⟶ Sem c s s2 ⟶ Q s2)",
            "ty": "def",
            "type": "('a => bool) => 'a com => ('a => bool) => bool"
        },
        {
            "name": "pre_rule",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Entail P Q",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Entail P Q ⊢ Entail P Q"
                },
                {
                    "args": "Valid Q c R",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Valid Q c R ⊢ Valid Q c R"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Entail P Q, Valid Q c R ⊢ ∀s. ∀s2. P s ⟶ Sem c s s2 ⟶ R s2"
                },
                {
                    "args": "s, 'a",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s"
                },
                {
                    "args": "s2, 'a",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s2"
                },
                {
                    "args": "P s",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P s ⊢ P s"
                },
                {
                    "args": "Sem c s s2",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Sem c s s2 ⊢ Sem c s s2"
                },
                {
                    "args": "Entail_def",
                    "id": "2.4",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Entail P Q ⊢ ∀s. P s ⟶ Q s"
                },
                {
                    "args": "Valid_def",
                    "id": "2.5",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Valid Q c R ⊢ ∀s. ∀s2. Q s ⟶ Sem c s s2 ⟶ R s2"
                },
                {
                    "args": "",
                    "id": "2.6",
                    "prevs": [
                        "2.4",
                        "2.2"
                    ],
                    "rule": "apply_fact",
                    "th": "Entail P Q, P s ⊢ Q s"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [
                        "2.5",
                        "2.6",
                        "2.3"
                    ],
                    "rule": "apply_fact",
                    "th": "Valid Q c R, Entail P Q, P s, Sem c s s2 ⊢ R s2"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.3",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "Entail P Q, Valid Q c R ⊢ ∀s. ∀s2. P s ⟶ Sem c s s2 ⟶ R s2"
                },
                {
                    "args": "Valid_def, Valid P c R",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Entail P Q, Valid Q c R ⊢ Valid P c R"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ Entail P Q ⟶ Valid Q c R ⟶ Valid P c R"
                }
            ],
            "prop": "Entail P Q --> Valid Q c R --> Valid P c R",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "theorem": "Valid_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "s, s2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.4",
                    "method_name": "rewrite_fact",
                    "theorem": "Entail_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2.5",
                    "method_name": "rewrite_fact",
                    "theorem": "Valid_def"
                },
                {
                    "fact_ids": [
                        "2.4",
                        "2.2"
                    ],
                    "goal_id": "2.6",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "2.5",
                        "2.6"
                    ],
                    "goal_id": "2.7",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool",
                "R": "'a => bool",
                "c": "'a com"
            }
        },
        {
            "attributes": [],
            "name": "skip_rule",
            "prop": "Valid P Skip P",
            "ty": "thm",
            "vars": {
                "P": "'a => bool"
            }
        },
        {
            "name": "assign_rule",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀s. ∀s2. P ((s)(a := b s)) ⟶ Sem (Assign a b) s s2 ⟶ P s2"
                },
                {
                    "args": "s, 'a ⇒ 'b",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s"
                },
                {
                    "args": "s2, 'a ⇒ 'b",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s2"
                },
                {
                    "args": "P ((s)(a := b s))",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P ((s)(a := b s)) ⊢ P ((s)(a := b s))"
                },
                {
                    "args": "Sem (Assign a b) s s2",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Sem (Assign a b) s s2 ⊢ Sem (Assign a b) s s2"
                },
                {
                    "args": "Sem_Assign_elim",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Sem (Assign a b) s s2 ⊢ s2 = (s)(a := b s)"
                },
                {
                    "args": "P s2",
                    "id": "0.5",
                    "prevs": [
                        "0.4",
                        "0.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "Sem (Assign a b) s s2, P ((s)(a := b s)) ⊢ P s2"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.3",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀s. ∀s2. P ((s)(a := b s)) ⟶ Sem (Assign a b) s s2 ⟶ P s2"
                },
                {
                    "args": "Valid_def, Valid (λs. P ((s)(a := b s))) (Assign a b) P",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ Valid (λs. P ((s)(a := b s))) (Assign a b) P"
                }
            ],
            "prop": "Valid (%s. P ((s)(a := b s))) (Assign a b) P",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "Valid_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction",
                    "names": "s, s2"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "apply_forward_step",
                    "theorem": "Sem_Assign_elim"
                },
                {
                    "fact_ids": [
                        "0.4"
                    ],
                    "goal_id": "0.5",
                    "method_name": "rewrite_goal_with_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "('a => 'b) => bool",
                "a": "'a",
                "b": "('a => 'b) => 'b"
            }
        },
        {
            "name": "seq_rule",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Valid P c1 Q",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Valid P c1 Q ⊢ Valid P c1 Q"
                },
                {
                    "args": "Valid Q c2 R",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Valid Q c2 R ⊢ Valid Q c2 R"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Valid P c1 Q, Valid Q c2 R ⊢ ∀s. ∀s2. P s ⟶ Sem (Seq c1 c2) s s2 ⟶ R s2"
                },
                {
                    "args": "s, 'a",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s"
                },
                {
                    "args": "s2, 'a",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s2"
                },
                {
                    "args": "P s",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P s ⊢ P s"
                },
                {
                    "args": "Sem (Seq c1 c2) s s2",
                    "id": "2.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Sem (Seq c1 c2) s s2 ⊢ Sem (Seq c1 c2) s s2"
                },
                {
                    "args": "Sem_Seq_elim",
                    "id": "2.4",
                    "prevs": [
                        "2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "Sem (Seq c1 c2) s s2 ⊢ ∃s3. Sem c1 s s3 ∧ Sem c2 s3 s2"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "Valid P c1 Q, Valid Q c2 R, P s, Sem (Seq c1 c2) s s2 ⊢ ∀a. Sem c1 s a ∧ Sem c2 a s2 ⟶ R s2"
                },
                {
                    "args": "s3, 'a",
                    "id": "2.5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR s3"
                },
                {
                    "args": "Sem c1 s s3 ∧ Sem c2 s3 s2",
                    "id": "2.5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "Sem c1 s s3 ∧ Sem c2 s3 s2 ⊢ Sem c1 s s3 ∧ Sem c2 s3 s2"
                },
                {
                    "args": "conjD1",
                    "id": "2.5.2",
                    "prevs": [
                        "2.5.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "Sem c1 s s3 ∧ Sem c2 s3 s2 ⊢ Sem c1 s s3"
                },
                {
                    "args": "conjD2",
                    "id": "2.5.3",
                    "prevs": [
                        "2.5.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "Sem c1 s s3 ∧ Sem c2 s3 s2 ⊢ Sem c2 s3 s2"
                },
                {
                    "args": "Valid_def",
                    "id": "2.5.4",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Valid P c1 Q ⊢ ∀s. ∀s2. P s ⟶ Sem c1 s s2 ⟶ Q s2"
                },
                {
                    "args": "Valid_def",
                    "id": "2.5.5",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "Valid Q c2 R ⊢ ∀s. ∀s2. Q s ⟶ Sem c2 s s2 ⟶ R s2"
                },
                {
                    "args": "",
                    "id": "2.5.6",
                    "prevs": [
                        "2.5.4",
                        "2.2",
                        "2.5.2"
                    ],
                    "rule": "apply_fact",
                    "th": "Valid P c1 Q, P s, Sem c1 s s3 ∧ Sem c2 s3 s2 ⊢ Q s3"
                },
                {
                    "args": "",
                    "id": "2.5.7",
                    "prevs": [
                        "2.5.5",
                        "2.5.6",
                        "2.5.3"
                    ],
                    "rule": "apply_fact",
                    "th": "Valid Q c2 R, Valid P c1 Q, P s, Sem c1 s s3 ∧ Sem c2 s3 s2 ⊢ R s2"
                },
                {
                    "args": "",
                    "id": "2.5.8",
                    "prevs": [
                        "2.5.0",
                        "2.5.1",
                        "2.5.7"
                    ],
                    "rule": "intros",
                    "th": "Valid P c1 Q, Valid Q c2 R, P s, Sem (Seq c1 c2) s s2 ⊢ ∀s3. Sem c1 s s3 ∧ Sem c2 s3 s2 ⟶ R s2"
                },
                {
                    "args": "exE",
                    "id": "2.6",
                    "prevs": [
                        "2.4",
                        "2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "Sem (Seq c1 c2) s s2, Valid P c1 Q, Valid Q c2 R, P s ⊢ R s2"
                },
                {
                    "args": "",
                    "id": "2.7",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.3",
                        "2.6"
                    ],
                    "rule": "intros",
                    "th": "Valid P c1 Q, Valid Q c2 R ⊢ ∀s. ∀s2. P s ⟶ Sem (Seq c1 c2) s s2 ⟶ R s2"
                },
                {
                    "args": "Valid_def, Valid P (Seq c1 c2) R",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "Valid P c1 Q, Valid Q c2 R ⊢ Valid P (Seq c1 c2) R"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ Valid P c1 Q ⟶ Valid Q c2 R ⟶ Valid P (Seq c1 c2) R"
                }
            ],
            "prop": "Valid P c1 Q --> Valid Q c2 R --> Valid P (Seq c1 c2) R",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "theorem": "Valid_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "s,s2"
                },
                {
                    "fact_ids": [
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "apply_forward_step",
                    "theorem": "Sem_Seq_elim"
                },
                {
                    "fact_ids": [
                        "2.4"
                    ],
                    "goal_id": "2.5",
                    "method_name": "apply_backward_step",
                    "theorem": "exE"
                },
                {
                    "goal_id": "2.5",
                    "method_name": "introduction",
                    "names": "s3"
                },
                {
                    "fact_ids": [
                        "2.5.1"
                    ],
                    "goal_id": "2.5.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "2.5.1"
                    ],
                    "goal_id": "2.5.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.5.4",
                    "method_name": "rewrite_fact",
                    "theorem": "Valid_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2.5.5",
                    "method_name": "rewrite_fact",
                    "theorem": "Valid_def"
                },
                {
                    "fact_ids": [
                        "2.5.4",
                        "2.2",
                        "2.5.2"
                    ],
                    "goal_id": "2.5.6",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "2.5.5",
                        "2.5.6",
                        "2.5.3"
                    ],
                    "goal_id": "2.5.7",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool",
                "R": "'a => bool",
                "c1": "'a com",
                "c2": "'a com"
            }
        },
        {
            "name": "if_rule",
            "prop": "Valid P c1 R --> Valid Q c2 R --> Valid (%s. if b s then P s else Q s) (Cond b c1 c2) R",
            "ty": "thm",
            "vars": {
                "P": "'a => bool",
                "Q": "'a => bool",
                "R": "'a => bool",
                "b": "'a => bool",
                "c1": "'a com",
                "c2": "'a com"
            }
        },
        {
            "name": "while_rule",
            "prop": "Entail (%s. I s & ~b s) Q --> Valid (%s. I s & b s) c I --> Valid I (While b I c) Q",
            "ty": "thm",
            "vars": {
                "I": "'a => bool",
                "Q": "'a => bool",
                "b": "'a => bool",
                "c": "'a com"
            }
        },
        {
            "name": "z3",
            "ty": "macro"
        },
        {
            "name": "vcg",
            "ty": "macro"
        },
        {
            "name": "z3",
            "ty": "method"
        },
        {
            "name": "vcg",
            "ty": "method"
        },
        {
            "attributes": [],
            "name": "abs_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "true",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "true ⊢ true"
                },
                {
                    "args": "if 0 ≤ a then a = (if 0 ≤ a then a else -a) else -a = (if 0 ≤ a then a else -a)",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ if 0 ≤ a then a = (if 0 ≤ a then a else -a) else -a = (if 0 ≤ a then a else -a)"
                },
                {
                    "args": "int_abs_def, if 0 ≤ a then a = abs a else -a = abs a",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "true ⊢ if 0 ≤ a then a = abs a else -a = abs a"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ true ⟶ (if 0 ≤ a then a = abs a else -a = abs a)"
                }
            ],
            "prop": "true ⟶ if 0 ≤ a then a = abs a else -a = abs a",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "int_abs_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "int"
            }
        },
        {
            "attributes": [],
            "name": "max_test",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "true",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "true ⊢ true"
                },
                {
                    "args": "if m ≤ n then n = (if m ≤ n then n else m) else m = (if m ≤ n then n else m)",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ if m ≤ n then n = (if m ≤ n then n else m) else m = (if m ≤ n then n else m)"
                },
                {
                    "args": "int_max_def, if m ≤ n then n = max m n else m = max m n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "true ⊢ if m ≤ n then n = max m n else m = max m n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ true ⟶ (if m ≤ n then n = max m n else m = max m n)"
                }
            ],
            "prop": "true ⟶ if m ≤ n then n = max m n else m = max m n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "theorem": "int_max_def"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "int",
                "n": "int"
            }
        }
    ],
    "description": "Hoare logic",
    "imports": [
        "function",
        "int"
    ],
    "name": "hoare"
}