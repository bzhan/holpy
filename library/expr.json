{
    "content": [
        {
            "depth": 0,
            "name": "Arithmetic expressions",
            "ty": "header"
        },
        {
            "args": [],
            "constrs": [
                {
                    "args": [
                        "n"
                    ],
                    "name": "N",
                    "type": "nat => aexp"
                },
                {
                    "args": [
                        "x"
                    ],
                    "name": "V",
                    "type": "nat => aexp"
                },
                {
                    "args": [
                        "a1",
                        "a2"
                    ],
                    "name": "Plus",
                    "type": "aexp => aexp => aexp"
                },
                {
                    "args": [
                        "c1",
                        "c2"
                    ],
                    "name": "Times",
                    "type": "aexp => aexp => aexp"
                }
            ],
            "data_name": "aexp",
            "name": "aexp",
            "ty": "type.ind"
        },
        {
            "name": "aval",
            "rules": [
                {
                    "prop": "aval (N n) s = n"
                },
                {
                    "prop": "aval (V x) s = s x"
                },
                {
                    "prop": "aval (Plus a1 a2) s = aval a1 s + aval a2 s"
                },
                {
                    "prop": "aval (Times c1 c2) s = aval c1 s * aval c2 s"
                }
            ],
            "ty": "def.ind",
            "type": "aexp ⇒ (nat ⇒ nat) ⇒ nat"
        },
        {
            "name": "aval_test1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "7 + 5 = 12",
                    "id": "0",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 7 + 5 = 12"
                },
                {
                    "args": "1 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 1 = 1"
                },
                {
                    "args": "if_P, (if 1 = 1 then 7 else 0) + 5 = 12",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 1 = 1 then 7 else 0) + 5 = 12"
                },
                {
                    "args": "fun_upd_def, (λx. 0)(1 := 7) 1 + 5 = 12",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (λx. 0)(1 := 7) 1 + 5 = 12"
                },
                {
                    "args": "aval_def_2, aval (V 1) ((λx. 0)(1 := 7)) + 5 = 12",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ aval (V 1) ((λx. 0)(1 := 7)) + 5 = 12"
                },
                {
                    "args": "aval_def_1, aval (V 1) ((λx. 0)(1 := 7)) + aval (N 5) ((λx. 0)(1 := 7)) = 12",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ aval (V 1) ((λx. 0)(1 := 7)) + aval (N 5) ((λx. 0)(1 := 7)) = 12"
                },
                {
                    "args": "aval_def_3, aval (Plus (V 1) (N 5)) ((λx. 0)(1 := 7)) = 12",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ aval (Plus (V 1) (N 5)) ((λx. 0)(1 := 7)) = 12"
                }
            ],
            "prop": "aval (Plus (V 1) (N 5)) (fun_upd (%x. 0) 1 7) = 12",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "aval_def_3"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "aval_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "aval_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "fun_upd_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "if_P"
                },
                {
                    "goal_id": "0",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "1",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "aval_test2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "nat_plus_def_1, 0 + 5 = 5",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 + 5 = 5"
                },
                {
                    "args": "¬0 = 1",
                    "id": "1",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬0 = 1"
                },
                {
                    "args": "if_not_P, (if 0 = 1 then 7 else 0) + 5 = 5",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (if 0 = 1 then 7 else 0) + 5 = 5"
                },
                {
                    "args": "fun_upd_def, (λx. 0)(1 := 7) 0 + 5 = 5",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ (λx. 0)(1 := 7) 0 + 5 = 5"
                },
                {
                    "args": "aval_def_2, aval (V 0) ((λx. 0)(1 := 7)) + 5 = 5",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ aval (V 0) ((λx. 0)(1 := 7)) + 5 = 5"
                },
                {
                    "args": "aval_def_1, aval (V 0) ((λx. 0)(1 := 7)) + aval (N 5) ((λx. 0)(1 := 7)) = 5",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ aval (V 0) ((λx. 0)(1 := 7)) + aval (N 5) ((λx. 0)(1 := 7)) = 5"
                },
                {
                    "args": "aval_def_3, aval (Plus (V 0) (N 5)) ((λx. 0)(1 := 7)) = 5",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ aval (Plus (V 0) (N 5)) ((λx. 0)(1 := 7)) = 5"
                }
            ],
            "prop": "aval (Plus (V 0) (N 5)) (fun_upd (%x. 0) 1 7) = 5",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "aval_def_3"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "aval_def_1"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "aval_def_2"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "fun_upd_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "if_not_P"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "theorem": "nat_plus_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "nat_const_ineq"
                }
            ],
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "avalI",
            "rules": [
                {
                    "name": "avalI_const",
                    "prop": "avalI s (N n) n"
                },
                {
                    "name": "avalI_var",
                    "prop": "avalI s (V x) (s x)"
                },
                {
                    "name": "avalI_plus",
                    "prop": "avalI s a1 n1 ⟶ avalI s a2 n2 ⟶ avalI s (Plus a1 a2) (n1 + n2)"
                },
                {
                    "name": "avalI_times",
                    "prop": "avalI s a1 n1 ⟶ avalI s a2 n2 ⟶ avalI s (Times a1 a2) (n1 * n2)"
                }
            ],
            "ty": "def.pred",
            "type": "(nat => nat) => aexp => nat => bool"
        },
        {
            "name": "prove_avalI",
            "ty": "macro"
        },
        {
            "name": "prove_avalI",
            "ty": "method"
        },
        {
            "name": "avalI_test1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "avalI ((λx. 0)(1 := 7)) (Plus (V 1) (N 5)) 12",
                    "id": "0",
                    "prevs": [],
                    "rule": "prove_avalI",
                    "th": "⊢ avalI ((λx. 0)(1 := 7)) (Plus (V 1) (N 5)) 12"
                }
            ],
            "prop": "avalI (fun_upd (%x. 0) 1 7) (Plus (V 1) (N 5)) 12",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "avalI_test2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "avalI ((λx. 0)(1 := 7)) (Plus (V 0) (N 5)) 5",
                    "id": "0",
                    "prevs": [],
                    "rule": "prove_avalI",
                    "th": "⊢ avalI ((λx. 0)(1 := 7)) (Plus (V 0) (N 5)) 5"
                }
            ],
            "prop": "avalI (fun_upd (%x. 0) 1 7) (Plus (V 0) (N 5)) 5",
            "ty": "thm",
            "vars": {}
        }
    ],
    "description": "Expressions",
    "imports": [
        "function"
    ],
    "name": "expr"
}