{
    "content": [
        {
            "name": "eval0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (Seq (Assign (0::nat) (%s. (1::nat))) (Assign 1 (%s. 2))) (%x. 0) ((%x. 0)(0 := 1, 1 := 2))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "|- Sem (Seq (Assign (0::nat) (%s. (1::nat))) (Assign 1 (%s. 2))) (%x. 0) ((%x. 0)(0 := 1, 1 := 2))"
                }
            ],
            "prop": "Sem (Seq (Assign (0::nat) (%s. (1::nat))) (Assign 1 (%s. 2))) (%x. 0) ((%x. 0)(0 := 1, 1 := 2))",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "eval1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "Sem (While (%s. ~(s (0::nat) = (3::nat))) (%s. true) (Seq (Assign 1 (%s. s 1 + 5)) (Assign 0 (%s. s 0 + 1)))) (%x. 0) ((%x. 0)(0 := 3, 1 := 15))",
                    "id": "0",
                    "prevs": [],
                    "rule": "eval_Sem",
                    "th": "|- Sem (While (%s. ~(s (0::nat) = (3::nat))) (%s. true) (Seq (Assign 1 (%s. s 1 + 5)) (Assign 0 (%s. s 0 + 1)))) (%x. 0) ((%x. 0)(0 := 3, 1 := 15))"
                }
            ],
            "prop": "Sem (While (%s. ~(s (0::nat) = (3::nat))) (%s. true) (Seq (Assign 1 (%s. s 1 + 5)) (Assign 0 (%s. s 0 + 1)))) (%x. 0) ((%x. 0)(0 := 3, 1 := 15))",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "vcg0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "!s. s (0::nat) = 0 & s 1 = 0 --> s 1 = s 0 * B",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "|- !s. s (0::nat) = 0 & s 1 = 0 --> s 1 = s 0 * B"
                },
                {
                    "args": "!s. s (1::nat) = s 0 * B & ~~(s 0 = A) --> s 1 = A * B",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "|- !s. s (1::nat) = s 0 * B & ~~(s 0 = A) --> s 1 = A * B"
                },
                {
                    "args": "!s. s (1::nat) = s 0 * B & ~(s 0 = A) --> s 1 + B = (s 0 + 1) * B",
                    "id": "2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "|- !s. s (1::nat) = s 0 * B & ~(s 0 = A) --> s 1 + B = (s 0 + 1) * B"
                },
                {
                    "args": "Valid (%s. s (0::nat) = 0 & s 1 = 0) (While (%s. ~(s 0 = A)) (%s. s 1 = s 0 * B) (Seq (Assign 1 (%s. s 1 + B)) (Assign 0 (%s. s 0 + 1)))) (%s. s 1 = A * B)",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "vcg",
                    "th": "|- Valid (%s. s (0::nat) = 0 & s 1 = 0) (While (%s. ~(s 0 = A)) (%s. s 1 = s 0 * B) (Seq (Assign 1 (%s. s 1 + B)) (Assign 0 (%s. s 0 + 1)))) (%s. s 1 = A * B)"
                }
            ],
            "prop": "Valid (%s. s (0::nat) = 0 & s 1 = 0) (While (%s. ~(s 0 = A)) (%s. s 1 = s 0 * B) (Seq (Assign 1 (%s. s 1 + B)) (Assign 0 (%s. s 0 + 1)))) (%s. s 1 = A * B)",
            "ty": "thm",
            "vars": {
                "A": "nat",
                "B": "nat"
            }
        },
        {
            "name": "vcg1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "!s. true --> (if ~(s (0::nat) = (0::nat)) then (0::nat) = 0 else s 0 = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "|- !s. true --> (if ~(s (0::nat) = (0::nat)) then (0::nat) = 0 else s 0 = 0)"
                },
                {
                    "args": "Valid (%s. true) (Cond (%s. ~(s (0::nat) = (0::nat))) (Assign 0 (%s. 0)) Skip) (%s. s 0 = 0)",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "vcg",
                    "th": "|- Valid (%s. true) (Cond (%s. ~(s (0::nat) = (0::nat))) (Assign 0 (%s. 0)) Skip) (%s. s 0 = 0)"
                }
            ],
            "prop": "Valid (%s. true) (Cond (%s. ~(s (0::nat) = (0::nat))) (Assign 0 (%s. 0)) Skip) (%s. s 0 = 0)",
            "ty": "thm",
            "vars": {}
        },
        {
            "name": "vcg2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "!s::nat => nat. true --> (if s ((12::nat)) <= s (13) then s (13) = s (12) | s (13) = s (13) else s (12) = s (12) | s (12) = s (13))",
                    "id": "0",
                    "prevs": [],
                    "rule": "z3",
                    "th": "|- !s::nat => nat. true --> (if s ((12::nat)) <= s (13) then s (13) = s (12) | s (13) = s (13) else s (12) = s (12) | s (12) = s (13))"
                },
                {
                    "args": "Valid (%s::nat => nat. true) (Cond (%s. s ((12::nat)) <= s (13)) (Assign (2) (%s. s (13))) (Assign (2) (%s. s (12)))) (%s. s (2) = s (12) | s (2) = s (13))",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "vcg",
                    "th": "|- Valid (%s::nat => nat. true) (Cond (%s. s ((12::nat)) <= s (13)) (Assign (2) (%s. s (13))) (Assign (2) (%s. s (12)))) (%s. s (2) = s (12) | s (2) = s (13))"
                }
            ],
            "prop": "Valid (%s::nat => nat. true) (Cond (%s. s ((12::nat)) <= s (13)) (Assign (2) (%s. s (13))) (Assign (2) (%s. s (12)))) (%s. s (2) = s (12) | s (2) = s (13))",
            "ty": "thm",
            "vars": {}
        }
    ],
    "description": "Generated from test",
    "imports": [
        "hoare"
    ],
    "name": "hoare_test_output"
}