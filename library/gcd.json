{
    "content": [
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides",
            "prop": "divides m n ⟷ (∃k. n = m * k)",
            "ty": "def",
            "type": "nat ⇒ nat ⇒ bool"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "∀m::nat. ∀n. m ≤ m * n ∨ m * n = 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀m::nat. ∀n. m ≤ m * n ∨ m * n = 0"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "k, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "n = m * k",
                    "id": "4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * k ⊢ n = m * k"
                },
                {
                    "args": "m, k",
                    "id": "5",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ m ≤ m * k ∨ m * k = 0"
                },
                {
                    "args": "m ≤ n ∨ n = 0",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides m n, n = m * k ⊢ m ≤ n ∨ n = 0"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "7",
                    "prevs": [
                        "0",
                        "2",
                        "3",
                        "4",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ m ≤ n ∨ n = 0"
                }
            ],
            "prop": "divides m n ⟶ m ≤ n ∨ n = 0",
            "steps": [
                {
                    "goal": "!m. !n. m <= m * n | m * n = (0::nat) ",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_le_strong",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_le",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n ⊢ m ≤ n ∨ n = 0"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n ⊢ m = 0 ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "m = 0",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "k, nat",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "n = m * k",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * k ⊢ n = m * k"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [
                        "3.0",
                        "3.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, n = m * k ⊢ n = 0 * k"
                },
                {
                    "args": "nat_times_def_1",
                    "id": "3.4",
                    "prevs": [
                        "3.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = 0, n = m * k ⊢ n = 0"
                },
                {
                    "args": "disjI2, {A: 1 ≤ m ∧ m ≤ n, B: n = 0}",
                    "id": "3.5",
                    "prevs": [
                        "3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, m = 0, n = m * k ⊢ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "3.6",
                    "prevs": [
                        "3.0",
                        "2",
                        "3.1",
                        "3.2",
                        "3.5"
                    ],
                    "rule": "intros",
                    "th": "divides m n ⊢ m = 0 ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n ⊢ ¬(m = 0) ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "¬(m = 0)",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = 0) ⊢ ¬(m = 0)"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, ¬(m = 0) ⊢ m ≤ n ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "m ≤ n",
                    "id": "4.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "le_1_2",
                    "id": "4.1.1",
                    "prevs": [
                        "4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n, m ≤ n, ¬(m = 0) ⊢ 1 ≤ m"
                },
                {
                    "args": "conjI",
                    "id": "4.1.2",
                    "prevs": [
                        "4.1.1",
                        "4.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n, m ≤ n, ¬(m = 0) ⊢ 1 ≤ m ∧ m ≤ n"
                },
                {
                    "args": "disjI1, {A: 1 ≤ m ∧ m ≤ n, B: n = 0}",
                    "id": "4.1.3",
                    "prevs": [
                        "4.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, m ≤ n, ¬(m = 0) ⊢ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4.1.4",
                    "prevs": [
                        "4.1.0",
                        "4.1.3"
                    ],
                    "rule": "intros",
                    "th": "divides m n, ¬(m = 0) ⊢ m ≤ n ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, ¬(m = 0) ⊢ n = 0 ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "n = 0",
                    "id": "4.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "disjI2, {A: 1 ≤ m ∧ m ≤ n, B: n = 0}",
                    "id": "4.2.1",
                    "prevs": [
                        "4.2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, n = 0, ¬(m = 0) ⊢ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4.2.2",
                    "prevs": [
                        "4.2.0",
                        "4.2.1"
                    ],
                    "rule": "intros",
                    "th": "divides m n, ¬(m = 0) ⊢ n = 0 ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "disjE",
                    "id": "4.3",
                    "prevs": [
                        "1",
                        "4.1",
                        "4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n, ¬(m = 0) ⊢ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "divides m n ⊢ ¬(m = 0) ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "classical_cases",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n ⊢ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0"
                }
            ],
            "prop": "divides m n ⟶ 1 ≤ m ∧ m ≤ n ∨ n = 0",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "case": "m=0",
                    "goal_id": "3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3.1",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "3.0",
                        "3.2"
                    ],
                    "goal_id": "3.3",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "3.3"
                    ],
                    "goal_id": "3.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "4.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_2"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_le_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "n = 0 ⟶ m = 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m = 0"
                },
                {
                    "args": "divides_le",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n ⊢ m ≤ n ∨ n = 0"
                },
                {
                    "args": "m ≤ n ⟶ m ≤ n",
                    "id": "3",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ m ≤ n ⟶ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m ≤ n"
                },
                {
                    "args": "n = 0",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "",
                    "id": "4.1",
                    "prevs": [
                        "1",
                        "4.0"
                    ],
                    "rule": "apply_fact",
                    "th": "n = 0, n = 0 ⟶ m = 0 ⊢ m = 0"
                },
                {
                    "args": "le_0, {n: (0::nat)}",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) ≤ 0"
                },
                {
                    "args": "m ≤ 0",
                    "id": "4.3",
                    "prevs": [
                        "4.1",
                        "4.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides m n, n = 0, n = 0 ⟶ m = 0 ⊢ m ≤ 0"
                },
                {
                    "args": "m ≤ n",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides m n, n = 0, n = 0 ⟶ m = 0 ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4.5",
                    "prevs": [
                        "4.0",
                        "4.4"
                    ],
                    "rule": "intros",
                    "th": "divides m n, n = 0 ⟶ m = 0 ⊢ n = 0 ⟶ m ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "5",
                    "prevs": [
                        "2",
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n, n = 0 ⟶ m = 0 ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ (n = 0 ⟶ m = 0) ⟶ m ≤ n"
                }
            ],
            "prop": "divides m n ⟶ (n = 0 ⟶ m = 0) ⟶ m ≤ n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1",
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "le_0"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "properly_divides_le_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "¬(n = 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "¬(m = n)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m = n) ⊢ ¬(m = n)"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "d, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "n = m * d",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * d ⊢ n = m * d"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5",
                        "2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(m = n), n = m * d ⊢ ¬(m = m * d)"
                },
                {
                    "args": "¬(m = m * d) ⟷ ¬(m = 0) ∧ ¬(d = 1)",
                    "id": "7",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ¬(m = m * d) ⟷ ¬(m = 0) ∧ ¬(d = 1)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "7",
                        "6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(m = n), n = m * d ⊢ ¬(m = 0) ∧ ¬(d = 1)"
                },
                {
                    "args": "m * 2 ≤ n",
                    "id": "9",
                    "prevs": [
                        "1",
                        "2",
                        "5",
                        "8"
                    ],
                    "rule": "z3",
                    "th": "¬(m = n), ¬(n = 0), n = m * d ⊢ m * 2 ≤ n"
                },
                {
                    "args": "mult_comm, 2 * m ≤ n",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, ¬(m = n), ¬(n = 0), n = m * d ⊢ 2 * m ≤ n"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "11",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ ¬(n = 0) ⟶ ¬(m = n) ⟶ 2 * m ≤ n"
                }
            ],
            "prop": "divides m n ⟶ ¬(n = 0) ⟶ ¬(m = n) ⟶ 2 * m ≤ n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "5",
                        "2"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal": "~(m = m * d) <--> ~(m = 0) & ~(d = 1)",
                    "goal_id": "7",
                    "method_name": "cut"
                },
                {
                    "goal_id": "7",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "7",
                        "6"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "9",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "fact_ids": [
                        "1",
                        "2",
                        "5",
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_one",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃k. 1 = n * k) ⟶ n = 1"
                },
                {
                    "args": "∃k. 1 = n * k",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃k. 1 = n * k ⊢ ∃k. 1 = n * k"
                },
                {
                    "args": "k, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "1 = n * k",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 = n * k ⊢ 1 = n * k"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "1 = n * k ⊢ n * k = 1"
                },
                {
                    "args": "mult_eq_1",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "1 = n * k ⊢ n = 1 ∧ k = 1"
                },
                {
                    "args": "conjD1",
                    "id": "0.5",
                    "prevs": [
                        "0.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 = n * k ⊢ n = 1"
                },
                {
                    "args": "∃k. 1 = n * k",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃k. 1 = n * k) ⟶ n = 1"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ n = 1 ⟶ (∃k. 1 = n * k)"
                },
                {
                    "args": "n = 1",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 1 ⊢ n = 1"
                },
                {
                    "args": "mult_1_left, (1::nat) = 1 * 1",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (1::nat) = 1 * 1"
                },
                {
                    "args": "1 = n * 1",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = 1 ⊢ 1 = n * 1"
                },
                {
                    "args": "exI, {P: λk. 1 = n * k, a: (1::nat)}",
                    "id": "1.3",
                    "prevs": [
                        "1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 1 ⊢ ∃a1. 1 = n * a1"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ n = 1 ⟶ (∃k. 1 = n * k)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃k. 1 = n * k) ⟷ n = 1"
                },
                {
                    "args": "divides_def, divides n 1 ⟷ n = 1",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides n 1 ⟷ n = 1"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n 1 ⟷ n = 1"
                }
            ],
            "prop": "divides n 1 ⟷ n = 1",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_eq_1"
                },
                {
                    "fact_ids": [
                        "0.4"
                    ],
                    "goal_id": "0.5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_0",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃k. x = 0 * k) ⟶ x = 0"
                },
                {
                    "args": "∃k. x = 0 * k",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃k. x = 0 * k ⊢ ∃k. x = 0 * k"
                },
                {
                    "args": "k, nat",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "x = 0 * k",
                    "id": "0.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 * k ⊢ x = 0 * k"
                },
                {
                    "args": "nat_times_def_1",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0 * k ⊢ x = 0"
                },
                {
                    "args": "∃k. x = 0 * k",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.0",
                        "0.1",
                        "0.2",
                        "0.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃k. x = 0 * k) ⟶ x = 0"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ x = 0 ⟶ (∃k. x = 0 * k)"
                },
                {
                    "args": "x = 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "mult_0_right, x = 0 * 0",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0 ⊢ x = 0 * 0"
                },
                {
                    "args": "exI, {P: λk. x = 0 * k, a: (0::nat)}",
                    "id": "1.2",
                    "prevs": [
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0 ⊢ ∃a1. x = 0 * a1"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = 0 ⟶ (∃k. x = 0 * k)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃k. x = 0 * k) ⟷ x = 0"
                },
                {
                    "args": "divides_def, divides 0 x ⟷ x = 0",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides 0 x ⟷ x = 0"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides 0 x ⟷ x = 0"
                }
            ],
            "prop": "divides 0 x ⟷ x = 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_1",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_left, x = 1 * x",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ x = 1 * x"
                },
                {
                    "args": "exI, {P: λk. x = 1 * k, a: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. x = 1 * a1"
                },
                {
                    "args": "divides_def, divides 1 x",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides 1 x"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides 1 x"
                }
            ],
            "prop": "divides 1 x",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_self",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_1_right, n = n * 1",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n = n * 1"
                },
                {
                    "args": "exI, {P: λk. n = n * k, a: (1::nat)}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. n = n * a1"
                },
                {
                    "args": "divides_def, divides n n",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n n"
                }
            ],
            "prop": "divides n n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_trans",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "divides m n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k m ⊢ ∃k1. m = k * k1"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = k * p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k * p ⊢ m = k * p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "n = m * q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * q ⊢ n = m * q"
                },
                {
                    "args": "mult_assoc, k * p * q = k * (p * q)",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * p * q = k * (p * q)"
                },
                {
                    "args": "m * q = k * (p * q)",
                    "id": "9",
                    "prevs": [
                        "5",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = k * p, divides k m, divides m n, n = m * q ⊢ m * q = k * (p * q)"
                },
                {
                    "args": "n = k * (p * q)",
                    "id": "10",
                    "prevs": [
                        "7",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m * q, divides k m, divides m n, m = k * p ⊢ n = k * (p * q)"
                },
                {
                    "args": "exI, {P: λk1. n = k * k1, a: p * q}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides k m, divides m n, m = k * p, n = m * q ⊢ ∃a1. n = k * a1"
                },
                {
                    "args": "divides_def, divides k n",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides k m, divides m n, m = k * p, n = m * q ⊢ divides k n"
                },
                {
                    "args": "∃k. n = m * k, ∃k1. m = k * k1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k m ⟶ divides m n ⟶ divides k n"
                }
            ],
            "prop": "divides k m ⟶ divides m n ⟶ divides k n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "p * q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "divides_antisym",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides n m",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides n m ⊢ ∃k. m = n * k"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m * p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * p ⊢ n = m * p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "m = n * q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * q ⊢ m = n * q"
                },
                {
                    "args": "mult_1_right, m = m * 1",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ m = m * 1"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8",
                        "7"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = n * q ⊢ m * 1 = n * q"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = n * q, n = m * p ⊢ m * 1 = m * p * q"
                },
                {
                    "args": "mult_assoc",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = n * q, n = m * p ⊢ m * 1 = m * (p * q)"
                },
                {
                    "args": "eq_mult_lcancel",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = n * q, n = m * p ⊢ m = 0 ∨ 1 = p * q"
                },
                {
                    "args": "",
                    "id": "13",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ m = 0 ⟶ m = n"
                },
                {
                    "args": "m = 0",
                    "id": "13.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = 0 ⊢ m = 0"
                },
                {
                    "args": "",
                    "id": "13.1",
                    "prevs": [
                        "13.0",
                        "5"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = 0, n = m * p ⊢ n = 0 * p"
                },
                {
                    "args": "nat_times_def_1",
                    "id": "13.2",
                    "prevs": [
                        "13.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = 0, n = m * p ⊢ n = 0"
                },
                {
                    "args": "0 = n",
                    "id": "13.3",
                    "prevs": [
                        "13.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = 0, n = m * p ⊢ 0 = n"
                },
                {
                    "args": "m = n",
                    "id": "13.4",
                    "prevs": [
                        "13.0",
                        "13.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides m n, divides n m, m = 0, m = n * q, n = m * p ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "13.5",
                    "prevs": [
                        "13.0",
                        "13.4"
                    ],
                    "rule": "intros",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ m = 0 ⟶ m = n"
                },
                {
                    "args": "",
                    "id": "14",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ 1 = p * q ⟶ m = n"
                },
                {
                    "args": "1 = p * q",
                    "id": "14.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 = p * q ⊢ 1 = p * q"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "14.1",
                    "prevs": [
                        "14.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "1 = p * q ⊢ p * q = 1"
                },
                {
                    "args": "mult_eq_1",
                    "id": "14.2",
                    "prevs": [
                        "14.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "1 = p * q ⊢ p = 1 ∧ q = 1"
                },
                {
                    "args": "conjD1",
                    "id": "14.3",
                    "prevs": [
                        "14.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 = p * q ⊢ p = 1"
                },
                {
                    "args": "",
                    "id": "14.4",
                    "prevs": [
                        "14.3",
                        "5"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "n = m * p, 1 = p * q ⊢ n = m * 1"
                },
                {
                    "args": "mult_1_right",
                    "id": "14.5",
                    "prevs": [
                        "14.4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "n = m * p, 1 = p * q ⊢ n = m"
                },
                {
                    "args": "eq_sym_eq, m = n",
                    "id": "14.6",
                    "prevs": [
                        "14.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, divides n m, m = n * q, n = m * p, 1 = p * q ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "14.7",
                    "prevs": [
                        "14.0",
                        "14.6"
                    ],
                    "rule": "intros",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ 1 = p * q ⟶ m = n"
                },
                {
                    "args": "disjE",
                    "id": "15",
                    "prevs": [
                        "12",
                        "13",
                        "14"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n, divides n m, m = n * q, n = m * p ⊢ m = n"
                },
                {
                    "args": "∃k. m = n * k, ∃k. n = m * k",
                    "id": "16",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "15"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ divides n m ⟶ m = n"
                }
            ],
            "prop": "divides m n ⟶ divides n m ⟶ m = n",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal": "m = m * 1",
                    "goal_id": "8",
                    "method_name": "cut"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "fact_ids": [
                        "8",
                        "7"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "5",
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "10"
                    ],
                    "goal_id": "11",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "11"
                    ],
                    "goal_id": "12",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "fact_ids": [
                        "12"
                    ],
                    "goal_id": "13",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "13",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "13.0",
                        "5"
                    ],
                    "goal_id": "13.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "13.1"
                    ],
                    "goal_id": "13.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "fact_ids": [
                        "13.0"
                    ],
                    "goal_id": "13.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "13.2"
                    ],
                    "goal_id": "13.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "14",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "14.0"
                    ],
                    "goal_id": "14.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "14.1"
                    ],
                    "goal_id": "14.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_eq_1"
                },
                {
                    "fact_ids": [
                        "14.2"
                    ],
                    "goal_id": "14.3",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "14.3",
                        "5"
                    ],
                    "goal_id": "14.4",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "14.4"
                    ],
                    "goal_id": "14.5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "14.6",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_zero",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "mult_0_right, 0 = n * 0",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ 0 = n * 0"
                },
                {
                    "args": "exI, {P: λk. 0 = n * k, a: (0::nat)}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. 0 = n * a1"
                },
                {
                    "args": "divides_def, divides n 0",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides n 0"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n 0"
                }
            ],
            "prop": "divides n 0",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_sum",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "divides k n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k n ⊢ divides k n"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k m ⊢ ∃k1. m = k * k1"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k n ⊢ ∃k1. n = k * k1"
                },
                {
                    "args": "p, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "m = k * p",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k * p ⊢ m = k * p"
                },
                {
                    "args": "q, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR q"
                },
                {
                    "args": "n = k * q",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = k * q ⊢ n = k * q"
                },
                {
                    "args": "distrib_l, k * p + k * q = k * (p + q)",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * p + k * q = k * (p + q)"
                },
                {
                    "args": "m + k * q = k * (p + q)",
                    "id": "9",
                    "prevs": [
                        "5",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = k * p, divides k m, divides k n, n = k * q ⊢ m + k * q = k * (p + q)"
                },
                {
                    "args": "m + n = k * (p + q)",
                    "id": "10",
                    "prevs": [
                        "7",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = k * q, divides k m, divides k n, m = k * p ⊢ m + n = k * (p + q)"
                },
                {
                    "args": "exI, {P: λk1. m + n = k * k1, a: p + q}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides k m, divides k n, m = k * p, n = k * q ⊢ ∃a1. m + n = k * a1"
                },
                {
                    "args": "divides_def, divides k (m + n)",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides k m, divides k n, m = k * p, n = k * q ⊢ divides k (m + n)"
                },
                {
                    "args": "∃k1. n = k * k1, ∃k1. m = k * k1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k m ⟶ divides k n ⟶ divides k (m + n)"
                }
            ],
            "prop": "divides k m ⟶ divides k n ⟶ divides k (m + n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "q"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "p + q"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_l"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_sub",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "divides k n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k n ⊢ divides k n"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k m ⊢ ∃k1. m = k * k1"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides k n ⊢ ∃k1. n = k * k1"
                },
                {
                    "args": "k1, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k1"
                },
                {
                    "args": "m = k * k1",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = k * k1 ⊢ m = k * k1"
                },
                {
                    "args": "k2, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k2"
                },
                {
                    "args": "n = k * k2",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = k * k2 ⊢ n = k * k2"
                },
                {
                    "args": "left_sub_distrib, k * k1 - k * k2 = k * (k1 - k2)",
                    "id": "8",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * k1 - k * k2 = k * (k1 - k2)"
                },
                {
                    "args": "k * k1 - n = k * (k1 - k2)",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ k * k1 - n = k * (k1 - k2)"
                },
                {
                    "args": "m - n = k * (k1 - k2)",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ m - n = k * (k1 - k2)"
                },
                {
                    "args": "exI, {P: λk1. m - n = k * k1, a: k1 - k2}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ ∃a1. m - n = k * a1"
                },
                {
                    "args": "divides_def, divides k (m - n)",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides k m, divides k n, m = k * k1, n = k * k2 ⊢ divides k (m - n)"
                },
                {
                    "args": "∃k1. n = k * k1, ∃k1. m = k * k1",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k m ⟶ divides k n ⟶ divides k (m - n)"
                }
            ],
            "prop": "divides k m ⟶ divides k n ⟶ divides k (m - n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "k1"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "k2"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "k1-k2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "left_sub_distrib"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_forward"
            ],
            "name": "divides_sum2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides k (m + n)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k (m + n) ⊢ divides k (m + n)"
                },
                {
                    "args": "divides k m",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides k m ⊢ divides k m"
                },
                {
                    "args": "nat_plus_minus_2, n = m + n - m",
                    "id": "2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n = m + n - m"
                },
                {
                    "args": "divides_sub",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides k m, divides k (m + n) ⊢ divides k (m + n - m)"
                },
                {
                    "args": "divides k n",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides k m, divides k (m + n) ⊢ divides k n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "1",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides k (m + n) ⟶ divides k m ⟶ divides k n"
                }
            ],
            "prop": "divides k (m + n) ⟶ divides k m ⟶ divides k n",
            "steps": [
                {
                    "goal": "n = m + n - m",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_minus_2"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_sub"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lmul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides d a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d a ⊢ divides d a"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides d a ⊢ ∃k. a = d * k"
                },
                {
                    "args": "k, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "a = d * k",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = d * k ⊢ a = d * k"
                },
                {
                    "args": "x * (d * k) = d * (x * k)",
                    "id": "4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x * (d * k) = d * (x * k)"
                },
                {
                    "args": "x * a = d * (x * k)",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides d a, a = d * k ⊢ x * a = d * (x * k)"
                },
                {
                    "args": "exI, {P: λk. x * a = d * k, a: x * k}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides d a, a = d * k ⊢ ∃a1. x * a = d * a1"
                },
                {
                    "args": "divides_def, divides d (x * a)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides d a, a = d * k ⊢ divides d (x * a)"
                },
                {
                    "args": "∃k. a = d * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d a ⟶ divides d (x * a)"
                }
            ],
            "prop": "divides d a ⟶ divides d (x * a)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "x * k"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rmul",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides d a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d a ⊢ divides d a"
                },
                {
                    "args": "divides_lmul, {a: a, d: d, x: x}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides d a ⊢ divides d (x * a)"
                },
                {
                    "args": "mult_comm, divides d (a * x)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides d a ⊢ divides d (a * x)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d a ⟶ divides d (a * x)"
                }
            ],
            "prop": "divides d a ⟶ divides d (a * x)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lmul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides (x * d) a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (x * d) a ⊢ divides (x * d) a"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (x * d) a ⊢ ∃k. a = x * d * k"
                },
                {
                    "args": "k, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "a = x * d * k",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = x * d * k ⊢ a = x * d * k"
                },
                {
                    "args": "x * d * k = d * (x * k)",
                    "id": "4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ x * d * k = d * (x * k)"
                },
                {
                    "args": "a = d * (x * k)",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides (x * d) a, a = x * d * k ⊢ a = d * (x * k)"
                },
                {
                    "args": "exI, {P: λk. a = d * k, a: x * k}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides (x * d) a, a = x * d * k ⊢ ∃a1. a = d * a1"
                },
                {
                    "args": "divides_def, divides d a",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides (x * d) a, a = x * d * k ⊢ divides d a"
                },
                {
                    "args": "∃k. a = x * d * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (x * d) a ⟶ divides d a"
                }
            ],
            "prop": "divides (x * d) a ⟶ divides d a",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "x * k"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rmul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides (d * x) a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (d * x) a ⊢ divides (d * x) a"
                },
                {
                    "args": "mult_comm",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (d * x) a ⊢ divides (x * d) a"
                },
                {
                    "args": "divides_lmul2",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (d * x) a ⊢ divides d a"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (d * x) a ⟶ divides d a"
                }
            ],
            "prop": "divides (d * x) a ⟶ divides d a",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "param_x": "x",
                    "theorem": "divides_lmul2"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "d": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_mult_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "p, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m * p",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * p ⊢ n = m * p"
                },
                {
                    "args": "mult_assoc, k * (m * p) = k * m * p",
                    "id": "4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * (m * p) = k * m * p"
                },
                {
                    "args": "k * n = k * m * p",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m * p, divides m n ⊢ k * n = k * m * p"
                },
                {
                    "args": "exI, {P: λk1. k * n = k * m * k1, a: p}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, n = m * p ⊢ ∃a1. k * n = k * m * a1"
                },
                {
                    "args": "divides_def, divides (k * m) (k * n)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, n = m * p ⊢ divides (k * m) (k * n)"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ divides (k * m) (k * n)"
                }
            ],
            "prop": "divides m n ⟶ divides (k * m) (k * n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_mult_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides m n ⊢ ∃k. n = m * k"
                },
                {
                    "args": "p, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR p"
                },
                {
                    "args": "n = m * p",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m * p ⊢ n = m * p"
                },
                {
                    "args": "m * p * k = m * k * p",
                    "id": "4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ m * p * k = m * k * p"
                },
                {
                    "args": "n * k = m * k * p",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "n = m * p, divides m n ⊢ n * k = m * k * p"
                },
                {
                    "args": "exI, {P: λk1. n * k = m * k * k1, a: p}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides m n, n = m * p ⊢ ∃a1. n * k = m * k * a1"
                },
                {
                    "args": "divides_def, divides (m * k) (n * k)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides m n, n = m * p ⊢ divides (m * k) (n * k)"
                },
                {
                    "args": "∃k. n = m * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ divides (m * k) (n * k)"
                }
            ],
            "prop": "divides m n ⟶ divides (m * k) (n * k)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "p"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "p"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_cmul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides (c * a) (c * b)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (c * a) (c * b) ⊢ divides (c * a) (c * b)"
                },
                {
                    "args": "¬(c = 0)",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (c * a) (c * b) ⊢ ∃k. c * b = c * a * k"
                },
                {
                    "args": "k, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "c * b = c * a * k",
                    "id": "4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "c * b = c * a * k ⊢ c * b = c * a * k"
                },
                {
                    "args": "mult_assoc",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_fact",
                    "th": "c * b = c * a * k ⊢ c * b = c * (a * k)"
                },
                {
                    "args": "eq_mult_lcancel",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "c * b = c * a * k ⊢ c = 0 ∨ b = a * k"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ c = 0 ⟶ (∃k. b = a * k)"
                },
                {
                    "args": "c = 0",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "c = 0 ⊢ c = 0"
                },
                {
                    "args": "negE_gen, {A: c = 0, C: ∃k. b = a * k}",
                    "id": "7.1",
                    "prevs": [
                        "1",
                        "7.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "c = 0, ¬(c = 0) ⊢ ∃k. b = a * k"
                },
                {
                    "args": "",
                    "id": "7.2",
                    "prevs": [
                        "7.0",
                        "7.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ c = 0 ⟶ (∃k. b = a * k)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ b = a * k ⟶ (∃k1. b = a * k1)"
                },
                {
                    "args": "b = a * k",
                    "id": "8.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b = a * k ⊢ b = a * k"
                },
                {
                    "args": "exI, {P: λk. b = a * k, a: k}",
                    "id": "8.1",
                    "prevs": [
                        "8.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(c = 0), b = a * k, divides (c * a) (c * b), c * b = c * a * k ⊢ ∃a1. b = a * a1"
                },
                {
                    "args": "",
                    "id": "8.2",
                    "prevs": [
                        "8.0",
                        "8.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ b = a * k ⟶ (∃k1. b = a * k1)"
                },
                {
                    "args": "disjE",
                    "id": "9",
                    "prevs": [
                        "6",
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ ∃k. b = a * k"
                },
                {
                    "args": "divides_def, divides a b",
                    "id": "10",
                    "prevs": [
                        "9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(c = 0), divides (c * a) (c * b), c * b = c * a * k ⊢ divides a b"
                },
                {
                    "args": "∃k. c * b = c * a * k",
                    "id": "11",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "10"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (c * a) (c * b) ⟶ ¬(c = 0) ⟶ divides a b"
                }
            ],
            "prop": "divides (c * a) (c * b) ⟶ ¬(c = 0) ⟶ divides a b",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_mult_lcancel"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1",
                        "7.0"
                    ],
                    "goal_id": "7.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "8",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "8.1",
                    "method_name": "inst_exists_goal",
                    "s": "k"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_lmul2_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(c = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟶ divides a b"
                },
                {
                    "args": "divides (c * a) (c * b)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (c * a) (c * b) ⊢ divides (c * a) (c * b)"
                },
                {
                    "args": "divides_cmul2",
                    "id": "1.1",
                    "prevs": [
                        "1.0",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(c = 0), divides (c * a) (c * b) ⊢ divides a b"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟶ divides a b"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(c = 0) ⊢ divides a b ⟶ divides (c * a) (c * b)"
                },
                {
                    "args": "divides a b",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides a b ⊢ divides a b"
                },
                {
                    "args": "divides_mult_left, {k: c, m: a, n: b}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides a b ⊢ divides (c * a) (c * b)"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "¬(c = 0) ⊢ divides a b ⟶ divides (c * a) (c * b)"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟷ divides a b"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(c = 0) ⟶ divides (c * a) (c * b) ⟷ divides a b"
                }
            ],
            "prop": "¬(c = 0) ⟶ divides (c * a) (c * b) ⟷ divides a b",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0",
                        "0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_cmul2"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rmul2_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(c = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(c = 0) ⊢ ¬(c = 0)"
                },
                {
                    "args": "divides_lmul2_eq, {a: a, b: b, c: c}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(c = 0) ⊢ divides (c * a) (c * b) ⟷ divides a b"
                },
                {
                    "args": "mult_comm, divides (a * c) (b * c) ⟷ divides a b",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(c = 0) ⊢ divides (a * c) (b * c) ⟷ divides a b"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(c = 0) ⟶ divides (a * c) (b * c) ⟷ divides a b"
                }
            ],
            "prop": "¬(c = 0) ⟶ divides (a * c) (b * c) ⟷ divides a b",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul2_eq"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_cases",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides n m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "m = n ∨ 2 * n ≤ m ⟷ m = n * 1 ∨ n * 2 ≤ m",
                    "id": "1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ m = n ∨ 2 * n ≤ m ⟷ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides n m ⊢ ∃k. m = n * k"
                },
                {
                    "args": "k, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m ⊢ m = n * 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = n * 0",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * 0 ⊢ m = n * 0"
                },
                {
                    "args": "mult_0_right, n * 0 = 0",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ n * 0 = 0"
                },
                {
                    "args": "m = 0",
                    "id": "4.2",
                    "prevs": [
                        "4.0",
                        "4.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides n m, m = n * 0 ⊢ m = 0"
                },
                {
                    "args": "disjI1, {A: m = 0, B: m = n * 1 ∨ n * 2 ≤ m}",
                    "id": "4.3",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, m = n * 0 ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "4.4",
                    "prevs": [
                        "4.0",
                        "4.3"
                    ],
                    "rule": "intros",
                    "th": "divides n m ⊢ m = n * 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m ⊢ ∀n1. (m = n * n1 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m) ⟶ m = n * Suc n1 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = n * Suc k",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n * Suc k ⊢ m = n * Suc k"
                },
                {
                    "args": "mult_Suc_right",
                    "id": "5.2",
                    "prevs": [
                        "5.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m = n * Suc k ⊢ m = n + n * k"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ k = 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "k = 0",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k = 0 ⊢ k = 0"
                },
                {
                    "args": "",
                    "id": "5.3.1",
                    "prevs": [
                        "5.3.0",
                        "5.2"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "k = 0, m = n * Suc k ⊢ m = n + n * 0"
                },
                {
                    "args": "mult_0_right",
                    "id": "5.3.2",
                    "prevs": [
                        "5.3.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "k = 0, m = n * Suc k ⊢ m = n + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "5.3.3",
                    "prevs": [
                        "5.3.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "k = 0, m = n * Suc k ⊢ m = n"
                },
                {
                    "args": "mult_1_right, m = n * 1",
                    "id": "5.3.4",
                    "prevs": [
                        "5.3.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, k = 0, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * 1"
                },
                {
                    "args": "disjI1, {A: m = n * 1, B: n * 2 ≤ m}",
                    "id": "5.3.5",
                    "prevs": [
                        "5.3.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, k = 0, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "disjI2, {A: m = 0, B: m = n * 1 ∨ n * 2 ≤ m}",
                    "id": "5.3.6",
                    "prevs": [
                        "5.3.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, k = 0, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.3.7",
                    "prevs": [
                        "5.3.0",
                        "5.3.6"
                    ],
                    "rule": "intros",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ k = 0 ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ ¬(k = 0) ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "¬(k = 0)",
                    "id": "5.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(k = 0) ⊢ ¬(k = 0)"
                },
                {
                    "args": "le_1_2",
                    "id": "5.4.1",
                    "prevs": [
                        "5.4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(k = 0) ⊢ 1 ≤ k"
                },
                {
                    "args": "less_eq_refl, {n: n + n}",
                    "id": "5.4.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n + n ≤ n + n"
                },
                {
                    "args": "mult_2, 2 * n ≤ n + n",
                    "id": "5.4.3",
                    "prevs": [
                        "5.4.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ 2 * n ≤ n + n"
                },
                {
                    "args": "mult_comm, n * 2 ≤ n + n",
                    "id": "5.4.4",
                    "prevs": [
                        "5.4.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ n + n"
                },
                {
                    "args": "mult_1_right, n * 2 ≤ n + n * 1",
                    "id": "5.4.5",
                    "prevs": [
                        "5.4.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ n + n * 1"
                },
                {
                    "args": "n + n * 1 ≤ n + n * k",
                    "id": "5.4.6",
                    "prevs": [
                        "5.4.1"
                    ],
                    "rule": "z3",
                    "th": "¬(k = 0) ⊢ n + n * 1 ≤ n + n * k"
                },
                {
                    "args": "less_eq_trans",
                    "id": "5.4.7",
                    "prevs": [
                        "5.4.5",
                        "5.4.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ n + n * k"
                },
                {
                    "args": "n * 2 ≤ m",
                    "id": "5.4.8",
                    "prevs": [
                        "5.2",
                        "5.4.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ n * 2 ≤ m"
                },
                {
                    "args": "disjI2, {A: m = n * 1, B: n * 2 ≤ m}",
                    "id": "5.4.9",
                    "prevs": [
                        "5.4.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "disjI2, {A: m = 0, B: m = n * 1 ∨ n * 2 ≤ m}",
                    "id": "5.4.10",
                    "prevs": [
                        "5.4.9"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m, ¬(k = 0), m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.4.11",
                    "prevs": [
                        "5.4.0",
                        "5.4.10"
                    ],
                    "rule": "intros",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ ¬(k = 0) ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "classical_cases",
                    "id": "5.5",
                    "prevs": [
                        "5.3",
                        "5.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m, m = n * Suc k, m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m ⊢ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "",
                    "id": "5.6",
                    "prevs": [
                        "3",
                        "5.0",
                        "5.1",
                        "5.5"
                    ],
                    "rule": "intros",
                    "th": "divides n m ⊢ ∀k. (m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m) ⟶ m = n * Suc k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "nat_induct, {P: λk. m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m, x: k}",
                    "id": "6",
                    "prevs": [
                        "4",
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides n m ⊢ m = n * k ⟶ m = 0 ∨ m = n * 1 ∨ n * 2 ≤ m"
                },
                {
                    "args": "m = 0 ∨ m = n ∨ 2 * n ≤ m",
                    "id": "7",
                    "prevs": [
                        "1",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides n m, m = n * k ⊢ m = 0 ∨ m = n ∨ 2 * n ≤ m"
                },
                {
                    "args": "∃k. m = n * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "2",
                        "3",
                        "6",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n m ⟶ m = 0 ∨ m = n ∨ 2 * n ≤ m"
                }
            ],
            "prop": "divides n m ⟶ m = 0 ∨ m = n ∨ 2 * n ≤ m",
            "steps": [
                {
                    "goal": "m = n | 2 * n <= m <--> m = n * 1 | n * 2 <= m",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "4",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "4.0"
                    ],
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_Suc_right"
                },
                {
                    "case": "k=0",
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "cases"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.0",
                        "5.2"
                    ],
                    "goal_id": "5.3.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "5.3.1"
                    ],
                    "goal_id": "5.3.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "fact_ids": [
                        "5.3.2"
                    ],
                    "goal_id": "5.3.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "5.3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "5.3.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "5.3.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "5.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.4.0"
                    ],
                    "goal_id": "5.4.1",
                    "method_name": "apply_forward_step",
                    "theorem": "le_1_2"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "param_m": "n + n * 1",
                    "theorem": "less_eq_trans"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_2"
                },
                {
                    "goal_id": "5.4.2",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "fact_ids": [
                        "5.4.1"
                    ],
                    "goal_id": "5.4.6",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_div_not",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "x = q * n + r",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = q * n + r ⊢ x = q * n + r"
                },
                {
                    "args": "0 < r",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "0 < r ⊢ 0 < r"
                },
                {
                    "args": "r < n",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "r < n ⊢ r < n"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "divides_lmul, {x: q}",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n (q * n)"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r < n, 0 < r, x = q * n + r ⊢ divides n (q * n + r) ⟶ false"
                },
                {
                    "args": "divides n (q * n + r)",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n (q * n + r) ⊢ divides n (q * n + r)"
                },
                {
                    "args": "divides_sum2",
                    "id": "5.1",
                    "prevs": [
                        "5.0",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n (q * n + r) ⊢ divides n r"
                },
                {
                    "args": "divides_le",
                    "id": "5.2",
                    "prevs": [
                        "5.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n (q * n + r) ⊢ n ≤ r ∨ r = 0"
                },
                {
                    "args": "",
                    "id": "5.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬false ⟶ ¬(n ≤ r ∨ r = 0)"
                },
                {
                    "args": "¬false",
                    "id": "5.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "not_le, ¬(n ≤ r)",
                    "id": "5.3.1",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬false, r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬(n ≤ r)"
                },
                {
                    "args": "",
                    "id": "5.3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬false, r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬¬(r = 0) ⟶ ¬(0 < r)"
                },
                {
                    "args": "¬¬(r = 0)",
                    "id": "5.3.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬¬(r = 0) ⊢ ¬¬(r = 0)"
                },
                {
                    "args": "double_neg",
                    "id": "5.3.2.1",
                    "prevs": [
                        "5.3.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬¬(r = 0) ⊢ r = 0"
                },
                {
                    "args": "nat_less_def_1, ¬((0::nat) < 0)",
                    "id": "5.3.2.2",
                    "prevs": [
                        "5.3.0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬false, r < n, 0 < r, ¬¬(r = 0), divides n (q * n + r), x = q * n + r ⊢ ¬((0::nat) < 0)"
                },
                {
                    "args": "¬(0 < r)",
                    "id": "5.3.2.3",
                    "prevs": [
                        "5.3.2.1",
                        "5.3.2.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬false, r < n, 0 < r, ¬¬(r = 0), divides n (q * n + r), x = q * n + r ⊢ ¬(0 < r)"
                },
                {
                    "args": "",
                    "id": "5.3.2.4",
                    "prevs": [
                        "5.3.2.0",
                        "5.3.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬false, r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬¬(r = 0) ⟶ ¬(0 < r)"
                },
                {
                    "args": "contrapositive",
                    "id": "5.3.3",
                    "prevs": [
                        "1",
                        "5.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬false, r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬(r = 0)"
                },
                {
                    "args": "conjI",
                    "id": "5.3.4",
                    "prevs": [
                        "5.3.1",
                        "5.3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬false, r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬(n ≤ r) ∧ ¬(r = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(n ≤ r ∨ r = 0)",
                    "id": "5.3.5",
                    "prevs": [
                        "5.3.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬false, r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬(n ≤ r ∨ r = 0)"
                },
                {
                    "args": "",
                    "id": "5.3.6",
                    "prevs": [
                        "5.3.0",
                        "5.3.5"
                    ],
                    "rule": "intros",
                    "th": "r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ ¬false ⟶ ¬(n ≤ r ∨ r = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "5.4",
                    "prevs": [
                        "5.2",
                        "5.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, 0 < r, divides n (q * n + r), x = q * n + r ⊢ false"
                },
                {
                    "args": "",
                    "id": "5.5",
                    "prevs": [
                        "5.0",
                        "5.4"
                    ],
                    "rule": "intros",
                    "th": "r < n, 0 < r, x = q * n + r ⊢ divides n (q * n + r) ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "r < n, 0 < r, x = q * n + r ⊢ ¬(divides n (q * n + r))"
                },
                {
                    "args": "¬(divides n x)",
                    "id": "7",
                    "prevs": [
                        "0",
                        "6"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "r < n, 0 < r, x = q * n + r ⊢ ¬(divides n x)"
                },
                {
                    "args": "",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ x = q * n + r ⟶ 0 < r ⟶ r < n ⟶ ¬(divides n x)"
                }
            ],
            "prop": "x = q * n + r ⟶ 0 < r ⟶ r < n ⟶ ¬(divides n x)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_forward_step",
                    "param_n": "n",
                    "theorem": "divides_self"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "apply_forward_step",
                    "param_x": "q",
                    "theorem": "divides_lmul"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.0",
                        "4"
                    ],
                    "goal_id": "5.1",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_sum2"
                },
                {
                    "fact_ids": [
                        "5.1"
                    ],
                    "goal_id": "5.2",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "5.2"
                    ],
                    "goal_id": "5.3",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "5.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "5.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "5.3.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "5.3.2.0"
                    ],
                    "goal_id": "5.3.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "double_neg"
                },
                {
                    "fact_ids": [
                        "5.3.2.1"
                    ],
                    "goal_id": "5.3.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "5.3.2.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "q": "nat",
                "r": "nat",
                "x": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_mul2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides a b",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides a b ⊢ divides a b"
                },
                {
                    "args": "divides c d",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides c d ⊢ divides c d"
                },
                {
                    "args": "divides_def",
                    "id": "2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides a b ⊢ ∃k. b = a * k"
                },
                {
                    "args": "divides_def",
                    "id": "3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides c d ⊢ ∃k. d = c * k"
                },
                {
                    "args": "k1, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k1"
                },
                {
                    "args": "b = a * k1",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b = a * k1 ⊢ b = a * k1"
                },
                {
                    "args": "k2, nat",
                    "id": "6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k2"
                },
                {
                    "args": "d = c * k2",
                    "id": "7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d = c * k2 ⊢ d = c * k2"
                },
                {
                    "args": "a * k1 * (c * k2) = a * c * (k1 * k2)",
                    "id": "8",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ a * k1 * (c * k2) = a * c * (k1 * k2)"
                },
                {
                    "args": "a * k1 * d = a * c * (k1 * k2)",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides a b, divides c d, b = a * k1, d = c * k2 ⊢ a * k1 * d = a * c * (k1 * k2)"
                },
                {
                    "args": "b * d = a * c * (k1 * k2)",
                    "id": "10",
                    "prevs": [
                        "5",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides a b, divides c d, b = a * k1, d = c * k2 ⊢ b * d = a * c * (k1 * k2)"
                },
                {
                    "args": "exI, {P: λk. b * d = a * c * k, a: k1 * k2}",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides a b, divides c d, b = a * k1, d = c * k2 ⊢ ∃a1. b * d = a * c * a1"
                },
                {
                    "args": "divides_def, divides (a * c) (b * d)",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides a b, divides c d, b = a * k1, d = c * k2 ⊢ divides (a * c) (b * d)"
                },
                {
                    "args": "∃k. d = c * k, ∃k. b = a * k",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "4",
                        "5",
                        "3",
                        "6",
                        "7",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides a b ⟶ divides c d ⟶ divides (a * c) (b * d)"
                }
            ],
            "prop": "divides a b ⟶ divides c d ⟶ divides (a * c) (b * d)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "4",
                    "method_name": "exists_elim",
                    "names": "k1"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "6",
                    "method_name": "exists_elim",
                    "names": "k2"
                },
                {
                    "goal_id": "8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "8",
                    "method_name": "inst_exists_goal",
                    "s": "k1*k2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "8",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "c": "nat",
                "d": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_exp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides x y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides x y ⊢ divides x y"
                },
                {
                    "args": "divides_def",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides x y ⊢ ∃k. y = x * k"
                },
                {
                    "args": "k, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "y = x * k",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "y = x * k ⊢ y = x * k"
                },
                {
                    "args": "mult_exp, (x * k) ^ n = x ^ n * k ^ n",
                    "id": "4",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (x * k) ^ n = x ^ n * k ^ n"
                },
                {
                    "args": "y ^ n = x ^ n * k ^ n",
                    "id": "5",
                    "prevs": [
                        "3",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "divides x y, y = x * k ⊢ y ^ n = x ^ n * k ^ n"
                },
                {
                    "args": "exI, {P: λk. y ^ n = x ^ n * k, a: k ^ n}",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides x y, y = x * k ⊢ ∃a1. y ^ n = x ^ n * a1"
                },
                {
                    "args": "divides_def, divides (x ^ n) (y ^ n)",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides x y, y = x * k ⊢ divides (x ^ n) (y ^ n)"
                },
                {
                    "args": "∃k. y = x * k",
                    "id": "8",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "7"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides x y ⟶ divides (x ^ n) (y ^ n)"
                }
            ],
            "prop": "divides x y ⟶ divides (x ^ n) (y ^ n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "k ^ n"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_exp"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_exp2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ divides (x ^ (0::nat)) y ⟶ divides x y"
                },
                {
                    "args": "¬((0::nat) = 0)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "divides (x ^ (0::nat)) y",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (x ^ (0::nat)) y ⊢ divides (x ^ (0::nat)) y"
                },
                {
                    "args": "le_1_1",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬((0::nat) = 0) ⊢ (0::nat) < 0"
                },
                {
                    "args": "nat_less_def_1",
                    "id": "0.3",
                    "prevs": [
                        "0.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬((0::nat) = 0) ⊢ false"
                },
                {
                    "args": "not_false_res, divides x y",
                    "id": "0.4",
                    "prevs": [
                        "0.3"
                    ],
                    "rule": "resolve_theorem",
                    "th": "¬((0::nat) = 0) ⊢ divides x y"
                },
                {
                    "args": "",
                    "id": "0.5",
                    "prevs": [
                        "0.0",
                        "0.1",
                        "0.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬((0::nat) = 0) ⟶ divides (x ^ (0::nat)) y ⟶ divides x y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀n. (¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y) ⟶ ¬(Suc n = 0) ⟶ divides (x ^ Suc n) y ⟶ divides x y"
                },
                {
                    "args": "n, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y ⊢ ¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y"
                },
                {
                    "args": "¬(Suc n = 0)",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "divides (x ^ Suc n) y",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (x ^ Suc n) y ⊢ divides (x ^ Suc n) y"
                },
                {
                    "args": "nat_nat_power_def_2",
                    "id": "1.4",
                    "prevs": [
                        "1.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides (x ^ Suc n) y ⊢ divides (x * x ^ n) y"
                },
                {
                    "args": "divides_rmul2",
                    "id": "1.5",
                    "prevs": [
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (x ^ Suc n) y ⊢ divides x y"
                },
                {
                    "args": "",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3",
                        "1.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀n. (¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y) ⟶ ¬(Suc n = 0) ⟶ divides (x ^ Suc n) y ⟶ divides x y"
                },
                {
                    "args": "nat_induct, {P: λn::nat. ¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y, x: n}",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y"
                }
            ],
            "prop": "¬(n = 0) ⟶ divides (x ^ n) y ⟶ divides x y",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "0",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_forward_step",
                    "theorem": "le_1_1"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_def_1"
                },
                {
                    "fact_ids": [
                        "0.3"
                    ],
                    "goal_id": "0.4",
                    "method_name": "apply_resolve_step",
                    "theorem": "not_false_res"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "fact_ids": [
                        "1.4"
                    ],
                    "goal_id": "1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul2"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_exp_le_imp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "m ≤ n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "less_eq_exist",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "m ≤ n ⊢ ∃p. n = m + p"
                },
                {
                    "args": "d, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "n = m + d",
                    "id": "3",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = m + d ⊢ n = m + d"
                },
                {
                    "args": "eq_refl, {x: p ^ m * p ^ d}",
                    "id": "4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ p ^ m * p ^ d = p ^ m * p ^ d"
                },
                {
                    "args": "exI, {P: λk. p ^ m * p ^ d = p ^ m * k, a: p ^ d}",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n, n = m + d ⊢ ∃a1. p ^ m * p ^ d = p ^ m * a1"
                },
                {
                    "args": "divides_def, divides (p ^ m) (p ^ m * p ^ d)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d ⊢ divides (p ^ m) (p ^ m * p ^ d)"
                },
                {
                    "args": "nat_power_add, divides (p ^ m) (p ^ (m + d))",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "m ≤ n, n = m + d ⊢ divides (p ^ m) (p ^ (m + d))"
                },
                {
                    "args": "divides (p ^ m) (p ^ n)",
                    "id": "8",
                    "prevs": [
                        "3",
                        "7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m ≤ n, n = m + d ⊢ divides (p ^ m) (p ^ n)"
                },
                {
                    "args": "∃p. n = m + p",
                    "id": "9",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ m ≤ n ⟶ divides (p ^ m) (p ^ n)"
                }
            ],
            "prop": "m ≤ n ⟶ divides (p ^ m) (p ^ n)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "less_eq_exist"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "3"
                    ],
                    "goal_id": "4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_power_add"
                },
                {
                    "goal_id": "4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4",
                    "method_name": "inst_exists_goal",
                    "s": "p ^ d"
                },
                {
                    "goal_id": "4",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_exp_le",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "2 ≤ p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ≤ p ⊢ 2 ≤ p"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 ≤ p ⊢ divides (p ^ m) (p ^ n) ⟶ m ≤ n"
                },
                {
                    "args": "divides (p ^ m) (p ^ n)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ m) (p ^ n) ⊢ divides (p ^ m) (p ^ n)"
                },
                {
                    "args": "divides_le",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ m) (p ^ n) ⊢ p ^ m ≤ p ^ n ∨ p ^ n = 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n) ⊢ p ^ m ≤ p ^ n ⟶ m ≤ n"
                },
                {
                    "args": "p ^ m ≤ p ^ n",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ^ m ≤ p ^ n ⊢ p ^ m ≤ p ^ n"
                },
                {
                    "args": "",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ ¬(m ≤ n) ⟶ ¬(p ^ m ≤ p ^ n)"
                },
                {
                    "args": "¬(m ≤ n)",
                    "id": "1.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(m ≤ n) ⊢ ¬(m ≤ n)"
                },
                {
                    "args": "not_le",
                    "id": "1.2.1.1",
                    "prevs": [
                        "1.2.1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "¬(m ≤ n) ⊢ n < m"
                },
                {
                    "args": "conjI",
                    "id": "1.2.1.2",
                    "prevs": [
                        "0",
                        "1.2.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(m ≤ n), 2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ 2 ≤ p ∧ n < m"
                },
                {
                    "args": "disjI1, {A: 2 ≤ p ∧ n < m, B: p = 0 ∧ ¬(n = 0) ∧ m = 0}",
                    "id": "1.2.1.3",
                    "prevs": [
                        "1.2.1.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(m ≤ n), 2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ 2 ≤ p ∧ n < m ∨ p = 0 ∧ ¬(n = 0) ∧ m = 0"
                },
                {
                    "args": "lt_exp, p ^ n < p ^ m",
                    "id": "1.2.1.4",
                    "prevs": [
                        "1.2.1.3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m ≤ n), 2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ p ^ n < p ^ m"
                },
                {
                    "args": "not_le, ¬(p ^ m ≤ p ^ n)",
                    "id": "1.2.1.5",
                    "prevs": [
                        "1.2.1.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(m ≤ n), 2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ ¬(p ^ m ≤ p ^ n)"
                },
                {
                    "args": "",
                    "id": "1.2.1.6",
                    "prevs": [
                        "1.2.1.0",
                        "1.2.1.5"
                    ],
                    "rule": "intros",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ ¬(m ≤ n) ⟶ ¬(p ^ m ≤ p ^ n)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.2.2",
                    "prevs": [
                        "1.2.0",
                        "1.2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n), p ^ m ≤ p ^ n ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "1.2.3",
                    "prevs": [
                        "1.2.0",
                        "1.2.2"
                    ],
                    "rule": "intros",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n) ⊢ p ^ m ≤ p ^ n ⟶ m ≤ n"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n) ⊢ p ^ n = 0 ⟶ m ≤ n"
                },
                {
                    "args": "p ^ n = 0",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ^ n = 0 ⊢ p ^ n = 0"
                },
                {
                    "args": "exp_eq_0",
                    "id": "1.3.1",
                    "prevs": [
                        "1.3.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "p ^ n = 0 ⊢ p = 0 ∧ ¬(n = 0)"
                },
                {
                    "args": "conjD1",
                    "id": "1.3.2",
                    "prevs": [
                        "1.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "p ^ n = 0 ⊢ p = 0"
                },
                {
                    "args": "m ≤ n",
                    "id": "1.3.3",
                    "prevs": [
                        "0",
                        "1.3.2"
                    ],
                    "rule": "z3",
                    "th": "p ^ n = 0, 2 ≤ p ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "1.3.4",
                    "prevs": [
                        "1.3.0",
                        "1.3.3"
                    ],
                    "rule": "intros",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n) ⊢ p ^ n = 0 ⟶ m ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "1.4",
                    "prevs": [
                        "1.1",
                        "1.2",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 ≤ p, divides (p ^ m) (p ^ n) ⊢ m ≤ n"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "2 ≤ p ⊢ divides (p ^ m) (p ^ n) ⟶ m ≤ n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "2 ≤ p ⊢ m ≤ n ⟶ divides (p ^ m) (p ^ n)"
                },
                {
                    "args": "m ≤ n",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m ≤ n ⊢ m ≤ n"
                },
                {
                    "args": "divides_exp_le_imp, {m: m, n: n, p: p}",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "m ≤ n ⊢ divides (p ^ m) (p ^ n)"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [
                        "2.0",
                        "2.1"
                    ],
                    "rule": "intros",
                    "th": "2 ≤ p ⊢ m ≤ n ⟶ divides (p ^ m) (p ^ n)"
                },
                {
                    "args": "iffI",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "2 ≤ p ⊢ divides (p ^ m) (p ^ n) ⟷ m ≤ n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 2 ≤ p ⟶ divides (p ^ m) (p ^ n) ⟷ m ≤ n"
                }
            ],
            "prop": "2 ≤ p ⟶ divides (p ^ m) (p ^ n) ⟷ m ≤ n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.2.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "fact_ids": [
                        "1.2.1.0"
                    ],
                    "goal_id": "1.2.1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "1.2.1.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "lt_exp"
                },
                {
                    "goal_id": "1.2.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "1.2.1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.3.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "exp_eq_0"
                },
                {
                    "fact_ids": [
                        "1.3.1"
                    ],
                    "goal_id": "1.3.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0",
                        "1.3.2"
                    ],
                    "goal_id": "1.3.3",
                    "method_name": "z3"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_exp_le_imp"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_trivial_upperbound",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "2 ≤ p",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ≤ p ⊢ 2 ≤ p"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 2 ≤ p ⊢ divides (p ^ n) n ⟶ false"
                },
                {
                    "args": "divides (p ^ n) n",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ n) n ⊢ divides (p ^ n) n"
                },
                {
                    "args": "divides_le",
                    "id": "2.1",
                    "prevs": [
                        "2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ n) n ⊢ p ^ n ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ ¬false ⟶ ¬(p ^ n ≤ n ∨ n = 0)"
                },
                {
                    "args": "¬false",
                    "id": "2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬false ⊢ ¬false"
                },
                {
                    "args": "lt_pow2_refl, {n: n}",
                    "id": "2.2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ n < 2 ^ n"
                },
                {
                    "args": "le_1_2",
                    "id": "2.2.2",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ 1 ≤ n"
                },
                {
                    "args": "exp_mono_le_imp, {n: n, x: (2::nat), y: p}",
                    "id": "2.2.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬false, ¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ 2 ^ n ≤ p ^ n"
                },
                {
                    "args": "lte_trans",
                    "id": "2.2.4",
                    "prevs": [
                        "2.2.1",
                        "2.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬false, ¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ n < p ^ n"
                },
                {
                    "args": "not_le, ¬(p ^ n ≤ n)",
                    "id": "2.2.5",
                    "prevs": [
                        "2.2.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬false, ¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ ¬(p ^ n ≤ n)"
                },
                {
                    "args": "conjI",
                    "id": "2.2.6",
                    "prevs": [
                        "2.2.5",
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬false, ¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ ¬(p ^ n ≤ n) ∧ ¬(n = 0)"
                },
                {
                    "args": "de_morgan_thm2, ¬(p ^ n ≤ n ∨ n = 0)",
                    "id": "2.2.7",
                    "prevs": [
                        "2.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬false, ¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ ¬(p ^ n ≤ n ∨ n = 0)"
                },
                {
                    "args": "",
                    "id": "2.2.8",
                    "prevs": [
                        "2.2.0",
                        "2.2.7"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ ¬false ⟶ ¬(p ^ n ≤ n ∨ n = 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), divides (p ^ n) n, 2 ≤ p ⊢ false"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 2 ≤ p ⊢ divides (p ^ n) n ⟶ false"
                },
                {
                    "args": "negI",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ¬(divides (p ^ n) n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 2 ≤ p ⟶ ¬(divides (p ^ n) n)"
                }
            ],
            "prop": "¬(n = 0) ⟶ 2 ≤ p ⟶ ¬(divides (p ^ n) n)",
            "steps": [
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "negI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.0"
                    ],
                    "goal_id": "2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "de_morgan_thm2"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "param_m": "(2::nat) ^ n",
                    "theorem": "lte_trans"
                },
                {
                    "goal_id": "2.2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_pow2_refl"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "2.2.2",
                    "method_name": "apply_forward_step",
                    "theorem": "le_1_2"
                },
                {
                    "goal_id": "2.2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_mono_le_imp"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "factorization_index",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "2 ≤ p",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "2 ≤ p ⊢ 2 ≤ p"
                },
                {
                    "args": "∀a. ∀b. (¬a ⟶ ¬b) ⟷ (b ⟶ a)",
                    "id": "2",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a. ∀b. (¬a ⟶ ¬b) ⟷ (b ⟶ a)"
                },
                {
                    "args": "divides_1, {x: n}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides 1 n"
                },
                {
                    "args": "nat_nat_power_def_1, divides (p ^ (0::nat)) n",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), 2 ≤ p ⊢ divides (p ^ (0::nat)) n"
                },
                {
                    "args": "exI, {P: λx::nat. divides (p ^ x) n, a: (0::nat)}",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∃a1::nat. divides (p ^ a1) n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∀x. divides (p ^ x) n ⟶ x ≤ n"
                },
                {
                    "args": "x, nat",
                    "id": "6.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "divides (p ^ x) n",
                    "id": "6.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides (p ^ x) n ⊢ divides (p ^ x) n"
                },
                {
                    "args": "divides_le",
                    "id": "6.2",
                    "prevs": [
                        "6.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides (p ^ x) n ⊢ p ^ x ≤ n ∨ n = 0"
                },
                {
                    "args": "",
                    "id": "6.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p ⊢ p ^ x ≤ n ⟶ x ≤ n"
                },
                {
                    "args": "p ^ x ≤ n",
                    "id": "6.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ^ x ≤ n ⊢ p ^ x ≤ n"
                },
                {
                    "args": "lt_pow2_refl, {n: x}",
                    "id": "6.3.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ x < 2 ^ x"
                },
                {
                    "args": "lt_imp_le",
                    "id": "6.3.2",
                    "prevs": [
                        "6.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p, p ^ x ≤ n ⊢ x ≤ 2 ^ x"
                },
                {
                    "args": "exp_mono_le_imp, {n: x, x: (2::nat), y: p}",
                    "id": "6.3.3",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p, p ^ x ≤ n ⊢ 2 ^ x ≤ p ^ x"
                },
                {
                    "args": "less_eq_trans",
                    "id": "6.3.4",
                    "prevs": [
                        "6.3.3",
                        "6.3.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p, p ^ x ≤ n ⊢ 2 ^ x ≤ n"
                },
                {
                    "args": "less_eq_trans",
                    "id": "6.3.5",
                    "prevs": [
                        "6.3.2",
                        "6.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p, p ^ x ≤ n ⊢ x ≤ n"
                },
                {
                    "args": "",
                    "id": "6.3.6",
                    "prevs": [
                        "6.3.0",
                        "6.3.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p ⊢ p ^ x ≤ n ⟶ x ≤ n"
                },
                {
                    "args": "",
                    "id": "6.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p ⊢ n = 0 ⟶ x ≤ n"
                },
                {
                    "args": "n = 0",
                    "id": "6.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "negE_gen, {A: n = 0, C: x ≤ n}",
                    "id": "6.4.1",
                    "prevs": [
                        "0",
                        "6.4.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, ¬(n = 0) ⊢ x ≤ n"
                },
                {
                    "args": "",
                    "id": "6.4.2",
                    "prevs": [
                        "6.4.0",
                        "6.4.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p ⊢ n = 0 ⟶ x ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "6.5",
                    "prevs": [
                        "6.2",
                        "6.3",
                        "6.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), divides (p ^ x) n, 2 ≤ p ⊢ x ≤ n"
                },
                {
                    "args": "",
                    "id": "6.6",
                    "prevs": [
                        "6.0",
                        "6.1",
                        "6.5"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∀x. divides (p ^ x) n ⟶ x ≤ n"
                },
                {
                    "args": "exI, {P: λM::nat. ∀x. divides (p ^ x) n ⟶ x ≤ M, a: n}",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∃a1::nat. ∀x. divides (p ^ x) n ⟶ x ≤ a1"
                },
                {
                    "args": "conjI",
                    "id": "8",
                    "prevs": [
                        "5",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), 2 ≤ p ⊢ (∃x::nat. divides (p ^ x) n) ∧ (∃M::nat. ∀x. divides (p ^ x) n ⟶ x ≤ M)"
                },
                {
                    "args": "nat_MAX, ∃k::nat. divides (p ^ k) n ∧ (∀l. divides (p ^ l) n ⟶ l ≤ k)",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∃k::nat. divides (p ^ k) n ∧ (∀l. divides (p ^ l) n ⟶ l ≤ k)"
                },
                {
                    "args": "∃k::nat. divides (p ^ k) n ∧ (∀l. ¬(l ≤ k) ⟶ ¬(divides (p ^ l) n))",
                    "id": "10",
                    "prevs": [
                        "2",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∃k::nat. divides (p ^ k) n ∧ (∀l. ¬(l ≤ k) ⟶ ¬(divides (p ^ l) n))"
                },
                {
                    "args": "not_le, ∃k::nat. divides (p ^ k) n ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) n))",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(n = 0), 2 ≤ p ⊢ ∃k::nat. divides (p ^ k) n ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) n))"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [
                        "0",
                        "1",
                        "11"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ 2 ≤ p ⟶ (∃k::nat. divides (p ^ k) n ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) n)))"
                }
            ],
            "prop": [
                "¬(n = 0) ",
                "⟶ 2 ≤ p ⟶ (∃k::nat. divides (p ^ k) n ∧ (∀l. k < l ⟶ ¬(divides (p ^ l) n)))"
            ],
            "steps": [
                {
                    "goal": "!a. !b. (~a --> ~b) <--> (b --> a)",
                    "goal_id": "2",
                    "method_name": "cut"
                },
                {
                    "goal_id": "2",
                    "method_name": "z3"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "not_le"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "nat_MAX"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_1"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_1"
                },
                {
                    "goal_id": "6",
                    "method_name": "inst_exists_goal",
                    "s": "n"
                },
                {
                    "goal_id": "6",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "6.1"
                    ],
                    "goal_id": "6.2",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "6.2"
                    ],
                    "goal_id": "6.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "6.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "6.3.1",
                    "method_name": "apply_backward_step",
                    "param_m": "(2::nat) ^ x",
                    "theorem": "less_eq_trans"
                },
                {
                    "goal_id": "6.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "goal_id": "6.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "lt_pow2_refl"
                },
                {
                    "goal_id": "6.3.3",
                    "method_name": "apply_backward_step",
                    "param_m": "p ^ x",
                    "theorem": "less_eq_trans"
                },
                {
                    "goal_id": "6.3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "exp_mono_le_imp"
                },
                {
                    "goal_id": "6.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0",
                        "6.4.0"
                    ],
                    "goal_id": "6.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_fact",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "1 ≤ p",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "1 ≤ p ⊢ 1 ≤ p"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 ≤ p ⊢ p ≤ 0 ⟶ divides p (fact 0)"
                },
                {
                    "args": "p ≤ 0",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ≤ 0 ⊢ p ≤ 0"
                },
                {
                    "args": "nat_less_eq_def_1",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "p ≤ 0 ⊢ p = 0"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [
                        "1.1",
                        "0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "p ≤ 0, 1 ≤ p ⊢ (1::nat) ≤ 0"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "p ≤ 0, 1 ≤ p ⊢ ¬(divides p (fact 0)) ⟶ ¬((1::nat) ≤ 0)"
                },
                {
                    "args": "¬(divides p (fact 0))",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(divides p (fact 0)) ⊢ ¬(divides p (fact 0))"
                },
                {
                    "args": "¬((1::nat) = 0)",
                    "id": "1.3.1",
                    "prevs": [],
                    "rule": "nat_const_ineq",
                    "th": "⊢ ¬((1::nat) = 0)"
                },
                {
                    "args": "le_1_1",
                    "id": "1.3.2",
                    "prevs": [
                        "1.3.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "p ≤ 0, 1 ≤ p, ¬(divides p (fact 0)) ⊢ (0::nat) < 1"
                },
                {
                    "args": "not_le, ¬((1::nat) ≤ 0)",
                    "id": "1.3.3",
                    "prevs": [
                        "1.3.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "p ≤ 0, 1 ≤ p, ¬(divides p (fact 0)) ⊢ ¬((1::nat) ≤ 0)"
                },
                {
                    "args": "",
                    "id": "1.3.4",
                    "prevs": [
                        "1.3.0",
                        "1.3.3"
                    ],
                    "rule": "intros",
                    "th": "p ≤ 0, 1 ≤ p ⊢ ¬(divides p (fact 0)) ⟶ ¬((1::nat) ≤ 0)"
                },
                {
                    "args": "contrapositive",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "p ≤ 0, 1 ≤ p ⊢ divides p (fact 0)"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "1 ≤ p ⊢ p ≤ 0 ⟶ divides p (fact 0)"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 ≤ p ⊢ ∀n. (p ≤ n ⟶ divides p (fact n)) ⟶ p ≤ Suc n ⟶ divides p (fact (Suc n))"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "p ≤ n ⟶ divides p (fact n)",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ≤ n ⟶ divides p (fact n) ⊢ p ≤ n ⟶ divides p (fact n)"
                },
                {
                    "args": "p ≤ Suc n",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ≤ Suc n ⊢ p ≤ Suc n"
                },
                {
                    "args": "nat_less_eq_def_2",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "p ≤ Suc n ⊢ p = Suc n ∨ p ≤ n"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ p = Suc n ⟶ divides p (Suc n * fact n)"
                },
                {
                    "args": "p = Suc n",
                    "id": "2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p = Suc n ⊢ p = Suc n"
                },
                {
                    "args": "divides_self, {n: Suc n}",
                    "id": "2.4.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (Suc n) (Suc n)"
                },
                {
                    "args": "divides_rmul, {a: Suc n, d: Suc n, x: fact n}",
                    "id": "2.4.2",
                    "prevs": [
                        "2.4.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "1 ≤ p, p = Suc n, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ divides (Suc n) (Suc n * fact n)"
                },
                {
                    "args": "divides p (Suc n * fact n)",
                    "id": "2.4.3",
                    "prevs": [
                        "2.4.0",
                        "2.4.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "1 ≤ p, p = Suc n, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ divides p (Suc n * fact n)"
                },
                {
                    "args": "",
                    "id": "2.4.4",
                    "prevs": [
                        "2.4.0",
                        "2.4.3"
                    ],
                    "rule": "intros",
                    "th": "1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ p = Suc n ⟶ divides p (Suc n * fact n)"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ p ≤ n ⟶ divides p (Suc n * fact n)"
                },
                {
                    "args": "p ≤ n",
                    "id": "2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "p ≤ n ⊢ p ≤ n"
                },
                {
                    "args": "",
                    "id": "2.5.1",
                    "prevs": [
                        "2.1",
                        "2.5.0"
                    ],
                    "rule": "apply_fact",
                    "th": "p ≤ n, 1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ divides p (fact n)"
                },
                {
                    "args": "divides_lmul, {a: fact n, d: p, x: Suc n}",
                    "id": "2.5.2",
                    "prevs": [
                        "2.5.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "p ≤ n, 1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ divides p (Suc n * fact n)"
                },
                {
                    "args": "",
                    "id": "2.5.3",
                    "prevs": [
                        "2.5.0",
                        "2.5.2"
                    ],
                    "rule": "intros",
                    "th": "1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ p ≤ n ⟶ divides p (Suc n * fact n)"
                },
                {
                    "args": "disjE",
                    "id": "2.6",
                    "prevs": [
                        "2.3",
                        "2.4",
                        "2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ divides p (Suc n * fact n)"
                },
                {
                    "args": "fact_def_2, divides p (fact (Suc n))",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "1 ≤ p, p ≤ Suc n, p ≤ n ⟶ divides p (fact n) ⊢ divides p (fact (Suc n))"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "1 ≤ p ⊢ ∀n. (p ≤ n ⟶ divides p (fact n)) ⟶ p ≤ Suc n ⟶ divides p (fact (Suc n))"
                },
                {
                    "args": "nat_induct, {P: λn. p ≤ n ⟶ divides p (fact n), x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "1 ≤ p ⊢ p ≤ n ⟶ divides p (fact n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ 1 ≤ p ⟶ p ≤ n ⟶ divides p (fact n)"
                }
            ],
            "prop": "1 ≤ p ⟶ p ≤ n ⟶ divides p (fact n)",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_1"
                },
                {
                    "fact_ids": [
                        "1.1",
                        "0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "1.2"
                    ],
                    "goal_id": "1.3",
                    "method_name": "apply_backward_step",
                    "theorem": "contrapositive"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "not_le"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_1"
                },
                {
                    "goal_id": "1.3.1",
                    "method_name": "nat_const_ineq"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_less_eq_def_2"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "fact_def_2"
                },
                {
                    "fact_ids": [
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "2.4.0"
                    ],
                    "goal_id": "2.4.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                },
                {
                    "goal_id": "2.4.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "2.5",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "2.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_lmul"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.5.1",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "p": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_2",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "even_exists, (∃k. n = 2 * k) ⟷ even n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (∃k. n = 2 * k) ⟷ even n"
                },
                {
                    "args": "divides_def, divides 2 n ⟷ even n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides 2 n ⟷ even n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides 2 n ⟷ even n"
                }
            ],
            "prop": "divides 2 n ⟷ even n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "even_exists"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "divides_rexp_Suc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides x y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides x y ⊢ divides x y"
                },
                {
                    "args": "divides_rmul, {a: y, d: x, x: y ^ n}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides x y ⊢ divides x (y * y ^ n)"
                },
                {
                    "args": "nat_nat_power_def_2, divides x (y ^ Suc n)",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides x y ⊢ divides x (y ^ Suc n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "0",
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides x y ⟶ divides x (y ^ Suc n)"
                }
            ],
            "prop": "divides x y ⟶ divides x (y ^ Suc n)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_nat_power_def_2"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rmul"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "divides_rexp",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides x y",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides x y ⊢ divides x y"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides x y ⊢ ¬((0::nat) = 0) ⟶ divides x (y ^ (0::nat))"
                },
                {
                    "args": "¬((0::nat) = 0)",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬((0::nat) = 0) ⊢ ¬((0::nat) = 0)"
                },
                {
                    "args": "eq_refl, {x: (0::nat)}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (0::nat) = 0"
                },
                {
                    "args": "negE_gen, {A: (0::nat) = 0, C: divides x (y ^ (0::nat))}",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides x y, ¬((0::nat) = 0) ⊢ divides x (y ^ (0::nat))"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [
                        "1.0",
                        "1.2"
                    ],
                    "rule": "intros",
                    "th": "divides x y ⊢ ¬((0::nat) = 0) ⟶ divides x (y ^ (0::nat))"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "divides x y ⊢ ∀n. (¬(n = 0) ⟶ divides x (y ^ n)) ⟶ ¬(Suc n = 0) ⟶ divides x (y ^ Suc n)"
                },
                {
                    "args": "n, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "¬(n = 0) ⟶ divides x (y ^ n)",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⟶ divides x (y ^ n) ⊢ ¬(n = 0) ⟶ divides x (y ^ n)"
                },
                {
                    "args": "¬(Suc n = 0)",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(Suc n = 0) ⊢ ¬(Suc n = 0)"
                },
                {
                    "args": "divides_rexp_Suc, {n: n, x: x, y: y}",
                    "id": "2.3",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides x y, ¬(Suc n = 0), ¬(n = 0) ⟶ divides x (y ^ n) ⊢ divides x (y ^ Suc n)"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "divides x y ⊢ ∀n. (¬(n = 0) ⟶ divides x (y ^ n)) ⟶ ¬(Suc n = 0) ⟶ divides x (y ^ Suc n)"
                },
                {
                    "args": "nat_induct, {P: λn::nat. ¬(n = 0) ⟶ divides x (y ^ n), x: n}",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides x y ⊢ ¬(n = 0) ⟶ divides x (y ^ n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides x y ⟶ ¬(n = 0) ⟶ divides x (y ^ n)"
                }
            ],
            "prop": "divides x y ⟶ ¬(n = 0) ⟶ divides x (y ^ n)",
            "steps": [
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "revert_intro"
                },
                {
                    "goal_id": "1",
                    "method_name": "induction",
                    "theorem": "nat_induct",
                    "var": "n"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_rexp_Suc"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "finite_divisors",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "finite_natseg_le, {n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ finite ({m. m ≤ n})"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ ∀x. x ∈ {d. divides d n} ⟶ x ∈ {d. d ≤ n}"
                },
                {
                    "args": "d, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "d ∈ {d1. divides d1 n}",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d ∈ {d1. divides d1 n} ⊢ d ∈ {d1. divides d1 n}"
                },
                {
                    "args": "member_collect",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "d ∈ {d1. divides d1 n} ⊢ divides d n"
                },
                {
                    "args": "divides_le",
                    "id": "2.3",
                    "prevs": [
                        "2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "d ∈ {d1. divides d1 n} ⊢ d ≤ n ∨ n = 0"
                },
                {
                    "args": "d ≤ n ⟶ d ≤ n",
                    "id": "2.4",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ d ≤ n ⟶ d ≤ n"
                },
                {
                    "args": "",
                    "id": "2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0), d ∈ {d1. divides d1 n} ⊢ n = 0 ⟶ d ≤ n"
                },
                {
                    "args": "n = 0",
                    "id": "2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = 0 ⊢ n = 0"
                },
                {
                    "args": "negE_gen, {A: n = 0, C: d ≤ n}",
                    "id": "2.5.1",
                    "prevs": [
                        "0",
                        "2.5.0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "n = 0, ¬(n = 0) ⊢ d ≤ n"
                },
                {
                    "args": "",
                    "id": "2.5.2",
                    "prevs": [
                        "2.5.0",
                        "2.5.1"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0), d ∈ {d1. divides d1 n} ⊢ n = 0 ⟶ d ≤ n"
                },
                {
                    "args": "disjE",
                    "id": "2.6",
                    "prevs": [
                        "2.3",
                        "2.4",
                        "2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0), d ∈ {d1. divides d1 n} ⊢ d ≤ n"
                },
                {
                    "args": "member_collect, d ∈ {d1. d1 ≤ n}",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0), d ∈ {d1. divides d1 n} ⊢ d ∈ {d1. d1 ≤ n}"
                },
                {
                    "args": "",
                    "id": "2.8",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.7"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ ∀d. d ∈ {d1. divides d1 n} ⟶ d ∈ {d1. d1 ≤ n}"
                },
                {
                    "args": "subsetI",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ {d. divides d n} ⊆ {d. d ≤ n}"
                },
                {
                    "args": "finite_subset",
                    "id": "4",
                    "prevs": [
                        "1",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ finite ({d. divides d n})"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "0",
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ finite ({d. divides d n})"
                }
            ],
            "prop": "¬(n = 0) ⟶ finite ({d. divides d n})",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "param_t": "{d. d <= n}",
                    "theorem": "finite_subset"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_natseg_le"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "subsetI"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "member_collect"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "member_collect"
                },
                {
                    "fact_ids": [
                        "2.2"
                    ],
                    "goal_id": "2.3",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "2.3"
                    ],
                    "goal_id": "2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "2.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0",
                        "2.5.0"
                    ],
                    "goal_id": "2.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "negE_gen"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "finite_special_divisors",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(n = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(n = 0) ⊢ ¬(n = 0)"
                },
                {
                    "args": "finite_divisors",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ finite ({d. divides d n})"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(n = 0) ⊢ ∀x. P x ∧ divides x n ⟶ divides x n"
                },
                {
                    "args": "x, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "P x ∧ divides x n",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "P x ∧ divides x n ⊢ P x ∧ divides x n"
                },
                {
                    "args": "conjD2",
                    "id": "2.2",
                    "prevs": [
                        "2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "P x ∧ divides x n ⊢ divides x n"
                },
                {
                    "args": "",
                    "id": "2.3",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2"
                    ],
                    "rule": "intros",
                    "th": "¬(n = 0) ⊢ ∀x. P x ∧ divides x n ⟶ divides x n"
                },
                {
                    "args": "member_collect, ∀x. x ∈ {d. P d ∧ divides d n} ⟶ x ∈ {d. divides d n}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "¬(n = 0) ⊢ ∀x. x ∈ {d. P d ∧ divides d n} ⟶ x ∈ {d. divides d n}"
                },
                {
                    "args": "subsetI",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ {d. P d ∧ divides d n} ⊆ {d. divides d n}"
                },
                {
                    "args": "finite_subset",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(n = 0) ⊢ finite ({d. P d ∧ divides d n})"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(n = 0) ⟶ finite ({d. P d ∧ divides d n})"
                }
            ],
            "prop": "¬(n = 0) ⟶ finite ({d. P d ∧ divides d n})",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "param_t": "{d. divides d n}",
                    "theorem": "finite_subset"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "finite_divisors"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "subsetI"
                },
                {
                    "goal_id": "2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "member_collect"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "x"
                },
                {
                    "fact_ids": [
                        "2.1"
                    ],
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "nat ⇒ bool",
                "n": "nat"
            }
        },
        {
            "name": "divides_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = n ⟶ (∀d. divides d m ⟷ divides d n)"
                },
                {
                    "args": "m = n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n ⊢ ∀d. divides d m ⟷ divides d n"
                },
                {
                    "args": "d, nat",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "divides d m ⟷ divides d n",
                    "id": "0.1.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n ⊢ divides d m ⟷ divides d n"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "m = n ⊢ ∀d. divides d m ⟷ divides d n"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = n ⟶ (∀d. divides d m ⟷ divides d n)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∀d. divides d m ⟷ divides d n) ⟶ m = n"
                },
                {
                    "args": "∀d. divides d m ⟷ divides d n",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀d. divides d m ⟷ divides d n ⊢ ∀d. divides d m ⟷ divides d n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀d. divides d m ⟷ divides d n ⊢ ∀d. divides d n ⟷ divides d m"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "divides m n",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d. divides d m ⟷ divides d n ⊢ divides m n"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "divides n m",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d. divides d m ⟷ divides d n ⊢ divides n m"
                },
                {
                    "args": "divides_antisym",
                    "id": "1.6",
                    "prevs": [
                        "1.3",
                        "1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀d. divides d m ⟷ divides d n ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀d. divides d m ⟷ divides d n) ⟶ m = n"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m = n ⟷ (∀d. divides d m ⟷ divides d n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = n ⟷ (∀d. divides d m ⟷ divides d n)"
                }
            ],
            "prop": "m = n ⟷ (∀d. divides d m ⟷ divides d n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_antisym"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.1"
                    ],
                    "goal_id": "1.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "multiples_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ m = n ⟶ (∀d. divides m d ⟷ divides n d)"
                },
                {
                    "args": "m = n",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = n ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "m = n ⊢ ∀d. divides m d ⟷ divides n d"
                },
                {
                    "args": "d, nat",
                    "id": "0.1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "divides m d ⟷ divides n d",
                    "id": "0.1.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "m = n ⊢ divides m d ⟷ divides n d"
                },
                {
                    "args": "",
                    "id": "0.1.2",
                    "prevs": [
                        "0.1.0",
                        "0.1.1"
                    ],
                    "rule": "intros",
                    "th": "m = n ⊢ ∀d. divides m d ⟷ divides n d"
                },
                {
                    "args": "",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = n ⟶ (∀d. divides m d ⟷ divides n d)"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∀d. divides m d ⟷ divides n d) ⟶ m = n"
                },
                {
                    "args": "∀d. divides m d ⟷ divides n d",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀d. divides m d ⟷ divides n d ⊢ ∀d. divides m d ⟷ divides n d"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "divides m n",
                    "id": "1.2",
                    "prevs": [
                        "1.0",
                        "1.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d. divides m d ⟷ divides n d ⊢ divides m n"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1.3",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀d. divides m d ⟷ divides n d ⊢ ∀d. divides n d ⟷ divides m d"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "divides n m",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d. divides m d ⟷ divides n d ⊢ divides n m"
                },
                {
                    "args": "divides_antisym",
                    "id": "1.6",
                    "prevs": [
                        "1.2",
                        "1.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀d. divides m d ⟷ divides n d ⊢ m = n"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀d. divides m d ⟷ divides n d) ⟶ m = n"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ m = n ⟷ (∀d. divides m d ⟷ divides n d)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ m = n ⟷ (∀d. divides m d ⟷ divides n d)"
                }
            ],
            "prop": "m = n ⟷ (∀d. divides m d ⟷ divides n d)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "introduction",
                    "names": "d"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_antisym"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1.3"
                    ],
                    "goal_id": "1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward",
                "hint_backward1"
            ],
            "name": "ind_euclid",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀a. ∀b. P a b ⟷ P b a",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀a. ∀b. P a b ⟷ P b a ⊢ ∀a. ∀b. P a b ⟷ P b a"
                },
                {
                    "args": "∀a. P a 0",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀a. P a 0 ⊢ ∀a. P a 0"
                },
                {
                    "args": "∀a. ∀b. P a b ⟶ P a (a + b)",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀a. ∀b. P a b ⟶ P a (a + b)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀n. (∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b)) ⟶ (∀a. ∀b. a + b = n ⟶ P a b)"
                },
                {
                    "args": "n, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR n"
                },
                {
                    "args": "∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b)",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b)"
                },
                {
                    "args": "",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ ∀a. ∀b. a + b = n ⟶ P a b"
                },
                {
                    "args": "a, nat",
                    "id": "3.2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "b, nat",
                    "id": "3.2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "a + b = n",
                    "id": "3.2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a + b = n ⊢ a + b = n"
                },
                {
                    "args": "lt_cases, {m: a, n: b}",
                    "id": "3.2.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ a < b ∨ b < a ∨ a = b"
                },
                {
                    "args": "",
                    "id": "3.2.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a < b ⟶ P a b"
                },
                {
                    "args": "a < b",
                    "id": "3.2.4.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a < b ⊢ a < b"
                },
                {
                    "args": "lt_imp_le",
                    "id": "3.2.4.1",
                    "prevs": [
                        "3.2.4.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "a < b ⊢ a ≤ b"
                },
                {
                    "args": "sub_add",
                    "id": "3.2.4.2",
                    "prevs": [
                        "3.2.4.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "a < b ⊢ b - a + a = b"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.2.4.3",
                    "prevs": [
                        "3.2.4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "a < b ⊢ b = b - a + a"
                },
                {
                    "args": "a < b ⟶ a = 0 ∨ a + (b - a) < a + b",
                    "id": "3.2.4.4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ a < b ⟶ a = 0 ∨ a + (b - a) < a + b"
                },
                {
                    "args": "",
                    "id": "3.2.4.5",
                    "prevs": [
                        "3.2.4.4",
                        "3.2.4.0"
                    ],
                    "rule": "apply_fact",
                    "th": "a < b ⊢ a = 0 ∨ a + (b - a) < a + b"
                },
                {
                    "args": "",
                    "id": "3.2.4.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a = 0 ⟶ P a (b - a + a)"
                },
                {
                    "args": "a = 0",
                    "id": "3.2.4.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = 0 ⊢ a = 0"
                },
                {
                    "args": "b - 0 + 0",
                    "id": "3.2.4.6.1",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "∀a. P a 0 ⊢ P (b - 0 + 0) 0"
                },
                {
                    "args": "P 0 (b - 0 + 0)",
                    "id": "3.2.4.6.2",
                    "prevs": [
                        "0",
                        "3.2.4.6.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a = 0, a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P 0 (b - 0 + 0)"
                },
                {
                    "args": "P a (b - a + a)",
                    "id": "3.2.4.6.3",
                    "prevs": [
                        "3.2.4.6.0",
                        "3.2.4.6.2"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a = 0, a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a (b - a + a)"
                },
                {
                    "args": "",
                    "id": "3.2.4.6.4",
                    "prevs": [
                        "3.2.4.6.0",
                        "3.2.4.6.3"
                    ],
                    "rule": "intros",
                    "th": "a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a = 0 ⟶ P a (b - a + a)"
                },
                {
                    "args": "",
                    "id": "3.2.4.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a + (b - a) < a + b ⟶ P a (b - a + a)"
                },
                {
                    "args": "a + (b - a) < a + b",
                    "id": "3.2.4.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a + (b - a) < a + b ⊢ a + (b - a) < a + b"
                },
                {
                    "args": "",
                    "id": "3.2.4.7.1",
                    "prevs": [
                        "3.2.2",
                        "3.2.4.7.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "a + b = n, a + (b - a) < a + b ⊢ a + (b - a) < n"
                },
                {
                    "args": "",
                    "id": "3.2.4.7.2",
                    "prevs": [
                        "3.1",
                        "3.2.4.7.1"
                    ],
                    "rule": "apply_fact",
                    "th": "a + b = n, a + (b - a) < a + b, ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ ∀a1. ∀b1. a1 + b1 = a + (b - a) ⟶ P a1 b1"
                },
                {
                    "args": "eq_refl, {x: a + (b - a)}",
                    "id": "3.2.4.7.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ a + (b - a) = a + (b - a)"
                },
                {
                    "args": "",
                    "id": "3.2.4.7.4",
                    "prevs": [
                        "3.2.4.7.2",
                        "3.2.4.7.3"
                    ],
                    "rule": "apply_fact",
                    "th": "a < b, ∀a. P a 0, a + b = n, a + (b - a) < a + b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a (b - a)"
                },
                {
                    "args": "a, b - a",
                    "id": "3.2.4.7.5",
                    "prevs": [
                        "2",
                        "3.2.4.7.4"
                    ],
                    "rule": "apply_fact_for",
                    "th": "a < b, ∀a. P a 0, a + b = n, a + (b - a) < a + b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a (a + (b - a))"
                },
                {
                    "args": "add_comm, P a (b - a + a)",
                    "id": "3.2.4.7.6",
                    "prevs": [
                        "3.2.4.7.5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a < b, ∀a. P a 0, a + b = n, a + (b - a) < a + b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a (b - a + a)"
                },
                {
                    "args": "",
                    "id": "3.2.4.7.7",
                    "prevs": [
                        "3.2.4.7.0",
                        "3.2.4.7.6"
                    ],
                    "rule": "intros",
                    "th": "a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a + (b - a) < a + b ⟶ P a (b - a + a)"
                },
                {
                    "args": "disjE",
                    "id": "3.2.4.8",
                    "prevs": [
                        "3.2.4.5",
                        "3.2.4.6",
                        "3.2.4.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a (b - a + a)"
                },
                {
                    "args": "P a b",
                    "id": "3.2.4.9",
                    "prevs": [
                        "3.2.4.3",
                        "3.2.4.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a < b, ∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.4.10",
                    "prevs": [
                        "3.2.4.0",
                        "3.2.4.9"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a < b ⟶ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b < a ∨ a = b ⟶ P a b"
                },
                {
                    "args": "b < a ∨ a = b",
                    "id": "3.2.5.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b < a ∨ a = b ⊢ b < a ∨ a = b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b < a ⟶ P a b"
                },
                {
                    "args": "b < a",
                    "id": "3.2.5.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b < a ⊢ b < a"
                },
                {
                    "args": "lt_imp_le",
                    "id": "3.2.5.1.1",
                    "prevs": [
                        "3.2.5.1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "b < a ⊢ b ≤ a"
                },
                {
                    "args": "sub_add",
                    "id": "3.2.5.1.2",
                    "prevs": [
                        "3.2.5.1.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "b < a ⊢ a - b + b = a"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "3.2.5.1.3",
                    "prevs": [
                        "3.2.5.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b < a ⊢ a = a - b + b"
                },
                {
                    "args": "b < a ⟶ b = 0 ∨ b + (a - b) < b + a",
                    "id": "3.2.5.1.4",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ b < a ⟶ b = 0 ∨ b + (a - b) < b + a"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.5",
                    "prevs": [
                        "3.2.5.1.4",
                        "3.2.5.1.0"
                    ],
                    "rule": "apply_fact",
                    "th": "b < a ⊢ b = 0 ∨ b + (a - b) < b + a"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.6",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b = 0 ⟶ P (a - b + b) b"
                },
                {
                    "args": "b = 0",
                    "id": "3.2.5.1.6.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b = 0 ⊢ b = 0"
                },
                {
                    "args": "a - 0 + 0",
                    "id": "3.2.5.1.6.1",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "∀a. P a 0 ⊢ P (a - 0 + 0) 0"
                },
                {
                    "args": "P (a - b + b) b",
                    "id": "3.2.5.1.6.2",
                    "prevs": [
                        "3.2.5.1.6.0",
                        "3.2.5.1.6.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b = 0, b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P (a - b + b) b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.6.3",
                    "prevs": [
                        "3.2.5.1.6.0",
                        "3.2.5.1.6.2"
                    ],
                    "rule": "intros",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b = 0 ⟶ P (a - b + b) b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b + (a - b) < b + a ⟶ P (a - b + b) b"
                },
                {
                    "args": "b + (a - b) < b + a",
                    "id": "3.2.5.1.7.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b + (a - b) < b + a ⊢ b + (a - b) < b + a"
                },
                {
                    "args": "add_comm",
                    "id": "3.2.5.1.7.1",
                    "prevs": [
                        "3.2.5.1.7.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b + (a - b) < b + a ⊢ a - b + b < a + b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.7.2",
                    "prevs": [
                        "3.2.2",
                        "3.2.5.1.7.1"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "a + b = n, b + (a - b) < b + a ⊢ a - b + b < n"
                },
                {
                    "args": "add_comm",
                    "id": "3.2.5.1.7.3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀a. ∀b. P a b ⟶ P a (b + a)"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.7.4",
                    "prevs": [
                        "3.1",
                        "3.2.5.1.7.2"
                    ],
                    "rule": "apply_fact",
                    "th": "a + b = n, b + (a - b) < b + a, ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ ∀a1. ∀b1. a1 + b1 = a - b + b ⟶ P a1 b1"
                },
                {
                    "args": "b + (a - b) = a - b + b",
                    "id": "3.2.5.1.7.5",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ b + (a - b) = a - b + b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.7.6",
                    "prevs": [
                        "3.2.5.1.7.4",
                        "3.2.5.1.7.5"
                    ],
                    "rule": "apply_fact",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, b + (a - b) < b + a, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P b (a - b)"
                },
                {
                    "args": "b, a - b",
                    "id": "3.2.5.1.7.7",
                    "prevs": [
                        "3.2.5.1.7.3",
                        "3.2.5.1.7.6"
                    ],
                    "rule": "apply_fact_for",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, b + (a - b) < b + a, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P b (a - b + b)"
                },
                {
                    "args": "P (a - b + b) b",
                    "id": "3.2.5.1.7.8",
                    "prevs": [
                        "0",
                        "3.2.5.1.7.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, b + (a - b) < b + a, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P (a - b + b) b"
                },
                {
                    "args": "add_comm, P (b + (a - b)) b",
                    "id": "3.2.5.1.7.9",
                    "prevs": [
                        "3.2.5.1.7.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, b + (a - b) < b + a, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P (b + (a - b)) b"
                },
                {
                    "args": "add_comm, P (a - b + b) b",
                    "id": "3.2.5.1.7.10",
                    "prevs": [
                        "3.2.5.1.7.9"
                    ],
                    "rule": "rewrite_goal",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, b + (a - b) < b + a, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P (a - b + b) b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.7.11",
                    "prevs": [
                        "3.2.5.1.7.0",
                        "3.2.5.1.7.10"
                    ],
                    "rule": "intros",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b + (a - b) < b + a ⟶ P (a - b + b) b"
                },
                {
                    "args": "disjE",
                    "id": "3.2.5.1.8",
                    "prevs": [
                        "3.2.5.1.5",
                        "3.2.5.1.6",
                        "3.2.5.1.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P (a - b + b) b"
                },
                {
                    "args": "P a b",
                    "id": "3.2.5.1.9",
                    "prevs": [
                        "3.2.5.1.3",
                        "3.2.5.1.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b < a, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.5.1.10",
                    "prevs": [
                        "3.2.5.1.0",
                        "3.2.5.1.9"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b < a ⟶ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.5.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a = b ⟶ P a b"
                },
                {
                    "args": "a = b",
                    "id": "3.2.5.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a = b ⊢ a = b"
                },
                {
                    "args": "add_0_right, b = b + 0",
                    "id": "3.2.5.2.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ b = b + 0"
                },
                {
                    "args": "b",
                    "id": "3.2.5.2.2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "apply_fact_for",
                    "th": "∀a. P a 0 ⊢ P b 0"
                },
                {
                    "args": "b, (0::nat)",
                    "id": "3.2.5.2.3",
                    "prevs": [
                        "2",
                        "3.2.5.2.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "a = b, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P b (b + 0)"
                },
                {
                    "args": "P a (b + 0)",
                    "id": "3.2.5.2.4",
                    "prevs": [
                        "3.2.5.2.0",
                        "3.2.5.2.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a = b, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a (b + 0)"
                },
                {
                    "args": "P a b",
                    "id": "3.2.5.2.5",
                    "prevs": [
                        "3.2.5.2.1",
                        "3.2.5.2.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a = b, ∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.5.2.6",
                    "prevs": [
                        "3.2.5.2.0",
                        "3.2.5.2.5"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ a = b ⟶ P a b"
                },
                {
                    "args": "disjE",
                    "id": "3.2.5.3",
                    "prevs": [
                        "3.2.5.0",
                        "3.2.5.1",
                        "3.2.5.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀a. P a 0, a + b = n, b < a ∨ a = b, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.5.4",
                    "prevs": [
                        "3.2.5.0",
                        "3.2.5.3"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ b < a ∨ a = b ⟶ P a b"
                },
                {
                    "args": "disjE",
                    "id": "3.2.6",
                    "prevs": [
                        "3.2.3",
                        "3.2.4",
                        "3.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀a. P a 0, a + b = n, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ P a b"
                },
                {
                    "args": "",
                    "id": "3.2.7",
                    "prevs": [
                        "3.2.0",
                        "3.2.1",
                        "3.2.2",
                        "3.2.6"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b), ∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b) ⊢ ∀a. ∀b. a + b = n ⟶ P a b"
                },
                {
                    "args": "",
                    "id": "3.3",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀n. (∀m. m < n ⟶ (∀a. ∀b. a + b = m ⟶ P a b)) ⟶ (∀a. ∀b. a + b = n ⟶ P a b)"
                },
                {
                    "args": "nat_WF",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀n. ∀a. ∀b. a + b = n ⟶ P a b"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀a. ∀b. P a b"
                },
                {
                    "args": "a, nat",
                    "id": "5.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "b, nat",
                    "id": "5.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "eq_refl, {x: a + b}",
                    "id": "5.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ a + b = a + b"
                },
                {
                    "args": "a + b, a, b",
                    "id": "5.3",
                    "prevs": [
                        "4",
                        "5.2"
                    ],
                    "rule": "apply_fact_for",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b) ⊢ P a b"
                },
                {
                    "args": "",
                    "id": "5.4",
                    "prevs": [
                        "5.0",
                        "5.1",
                        "5.3"
                    ],
                    "rule": "intros",
                    "th": "∀a. P a 0, ∀a. ∀b. P a b ⟷ P b a, ∀a. ∀b. P a b ⟶ P a (a + b) ⊢ ∀a. ∀b. P a b"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀a. ∀b. P a b ⟷ P b a) ⟶ (∀a. P a 0) ⟶ (∀a. ∀b. P a b ⟶ P a (a + b)) ⟶ (∀a. ∀b. P a b)"
                }
            ],
            "prop": [
                "(∀a. ∀b. P a b ⟷ P b a) ",
                "⟶ (∀a. P a 0) ⟶ (∀a. ∀b. P a b ⟶ P a (a + b)) ⟶ (∀a. ∀b. P a b)"
            ],
            "steps": [
                {
                    "goal": "!n. !a. !b. (a + b = n) --> P a b",
                    "goal_id": "3",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "nat_WF"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "n"
                },
                {
                    "goal_id": "3.2",
                    "method_name": "introduction",
                    "names": "a,b"
                },
                {
                    "goal_id": "3.2.3",
                    "method_name": "apply_forward_step",
                    "param_m": "a",
                    "param_n": "b",
                    "theorem": "lt_cases"
                },
                {
                    "fact_ids": [
                        "3.2.3"
                    ],
                    "goal_id": "3.2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.4",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.4.0"
                    ],
                    "goal_id": "3.2.4.1",
                    "method_name": "apply_forward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "fact_ids": [
                        "3.2.4.1"
                    ],
                    "goal_id": "3.2.4.2",
                    "method_name": "apply_forward_step",
                    "theorem": "sub_add"
                },
                {
                    "fact_ids": [
                        "3.2.4.2"
                    ],
                    "goal_id": "3.2.4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.2.4.3"
                    ],
                    "goal_id": "3.2.4.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "a < b ⟶ a = 0 ∨ a + (b - a) < a + b",
                    "goal_id": "3.2.4.4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.2.4.4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2.4.4",
                        "3.2.4.0"
                    ],
                    "goal_id": "3.2.4.5",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3.2.4.5"
                    ],
                    "goal_id": "3.2.4.6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.4.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.4.6.0"
                    ],
                    "goal_id": "3.2.4.6.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3.2.4.6.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.2.4.6.1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "3.2.4.7",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.4.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3.2.4.7.1",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "3.2.2",
                        "3.2.4.7.0"
                    ],
                    "goal_id": "3.2.4.7.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "3.1",
                        "3.2.4.7.1"
                    ],
                    "goal_id": "3.2.4.7.2",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3.2.4.7.2"
                    ],
                    "goal_id": "3.2.4.7.3",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "3.2.4.7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                },
                {
                    "goal_id": "3.2.5",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.5.0"
                    ],
                    "goal_id": "3.2.5.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.5.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.0"
                    ],
                    "goal_id": "3.2.5.1.1",
                    "method_name": "apply_forward_step",
                    "theorem": "lt_imp_le"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.1"
                    ],
                    "goal_id": "3.2.5.1.2",
                    "method_name": "apply_forward_step",
                    "theorem": "sub_add"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.2"
                    ],
                    "goal_id": "3.2.5.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.3"
                    ],
                    "goal_id": "3.2.5.1.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal": "b < a ⟶ b = 0 ∨ b + (a - b) < b + a",
                    "goal_id": "3.2.5.1.4",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.2.5.1.4",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.4",
                        "3.2.5.1.0"
                    ],
                    "goal_id": "3.2.5.1.5",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.5"
                    ],
                    "goal_id": "3.2.5.1.6",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "3.2.5.1.6",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.6.0"
                    ],
                    "goal_id": "3.2.5.1.6.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.2.5.1.6.1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "3.2.5.1.7",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "3.2.5.1.7.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.7.0"
                    ],
                    "goal_id": "3.2.5.1.7.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "3.2.2",
                        "3.2.5.1.7.1"
                    ],
                    "goal_id": "3.2.5.1.7.2",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "3.2.5.1.7.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3.2.5.1.7.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_comm"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "3.2.5.1.7.4",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.7.3"
                    ],
                    "goal_id": "3.2.5.1.7.4",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "3.1",
                        "3.2.5.1.7.2"
                    ],
                    "goal_id": "3.2.5.1.7.4",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "3.2.5.1.7.4"
                    ],
                    "goal_id": "3.2.5.1.7.5",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "3.2.5.1.7.5",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "3.2.5.2",
                    "method_name": "introduction"
                },
                {
                    "goal": "b = b + 0",
                    "goal_id": "3.2.5.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "3.2.5.2.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "fact_ids": [
                        "3.2.5.2.1"
                    ],
                    "goal_id": "3.2.5.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "3.2.5.2.0"
                    ],
                    "goal_id": "3.2.5.2.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "2"
                    ],
                    "goal_id": "3.2.5.2.2",
                    "method_name": "apply_prev"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "3.2.5.2.2",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "5",
                    "method_name": "introduction",
                    "names": "a, b"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5.2",
                    "method_name": "apply_prev",
                    "param_n": "a+b"
                },
                {
                    "goal_id": "5.2",
                    "method_name": "apply_backward_step",
                    "theorem": "eq_refl"
                }
            ],
            "ty": "thm",
            "vars": {
                "P": "nat ⇒ nat ⇒ bool"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "bezout_lemma",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "d, nat",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "conjD1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "6",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ∨ b * x = a * y + d"
                },
                {
                    "args": "conjD1",
                    "id": "7",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a"
                },
                {
                    "args": "conjD2",
                    "id": "8",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d b"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ⟶ (∃x1. ∃y1. (divides d a ∧ divides d (a + b)) ∧ (a * x1 = (a + b) * y1 + d ∨ (a + b) * x1 = a * y1 + d))"
                },
                {
                    "args": "a * x = b * y + d",
                    "id": "9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a * x = b * y + d ⊢ a * x = b * y + d"
                },
                {
                    "args": "divides_sum",
                    "id": "9.1",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d (a + b)"
                },
                {
                    "args": "conjI",
                    "id": "9.2",
                    "prevs": [
                        "7",
                        "9.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a ∧ divides d (a + b)"
                },
                {
                    "args": "b * y + d + a * y = (a + b) * y + d",
                    "id": "9.3",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ b * y + d + a * y = (a + b) * y + d"
                },
                {
                    "args": "a * x + a * y = (a + b) * y + d",
                    "id": "9.4",
                    "prevs": [
                        "9.0",
                        "9.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x + a * y = (a + b) * y + d"
                },
                {
                    "args": "distrib_l, a * (x + y) = (a + b) * y + d",
                    "id": "9.5",
                    "prevs": [
                        "9.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * (x + y) = (a + b) * y + d"
                },
                {
                    "args": "disjI1, {A: a * (x + y) = (a + b) * y + d, B: (a + b) * (x + y) = a * y + d}",
                    "id": "9.6",
                    "prevs": [
                        "9.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * (x + y) = (a + b) * y + d ∨ (a + b) * (x + y) = a * y + d"
                },
                {
                    "args": "conjI",
                    "id": "9.7",
                    "prevs": [
                        "9.2",
                        "9.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d (a + b)) ∧ (a * (x + y) = (a + b) * y + d ∨ (a + b) * (x + y) = a * y + d)"
                },
                {
                    "args": "exI, {P: λy1. (divides d a ∧ divides d (a + b)) ∧ (a * (x + y) = (a + b) * y1 + d ∨ (a + b) * (x + y) = a * y1 + d), a: y}",
                    "id": "9.8",
                    "prevs": [
                        "9.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d (a + b)) ∧ (a * (x + y) = (a + b) * a1 + d ∨ (a + b) * (x + y) = a * a1 + d)"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d), a: x + y}",
                    "id": "9.9",
                    "prevs": [
                        "9.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * a1 = (a + b) * y + d ∨ (a + b) * a1 = a * y + d)"
                },
                {
                    "args": "",
                    "id": "9.10",
                    "prevs": [
                        "9.0",
                        "9.9"
                    ],
                    "rule": "intros",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ⟶ (∃x1. ∃y1. (divides d a ∧ divides d (a + b)) ∧ (a * x1 = (a + b) * y1 + d ∨ (a + b) * x1 = a * y1 + d))"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ⟶ (∃x1. ∃y1. (divides d a ∧ divides d (a + b)) ∧ (a * x1 = (a + b) * y1 + d ∨ (a + b) * x1 = a * y1 + d))"
                },
                {
                    "args": "b * x = a * y + d",
                    "id": "10.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b * x = a * y + d ⊢ b * x = a * y + d"
                },
                {
                    "args": "divides_sum",
                    "id": "10.1",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d (a + b)"
                },
                {
                    "args": "conjI",
                    "id": "10.2",
                    "prevs": [
                        "7",
                        "10.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a ∧ divides d (a + b)"
                },
                {
                    "args": "a * x + (a * y + d) = a * (x + y) + d",
                    "id": "10.3",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ a * x + (a * y + d) = a * (x + y) + d"
                },
                {
                    "args": "a * x + b * x = a * (x + y) + d",
                    "id": "10.4",
                    "prevs": [
                        "10.0",
                        "10.3"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x + b * x = a * (x + y) + d"
                },
                {
                    "args": "distrib_r, (a + b) * x = a * (x + y) + d",
                    "id": "10.5",
                    "prevs": [
                        "10.4"
                    ],
                    "rule": "rewrite_goal",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (a + b) * x = a * (x + y) + d"
                },
                {
                    "args": "disjI2, {A: a * x = (a + b) * (x + y) + d, B: (a + b) * x = a * (x + y) + d}",
                    "id": "10.6",
                    "prevs": [
                        "10.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = (a + b) * (x + y) + d ∨ (a + b) * x = a * (x + y) + d"
                },
                {
                    "args": "conjI",
                    "id": "10.7",
                    "prevs": [
                        "10.2",
                        "10.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * (x + y) + d ∨ (a + b) * x = a * (x + y) + d)"
                },
                {
                    "args": "exI, {P: λy. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d), a: x + y}",
                    "id": "10.8",
                    "prevs": [
                        "10.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * a1 + d ∨ (a + b) * x = a * a1 + d)"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d), a: x}",
                    "id": "10.9",
                    "prevs": [
                        "10.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * a1 = (a + b) * y + d ∨ (a + b) * a1 = a * y + d)"
                },
                {
                    "args": "",
                    "id": "10.10",
                    "prevs": [
                        "10.0",
                        "10.9"
                    ],
                    "rule": "intros",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ⟶ (∃x1. ∃y1. (divides d a ∧ divides d (a + b)) ∧ (a * x1 = (a + b) * y1 + d ∨ (a + b) * x1 = a * y1 + d))"
                },
                {
                    "args": "disjE",
                    "id": "11",
                    "prevs": [
                        "6",
                        "9",
                        "10"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d)"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d), a: d}",
                    "id": "12",
                    "prevs": [
                        "11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 (a + b)) ∧ (a * x = (a + b) * y + a1 ∨ (a + b) * x = a * y + a1)"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "13",
                    "prevs": [
                        "0",
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d))"
                }
            ],
            "prop": [
                "(∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ",
                "⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ ",
                "          (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d))"
            ],
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "d,x,y"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "8",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "9",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "9",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "inst_exists_goal",
                    "s": "x+y"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_sum"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_l"
                },
                {
                    "fact_ids": [
                        "9.0"
                    ],
                    "goal_id": "9.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.3",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "10",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "inst_exists_goal",
                    "s": "x+y"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_sum"
                },
                {
                    "goal_id": "10.3",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "goal_id": "10.3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_r"
                },
                {
                    "fact_ids": [
                        "10.0"
                    ],
                    "goal_id": "10.3",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "10.3",
                    "method_name": "nat_norm"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "bezout_add",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "ind_euclid, {P: λa. λb. ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ (∀a. ∀b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟷ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d))) ⟶ (∀a. ∃d. ∃x. ∃y. (divides d a ∧ divides d 0) ∧ (a * x = 0 * y + d ∨ 0 * x = a * y + d)) ⟶ (∀a. ∀b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d))) ⟶ (∀a. ∀b. ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d))"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀a. ∀b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟷ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d))"
                },
                {
                    "args": "a, nat",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "b, nat",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d))"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "1.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "d, nat",
                    "id": "1.2.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "1.2.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "1.2.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "1.2.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.5",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.6",
                    "prevs": [
                        "1.2.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ∨ b * x = a * y + d"
                },
                {
                    "args": "conjD1",
                    "id": "1.2.7",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a"
                },
                {
                    "args": "conjD2",
                    "id": "1.2.8",
                    "prevs": [
                        "1.2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d b"
                },
                {
                    "args": "conjI",
                    "id": "1.2.9",
                    "prevs": [
                        "1.2.8",
                        "1.2.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d b ∧ divides d a"
                },
                {
                    "args": "disj_comm, b * x = a * y + d ∨ a * x = b * y + d",
                    "id": "1.2.10",
                    "prevs": [
                        "1.2.6"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ∨ a * x = b * y + d"
                },
                {
                    "args": "conjI",
                    "id": "1.2.11",
                    "prevs": [
                        "1.2.9",
                        "1.2.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)"
                },
                {
                    "args": "exI, {P: λy. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), a: y}",
                    "id": "1.2.12",
                    "prevs": [
                        "1.2.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d b ∧ divides d a) ∧ (b * x = a * a1 + d ∨ a * x = b * a1 + d)"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), a: x}",
                    "id": "1.2.13",
                    "prevs": [
                        "1.2.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d b ∧ divides d a) ∧ (b * a1 = a * y + d ∨ a * a1 = b * y + d)"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), a: d}",
                    "id": "1.2.14",
                    "prevs": [
                        "1.2.13"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 b ∧ divides a1 a) ∧ (b * x = a * y + a1 ∨ a * x = b * y + a1)"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "1.2.15",
                    "prevs": [
                        "1.2.0",
                        "1.2.0",
                        "1.2.1",
                        "1.2.2",
                        "1.2.3",
                        "1.2.4",
                        "1.2.14"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d))"
                },
                {
                    "args": "",
                    "id": "1.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d))"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)",
                    "id": "1.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)"
                },
                {
                    "args": "d, nat",
                    "id": "1.3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "1.3.2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "1.3.3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)",
                    "id": "1.3.4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)"
                },
                {
                    "args": "conjD1",
                    "id": "1.3.5",
                    "prevs": [
                        "1.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ divides d b ∧ divides d a"
                },
                {
                    "args": "conjD1",
                    "id": "1.3.6",
                    "prevs": [
                        "1.3.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "1.3.7",
                    "prevs": [
                        "1.3.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ divides d a"
                },
                {
                    "args": "conjD2",
                    "id": "1.3.8",
                    "prevs": [
                        "1.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ b * x = a * y + d ∨ a * x = b * y + d"
                },
                {
                    "args": "conjI",
                    "id": "1.3.9",
                    "prevs": [
                        "1.3.7",
                        "1.3.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "disj_comm, a * x = b * y + d ∨ b * x = a * y + d",
                    "id": "1.3.10",
                    "prevs": [
                        "1.3.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ a * x = b * y + d ∨ b * x = a * y + d"
                },
                {
                    "args": "conjI",
                    "id": "1.3.11",
                    "prevs": [
                        "1.3.9",
                        "1.3.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "exI, {P: λy. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), a: y}",
                    "id": "1.3.12",
                    "prevs": [
                        "1.3.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ ∃a1. (divides d a ∧ divides d b) ∧ (a * x = b * a1 + d ∨ b * x = a * a1 + d)"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), a: x}",
                    "id": "1.3.13",
                    "prevs": [
                        "1.3.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d b) ∧ (a * a1 = b * y + d ∨ b * a1 = a * y + d)"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d), a: d}",
                    "id": "1.3.14",
                    "prevs": [
                        "1.3.13"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d), ∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ (a * x = b * y + a1 ∨ b * x = a * y + a1)"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)",
                    "id": "1.3.15",
                    "prevs": [
                        "1.3.0",
                        "1.3.0",
                        "1.3.1",
                        "1.3.2",
                        "1.3.3",
                        "1.3.4",
                        "1.3.14"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d))"
                },
                {
                    "args": "iffI",
                    "id": "1.4",
                    "prevs": [
                        "1.2",
                        "1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟷ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d))"
                },
                {
                    "args": "",
                    "id": "1.5",
                    "prevs": [
                        "1.0",
                        "1.1",
                        "1.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀a. ∀b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟷ (∃d. ∃x. ∃y. (divides d b ∧ divides d a) ∧ (b * x = a * y + d ∨ a * x = b * y + d))"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀a. ∃d. ∃x. ∃y. (divides d a ∧ divides d 0) ∧ (a * x = 0 * y + d ∨ 0 * x = a * y + d)"
                },
                {
                    "args": "a, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "divides_self, {n: a}",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides a a"
                },
                {
                    "args": "divides_zero, {n: a}",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides a 0"
                },
                {
                    "args": "conjI",
                    "id": "2.3",
                    "prevs": [
                        "2.1",
                        "2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides a a ∧ divides a 0"
                },
                {
                    "args": "a * 1 = 0 * 0 + a",
                    "id": "2.4",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ a * 1 = 0 * 0 + a"
                },
                {
                    "args": "disjI1, {A: a * 1 = 0 * 0 + a, B: 0 * 1 = a * 0 + a}",
                    "id": "2.5",
                    "prevs": [
                        "2.4"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ a * 1 = 0 * 0 + a ∨ 0 * 1 = a * 0 + a"
                },
                {
                    "args": "conjI",
                    "id": "2.6",
                    "prevs": [
                        "2.3",
                        "2.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (divides a a ∧ divides a 0) ∧ (a * 1 = 0 * 0 + a ∨ 0 * 1 = a * 0 + a)"
                },
                {
                    "args": "exI, {P: λy. (divides a a ∧ divides a 0) ∧ (a * 1 = 0 * y + a ∨ 0 * 1 = a * y + a), a: (0::nat)}",
                    "id": "2.7",
                    "prevs": [
                        "2.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. (divides a a ∧ divides a 0) ∧ (a * 1 = 0 * a1 + a ∨ 0 * 1 = a * a1 + a)"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides a a ∧ divides a 0) ∧ (a * x = 0 * y + a ∨ 0 * x = a * y + a), a: (1::nat)}",
                    "id": "2.8",
                    "prevs": [
                        "2.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. ∃y. (divides a a ∧ divides a 0) ∧ (a * a1 = 0 * y + a ∨ 0 * a1 = a * y + a)"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d 0) ∧ (a * x = 0 * y + d ∨ 0 * x = a * y + d), a: a}",
                    "id": "2.9",
                    "prevs": [
                        "2.8"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 0) ∧ (a * x = 0 * y + a1 ∨ 0 * x = a * y + a1)"
                },
                {
                    "args": "",
                    "id": "2.10",
                    "prevs": [
                        "2.0",
                        "2.9"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀a. ∃d. ∃x. ∃y. (divides d a ∧ divides d 0) ∧ (a * x = 0 * y + d ∨ 0 * x = a * y + d)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀a. ∀b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d))"
                },
                {
                    "args": "a, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR a"
                },
                {
                    "args": "b, nat",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "bezout_lemma",
                    "id": "3.3",
                    "prevs": [
                        "3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d)"
                },
                {
                    "args": "",
                    "id": "3.4",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀a. ∀b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d (a + b)) ∧ (a * x = (a + b) * y + d ∨ (a + b) * x = a * y + d))"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3"
                    ],
                    "rule": "apply_fact",
                    "th": "⊢ ∀a. ∀b. ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "a, b",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_fact_for",
                    "th": "⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                }
            ],
            "prop": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_P": "(%a. %b. (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)))",
                    "theorem": "ind_euclid"
                },
                {
                    "goal": "!a. !b. ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "goal_id": "1",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction",
                    "names": "a, b"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.2.0"
                    ],
                    "goal_id": "1.2.1",
                    "method_name": "exists_elim",
                    "names": "d,x,y"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "1.2.5",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.4"
                    ],
                    "goal_id": "1.2.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.2.5"
                    ],
                    "goal_id": "1.2.7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.2.5"
                    ],
                    "goal_id": "1.2.8",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "1.2.9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.2.10",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_comm"
                },
                {
                    "goal_id": "1.3",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.3.0"
                    ],
                    "goal_id": "1.3.1",
                    "method_name": "exists_elim",
                    "names": "d,x,y"
                },
                {
                    "goal_id": "1.3.5",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "1.3.5",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "1.3.5",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "fact_ids": [
                        "1.3.4"
                    ],
                    "goal_id": "1.3.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.3.5"
                    ],
                    "goal_id": "1.3.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.3.5"
                    ],
                    "goal_id": "1.3.7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "1.3.4"
                    ],
                    "goal_id": "1.3.8",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "1.3.9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.3.9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.3.10",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "disj_comm"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "a"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "inst_exists_goal",
                    "s": "a"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "inst_exists_goal",
                    "s": "(1::nat)"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "inst_exists_goal",
                    "s": "(0::nat)"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "2.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "goal_id": "2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "goal_id": "2.4",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "a,b"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "bezout_lemma"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_prev"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "bezout",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "bezout_add, {a: a, b: b}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "d, nat",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "conjD1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a"
                },
                {
                    "args": "conjD2",
                    "id": "7",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "8",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ∨ b * x = a * y + d"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ⟶ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "a * x = b * y + d",
                    "id": "9.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a * x = b * y + d ⊢ a * x = b * y + d"
                },
                {
                    "args": "nat_plus_minus_2, b * y + d - b * y = d",
                    "id": "9.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ b * y + d - b * y = d"
                },
                {
                    "args": "a * x - b * y = d",
                    "id": "9.2",
                    "prevs": [
                        "9.0",
                        "9.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x - b * y = d"
                },
                {
                    "args": "disjI1, {A: a * x - b * y = d, B: b * x - a * y = d}",
                    "id": "9.3",
                    "prevs": [
                        "9.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "",
                    "id": "9.4",
                    "prevs": [
                        "9.0",
                        "9.3"
                    ],
                    "rule": "intros",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ⟶ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ⟶ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "b * x = a * y + d",
                    "id": "10.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b * x = a * y + d ⊢ b * x = a * y + d"
                },
                {
                    "args": "nat_plus_minus_2, a * y + d - a * y = d",
                    "id": "10.1",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ a * y + d - a * y = d"
                },
                {
                    "args": "b * x - a * y = d",
                    "id": "10.2",
                    "prevs": [
                        "10.0",
                        "10.1"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x - a * y = d"
                },
                {
                    "args": "disjI2, {A: a * x - b * y = d, B: b * x - a * y = d}",
                    "id": "10.3",
                    "prevs": [
                        "10.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "",
                    "id": "10.4",
                    "prevs": [
                        "10.0",
                        "10.3"
                    ],
                    "rule": "intros",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ⟶ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "disjE",
                    "id": "11",
                    "prevs": [
                        "8",
                        "9",
                        "10"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "conjI",
                    "id": "12",
                    "prevs": [
                        "5",
                        "11"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)"
                },
                {
                    "args": "exI, {P: λy. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d), a: y}",
                    "id": "13",
                    "prevs": [
                        "12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d b) ∧ (a * x - b * a1 = d ∨ b * x - a * a1 = d)"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d), a: x}",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d b) ∧ (a * a1 - b * y = d ∨ b * a1 - a * y = d)"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d), a: d}",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ (a * x - b * y = a1 ∨ b * x - a * y = a1)"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "16",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "15"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)"
                }
            ],
            "prop": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_a": "a",
                    "param_b": "b",
                    "theorem": "bezout_add"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "d,x,y"
                },
                {
                    "goal_id": "5",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "5",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "5",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "8",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "9",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "9.0"
                    ],
                    "goal_id": "9.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "9.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_minus_2"
                },
                {
                    "goal_id": "10",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "10.0"
                    ],
                    "goal_id": "10.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "nat_plus_minus_2"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "bezout_add_strong",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(a = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(a = 0) ⊢ ¬(a = 0)"
                },
                {
                    "args": "bezout_add, {a: a, b: b}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "d, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)"
                },
                {
                    "args": "conjD1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD1",
                    "id": "7",
                    "prevs": [
                        "6"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d a"
                },
                {
                    "args": "conjD2",
                    "id": "8",
                    "prevs": [
                        "6"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "9",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ∨ b * x = a * y + d"
                },
                {
                    "args": "",
                    "id": "10",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(a = 0), (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ⟶ (∃d1. ∃x1. ∃y1. (divides d1 a ∧ divides d1 b) ∧ a * x1 = b * y1 + d1)"
                },
                {
                    "args": "a * x = b * y + d",
                    "id": "10.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a * x = b * y + d ⊢ a * x = b * y + d"
                },
                {
                    "args": "conjI",
                    "id": "10.1",
                    "prevs": [
                        "6",
                        "10.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(a = 0), a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "exI, {P: λy. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: y}",
                    "id": "10.2",
                    "prevs": [
                        "10.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0), a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d b) ∧ a * x = b * a1 + d"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: x}",
                    "id": "10.3",
                    "prevs": [
                        "10.2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0), a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d b) ∧ a * a1 = b * y + d"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: d}",
                    "id": "10.4",
                    "prevs": [
                        "10.3"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0), a * x = b * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ a * x = b * y + a1"
                },
                {
                    "args": "",
                    "id": "10.5",
                    "prevs": [
                        "10.0",
                        "10.4"
                    ],
                    "rule": "intros",
                    "th": "¬(a = 0), (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * x = b * y + d ⟶ (∃d1. ∃x1. ∃y1. (divides d1 a ∧ divides d1 b) ∧ a * x1 = b * y1 + d1)"
                },
                {
                    "args": "",
                    "id": "11",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(a = 0), (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ⟶ (∃d1. ∃x1. ∃y1. (divides d1 a ∧ divides d1 b) ∧ a * x1 = b * y1 + d1)"
                },
                {
                    "args": "b * x = a * y + d",
                    "id": "11.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b * x = a * y + d ⊢ b * x = a * y + d"
                },
                {
                    "args": "",
                    "id": "11.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b = 0 ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d)"
                },
                {
                    "args": "b = 0",
                    "id": "11.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b = 0 ⊢ b = 0"
                },
                {
                    "args": "",
                    "id": "11.1.1",
                    "prevs": [
                        "11.1.0",
                        "11.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "b = 0, b * x = a * y + d ⊢ 0 * x = a * y + d"
                },
                {
                    "args": "nat_times_def_1",
                    "id": "11.1.2",
                    "prevs": [
                        "11.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b = 0, b * x = a * y + d ⊢ 0 = a * y + d"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "11.1.3",
                    "prevs": [
                        "11.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b = 0, b * x = a * y + d ⊢ a * y + d = 0"
                },
                {
                    "args": "add_is_zero",
                    "id": "11.1.4",
                    "prevs": [
                        "11.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "b = 0, b * x = a * y + d ⊢ a * y = 0 ∧ d = 0"
                },
                {
                    "args": "conjD1",
                    "id": "11.1.5",
                    "prevs": [
                        "11.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "b = 0, b * x = a * y + d ⊢ a * y = 0"
                },
                {
                    "args": "conjD2",
                    "id": "11.1.6",
                    "prevs": [
                        "11.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "b = 0, b * x = a * y + d ⊢ d = 0"
                },
                {
                    "args": "0 = 0 * x + 0",
                    "id": "11.1.7",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ 0 = 0 * x + 0"
                },
                {
                    "args": "0 = 0 * x + d",
                    "id": "11.1.8",
                    "prevs": [
                        "11.1.6",
                        "11.1.7"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ 0 = 0 * x + d"
                },
                {
                    "args": "a * y = 0 * x + d",
                    "id": "11.1.9",
                    "prevs": [
                        "11.1.5",
                        "11.1.8"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * y = 0 * x + d"
                },
                {
                    "args": "a * y = b * x + d",
                    "id": "11.1.10",
                    "prevs": [
                        "11.1.0",
                        "11.1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * y = b * x + d"
                },
                {
                    "args": "conjI",
                    "id": "11.1.11",
                    "prevs": [
                        "6",
                        "11.1.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ a * y = b * x + d"
                },
                {
                    "args": "exI, {P: λy1. (divides d a ∧ divides d b) ∧ a * y = b * y1 + d, a: x}",
                    "id": "11.1.12",
                    "prevs": [
                        "11.1.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d b) ∧ a * y = b * a1 + d"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: y}",
                    "id": "11.1.13",
                    "prevs": [
                        "11.1.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d b) ∧ a * a1 = b * y + d"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: d}",
                    "id": "11.1.14",
                    "prevs": [
                        "11.1.13"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "b = 0, ¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ a * x = b * y + a1"
                },
                {
                    "args": "",
                    "id": "11.1.15",
                    "prevs": [
                        "11.1.0",
                        "11.1.14"
                    ],
                    "rule": "intros",
                    "th": "¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b = 0 ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d)"
                },
                {
                    "args": "",
                    "id": "11.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ¬(b = 0) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d)"
                },
                {
                    "args": "¬(b = 0)",
                    "id": "11.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(b = 0) ⊢ ¬(b = 0)"
                },
                {
                    "args": "divides_le",
                    "id": "11.2.1",
                    "prevs": [
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d ≤ b ∨ b = 0"
                },
                {
                    "args": "",
                    "id": "11.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d ≤ b ⟶ (∃d1. ∃x. ∃y. (divides d1 a ∧ divides d1 b) ∧ a * x = b * y + d1)"
                },
                {
                    "args": "d ≤ b",
                    "id": "11.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d ≤ b ⊢ d ≤ b"
                },
                {
                    "args": "le_lt",
                    "id": "11.2.2.1",
                    "prevs": [
                        "11.2.2.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "d ≤ b ⊢ d < b ∨ d = b"
                },
                {
                    "args": "",
                    "id": "11.2.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d < b ⟶ (∃d1. ∃x. ∃y. (divides d1 a ∧ divides d1 b) ∧ a * x = b * y + d1)"
                },
                {
                    "args": "d < b",
                    "id": "11.2.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d < b ⊢ d < b"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ x = 0 ⟶ (∃d. ∃x1. ∃y. (divides d a ∧ divides d b) ∧ a * x1 = b * y + d)"
                },
                {
                    "args": "x = 0",
                    "id": "11.2.2.2.1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "x = 0 ⊢ x = 0"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.1.1",
                    "prevs": [
                        "11.2.2.2.1.0",
                        "11.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "x = 0, b * x = a * y + d ⊢ b * 0 = a * y + d"
                },
                {
                    "args": "mult_0_right",
                    "id": "11.2.2.2.1.2",
                    "prevs": [
                        "11.2.2.2.1.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0, b * x = a * y + d ⊢ 0 = a * y + d"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "11.2.2.2.1.3",
                    "prevs": [
                        "11.2.2.2.1.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0, b * x = a * y + d ⊢ a * y + d = 0"
                },
                {
                    "args": "add_is_zero",
                    "id": "11.2.2.2.1.4",
                    "prevs": [
                        "11.2.2.2.1.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, b * x = a * y + d ⊢ a * y = 0 ∧ d = 0"
                },
                {
                    "args": "conjD2",
                    "id": "11.2.2.2.1.5",
                    "prevs": [
                        "11.2.2.2.1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, b * x = a * y + d ⊢ d = 0"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.1.6",
                    "prevs": [
                        "11.2.2.2.1.5",
                        "11.0"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "x = 0, b * x = a * y + d ⊢ b * x = a * y + 0"
                },
                {
                    "args": "add_0_right",
                    "id": "11.2.2.2.1.7",
                    "prevs": [
                        "11.2.2.2.1.6"
                    ],
                    "rule": "rewrite_fact",
                    "th": "x = 0, b * x = a * y + d ⊢ b * x = a * y"
                },
                {
                    "args": "eq_sym_eq, a * y = b * x",
                    "id": "11.2.2.2.1.8",
                    "prevs": [
                        "11.2.2.2.1.7"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * y = b * x"
                },
                {
                    "args": "add_0_right, a * y = b * x + 0",
                    "id": "11.2.2.2.1.9",
                    "prevs": [
                        "11.2.2.2.1.8"
                    ],
                    "rule": "rewrite_goal",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * y = b * x + 0"
                },
                {
                    "args": "a * y = b * x + d",
                    "id": "11.2.2.2.1.10",
                    "prevs": [
                        "11.2.2.2.1.5",
                        "11.2.2.2.1.9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * y = b * x + d"
                },
                {
                    "args": "conjI",
                    "id": "11.2.2.2.1.11",
                    "prevs": [
                        "6",
                        "11.2.2.2.1.10"
                    ],
                    "rule": "apply_theorem",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ a * y = b * x + d"
                },
                {
                    "args": "exI, {P: λy1. (divides d a ∧ divides d b) ∧ a * y = b * y1 + d, a: x}",
                    "id": "11.2.2.2.1.12",
                    "prevs": [
                        "11.2.2.2.1.11"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d b) ∧ a * y = b * a1 + d"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: y}",
                    "id": "11.2.2.2.1.13",
                    "prevs": [
                        "11.2.2.2.1.12"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d b) ∧ a * a1 = b * y + d"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: d}",
                    "id": "11.2.2.2.1.14",
                    "prevs": [
                        "11.2.2.2.1.13"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "x = 0, d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ a * x = b * y + a1"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.1.15",
                    "prevs": [
                        "11.2.2.2.1.0",
                        "11.2.2.2.1.14"
                    ],
                    "rule": "intros",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ x = 0 ⟶ (∃d. ∃x1. ∃y. (divides d a ∧ divides d b) ∧ a * x1 = b * y + d)"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ¬(x = 0) ⟶ (∃d. ∃x1. ∃y. (divides d a ∧ divides d b) ∧ a * x1 = b * y + d)"
                },
                {
                    "args": "¬(x = 0)",
                    "id": "11.2.2.2.2.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(x = 0) ⊢ ¬(x = 0)"
                },
                {
                    "args": "∀m. ∀n. m = n ⟶ (b - 1) * m + d = (b - 1) * n + d",
                    "id": "11.2.2.2.2.1",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀m. ∀n. m = n ⟶ (b - 1) * m + d = (b - 1) * n + d"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.2",
                    "prevs": [
                        "11.2.2.2.2.1",
                        "11.0"
                    ],
                    "rule": "apply_fact",
                    "th": "b * x = a * y + d ⊢ (b - 1) * (b * x) + d = (b - 1) * (a * y + d) + d"
                },
                {
                    "args": "distrib_l",
                    "id": "11.2.2.2.2.3",
                    "prevs": [
                        "11.2.2.2.2.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b * x = a * y + d ⊢ (b - 1) * (b * x) + d = (b - 1) * (a * y) + (b - 1) * d + d"
                },
                {
                    "args": "add_assoc",
                    "id": "11.2.2.2.2.4",
                    "prevs": [
                        "11.2.2.2.2.3"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b * x = a * y + d ⊢ (b - 1) * (b * x) + d = (b - 1) * (a * y) + ((b - 1) * d + d)"
                },
                {
                    "args": "(b - 1) * d + d = (b - 1 + 1) * d",
                    "id": "11.2.2.2.2.5",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (b - 1) * d + d = (b - 1 + 1) * d"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.6",
                    "prevs": [
                        "11.2.2.2.2.5",
                        "11.2.2.2.2.4"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "b * x = a * y + d ⊢ (b - 1) * (b * x) + d = (b - 1) * (a * y) + (b - 1 + 1) * d"
                },
                {
                    "args": "b - 1 + 1 = b",
                    "id": "11.2.2.2.2.7",
                    "prevs": [
                        "11.2.0"
                    ],
                    "rule": "z3",
                    "th": "¬(b = 0) ⊢ b - 1 + 1 = b"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.8",
                    "prevs": [
                        "11.2.2.2.2.7",
                        "11.2.2.2.2.6"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(b = 0), b * x = a * y + d ⊢ (b - 1) * (b * x) + d = (b - 1) * (a * y) + b * d"
                },
                {
                    "args": "∀a::nat. ∀b. ∀c. ∀d. a + b = c + d ⟶ d ≤ a ⟶ c = a - d + b",
                    "id": "11.2.2.2.2.9",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ ∀a::nat. ∀b. ∀c. ∀d. a + b = c + d ⟶ d ≤ a ⟶ c = a - d + b"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.10",
                    "prevs": [
                        "11.2.2.2.2.9",
                        "11.2.2.2.2.8"
                    ],
                    "rule": "apply_fact",
                    "th": "¬(b = 0), b * x = a * y + d ⊢ b * d ≤ (b - 1) * (b * x) ⟶ (b - 1) * (a * y) = (b - 1) * (b * x) - b * d + d"
                },
                {
                    "args": "(b - 1) * (b * x) = b * (b - 1) * x",
                    "id": "11.2.2.2.2.11",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ (b - 1) * (b * x) = b * (b - 1) * x"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.12",
                    "prevs": [
                        "11.2.2.2.2.11",
                        "11.2.2.2.2.10"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "¬(b = 0), b * x = a * y + d ⊢ b * d ≤ b * (b - 1) * x ⟶ (b - 1) * (a * y) = b * (b - 1) * x - b * d + d"
                },
                {
                    "args": "less_eq_refl, {n: b}",
                    "id": "11.2.2.2.2.13",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ b ≤ b"
                },
                {
                    "args": "mult_1_right, d = d * 1",
                    "id": "11.2.2.2.2.14",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ d = d * 1"
                },
                {
                    "args": "d ≤ b - 1",
                    "id": "11.2.2.2.2.15",
                    "prevs": [
                        "11.2.2.2.0"
                    ],
                    "rule": "z3",
                    "th": "d < b ⊢ d ≤ b - 1"
                },
                {
                    "args": "le_1_2",
                    "id": "11.2.2.2.2.16",
                    "prevs": [
                        "11.2.2.2.2.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(x = 0) ⊢ 1 ≤ x"
                },
                {
                    "args": "le_mult2",
                    "id": "11.2.2.2.2.17",
                    "prevs": [
                        "11.2.2.2.2.15",
                        "11.2.2.2.2.16"
                    ],
                    "rule": "apply_theorem",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d * 1 ≤ (b - 1) * x"
                },
                {
                    "args": "d ≤ (b - 1) * x",
                    "id": "11.2.2.2.2.18",
                    "prevs": [
                        "11.2.2.2.2.14",
                        "11.2.2.2.2.17"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d ≤ (b - 1) * x"
                },
                {
                    "args": "le_mult2",
                    "id": "11.2.2.2.2.19",
                    "prevs": [
                        "11.2.2.2.2.13",
                        "11.2.2.2.2.18"
                    ],
                    "rule": "apply_theorem",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * d ≤ b * ((b - 1) * x)"
                },
                {
                    "args": "mult_assoc, b * d ≤ b * (b - 1) * x",
                    "id": "11.2.2.2.2.20",
                    "prevs": [
                        "11.2.2.2.2.19"
                    ],
                    "rule": "rewrite_goal",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * d ≤ b * (b - 1) * x"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.21",
                    "prevs": [
                        "11.2.2.2.2.12",
                        "11.2.2.2.2.20"
                    ],
                    "rule": "apply_fact",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (b - 1) * (a * y) = b * (b - 1) * x - b * d + d"
                },
                {
                    "args": "(b - 1) * (a * y) = a * (y * (b - 1))",
                    "id": "11.2.2.2.2.22",
                    "prevs": [],
                    "rule": "nat_norm",
                    "th": "⊢ (b - 1) * (a * y) = a * (y * (b - 1))"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.23",
                    "prevs": [
                        "11.2.2.2.2.22",
                        "11.2.2.2.2.21"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * (y * (b - 1)) = b * (b - 1) * x - b * d + d"
                },
                {
                    "args": "b * (b - 1) * x - b * d + d = b * ((b - 1) * x - d) + d",
                    "id": "11.2.2.2.2.24",
                    "prevs": [],
                    "rule": "z3",
                    "th": "⊢ b * (b - 1) * x - b * d + d = b * ((b - 1) * x - d) + d"
                },
                {
                    "args": "a * (y * (b - 1)) = b * ((b - 1) * x - d) + d",
                    "id": "11.2.2.2.2.25",
                    "prevs": [
                        "11.2.2.2.2.23",
                        "11.2.2.2.2.24"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ a * (y * (b - 1)) = b * ((b - 1) * x - d) + d"
                },
                {
                    "args": "conjI",
                    "id": "11.2.2.2.2.26",
                    "prevs": [
                        "6",
                        "11.2.2.2.2.25"
                    ],
                    "rule": "apply_theorem",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides d a ∧ divides d b) ∧ a * (y * (b - 1)) = b * ((b - 1) * x - d) + d"
                },
                {
                    "args": "exI, {P: λy1. (divides d a ∧ divides d b) ∧ a * (y * (b - 1)) = b * y1 + d, a: (b - 1) * x - d}",
                    "id": "11.2.2.2.2.27",
                    "prevs": [
                        "11.2.2.2.2.26"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides d a ∧ divides d b) ∧ a * (y * (b - 1)) = b * a1 + d"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: y * (b - 1)}",
                    "id": "11.2.2.2.2.28",
                    "prevs": [
                        "11.2.2.2.2.27"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides d a ∧ divides d b) ∧ a * a1 = b * y + d"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: d}",
                    "id": "11.2.2.2.2.29",
                    "prevs": [
                        "11.2.2.2.2.28"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), ¬(x = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ a * x = b * y + a1"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.2.30",
                    "prevs": [
                        "11.2.2.2.2.0",
                        "11.2.2.2.2.29"
                    ],
                    "rule": "intros",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ¬(x = 0) ⟶ (∃d. ∃x1. ∃y. (divides d a ∧ divides d b) ∧ a * x1 = b * y + d)"
                },
                {
                    "args": "classical_cases",
                    "id": "11.2.2.2.3",
                    "prevs": [
                        "11.2.2.2.1",
                        "11.2.2.2.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "d < b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "",
                    "id": "11.2.2.2.4",
                    "prevs": [
                        "11.2.2.2.0",
                        "11.2.2.2.3"
                    ],
                    "rule": "intros",
                    "th": "d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d < b ⟶ (∃d1. ∃x. ∃y. (divides d1 a ∧ divides d1 b) ∧ a * x = b * y + d1)"
                },
                {
                    "args": "",
                    "id": "11.2.2.3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d = b ⟶ (∃d1. ∃x. ∃y. (divides d1 a ∧ divides d1 b) ∧ a * x = b * y + d1)"
                },
                {
                    "args": "d = b",
                    "id": "11.2.2.3.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d = b ⊢ d = b"
                },
                {
                    "args": "",
                    "id": "11.2.2.3.1",
                    "prevs": [
                        "11.2.2.3.0",
                        "7"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "d = b, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides b a"
                },
                {
                    "args": "divides_self, {n: b}",
                    "id": "11.2.2.3.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides b b"
                },
                {
                    "args": "conjI",
                    "id": "11.2.2.3.3",
                    "prevs": [
                        "11.2.2.3.1",
                        "11.2.2.3.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ divides b a ∧ divides b b"
                },
                {
                    "args": "a * b = b * (a - 1) + b",
                    "id": "11.2.2.3.4",
                    "prevs": [
                        "0"
                    ],
                    "rule": "z3",
                    "th": "¬(a = 0) ⊢ a * b = b * (a - 1) + b"
                },
                {
                    "args": "conjI",
                    "id": "11.2.2.3.5",
                    "prevs": [
                        "11.2.2.3.3",
                        "11.2.2.3.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ (divides b a ∧ divides b b) ∧ a * b = b * (a - 1) + b"
                },
                {
                    "args": "exI, {P: λy. (divides b a ∧ divides b b) ∧ a * b = b * y + b, a: a - 1}",
                    "id": "11.2.2.3.6",
                    "prevs": [
                        "11.2.2.3.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d = b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. (divides b a ∧ divides b b) ∧ a * b = b * a1 + b"
                },
                {
                    "args": "exI, {P: λx. ∃y. (divides b a ∧ divides b b) ∧ a * x = b * y + b, a: b}",
                    "id": "11.2.2.3.7",
                    "prevs": [
                        "11.2.2.3.6"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d = b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃y. (divides b a ∧ divides b b) ∧ a * a1 = b * y + b"
                },
                {
                    "args": "exI, {P: λd. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d, a: b}",
                    "id": "11.2.2.3.8",
                    "prevs": [
                        "11.2.2.3.7"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "d = b, d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃a1. ∃x. ∃y. (divides a1 a ∧ divides a1 b) ∧ a * x = b * y + a1"
                },
                {
                    "args": "",
                    "id": "11.2.2.3.9",
                    "prevs": [
                        "11.2.2.3.0",
                        "11.2.2.3.8"
                    ],
                    "rule": "intros",
                    "th": "d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d = b ⟶ (∃d1. ∃x. ∃y. (divides d1 a ∧ divides d1 b) ∧ a * x = b * y + d1)"
                },
                {
                    "args": "disjE",
                    "id": "11.2.2.4",
                    "prevs": [
                        "11.2.2.1",
                        "11.2.2.2",
                        "11.2.2.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "d ≤ b, ¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "",
                    "id": "11.2.2.5",
                    "prevs": [
                        "11.2.2.0",
                        "11.2.2.4"
                    ],
                    "rule": "intros",
                    "th": "¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ d ≤ b ⟶ (∃d1. ∃x. ∃y. (divides d1 a ∧ divides d1 b) ∧ a * x = b * y + d1)"
                },
                {
                    "args": "disjE",
                    "id": "11.2.3",
                    "prevs": [
                        "11.2.1",
                        "11.2.2",
                        "11.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(a = 0), ¬(b = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "",
                    "id": "11.2.4",
                    "prevs": [
                        "11.2.0",
                        "11.2.3"
                    ],
                    "rule": "intros",
                    "th": "¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ¬(b = 0) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d)"
                },
                {
                    "args": "classical_cases",
                    "id": "11.3",
                    "prevs": [
                        "11.1",
                        "11.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(a = 0), b * x = a * y + d, (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "",
                    "id": "11.4",
                    "prevs": [
                        "11.0",
                        "11.3"
                    ],
                    "rule": "intros",
                    "th": "¬(a = 0), (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ b * x = a * y + d ⟶ (∃d1. ∃x1. ∃y1. (divides d1 a ∧ divides d1 b) ∧ a * x1 = b * y1 + d1)"
                },
                {
                    "args": "disjE",
                    "id": "12",
                    "prevs": [
                        "9",
                        "10",
                        "11"
                    ],
                    "rule": "apply_theorem",
                    "th": "¬(a = 0), (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x = b * y + d ∨ b * x = a * y + d)",
                    "id": "13",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(a = 0) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d)"
                }
            ],
            "prop": "¬(a = 0) ⟶ (∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d)",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_a": "a",
                    "param_b": "b",
                    "theorem": "bezout_add"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "d,x,y"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "8",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "9",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "10",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "goal_id": "10.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "11",
                    "method_name": "introduction"
                },
                {
                    "case": "b=0",
                    "goal_id": "11.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "11.1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "11.1.1",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "11.1.1",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "goal_id": "11.1.1",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "11.1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "11.1.0",
                        "11.0"
                    ],
                    "goal_id": "11.1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "11.1.1"
                    ],
                    "goal_id": "11.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "nat_times_def_1"
                },
                {
                    "fact_ids": [
                        "11.1.2"
                    ],
                    "goal_id": "11.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "11.1.3"
                    ],
                    "goal_id": "11.1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "fact_ids": [
                        "11.1.4"
                    ],
                    "goal_id": "11.1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "11.1.4"
                    ],
                    "goal_id": "11.1.6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "11.1.0"
                    ],
                    "goal_id": "11.1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "11.1.5"
                    ],
                    "goal_id": "11.1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "11.1.6"
                    ],
                    "goal_id": "11.1.7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "11.1.7",
                    "method_name": "nat_norm"
                },
                {
                    "goal_id": "11.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "11.2.1",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_le"
                },
                {
                    "fact_ids": [
                        "11.2.1"
                    ],
                    "goal_id": "11.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "11.2.2",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "11.2.2.0"
                    ],
                    "goal_id": "11.2.2.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "le_lt"
                },
                {
                    "fact_ids": [
                        "11.2.2.1"
                    ],
                    "goal_id": "11.2.2.2",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "11.2.2.2",
                    "method_name": "introduction"
                },
                {
                    "case": "x=0",
                    "goal_id": "11.2.2.2.1",
                    "method_name": "cases"
                },
                {
                    "goal_id": "11.2.2.2.1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.0",
                        "11.0"
                    ],
                    "goal_id": "11.2.2.2.1.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.1"
                    ],
                    "goal_id": "11.2.2.2.1.2",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "mult_0_right"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.2"
                    ],
                    "goal_id": "11.2.2.2.1.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.3"
                    ],
                    "goal_id": "11.2.2.2.1.4",
                    "method_name": "apply_forward_step",
                    "theorem": "add_is_zero"
                },
                {
                    "goal_id": "11.2.2.2.1.5",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "11.2.2.2.1.5",
                    "method_name": "inst_exists_goal",
                    "s": "y"
                },
                {
                    "goal_id": "11.2.2.2.1.5",
                    "method_name": "inst_exists_goal",
                    "s": "x"
                },
                {
                    "goal_id": "11.2.2.2.1.5",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.4"
                    ],
                    "goal_id": "11.2.2.2.1.5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.5"
                    ],
                    "goal_id": "11.2.2.2.1.6",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.5",
                        "11.0"
                    ],
                    "goal_id": "11.2.2.2.1.6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.1.6"
                    ],
                    "goal_id": "11.2.2.2.1.7",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "11.2.2.2.1.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "add_0_right"
                },
                {
                    "goal_id": "11.2.2.2.1.8",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "11.2.2.2.2",
                    "method_name": "introduction"
                },
                {
                    "goal": "∀m. ∀n. m = n ⟶ (b - 1) * m + d = (b - 1) * n + d",
                    "goal_id": "11.2.2.2.2.1",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.1",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.1",
                        "11.0"
                    ],
                    "goal_id": "11.2.2.2.2.2",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.2"
                    ],
                    "goal_id": "11.2.2.2.2.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "distrib_l"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.3"
                    ],
                    "goal_id": "11.2.2.2.2.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "add_assoc"
                },
                {
                    "goal": "((b - 1) * d + d) = (b-1+1)*d",
                    "goal_id": "11.2.2.2.2.5",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.5",
                    "method_name": "nat_norm"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.5",
                        "11.2.2.2.2.4"
                    ],
                    "goal_id": "11.2.2.2.2.6",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal": "(b - 1 + 1) = b",
                    "goal_id": "11.2.2.2.2.7",
                    "method_name": "cut"
                },
                {
                    "fact_ids": [
                        "11.2.0"
                    ],
                    "goal_id": "11.2.2.2.2.7",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.7",
                        "11.2.2.2.2.6"
                    ],
                    "goal_id": "11.2.2.2.2.8",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "11.2.2.2.2.9",
                    "method_name": "inst_exists_goal",
                    "s": "d"
                },
                {
                    "goal_id": "11.2.2.2.2.9",
                    "method_name": "inst_exists_goal",
                    "s": "y * (b - 1)"
                },
                {
                    "goal_id": "11.2.2.2.2.9",
                    "method_name": "inst_exists_goal",
                    "s": "(b - 1) * x - d"
                },
                {
                    "goal_id": "11.2.2.2.2.9",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal": "!a::nat. !b. !c. !d. a + b = c + d --> d <= a --> c = a - d + b",
                    "goal_id": "11.2.2.2.2.9",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.9",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.9",
                        "11.2.2.2.2.8"
                    ],
                    "goal_id": "11.2.2.2.2.10",
                    "method_name": "apply_fact"
                },
                {
                    "goal": " (b - 1) * (b * x) =  b * (b - 1) * x",
                    "goal_id": "11.2.2.2.2.11",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.11",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.11",
                        "11.2.2.2.2.10"
                    ],
                    "goal_id": "11.2.2.2.2.12",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.12"
                    ],
                    "goal": "b * d ≤ b * (b - 1) * x",
                    "goal_id": "11.2.2.2.2.13",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.13",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "11.2.2.2.2.13",
                    "method_name": "apply_backward_step",
                    "theorem": "le_mult2"
                },
                {
                    "goal_id": "11.2.2.2.2.13",
                    "method_name": "apply_backward_step",
                    "theorem": "less_eq_refl"
                },
                {
                    "goal": "d = d * 1",
                    "goal_id": "11.2.2.2.2.14",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.14",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_1_right"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.14"
                    ],
                    "goal_id": "11.2.2.2.2.15",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "11.2.2.2.2.15",
                    "method_name": "apply_backward_step",
                    "theorem": "le_mult2"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.0"
                    ],
                    "goal_id": "11.2.2.2.2.15",
                    "method_name": "z3"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.0"
                    ],
                    "goal_id": "11.2.2.2.2.16",
                    "method_name": "apply_backward_step",
                    "theorem": "le_1_2"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.12",
                        "11.2.2.2.2.20"
                    ],
                    "goal_id": "11.2.2.2.2.21",
                    "method_name": "apply_fact"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.21"
                    ],
                    "goal": "(b - 1) * (a * y) = a * (y * (b - 1))",
                    "goal_id": "11.2.2.2.2.22",
                    "method_name": "cut"
                },
                {
                    "goal_id": "11.2.2.2.2.22",
                    "method_name": "nat_norm"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.22",
                        "11.2.2.2.2.21"
                    ],
                    "goal_id": "11.2.2.2.2.23",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "fact_ids": [
                        "11.2.2.2.2.23"
                    ],
                    "goal_id": "11.2.2.2.2.24",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "11.2.2.2.2.24",
                    "method_name": "z3"
                },
                {
                    "goal_id": "11.2.2.3",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "11.2.2.3.1",
                    "method_name": "inst_exists_goal",
                    "s": "b"
                },
                {
                    "goal_id": "11.2.2.3.1",
                    "method_name": "inst_exists_goal",
                    "s": "b"
                },
                {
                    "goal_id": "11.2.2.3.1",
                    "method_name": "inst_exists_goal",
                    "s": "a-1"
                },
                {
                    "goal_id": "11.2.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "11.2.2.3.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "11.2.2.3.0",
                        "7"
                    ],
                    "goal_id": "11.2.2.3.1",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "11.2.2.3.2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "11.2.2.3.4",
                    "method_name": "z3"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "gcd",
            "prop": [
                "gcd m n = ",
                "(THE k. divides k m ∧ divides k n ∧ (∀a. a divides m ∧ a divides n ⟶ a divides k))"
            ],
            "ty": "def",
            "type": "nat ⇒ nat ⇒ nat"
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_divide1",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "⊢ divides (THE k. divides k m ∧ divides k n ∧ (∀a. a divides m ∧ a divides n ⟶ a divides k)) m"
                },
                {
                    "args": "gcd_def, divides (gcd m n) m",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides (gcd m n) m"
                }
            ],
            "prop": "divides (gcd m n) m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_def"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_divides2",
            "prop": "divides (gcd m n) n",
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_is_max",
            "prop": "divides a m ⟶ divides a n ⟶ divides a (gcd m n)",
            "ty": "thm",
            "vars": {
                "a": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "divides_gcd",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ divides d (gcd a b) ⟶ divides d a ∧ divides d b"
                },
                {
                    "args": "divides d (gcd a b)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d (gcd a b) ⊢ divides d (gcd a b)"
                },
                {
                    "args": "gcd_divide1, {m: a, n: b}",
                    "id": "0.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) a"
                },
                {
                    "args": "divides_trans",
                    "id": "0.2",
                    "prevs": [
                        "0.0",
                        "0.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d (gcd a b) ⊢ divides d a"
                },
                {
                    "args": "gcd_divides2, {m: a, n: b}",
                    "id": "0.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) b"
                },
                {
                    "args": "divides_trans",
                    "id": "0.4",
                    "prevs": [
                        "0.0",
                        "0.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d (gcd a b) ⊢ divides d b"
                },
                {
                    "args": "conjI",
                    "id": "0.5",
                    "prevs": [
                        "0.2",
                        "0.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d (gcd a b) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "",
                    "id": "0.6",
                    "prevs": [
                        "0.0",
                        "0.5"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d (gcd a b) ⟶ divides d a ∧ divides d b"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ divides d a ∧ divides d b ⟶ divides d (gcd a b)"
                },
                {
                    "args": "divides d a ∧ divides d b",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides d a ∧ divides d b ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD1",
                    "id": "1.1",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d a ∧ divides d b ⊢ divides d a"
                },
                {
                    "args": "conjD2",
                    "id": "1.2",
                    "prevs": [
                        "1.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d a ∧ divides d b ⊢ divides d b"
                },
                {
                    "args": "gcd_is_max",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides d a ∧ divides d b ⊢ divides d (gcd a b)"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [
                        "1.0",
                        "1.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d a ∧ divides d b ⟶ divides d (gcd a b)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides d (gcd a b) ⟷ divides d a ∧ divides d b"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides d (gcd a b) ⟷ divides d a ∧ divides d b"
                }
            ],
            "prop": "divides d (gcd a b) ⟷ divides d a ∧ divides d b",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "0.1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "0.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjD2"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "d": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "gcd_unique",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "",
                    "id": "0",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⟶ d = gcd a b"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d)",
                    "id": "0.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⊢ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d)"
                },
                {
                    "args": "conjD1",
                    "id": "0.1",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "0.2",
                    "prevs": [
                        "0.0"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⊢ ∀e. divides e a ⟶ divides e b ⟶ divides e d"
                },
                {
                    "args": "divides_gcd",
                    "id": "0.3",
                    "prevs": [
                        "0.1"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⊢ divides d (gcd a b)"
                },
                {
                    "args": "gcd_divide1, {m: a, n: b}",
                    "id": "0.4",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) a"
                },
                {
                    "args": "gcd_divides2, {m: a, n: b}",
                    "id": "0.5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) b"
                },
                {
                    "args": "gcd a b",
                    "id": "0.6",
                    "prevs": [
                        "0.2",
                        "0.4",
                        "0.5"
                    ],
                    "rule": "apply_fact_for",
                    "th": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⊢ divides (gcd a b) d"
                },
                {
                    "args": "divides_antisym",
                    "id": "0.7",
                    "prevs": [
                        "0.3",
                        "0.6"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⊢ d = gcd a b"
                },
                {
                    "args": "",
                    "id": "0.8",
                    "prevs": [
                        "0.0",
                        "0.7"
                    ],
                    "rule": "intros",
                    "th": "⊢ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⟶ d = gcd a b"
                },
                {
                    "args": "",
                    "id": "1",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ d = gcd a b ⟶ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d)"
                },
                {
                    "args": "d = gcd a b",
                    "id": "1.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "d = gcd a b ⊢ d = gcd a b"
                },
                {
                    "args": "gcd_divide1, {m: a, n: b}",
                    "id": "1.1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) a"
                },
                {
                    "args": "gcd_divides2, {m: a, n: b}",
                    "id": "1.2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd a b) b"
                },
                {
                    "args": "conjI",
                    "id": "1.3",
                    "prevs": [
                        "1.1",
                        "1.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = gcd a b ⊢ divides (gcd a b) a ∧ divides (gcd a b) b"
                },
                {
                    "args": "",
                    "id": "1.4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "d = gcd a b ⊢ ∀e. divides e a ⟶ divides e b ⟶ divides e (gcd a b)"
                },
                {
                    "args": "e, nat",
                    "id": "1.4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR e"
                },
                {
                    "args": "divides e a",
                    "id": "1.4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides e a ⊢ divides e a"
                },
                {
                    "args": "divides e b",
                    "id": "1.4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides e b ⊢ divides e b"
                },
                {
                    "args": "gcd_is_max",
                    "id": "1.4.3",
                    "prevs": [
                        "1.4.1",
                        "1.4.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides e a, divides e b, d = gcd a b ⊢ divides e (gcd a b)"
                },
                {
                    "args": "",
                    "id": "1.4.4",
                    "prevs": [
                        "1.4.0",
                        "1.4.1",
                        "1.4.2",
                        "1.4.3"
                    ],
                    "rule": "intros",
                    "th": "d = gcd a b ⊢ ∀e. divides e a ⟶ divides e b ⟶ divides e (gcd a b)"
                },
                {
                    "args": "conjI",
                    "id": "1.5",
                    "prevs": [
                        "1.3",
                        "1.4"
                    ],
                    "rule": "apply_theorem",
                    "th": "d = gcd a b ⊢ (divides (gcd a b) a ∧ divides (gcd a b) b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e (gcd a b))"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d)",
                    "id": "1.6",
                    "prevs": [
                        "1.0",
                        "1.5"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "d = gcd a b ⊢ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d)"
                },
                {
                    "args": "",
                    "id": "1.7",
                    "prevs": [
                        "1.0",
                        "1.6"
                    ],
                    "rule": "intros",
                    "th": "⊢ d = gcd a b ⟶ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d)"
                },
                {
                    "args": "iffI",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⟷ d = gcd a b"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "intros",
                    "th": "⊢ (divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⟷ d = gcd a b"
                }
            ],
            "prop": [
                "(divides d a ∧ divides d b) ∧ (∀e. divides e a ⟶ divides e b ⟶ divides e d) ⟷ ",
                "d = gcd a b"
            ],
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "iffI"
                },
                {
                    "goal_id": "0",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.1",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "0.0"
                    ],
                    "goal_id": "0.2",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "0.1"
                    ],
                    "goal_id": "0.3",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "divides_gcd"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_antisym"
                },
                {
                    "fact_ids": [
                        "0.2"
                    ],
                    "goal_id": "0.4",
                    "method_name": "apply_prev"
                },
                {
                    "goal_id": "0.4",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "0.5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "1",
                    "method_name": "introduction"
                },
                {
                    "fact_ids": [
                        "1.0"
                    ],
                    "goal_id": "1.1",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "1.1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "1.2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "1.4",
                    "method_name": "introduction",
                    "names": "e"
                },
                {
                    "goal_id": "1.4.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat",
                "d": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_equals",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides a m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides a m ⊢ divides a m"
                },
                {
                    "args": "divides a n",
                    "id": "1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides a n ⊢ divides a n"
                },
                {
                    "args": "∀b. divides b m ⟶ divides b n ⟶ divides b a",
                    "id": "2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀b. divides b m ⟶ divides b n ⟶ divides b a ⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b a"
                },
                {
                    "args": "conjI",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides a m, divides a n, ∀b. divides b m ⟶ divides b n ⟶ divides b a ⊢ divides a m ∧ divides a n"
                },
                {
                    "args": "conjI",
                    "id": "4",
                    "prevs": [
                        "3",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides a m, divides a n, ∀b. divides b m ⟶ divides b n ⟶ divides b a ⊢ (divides a m ∧ divides a n) ∧ (∀e. divides e m ⟶ divides e n ⟶ divides e a)"
                },
                {
                    "args": "gcd_unique, a = gcd m n",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "divides a m, divides a n, ∀b. divides b m ⟶ divides b n ⟶ divides b a ⊢ a = gcd m n"
                },
                {
                    "args": "eq_sym_eq, gcd m n = a",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides a m, divides a n, ∀b. divides b m ⟶ divides b n ⟶ divides b a ⊢ gcd m n = a"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "6"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides a m ⟶ divides a n ⟶ (∀b. divides b m ⟶ divides b n ⟶ divides b a) ⟶ gcd m n = a"
                }
            ],
            "prop": [
                "divides a m ",
                "⟶ divides a n ⟶ (∀b. divides b m ⟶ divides b n ⟶ divides b a) ⟶ gcd m n = a"
            ],
            "steps": [
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "goal_id": "3",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "gcd_unique"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "gcd_eq",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ ∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ ∀d. divides d u ∧ divides d v ⟷ divides d x ∧ divides d y"
                },
                {
                    "args": "gcd_divide1, {m: x, n: y}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd x y) x"
                },
                {
                    "args": "gcd_divides2, {m: x, n: y}",
                    "id": "3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd x y) y"
                },
                {
                    "args": "conjI",
                    "id": "4",
                    "prevs": [
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ divides (gcd x y) x ∧ divides (gcd x y) y"
                },
                {
                    "args": "divides (gcd x y) u ∧ divides (gcd x y) v",
                    "id": "5",
                    "prevs": [
                        "1",
                        "4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ divides (gcd x y) u ∧ divides (gcd x y) v"
                },
                {
                    "args": "divides_gcd, divides (gcd x y) (gcd u v)",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ divides (gcd x y) (gcd u v)"
                },
                {
                    "args": "gcd_divide1, {m: u, n: v}",
                    "id": "7",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd u v) u"
                },
                {
                    "args": "gcd_divides2, {m: u, n: v}",
                    "id": "8",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd u v) v"
                },
                {
                    "args": "conjI",
                    "id": "9",
                    "prevs": [
                        "7",
                        "8"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ divides (gcd u v) u ∧ divides (gcd u v) v"
                },
                {
                    "args": "divides (gcd u v) x ∧ divides (gcd u v) y",
                    "id": "10",
                    "prevs": [
                        "0",
                        "9"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ divides (gcd u v) x ∧ divides (gcd u v) y"
                },
                {
                    "args": "divides_gcd, divides (gcd u v) (gcd x y)",
                    "id": "11",
                    "prevs": [
                        "10"
                    ],
                    "rule": "rewrite_goal",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ divides (gcd u v) (gcd x y)"
                },
                {
                    "args": "divides_antisym",
                    "id": "12",
                    "prevs": [
                        "6",
                        "11"
                    ],
                    "rule": "apply_theorem",
                    "th": "∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v ⊢ gcd x y = gcd u v"
                },
                {
                    "args": "",
                    "id": "13",
                    "prevs": [
                        "0",
                        "12"
                    ],
                    "rule": "intros",
                    "th": "⊢ (∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v) ⟶ gcd x y = gcd u v"
                }
            ],
            "prop": "(∀d. divides d x ∧ divides d y ⟷ divides d u ∧ divides d v) ⟶ gcd x y = gcd u v",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_antisym"
                },
                {
                    "goal_id": "1",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_gcd"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "7",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_gcd"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "conjI"
                },
                {
                    "goal_id": "7",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "8",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                }
            ],
            "ty": "thm",
            "vars": {
                "u": "nat",
                "v": "nat",
                "x": "nat",
                "y": "nat"
            }
        },
        {
            "name": "gcd_comm",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_divides2, {m: n, n: m}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd n m) m"
                },
                {
                    "args": "gcd_divide1, {m: n, n: m}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd n m) n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b (gcd n m)"
                },
                {
                    "args": "b, nat",
                    "id": "2.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b m",
                    "id": "2.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b m ⊢ divides b m"
                },
                {
                    "args": "divides b n",
                    "id": "2.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b n ⊢ divides b n"
                },
                {
                    "args": "gcd_is_max",
                    "id": "2.3",
                    "prevs": [
                        "2.2",
                        "2.1"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b m, divides b n ⊢ divides b (gcd n m)"
                },
                {
                    "args": "",
                    "id": "2.4",
                    "prevs": [
                        "2.0",
                        "2.1",
                        "2.2",
                        "2.3"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b (gcd n m)"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd m n = gcd n m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd m n = gcd n m"
                }
            ],
            "prop": "gcd m n = gcd n m",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "2",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "goal_id": "2.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "gcd_zero_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides_zero, {n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n 0"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "∀b. divides b 0 ⟶ divides b n ⟶ divides b n",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀b. divides b 0 ⟶ divides b n ⟶ divides b n"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd 0 n = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd 0 n = n"
                }
            ],
            "prop": "gcd 0 n = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_zero"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_rewrite"
            ],
            "name": "gcd_zero_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_zero_left, gcd 0 n = n",
                    "id": "0",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ gcd 0 n = n"
                },
                {
                    "args": "gcd_comm, gcd n 0 = n",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "rewrite_goal",
                    "th": "⊢ gcd n 0 = n"
                },
                {
                    "args": "",
                    "id": "2",
                    "prevs": [
                        "1"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd n 0 = n"
                }
            ],
            "prop": "gcd n 0 = n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "",
                    "theorem": "gcd_comm"
                },
                {
                    "goal_id": "0",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "gcd_zero_left"
                }
            ],
            "ty": "thm",
            "vars": {
                "n": "nat"
            }
        },
        {
            "name": "gcd_assoc",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_divide1, {m: k, n: gcd m n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k (gcd m n)) k"
                },
                {
                    "args": "gcd_divides2, {m: k, n: gcd m n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k (gcd m n)) (gcd m n)"
                },
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "divides_trans",
                    "id": "3",
                    "prevs": [
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd k (gcd m n)) m"
                },
                {
                    "args": "gcd_is_max",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd k (gcd m n)) (gcd k m)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_trans",
                    "id": "6",
                    "prevs": [
                        "1",
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd k (gcd m n)) n"
                },
                {
                    "args": "",
                    "id": "7",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b (gcd k m) ⟶ divides b n ⟶ divides b (gcd k (gcd m n))"
                },
                {
                    "args": "b, nat",
                    "id": "7.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b (gcd k m)",
                    "id": "7.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (gcd k m) ⊢ divides b (gcd k m)"
                },
                {
                    "args": "divides b n",
                    "id": "7.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b n ⊢ divides b n"
                },
                {
                    "args": "gcd_divide1, {m: k, n: m}",
                    "id": "7.3",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k m) k"
                },
                {
                    "args": "divides_trans",
                    "id": "7.4",
                    "prevs": [
                        "7.1",
                        "7.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b k"
                },
                {
                    "args": "gcd_divides2, {m: k, n: m}",
                    "id": "7.5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd k m) m"
                },
                {
                    "args": "divides_trans",
                    "id": "7.6",
                    "prevs": [
                        "7.1",
                        "7.5"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b m"
                },
                {
                    "args": "gcd_is_max",
                    "id": "7.7",
                    "prevs": [
                        "7.6",
                        "7.2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b (gcd m n)"
                },
                {
                    "args": "gcd_is_max",
                    "id": "7.8",
                    "prevs": [
                        "7.4",
                        "7.7"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b (gcd k m), divides b n ⊢ divides b (gcd k (gcd m n))"
                },
                {
                    "args": "",
                    "id": "7.9",
                    "prevs": [
                        "7.0",
                        "7.1",
                        "7.2",
                        "7.8"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b (gcd k m) ⟶ divides b n ⟶ divides b (gcd k (gcd m n))"
                },
                {
                    "args": "gcd_equals",
                    "id": "8",
                    "prevs": [
                        "4",
                        "6",
                        "7"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd (gcd k m) n = gcd k (gcd m n)"
                },
                {
                    "args": "",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd (gcd k m) n = gcd k (gcd m n)"
                }
            ],
            "prop": "gcd (gcd k m) n = gcd k (gcd m n)",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "param_m": "gcd m n",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "param_m": "gcd m n",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "7",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "7.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "7.5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "7.1"
                    ],
                    "goal_id": "7.5",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_trans"
                },
                {
                    "goal_id": "7.5",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "bezout_ged",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "bezout, {a: a, b: b}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)"
                },
                {
                    "args": "d, nat",
                    "id": "1",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)",
                    "id": "4",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)"
                },
                {
                    "args": "conjD1",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "6",
                    "prevs": [
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * x - b * y = d ∨ b * x - a * y = d"
                },
                {
                    "args": "divides_gcd",
                    "id": "7",
                    "prevs": [
                        "5"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ divides d (gcd a b)"
                },
                {
                    "args": "divides_def",
                    "id": "8",
                    "prevs": [
                        "7"
                    ],
                    "rule": "rewrite_fact",
                    "th": "(divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ ∃k. gcd a b = d * k"
                },
                {
                    "args": "k, nat",
                    "id": "9",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "gcd a b = d * k",
                    "id": "10",
                    "prevs": [],
                    "rule": "assume",
                    "th": "gcd a b = d * k ⊢ gcd a b = d * k"
                },
                {
                    "args": "",
                    "id": "11",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * x - b * y = d ⟶ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "a * x - b * y = d",
                    "id": "11.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "a * x - b * y = d ⊢ a * x - b * y = d"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "11.1",
                    "prevs": [
                        "11.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "a * x - b * y = d ⊢ d = a * x - b * y"
                },
                {
                    "args": "left_sub_distrib, k * (a * x) - k * (b * y) = k * (a * x - b * y)",
                    "id": "11.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * (a * x) - k * (b * y) = k * (a * x - b * y)"
                },
                {
                    "args": "mult_comm, a * x * k - b * y * k = (a * x - b * y) * k",
                    "id": "11.3",
                    "prevs": [
                        "11.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "gcd a b = d * k, a * x - b * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * x * k - b * y * k = (a * x - b * y) * k"
                },
                {
                    "args": "mult_assoc, a * (x * k) - b * (y * k) = (a * x - b * y) * k",
                    "id": "11.4",
                    "prevs": [
                        "11.3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "gcd a b = d * k, a * x - b * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * (x * k) - b * (y * k) = (a * x - b * y) * k"
                },
                {
                    "args": "a * (x * k) - b * (y * k) = d * k",
                    "id": "11.5",
                    "prevs": [
                        "11.1",
                        "11.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "gcd a b = d * k, a * x - b * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * (x * k) - b * (y * k) = d * k"
                },
                {
                    "args": "disjI1, {A: a * (x * k) - b * (y * k) = d * k, B: b * (x * k) - a * (y * k) = d * k}",
                    "id": "11.6",
                    "prevs": [
                        "11.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "gcd a b = d * k, a * x - b * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "",
                    "id": "11.7",
                    "prevs": [
                        "11.0",
                        "11.6"
                    ],
                    "rule": "intros",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * x - b * y = d ⟶ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "",
                    "id": "12",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ b * x - a * y = d ⟶ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "b * x - a * y = d",
                    "id": "12.0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "b * x - a * y = d ⊢ b * x - a * y = d"
                },
                {
                    "args": "eq_sym_eq",
                    "id": "12.1",
                    "prevs": [
                        "12.0"
                    ],
                    "rule": "rewrite_fact",
                    "th": "b * x - a * y = d ⊢ d = b * x - a * y"
                },
                {
                    "args": "left_sub_distrib, k * (b * x) - k * (a * y) = k * (b * x - a * y)",
                    "id": "12.2",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ k * (b * x) - k * (a * y) = k * (b * x - a * y)"
                },
                {
                    "args": "mult_comm, b * x * k - a * y * k = (b * x - a * y) * k",
                    "id": "12.3",
                    "prevs": [
                        "12.2"
                    ],
                    "rule": "rewrite_goal",
                    "th": "gcd a b = d * k, b * x - a * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ b * x * k - a * y * k = (b * x - a * y) * k"
                },
                {
                    "args": "mult_assoc, b * (x * k) - a * (y * k) = (b * x - a * y) * k",
                    "id": "12.4",
                    "prevs": [
                        "12.3"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "gcd a b = d * k, b * x - a * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ b * (x * k) - a * (y * k) = (b * x - a * y) * k"
                },
                {
                    "args": "b * (x * k) - a * (y * k) = d * k",
                    "id": "12.5",
                    "prevs": [
                        "12.1",
                        "12.4"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "gcd a b = d * k, b * x - a * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "disjI2, {A: a * (x * k) - b * (y * k) = d * k, B: b * (x * k) - a * (y * k) = d * k}",
                    "id": "12.6",
                    "prevs": [
                        "12.5"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "gcd a b = d * k, b * x - a * y = d, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "",
                    "id": "12.7",
                    "prevs": [
                        "12.0",
                        "12.6"
                    ],
                    "rule": "intros",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ b * x - a * y = d ⟶ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "disjE",
                    "id": "13",
                    "prevs": [
                        "6",
                        "11",
                        "12"
                    ],
                    "rule": "apply_theorem",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * (x * k) - b * (y * k) = d * k ∨ b * (x * k) - a * (y * k) = d * k"
                },
                {
                    "args": "a * (x * k) - b * (y * k) = gcd a b ∨ b * (x * k) - a * (y * k) = gcd a b",
                    "id": "14",
                    "prevs": [
                        "10",
                        "13"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ a * (x * k) - b * (y * k) = gcd a b ∨ b * (x * k) - a * (y * k) = gcd a b"
                },
                {
                    "args": "exI, {P: λy. a * (x * k) - b * y = gcd a b ∨ b * (x * k) - a * y = gcd a b, a: y * k}",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ ∃a1. a * (x * k) - b * a1 = gcd a b ∨ b * (x * k) - a * a1 = gcd a b"
                },
                {
                    "args": "exI, {P: λx. ∃y. a * x - b * y = gcd a b ∨ b * x - a * y = gcd a b, a: x * k}",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "gcd a b = d * k, (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d) ⊢ ∃a1. ∃y. a * a1 - b * y = gcd a b ∨ b * a1 - a * y = gcd a b"
                },
                {
                    "args": "∃k. gcd a b = d * k, ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ (a * x - b * y = d ∨ b * x - a * y = d)",
                    "id": "17",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "8",
                        "9",
                        "10",
                        "16"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∃x. ∃y. a * x - b * y = gcd a b ∨ b * x - a * y = gcd a b"
                }
            ],
            "prop": "∃x. ∃y. a * x - b * y = gcd a b ∨ b * x - a * y = gcd a b",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_forward_step",
                    "param_a": "a",
                    "param_b": "b",
                    "theorem": "bezout"
                },
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "exists_elim",
                    "names": "d, x, y"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "5",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "4"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "7",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "divides_gcd"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "goal_id": "11",
                    "method_name": "inst_exists_goal",
                    "s": "x * k"
                },
                {
                    "goal_id": "11",
                    "method_name": "inst_exists_goal",
                    "s": "y * k"
                },
                {
                    "fact_ids": [
                        "10"
                    ],
                    "goal_id": "11",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "11",
                    "method_name": "apply_backward_step",
                    "theorem": "disjE"
                },
                {
                    "goal_id": "11",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "11.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI1"
                },
                {
                    "fact_ids": [
                        "11.0"
                    ],
                    "goal_id": "11.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "11.1"
                    ],
                    "goal_id": "11.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "11.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "11.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "11.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "left_sub_distrib"
                },
                {
                    "goal_id": "12",
                    "method_name": "introduction"
                },
                {
                    "goal_id": "12.1",
                    "method_name": "apply_backward_step",
                    "theorem": "disjI2"
                },
                {
                    "fact_ids": [
                        "12.0"
                    ],
                    "goal_id": "12.1",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "eq_sym_eq"
                },
                {
                    "fact_ids": [
                        "12.1"
                    ],
                    "goal_id": "12.2",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "12.2",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "mult_assoc"
                },
                {
                    "goal_id": "12.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "mult_comm"
                },
                {
                    "goal_id": "12.2",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "left_sub_distrib"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat"
            }
        },
        {
            "attributes": [
                "hint_backward"
            ],
            "name": "bezout_ged_strong",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "¬(a = 0)",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "¬(a = 0) ⊢ ¬(a = 0)"
                },
                {
                    "args": "bezout_add_strong, {b: b}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0) ⊢ ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "d, nat",
                    "id": "2",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR d"
                },
                {
                    "args": "x, nat",
                    "id": "3",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR x"
                },
                {
                    "args": "y, nat",
                    "id": "4",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR y"
                },
                {
                    "args": "(divides d a ∧ divides d b) ∧ a * x = b * y + d",
                    "id": "5",
                    "prevs": [],
                    "rule": "assume",
                    "th": "(divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ (divides d a ∧ divides d b) ∧ a * x = b * y + d"
                },
                {
                    "args": "conjD1",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ divides d a ∧ divides d b"
                },
                {
                    "args": "conjD2",
                    "id": "7",
                    "prevs": [
                        "5"
                    ],
                    "rule": "apply_theorem",
                    "th": "(divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ a * x = b * y + d"
                },
                {
                    "args": "divides_gcd",
                    "id": "8",
                    "prevs": [
                        "6"
                    ],
                    "rule": "rewrite_fact_sym",
                    "th": "(divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ divides d (gcd a b)"
                },
                {
                    "args": "divides_def",
                    "id": "9",
                    "prevs": [
                        "8"
                    ],
                    "rule": "rewrite_fact",
                    "th": "(divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ ∃k. gcd a b = d * k"
                },
                {
                    "args": "k, nat",
                    "id": "10",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k"
                },
                {
                    "args": "gcd a b = d * k",
                    "id": "11",
                    "prevs": [],
                    "rule": "assume",
                    "th": "gcd a b = d * k ⊢ gcd a b = d * k"
                },
                {
                    "args": "distrib_r, (b * y + d) * k = b * y * k + d * k",
                    "id": "12",
                    "prevs": [],
                    "rule": "rewrite_goal",
                    "th": "⊢ (b * y + d) * k = b * y * k + d * k"
                },
                {
                    "args": "a * x * k = b * y * k + d * k",
                    "id": "13",
                    "prevs": [
                        "7",
                        "12"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(a = 0), gcd a b = d * k, (divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ a * x * k = b * y * k + d * k"
                },
                {
                    "args": "mult_assoc, a * (x * k) = b * (y * k) + d * k",
                    "id": "14",
                    "prevs": [
                        "13"
                    ],
                    "rule": "rewrite_goal_sym",
                    "th": "¬(a = 0), gcd a b = d * k, (divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ a * (x * k) = b * (y * k) + d * k"
                },
                {
                    "args": "exI, {P: λy. a * (x * k) = b * y + d * k, a: y * k}",
                    "id": "15",
                    "prevs": [
                        "14"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0), gcd a b = d * k, (divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ ∃a1. a * (x * k) = b * a1 + d * k"
                },
                {
                    "args": "exI, {P: λx. ∃y. a * x = b * y + d * k, a: x * k}",
                    "id": "16",
                    "prevs": [
                        "15"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "¬(a = 0), gcd a b = d * k, (divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ ∃a1. ∃y. a * a1 = b * y + d * k"
                },
                {
                    "args": "∃x. ∃y. a * x = b * y + gcd a b",
                    "id": "17",
                    "prevs": [
                        "11",
                        "16"
                    ],
                    "rule": "rewrite_goal_with_prev",
                    "th": "¬(a = 0), gcd a b = d * k, (divides d a ∧ divides d b) ∧ a * x = b * y + d ⊢ ∃x. ∃y. a * x = b * y + gcd a b"
                },
                {
                    "args": "∃k. gcd a b = d * k, ∃d. ∃x. ∃y. (divides d a ∧ divides d b) ∧ a * x = b * y + d",
                    "id": "18",
                    "prevs": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "9",
                        "10",
                        "11",
                        "17"
                    ],
                    "rule": "intros",
                    "th": "⊢ ¬(a = 0) ⟶ (∃x. ∃y. a * x = b * y + gcd a b)"
                }
            ],
            "prop": "¬(a = 0) ⟶ (∃x. ∃y. a * x = b * y + gcd a b)",
            "steps": [
                {
                    "fact_ids": [
                        "0"
                    ],
                    "goal_id": "1",
                    "method_name": "apply_forward_step",
                    "param_b": "b",
                    "theorem": "bezout_add_strong"
                },
                {
                    "fact_ids": [
                        "1"
                    ],
                    "goal_id": "2",
                    "method_name": "exists_elim",
                    "names": "d,x,y"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "6",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD1"
                },
                {
                    "fact_ids": [
                        "5"
                    ],
                    "goal_id": "7",
                    "method_name": "apply_forward_step",
                    "theorem": "conjD2"
                },
                {
                    "fact_ids": [
                        "6"
                    ],
                    "goal_id": "8",
                    "method_name": "rewrite_fact",
                    "sym": "true",
                    "theorem": "divides_gcd"
                },
                {
                    "fact_ids": [
                        "8"
                    ],
                    "goal_id": "9",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "9"
                    ],
                    "goal_id": "10",
                    "method_name": "exists_elim",
                    "names": "k"
                },
                {
                    "fact_ids": [
                        "11"
                    ],
                    "goal_id": "12",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "12",
                    "method_name": "inst_exists_goal",
                    "s": "x*k"
                },
                {
                    "goal_id": "12",
                    "method_name": "inst_exists_goal",
                    "s": "y*k"
                },
                {
                    "goal_id": "12",
                    "method_name": "rewrite_goal",
                    "sym": "true",
                    "theorem": "mult_assoc"
                },
                {
                    "fact_ids": [
                        "7"
                    ],
                    "goal_id": "12",
                    "method_name": "rewrite_goal_with_prev"
                },
                {
                    "goal_id": "12",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "distrib_r"
                }
            ],
            "ty": "thm",
            "vars": {
                "a": "nat",
                "b": "nat"
            }
        },
        {
            "name": "gcd_equal_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides m n",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides m n ⊢ divides m n"
                },
                {
                    "args": "divides_self, {n: m}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides m m"
                },
                {
                    "args": "∀b. divides b m ⟶ divides b n ⟶ divides b m",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b m"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "1",
                        "0",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides m n ⊢ gcd m n = m"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides m n ⟶ gcd m n = m"
                }
            ],
            "prop": "divides m n ⟶ gcd m n = m",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_equal_right",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "divides n m",
                    "id": "0",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides n m ⊢ divides n m"
                },
                {
                    "args": "divides_self, {n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides n n"
                },
                {
                    "args": "∀b. divides b m ⟶ divides b n ⟶ divides b n",
                    "id": "2",
                    "prevs": [],
                    "rule": "trivial",
                    "th": "⊢ ∀b. divides b m ⟶ divides b n ⟶ divides b n"
                },
                {
                    "args": "gcd_equals",
                    "id": "3",
                    "prevs": [
                        "0",
                        "1",
                        "2"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides n m ⊢ gcd m n = n"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [
                        "0",
                        "3"
                    ],
                    "rule": "intros",
                    "th": "⊢ divides n m ⟶ gcd m n = n"
                }
            ],
            "prop": "divides n m ⟶ gcd m n = n",
            "steps": [
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_self"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_mult_left",
            "num_gaps": 1,
            "proof": [
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "divides_mult_left, {k: k, m: gcd m n, n: m}",
                    "id": "1",
                    "prevs": [
                        "0"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (k * gcd m n) (k * m)"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "2",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_mult_left, {k: k, m: gcd m n, n: n}",
                    "id": "3",
                    "prevs": [
                        "2"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (k * gcd m n) (k * n)"
                },
                {
                    "args": "",
                    "id": "4",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b (k * m) ⟶ divides b (k * n) ⟶ divides b (k * gcd m n)"
                },
                {
                    "args": "b, nat",
                    "id": "4.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b (k * m)",
                    "id": "4.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (k * m) ⊢ divides b (k * m)"
                },
                {
                    "args": "divides b (k * n)",
                    "id": "4.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (k * n) ⊢ divides b (k * n)"
                },
                {
                    "args": "divides_def",
                    "id": "4.3",
                    "prevs": [
                        "4.1"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides b (k * m) ⊢ ∃k1. k * m = b * k1"
                },
                {
                    "args": "divides_def",
                    "id": "4.4",
                    "prevs": [
                        "4.2"
                    ],
                    "rule": "rewrite_fact",
                    "th": "divides b (k * n) ⊢ ∃k1. k * n = b * k1"
                },
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "4.5",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "k1, nat",
                    "id": "4.6",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k1"
                },
                {
                    "args": "k * m = b * k1",
                    "id": "4.7",
                    "prevs": [],
                    "rule": "assume",
                    "th": "k * m = b * k1 ⊢ k * m = b * k1"
                },
                {
                    "args": "divides_def",
                    "id": "4.8",
                    "prevs": [
                        "4.5"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ ∃k. m = gcd m n * k"
                },
                {
                    "args": "k2, nat",
                    "id": "4.9",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k2"
                },
                {
                    "args": "m = gcd m n * k2",
                    "id": "4.10",
                    "prevs": [],
                    "rule": "assume",
                    "th": "m = gcd m n * k2 ⊢ m = gcd m n * k2"
                },
                {
                    "args": "",
                    "id": "4.11",
                    "prevs": [
                        "4.10",
                        "4.7"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = gcd m n * k2, k * m = b * k1 ⊢ k * (gcd m n * k2) = b * k1"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "4.12",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_def",
                    "id": "4.13",
                    "prevs": [
                        "4.12"
                    ],
                    "rule": "rewrite_fact",
                    "th": "⊢ ∃k. n = gcd m n * k"
                },
                {
                    "args": "k3, nat",
                    "id": "4.14",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR k3"
                },
                {
                    "args": "n = gcd m n * k3",
                    "id": "4.15",
                    "prevs": [],
                    "rule": "assume",
                    "th": "n = gcd m n * k3 ⊢ n = gcd m n * k3"
                },
                {
                    "args": "",
                    "id": "4.16",
                    "prevs": [
                        "4.10",
                        "4.7"
                    ],
                    "rule": "rewrite_fact_with_prev",
                    "th": "m = gcd m n * k2, k * m = b * k1 ⊢ k * (gcd m n * k2) = b * k1"
                },
                {
                    "args": "",
                    "id": "4.17",
                    "prevs": [],
                    "rule": "sorry",
                    "th": "divides b (k * m), divides b (k * n), m = gcd m n * k2, n = gcd m n * k3, k * m = b * k1 ⊢ k * gcd m n = b * (k * k2)"
                },
                {
                    "args": "exI, {P: λk1. k * gcd m n = b * k1, a: k * k2}",
                    "id": "4.18",
                    "prevs": [
                        "4.17"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides b (k * m), divides b (k * n), m = gcd m n * k2, n = gcd m n * k3, k * m = b * k1 ⊢ ∃a1. k * gcd m n = b * a1"
                },
                {
                    "args": "divides_def, divides b (k * gcd m n)",
                    "id": "4.19",
                    "prevs": [
                        "4.18"
                    ],
                    "rule": "rewrite_goal",
                    "th": "divides b (k * m), divides b (k * n), m = gcd m n * k2, n = gcd m n * k3, k * m = b * k1 ⊢ divides b (k * gcd m n)"
                },
                {
                    "args": "∃k. n = gcd m n * k, ∃k. m = gcd m n * k, ∃k1. k * m = b * k1",
                    "id": "4.20",
                    "prevs": [
                        "4.0",
                        "4.1",
                        "4.2",
                        "4.3",
                        "4.6",
                        "4.7",
                        "4.8",
                        "4.9",
                        "4.10",
                        "4.13",
                        "4.14",
                        "4.15",
                        "4.19"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b (k * m) ⟶ divides b (k * n) ⟶ divides b (k * gcd m n)"
                },
                {
                    "args": "gcd_equals",
                    "id": "5",
                    "prevs": [
                        "1",
                        "3",
                        "4"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd (k * m) (k * n) = k * gcd m n"
                },
                {
                    "args": "",
                    "id": "6",
                    "prevs": [
                        "5"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd (k * m) (k * n) = k * gcd m n"
                }
            ],
            "prop": "gcd (k * m) (k * n) = k * gcd m n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_mult_left"
                },
                {
                    "goal_id": "2",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "4",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "fact_ids": [
                        "4.1"
                    ],
                    "goal_id": "4.3",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "4.2"
                    ],
                    "goal_id": "4.4",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "goal_id": "4.5",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "gcd_divide1"
                },
                {
                    "fact_ids": [
                        "4.3"
                    ],
                    "goal_id": "4.6",
                    "method_name": "exists_elim",
                    "names": "k1"
                },
                {
                    "fact_ids": [
                        "4.5"
                    ],
                    "goal_id": "4.8",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "4.8"
                    ],
                    "goal_id": "4.9",
                    "method_name": "exists_elim",
                    "names": "k2"
                },
                {
                    "fact_ids": [
                        "4.10",
                        "4.7"
                    ],
                    "goal_id": "4.11",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "4.12",
                    "method_name": "apply_forward_step",
                    "param_m": "m",
                    "param_n": "n",
                    "theorem": "gcd_divides2"
                },
                {
                    "fact_ids": [
                        "4.12"
                    ],
                    "goal_id": "4.13",
                    "method_name": "rewrite_fact",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "4.13"
                    ],
                    "goal_id": "4.14",
                    "method_name": "exists_elim",
                    "names": "k3"
                },
                {
                    "goal_id": "4.16",
                    "method_name": "rewrite_goal",
                    "sym": "false",
                    "theorem": "divides_def"
                },
                {
                    "fact_ids": [
                        "4.10",
                        "4.7"
                    ],
                    "goal_id": "4.16",
                    "method_name": "rewrite_fact_with_prev"
                },
                {
                    "goal_id": "4.17",
                    "method_name": "inst_exists_goal",
                    "s": "k * k2"
                }
            ],
            "ty": "thm",
            "vars": {
                "k": "nat",
                "m": "nat",
                "n": "nat"
            }
        },
        {
            "name": "gcd_add_left",
            "num_gaps": 0,
            "proof": [
                {
                    "args": "gcd_divide1, {m: m, n: n}",
                    "id": "0",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) m"
                },
                {
                    "args": "gcd_divides2, {m: m, n: n}",
                    "id": "1",
                    "prevs": [],
                    "rule": "apply_theorem_for",
                    "th": "⊢ divides (gcd m n) n"
                },
                {
                    "args": "divides_sum",
                    "id": "2",
                    "prevs": [
                        "0",
                        "1"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ divides (gcd m n) (m + n)"
                },
                {
                    "args": "",
                    "id": "3",
                    "prevs": [],
                    "rule": "subproof",
                    "th": "⊢ ∀b. divides b m ⟶ divides b (m + n) ⟶ divides b (gcd m n)"
                },
                {
                    "args": "b, nat",
                    "id": "3.0",
                    "prevs": [],
                    "rule": "variable",
                    "th": "⊢ _VAR b"
                },
                {
                    "args": "divides b m",
                    "id": "3.1",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b m ⊢ divides b m"
                },
                {
                    "args": "divides b (m + n)",
                    "id": "3.2",
                    "prevs": [],
                    "rule": "assume",
                    "th": "divides b (m + n) ⊢ divides b (m + n)"
                },
                {
                    "args": "divides_sum2, {k: b, m: m, n: n}",
                    "id": "3.3",
                    "prevs": [
                        "3.2",
                        "3.1"
                    ],
                    "rule": "apply_theorem_for",
                    "th": "divides b (m + n), divides b m ⊢ divides b n"
                },
                {
                    "args": "gcd_is_max",
                    "id": "3.4",
                    "prevs": [
                        "3.1",
                        "3.3"
                    ],
                    "rule": "apply_theorem",
                    "th": "divides b m, divides b (m + n) ⊢ divides b (gcd m n)"
                },
                {
                    "args": "",
                    "id": "3.5",
                    "prevs": [
                        "3.0",
                        "3.1",
                        "3.2",
                        "3.4"
                    ],
                    "rule": "intros",
                    "th": "⊢ ∀b. divides b m ⟶ divides b (m + n) ⟶ divides b (gcd m n)"
                },
                {
                    "args": "gcd_equals",
                    "id": "4",
                    "prevs": [
                        "0",
                        "2",
                        "3"
                    ],
                    "rule": "apply_theorem",
                    "th": "⊢ gcd m (m + n) = gcd m n"
                },
                {
                    "args": "",
                    "id": "5",
                    "prevs": [
                        "4"
                    ],
                    "rule": "intros",
                    "th": "⊢ gcd m (m + n) = gcd m n"
                }
            ],
            "prop": "gcd m (m + n) = gcd m n",
            "steps": [
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_equals"
                },
                {
                    "goal_id": "0",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divide1"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "divides_sum"
                },
                {
                    "goal_id": "1",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_divides2"
                },
                {
                    "goal_id": "3",
                    "method_name": "introduction",
                    "names": "b"
                },
                {
                    "goal_id": "3.3",
                    "method_name": "apply_backward_step",
                    "theorem": "gcd_is_max"
                },
                {
                    "fact_ids": [
                        "3.2",
                        "3.1"
                    ],
                    "goal_id": "3.3",
                    "method_name": "apply_forward_step",
                    "theorem": "divides_sum2"
                }
            ],
            "ty": "thm",
            "vars": {
                "m": "nat",
                "n": "nat"
            }
        }
    ],
    "description": "Greatest common divisors",
    "imports": [
        "set"
    ],
    "name": "gcd"
}