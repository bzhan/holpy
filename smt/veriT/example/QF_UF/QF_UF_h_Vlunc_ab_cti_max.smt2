(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_Vlunc
query-maker: "Yices 2"
query-time: 4.526000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$8 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Add_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun Extract_1_5_5_8 (utt$8 ) Bool)
(declare-fun Sub_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun y$1 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$123 () Bool)
(declare-fun y$127 () Bool)
(declare-fun y$128 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$134 () Bool)
(declare-fun y$137 () Bool)
(declare-fun y$142 () Bool)
(declare-fun y$149 () Bool)
(declare-fun y$166 () Bool)
(declare-fun y$167 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$175 () Bool)
(declare-fun y$176 () Bool)
(declare-fun y$179 () Bool)
(declare-fun y$182 () Bool)
(declare-fun y$187 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$194 () Bool)
(declare-fun y$211 () Bool)
(declare-fun y$212 () Bool)
(declare-fun y$213 () Bool)
(declare-fun y$220 () Bool)
(declare-fun y$221 () Bool)
(declare-fun y$222 () Bool)
(declare-fun y$223 () Bool)
(declare-fun y$224 () Bool)
(declare-fun y$235 () Bool)
(declare-fun y$236 () Bool)
(declare-fun y$237 () Bool)
(declare-fun y$238 () Bool)
(declare-fun y$239 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$251 () Bool)
(declare-fun y$257 () Bool)
(declare-fun y$258 () Bool)
(declare-fun y$259 () Bool)
(declare-fun y$260 () Bool)
(declare-fun y$261 () Bool)
(declare-fun y$262 () Bool)
(declare-fun y$268 () Bool)
(declare-fun y$270 () Bool)
(declare-fun y$271 () Bool)
(declare-fun y$272 () Bool)
(declare-fun y$273 () Bool)
(declare-fun y$276 () Bool)
(declare-fun y$284 () Bool)
(declare-fun y$285 () Bool)
(declare-fun y$286 () Bool)
(declare-fun y$287 () Bool)
(declare-fun y$290 () Bool)
(declare-fun y$291 () Bool)
(declare-fun y$292 () Bool)
(declare-fun y$293 () Bool)
(declare-fun y$294 () Bool)
(declare-fun y$295 () Bool)
(declare-fun y$296 () Bool)
(declare-fun y$297 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$91 () Bool)
(declare-fun y$c.Ccmd () Bool)
(declare-fun y$c.Ccmd$next () Bool)
(declare-fun y$c.Ccmd$next_rhs () Bool)
(declare-fun y$c.Ccmd$next_rhs_op () Bool)
(declare-fun y$c.Lcmd () Bool)
(declare-fun y$c.Lcmd$next () Bool)
(declare-fun y$c.Lcmd$next_rhs () Bool)
(declare-fun y$c.Lcmd$next_rhs_op () Bool)
(declare-fun y$c.Ncmd () Bool)
(declare-fun y$c.Ncmd$next () Bool)
(declare-fun y$c.Ncmd$next_rhs () Bool)
(declare-fun y$c.Ncmd$next_rhs_op () Bool)
(declare-fun y$c.Ucmd () Bool)
(declare-fun y$c.Ucmd$next () Bool)
(declare-fun y$c.Ucmd$next_rhs () Bool)
(declare-fun y$c.Ucmd$next_rhs_op () Bool)
(declare-fun y$c.prev () utt$8)
(declare-fun y$c.prev$next () utt$8)
(declare-fun y$c.prev$next_rhs () utt$8)
(declare-fun y$c.prev$next_rhs_op () utt$8)
(declare-fun y$dataIn () utt$8)
(declare-fun y$dataOut () utt$8)
(declare-fun y$dataOut$next () utt$8)
(declare-fun y$dataOut$next_rhs () utt$8)
(declare-fun y$dataOut$next_rhs_op () utt$8)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s1 () Bool)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n27s8 () utt$8)
(declare-fun y$n32s8 () utt$8)
(declare-fun y$n67s8 () utt$8)
(declare-fun y$n78s8 () utt$8)
(declare-fun y$n85s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$regIn () utt$8)
(declare-fun y$regIn$next () utt$8)
(declare-fun y$regIn$next_rhs () utt$8)
(declare-fun y$regIn$next_rhs_op () utt$8)
(declare-fun y$reset () Bool)
(declare-fun y$reset$next () Bool)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$14$next () Bool)
(declare-fun y$s$14$next_op () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$15 () Bool)
(declare-fun y$s$15$next () Bool)
(declare-fun y$s$15$next_op () Bool)
(declare-fun y$s$15_op () Bool)
(declare-fun y$s$16 () Bool)
(declare-fun y$s$16$next () Bool)
(declare-fun y$s$16$next_op () Bool)
(declare-fun y$s$16_op () Bool)
(declare-fun y$s$17 () Bool)
(declare-fun y$s$17$next () Bool)
(declare-fun y$s$17$next_op () Bool)
(declare-fun y$s$17_op () Bool)
(declare-fun y$s$18 () Bool)
(declare-fun y$s$18$next () Bool)
(declare-fun y$s$18$next_op () Bool)
(declare-fun y$s$18_op () Bool)
(declare-fun y$s$19 () Bool)
(declare-fun y$s$19$next () Bool)
(declare-fun y$s$19$next_op () Bool)
(declare-fun y$s$19_op () Bool)
(declare-fun y$s$20 () Bool)
(declare-fun y$s$20$next () Bool)
(declare-fun y$s$20$next_op () Bool)
(declare-fun y$s$20_op () Bool)
(declare-fun y$s$21 () Bool)
(declare-fun y$s$21$next () Bool)
(declare-fun y$s$21$next_op () Bool)
(declare-fun y$s$21_op () Bool)
(declare-fun y$s$22 () Bool)
(declare-fun y$s$22$next () Bool)
(declare-fun y$s$22$next_op () Bool)
(declare-fun y$s$22_op () Bool)
(declare-fun y$s$23 () Bool)
(declare-fun y$s$23$next () Bool)
(declare-fun y$s$23$next_op () Bool)
(declare-fun y$s$23_op () Bool)
(declare-fun y$s$24 () Bool)
(declare-fun y$s$24$next () Bool)
(declare-fun y$s$24$next_op () Bool)
(declare-fun y$s$24_op () Bool)
(declare-fun y$s$30 () Bool)
(declare-fun y$s$30_op () Bool)
(declare-fun y$s$31 () Bool)
(declare-fun y$s$31_op () Bool)
(declare-fun y$s$32 () Bool)
(declare-fun y$s$32_op () Bool)
(declare-fun y$s$33 () Bool)
(declare-fun y$s$33_op () Bool)
(declare-fun y$s$34 () Bool)
(declare-fun y$s$34_op () Bool)
(declare-fun y$s$35 () Bool)
(declare-fun y$s$35_op () Bool)
(declare-fun y$s$36 () Bool)
(declare-fun y$s$36_op () Bool)
(declare-fun y$s$37 () Bool)
(declare-fun y$s$37_op () Bool)
(declare-fun y$s$40 () Bool)
(declare-fun y$s$40_op () Bool)
(declare-fun y$s$43 () Bool)
(declare-fun y$s$43_op () Bool)
(declare-fun y$s$44 () Bool)
(declare-fun y$s$44_op () Bool)
(declare-fun y$s$46 () Bool)
(declare-fun y$s$46_op () Bool)
(declare-fun y$s$47 () Bool)
(declare-fun y$s$47_op () Bool)
(declare-fun y$s$48 () Bool)
(declare-fun y$s$48_op () Bool)
(declare-fun y$s$50 () Bool)
(declare-fun y$s$50_op () Bool)
(declare-fun y$s$51 () Bool)
(declare-fun y$s$51_op () Bool)
(declare-fun y$s$53 () Bool)
(declare-fun y$s$53_op () Bool)
(declare-fun y$s$56 () Bool)
(declare-fun y$s$56_op () Bool)
(declare-fun y$s$60 () Bool)
(declare-fun y$s$60_op () Bool)
(declare-fun y$s$64 () Bool)
(declare-fun y$s$64_op () Bool)
(declare-fun y$s$65 () Bool)
(declare-fun y$s$65_op () Bool)
(declare-fun y$s$66 () Bool)
(declare-fun y$s$66_op () Bool)
(declare-fun y$s$67 () Bool)
(declare-fun y$s$67_op () Bool)
(declare-fun y$s$68 () Bool)
(declare-fun y$s$68_op () Bool)
(declare-fun y$s$72 () Bool)
(declare-fun y$s$72_op () Bool)
(declare-fun y$s$74 () utt$8)
(declare-fun y$s$74_op () utt$8)
(declare-fun y$s$78 () utt$8)
(declare-fun y$s$78_op () utt$8)
(declare-fun y$s$79 () utt$8)
(declare-fun y$s$79_op () utt$8)
(declare-fun y$s$81 () utt$8)
(declare-fun y$s$81_op () utt$8)
(declare-fun y$s$84 () utt$8)
(declare-fun y$s$84_op () utt$8)
(declare-fun y$s$85 () utt$8)
(declare-fun y$s$85_op () utt$8)
(declare-fun y$s$86 () utt$8)
(declare-fun y$s$86_op () utt$8)
(declare-fun y$s$87 () utt$8)
(declare-fun y$s$87_op () utt$8)
(declare-fun y$t.out () utt$8)
(declare-fun y$t.out_op () utt$8)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1$next () utt$32)
(declare-fun y$w$1$next_op () utt$32)
(declare-fun y$w$1_op () utt$32)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2$next () utt$32)
(declare-fun y$w$2$next_op () utt$32)
(declare-fun y$w$2_op () utt$32)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(declare-fun y$w$4 () utt$32)
(declare-fun y$w$4$next () utt$32)
(declare-fun y$w$4$next_op () utt$32)
(declare-fun y$w$4_op () utt$32)
(declare-fun y$w$5 () Bool)
(assert (distinct y$n0s8 y$n32s8 y$n27s8 y$n78s8 y$n67s8 y$n85s8))
(assert (not (= y$n1s32 y$n0s32)))
(assert (= y$w$1_op (Concat_32_1_31 y$c.Lcmd y$n0s31)))
(assert (= y$134 (= y$w$1_op y$n1s32)))
(assert (= y$w$2_op (Concat_32_1_31 y$c.Ucmd y$n0s31)))
(assert (= y$137 (= y$n1s32 y$w$2_op)))
(assert (= y$s$15_op (and y$134 y$137)))
(assert (= y$w$3_op (Concat_32_1_31 y$c.Ccmd y$n0s31)))
(assert (= y$142 (= y$n1s32 y$w$3_op)))
(assert (= y$s$16_op (and y$134 y$142)))
(assert (= y$s$21_op (or y$s$15_op y$s$16_op)))
(assert (= y$w$4_op (Concat_32_1_31 y$c.Ncmd y$n0s31)))
(assert (= y$149 (= y$n1s32 y$w$4_op)))
(assert (= y$s$14_op (and y$134 y$149)))
(assert (= y$s$20_op (or y$s$21_op y$s$14_op)))
(assert (= y$s$17_op (and y$137 y$142)))
(assert (= y$s$22_op (or y$s$20_op y$s$17_op)))
(assert (= y$s$18_op (and y$137 y$149)))
(assert (= y$s$23_op (or y$s$22_op y$s$18_op)))
(assert (= y$s$19_op (and y$142 y$149)))
(assert (= y$s$24_op (or y$s$23_op y$s$19_op)))
(assert (= y$s$24_op (not y$166)))
(assert (= y$167 (= y$prop y$166)))
(assert (= y$17 (Extract_1_5_5_8 y$regIn)))
(assert (= y$17 (not y$19)))
(assert (= y$s$81_op (Add_8_8_8 y$regIn y$n32s8)))
(assert (= y$s$78_op (ite y$19 y$s$81_op y$regIn)))
(assert (= y$19 (not y$25)))
(assert (= y$s$84_op (Sub_8_8_8 y$regIn y$n32s8)))
(assert (= y$s$79_op (ite y$25 y$s$84_op y$regIn)))
(assert (= y$s$74_op (ite y$19 y$s$81_op y$s$84_op)))
(assert (= y$s$85_op (ite y$c.Ccmd y$s$74_op y$n0s8)))
(assert (= y$s$86_op (ite y$c.Ncmd y$regIn y$s$85_op)))
(assert (= y$s$87_op (ite y$c.Ucmd y$s$79_op y$s$86_op)))
(assert (= y$t.out_op (ite y$c.Lcmd y$s$78_op y$s$87_op)))
(assert (= y$dataOut$next_rhs_op (ite y$reset y$n0s8 y$t.out_op)))
(assert (= y$42 (= y$dataOut$next y$dataOut$next_rhs_op)))
(assert (= y$regIn$next_rhs_op (ite y$reset y$n0s8 y$dataIn)))
(assert (= y$47 (= y$regIn$next y$regIn$next_rhs_op)))
(assert (= y$51 (= y$n27s8 y$c.prev)))
(assert (= y$53 (= y$n78s8 y$regIn)))
(assert (= y$55 (= y$n67s8 y$regIn)))
(assert (= y$s$40_op (or y$53 y$55)))
(assert (= y$59 (= y$n85s8 y$regIn)))
(assert (= y$59 (not y$s$46_op)))
(assert (= y$s$47_op (and (not y$s$40_op) y$s$46_op)))
(assert (= y$s$64_op (and y$51 y$s$47_op)))
(assert (= y$s$35_op (and (not y$reset) y$s$64_op)))
(assert (= y$s$68_op (ite y$51 y$s$35_op y$c.Lcmd)))
(assert (= y$s$31_op (and (not y$reset) y$s$68_op)))
(assert (= y$c.Lcmd$next_rhs_op (and (not y$reset) y$s$31_op)))
(assert (= y$75 (= y$c.Lcmd$next y$c.Lcmd$next_rhs_op)))
(assert (= y$59 y$s$43_op))
(assert (= y$s$44_op (and (not y$s$40_op) y$s$43_op)))
(assert (= y$s$60_op (and y$51 y$s$44_op)))
(assert (= y$s$37_op (and (not y$reset) y$s$60_op)))
(assert (= y$s$67_op (ite y$51 y$s$37_op y$c.Ucmd)))
(assert (= y$s$33_op (and (not y$reset) y$s$67_op)))
(assert (= y$c.Ucmd$next_rhs_op (and (not y$reset) y$s$33_op)))
(assert (= y$91 (= y$c.Ucmd$next y$c.Ucmd$next_rhs_op)))
(assert (= y$55 (not y$s$51_op)))
(assert (= y$s$53_op (and y$s$40_op y$s$51_op)))
(assert (= y$s$56_op (and y$51 y$s$53_op)))
(assert (= y$s$36_op (and (not y$reset) y$s$56_op)))
(assert (= y$s$66_op (ite y$51 y$s$36_op y$c.Ncmd)))
(assert (= y$s$32_op (and (not y$reset) y$s$66_op)))
(assert (= y$c.Ncmd$next_rhs_op (or y$reset y$s$32_op)))
(assert (= y$107 (= y$c.Ncmd$next y$c.Ncmd$next_rhs_op)))
(assert (= y$55 y$s$48_op))
(assert (= y$s$50_op (and y$s$40_op y$s$48_op)))
(assert (= y$s$72_op (and y$51 y$s$50_op)))
(assert (= y$s$34_op (and (not y$reset) y$s$72_op)))
(assert (= y$s$65_op (ite y$51 y$s$34_op y$c.Ccmd)))
(assert (= y$s$30_op (and (not y$reset) y$s$65_op)))
(assert (= y$c.Ccmd$next_rhs_op (and (not y$reset) y$s$30_op)))
(assert (= y$123 (= y$c.Ccmd$next y$c.Ccmd$next_rhs_op)))
(assert (= y$c.prev$next_rhs_op (ite y$reset y$n0s8 y$regIn)))
(assert (= y$127 (= y$c.prev$next y$c.prev$next_rhs_op)))
(assert (= y$128 (and y$42 y$47 y$75 y$91 y$107 y$123 y$127)))
(assert (= y$w$1$next_op (Concat_32_1_31 y$c.Lcmd$next y$n0s31)))
(assert (= y$179 (= y$n1s32 y$w$1$next_op)))
(assert (= y$w$2$next_op (Concat_32_1_31 y$c.Ucmd$next y$n0s31)))
(assert (= y$182 (= y$n1s32 y$w$2$next_op)))
(assert (= y$s$15$next_op (and y$179 y$182)))
(assert (= y$w$3$next_op (Concat_32_1_31 y$c.Ccmd$next y$n0s31)))
(assert (= y$187 (= y$n1s32 y$w$3$next_op)))
(assert (= y$s$16$next_op (and y$179 y$187)))
(assert (= y$s$21$next_op (or y$s$15$next_op y$s$16$next_op)))
(assert (= y$w$4$next_op (Concat_32_1_31 y$c.Ncmd$next y$n0s31)))
(assert (= y$194 (= y$n1s32 y$w$4$next_op)))
(assert (= y$s$14$next_op (and y$179 y$194)))
(assert (= y$s$20$next_op (or y$s$21$next_op y$s$14$next_op)))
(assert (= y$s$17$next_op (and y$182 y$187)))
(assert (= y$s$22$next_op (or y$s$20$next_op y$s$17$next_op)))
(assert (= y$s$18$next_op (and y$182 y$194)))
(assert (= y$s$23$next_op (or y$s$22$next_op y$s$18$next_op)))
(assert (= y$s$19$next_op (and y$187 y$194)))
(assert (= y$s$24$next_op (or y$s$23$next_op y$s$19$next_op)))
(assert (= y$s$24$next_op (not y$211)))
(assert (= y$212 (= y$prop$next y$211)))
(assert (= y$prop$next (not y$176)))
(assert (= y$c.Lcmd$next (not y$221)))
(assert (= y$222 (and y$179 y$221)))
(assert (= y$222 (not y$224)))
(assert (= y$c.Lcmd (not y$3)))
(assert (= y$220 (and y$3 y$134)))
(assert (= y$220 (not y$223)))
(assert (= y$c.Ucmd$next (not y$251)))
(assert (= y$284 (and y$182 y$251)))
(assert (= y$284 (not y$286)))
(assert (= y$c.Ucmd (not y$6)))
(assert (= y$285 (and y$6 y$137)))
(assert (= y$285 (not y$290)))
(assert (= y$294 (and y$prop y$167 y$224 y$223 y$128 y$212 y$176 y$286 y$290)))
(assert y$294)
(assert (distinct y$n0s8 y$n32s8 y$n27s8 y$n78s8 y$n67s8 y$n85s8))
(assert (not (= y$n1s32 y$n0s32)))
(check-sat)
(exit)
