(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Sledgehammer, converted to v2.6 by CVC4
Application: Verfication goals in Isabelle
Target solver: CVC4, Z3
Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)


(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_prod_set$ 0)
(declare-sort A_a_llist_a_llist_prod_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_bool_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_prod_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_prod_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set_a_llist_llist_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_prod_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_set_a_llist_a_llist_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun_a_llist_a_llist_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ () A_llist$)
(declare-fun lhd$ (A_llist$) A$)
(declare-fun ltl$ (A_llist$) A_llist$)
(declare-fun lCons$ (A$ A_llist$) A_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$ (A_llist_a_llist_prod$) A_llist$)
(declare-fun snd$ (A_llist_a_llist_prod$) A_llist$)
(declare-fun pair$ (A_llist$ A_llist$) A_llist_a_llist_prod$)
(declare-sort A_llist_a_llist_prod_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$a () A_llist_a_llist_prod_llist$)
(declare-fun lhd$a (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod$)
(declare-fun ltl$a (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lCons$a (A_llist_a_llist_prod$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lNil$b () A_llist_llist$)
(declare-fun lhd$b (A_llist_llist$) A_llist$)
(declare-fun ltl$b (A_llist_llist$) A_llist_llist$)
(declare-fun lCons$b (A_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun uu$ (A_llist_set$) A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun sup$ (A_set$) A_set_a_set_fun$)
(declare-fun uua$ (A_set$) A_bool_fun$)
(declare-fun uub$ (A_llist_a_llist_prod_set$) A_llist_a_llist_prod_bool_fun$)
(declare-fun uuc$ () A_llist_a_llist_fun$)
(declare-fun uud$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uue$ () A_llist_a_fun$)
(declare-fun uuf$ () A_a_bool_fun_fun$)
(declare-fun uug$ () A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$)
(declare-fun cont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun lmap$ (A_llist_a_llist_prod_a_fun$ A_llist_a_llist_prod_llist$) A_llist$)
(declare-fun lset$ (A_llist_llist$) A_llist_set$)
(declare-fun sup$a (A_llist_set$ A_llist_set$) A_llist_set$)
(declare-fun sup$b (A_llist_a_llist_prod_set$ A_llist_a_llist_prod_set$) A_llist_a_llist_prod_set$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun lSup$a () A_llist_a_llist_prod_llist_set_a_llist_a_llist_prod_llist_fun$)
(declare-fun lSup$b () A_llist_llist_set_a_llist_llist_fun$)
(declare-fun lmap$a (A_llist_a_fun$ A_llist_llist$) A_llist$)
(declare-fun lmap$b (A_a_llist_a_llist_prod_fun$ A_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lmap$c (A_llist_a_llist_prod_a_llist_a_llist_prod_fun$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lmap$d (A_llist_a_llist_a_llist_prod_fun$ A_llist_llist$) A_llist_a_llist_prod_llist$)
(declare-fun lmap$e (A_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun lmap$f (A_llist_a_llist_prod_a_llist_fun$ A_llist_a_llist_prod_llist$) A_llist_llist$)
(declare-fun lmap$g (A_llist_a_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lmap$h (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun lset$a (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_set$)
(declare-fun lset$b (A_llist$) A_set$)
(declare-fun chain$a (A_a_bool_fun_fun$ A_set$) Bool)
(declare-fun chain$b (A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$ A_llist_a_llist_prod_set$) Bool)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun lnull$b (A_llist_a_llist_prod_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun compact$ (A_llist_set_a_llist_fun$) A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_fun$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun collect$b (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_set$)
(declare-fun compact$a (A_llist_a_llist_prod_llist_set_a_llist_a_llist_prod_llist_fun$) A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun_a_llist_a_llist_prod_llist_bool_fun_fun$)
(declare-fun compact$b (A_llist_llist_set_a_llist_llist_fun$) A_llist_llist_a_llist_llist_bool_fun_fun_a_llist_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$) Bool)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$ A_llist_a_llist_prod$) A_llist_a_llist_prod_bool_fun$)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (A_llist_a_llist_prod_llist_bool_fun$ A_llist_a_llist_prod_llist$) Bool)
(declare-fun fun_app$i (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$j (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$k (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$l (A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$m (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_fun$ A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist$)
(declare-fun fun_app$n (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun fun_app$o (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$p (A_llist_llist_a_llist_llist_bool_fun_fun_a_llist_llist_bool_fun_fun$ A_llist_llist_a_llist_llist_bool_fun_fun$) A_llist_llist_bool_fun$)
(declare-fun fun_app$q (A_a_fun$ A$) A$)
(declare-fun fun_app$r (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun fun_app$s (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$t (A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist_a_llist_prod$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$u (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$v (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$w (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$x (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$y (A_llist_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist_llist$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$z (A_llist_a_llist_a_llist_prod_bool_fun_fun$ A_llist$) A_llist_a_llist_prod_bool_fun$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun lappend$a (A_llist_llist$) A_llist_llist_a_llist_llist_fun$)
(declare-fun lappend$b (A_llist$) A_llist_a_llist_fun$)
(declare-fun less_eq$a (A_llist_set$ A_llist_set$) Bool)
(declare-fun less_eq$b (A_llist_a_llist_prod_set$ A_llist_a_llist_prod_set$) Bool)
(declare-fun lfinite$a (A_llist_a_llist_prod_llist$) Bool)
(declare-fun lfinite$b (A_llist_llist$) Bool)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A_llist_a_llist_prod$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun lprefix$a () A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$)
(declare-fun lprefix$b () A_llist_llist_a_llist_llist_bool_fun_fun$)
(declare-fun fun_app$aa (A_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$ A_llist_a_llist_prod_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$ab (A_llist_a_llist_prod_a_llist_bool_fun_fun$ A_llist_a_llist_prod$) A_llist_bool_fun$)
(declare-fun fun_app$ac (A_llist_llist_a_llist_bool_fun_fun$ A_llist_llist$) A_llist_bool_fun$)
(declare-fun fun_app$ad (A_llist_a_bool_fun_fun$ A_llist$) A_bool_fun$)
(declare-fun fun_app$ae (A_llist_a_llist_prod_llist_a_llist_bool_fun_fun$ A_llist_a_llist_prod_llist$) A_llist_bool_fun$)
(declare-fun fun_app$af (A_llist_a_llist_prod_a_bool_fun_fun$ A_llist_a_llist_prod$) A_bool_fun$)
(declare-fun fun_app$ag (A_llist_a_llist_a_llist_prod_llist_bool_fun_fun$ A_llist$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun fun_app$ah (A_a_llist_a_llist_prod_bool_fun_fun$ A$) A_llist_a_llist_prod_bool_fun$)
(declare-fun fun_app$ai (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun admissible$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_bool_fun$) Bool)
(declare-fun llist_all2$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun llist_all2$a (A_llist_a_llist_bool_fun_fun$) A_llist_llist_a_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$b (A_llist_a_llist_a_llist_prod_bool_fun_fun$) A_llist_llist_a_llist_a_llist_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$c (A_llist_a_llist_prod_a_llist_bool_fun_fun$) A_llist_a_llist_prod_llist_a_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$d (A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$) A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$e (A_llist_a_bool_fun_fun$) A_llist_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$f (A_llist_a_llist_prod_a_bool_fun_fun$) A_llist_a_llist_prod_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$g (A_a_llist_bool_fun_fun$) A_llist_a_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$h (A_a_llist_a_llist_prod_bool_fun_fun$) A_llist_a_llist_a_llist_prod_llist_bool_fun_fun$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ uuc$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uuc$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$a uue$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uue$ ?v0)))))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$d (uua$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$d (uua$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$e uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$e uud$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod$)) (! (= (fun_app$c (fun_app$f uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (fun_app$f uug$ ?v0) ?v1)))))
(assert (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$d (fun_app$g uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$g uuf$ ?v0) ?v1)))))
(assert (not false))
(assert (not (lfinite$ xs$)))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$e lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$e lprefix$ ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ ?v1) ?v0)) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$e lprefix$ ?v0) ?v2) (fun_app$b (fun_app$e lprefix$ ?v2) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$e lprefix$ ?v0) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$e lprefix$ ?v0) ?v2)) ))
(assert (not (fun_app$b (fun_app$e lprefix$ xs$) xs$)))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (! (=> (not (lfinite$a ?v0)) (= (fun_app$h (fun_app$i lprefix$a ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$h (fun_app$i lprefix$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (not (lfinite$b ?v0)) (= (fun_app$j (fun_app$k lprefix$b ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$j (fun_app$k lprefix$b ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$b (fun_app$e lprefix$ ?v0) ?v1)))))
(assert (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) xs$))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist$)) (= (fun_app$h (fun_app$i lprefix$a (fun_app$m (lappend$ ?v0) ?v1)) (fun_app$m (lappend$ ?v0) ?v2)) (=> (lfinite$a ?v0) (fun_app$h (fun_app$i lprefix$a ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (fun_app$j (fun_app$k lprefix$b (fun_app$n (lappend$a ?v0) ?v1)) (fun_app$n (lappend$a ?v0) ?v2)) (=> (lfinite$b ?v0) (fun_app$j (fun_app$k lprefix$b ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$e lprefix$ (fun_app$ (lappend$b ?v0) ?v1)) (fun_app$ (lappend$b ?v0) ?v2)) (=> (lfinite$ ?v0) (fun_app$b (fun_app$e lprefix$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (= (lfinite$a (fun_app$m (lappend$ ?v0) ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lfinite$b (fun_app$n (lappend$a ?v0) ?v1)) (and (lfinite$b ?v0) (lfinite$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$b ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (lfinite$ (lmap$ ?v0 ?v1)) (lfinite$a ?v1)) ))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 A_llist_llist$)) (= (lfinite$ (lmap$a ?v0 ?v1)) (lfinite$b ?v1)) ))
(assert (forall ((?v0 A_a_llist_a_llist_prod_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$b ?v0 ?v1)) (lfinite$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_a_llist_prod_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (lfinite$a (lmap$c ?v0 ?v1)) (lfinite$a ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_a_llist_prod_fun$) (?v1 A_llist_llist$)) (= (lfinite$a (lmap$d ?v0 ?v1)) (lfinite$b ?v1)) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 A_llist$)) (= (lfinite$b (lmap$e ?v0 ?v1)) (lfinite$ ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (lfinite$b (lmap$f ?v0 ?v1)) (lfinite$a ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_llist$)) (= (lfinite$b (lmap$g ?v0 ?v1)) (lfinite$b ?v1)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lmap$h ?v0) ?v1)) (lfinite$ ?v1)) ))
(assert (= (lfinite$a lNil$a) true))
(assert (= (lfinite$b lNil$b) true))
(assert (= (lfinite$ lNil$) true))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0)) ))
(assert (forall ((?v0 A_llist_llist$)) (= (lfinite$b (ltl$b ?v0)) (lfinite$b ?v0)) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0)) ))
(assert (transp$ lprefix$))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$e lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (fun_app$e lprefix$ lNil$) ?v0)))))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$)) (! (=> (not (lfinite$a ?v0)) (= (fun_app$m (lappend$ ?v0) ?v1) ?v0)) :pattern ((fun_app$m (lappend$ ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (not (lfinite$b ?v0)) (= (fun_app$n (lappend$a ?v0) ?v1) ?v0)) :pattern ((fun_app$n (lappend$a ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (lappend$b ?v0) ?v1) ?v0)) :pattern ((fun_app$ (lappend$b ?v0) ?v1)))))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (! (= (fun_app$h (fun_app$i lprefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$h (fun_app$i lprefix$a ?v1) ?v3))) :pattern ((fun_app$h (fun_app$i lprefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3))))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$j (fun_app$k lprefix$b (lCons$b ?v0 ?v1)) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$j (fun_app$k lprefix$b ?v1) ?v3))) :pattern ((fun_app$j (fun_app$k lprefix$b (lCons$b ?v0 ?v1)) (lCons$b ?v2 ?v3))))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (fun_app$e lprefix$ ?v1) ?v3))) :pattern ((fun_app$b (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist$)) (! (= (fun_app$m (lappend$ (lCons$a ?v0 ?v1)) ?v2) (lCons$a ?v0 (fun_app$m (lappend$ ?v1) ?v2))) :pattern ((fun_app$m (lappend$ (lCons$a ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$n (lappend$a (lCons$b ?v0 ?v1)) ?v2) (lCons$b ?v0 (fun_app$n (lappend$a ?v1) ?v2))) :pattern ((fun_app$n (lappend$a (lCons$b ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$b (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$b ?v1) ?v2))) :pattern ((fun_app$ (lappend$b (lCons$ ?v0 ?v1)) ?v2)))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (! (= (fun_app$m (lappend$ lNil$a) ?v0) ?v0) :pattern ((fun_app$m (lappend$ lNil$a) ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$n (lappend$a lNil$b) ?v0) ?v0) :pattern ((fun_app$n (lappend$a lNil$b) ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$b lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$b lNil$) ?v0)))))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (! (= (fun_app$m (lappend$ ?v0) lNil$a) ?v0) :pattern ((lappend$ ?v0)))))
(assert (forall ((?v0 A_llist_llist$)) (! (= (fun_app$n (lappend$a ?v0) lNil$b) ?v0) :pattern ((lappend$a ?v0)))))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$b ?v0) lNil$) ?v0) :pattern ((lappend$b ?v0)))))
(assert (forall ((?v0 A_llist_a_llist_prod_a_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (ltl$ (lmap$ ?v0 ?v1)) (lmap$ ?v0 (ltl$a ?v1))) ))
(assert (forall ((?v0 A_llist_a_fun$) (?v1 A_llist_llist$)) (= (ltl$ (lmap$a ?v0 ?v1)) (lmap$a ?v0 (ltl$b ?v1))) ))
(assert (forall ((?v0 A_a_llist_a_llist_prod_fun$) (?v1 A_llist$)) (= (ltl$a (lmap$b ?v0 ?v1)) (lmap$b ?v0 (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_a_llist_prod_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (ltl$a (lmap$c ?v0 ?v1)) (lmap$c ?v0 (ltl$a ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_a_llist_prod_fun$) (?v1 A_llist_llist$)) (= (ltl$a (lmap$d ?v0 ?v1)) (lmap$d ?v0 (ltl$b ?v1))) ))
(assert (forall ((?v0 A_a_llist_fun$) (?v1 A_llist$)) (= (ltl$b (lmap$e ?v0 ?v1)) (lmap$e ?v0 (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$) (?v1 A_llist_a_llist_prod_llist$)) (= (ltl$b (lmap$f ?v0 ?v1)) (lmap$f ?v0 (ltl$a ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_llist$)) (= (ltl$b (lmap$g ?v0 ?v1)) (lmap$g ?v0 (ltl$b ?v1))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lmap$h ?v0) ?v1)) (fun_app$ (lmap$h ?v0) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (= (fun_app$h (fun_app$o (compact$a lSup$a) lprefix$a) (lCons$a ?v0 ?v1)) (fun_app$h (fun_app$o (compact$a lSup$a) lprefix$a) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (fun_app$j (fun_app$p (compact$b lSup$b) lprefix$b) (lCons$b ?v0 ?v1)) (fun_app$j (fun_app$p (compact$b lSup$b) lprefix$b) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) (lCons$ ?v0 ?v1)) (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (fun_app$h (fun_app$o (compact$a lSup$a) lprefix$a) (lCons$a ?v0 ?v1)) (fun_app$h (fun_app$o (compact$a lSup$a) lprefix$a) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (fun_app$j (fun_app$p (compact$b lSup$b) lprefix$b) (lCons$b ?v0 ?v1)) (fun_app$j (fun_app$p (compact$b lSup$b) lprefix$b) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) (lCons$ ?v0 ?v1)) (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod$)) (=> (fun_app$h (fun_app$o (compact$a lSup$a) lprefix$a) ?v0) (fun_app$h (fun_app$o (compact$a lSup$a) lprefix$a) (lCons$a ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (fun_app$j (fun_app$p (compact$b lSup$b) lprefix$b) ?v0) (fun_app$j (fun_app$p (compact$b lSup$b) lprefix$b) (lCons$b ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) ?v0) (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) (lCons$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (not (= lNil$b (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 A_llist$) (?v2 A_llist_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false) )) false) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false) )) false) ))
(assert (= (ltl$ lNil$) lNil$))
(assert (forall ((?v0 A_a_fun$)) (! (= (fun_app$ (lmap$h ?v0) lNil$) lNil$) :pattern ((lmap$h ?v0)))))
(assert (= (fun_app$ (lappend$b lNil$) lNil$) lNil$))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (fun_app$ (lmap$h ?v0) ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$q ?v0 ?v4)) (= ?v3 (fun_app$ (lmap$h ?v0) ?v5)))) )) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmap$h ?v0) (lCons$ ?v1 ?v2)) (lCons$ (fun_app$q ?v0 ?v1) (fun_app$ (lmap$h ?v0) ?v2))) :pattern ((fun_app$ (lmap$h ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lmap$h ?v0) (fun_app$ (lappend$b ?v1) ?v2)) (fun_app$ (lappend$b (fun_app$ (lmap$h ?v0) ?v1)) (fun_app$ (lmap$h ?v0) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lappend$b (fun_app$ (lappend$b ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$ (lappend$b ?v0) (lCons$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$b (fun_app$ (lappend$b ?v0) ?v1)) ?v2) (fun_app$ (lappend$b ?v0) (fun_app$ (lappend$b ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$b ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lmap$h ?v0) ?v1)) (= ?v1 lNil$)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$b ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$))) ))
(assert (forall ((?v0 A_llist_set$)) (= (collect$ (uu$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_set$)) (= (collect$a (uua$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$)) (= (collect$b (uub$ ?v0)) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$b ?v0 (collect$a ?v1)) (fun_app$d ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$c ?v1 ?v0)) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= (fun_app$ (lmap$h ?v0) ?v1) lNil$) (= ?v1 lNil$)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$e ?v0 ?v3) ?v4) (or (exists ((?v5 A_llist$)) (and (= ?v3 lNil$) (= ?v4 ?v5)) ) (exists ((?v5 A_llist$) (?v6 A_llist$) (?v7 A$)) (and (= ?v3 (lCons$ ?v7 ?v5)) (and (= ?v4 (lCons$ ?v7 ?v6)) (or (fun_app$b (fun_app$e ?v0 ?v5) ?v6) (fun_app$b (fun_app$e lprefix$ ?v5) ?v6)))) ))) )) (fun_app$b (fun_app$e lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (and (forall ((?v2 A_llist$)) (=> (and (= ?v0 lNil$) (= ?v1 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$b (fun_app$e lprefix$ ?v2) ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2)) ) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$b (fun_app$e lprefix$ ?v2) ?v3))) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (fun_app$e lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$b (fun_app$e lprefix$ ?v3) ?v2)) ))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false) ))) false) ))
(assert (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) ))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ (lCons$ ?v2 ?v0)) (lCons$ ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$b (fun_app$e lprefix$ ?v1) ?v3)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ (ltl$ ?v0)) (ltl$ ?v1))) ))
(assert (forall ((?v0 A_llist$)) (fun_app$b (fun_app$e lprefix$ lNil$) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0))) ))
(assert (forall ((?v0 A_llist_set$)) (=> (lfinite$ (fun_app$r lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lfinite$ ?v1)) )) ))
(assert (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (fun_app$b (fun_app$l (compact$ lSup$) lprefix$) ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (fun_app$b (fun_app$e lprefix$ ?v0) (fun_app$ (lappend$b ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b (fun_app$e lprefix$ (fun_app$ (lappend$b ?v2) ?v0)) (fun_app$ (lappend$b ?v2) ?v1))) ))
(assert (lfinite$ lNil$))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (admissible$ lSup$ lprefix$ ?v0) (and (fun_app$b ?v0 lNil$) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$ ?v3) (fun_app$b ?v0 ?v3)) (fun_app$b ?v0 (lCons$ ?v2 ?v3))) ))) (fun_app$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$d ?v0 ?v1) (fun_app$b (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$b (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (cont$ lSup$ lprefix$ lSup$ lprefix$ uuc$))
(assert (transp$ uud$))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (transp$ ?v0) (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (fun_app$b (fun_app$e ?v0 ?v2) ?v3))) (fun_app$b (fun_app$e ?v0 ?v1) ?v3)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (transp$ ?v0) (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (and (fun_app$b (fun_app$e ?v0 ?v2) ?v3) (=> (fun_app$b (fun_app$e ?v0 ?v1) ?v3) false)))) false) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (=> (forall ((?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (fun_app$b (fun_app$e ?v0 ?v2) ?v3)) (fun_app$b (fun_app$e ?v0 ?v1) ?v3)) ) (transp$ ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (= (transp$ ?v0) (forall ((?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (fun_app$b (fun_app$e ?v0 ?v2) ?v3)) (fun_app$b (fun_app$e ?v0 ?v1) ?v3)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (and (not (= ?v0 lNil$)) (and (= (lhd$ ?v0) ?v1) (= (ltl$ ?v0) ?v2)))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (=> (= ?v0 (lCons$ (lhd$ ?v0) (ltl$ ?v0))) false)) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))))
(assert (forall ((?v0 A_bool_fun$)) (fun_app$b (pred_llist$ ?v0) lNil$) ))
(assert (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (admissible$ lSup$ lprefix$ ?v0) (exists ((?v2 A_llist$)) (and (fun_app$b (fun_app$e lprefix$ ?v2) ?v1) (and (lfinite$ ?v2) (forall ((?v3 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v2) ?v3) (and (fun_app$b (fun_app$e lprefix$ ?v3) ?v1) (lfinite$ ?v3))) (fun_app$b ?v0 ?v3)) ))) )) (fun_app$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0)) ))
(assert (forall ((?v0 A$)) (! (= (fun_app$b (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))))
(assert (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$b (lmember$ ?v0) ?v2))) :pattern ((fun_app$b (lmember$ ?v0) (lCons$ ?v1 ?v2))))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist$)) (and (= ?v1 (fun_app$n (lappend$a ?v2) (lCons$b ?v0 ?v3))) (lfinite$b ?v2)) )) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (member$a ?v0 (lset$a ?v1)) (exists ((?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_prod_llist$)) (and (= ?v1 (fun_app$m (lappend$ ?v2) (lCons$a ?v0 ?v3))) (lfinite$a ?v2)) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$b ?v0 (lset$b ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v1 (fun_app$ (lappend$b ?v2) (lCons$ ?v0 ?v3))) (lfinite$ ?v2)) )) ))
(assert (forall ((?v0 A_llist_set$)) (= (fun_app$b lnull$ (fun_app$r lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) )) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1)) (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1))) (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1)))) ))
(assert (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (fun_app$b lnull$ (fun_app$ (lmap$h ?v0) ?v1)) (fun_app$b lnull$ ?v1)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$e lprefix$ ?v0) lNil$) (fun_app$b lnull$ ?v0)) :pattern ((fun_app$e lprefix$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lappend$b ?v0) ?v1)) (ite (fun_app$b lnull$ ?v0) (ltl$ ?v1) (fun_app$ (lappend$b (ltl$ ?v0)) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (fun_app$ (lappend$b ?v0) ?v1)) (ite (fun_app$b lnull$ ?v0) (lhd$ ?v1) (lhd$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (fun_app$b lnull$ ?v0)) (= (lhd$ (fun_app$ (lmap$h ?v1) ?v0)) (fun_app$q ?v1 (lhd$ ?v0)))) ))
(assert (forall ((?v0 A_llist_llist$)) (=> (not (lnull$a ?v0)) (member$ (lhd$b ?v0) (lset$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (not (lnull$b ?v0)) (member$a (lhd$a ?v0) (lset$a ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (member$b (lhd$ ?v0) (lset$b ?v0))) ))
(assert (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (lnull$a ?v0)) (member$ ?v1 (lset$ (ltl$b ?v0)))) (member$ ?v1 (lset$ ?v0))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod$)) (=> (and (not (lnull$b ?v0)) (member$a ?v1 (lset$a (ltl$a ?v0)))) (member$a ?v1 (lset$a ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (fun_app$b lnull$ ?v0)) (member$b ?v1 (lset$b (ltl$ ?v0)))) (member$b ?v1 (lset$b ?v0))) ))
(assert (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$b lnull$ ?v0) false) (=> (not (fun_app$b lnull$ ?v0)) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false) ))
(assert (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) ) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) )) false)) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (member$ ?v0 (lset$ ?v1)) (fun_app$j (lmember$a ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (= (member$a ?v0 (lset$a ?v1)) (fun_app$h (lmember$b ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (= (member$b ?v0 (lset$b ?v1)) (fun_app$b (lmember$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist_llist$)) (=> (not (lnull$a ?v3)) (fun_app$j (fun_app$s ?v2 (lhd$b ?v3)) ?v3)) ) (forall ((?v3 A_llist_llist$) (?v4 A_llist$)) (=> (and (not (lnull$a ?v3)) (and (member$ ?v4 (lset$ (ltl$b ?v3))) (fun_app$j (fun_app$s ?v2 ?v4) (ltl$b ?v3)))) (fun_app$j (fun_app$s ?v2 ?v4) ?v3)) ))) (fun_app$j (fun_app$s ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod_llist$)) (=> (not (lnull$b ?v3)) (fun_app$h (fun_app$t ?v2 (lhd$a ?v3)) ?v3)) ) (forall ((?v3 A_llist_a_llist_prod_llist$) (?v4 A_llist_a_llist_prod$)) (=> (and (not (lnull$b ?v3)) (and (member$a ?v4 (lset$a (ltl$a ?v3))) (fun_app$h (fun_app$t ?v2 ?v4) (ltl$a ?v3)))) (fun_app$h (fun_app$t ?v2 ?v4) ?v3)) ))) (fun_app$h (fun_app$t ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 A_llist$)) (=> (not (fun_app$b lnull$ ?v3)) (fun_app$b (fun_app$u ?v2 (lhd$ ?v3)) ?v3)) ) (forall ((?v3 A_llist$) (?v4 A$)) (=> (and (not (fun_app$b lnull$ ?v3)) (and (member$b ?v4 (lset$b (ltl$ ?v3))) (fun_app$b (fun_app$u ?v2 ?v4) (ltl$ ?v3)))) (fun_app$b (fun_app$u ?v2 ?v4) ?v3)) ))) (fun_app$b (fun_app$u ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b (fun_app$e lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$b (fun_app$e lprefix$ ?v1) ?v0) (fun_app$b lnull$ ?v1))) :pattern ((fun_app$b (fun_app$e lprefix$ ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (not (fun_app$b lnull$ ?v0))) (not (fun_app$b lnull$ ?v1))) ))
(assert (forall ((?v0 A_llist_set$)) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) )) (not (fun_app$b lnull$ (fun_app$r lSup$ ?v0)))) ))
(assert (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) ) (fun_app$b lnull$ (fun_app$r lSup$ ?v0))) ))
(assert (forall ((?v0 A_llist_set$)) (= (not (fun_app$b lnull$ (fun_app$r lSup$ ?v0))) (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) ))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$b lnull$ (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$b lnull$ ?v0))) ))
(assert (forall ((?v0 A_llist$)) (= (not (fun_app$b lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)) )) ))
(assert (fun_app$b lnull$ lNil$))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (= ?v0 lNil$)) ))
(assert (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (fun_app$b lnull$ ?v0)) ))
(assert (forall ((?v0 A_llist$)) (! (= (fun_app$b lnull$ ?v0) (= ?v0 lNil$)) :pattern ((fun_app$b lnull$ ?v0)))))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b lnull$ (ltl$ ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (member$ ?v0 (lset$ (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (member$a ?v0 (lset$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$b ?v0 (lset$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (member$ ?v0 (lset$ (lCons$b ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (member$a ?v0 (lset$a (lCons$a ?v0 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (member$b ?v0 (lset$b (lCons$ ?v0 ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$)) (=> (member$a ?v0 (lset$a ?v1)) (member$a ?v0 (lset$a (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$b ?v0 (lset$b ?v1)) (member$b ?v0 (lset$b (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$b ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$)) (=> (member$a ?v0 (lset$a ?v1)) (member$a ?v0 (lset$a (lCons$a ?v2 ?v1)))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$b ?v0 (lset$b ?v1)) (member$b ?v0 (lset$b (lCons$ ?v2 ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v2 A_llist_a_llist_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$a ?v0 (lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$b ?v0 (lset$b ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist_llist$)) (fun_app$j ?v2 (lCons$b ?v0 ?v3)) ) (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$j ?v2 ?v4))) (fun_app$j ?v2 (lCons$b ?v3 ?v4))) ))) (fun_app$j ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_bool_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod_llist$)) (fun_app$h ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v4)) (and (not (= ?v0 ?v3)) (fun_app$h ?v2 ?v4))) (fun_app$h ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$h ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$b ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$b ?v0 (lset$b ?v4)) (and (not (= ?v0 ?v3)) (fun_app$b ?v2 ?v4))) (fun_app$b ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$b ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist_llist$)) (fun_app$j ?v2 (lCons$b ?v0 ?v3)) ) (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 (lCons$b ?v3 ?v4))) ))) (fun_app$j ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_bool_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod_llist$)) (fun_app$h ?v2 (lCons$a ?v0 ?v3)) ) (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v4)) (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 (lCons$a ?v3 ?v4))) ))) (fun_app$h ?v2 ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$b ?v2 (lCons$ ?v0 ?v3)) ) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$b ?v0 (lset$b ?v4)) (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 (lCons$ ?v3 ?v4))) ))) (fun_app$b ?v2 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false) ) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v2 A_llist_a_llist_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false) ) (forall ((?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$a ?v0 (lset$a ?v3))) false) ))) false) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false) ) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$b ?v0 (lset$b ?v3))) false) ))) false) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (fun_app$j (fun_app$s ?v2 ?v3) (lCons$b ?v3 ?v4)) ) (forall ((?v3 A_llist$) (?v4 A_llist_llist$) (?v5 A_llist$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$j (fun_app$s ?v2 ?v5) ?v4)) (fun_app$j (fun_app$s ?v2 ?v5) (lCons$b ?v3 ?v4))) ))) (fun_app$j (fun_app$s ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_a_llist_a_llist_prod_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$)) (fun_app$h (fun_app$t ?v2 ?v3) (lCons$a ?v3 ?v4)) ) (forall ((?v3 A_llist_a_llist_prod$) (?v4 A_llist_a_llist_prod_llist$) (?v5 A_llist_a_llist_prod$)) (=> (and (member$a ?v5 (lset$a ?v4)) (fun_app$h (fun_app$t ?v2 ?v5) ?v4)) (fun_app$h (fun_app$t ?v2 ?v5) (lCons$a ?v3 ?v4))) ))) (fun_app$h (fun_app$t ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$b (fun_app$u ?v2 ?v3) (lCons$ ?v3 ?v4)) ) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$b ?v5 (lset$b ?v4)) (fun_app$b (fun_app$u ?v2 ?v5) ?v4)) (fun_app$b (fun_app$u ?v2 ?v5) (lCons$ ?v3 ?v4))) ))) (fun_app$b (fun_app$u ?v2 ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (lappend$b ?v0) ?v1) ?v1)) :pattern ((fun_app$ (lappend$b ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (fun_app$ (lappend$b ?v1) ?v0) ?v1)) :pattern ((fun_app$ (lappend$b ?v1) ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (not (fun_app$b lnull$ (fun_app$ (lappend$b ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (lfinite$ ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$ ?v0 (lset$ (ltl$b ?v1))) (member$ ?v0 (lset$ ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (member$a ?v0 (lset$a (ltl$a ?v1))) (member$a ?v0 (lset$a ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$b ?v0 (lset$b (ltl$ ?v1))) (member$b ?v0 (lset$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$b ?v4 (lset$b ?v1)) (= (fun_app$q ?v2 ?v4) (fun_app$q ?v3 ?v4))) )) (= (fun_app$ (lmap$h ?v2) ?v0) (fun_app$ (lmap$h ?v3) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$b ?v3 (lset$b ?v0)) (= (fun_app$q ?v1 ?v3) (fun_app$q ?v2 ?v3))) ) (= (fun_app$ (lmap$h ?v1) ?v0) (fun_app$ (lmap$h ?v2) ?v0))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$b ?v4 (lset$b ?v0)) (and (member$b ?v5 (lset$b ?v1)) (= (fun_app$q ?v2 ?v4) (fun_app$q ?v3 ?v5)))) (= ?v4 ?v5)) ) (= (fun_app$ (lmap$h ?v2) ?v0) (fun_app$ (lmap$h ?v3) ?v1))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (not (fun_app$b lnull$ ?v0))) (= (lhd$ ?v0) (lhd$ ?v1))) ))
(assert (forall ((?v0 A_llist_set$)) (! (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (fun_app$b lnull$ ?v1)) ) (= (fun_app$r lSup$ ?v0) lNil$)) :pattern ((fun_app$r lSup$ ?v0)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (= (fun_app$ (lappend$b ?v0) ?v1) lNil$)) :pattern ((fun_app$ (lappend$b ?v0) ?v1)))))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (= (fun_app$ (lappend$b (ltl$ ?v0)) ?v1) (ltl$ (fun_app$ (lappend$b ?v0) ?v1)))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (fun_app$b lnull$ ?v0)) (= (ltl$ (fun_app$ (lmap$h ?v1) ?v0)) (fun_app$ (lmap$h ?v1) (ltl$ ?v0)))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$e ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$b (fun_app$e ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$e ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$e ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))) )) (= ?v1 ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (forall ((?v2 A_llist$)) (=> (fun_app$b lnull$ ?v2) (fun_app$b ?v1 ?v2)) ) (forall ((?v2 A_llist$)) (=> (and (lfinite$ ?v2) (and (not (fun_app$b lnull$ ?v2)) (fun_app$b ?v1 (ltl$ ?v2)))) (fun_app$b ?v1 ?v2)) ))) (fun_app$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (member$ ?v0 (lset$ (fun_app$n (lappend$a ?v1) ?v2))) (or (member$ ?v0 (lset$ ?v1)) (and (lfinite$b ?v1) (member$ ?v0 (lset$ ?v2))))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist$)) (= (member$a ?v0 (lset$a (fun_app$m (lappend$ ?v1) ?v2))) (or (member$a ?v0 (lset$a ?v1)) (and (lfinite$a ?v1) (member$a ?v0 (lset$a ?v2))))) ))
(assert (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (member$b ?v0 (lset$b (fun_app$ (lappend$b ?v1) ?v2))) (or (member$b ?v0 (lset$b ?v1)) (and (lfinite$ ?v1) (member$b ?v0 (lset$b ?v2))))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (=> (not (fun_app$b lnull$ ?v0)) (and (not (fun_app$b lnull$ ?v1)) (and (= (lhd$ ?v0) (lhd$ ?v1)) (fun_app$b (fun_app$e lprefix$ (ltl$ ?v0)) (ltl$ ?v1))))) (fun_app$b (fun_app$e lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$e ?v0 ?v3) ?v4) (and (=> (fun_app$b lnull$ ?v4) (fun_app$b lnull$ ?v3)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$e ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (fun_app$b (fun_app$e lprefix$ (ltl$ ?v3)) (ltl$ ?v4))))))) )) (fun_app$b (fun_app$e lprefix$ ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist$)) (and (= ?v1 (fun_app$n (lappend$a ?v2) (lCons$b ?v0 ?v3))) (and (lfinite$b ?v2) (not (member$ ?v0 (lset$ ?v2))))) )) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$)) (=> (member$a ?v0 (lset$a ?v1)) (exists ((?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_prod_llist$)) (and (= ?v1 (fun_app$m (lappend$ ?v2) (lCons$a ?v0 ?v3))) (and (lfinite$a ?v2) (not (member$a ?v0 (lset$a ?v2))))) )) ))
(assert (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$b ?v0 (lset$b ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v1 (fun_app$ (lappend$b ?v2) (lCons$ ?v0 ?v3))) (and (lfinite$ ?v2) (not (member$b ?v0 (lset$b ?v2))))) )) ))
(assert (forall ((?v0 A_llist$)) (= (fun_app$ (fun_app$v (fun_app$w (unfold_llist$ lnull$) uue$) uuc$) ?v0) ?v0) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lfinite$ ?v0) (= (lset$b (fun_app$ (lappend$b ?v0) ?v1)) (fun_app$x (sup$ (lset$b ?v0)) (lset$b ?v1)))) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (and (member$ ?v1 ?v0) (not (fun_app$b lnull$ ?v1)))) (= (lhd$ (fun_app$r lSup$ ?v0)) (lhd$ ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lset$b (fun_app$ (lappend$b ?v0) ?v1)) (ite (lfinite$ ?v0) (fun_app$x (sup$ (lset$b ?v0)) (lset$b ?v1)) (lset$b ?v0))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$e (llist_all2$ ?v0) ?v1) ?v2) (and (= (fun_app$b lnull$ ?v1) (fun_app$b lnull$ ?v2)) (=> (and (not (fun_app$b lnull$ ?v1)) (not (fun_app$b lnull$ ?v2))) (and (fun_app$d (fun_app$g ?v0 (lhd$ ?v1)) (lhd$ ?v2)) (fun_app$b (fun_app$e (llist_all2$ ?v0) (ltl$ ?v1)) (ltl$ ?v2)))))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$e ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$e ?v0 ?v4) ?v5) (and (= (fun_app$b lnull$ ?v4) (fun_app$b lnull$ ?v5)) (=> (and (not (fun_app$b lnull$ ?v4)) (not (fun_app$b lnull$ ?v5))) (and (fun_app$d (fun_app$g ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (fun_app$b (fun_app$e ?v0 (ltl$ ?v4)) (ltl$ ?v5)))))) )) (fun_app$b (fun_app$e (llist_all2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (fun_app$e (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$d (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$e (llist_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$b (fun_app$e (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (fun_app$d (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$e (llist_all2$ ?v0) ?v3) ?v4)) (fun_app$b (fun_app$e (llist_all2$ ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_a_llist_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$k (llist_all2$a ?v0) ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (and (member$ ?v4 (lset$ ?v1)) (and (member$ ?v5 (lset$ ?v2)) (fun_app$b (fun_app$e ?v0 ?v4) ?v5))) (fun_app$b (fun_app$e ?v3 ?v4) ?v5)) )) (fun_app$j (fun_app$k (llist_all2$a ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_a_llist_prod_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_a_llist_prod_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$y (llist_all2$b ?v0) ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist_a_llist_prod$)) (=> (and (member$ ?v4 (lset$ ?v1)) (and (member$a ?v5 (lset$a ?v2)) (fun_app$c (fun_app$z ?v0 ?v4) ?v5))) (fun_app$c (fun_app$z ?v3 ?v4) ?v5)) )) (fun_app$h (fun_app$y (llist_all2$b ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_llist$) (?v3 A_llist_a_llist_prod_a_llist_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$aa (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v4 A_llist_a_llist_prod$) (?v5 A_llist$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$ ?v5 (lset$ ?v2)) (fun_app$b (fun_app$ab ?v0 ?v4) ?v5))) (fun_app$b (fun_app$ab ?v3 ?v4) ?v5)) )) (fun_app$j (fun_app$aa (llist_all2$c ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$i (llist_all2$d ?v0) ?v1) ?v2) (forall ((?v4 A_llist_a_llist_prod$) (?v5 A_llist_a_llist_prod$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$a ?v5 (lset$a ?v2)) (fun_app$c (fun_app$f ?v0 ?v4) ?v5))) (fun_app$c (fun_app$f ?v3 ?v4) ?v5)) )) (fun_app$h (fun_app$i (llist_all2$d ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$ac (llist_all2$e ?v0) ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A$)) (=> (and (member$ ?v4 (lset$ ?v1)) (and (member$b ?v5 (lset$b ?v2)) (fun_app$d (fun_app$ad ?v0 ?v4) ?v5))) (fun_app$d (fun_app$ad ?v3 ?v4) ?v5)) )) (fun_app$b (fun_app$ac (llist_all2$e ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_bool_fun_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist$) (?v3 A_llist_a_llist_prod_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$ae (llist_all2$f ?v0) ?v1) ?v2) (forall ((?v4 A_llist_a_llist_prod$) (?v5 A$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$b ?v5 (lset$b ?v2)) (fun_app$d (fun_app$af ?v0 ?v4) ?v5))) (fun_app$d (fun_app$af ?v3 ?v4) ?v5)) )) (fun_app$b (fun_app$ae (llist_all2$f ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_llist$) (?v3 A_a_llist_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$s (llist_all2$g ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A_llist$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$ ?v5 (lset$ ?v2)) (fun_app$b (fun_app$u ?v0 ?v4) ?v5))) (fun_app$b (fun_app$u ?v3 ?v4) ?v5)) )) (fun_app$j (fun_app$s (llist_all2$g ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_llist_a_llist_prod_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_a_llist_prod_llist$) (?v3 A_a_llist_a_llist_prod_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$ag (llist_all2$h ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A_llist_a_llist_prod$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$a ?v5 (lset$a ?v2)) (fun_app$c (fun_app$ah ?v0 ?v4) ?v5))) (fun_app$c (fun_app$ah ?v3 ?v4) ?v5)) )) (fun_app$h (fun_app$ag (llist_all2$h ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$e (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$b ?v5 (lset$b ?v2)) (fun_app$d (fun_app$g ?v0 ?v4) ?v5))) (fun_app$d (fun_app$g ?v3 ?v4) ?v5)) )) (fun_app$b (fun_app$e (llist_all2$ ?v3) ?v1) ?v2)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (fun_app$e (llist_all2$ ?v0) lNil$) lNil$) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$b (fun_app$e lprefix$ ?v2) ?v1)) )) (fun_app$b (fun_app$e lprefix$ (fun_app$r lSup$ ?v0)) ?v1)) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$b (fun_app$e lprefix$ ?v2) ?v1)) )) (fun_app$b (fun_app$e lprefix$ (fun_app$r lSup$ ?v0)) ?v1)) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$b (fun_app$e lprefix$ ?v1) (fun_app$r lSup$ ?v0))) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$b (fun_app$e lprefix$ ?v1) (fun_app$r lSup$ ?v0))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$e (llist_all2$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$) (= ?v2 lNil$)) false) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v4)) (and (= ?v2 (lCons$ ?v5 ?v6)) (and (fun_app$d (fun_app$g ?v0 ?v3) ?v5) (fun_app$b (fun_app$e (llist_all2$ ?v0) ?v4) ?v6)))) false) ))) false) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (not (fun_app$b (fun_app$e (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) lNil$)) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (not (fun_app$b (fun_app$e (llist_all2$ ?v0) lNil$) (lCons$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (= (member$ ?v0 (sup$a ?v1 ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_set$)) (= (member$a ?v0 (sup$b ?v1 ?v2)) (or (member$a ?v0 ?v1) (member$a ?v0 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$b ?v0 (fun_app$x (sup$ ?v1) ?v2)) (or (member$b ?v0 ?v1) (member$b ?v0 ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (=> (not (member$ ?v0 ?v1)) (member$ ?v0 ?v2)) (member$ ?v0 (sup$a ?v2 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_set$)) (=> (=> (not (member$a ?v0 ?v1)) (member$a ?v0 ?v2)) (member$a ?v0 (sup$b ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (=> (not (member$b ?v0 ?v1)) (member$b ?v0 ?v2)) (member$b ?v0 (fun_app$x (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$x (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$x (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v0) ?v1)) (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v0) ?v1)) (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ (fun_app$x (sup$ ?v0) ?v1)) ?v1) (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) ?v1) (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) ?v1) (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) ?v1) (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v0) ?v1)) (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2)) (fun_app$x (sup$ ?v1) (fun_app$x (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2)) (fun_app$x (sup$ ?v1) (fun_app$x (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2)) (fun_app$x (sup$ ?v1) (fun_app$x (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ (fun_app$x (sup$ ?v0) ?v1)) ?v2) (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ (fun_app$x (sup$ ?v0) ?v1)) ?v2) (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ (fun_app$x (sup$ ?v0) ?v1)) ?v2) (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (sup$a ?v1 ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_set$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (sup$b ?v1 ?v2))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$b ?v0 ?v1) (member$b ?v0 (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (sup$a ?v2 ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_set$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (sup$b ?v2 ?v1))) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$b ?v0 ?v1) (member$b ?v0 (fun_app$x (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (member$ ?v0 (sup$a ?v1 ?v2)) (and (=> (member$ ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_set$)) (=> (and (member$a ?v0 (sup$b ?v1 ?v2)) (and (=> (member$a ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$b ?v0 (fun_app$x (sup$ ?v1) ?v2)) (and (=> (member$b ?v0 ?v1) false) (=> (member$b ?v0 ?v2) false))) false) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$x (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) ?v1) (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v0) ?v1)) (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2)) (fun_app$x (sup$ ?v1) (fun_app$x (sup$ ?v0) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$x (sup$ (fun_app$x (sup$ ?v0) ?v1)) ?v2) (fun_app$x (sup$ ?v0) (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (= (forall ((?v3 A_llist$)) (=> (member$ ?v3 (sup$a ?v0 ?v1)) (fun_app$b ?v2 ?v3)) ) (and (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v0) (fun_app$b ?v2 ?v3)) ) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (fun_app$b ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_bool_fun$)) (= (forall ((?v3 A_llist_a_llist_prod$)) (=> (member$a ?v3 (sup$b ?v0 ?v1)) (fun_app$c ?v2 ?v3)) ) (and (forall ((?v3 A_llist_a_llist_prod$)) (=> (member$a ?v3 ?v0) (fun_app$c ?v2 ?v3)) ) (forall ((?v3 A_llist_a_llist_prod$)) (=> (member$a ?v3 ?v1) (fun_app$c ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$b ?v3 (fun_app$x (sup$ ?v0) ?v1)) (fun_app$d ?v2 ?v3)) ) (and (forall ((?v3 A$)) (=> (member$b ?v3 ?v0) (fun_app$d ?v2 ?v3)) ) (forall ((?v3 A$)) (=> (member$b ?v3 ?v1) (fun_app$d ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (= (exists ((?v3 A_llist$)) (and (member$ ?v3 (sup$a ?v0 ?v1)) (fun_app$b ?v2 ?v3)) ) (or (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v0) (fun_app$b ?v2 ?v3)) ) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v1) (fun_app$b ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod_bool_fun$)) (= (exists ((?v3 A_llist_a_llist_prod$)) (and (member$a ?v3 (sup$b ?v0 ?v1)) (fun_app$c ?v2 ?v3)) ) (or (exists ((?v3 A_llist_a_llist_prod$)) (and (member$a ?v3 ?v0) (fun_app$c ?v2 ?v3)) ) (exists ((?v3 A_llist_a_llist_prod$)) (and (member$a ?v3 ?v1) (fun_app$c ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$b ?v3 (fun_app$x (sup$ ?v0) ?v1)) (fun_app$d ?v2 ?v3)) ) (or (exists ((?v3 A$)) (and (member$b ?v3 ?v0) (fun_app$d ?v2 ?v3)) ) (exists ((?v3 A$)) (and (member$b ?v3 ?v1) (fun_app$d ?v2 ?v3)) ))) ))
(assert (forall ((?v0 A_set$) (?v1 A_llist$)) (! (= (fun_app$ai (gen_lset$ ?v0) ?v1) (fun_app$x (sup$ ?v0) (lset$b ?v1))) :pattern ((fun_app$ai (gen_lset$ ?v0) ?v1)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_set$) (?v2 A$) (?v3 A$)) (=> (and (chain$a ?v0 ?v1) (and (member$b ?v2 ?v1) (member$b ?v3 ?v1))) (or (fun_app$d (fun_app$g ?v0 ?v2) ?v3) (fun_app$d (fun_app$g ?v0 ?v3) ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod$)) (=> (and (chain$b ?v0 ?v1) (and (member$a ?v2 ?v1) (member$a ?v3 ?v1))) (or (fun_app$c (fun_app$f ?v0 ?v2) ?v3) (fun_app$c (fun_app$f ?v0 ?v3) ?v2))) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (chain$ ?v0 ?v1) (and (member$ ?v2 ?v1) (member$ ?v3 ?v1))) (or (fun_app$b (fun_app$e ?v0 ?v2) ?v3) (fun_app$b (fun_app$e ?v0 ?v3) ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_set$) (?v2 A$) (?v3 A$)) (=> (and (chain$a ?v0 ?v1) (and (member$b ?v2 ?v1) (and (member$b ?v3 ?v1) (and (=> (fun_app$d (fun_app$g ?v0 ?v2) ?v3) false) (=> (fun_app$d (fun_app$g ?v0 ?v3) ?v2) false))))) false) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod$)) (=> (and (chain$b ?v0 ?v1) (and (member$a ?v2 ?v1) (and (member$a ?v3 ?v1) (and (=> (fun_app$c (fun_app$f ?v0 ?v2) ?v3) false) (=> (fun_app$c (fun_app$f ?v0 ?v3) ?v2) false))))) false) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (chain$ ?v0 ?v1) (and (member$ ?v2 ?v1) (and (member$ ?v3 ?v1) (and (=> (fun_app$b (fun_app$e ?v0 ?v2) ?v3) false) (=> (fun_app$b (fun_app$e ?v0 ?v3) ?v2) false))))) false) ))
(assert (forall ((?v0 A_set$)) (! (= (fun_app$ai (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_set$)) (= (chain$a ?v0 ?v1) (forall ((?v2 A$)) (=> (member$b ?v2 ?v1) (forall ((?v3 A$)) (=> (member$b ?v3 ?v1) (or (fun_app$d (fun_app$g ?v0 ?v2) ?v3) (fun_app$d (fun_app$g ?v0 ?v3) ?v2))) )) )) ))
(assert (forall ((?v0 A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$) (?v1 A_llist_a_llist_prod_set$)) (= (chain$b ?v0 ?v1) (forall ((?v2 A_llist_a_llist_prod$)) (=> (member$a ?v2 ?v1) (forall ((?v3 A_llist_a_llist_prod$)) (=> (member$a ?v3 ?v1) (or (fun_app$c (fun_app$f ?v0 ?v2) ?v3) (fun_app$c (fun_app$f ?v0 ?v3) ?v2))) )) )) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$)) (= (chain$ ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v1) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (or (fun_app$b (fun_app$e ?v0 ?v2) ?v3) (fun_app$b (fun_app$e ?v0 ?v3) ?v2))) )) )) ))
(assert (forall ((?v0 A_set$)) (= (chain$a uuf$ ?v0) (forall ((?v1 A$)) (=> (member$b ?v1 ?v0) (forall ((?v2 A$)) (=> (member$b ?v2 ?v0) (= ?v1 ?v2)) )) )) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$)) (= (chain$b uug$ ?v0) (forall ((?v1 A_llist_a_llist_prod$)) (=> (member$a ?v1 ?v0) (forall ((?v2 A_llist_a_llist_prod$)) (=> (member$a ?v2 ?v0) (= ?v1 ?v2)) )) )) ))
(assert (forall ((?v0 A_llist_set$)) (= (chain$ uud$ ?v0) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (= ?v1 ?v2)) )) )) ))
(assert (forall ((?v0 A_set$) (?v1 A_a_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (=> (and (member$b ?v2 ?v0) (member$b ?v3 ?v0)) (or (fun_app$d (fun_app$g ?v1 ?v2) ?v3) (fun_app$d (fun_app$g ?v1 ?v3) ?v2))) ) (chain$a ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$)) (=> (forall ((?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod$)) (=> (and (member$a ?v2 ?v0) (member$a ?v3 ?v0)) (or (fun_app$c (fun_app$f ?v1 ?v2) ?v3) (fun_app$c (fun_app$f ?v1 ?v3) ?v2))) ) (chain$b ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_bool_fun_fun$)) (=> (forall ((?v2 A_llist$) (?v3 A_llist$)) (=> (and (member$ ?v2 ?v0) (member$ ?v3 ?v0)) (or (fun_app$b (fun_app$e ?v1 ?v2) ?v3) (fun_app$b (fun_app$e ?v1 ?v3) ?v2))) ) (chain$ ?v1 ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (less_eq$ (lset$b (fun_app$ (lappend$b ?v0) ?v1)) (fun_app$x (sup$ (lset$b ?v0)) (lset$b ?v1))) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_a_llist_prod_set$)) (=> (and (member$a (pair$ ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (member$a (pair$ ?v3 ?v4) ?v2) (or (fun_app$b lnull$ ?v3) (exists ((?v5 A$) (?v6 A_llist$) (?v7 A_llist$)) (and (= ?v3 (lCons$ ?v5 ?v6)) (and (= ?v4 (lCons$ ?v5 ?v7)) (or (member$a (pair$ ?v6 ?v7) ?v2) (fun_app$b (fun_app$e lprefix$ ?v6) ?v7)))) ))) )) (fun_app$b (fun_app$e lprefix$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (fun_app$x (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (fun_app$x (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (fun_app$x (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2))) ))
(assert (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_set$) (?v2 A_set$)) (=> (and (chain$a ?v0 ?v1) (less_eq$ ?v2 ?v1)) (chain$a ?v0 ?v2)) ))
(assert (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (chain$ ?v0 ?v1) (less_eq$a ?v2 ?v1)) (chain$ ?v0 ?v2)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$e lprefix$ ?v0) ?v1) (less_eq$ (lset$b ?v0) (lset$b ?v1))) ))
(assert (forall ((?v0 A_llist$)) (less_eq$ (lset$b (ltl$ ?v0)) (lset$b ?v0)) ))
(assert (forall ((?v0 A_llist$) (?v1 A_llist$)) (less_eq$ (lset$b ?v0) (lset$b (fun_app$ (lappend$b ?v0) ?v1))) ))
(assert (forall ((?v0 A_llist_a_llist_prod_set$) (?v1 A_llist_a_llist_prod_set$)) (=> (forall ((?v2 A_llist$) (?v3 A_llist$)) (=> (member$a (pair$ ?v2 ?v3) ?v0) (member$a (pair$ ?v2 ?v3) ?v1)) ) (less_eq$b ?v0 ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v0) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (less_eq$ ?v0 (fun_app$x (sup$ ?v1) ?v0)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$x (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$x (sup$ ?v1) ?v2))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (fun_app$x (sup$ ?v2) ?v1))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$x (sup$ ?v0) ?v1) ?v1)) :pattern ((fun_app$x (sup$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$x (sup$ ?v1) ?v0) ?v1)) :pattern ((fun_app$x (sup$ ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$x (sup$ ?v1) ?v0) ?v1)) :pattern ((fun_app$x (sup$ ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$x (sup$ ?v0) ?v1) ?v1)) :pattern ((fun_app$x (sup$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$x (sup$ ?v1) ?v0) ?v1)) :pattern ((fun_app$x (sup$ ?v1) ?v0)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (fun_app$x (sup$ ?v0) ?v1) ?v1)) :pattern ((fun_app$x (sup$ ?v0) ?v1)))))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) ?v1)) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v3)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) (fun_app$x (sup$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v3)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) (fun_app$x (sup$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$) (?v3 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v2 ?v3)) (less_eq$ (fun_app$x (sup$ ?v0) ?v2) (fun_app$x (sup$ ?v1) ?v3))) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (=> (= ?v1 (fun_app$x (sup$ ?v1) ?v0)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ (fun_app$x (sup$ ?v0) ?v1) ?v2) (=> (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ (fun_app$x (sup$ ?v0) ?v1) ?v2) (=> (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)) false)) false) ))
(assert (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 (fun_app$x (sup$ ?v0) ?v1)) (less_eq$ ?v1 ?v0)) ))
(check-sat)
(exit)

